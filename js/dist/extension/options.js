"use strict";(()=>{var Uy=Object.create;var Bf=Object.defineProperty;var qy=Object.getOwnPropertyDescriptor;var Ay=Object.getOwnPropertyNames;var Dy=Object.getPrototypeOf,Vy=Object.prototype.hasOwnProperty;var it=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var by=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of Ay(t))!Vy.call(e,o)&&o!==n&&Bf(e,o,{get:()=>t[o],enumerable:!(r=qy(t,o))||r.enumerable});return e};var at=(e,t,n)=>(n=e!=null?Uy(Dy(e)):{},by(t||!e||!e.__esModule?Bf(n,"default",{value:e,enumerable:!0}):n,e));var $f=it(B=>{"use strict";var Jr=Symbol.for("react.element"),zy=Symbol.for("react.portal"),Gy=Symbol.for("react.fragment"),jy=Symbol.for("react.strict_mode"),$y=Symbol.for("react.profiler"),_y=Symbol.for("react.provider"),Hy=Symbol.for("react.context"),Yy=Symbol.for("react.forward_ref"),Wy=Symbol.for("react.suspense"),Ky=Symbol.for("react.memo"),Qy=Symbol.for("react.lazy"),Ff=Symbol.iterator;function Xy(e){return e===null||typeof e!="object"?null:(e=Ff&&e[Ff]||e["@@iterator"],typeof e=="function"?e:null)}var Af={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Df=Object.assign,Vf={};function vn(e,t,n){this.props=e,this.context=t,this.refs=Vf,this.updater=n||Af}vn.prototype.isReactComponent={};vn.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};vn.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function bf(){}bf.prototype=vn.prototype;function nl(e,t,n){this.props=e,this.context=t,this.refs=Vf,this.updater=n||Af}var rl=nl.prototype=new bf;rl.constructor=nl;Df(rl,vn.prototype);rl.isPureReactComponent=!0;var Uf=Array.isArray,zf=Object.prototype.hasOwnProperty,ol={current:null},Gf={key:!0,ref:!0,__self:!0,__source:!0};function jf(e,t,n){var r,o={},i=null,a=null;if(t!=null)for(r in t.ref!==void 0&&(a=t.ref),t.key!==void 0&&(i=""+t.key),t)zf.call(t,r)&&!Gf.hasOwnProperty(r)&&(o[r]=t[r]);var s=arguments.length-2;if(s===1)o.children=n;else if(1<s){for(var l=Array(s),c=0;c<s;c++)l[c]=arguments[c+2];o.children=l}if(e&&e.defaultProps)for(r in s=e.defaultProps,s)o[r]===void 0&&(o[r]=s[r]);return{$$typeof:Jr,type:e,key:i,ref:a,props:o,_owner:ol.current}}function Zy(e,t){return{$$typeof:Jr,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function il(e){return typeof e=="object"&&e!==null&&e.$$typeof===Jr}function eh(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var qf=/\/+/g;function tl(e,t){return typeof e=="object"&&e!==null&&e.key!=null?eh(""+e.key):t.toString(36)}function Wo(e,t,n,r,o){var i=typeof e;(i==="undefined"||i==="boolean")&&(e=null);var a=!1;if(e===null)a=!0;else switch(i){case"string":case"number":a=!0;break;case"object":switch(e.$$typeof){case Jr:case zy:a=!0}}if(a)return a=e,o=o(a),e=r===""?"."+tl(a,0):r,Uf(o)?(n="",e!=null&&(n=e.replace(qf,"$&/")+"/"),Wo(o,t,n,"",function(c){return c})):o!=null&&(il(o)&&(o=Zy(o,n+(!o.key||a&&a.key===o.key?"":(""+o.key).replace(qf,"$&/")+"/")+e)),t.push(o)),1;if(a=0,r=r===""?".":r+":",Uf(e))for(var s=0;s<e.length;s++){i=e[s];var l=r+tl(i,s);a+=Wo(i,t,n,l,o)}else if(l=Xy(e),typeof l=="function")for(e=l.call(e),s=0;!(i=e.next()).done;)i=i.value,l=r+tl(i,s++),a+=Wo(i,t,n,l,o);else if(i==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return a}function Yo(e,t,n){if(e==null)return e;var r=[],o=0;return Wo(e,r,"","",function(i){return t.call(n,i,o++)}),r}function th(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var de={current:null},Ko={transition:null},nh={ReactCurrentDispatcher:de,ReactCurrentBatchConfig:Ko,ReactCurrentOwner:ol};B.Children={map:Yo,forEach:function(e,t,n){Yo(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return Yo(e,function(){t++}),t},toArray:function(e){return Yo(e,function(t){return t})||[]},only:function(e){if(!il(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};B.Component=vn;B.Fragment=Gy;B.Profiler=$y;B.PureComponent=nl;B.StrictMode=jy;B.Suspense=Wy;B.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nh;B.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=Df({},e.props),o=e.key,i=e.ref,a=e._owner;if(t!=null){if(t.ref!==void 0&&(i=t.ref,a=ol.current),t.key!==void 0&&(o=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(l in t)zf.call(t,l)&&!Gf.hasOwnProperty(l)&&(r[l]=t[l]===void 0&&s!==void 0?s[l]:t[l])}var l=arguments.length-2;if(l===1)r.children=n;else if(1<l){s=Array(l);for(var c=0;c<l;c++)s[c]=arguments[c+2];r.children=s}return{$$typeof:Jr,type:e.type,key:o,ref:i,props:r,_owner:a}};B.createContext=function(e){return e={$$typeof:Hy,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:_y,_context:e},e.Consumer=e};B.createElement=jf;B.createFactory=function(e){var t=jf.bind(null,e);return t.type=e,t};B.createRef=function(){return{current:null}};B.forwardRef=function(e){return{$$typeof:Yy,render:e}};B.isValidElement=il;B.lazy=function(e){return{$$typeof:Qy,_payload:{_status:-1,_result:e},_init:th}};B.memo=function(e,t){return{$$typeof:Ky,type:e,compare:t===void 0?null:t}};B.startTransition=function(e){var t=Ko.transition;Ko.transition={};try{e()}finally{Ko.transition=t}};B.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")};B.useCallback=function(e,t){return de.current.useCallback(e,t)};B.useContext=function(e){return de.current.useContext(e)};B.useDebugValue=function(){};B.useDeferredValue=function(e){return de.current.useDeferredValue(e)};B.useEffect=function(e,t){return de.current.useEffect(e,t)};B.useId=function(){return de.current.useId()};B.useImperativeHandle=function(e,t,n){return de.current.useImperativeHandle(e,t,n)};B.useInsertionEffect=function(e,t){return de.current.useInsertionEffect(e,t)};B.useLayoutEffect=function(e,t){return de.current.useLayoutEffect(e,t)};B.useMemo=function(e,t){return de.current.useMemo(e,t)};B.useReducer=function(e,t,n){return de.current.useReducer(e,t,n)};B.useRef=function(e){return de.current.useRef(e)};B.useState=function(e){return de.current.useState(e)};B.useSyncExternalStore=function(e,t,n){return de.current.useSyncExternalStore(e,t,n)};B.useTransition=function(){return de.current.useTransition()};B.version="18.2.0"});var st=it((qv,_f)=>{"use strict";_f.exports=$f()});var nd=it(D=>{"use strict";function ul(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(0<Qo(o,t))e[r]=t,e[n]=o,n=r;else break e}}function be(e){return e.length===0?null:e[0]}function Zo(e){if(e.length===0)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var a=2*(r+1)-1,s=e[a],l=a+1,c=e[l];if(0>Qo(s,n))l<o&&0>Qo(c,s)?(e[r]=c,e[l]=n,r=l):(e[r]=s,e[a]=n,r=a);else if(l<o&&0>Qo(c,n))e[r]=c,e[l]=n,r=l;else break e}}return t}function Qo(e,t){var n=e.sortIndex-t.sortIndex;return n!==0?n:e.id-t.id}typeof performance=="object"&&typeof performance.now=="function"?(Hf=performance,D.unstable_now=function(){return Hf.now()}):(al=Date,Yf=al.now(),D.unstable_now=function(){return al.now()-Yf});var Hf,al,Yf,Qe=[],xt=[],rh=1,Le=null,se=3,ei=!1,Zt=!1,Or=!1,Qf=typeof setTimeout=="function"?setTimeout:null,Xf=typeof clearTimeout=="function"?clearTimeout:null,Wf=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function cl(e){for(var t=be(xt);t!==null;){if(t.callback===null)Zo(xt);else if(t.startTime<=e)Zo(xt),t.sortIndex=t.expirationTime,ul(Qe,t);else break;t=be(xt)}}function fl(e){if(Or=!1,cl(e),!Zt)if(be(Qe)!==null)Zt=!0,ml(dl);else{var t=be(xt);t!==null&&pl(fl,t.startTime-e)}}function dl(e,t){Zt=!1,Or&&(Or=!1,Xf(Ir),Ir=-1),ei=!0;var n=se;try{for(cl(t),Le=be(Qe);Le!==null&&(!(Le.expirationTime>t)||e&&!td());){var r=Le.callback;if(typeof r=="function"){Le.callback=null,se=Le.priorityLevel;var o=r(Le.expirationTime<=t);t=D.unstable_now(),typeof o=="function"?Le.callback=o:Le===be(Qe)&&Zo(Qe),cl(t)}else Zo(Qe);Le=be(Qe)}if(Le!==null)var i=!0;else{var a=be(xt);a!==null&&pl(fl,a.startTime-t),i=!1}return i}finally{Le=null,se=n,ei=!1}}var ti=!1,Xo=null,Ir=-1,Zf=5,ed=-1;function td(){return!(D.unstable_now()-ed<Zf)}function sl(){if(Xo!==null){var e=D.unstable_now();ed=e;var t=!0;try{t=Xo(!0,e)}finally{t?Nr():(ti=!1,Xo=null)}}else ti=!1}var Nr;typeof Wf=="function"?Nr=function(){Wf(sl)}:typeof MessageChannel<"u"?(ll=new MessageChannel,Kf=ll.port2,ll.port1.onmessage=sl,Nr=function(){Kf.postMessage(null)}):Nr=function(){Qf(sl,0)};var ll,Kf;function ml(e){Xo=e,ti||(ti=!0,Nr())}function pl(e,t){Ir=Qf(function(){e(D.unstable_now())},t)}D.unstable_IdlePriority=5;D.unstable_ImmediatePriority=1;D.unstable_LowPriority=4;D.unstable_NormalPriority=3;D.unstable_Profiling=null;D.unstable_UserBlockingPriority=2;D.unstable_cancelCallback=function(e){e.callback=null};D.unstable_continueExecution=function(){Zt||ei||(Zt=!0,ml(dl))};D.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Zf=0<e?Math.floor(1e3/e):5};D.unstable_getCurrentPriorityLevel=function(){return se};D.unstable_getFirstCallbackNode=function(){return be(Qe)};D.unstable_next=function(e){switch(se){case 1:case 2:case 3:var t=3;break;default:t=se}var n=se;se=t;try{return e()}finally{se=n}};D.unstable_pauseExecution=function(){};D.unstable_requestPaint=function(){};D.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=se;se=e;try{return t()}finally{se=n}};D.unstable_scheduleCallback=function(e,t,n){var r=D.unstable_now();switch(typeof n=="object"&&n!==null?(n=n.delay,n=typeof n=="number"&&0<n?r+n:r):n=r,e){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return o=n+o,e={id:rh++,callback:t,priorityLevel:e,startTime:n,expirationTime:o,sortIndex:-1},n>r?(e.sortIndex=n,ul(xt,e),be(Qe)===null&&e===be(xt)&&(Or?(Xf(Ir),Ir=-1):Or=!0,pl(fl,n-r))):(e.sortIndex=o,ul(Qe,e),Zt||ei||(Zt=!0,ml(dl))),e};D.unstable_shouldYield=td;D.unstable_wrapCallback=function(e){var t=se;return function(){var n=se;se=t;try{return e.apply(this,arguments)}finally{se=n}}}});var od=it((Dv,rd)=>{"use strict";rd.exports=nd()});var cg=it(Oe=>{"use strict";var fm=st(),Je=od();function R(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var dm=new Set,Xr={};function mn(e,t){Vn(e,t),Vn(e+"Capture",t)}function Vn(e,t){for(Xr[e]=t,e=0;e<t.length;e++)dm.add(t[e])}var mt=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),ql=Object.prototype.hasOwnProperty,oh=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,id={},ad={};function ih(e){return ql.call(ad,e)?!0:ql.call(id,e)?!1:oh.test(e)?ad[e]=!0:(id[e]=!0,!1)}function ah(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function sh(e,t,n,r){if(t===null||typeof t>"u"||ah(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function ge(e,t,n,r,o,i,a){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var ae={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ae[e]=new ge(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ae[t]=new ge(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){ae[e]=new ge(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ae[e]=new ge(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ae[e]=new ge(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){ae[e]=new ge(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){ae[e]=new ge(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){ae[e]=new ge(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){ae[e]=new ge(e,5,!1,e.toLowerCase(),null,!1,!1)});var Ou=/[\-:]([a-z])/g;function Iu(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Ou,Iu);ae[t]=new ge(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Ou,Iu);ae[t]=new ge(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Ou,Iu);ae[t]=new ge(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){ae[e]=new ge(e,1,!1,e.toLowerCase(),null,!1,!1)});ae.xlinkHref=new ge("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){ae[e]=new ge(e,1,!1,e.toLowerCase(),null,!0,!0)});function Cu(e,t,n,r){var o=ae.hasOwnProperty(t)?ae[t]:null;(o!==null?o.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(sh(t,n,o,r)&&(n=null),r||o===null?ih(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=n===null?o.type===3?!1:"":n:(t=o.attributeName,r=o.attributeNamespace,n===null?e.removeAttribute(t):(o=o.type,n=o===3||o===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var ht=fm.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,ni=Symbol.for("react.element"),kn=Symbol.for("react.portal"),Pn=Symbol.for("react.fragment"),Mu=Symbol.for("react.strict_mode"),Al=Symbol.for("react.profiler"),mm=Symbol.for("react.provider"),pm=Symbol.for("react.context"),Lu=Symbol.for("react.forward_ref"),Dl=Symbol.for("react.suspense"),Vl=Symbol.for("react.suspense_list"),Bu=Symbol.for("react.memo"),Jt=Symbol.for("react.lazy");Symbol.for("react.scope");Symbol.for("react.debug_trace_mode");var gm=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden");Symbol.for("react.cache");Symbol.for("react.tracing_marker");var sd=Symbol.iterator;function Cr(e){return e===null||typeof e!="object"?null:(e=sd&&e[sd]||e["@@iterator"],typeof e=="function"?e:null)}var Y=Object.assign,gl;function Dr(e){if(gl===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);gl=t&&t[1]||""}return`
`+gl+e}var yl=!1;function hl(e,t){if(!e||yl)return"";yl=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(c){var r=c}Reflect.construct(e,[],t)}else{try{t.call()}catch(c){r=c}e.call(t.prototype)}else{try{throw Error()}catch(c){r=c}e()}}catch(c){if(c&&r&&typeof c.stack=="string"){for(var o=c.stack.split(`
`),i=r.stack.split(`
`),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(a!==1||s!==1)do if(a--,s--,0>s||o[a]!==i[s]){var l=`
`+o[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}while(1<=a&&0<=s);break}}}finally{yl=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Dr(e):""}function lh(e){switch(e.tag){case 5:return Dr(e.type);case 16:return Dr("Lazy");case 13:return Dr("Suspense");case 19:return Dr("SuspenseList");case 0:case 2:case 15:return e=hl(e.type,!1),e;case 11:return e=hl(e.type.render,!1),e;case 1:return e=hl(e.type,!0),e;default:return""}}function bl(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Pn:return"Fragment";case kn:return"Portal";case Al:return"Profiler";case Mu:return"StrictMode";case Dl:return"Suspense";case Vl:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case pm:return(e.displayName||"Context")+".Consumer";case mm:return(e._context.displayName||"Context")+".Provider";case Lu:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case Bu:return t=e.displayName||null,t!==null?t:bl(e.type)||"Memo";case Jt:t=e._payload,e=e._init;try{return bl(e(t))}catch{}}return null}function uh(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return bl(t);case 8:return t===Mu?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function bt(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function ym(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function ch(e){var t=ym(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(a){r=""+a,i.call(this,a)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(a){r=""+a},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function ri(e){e._valueTracker||(e._valueTracker=ch(e))}function hm(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ym(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function Ci(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function zl(e,t){var n=t.checked;return Y({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function ld(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=bt(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function wm(e,t){t=t.checked,t!=null&&Cu(e,"checked",t,!1)}function Gl(e,t){wm(e,t);var n=bt(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?jl(e,t.type,n):t.hasOwnProperty("defaultValue")&&jl(e,t.type,bt(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function ud(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function jl(e,t,n){(t!=="number"||Ci(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var Vr=Array.isArray;function Bn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+bt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n){e[o].selected=!0,r&&(e[o].defaultSelected=!0);return}t!==null||e[o].disabled||(t=e[o])}t!==null&&(t.selected=!0)}}function $l(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(R(91));return Y({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function cd(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(R(92));if(Vr(n)){if(1<n.length)throw Error(R(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:bt(n)}}function vm(e,t){var n=bt(t.value),r=bt(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function fd(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function Sm(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function _l(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?Sm(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var oi,Tm=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,o)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(oi=oi||document.createElement("div"),oi.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=oi.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Zr(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var Gr={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},fh=["Webkit","ms","Moz","O"];Object.keys(Gr).forEach(function(e){fh.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Gr[t]=Gr[e]})});function km(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||Gr.hasOwnProperty(e)&&Gr[e]?(""+t).trim():t+"px"}function Pm(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,o=km(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}var dh=Y({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Hl(e,t){if(t){if(dh[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(R(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(R(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(R(61))}if(t.style!=null&&typeof t.style!="object")throw Error(R(62))}}function Yl(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Wl=null;function Fu(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var Kl=null,Fn=null,Un=null;function dd(e){if(e=wo(e)){if(typeof Kl!="function")throw Error(R(280));var t=e.stateNode;t&&(t=ia(t),Kl(e.stateNode,e.type,t))}}function Rm(e){Fn?Un?Un.push(e):Un=[e]:Fn=e}function xm(){if(Fn){var e=Fn,t=Un;if(Un=Fn=null,dd(e),t)for(e=0;e<t.length;e++)dd(t[e])}}function Em(e,t){return e(t)}function Jm(){}var wl=!1;function Nm(e,t,n){if(wl)return e(t,n);wl=!0;try{return Em(e,t,n)}finally{wl=!1,(Fn!==null||Un!==null)&&(Jm(),xm())}}function eo(e,t){var n=e.stateNode;if(n===null)return null;var r=ia(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(R(231,t,typeof n));return n}var Ql=!1;if(mt)try{Sn={},Object.defineProperty(Sn,"passive",{get:function(){Ql=!0}}),window.addEventListener("test",Sn,Sn),window.removeEventListener("test",Sn,Sn)}catch{Ql=!1}var Sn;function mh(e,t,n,r,o,i,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(d){this.onError(d)}}var jr=!1,Mi=null,Li=!1,Xl=null,ph={onError:function(e){jr=!0,Mi=e}};function gh(e,t,n,r,o,i,a,s,l){jr=!1,Mi=null,mh.apply(ph,arguments)}function yh(e,t,n,r,o,i,a,s,l){if(gh.apply(this,arguments),jr){if(jr){var c=Mi;jr=!1,Mi=null}else throw Error(R(198));Li||(Li=!0,Xl=c)}}function pn(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function Om(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function md(e){if(pn(e)!==e)throw Error(R(188))}function hh(e){var t=e.alternate;if(!t){if(t=pn(e),t===null)throw Error(R(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(o===null)break;var i=o.alternate;if(i===null){if(r=o.return,r!==null){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return md(o),e;if(i===r)return md(o),t;i=i.sibling}throw Error(R(188))}if(n.return!==r.return)n=o,r=i;else{for(var a=!1,s=o.child;s;){if(s===n){a=!0,n=o,r=i;break}if(s===r){a=!0,r=o,n=i;break}s=s.sibling}if(!a){for(s=i.child;s;){if(s===n){a=!0,n=i,r=o;break}if(s===r){a=!0,r=i,n=o;break}s=s.sibling}if(!a)throw Error(R(189))}}if(n.alternate!==r)throw Error(R(190))}if(n.tag!==3)throw Error(R(188));return n.stateNode.current===n?e:t}function Im(e){return e=hh(e),e!==null?Cm(e):null}function Cm(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=Cm(e);if(t!==null)return t;e=e.sibling}return null}var Mm=Je.unstable_scheduleCallback,pd=Je.unstable_cancelCallback,wh=Je.unstable_shouldYield,vh=Je.unstable_requestPaint,K=Je.unstable_now,Sh=Je.unstable_getCurrentPriorityLevel,Uu=Je.unstable_ImmediatePriority,Lm=Je.unstable_UserBlockingPriority,Bi=Je.unstable_NormalPriority,Th=Je.unstable_LowPriority,Bm=Je.unstable_IdlePriority,ta=null,tt=null;function kh(e){if(tt&&typeof tt.onCommitFiberRoot=="function")try{tt.onCommitFiberRoot(ta,e,void 0,(e.current.flags&128)===128)}catch{}}var _e=Math.clz32?Math.clz32:xh,Ph=Math.log,Rh=Math.LN2;function xh(e){return e>>>=0,e===0?32:31-(Ph(e)/Rh|0)|0}var ii=64,ai=4194304;function br(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Fi(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=n&268435455;if(a!==0){var s=a&~o;s!==0?r=br(s):(i&=a,i!==0&&(r=br(i)))}else a=n&~o,a!==0?r=br(a):i!==0&&(r=br(i));if(r===0)return 0;if(t!==0&&t!==r&&!(t&o)&&(o=r&-r,i=t&-t,o>=i||o===16&&(i&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-_e(t),o=1<<n,r|=e[n],t&=~o;return r}function Eh(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function Jh(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-_e(i),s=1<<a,l=o[a];l===-1?(!(s&n)||s&r)&&(o[a]=Eh(s,t)):l<=t&&(e.expiredLanes|=s),i&=~s}}function Zl(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function Fm(){var e=ii;return ii<<=1,!(ii&4194240)&&(ii=64),e}function vl(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function yo(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-_e(t),e[t]=n}function Nh(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-_e(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}function qu(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-_e(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var q=0;function Um(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var qm,Au,Am,Dm,Vm,eu=!1,si=[],Lt=null,Bt=null,Ft=null,to=new Map,no=new Map,Ot=[],Oh="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function gd(e,t){switch(e){case"focusin":case"focusout":Lt=null;break;case"dragenter":case"dragleave":Bt=null;break;case"mouseover":case"mouseout":Ft=null;break;case"pointerover":case"pointerout":to.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":no.delete(t.pointerId)}}function Mr(e,t,n,r,o,i){return e===null||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},t!==null&&(t=wo(t),t!==null&&Au(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,o!==null&&t.indexOf(o)===-1&&t.push(o),e)}function Ih(e,t,n,r,o){switch(t){case"focusin":return Lt=Mr(Lt,e,t,n,r,o),!0;case"dragenter":return Bt=Mr(Bt,e,t,n,r,o),!0;case"mouseover":return Ft=Mr(Ft,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return to.set(i,Mr(to.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,no.set(i,Mr(no.get(i)||null,e,t,n,r,o)),!0}return!1}function bm(e){var t=nn(e.target);if(t!==null){var n=pn(t);if(n!==null){if(t=n.tag,t===13){if(t=Om(n),t!==null){e.blockedOn=t,Vm(e.priority,function(){Am(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Ti(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=tu(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);Wl=r,n.target.dispatchEvent(r),Wl=null}else return t=wo(n),t!==null&&Au(t),e.blockedOn=n,!1;t.shift()}return!0}function yd(e,t,n){Ti(e)&&n.delete(t)}function Ch(){eu=!1,Lt!==null&&Ti(Lt)&&(Lt=null),Bt!==null&&Ti(Bt)&&(Bt=null),Ft!==null&&Ti(Ft)&&(Ft=null),to.forEach(yd),no.forEach(yd)}function Lr(e,t){e.blockedOn===t&&(e.blockedOn=null,eu||(eu=!0,Je.unstable_scheduleCallback(Je.unstable_NormalPriority,Ch)))}function ro(e){function t(o){return Lr(o,e)}if(0<si.length){Lr(si[0],e);for(var n=1;n<si.length;n++){var r=si[n];r.blockedOn===e&&(r.blockedOn=null)}}for(Lt!==null&&Lr(Lt,e),Bt!==null&&Lr(Bt,e),Ft!==null&&Lr(Ft,e),to.forEach(t),no.forEach(t),n=0;n<Ot.length;n++)r=Ot[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<Ot.length&&(n=Ot[0],n.blockedOn===null);)bm(n),n.blockedOn===null&&Ot.shift()}var qn=ht.ReactCurrentBatchConfig,Ui=!0;function Mh(e,t,n,r){var o=q,i=qn.transition;qn.transition=null;try{q=1,Du(e,t,n,r)}finally{q=o,qn.transition=i}}function Lh(e,t,n,r){var o=q,i=qn.transition;qn.transition=null;try{q=4,Du(e,t,n,r)}finally{q=o,qn.transition=i}}function Du(e,t,n,r){if(Ui){var o=tu(e,t,n,r);if(o===null)El(e,t,r,qi,n),gd(e,r);else if(Ih(o,e,t,n,r))r.stopPropagation();else if(gd(e,r),t&4&&-1<Oh.indexOf(e)){for(;o!==null;){var i=wo(o);if(i!==null&&qm(i),i=tu(e,t,n,r),i===null&&El(e,t,r,qi,n),i===o)break;o=i}o!==null&&r.stopPropagation()}else El(e,t,r,null,n)}}var qi=null;function tu(e,t,n,r){if(qi=null,e=Fu(r),e=nn(e),e!==null)if(t=pn(e),t===null)e=null;else if(n=t.tag,n===13){if(e=Om(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return qi=e,null}function zm(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Sh()){case Uu:return 1;case Lm:return 4;case Bi:case Th:return 16;case Bm:return 536870912;default:return 16}default:return 16}}var Ct=null,Vu=null,ki=null;function Gm(){if(ki)return ki;var e,t=Vu,n=t.length,r,o="value"in Ct?Ct.value:Ct.textContent,i=o.length;for(e=0;e<n&&t[e]===o[e];e++);var a=n-e;for(r=1;r<=a&&t[n-r]===o[i-r];r++);return ki=o.slice(e,1<r?1-r:void 0)}function Pi(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function li(){return!0}function hd(){return!1}function Ne(e){function t(n,r,o,i,a){this._reactName=n,this._targetInst=o,this.type=r,this.nativeEvent=i,this.target=a,this.currentTarget=null;for(var s in e)e.hasOwnProperty(s)&&(n=e[s],this[s]=n?n(i):i[s]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?li:hd,this.isPropagationStopped=hd,this}return Y(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=li)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=li)},persist:function(){},isPersistent:li}),t}var Hn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},bu=Ne(Hn),ho=Y({},Hn,{view:0,detail:0}),Bh=Ne(ho),Sl,Tl,Br,na=Y({},ho,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zu,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==Br&&(Br&&e.type==="mousemove"?(Sl=e.screenX-Br.screenX,Tl=e.screenY-Br.screenY):Tl=Sl=0,Br=e),Sl)},movementY:function(e){return"movementY"in e?e.movementY:Tl}}),wd=Ne(na),Fh=Y({},na,{dataTransfer:0}),Uh=Ne(Fh),qh=Y({},ho,{relatedTarget:0}),kl=Ne(qh),Ah=Y({},Hn,{animationName:0,elapsedTime:0,pseudoElement:0}),Dh=Ne(Ah),Vh=Y({},Hn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bh=Ne(Vh),zh=Y({},Hn,{data:0}),vd=Ne(zh),Gh={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},jh={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},$h={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function _h(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=$h[e])?!!t[e]:!1}function zu(){return _h}var Hh=Y({},ho,{key:function(e){if(e.key){var t=Gh[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Pi(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?jh[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zu,charCode:function(e){return e.type==="keypress"?Pi(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Pi(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),Yh=Ne(Hh),Wh=Y({},na,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Sd=Ne(Wh),Kh=Y({},ho,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zu}),Qh=Ne(Kh),Xh=Y({},Hn,{propertyName:0,elapsedTime:0,pseudoElement:0}),Zh=Ne(Xh),e0=Y({},na,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),t0=Ne(e0),n0=[9,13,27,32],Gu=mt&&"CompositionEvent"in window,$r=null;mt&&"documentMode"in document&&($r=document.documentMode);var r0=mt&&"TextEvent"in window&&!$r,jm=mt&&(!Gu||$r&&8<$r&&11>=$r),Td=String.fromCharCode(32),kd=!1;function $m(e,t){switch(e){case"keyup":return n0.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function _m(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var Rn=!1;function o0(e,t){switch(e){case"compositionend":return _m(t);case"keypress":return t.which!==32?null:(kd=!0,Td);case"textInput":return e=t.data,e===Td&&kd?null:e;default:return null}}function i0(e,t){if(Rn)return e==="compositionend"||!Gu&&$m(e,t)?(e=Gm(),ki=Vu=Ct=null,Rn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return jm&&t.locale!=="ko"?null:t.data;default:return null}}var a0={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Pd(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!a0[e.type]:t==="textarea"}function Hm(e,t,n,r){Rm(r),t=Ai(t,"onChange"),0<t.length&&(n=new bu("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var _r=null,oo=null;function s0(e){op(e,0)}function ra(e){var t=Jn(e);if(hm(t))return e}function l0(e,t){if(e==="change")return t}var Ym=!1;mt&&(mt?(ci="oninput"in document,ci||(Pl=document.createElement("div"),Pl.setAttribute("oninput","return;"),ci=typeof Pl.oninput=="function"),ui=ci):ui=!1,Ym=ui&&(!document.documentMode||9<document.documentMode));var ui,ci,Pl;function Rd(){_r&&(_r.detachEvent("onpropertychange",Wm),oo=_r=null)}function Wm(e){if(e.propertyName==="value"&&ra(oo)){var t=[];Hm(t,oo,e,Fu(e)),Nm(s0,t)}}function u0(e,t,n){e==="focusin"?(Rd(),_r=t,oo=n,_r.attachEvent("onpropertychange",Wm)):e==="focusout"&&Rd()}function c0(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return ra(oo)}function f0(e,t){if(e==="click")return ra(t)}function d0(e,t){if(e==="input"||e==="change")return ra(t)}function m0(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Ye=typeof Object.is=="function"?Object.is:m0;function io(e,t){if(Ye(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!ql.call(t,o)||!Ye(e[o],t[o]))return!1}return!0}function xd(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ed(e,t){var n=xd(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=xd(n)}}function Km(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?Km(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Qm(){for(var e=window,t=Ci();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=Ci(e.document)}return t}function ju(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function p0(e){var t=Qm(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&Km(n.ownerDocument.documentElement,n)){if(r!==null&&ju(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=r.end===void 0?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=Ed(n,i);var a=Ed(n,r);o&&a&&(e.rangeCount!==1||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&(t=t.createRange(),t.setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var g0=mt&&"documentMode"in document&&11>=document.documentMode,xn=null,nu=null,Hr=null,ru=!1;function Jd(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;ru||xn==null||xn!==Ci(r)||(r=xn,"selectionStart"in r&&ju(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),Hr&&io(Hr,r)||(Hr=r,r=Ai(nu,"onSelect"),0<r.length&&(t=new bu("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=xn)))}function fi(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var En={animationend:fi("Animation","AnimationEnd"),animationiteration:fi("Animation","AnimationIteration"),animationstart:fi("Animation","AnimationStart"),transitionend:fi("Transition","TransitionEnd")},Rl={},Xm={};mt&&(Xm=document.createElement("div").style,"AnimationEvent"in window||(delete En.animationend.animation,delete En.animationiteration.animation,delete En.animationstart.animation),"TransitionEvent"in window||delete En.transitionend.transition);function oa(e){if(Rl[e])return Rl[e];if(!En[e])return e;var t=En[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in Xm)return Rl[e]=t[n];return e}var Zm=oa("animationend"),ep=oa("animationiteration"),tp=oa("animationstart"),np=oa("transitionend"),rp=new Map,Nd="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Gt(e,t){rp.set(e,t),mn(t,[e])}for(di=0;di<Nd.length;di++)mi=Nd[di],Od=mi.toLowerCase(),Id=mi[0].toUpperCase()+mi.slice(1),Gt(Od,"on"+Id);var mi,Od,Id,di;Gt(Zm,"onAnimationEnd");Gt(ep,"onAnimationIteration");Gt(tp,"onAnimationStart");Gt("dblclick","onDoubleClick");Gt("focusin","onFocus");Gt("focusout","onBlur");Gt(np,"onTransitionEnd");Vn("onMouseEnter",["mouseout","mouseover"]);Vn("onMouseLeave",["mouseout","mouseover"]);Vn("onPointerEnter",["pointerout","pointerover"]);Vn("onPointerLeave",["pointerout","pointerover"]);mn("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));mn("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));mn("onBeforeInput",["compositionend","keypress","textInput","paste"]);mn("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));mn("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));mn("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var zr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),y0=new Set("cancel close invalid load scroll toggle".split(" ").concat(zr));function Cd(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,yh(r,t,void 0,e),e.currentTarget=null}function op(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==i&&o.isPropagationStopped())break e;Cd(o,s,c),i=l}else for(a=0;a<r.length;a++){if(s=r[a],l=s.instance,c=s.currentTarget,s=s.listener,l!==i&&o.isPropagationStopped())break e;Cd(o,s,c),i=l}}}if(Li)throw e=Xl,Li=!1,Xl=null,e}function b(e,t){var n=t[lu];n===void 0&&(n=t[lu]=new Set);var r=e+"__bubble";n.has(r)||(ip(t,e,2,!1),n.add(r))}function xl(e,t,n){var r=0;t&&(r|=4),ip(n,e,r,t)}var pi="_reactListening"+Math.random().toString(36).slice(2);function ao(e){if(!e[pi]){e[pi]=!0,dm.forEach(function(n){n!=="selectionchange"&&(y0.has(n)||xl(n,!1,e),xl(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[pi]||(t[pi]=!0,xl("selectionchange",!1,t))}}function ip(e,t,n,r){switch(zm(t)){case 1:var o=Mh;break;case 4:o=Lh;break;default:o=Du}n=o.bind(null,t,n,e),o=void 0,!Ql||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(o=!0),r?o!==void 0?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):o!==void 0?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function El(e,t,n,r,o){var i=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var a=r.tag;if(a===3||a===4){var s=r.stateNode.containerInfo;if(s===o||s.nodeType===8&&s.parentNode===o)break;if(a===4)for(a=r.return;a!==null;){var l=a.tag;if((l===3||l===4)&&(l=a.stateNode.containerInfo,l===o||l.nodeType===8&&l.parentNode===o))return;a=a.return}for(;s!==null;){if(a=nn(s),a===null)return;if(l=a.tag,l===5||l===6){r=i=a;continue e}s=s.parentNode}}r=r.return}Nm(function(){var c=i,d=Fu(n),v=[];e:{var g=rp.get(e);if(g!==void 0){var m=bu,S=e;switch(e){case"keypress":if(Pi(n)===0)break e;case"keydown":case"keyup":m=Yh;break;case"focusin":S="focus",m=kl;break;case"focusout":S="blur",m=kl;break;case"beforeblur":case"afterblur":m=kl;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":m=wd;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":m=Uh;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":m=Qh;break;case Zm:case ep:case tp:m=Dh;break;case np:m=Zh;break;case"scroll":m=Bh;break;case"wheel":m=t0;break;case"copy":case"cut":case"paste":m=bh;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":m=Sd}var k=(t&4)!==0,O=!k&&e==="scroll",p=k?g!==null?g+"Capture":null:g;k=[];for(var f=c,w;f!==null;){w=f;var P=w.stateNode;if(w.tag===5&&P!==null&&(w=P,p!==null&&(P=eo(f,p),P!=null&&k.push(so(f,P,w)))),O)break;f=f.return}0<k.length&&(g=new m(g,S,null,n,d),v.push({event:g,listeners:k}))}}if(!(t&7)){e:{if(g=e==="mouseover"||e==="pointerover",m=e==="mouseout"||e==="pointerout",g&&n!==Wl&&(S=n.relatedTarget||n.fromElement)&&(nn(S)||S[pt]))break e;if((m||g)&&(g=d.window===d?d:(g=d.ownerDocument)?g.defaultView||g.parentWindow:window,m?(S=n.relatedTarget||n.toElement,m=c,S=S?nn(S):null,S!==null&&(O=pn(S),S!==O||S.tag!==5&&S.tag!==6)&&(S=null)):(m=null,S=c),m!==S)){if(k=wd,P="onMouseLeave",p="onMouseEnter",f="mouse",(e==="pointerout"||e==="pointerover")&&(k=Sd,P="onPointerLeave",p="onPointerEnter",f="pointer"),O=m==null?g:Jn(m),w=S==null?g:Jn(S),g=new k(P,f+"leave",m,n,d),g.target=O,g.relatedTarget=w,P=null,nn(d)===c&&(k=new k(p,f+"enter",S,n,d),k.target=w,k.relatedTarget=O,P=k),O=P,m&&S)t:{for(k=m,p=S,f=0,w=k;w;w=Tn(w))f++;for(w=0,P=p;P;P=Tn(P))w++;for(;0<f-w;)k=Tn(k),f--;for(;0<w-f;)p=Tn(p),w--;for(;f--;){if(k===p||p!==null&&k===p.alternate)break t;k=Tn(k),p=Tn(p)}k=null}else k=null;m!==null&&Md(v,g,m,k,!1),S!==null&&O!==null&&Md(v,O,S,k,!0)}}e:{if(g=c?Jn(c):window,m=g.nodeName&&g.nodeName.toLowerCase(),m==="select"||m==="input"&&g.type==="file")var E=l0;else if(Pd(g))if(Ym)E=d0;else{E=c0;var N=u0}else(m=g.nodeName)&&m.toLowerCase()==="input"&&(g.type==="checkbox"||g.type==="radio")&&(E=f0);if(E&&(E=E(e,c))){Hm(v,E,n,d);break e}N&&N(e,g,c),e==="focusout"&&(N=g._wrapperState)&&N.controlled&&g.type==="number"&&jl(g,"number",g.value)}switch(N=c?Jn(c):window,e){case"focusin":(Pd(N)||N.contentEditable==="true")&&(xn=N,nu=c,Hr=null);break;case"focusout":Hr=nu=xn=null;break;case"mousedown":ru=!0;break;case"contextmenu":case"mouseup":case"dragend":ru=!1,Jd(v,n,d);break;case"selectionchange":if(g0)break;case"keydown":case"keyup":Jd(v,n,d)}var I;if(Gu)e:{switch(e){case"compositionstart":var C="onCompositionStart";break e;case"compositionend":C="onCompositionEnd";break e;case"compositionupdate":C="onCompositionUpdate";break e}C=void 0}else Rn?$m(e,n)&&(C="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(C="onCompositionStart");C&&(jm&&n.locale!=="ko"&&(Rn||C!=="onCompositionStart"?C==="onCompositionEnd"&&Rn&&(I=Gm()):(Ct=d,Vu="value"in Ct?Ct.value:Ct.textContent,Rn=!0)),N=Ai(c,C),0<N.length&&(C=new vd(C,e,null,n,d),v.push({event:C,listeners:N}),I?C.data=I:(I=_m(n),I!==null&&(C.data=I)))),(I=r0?o0(e,n):i0(e,n))&&(c=Ai(c,"onBeforeInput"),0<c.length&&(d=new vd("onBeforeInput","beforeinput",null,n,d),v.push({event:d,listeners:c}),d.data=I))}op(v,t)})}function so(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ai(e,t){for(var n=t+"Capture",r=[];e!==null;){var o=e,i=o.stateNode;o.tag===5&&i!==null&&(o=i,i=eo(e,n),i!=null&&r.unshift(so(e,i,o)),i=eo(e,t),i!=null&&r.push(so(e,i,o))),e=e.return}return r}function Tn(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function Md(e,t,n,r,o){for(var i=t._reactName,a=[];n!==null&&n!==r;){var s=n,l=s.alternate,c=s.stateNode;if(l!==null&&l===r)break;s.tag===5&&c!==null&&(s=c,o?(l=eo(n,i),l!=null&&a.unshift(so(n,l,s))):o||(l=eo(n,i),l!=null&&a.push(so(n,l,s)))),n=n.return}a.length!==0&&e.push({event:t,listeners:a})}var h0=/\r\n?/g,w0=/\u0000|\uFFFD/g;function Ld(e){return(typeof e=="string"?e:""+e).replace(h0,`
`).replace(w0,"")}function gi(e,t,n){if(t=Ld(t),Ld(e)!==t&&n)throw Error(R(425))}function Di(){}var ou=null,iu=null;function au(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var su=typeof setTimeout=="function"?setTimeout:void 0,v0=typeof clearTimeout=="function"?clearTimeout:void 0,Bd=typeof Promise=="function"?Promise:void 0,S0=typeof queueMicrotask=="function"?queueMicrotask:typeof Bd<"u"?function(e){return Bd.resolve(null).then(e).catch(T0)}:su;function T0(e){setTimeout(function(){throw e})}function Jl(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&o.nodeType===8)if(n=o.data,n==="/$"){if(r===0){e.removeChild(o),ro(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=o}while(n);ro(t)}function Ut(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function Fd(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var Yn=Math.random().toString(36).slice(2),et="__reactFiber$"+Yn,lo="__reactProps$"+Yn,pt="__reactContainer$"+Yn,lu="__reactEvents$"+Yn,k0="__reactListeners$"+Yn,P0="__reactHandles$"+Yn;function nn(e){var t=e[et];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pt]||n[et]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=Fd(e);e!==null;){if(n=e[et])return n;e=Fd(e)}return t}e=n,n=e.parentNode}return null}function wo(e){return e=e[et]||e[pt],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function Jn(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(R(33))}function ia(e){return e[lo]||null}var uu=[],Nn=-1;function jt(e){return{current:e}}function z(e){0>Nn||(e.current=uu[Nn],uu[Nn]=null,Nn--)}function V(e,t){Nn++,uu[Nn]=e.current,e.current=t}var zt={},fe=jt(zt),ve=jt(!1),ln=zt;function bn(e,t){var n=e.type.contextTypes;if(!n)return zt;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o={},i;for(i in n)o[i]=t[i];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Se(e){return e=e.childContextTypes,e!=null}function Vi(){z(ve),z(fe)}function Ud(e,t,n){if(fe.current!==zt)throw Error(R(168));V(fe,t),V(ve,n)}function ap(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var o in r)if(!(o in t))throw Error(R(108,uh(e)||"Unknown",o));return Y({},n,r)}function bi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||zt,ln=fe.current,V(fe,e),V(ve,ve.current),!0}function qd(e,t,n){var r=e.stateNode;if(!r)throw Error(R(169));n?(e=ap(e,t,ln),r.__reactInternalMemoizedMergedChildContext=e,z(ve),z(fe),V(fe,e)):z(ve),V(ve,n)}var ut=null,aa=!1,Nl=!1;function sp(e){ut===null?ut=[e]:ut.push(e)}function R0(e){aa=!0,sp(e)}function $t(){if(!Nl&&ut!==null){Nl=!0;var e=0,t=q;try{var n=ut;for(q=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}ut=null,aa=!1}catch(o){throw ut!==null&&(ut=ut.slice(e+1)),Mm(Uu,$t),o}finally{q=t,Nl=!1}}return null}var On=[],In=0,zi=null,Gi=0,Be=[],Fe=0,un=null,ct=1,ft="";function en(e,t){On[In++]=Gi,On[In++]=zi,zi=e,Gi=t}function lp(e,t,n){Be[Fe++]=ct,Be[Fe++]=ft,Be[Fe++]=un,un=e;var r=ct;e=ft;var o=32-_e(r)-1;r&=~(1<<o),n+=1;var i=32-_e(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,ct=1<<32-_e(t)+o|n<<o|r,ft=i+e}else ct=1<<i|n<<o|r,ft=e}function $u(e){e.return!==null&&(en(e,1),lp(e,1,0))}function _u(e){for(;e===zi;)zi=On[--In],On[In]=null,Gi=On[--In],On[In]=null;for(;e===un;)un=Be[--Fe],Be[Fe]=null,ft=Be[--Fe],Be[Fe]=null,ct=Be[--Fe],Be[Fe]=null}var Ee=null,xe=null,G=!1,$e=null;function up(e,t){var n=Ue(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function Ad(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,Ee=e,xe=Ut(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,Ee=e,xe=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=un!==null?{id:ct,overflow:ft}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=Ue(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,Ee=e,xe=null,!0):!1;default:return!1}}function cu(e){return(e.mode&1)!==0&&(e.flags&128)===0}function fu(e){if(G){var t=xe;if(t){var n=t;if(!Ad(e,t)){if(cu(e))throw Error(R(418));t=Ut(n.nextSibling);var r=Ee;t&&Ad(e,t)?up(r,n):(e.flags=e.flags&-4097|2,G=!1,Ee=e)}}else{if(cu(e))throw Error(R(418));e.flags=e.flags&-4097|2,G=!1,Ee=e}}}function Dd(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;Ee=e}function yi(e){if(e!==Ee)return!1;if(!G)return Dd(e),G=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!au(e.type,e.memoizedProps)),t&&(t=xe)){if(cu(e))throw cp(),Error(R(418));for(;t;)up(e,t),t=Ut(t.nextSibling)}if(Dd(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(R(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){xe=Ut(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}xe=null}}else xe=Ee?Ut(e.stateNode.nextSibling):null;return!0}function cp(){for(var e=xe;e;)e=Ut(e.nextSibling)}function zn(){xe=Ee=null,G=!1}function Hu(e){$e===null?$e=[e]:$e.push(e)}var x0=ht.ReactCurrentBatchConfig;function Ge(e,t){if(e&&e.defaultProps){t=Y({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}var ji=jt(null),$i=null,Cn=null,Yu=null;function Wu(){Yu=Cn=$i=null}function Ku(e){var t=ji.current;z(ji),e._currentValue=t}function du(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function An(e,t){$i=e,Yu=Cn=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(we=!0),e.firstContext=null)}function Ae(e){var t=e._currentValue;if(Yu!==e)if(e={context:e,memoizedValue:t,next:null},Cn===null){if($i===null)throw Error(R(308));Cn=e,$i.dependencies={lanes:0,firstContext:e}}else Cn=Cn.next=e;return t}var rn=null;function Qu(e){rn===null?rn=[e]:rn.push(e)}function fp(e,t,n,r){var o=t.interleaved;return o===null?(n.next=n,Qu(t)):(n.next=o.next,o.next=n),t.interleaved=n,gt(e,r)}function gt(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var Nt=!1;function Xu(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function dp(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function dt(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function qt(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,U&2){var o=r.pending;return o===null?t.next=t:(t.next=o.next,o.next=t),r.pending=t,gt(e,n)}return o=r.interleaved,o===null?(t.next=t,Qu(r)):(t.next=o.next,o.next=t),r.interleaved=t,gt(e,n)}function Ri(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,qu(e,n)}}function Vd(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var o=null,i=null;if(n=n.firstBaseUpdate,n!==null){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};i===null?o=i=a:i=i.next=a,n=n.next}while(n!==null);i===null?o=i=t:i=i.next=t}else o=i=t;n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function _i(e,t,n,r){var o=e.updateQueue;Nt=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,s=o.shared.pending;if(s!==null){o.shared.pending=null;var l=s,c=l.next;l.next=null,a===null?i=c:a.next=c,a=l;var d=e.alternate;d!==null&&(d=d.updateQueue,s=d.lastBaseUpdate,s!==a&&(s===null?d.firstBaseUpdate=c:s.next=c,d.lastBaseUpdate=l))}if(i!==null){var v=o.baseState;a=0,d=c=l=null,s=i;do{var g=s.lane,m=s.eventTime;if((r&g)===g){d!==null&&(d=d.next={eventTime:m,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var S=e,k=s;switch(g=t,m=n,k.tag){case 1:if(S=k.payload,typeof S=="function"){v=S.call(m,v,g);break e}v=S;break e;case 3:S.flags=S.flags&-65537|128;case 0:if(S=k.payload,g=typeof S=="function"?S.call(m,v,g):S,g==null)break e;v=Y({},v,g);break e;case 2:Nt=!0}}s.callback!==null&&s.lane!==0&&(e.flags|=64,g=o.effects,g===null?o.effects=[s]:g.push(s))}else m={eventTime:m,lane:g,tag:s.tag,payload:s.payload,callback:s.callback,next:null},d===null?(c=d=m,l=v):d=d.next=m,a|=g;if(s=s.next,s===null){if(s=o.shared.pending,s===null)break;g=s,s=g.next,g.next=null,o.lastBaseUpdate=g,o.shared.pending=null}}while(1);if(d===null&&(l=v),o.baseState=l,o.firstBaseUpdate=c,o.lastBaseUpdate=d,t=o.shared.interleaved,t!==null){o=t;do a|=o.lane,o=o.next;while(o!==t)}else i===null&&(o.shared.lanes=0);fn|=a,e.lanes=a,e.memoizedState=v}}function bd(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(o!==null){if(r.callback=null,r=n,typeof o!="function")throw Error(R(191,o));o.call(r)}}}var mp=new fm.Component().refs;function mu(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:Y({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var sa={isMounted:function(e){return(e=e._reactInternals)?pn(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=pe(),o=Dt(e),i=dt(r,o);i.payload=t,n!=null&&(i.callback=n),t=qt(e,i,o),t!==null&&(He(t,e,o,r),Ri(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=pe(),o=Dt(e),i=dt(r,o);i.tag=1,i.payload=t,n!=null&&(i.callback=n),t=qt(e,i,o),t!==null&&(He(t,e,o,r),Ri(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=pe(),r=Dt(e),o=dt(n,r);o.tag=2,t!=null&&(o.callback=t),t=qt(e,o,r),t!==null&&(He(t,e,r,n),Ri(t,e,r))}};function zd(e,t,n,r,o,i,a){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,i,a):t.prototype&&t.prototype.isPureReactComponent?!io(n,r)||!io(o,i):!0}function pp(e,t,n){var r=!1,o=zt,i=t.contextType;return typeof i=="object"&&i!==null?i=Ae(i):(o=Se(t)?ln:fe.current,r=t.contextTypes,i=(r=r!=null)?bn(e,o):zt),t=new t(n,i),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=sa,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function Gd(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&sa.enqueueReplaceState(t,t.state,null)}function pu(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mp,Xu(e);var i=t.contextType;typeof i=="object"&&i!==null?o.context=Ae(i):(i=Se(t)?ln:fe.current,o.context=bn(e,i)),o.state=e.memoizedState,i=t.getDerivedStateFromProps,typeof i=="function"&&(mu(e,t,i,n),o.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(t=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),t!==o.state&&sa.enqueueReplaceState(o,o.state,null),_i(e,n,o,r),o.state=e.memoizedState),typeof o.componentDidMount=="function"&&(e.flags|=4194308)}function Fr(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(R(309));var r=n.stateNode}if(!r)throw Error(R(147,e));var o=r,i=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===i?t.ref:(t=function(a){var s=o.refs;s===mp&&(s=o.refs={}),a===null?delete s[i]:s[i]=a},t._stringRef=i,t)}if(typeof e!="string")throw Error(R(284));if(!n._owner)throw Error(R(290,e))}return e}function hi(e,t){throw e=Object.prototype.toString.call(t),Error(R(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function jd(e){var t=e._init;return t(e._payload)}function gp(e){function t(p,f){if(e){var w=p.deletions;w===null?(p.deletions=[f],p.flags|=16):w.push(f)}}function n(p,f){if(!e)return null;for(;f!==null;)t(p,f),f=f.sibling;return null}function r(p,f){for(p=new Map;f!==null;)f.key!==null?p.set(f.key,f):p.set(f.index,f),f=f.sibling;return p}function o(p,f){return p=Vt(p,f),p.index=0,p.sibling=null,p}function i(p,f,w){return p.index=w,e?(w=p.alternate,w!==null?(w=w.index,w<f?(p.flags|=2,f):w):(p.flags|=2,f)):(p.flags|=1048576,f)}function a(p){return e&&p.alternate===null&&(p.flags|=2),p}function s(p,f,w,P){return f===null||f.tag!==6?(f=Fl(w,p.mode,P),f.return=p,f):(f=o(f,w),f.return=p,f)}function l(p,f,w,P){var E=w.type;return E===Pn?d(p,f,w.props.children,P,w.key):f!==null&&(f.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===Jt&&jd(E)===f.type)?(P=o(f,w.props),P.ref=Fr(p,f,w),P.return=p,P):(P=Ii(w.type,w.key,w.props,null,p.mode,P),P.ref=Fr(p,f,w),P.return=p,P)}function c(p,f,w,P){return f===null||f.tag!==4||f.stateNode.containerInfo!==w.containerInfo||f.stateNode.implementation!==w.implementation?(f=Ul(w,p.mode,P),f.return=p,f):(f=o(f,w.children||[]),f.return=p,f)}function d(p,f,w,P,E){return f===null||f.tag!==7?(f=sn(w,p.mode,P,E),f.return=p,f):(f=o(f,w),f.return=p,f)}function v(p,f,w){if(typeof f=="string"&&f!==""||typeof f=="number")return f=Fl(""+f,p.mode,w),f.return=p,f;if(typeof f=="object"&&f!==null){switch(f.$$typeof){case ni:return w=Ii(f.type,f.key,f.props,null,p.mode,w),w.ref=Fr(p,null,f),w.return=p,w;case kn:return f=Ul(f,p.mode,w),f.return=p,f;case Jt:var P=f._init;return v(p,P(f._payload),w)}if(Vr(f)||Cr(f))return f=sn(f,p.mode,w,null),f.return=p,f;hi(p,f)}return null}function g(p,f,w,P){var E=f!==null?f.key:null;if(typeof w=="string"&&w!==""||typeof w=="number")return E!==null?null:s(p,f,""+w,P);if(typeof w=="object"&&w!==null){switch(w.$$typeof){case ni:return w.key===E?l(p,f,w,P):null;case kn:return w.key===E?c(p,f,w,P):null;case Jt:return E=w._init,g(p,f,E(w._payload),P)}if(Vr(w)||Cr(w))return E!==null?null:d(p,f,w,P,null);hi(p,w)}return null}function m(p,f,w,P,E){if(typeof P=="string"&&P!==""||typeof P=="number")return p=p.get(w)||null,s(f,p,""+P,E);if(typeof P=="object"&&P!==null){switch(P.$$typeof){case ni:return p=p.get(P.key===null?w:P.key)||null,l(f,p,P,E);case kn:return p=p.get(P.key===null?w:P.key)||null,c(f,p,P,E);case Jt:var N=P._init;return m(p,f,w,N(P._payload),E)}if(Vr(P)||Cr(P))return p=p.get(w)||null,d(f,p,P,E,null);hi(f,P)}return null}function S(p,f,w,P){for(var E=null,N=null,I=f,C=f=0,$=null;I!==null&&C<w.length;C++){I.index>C?($=I,I=null):$=I.sibling;var L=g(p,I,w[C],P);if(L===null){I===null&&(I=$);break}e&&I&&L.alternate===null&&t(p,I),f=i(L,f,C),N===null?E=L:N.sibling=L,N=L,I=$}if(C===w.length)return n(p,I),G&&en(p,C),E;if(I===null){for(;C<w.length;C++)I=v(p,w[C],P),I!==null&&(f=i(I,f,C),N===null?E=I:N.sibling=I,N=I);return G&&en(p,C),E}for(I=r(p,I);C<w.length;C++)$=m(I,p,C,w[C],P),$!==null&&(e&&$.alternate!==null&&I.delete($.key===null?C:$.key),f=i($,f,C),N===null?E=$:N.sibling=$,N=$);return e&&I.forEach(function(Ke){return t(p,Ke)}),G&&en(p,C),E}function k(p,f,w,P){var E=Cr(w);if(typeof E!="function")throw Error(R(150));if(w=E.call(w),w==null)throw Error(R(151));for(var N=E=null,I=f,C=f=0,$=null,L=w.next();I!==null&&!L.done;C++,L=w.next()){I.index>C?($=I,I=null):$=I.sibling;var Ke=g(p,I,L.value,P);if(Ke===null){I===null&&(I=$);break}e&&I&&Ke.alternate===null&&t(p,I),f=i(Ke,f,C),N===null?E=Ke:N.sibling=Ke,N=Ke,I=$}if(L.done)return n(p,I),G&&en(p,C),E;if(I===null){for(;!L.done;C++,L=w.next())L=v(p,L.value,P),L!==null&&(f=i(L,f,C),N===null?E=L:N.sibling=L,N=L);return G&&en(p,C),E}for(I=r(p,I);!L.done;C++,L=w.next())L=m(I,p,C,L.value,P),L!==null&&(e&&L.alternate!==null&&I.delete(L.key===null?C:L.key),f=i(L,f,C),N===null?E=L:N.sibling=L,N=L);return e&&I.forEach(function(Fy){return t(p,Fy)}),G&&en(p,C),E}function O(p,f,w,P){if(typeof w=="object"&&w!==null&&w.type===Pn&&w.key===null&&(w=w.props.children),typeof w=="object"&&w!==null){switch(w.$$typeof){case ni:e:{for(var E=w.key,N=f;N!==null;){if(N.key===E){if(E=w.type,E===Pn){if(N.tag===7){n(p,N.sibling),f=o(N,w.props.children),f.return=p,p=f;break e}}else if(N.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===Jt&&jd(E)===N.type){n(p,N.sibling),f=o(N,w.props),f.ref=Fr(p,N,w),f.return=p,p=f;break e}n(p,N);break}else t(p,N);N=N.sibling}w.type===Pn?(f=sn(w.props.children,p.mode,P,w.key),f.return=p,p=f):(P=Ii(w.type,w.key,w.props,null,p.mode,P),P.ref=Fr(p,f,w),P.return=p,p=P)}return a(p);case kn:e:{for(N=w.key;f!==null;){if(f.key===N)if(f.tag===4&&f.stateNode.containerInfo===w.containerInfo&&f.stateNode.implementation===w.implementation){n(p,f.sibling),f=o(f,w.children||[]),f.return=p,p=f;break e}else{n(p,f);break}else t(p,f);f=f.sibling}f=Ul(w,p.mode,P),f.return=p,p=f}return a(p);case Jt:return N=w._init,O(p,f,N(w._payload),P)}if(Vr(w))return S(p,f,w,P);if(Cr(w))return k(p,f,w,P);hi(p,w)}return typeof w=="string"&&w!==""||typeof w=="number"?(w=""+w,f!==null&&f.tag===6?(n(p,f.sibling),f=o(f,w),f.return=p,p=f):(n(p,f),f=Fl(w,p.mode,P),f.return=p,p=f),a(p)):n(p,f)}return O}var Gn=gp(!0),yp=gp(!1),vo={},nt=jt(vo),uo=jt(vo),co=jt(vo);function on(e){if(e===vo)throw Error(R(174));return e}function Zu(e,t){switch(V(co,t),V(uo,e),V(nt,vo),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:_l(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=_l(t,e)}z(nt),V(nt,t)}function jn(){z(nt),z(uo),z(co)}function hp(e){on(co.current);var t=on(nt.current),n=_l(t,e.type);t!==n&&(V(uo,e),V(nt,n))}function ec(e){uo.current===e&&(z(nt),z(uo))}var _=jt(0);function Hi(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ol=[];function tc(){for(var e=0;e<Ol.length;e++)Ol[e]._workInProgressVersionPrimary=null;Ol.length=0}var xi=ht.ReactCurrentDispatcher,Il=ht.ReactCurrentBatchConfig,cn=0,H=null,ee=null,ne=null,Yi=!1,Yr=!1,fo=0,E0=0;function le(){throw Error(R(321))}function nc(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Ye(e[n],t[n]))return!1;return!0}function rc(e,t,n,r,o,i){if(cn=i,H=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,xi.current=e===null||e.memoizedState===null?I0:C0,e=n(r,o),Yr){i=0;do{if(Yr=!1,fo=0,25<=i)throw Error(R(301));i+=1,ne=ee=null,t.updateQueue=null,xi.current=M0,e=n(r,o)}while(Yr)}if(xi.current=Wi,t=ee!==null&&ee.next!==null,cn=0,ne=ee=H=null,Yi=!1,t)throw Error(R(300));return e}function oc(){var e=fo!==0;return fo=0,e}function Ze(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return ne===null?H.memoizedState=ne=e:ne=ne.next=e,ne}function De(){if(ee===null){var e=H.alternate;e=e!==null?e.memoizedState:null}else e=ee.next;var t=ne===null?H.memoizedState:ne.next;if(t!==null)ne=t,ee=e;else{if(e===null)throw Error(R(310));ee=e,e={memoizedState:ee.memoizedState,baseState:ee.baseState,baseQueue:ee.baseQueue,queue:ee.queue,next:null},ne===null?H.memoizedState=ne=e:ne=ne.next=e}return ne}function mo(e,t){return typeof t=="function"?t(e):t}function Cl(e){var t=De(),n=t.queue;if(n===null)throw Error(R(311));n.lastRenderedReducer=e;var r=ee,o=r.baseQueue,i=n.pending;if(i!==null){if(o!==null){var a=o.next;o.next=i.next,i.next=a}r.baseQueue=o=i,n.pending=null}if(o!==null){i=o.next,r=r.baseState;var s=a=null,l=null,c=i;do{var d=c.lane;if((cn&d)===d)l!==null&&(l=l.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var v={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};l===null?(s=l=v,a=r):l=l.next=v,H.lanes|=d,fn|=d}c=c.next}while(c!==null&&c!==i);l===null?a=r:l.next=s,Ye(r,t.memoizedState)||(we=!0),t.memoizedState=r,t.baseState=a,t.baseQueue=l,n.lastRenderedState=r}if(e=n.interleaved,e!==null){o=e;do i=o.lane,H.lanes|=i,fn|=i,o=o.next;while(o!==e)}else o===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ml(e){var t=De(),n=t.queue;if(n===null)throw Error(R(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(o!==null){n.pending=null;var a=o=o.next;do i=e(i,a.action),a=a.next;while(a!==o);Ye(i,t.memoizedState)||(we=!0),t.memoizedState=i,t.baseQueue===null&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function wp(){}function vp(e,t){var n=H,r=De(),o=t(),i=!Ye(r.memoizedState,o);if(i&&(r.memoizedState=o,we=!0),r=r.queue,ic(kp.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||ne!==null&&ne.memoizedState.tag&1){if(n.flags|=2048,po(9,Tp.bind(null,n,r,o,t),void 0,null),re===null)throw Error(R(349));cn&30||Sp(n,t,o)}return o}function Sp(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=H.updateQueue,t===null?(t={lastEffect:null,stores:null},H.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function Tp(e,t,n,r){t.value=n,t.getSnapshot=r,Pp(t)&&Rp(e)}function kp(e,t,n){return n(function(){Pp(t)&&Rp(e)})}function Pp(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Ye(e,n)}catch{return!0}}function Rp(e){var t=gt(e,1);t!==null&&He(t,e,1,-1)}function $d(e){var t=Ze();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:mo,lastRenderedState:e},t.queue=e,e=e.dispatch=O0.bind(null,H,e),[t.memoizedState,e]}function po(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=H.updateQueue,t===null?(t={lastEffect:null,stores:null},H.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function xp(){return De().memoizedState}function Ei(e,t,n,r){var o=Ze();H.flags|=e,o.memoizedState=po(1|t,n,void 0,r===void 0?null:r)}function la(e,t,n,r){var o=De();r=r===void 0?null:r;var i=void 0;if(ee!==null){var a=ee.memoizedState;if(i=a.destroy,r!==null&&nc(r,a.deps)){o.memoizedState=po(t,n,i,r);return}}H.flags|=e,o.memoizedState=po(1|t,n,i,r)}function _d(e,t){return Ei(8390656,8,e,t)}function ic(e,t){return la(2048,8,e,t)}function Ep(e,t){return la(4,2,e,t)}function Jp(e,t){return la(4,4,e,t)}function Np(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function Op(e,t,n){return n=n!=null?n.concat([e]):null,la(4,4,Np.bind(null,t,e),n)}function ac(){}function Ip(e,t){var n=De();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&nc(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Cp(e,t){var n=De();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&nc(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Mp(e,t,n){return cn&21?(Ye(n,t)||(n=Fm(),H.lanes|=n,fn|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,we=!0),e.memoizedState=n)}function J0(e,t){var n=q;q=n!==0&&4>n?n:4,e(!0);var r=Il.transition;Il.transition={};try{e(!1),t()}finally{q=n,Il.transition=r}}function Lp(){return De().memoizedState}function N0(e,t,n){var r=Dt(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Bp(e))Fp(t,n);else if(n=fp(e,t,n,r),n!==null){var o=pe();He(n,e,r,o),Up(n,t,r)}}function O0(e,t,n){var r=Dt(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Bp(e))Fp(t,o);else{var i=e.alternate;if(e.lanes===0&&(i===null||i.lanes===0)&&(i=t.lastRenderedReducer,i!==null))try{var a=t.lastRenderedState,s=i(a,n);if(o.hasEagerState=!0,o.eagerState=s,Ye(s,a)){var l=t.interleaved;l===null?(o.next=o,Qu(t)):(o.next=l.next,l.next=o),t.interleaved=o;return}}catch{}finally{}n=fp(e,t,o,r),n!==null&&(o=pe(),He(n,e,r,o),Up(n,t,r))}}function Bp(e){var t=e.alternate;return e===H||t!==null&&t===H}function Fp(e,t){Yr=Yi=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Up(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,qu(e,n)}}var Wi={readContext:Ae,useCallback:le,useContext:le,useEffect:le,useImperativeHandle:le,useInsertionEffect:le,useLayoutEffect:le,useMemo:le,useReducer:le,useRef:le,useState:le,useDebugValue:le,useDeferredValue:le,useTransition:le,useMutableSource:le,useSyncExternalStore:le,useId:le,unstable_isNewReconciler:!1},I0={readContext:Ae,useCallback:function(e,t){return Ze().memoizedState=[e,t===void 0?null:t],e},useContext:Ae,useEffect:_d,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,Ei(4194308,4,Np.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ei(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ei(4,2,e,t)},useMemo:function(e,t){var n=Ze();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Ze();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=N0.bind(null,H,e),[r.memoizedState,e]},useRef:function(e){var t=Ze();return e={current:e},t.memoizedState=e},useState:$d,useDebugValue:ac,useDeferredValue:function(e){return Ze().memoizedState=e},useTransition:function(){var e=$d(!1),t=e[0];return e=J0.bind(null,e[1]),Ze().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=H,o=Ze();if(G){if(n===void 0)throw Error(R(407));n=n()}else{if(n=t(),re===null)throw Error(R(349));cn&30||Sp(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,_d(kp.bind(null,r,i,e),[e]),r.flags|=2048,po(9,Tp.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Ze(),t=re.identifierPrefix;if(G){var n=ft,r=ct;n=(r&~(1<<32-_e(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=fo++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=E0++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},C0={readContext:Ae,useCallback:Ip,useContext:Ae,useEffect:ic,useImperativeHandle:Op,useInsertionEffect:Ep,useLayoutEffect:Jp,useMemo:Cp,useReducer:Cl,useRef:xp,useState:function(){return Cl(mo)},useDebugValue:ac,useDeferredValue:function(e){var t=De();return Mp(t,ee.memoizedState,e)},useTransition:function(){var e=Cl(mo)[0],t=De().memoizedState;return[e,t]},useMutableSource:wp,useSyncExternalStore:vp,useId:Lp,unstable_isNewReconciler:!1},M0={readContext:Ae,useCallback:Ip,useContext:Ae,useEffect:ic,useImperativeHandle:Op,useInsertionEffect:Ep,useLayoutEffect:Jp,useMemo:Cp,useReducer:Ml,useRef:xp,useState:function(){return Ml(mo)},useDebugValue:ac,useDeferredValue:function(e){var t=De();return ee===null?t.memoizedState=e:Mp(t,ee.memoizedState,e)},useTransition:function(){var e=Ml(mo)[0],t=De().memoizedState;return[e,t]},useMutableSource:wp,useSyncExternalStore:vp,useId:Lp,unstable_isNewReconciler:!1};function $n(e,t){try{var n="",r=t;do n+=lh(r),r=r.return;while(r);var o=n}catch(i){o=`
Error generating stack: `+i.message+`
`+i.stack}return{value:e,source:t,stack:o,digest:null}}function Ll(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function gu(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var L0=typeof WeakMap=="function"?WeakMap:Map;function qp(e,t,n){n=dt(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Qi||(Qi=!0,xu=r),gu(e,t)},n}function Ap(e,t,n){n=dt(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){gu(e,t)}}var i=e.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(n.callback=function(){gu(e,t),typeof r!="function"&&(At===null?At=new Set([this]):At.add(this));var a=t.stack;this.componentDidCatch(t.value,{componentStack:a!==null?a:""})}),n}function Hd(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new L0;var o=new Set;r.set(t,o)}else o=r.get(t),o===void 0&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=H0.bind(null,e,t,n),t.then(e,e))}function Yd(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function Wd(e,t,n,r,o){return e.mode&1?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=dt(-1,1),t.tag=2,qt(n,t,1))),n.lanes|=1),e)}var B0=ht.ReactCurrentOwner,we=!1;function me(e,t,n,r){t.child=e===null?yp(t,null,n,r):Gn(t,e.child,n,r)}function Kd(e,t,n,r,o){n=n.render;var i=t.ref;return An(t,o),r=rc(e,t,n,r,i,o),n=oc(),e!==null&&!we?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,yt(e,t,o)):(G&&n&&$u(t),t.flags|=1,me(e,t,r,o),t.child)}function Qd(e,t,n,r,o){if(e===null){var i=n.type;return typeof i=="function"&&!pc(i)&&i.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=i,Dp(e,t,i,r,o)):(e=Ii(n.type,null,r,t,t.mode,o),e.ref=t.ref,e.return=t,t.child=e)}if(i=e.child,!(e.lanes&o)){var a=i.memoizedProps;if(n=n.compare,n=n!==null?n:io,n(a,r)&&e.ref===t.ref)return yt(e,t,o)}return t.flags|=1,e=Vt(i,r),e.ref=t.ref,e.return=t,t.child=e}function Dp(e,t,n,r,o){if(e!==null){var i=e.memoizedProps;if(io(i,r)&&e.ref===t.ref)if(we=!1,t.pendingProps=r=i,(e.lanes&o)!==0)e.flags&131072&&(we=!0);else return t.lanes=e.lanes,yt(e,t,o)}return yu(e,t,n,r,o)}function Vp(e,t,n){var r=t.pendingProps,o=r.children,i=e!==null?e.memoizedState:null;if(r.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},V(Ln,Re),Re|=n;else{if(!(n&1073741824))return e=i!==null?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,V(Ln,Re),Re|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=i!==null?i.baseLanes:n,V(Ln,Re),Re|=r}else i!==null?(r=i.baseLanes|n,t.memoizedState=null):r=n,V(Ln,Re),Re|=r;return me(e,t,o,n),t.child}function bp(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function yu(e,t,n,r,o){var i=Se(n)?ln:fe.current;return i=bn(t,i),An(t,o),n=rc(e,t,n,r,i,o),r=oc(),e!==null&&!we?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,yt(e,t,o)):(G&&r&&$u(t),t.flags|=1,me(e,t,n,o),t.child)}function Xd(e,t,n,r,o){if(Se(n)){var i=!0;bi(t)}else i=!1;if(An(t,o),t.stateNode===null)Ji(e,t),pp(t,n,r),pu(t,n,r,o),r=!0;else if(e===null){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,c=n.contextType;typeof c=="object"&&c!==null?c=Ae(c):(c=Se(n)?ln:fe.current,c=bn(t,c));var d=n.getDerivedStateFromProps,v=typeof d=="function"||typeof a.getSnapshotBeforeUpdate=="function";v||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(s!==r||l!==c)&&Gd(t,a,r,c),Nt=!1;var g=t.memoizedState;a.state=g,_i(t,r,a,o),l=t.memoizedState,s!==r||g!==l||ve.current||Nt?(typeof d=="function"&&(mu(t,n,d,r),l=t.memoizedState),(s=Nt||zd(t,n,s,r,g,l,c))?(v||typeof a.UNSAFE_componentWillMount!="function"&&typeof a.componentWillMount!="function"||(typeof a.componentWillMount=="function"&&a.componentWillMount(),typeof a.UNSAFE_componentWillMount=="function"&&a.UNSAFE_componentWillMount()),typeof a.componentDidMount=="function"&&(t.flags|=4194308)):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):(typeof a.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,dp(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:Ge(t.type,s),a.props=c,v=t.pendingProps,g=a.context,l=n.contextType,typeof l=="object"&&l!==null?l=Ae(l):(l=Se(n)?ln:fe.current,l=bn(t,l));var m=n.getDerivedStateFromProps;(d=typeof m=="function"||typeof a.getSnapshotBeforeUpdate=="function")||typeof a.UNSAFE_componentWillReceiveProps!="function"&&typeof a.componentWillReceiveProps!="function"||(s!==v||g!==l)&&Gd(t,a,r,l),Nt=!1,g=t.memoizedState,a.state=g,_i(t,r,a,o);var S=t.memoizedState;s!==v||g!==S||ve.current||Nt?(typeof m=="function"&&(mu(t,n,m,r),S=t.memoizedState),(c=Nt||zd(t,n,c,r,g,S,l)||!1)?(d||typeof a.UNSAFE_componentWillUpdate!="function"&&typeof a.componentWillUpdate!="function"||(typeof a.componentWillUpdate=="function"&&a.componentWillUpdate(r,S,l),typeof a.UNSAFE_componentWillUpdate=="function"&&a.UNSAFE_componentWillUpdate(r,S,l)),typeof a.componentDidUpdate=="function"&&(t.flags|=4),typeof a.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof a.componentDidUpdate!="function"||s===e.memoizedProps&&g===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&g===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=S),a.props=r,a.state=S,a.context=l,r=c):(typeof a.componentDidUpdate!="function"||s===e.memoizedProps&&g===e.memoizedState||(t.flags|=4),typeof a.getSnapshotBeforeUpdate!="function"||s===e.memoizedProps&&g===e.memoizedState||(t.flags|=1024),r=!1)}return hu(e,t,n,r,i,o)}function hu(e,t,n,r,o,i){bp(e,t);var a=(t.flags&128)!==0;if(!r&&!a)return o&&qd(t,n,!1),yt(e,t,i);r=t.stateNode,B0.current=t;var s=a&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&a?(t.child=Gn(t,e.child,null,i),t.child=Gn(t,null,s,i)):me(e,t,s,i),t.memoizedState=r.state,o&&qd(t,n,!0),t.child}function zp(e){var t=e.stateNode;t.pendingContext?Ud(e,t.pendingContext,t.pendingContext!==t.context):t.context&&Ud(e,t.context,!1),Zu(e,t.containerInfo)}function Zd(e,t,n,r,o){return zn(),Hu(o),t.flags|=256,me(e,t,n,r),t.child}var wu={dehydrated:null,treeContext:null,retryLane:0};function vu(e){return{baseLanes:e,cachePool:null,transitions:null}}function Gp(e,t,n){var r=t.pendingProps,o=_.current,i=!1,a=(t.flags&128)!==0,s;if((s=a)||(s=e!==null&&e.memoizedState===null?!1:(o&2)!==0),s?(i=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(o|=1),V(_,o&1),e===null)return fu(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(a=r.children,e=r.fallback,i?(r=t.mode,i=t.child,a={mode:"hidden",children:a},!(r&1)&&i!==null?(i.childLanes=0,i.pendingProps=a):i=fa(a,r,0,null),e=sn(e,r,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=vu(n),t.memoizedState=wu,e):sc(t,a));if(o=e.memoizedState,o!==null&&(s=o.dehydrated,s!==null))return F0(e,t,a,r,s,o,n);if(i){i=r.fallback,a=t.mode,o=e.child,s=o.sibling;var l={mode:"hidden",children:r.children};return!(a&1)&&t.child!==o?(r=t.child,r.childLanes=0,r.pendingProps=l,t.deletions=null):(r=Vt(o,l),r.subtreeFlags=o.subtreeFlags&14680064),s!==null?i=Vt(s,i):(i=sn(i,a,n,null),i.flags|=2),i.return=t,r.return=t,r.sibling=i,t.child=r,r=i,i=t.child,a=e.child.memoizedState,a=a===null?vu(n):{baseLanes:a.baseLanes|n,cachePool:null,transitions:a.transitions},i.memoizedState=a,i.childLanes=e.childLanes&~n,t.memoizedState=wu,r}return i=e.child,e=i.sibling,r=Vt(i,{mode:"visible",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function sc(e,t){return t=fa({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function wi(e,t,n,r){return r!==null&&Hu(r),Gn(t,e.child,null,n),e=sc(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function F0(e,t,n,r,o,i,a){if(n)return t.flags&256?(t.flags&=-257,r=Ll(Error(R(422))),wi(e,t,a,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=fa({mode:"visible",children:r.children},o,0,null),i=sn(i,o,a,null),i.flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,t.mode&1&&Gn(t,e.child,null,a),t.child.memoizedState=vu(a),t.memoizedState=wu,i);if(!(t.mode&1))return wi(e,t,a,null);if(o.data==="$!"){if(r=o.nextSibling&&o.nextSibling.dataset,r)var s=r.dgst;return r=s,i=Error(R(419)),r=Ll(i,r,void 0),wi(e,t,a,r)}if(s=(a&e.childLanes)!==0,we||s){if(r=re,r!==null){switch(a&-a){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}o=o&(r.suspendedLanes|a)?0:o,o!==0&&o!==i.retryLane&&(i.retryLane=o,gt(e,o),He(r,e,o,-1))}return mc(),r=Ll(Error(R(421))),wi(e,t,a,r)}return o.data==="$?"?(t.flags|=128,t.child=e.child,t=Y0.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,xe=Ut(o.nextSibling),Ee=t,G=!0,$e=null,e!==null&&(Be[Fe++]=ct,Be[Fe++]=ft,Be[Fe++]=un,ct=e.id,ft=e.overflow,un=t),t=sc(t,r.children),t.flags|=4096,t)}function em(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),du(e.return,t,n)}function Bl(e,t,n,r,o){var i=e.memoizedState;i===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function jp(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(me(e,t,r.children,n),r=_.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&em(e,n,t);else if(e.tag===19)em(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(V(_,r),!(t.mode&1))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;n!==null;)e=n.alternate,e!==null&&Hi(e)===null&&(o=n),n=n.sibling;n=o,n===null?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Bl(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;o!==null;){if(e=o.alternate,e!==null&&Hi(e)===null){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Bl(t,!0,n,null,i);break;case"together":Bl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ji(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function yt(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),fn|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(R(153));if(t.child!==null){for(e=t.child,n=Vt(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=Vt(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function U0(e,t,n){switch(t.tag){case 3:zp(t),zn();break;case 5:hp(t);break;case 1:Se(t.type)&&bi(t);break;case 4:Zu(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;V(ji,r._currentValue),r._currentValue=o;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(V(_,_.current&1),t.flags|=128,null):n&t.child.childLanes?Gp(e,t,n):(V(_,_.current&1),e=yt(e,t,n),e!==null?e.sibling:null);V(_,_.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return jp(e,t,n);t.flags|=128}if(o=t.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),V(_,_.current),r)break;return null;case 22:case 23:return t.lanes=0,Vp(e,t,n)}return yt(e,t,n)}var $p,Su,_p,Hp;$p=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Su=function(){};_p=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,on(nt.current);var i=null;switch(n){case"input":o=zl(e,o),r=zl(e,r),i=[];break;case"select":o=Y({},o,{value:void 0}),r=Y({},r,{value:void 0}),i=[];break;case"textarea":o=$l(e,o),r=$l(e,r),i=[];break;default:typeof o.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=Di)}Hl(n,r);var a;n=null;for(c in o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&o[c]!=null)if(c==="style"){var s=o[c];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else c!=="dangerouslySetInnerHTML"&&c!=="children"&&c!=="suppressContentEditableWarning"&&c!=="suppressHydrationWarning"&&c!=="autoFocus"&&(Xr.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var l=r[c];if(s=o?.[c],r.hasOwnProperty(c)&&l!==s&&(l!=null||s!=null))if(c==="style")if(s){for(a in s)!s.hasOwnProperty(a)||l&&l.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in l)l.hasOwnProperty(a)&&s[a]!==l[a]&&(n||(n={}),n[a]=l[a])}else n||(i||(i=[]),i.push(c,n)),n=l;else c==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,s=s?s.__html:void 0,l!=null&&s!==l&&(i=i||[]).push(c,l)):c==="children"?typeof l!="string"&&typeof l!="number"||(i=i||[]).push(c,""+l):c!=="suppressContentEditableWarning"&&c!=="suppressHydrationWarning"&&(Xr.hasOwnProperty(c)?(l!=null&&c==="onScroll"&&b("scroll",e),i||s===l||(i=[])):(i=i||[]).push(c,l))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}};Hp=function(e,t,n,r){n!==r&&(t.flags|=4)};function Ur(e,t){if(!G)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ue(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags&14680064,r|=o.flags&14680064,o.return=e,o=o.sibling;else for(o=e.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function q0(e,t,n){var r=t.pendingProps;switch(_u(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ue(t),null;case 1:return Se(t.type)&&Vi(),ue(t),null;case 3:return r=t.stateNode,jn(),z(ve),z(fe),tc(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(yi(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,$e!==null&&(Nu($e),$e=null))),Su(e,t),ue(t),null;case 5:ec(t);var o=on(co.current);if(n=t.type,e!==null&&t.stateNode!=null)_p(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(R(166));return ue(t),null}if(e=on(nt.current),yi(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[et]=t,r[lo]=i,e=(t.mode&1)!==0,n){case"dialog":b("cancel",r),b("close",r);break;case"iframe":case"object":case"embed":b("load",r);break;case"video":case"audio":for(o=0;o<zr.length;o++)b(zr[o],r);break;case"source":b("error",r);break;case"img":case"image":case"link":b("error",r),b("load",r);break;case"details":b("toggle",r);break;case"input":ld(r,i),b("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},b("invalid",r);break;case"textarea":cd(r,i),b("invalid",r)}Hl(n,i),o=null;for(var a in i)if(i.hasOwnProperty(a)){var s=i[a];a==="children"?typeof s=="string"?r.textContent!==s&&(i.suppressHydrationWarning!==!0&&gi(r.textContent,s,e),o=["children",s]):typeof s=="number"&&r.textContent!==""+s&&(i.suppressHydrationWarning!==!0&&gi(r.textContent,s,e),o=["children",""+s]):Xr.hasOwnProperty(a)&&s!=null&&a==="onScroll"&&b("scroll",r)}switch(n){case"input":ri(r),ud(r,i,!0);break;case"textarea":ri(r),fd(r);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(r.onclick=Di)}r=o,t.updateQueue=r,r!==null&&(t.flags|=4)}else{a=o.nodeType===9?o:o.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=Sm(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=a.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=a.createElement(n,{is:r.is}):(e=a.createElement(n),n==="select"&&(a=e,r.multiple?a.multiple=!0:r.size&&(a.size=r.size))):e=a.createElementNS(e,n),e[et]=t,e[lo]=r,$p(e,t,!1,!1),t.stateNode=e;e:{switch(a=Yl(n,r),n){case"dialog":b("cancel",e),b("close",e),o=r;break;case"iframe":case"object":case"embed":b("load",e),o=r;break;case"video":case"audio":for(o=0;o<zr.length;o++)b(zr[o],e);o=r;break;case"source":b("error",e),o=r;break;case"img":case"image":case"link":b("error",e),b("load",e),o=r;break;case"details":b("toggle",e),o=r;break;case"input":ld(e,r),o=zl(e,r),b("invalid",e);break;case"option":o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=Y({},r,{value:void 0}),b("invalid",e);break;case"textarea":cd(e,r),o=$l(e,r),b("invalid",e);break;default:o=r}Hl(n,o),s=o;for(i in s)if(s.hasOwnProperty(i)){var l=s[i];i==="style"?Pm(e,l):i==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&Tm(e,l)):i==="children"?typeof l=="string"?(n!=="textarea"||l!=="")&&Zr(e,l):typeof l=="number"&&Zr(e,""+l):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(Xr.hasOwnProperty(i)?l!=null&&i==="onScroll"&&b("scroll",e):l!=null&&Cu(e,i,l,a))}switch(n){case"input":ri(e),ud(e,r,!1);break;case"textarea":ri(e),fd(e);break;case"option":r.value!=null&&e.setAttribute("value",""+bt(r.value));break;case"select":e.multiple=!!r.multiple,i=r.value,i!=null?Bn(e,!!r.multiple,i,!1):r.defaultValue!=null&&Bn(e,!!r.multiple,r.defaultValue,!0);break;default:typeof o.onClick=="function"&&(e.onclick=Di)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return ue(t),null;case 6:if(e&&t.stateNode!=null)Hp(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(R(166));if(n=on(co.current),on(nt.current),yi(t)){if(r=t.stateNode,n=t.memoizedProps,r[et]=t,(i=r.nodeValue!==n)&&(e=Ee,e!==null))switch(e.tag){case 3:gi(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&gi(r.nodeValue,n,(e.mode&1)!==0)}i&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[et]=t,t.stateNode=r}return ue(t),null;case 13:if(z(_),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(G&&xe!==null&&t.mode&1&&!(t.flags&128))cp(),zn(),t.flags|=98560,i=!1;else if(i=yi(t),r!==null&&r.dehydrated!==null){if(e===null){if(!i)throw Error(R(318));if(i=t.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(R(317));i[et]=t}else zn(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;ue(t),i=!1}else $e!==null&&(Nu($e),$e=null),i=!0;if(!i)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||_.current&1?te===0&&(te=3):mc())),t.updateQueue!==null&&(t.flags|=4),ue(t),null);case 4:return jn(),Su(e,t),e===null&&ao(t.stateNode.containerInfo),ue(t),null;case 10:return Ku(t.type._context),ue(t),null;case 17:return Se(t.type)&&Vi(),ue(t),null;case 19:if(z(_),i=t.memoizedState,i===null)return ue(t),null;if(r=(t.flags&128)!==0,a=i.rendering,a===null)if(r)Ur(i,!1);else{if(te!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(a=Hi(e),a!==null){for(t.flags|=128,Ur(i,!1),r=a.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)i=n,e=r,i.flags&=14680066,a=i.alternate,a===null?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=a.childLanes,i.lanes=a.lanes,i.child=a.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=a.memoizedProps,i.memoizedState=a.memoizedState,i.updateQueue=a.updateQueue,i.type=a.type,e=a.dependencies,i.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return V(_,_.current&1|2),t.child}e=e.sibling}i.tail!==null&&K()>_n&&(t.flags|=128,r=!0,Ur(i,!1),t.lanes=4194304)}else{if(!r)if(e=Hi(a),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),Ur(i,!0),i.tail===null&&i.tailMode==="hidden"&&!a.alternate&&!G)return ue(t),null}else 2*K()-i.renderingStartTime>_n&&n!==1073741824&&(t.flags|=128,r=!0,Ur(i,!1),t.lanes=4194304);i.isBackwards?(a.sibling=t.child,t.child=a):(n=i.last,n!==null?n.sibling=a:t.child=a,i.last=a)}return i.tail!==null?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=K(),t.sibling=null,n=_.current,V(_,r?n&1|2:n&1),t):(ue(t),null);case 22:case 23:return dc(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?Re&1073741824&&(ue(t),t.subtreeFlags&6&&(t.flags|=8192)):ue(t),null;case 24:return null;case 25:return null}throw Error(R(156,t.tag))}function A0(e,t){switch(_u(t),t.tag){case 1:return Se(t.type)&&Vi(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return jn(),z(ve),z(fe),tc(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return ec(t),null;case 13:if(z(_),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(R(340));zn()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return z(_),null;case 4:return jn(),null;case 10:return Ku(t.type._context),null;case 22:case 23:return dc(),null;case 24:return null;default:return null}}var vi=!1,ce=!1,D0=typeof WeakSet=="function"?WeakSet:Set,x=null;function Mn(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){W(e,t,r)}else n.current=null}function Tu(e,t,n){try{n()}catch(r){W(e,t,r)}}var tm=!1;function V0(e,t){if(ou=Ui,e=Qm(),ju(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch{n=null;break e}var a=0,s=-1,l=-1,c=0,d=0,v=e,g=null;t:for(;;){for(var m;v!==n||o!==0&&v.nodeType!==3||(s=a+o),v!==i||r!==0&&v.nodeType!==3||(l=a+r),v.nodeType===3&&(a+=v.nodeValue.length),(m=v.firstChild)!==null;)g=v,v=m;for(;;){if(v===e)break t;if(g===n&&++c===o&&(s=a),g===i&&++d===r&&(l=a),(m=v.nextSibling)!==null)break;v=g,g=v.parentNode}v=m}n=s===-1||l===-1?null:{start:s,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(iu={focusedElem:e,selectionRange:n},Ui=!1,x=t;x!==null;)if(t=x,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,x=e;else for(;x!==null;){t=x;try{var S=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(S!==null){var k=S.memoizedProps,O=S.memoizedState,p=t.stateNode,f=p.getSnapshotBeforeUpdate(t.elementType===t.type?k:Ge(t.type,k),O);p.__reactInternalSnapshotBeforeUpdate=f}break;case 3:var w=t.stateNode.containerInfo;w.nodeType===1?w.textContent="":w.nodeType===9&&w.documentElement&&w.removeChild(w.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(R(163))}}catch(P){W(t,t.return,P)}if(e=t.sibling,e!==null){e.return=t.return,x=e;break}x=t.return}return S=tm,tm=!1,S}function Wr(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,i!==void 0&&Tu(t,n,i)}o=o.next}while(o!==r)}}function ua(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ku(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function Yp(e){var t=e.alternate;t!==null&&(e.alternate=null,Yp(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[et],delete t[lo],delete t[lu],delete t[k0],delete t[P0])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Wp(e){return e.tag===5||e.tag===3||e.tag===4}function nm(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Wp(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Pu(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=Di));else if(r!==4&&(e=e.child,e!==null))for(Pu(e,t,n),e=e.sibling;e!==null;)Pu(e,t,n),e=e.sibling}function Ru(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(Ru(e,t,n),e=e.sibling;e!==null;)Ru(e,t,n),e=e.sibling}var oe=null,je=!1;function Et(e,t,n){for(n=n.child;n!==null;)Kp(e,t,n),n=n.sibling}function Kp(e,t,n){if(tt&&typeof tt.onCommitFiberUnmount=="function")try{tt.onCommitFiberUnmount(ta,n)}catch{}switch(n.tag){case 5:ce||Mn(n,t);case 6:var r=oe,o=je;oe=null,Et(e,t,n),oe=r,je=o,oe!==null&&(je?(e=oe,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):oe.removeChild(n.stateNode));break;case 18:oe!==null&&(je?(e=oe,n=n.stateNode,e.nodeType===8?Jl(e.parentNode,n):e.nodeType===1&&Jl(e,n),ro(e)):Jl(oe,n.stateNode));break;case 4:r=oe,o=je,oe=n.stateNode.containerInfo,je=!0,Et(e,t,n),oe=r,je=o;break;case 0:case 11:case 14:case 15:if(!ce&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,a!==void 0&&(i&2||i&4)&&Tu(n,t,a),o=o.next}while(o!==r)}Et(e,t,n);break;case 1:if(!ce&&(Mn(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(s){W(n,t,s)}Et(e,t,n);break;case 21:Et(e,t,n);break;case 22:n.mode&1?(ce=(r=ce)||n.memoizedState!==null,Et(e,t,n),ce=r):Et(e,t,n);break;default:Et(e,t,n)}}function rm(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new D0),t.forEach(function(r){var o=W0.bind(null,e,r);n.has(r)||(n.add(r),r.then(o,o))})}}function ze(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,a=t,s=a;e:for(;s!==null;){switch(s.tag){case 5:oe=s.stateNode,je=!1;break e;case 3:oe=s.stateNode.containerInfo,je=!0;break e;case 4:oe=s.stateNode.containerInfo,je=!0;break e}s=s.return}if(oe===null)throw Error(R(160));Kp(i,a,o),oe=null,je=!1;var l=o.alternate;l!==null&&(l.return=null),o.return=null}catch(c){W(o,t,c)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)Qp(t,e),t=t.sibling}function Qp(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(ze(t,e),Xe(e),r&4){try{Wr(3,e,e.return),ua(3,e)}catch(k){W(e,e.return,k)}try{Wr(5,e,e.return)}catch(k){W(e,e.return,k)}}break;case 1:ze(t,e),Xe(e),r&512&&n!==null&&Mn(n,n.return);break;case 5:if(ze(t,e),Xe(e),r&512&&n!==null&&Mn(n,n.return),e.flags&32){var o=e.stateNode;try{Zr(o,"")}catch(k){W(e,e.return,k)}}if(r&4&&(o=e.stateNode,o!=null)){var i=e.memoizedProps,a=n!==null?n.memoizedProps:i,s=e.type,l=e.updateQueue;if(e.updateQueue=null,l!==null)try{s==="input"&&i.type==="radio"&&i.name!=null&&wm(o,i),Yl(s,a);var c=Yl(s,i);for(a=0;a<l.length;a+=2){var d=l[a],v=l[a+1];d==="style"?Pm(o,v):d==="dangerouslySetInnerHTML"?Tm(o,v):d==="children"?Zr(o,v):Cu(o,d,v,c)}switch(s){case"input":Gl(o,i);break;case"textarea":vm(o,i);break;case"select":var g=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var m=i.value;m!=null?Bn(o,!!i.multiple,m,!1):g!==!!i.multiple&&(i.defaultValue!=null?Bn(o,!!i.multiple,i.defaultValue,!0):Bn(o,!!i.multiple,i.multiple?[]:"",!1))}o[lo]=i}catch(k){W(e,e.return,k)}}break;case 6:if(ze(t,e),Xe(e),r&4){if(e.stateNode===null)throw Error(R(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(k){W(e,e.return,k)}}break;case 3:if(ze(t,e),Xe(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{ro(t.containerInfo)}catch(k){W(e,e.return,k)}break;case 4:ze(t,e),Xe(e);break;case 13:ze(t,e),Xe(e),o=e.child,o.flags&8192&&(i=o.memoizedState!==null,o.stateNode.isHidden=i,!i||o.alternate!==null&&o.alternate.memoizedState!==null||(cc=K())),r&4&&rm(e);break;case 22:if(d=n!==null&&n.memoizedState!==null,e.mode&1?(ce=(c=ce)||d,ze(t,e),ce=c):ze(t,e),Xe(e),r&8192){if(c=e.memoizedState!==null,(e.stateNode.isHidden=c)&&!d&&e.mode&1)for(x=e,d=e.child;d!==null;){for(v=x=d;x!==null;){switch(g=x,m=g.child,g.tag){case 0:case 11:case 14:case 15:Wr(4,g,g.return);break;case 1:Mn(g,g.return);var S=g.stateNode;if(typeof S.componentWillUnmount=="function"){r=g,n=g.return;try{t=r,S.props=t.memoizedProps,S.state=t.memoizedState,S.componentWillUnmount()}catch(k){W(r,n,k)}}break;case 5:Mn(g,g.return);break;case 22:if(g.memoizedState!==null){im(v);continue}}m!==null?(m.return=g,x=m):im(v)}d=d.sibling}e:for(d=null,v=e;;){if(v.tag===5){if(d===null){d=v;try{o=v.stateNode,c?(i=o.style,typeof i.setProperty=="function"?i.setProperty("display","none","important"):i.display="none"):(s=v.stateNode,l=v.memoizedProps.style,a=l!=null&&l.hasOwnProperty("display")?l.display:null,s.style.display=km("display",a))}catch(k){W(e,e.return,k)}}}else if(v.tag===6){if(d===null)try{v.stateNode.nodeValue=c?"":v.memoizedProps}catch(k){W(e,e.return,k)}}else if((v.tag!==22&&v.tag!==23||v.memoizedState===null||v===e)&&v.child!==null){v.child.return=v,v=v.child;continue}if(v===e)break e;for(;v.sibling===null;){if(v.return===null||v.return===e)break e;d===v&&(d=null),v=v.return}d===v&&(d=null),v.sibling.return=v.return,v=v.sibling}}break;case 19:ze(t,e),Xe(e),r&4&&rm(e);break;case 21:break;default:ze(t,e),Xe(e)}}function Xe(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(Wp(n)){var r=n;break e}n=n.return}throw Error(R(160))}switch(r.tag){case 5:var o=r.stateNode;r.flags&32&&(Zr(o,""),r.flags&=-33);var i=nm(e);Ru(e,i,o);break;case 3:case 4:var a=r.stateNode.containerInfo,s=nm(e);Pu(e,s,a);break;default:throw Error(R(161))}}catch(l){W(e,e.return,l)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function b0(e,t,n){x=e,Xp(e,t,n)}function Xp(e,t,n){for(var r=(e.mode&1)!==0;x!==null;){var o=x,i=o.child;if(o.tag===22&&r){var a=o.memoizedState!==null||vi;if(!a){var s=o.alternate,l=s!==null&&s.memoizedState!==null||ce;s=vi;var c=ce;if(vi=a,(ce=l)&&!c)for(x=o;x!==null;)a=x,l=a.child,a.tag===22&&a.memoizedState!==null?am(o):l!==null?(l.return=a,x=l):am(o);for(;i!==null;)x=i,Xp(i,t,n),i=i.sibling;x=o,vi=s,ce=c}om(e,t,n)}else o.subtreeFlags&8772&&i!==null?(i.return=o,x=i):om(e,t,n)}}function om(e){for(;x!==null;){var t=x;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:ce||ua(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!ce)if(n===null)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:Ge(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;i!==null&&bd(t,i,r);break;case 3:var a=t.updateQueue;if(a!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}bd(t,a,n)}break;case 5:var s=t.stateNode;if(n===null&&t.flags&4){n=s;var l=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var c=t.alternate;if(c!==null){var d=c.memoizedState;if(d!==null){var v=d.dehydrated;v!==null&&ro(v)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(R(163))}ce||t.flags&512&&ku(t)}catch(g){W(t,t.return,g)}}if(t===e){x=null;break}if(n=t.sibling,n!==null){n.return=t.return,x=n;break}x=t.return}}function im(e){for(;x!==null;){var t=x;if(t===e){x=null;break}var n=t.sibling;if(n!==null){n.return=t.return,x=n;break}x=t.return}}function am(e){for(;x!==null;){var t=x;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{ua(4,t)}catch(l){W(t,n,l)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var o=t.return;try{r.componentDidMount()}catch(l){W(t,o,l)}}var i=t.return;try{ku(t)}catch(l){W(t,i,l)}break;case 5:var a=t.return;try{ku(t)}catch(l){W(t,a,l)}}}catch(l){W(t,t.return,l)}if(t===e){x=null;break}var s=t.sibling;if(s!==null){s.return=t.return,x=s;break}x=t.return}}var z0=Math.ceil,Ki=ht.ReactCurrentDispatcher,lc=ht.ReactCurrentOwner,qe=ht.ReactCurrentBatchConfig,U=0,re=null,X=null,ie=0,Re=0,Ln=jt(0),te=0,go=null,fn=0,ca=0,uc=0,Kr=null,he=null,cc=0,_n=1/0,lt=null,Qi=!1,xu=null,At=null,Si=!1,Mt=null,Xi=0,Qr=0,Eu=null,Ni=-1,Oi=0;function pe(){return U&6?K():Ni!==-1?Ni:Ni=K()}function Dt(e){return e.mode&1?U&2&&ie!==0?ie&-ie:x0.transition!==null?(Oi===0&&(Oi=Fm()),Oi):(e=q,e!==0||(e=window.event,e=e===void 0?16:zm(e.type)),e):1}function He(e,t,n,r){if(50<Qr)throw Qr=0,Eu=null,Error(R(185));yo(e,n,r),(!(U&2)||e!==re)&&(e===re&&(!(U&2)&&(ca|=n),te===4&&It(e,ie)),Te(e,r),n===1&&U===0&&!(t.mode&1)&&(_n=K()+500,aa&&$t()))}function Te(e,t){var n=e.callbackNode;Jh(e,t);var r=Fi(e,e===re?ie:0);if(r===0)n!==null&&pd(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&pd(n),t===1)e.tag===0?R0(sm.bind(null,e)):sp(sm.bind(null,e)),S0(function(){!(U&6)&&$t()}),n=null;else{switch(Um(r)){case 1:n=Uu;break;case 4:n=Lm;break;case 16:n=Bi;break;case 536870912:n=Bm;break;default:n=Bi}n=ag(n,Zp.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Zp(e,t){if(Ni=-1,Oi=0,U&6)throw Error(R(327));var n=e.callbackNode;if(Dn()&&e.callbackNode!==n)return null;var r=Fi(e,e===re?ie:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=Zi(e,r);else{t=r;var o=U;U|=2;var i=tg();(re!==e||ie!==t)&&(lt=null,_n=K()+500,an(e,t));do try{$0();break}catch(s){eg(e,s)}while(1);Wu(),Ki.current=i,U=o,X!==null?t=0:(re=null,ie=0,t=te)}if(t!==0){if(t===2&&(o=Zl(e),o!==0&&(r=o,t=Ju(e,o))),t===1)throw n=go,an(e,0),It(e,r),Te(e,K()),n;if(t===6)It(e,r);else{if(o=e.current.alternate,!(r&30)&&!G0(o)&&(t=Zi(e,r),t===2&&(i=Zl(e),i!==0&&(r=i,t=Ju(e,i))),t===1))throw n=go,an(e,0),It(e,r),Te(e,K()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(R(345));case 2:tn(e,he,lt);break;case 3:if(It(e,r),(r&130023424)===r&&(t=cc+500-K(),10<t)){if(Fi(e,0)!==0)break;if(o=e.suspendedLanes,(o&r)!==r){pe(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=su(tn.bind(null,e,he,lt),t);break}tn(e,he,lt);break;case 4:if(It(e,r),(r&4194240)===r)break;for(t=e.eventTimes,o=-1;0<r;){var a=31-_e(r);i=1<<a,a=t[a],a>o&&(o=a),r&=~i}if(r=o,r=K()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*z0(r/1960))-r,10<r){e.timeoutHandle=su(tn.bind(null,e,he,lt),r);break}tn(e,he,lt);break;case 5:tn(e,he,lt);break;default:throw Error(R(329))}}}return Te(e,K()),e.callbackNode===n?Zp.bind(null,e):null}function Ju(e,t){var n=Kr;return e.current.memoizedState.isDehydrated&&(an(e,t).flags|=256),e=Zi(e,t),e!==2&&(t=he,he=n,t!==null&&Nu(t)),e}function Nu(e){he===null?he=e:he.push.apply(he,e)}function G0(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!Ye(i(),o))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function It(e,t){for(t&=~uc,t&=~ca,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-_e(t),r=1<<n;e[n]=-1,t&=~r}}function sm(e){if(U&6)throw Error(R(327));Dn();var t=Fi(e,0);if(!(t&1))return Te(e,K()),null;var n=Zi(e,t);if(e.tag!==0&&n===2){var r=Zl(e);r!==0&&(t=r,n=Ju(e,r))}if(n===1)throw n=go,an(e,0),It(e,t),Te(e,K()),n;if(n===6)throw Error(R(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,tn(e,he,lt),Te(e,K()),null}function fc(e,t){var n=U;U|=1;try{return e(t)}finally{U=n,U===0&&(_n=K()+500,aa&&$t())}}function dn(e){Mt!==null&&Mt.tag===0&&!(U&6)&&Dn();var t=U;U|=1;var n=qe.transition,r=q;try{if(qe.transition=null,q=1,e)return e()}finally{q=r,qe.transition=n,U=t,!(U&6)&&$t()}}function dc(){Re=Ln.current,z(Ln)}function an(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,v0(n)),X!==null)for(n=X.return;n!==null;){var r=n;switch(_u(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&Vi();break;case 3:jn(),z(ve),z(fe),tc();break;case 5:ec(r);break;case 4:jn();break;case 13:z(_);break;case 19:z(_);break;case 10:Ku(r.type._context);break;case 22:case 23:dc()}n=n.return}if(re=e,X=e=Vt(e.current,null),ie=Re=t,te=0,go=null,uc=ca=fn=0,he=Kr=null,rn!==null){for(t=0;t<rn.length;t++)if(n=rn[t],r=n.interleaved,r!==null){n.interleaved=null;var o=r.next,i=n.pending;if(i!==null){var a=i.next;i.next=o,r.next=a}n.pending=r}rn=null}return e}function eg(e,t){do{var n=X;try{if(Wu(),xi.current=Wi,Yi){for(var r=H.memoizedState;r!==null;){var o=r.queue;o!==null&&(o.pending=null),r=r.next}Yi=!1}if(cn=0,ne=ee=H=null,Yr=!1,fo=0,lc.current=null,n===null||n.return===null){te=1,go=t,X=null;break}e:{var i=e,a=n.return,s=n,l=t;if(t=ie,s.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var c=l,d=s,v=d.tag;if(!(d.mode&1)&&(v===0||v===11||v===15)){var g=d.alternate;g?(d.updateQueue=g.updateQueue,d.memoizedState=g.memoizedState,d.lanes=g.lanes):(d.updateQueue=null,d.memoizedState=null)}var m=Yd(a);if(m!==null){m.flags&=-257,Wd(m,a,s,i,t),m.mode&1&&Hd(i,c,t),t=m,l=c;var S=t.updateQueue;if(S===null){var k=new Set;k.add(l),t.updateQueue=k}else S.add(l);break e}else{if(!(t&1)){Hd(i,c,t),mc();break e}l=Error(R(426))}}else if(G&&s.mode&1){var O=Yd(a);if(O!==null){!(O.flags&65536)&&(O.flags|=256),Wd(O,a,s,i,t),Hu($n(l,s));break e}}i=l=$n(l,s),te!==4&&(te=2),Kr===null?Kr=[i]:Kr.push(i),i=a;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t;var p=qp(i,l,t);Vd(i,p);break e;case 1:s=l;var f=i.type,w=i.stateNode;if(!(i.flags&128)&&(typeof f.getDerivedStateFromError=="function"||w!==null&&typeof w.componentDidCatch=="function"&&(At===null||!At.has(w)))){i.flags|=65536,t&=-t,i.lanes|=t;var P=Ap(i,s,t);Vd(i,P);break e}}i=i.return}while(i!==null)}rg(n)}catch(E){t=E,X===n&&n!==null&&(X=n=n.return);continue}break}while(1)}function tg(){var e=Ki.current;return Ki.current=Wi,e===null?Wi:e}function mc(){(te===0||te===3||te===2)&&(te=4),re===null||!(fn&268435455)&&!(ca&268435455)||It(re,ie)}function Zi(e,t){var n=U;U|=2;var r=tg();(re!==e||ie!==t)&&(lt=null,an(e,t));do try{j0();break}catch(o){eg(e,o)}while(1);if(Wu(),U=n,Ki.current=r,X!==null)throw Error(R(261));return re=null,ie=0,te}function j0(){for(;X!==null;)ng(X)}function $0(){for(;X!==null&&!wh();)ng(X)}function ng(e){var t=ig(e.alternate,e,Re);e.memoizedProps=e.pendingProps,t===null?rg(e):X=t,lc.current=null}function rg(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=A0(n,t),n!==null){n.flags&=32767,X=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{te=6,X=null;return}}else if(n=q0(n,t,Re),n!==null){X=n;return}if(t=t.sibling,t!==null){X=t;return}X=t=e}while(t!==null);te===0&&(te=5)}function tn(e,t,n){var r=q,o=qe.transition;try{qe.transition=null,q=1,_0(e,t,n,r)}finally{qe.transition=o,q=r}return null}function _0(e,t,n,r){do Dn();while(Mt!==null);if(U&6)throw Error(R(327));n=e.finishedWork;var o=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(R(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(Nh(e,i),e===re&&(X=re=null,ie=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||Si||(Si=!0,ag(Bi,function(){return Dn(),null})),i=(n.flags&15990)!==0,n.subtreeFlags&15990||i){i=qe.transition,qe.transition=null;var a=q;q=1;var s=U;U|=4,lc.current=null,V0(e,n),Qp(n,e),p0(iu),Ui=!!ou,iu=ou=null,e.current=n,b0(n,e,o),vh(),U=s,q=a,qe.transition=i}else e.current=n;if(Si&&(Si=!1,Mt=e,Xi=o),i=e.pendingLanes,i===0&&(At=null),kh(n.stateNode,r),Te(e,K()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)o=t[n],r(o.value,{componentStack:o.stack,digest:o.digest});if(Qi)throw Qi=!1,e=xu,xu=null,e;return Xi&1&&e.tag!==0&&Dn(),i=e.pendingLanes,i&1?e===Eu?Qr++:(Qr=0,Eu=e):Qr=0,$t(),null}function Dn(){if(Mt!==null){var e=Um(Xi),t=qe.transition,n=q;try{if(qe.transition=null,q=16>e?16:e,Mt===null)var r=!1;else{if(e=Mt,Mt=null,Xi=0,U&6)throw Error(R(331));var o=U;for(U|=4,x=e.current;x!==null;){var i=x,a=i.child;if(x.flags&16){var s=i.deletions;if(s!==null){for(var l=0;l<s.length;l++){var c=s[l];for(x=c;x!==null;){var d=x;switch(d.tag){case 0:case 11:case 15:Wr(8,d,i)}var v=d.child;if(v!==null)v.return=d,x=v;else for(;x!==null;){d=x;var g=d.sibling,m=d.return;if(Yp(d),d===c){x=null;break}if(g!==null){g.return=m,x=g;break}x=m}}}var S=i.alternate;if(S!==null){var k=S.child;if(k!==null){S.child=null;do{var O=k.sibling;k.sibling=null,k=O}while(k!==null)}}x=i}}if(i.subtreeFlags&2064&&a!==null)a.return=i,x=a;else e:for(;x!==null;){if(i=x,i.flags&2048)switch(i.tag){case 0:case 11:case 15:Wr(9,i,i.return)}var p=i.sibling;if(p!==null){p.return=i.return,x=p;break e}x=i.return}}var f=e.current;for(x=f;x!==null;){a=x;var w=a.child;if(a.subtreeFlags&2064&&w!==null)w.return=a,x=w;else e:for(a=f;x!==null;){if(s=x,s.flags&2048)try{switch(s.tag){case 0:case 11:case 15:ua(9,s)}}catch(E){W(s,s.return,E)}if(s===a){x=null;break e}var P=s.sibling;if(P!==null){P.return=s.return,x=P;break e}x=s.return}}if(U=o,$t(),tt&&typeof tt.onPostCommitFiberRoot=="function")try{tt.onPostCommitFiberRoot(ta,e)}catch{}r=!0}return r}finally{q=n,qe.transition=t}}return!1}function lm(e,t,n){t=$n(n,t),t=qp(e,t,1),e=qt(e,t,1),t=pe(),e!==null&&(yo(e,1,t),Te(e,t))}function W(e,t,n){if(e.tag===3)lm(e,e,n);else for(;t!==null;){if(t.tag===3){lm(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(At===null||!At.has(r))){e=$n(n,e),e=Ap(t,e,1),t=qt(t,e,1),e=pe(),t!==null&&(yo(t,1,e),Te(t,e));break}}t=t.return}}function H0(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=pe(),e.pingedLanes|=e.suspendedLanes&n,re===e&&(ie&n)===n&&(te===4||te===3&&(ie&130023424)===ie&&500>K()-cc?an(e,0):uc|=n),Te(e,t)}function og(e,t){t===0&&(e.mode&1?(t=ai,ai<<=1,!(ai&130023424)&&(ai=4194304)):t=1);var n=pe();e=gt(e,t),e!==null&&(yo(e,t,n),Te(e,n))}function Y0(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),og(e,n)}function W0(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;o!==null&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(R(314))}r!==null&&r.delete(t),og(e,n)}var ig;ig=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||ve.current)we=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return we=!1,U0(e,t,n);we=!!(e.flags&131072)}else we=!1,G&&t.flags&1048576&&lp(t,Gi,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ji(e,t),e=t.pendingProps;var o=bn(t,fe.current);An(t,n),o=rc(null,t,r,e,o,n);var i=oc();return t.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Se(r)?(i=!0,bi(t)):i=!1,t.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,Xu(t),o.updater=sa,t.stateNode=o,o._reactInternals=t,pu(t,r,e,n),t=hu(null,t,r,!0,i,n)):(t.tag=0,G&&i&&$u(t),me(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ji(e,t),e=t.pendingProps,o=r._init,r=o(r._payload),t.type=r,o=t.tag=Q0(r),e=Ge(r,e),o){case 0:t=yu(null,t,r,e,n);break e;case 1:t=Xd(null,t,r,e,n);break e;case 11:t=Kd(null,t,r,e,n);break e;case 14:t=Qd(null,t,r,Ge(r.type,e),n);break e}throw Error(R(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ge(r,o),yu(e,t,r,o,n);case 1:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ge(r,o),Xd(e,t,r,o,n);case 3:e:{if(zp(t),e===null)throw Error(R(387));r=t.pendingProps,i=t.memoizedState,o=i.element,dp(e,t),_i(t,r,null,n);var a=t.memoizedState;if(r=a.element,i.isDehydrated)if(i={element:r,isDehydrated:!1,cache:a.cache,pendingSuspenseBoundaries:a.pendingSuspenseBoundaries,transitions:a.transitions},t.updateQueue.baseState=i,t.memoizedState=i,t.flags&256){o=$n(Error(R(423)),t),t=Zd(e,t,r,n,o);break e}else if(r!==o){o=$n(Error(R(424)),t),t=Zd(e,t,r,n,o);break e}else for(xe=Ut(t.stateNode.containerInfo.firstChild),Ee=t,G=!0,$e=null,n=yp(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(zn(),r===o){t=yt(e,t,n);break e}me(e,t,r,n)}t=t.child}return t;case 5:return hp(t),e===null&&fu(t),r=t.type,o=t.pendingProps,i=e!==null?e.memoizedProps:null,a=o.children,au(r,o)?a=null:i!==null&&au(r,i)&&(t.flags|=32),bp(e,t),me(e,t,a,n),t.child;case 6:return e===null&&fu(t),null;case 13:return Gp(e,t,n);case 4:return Zu(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=Gn(t,null,r,n):me(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ge(r,o),Kd(e,t,r,o,n);case 7:return me(e,t,t.pendingProps,n),t.child;case 8:return me(e,t,t.pendingProps.children,n),t.child;case 12:return me(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,a=o.value,V(ji,r._currentValue),r._currentValue=a,i!==null)if(Ye(i.value,a)){if(i.children===o.children&&!ve.current){t=yt(e,t,n);break e}}else for(i=t.child,i!==null&&(i.return=t);i!==null;){var s=i.dependencies;if(s!==null){a=i.child;for(var l=s.firstContext;l!==null;){if(l.context===r){if(i.tag===1){l=dt(-1,n&-n),l.tag=2;var c=i.updateQueue;if(c!==null){c=c.shared;var d=c.pending;d===null?l.next=l:(l.next=d.next,d.next=l),c.pending=l}}i.lanes|=n,l=i.alternate,l!==null&&(l.lanes|=n),du(i.return,n,t),s.lanes|=n;break}l=l.next}}else if(i.tag===10)a=i.type===t.type?null:i.child;else if(i.tag===18){if(a=i.return,a===null)throw Error(R(341));a.lanes|=n,s=a.alternate,s!==null&&(s.lanes|=n),du(a,n,t),a=i.sibling}else a=i.child;if(a!==null)a.return=i;else for(a=i;a!==null;){if(a===t){a=null;break}if(i=a.sibling,i!==null){i.return=a.return,a=i;break}a=a.return}i=a}me(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,An(t,n),o=Ae(o),r=r(o),t.flags|=1,me(e,t,r,n),t.child;case 14:return r=t.type,o=Ge(r,t.pendingProps),o=Ge(r.type,o),Qd(e,t,r,o,n);case 15:return Dp(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Ge(r,o),Ji(e,t),t.tag=1,Se(r)?(e=!0,bi(t)):e=!1,An(t,n),pp(t,r,o),pu(t,r,o,n),hu(null,t,r,!0,e,n);case 19:return jp(e,t,n);case 22:return Vp(e,t,n)}throw Error(R(156,t.tag))};function ag(e,t){return Mm(e,t)}function K0(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ue(e,t,n,r){return new K0(e,t,n,r)}function pc(e){return e=e.prototype,!(!e||!e.isReactComponent)}function Q0(e){if(typeof e=="function")return pc(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Lu)return 11;if(e===Bu)return 14}return 2}function Vt(e,t){var n=e.alternate;return n===null?(n=Ue(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ii(e,t,n,r,o,i){var a=2;if(r=e,typeof e=="function")pc(e)&&(a=1);else if(typeof e=="string")a=5;else e:switch(e){case Pn:return sn(n.children,o,i,t);case Mu:a=8,o|=8;break;case Al:return e=Ue(12,n,t,o|2),e.elementType=Al,e.lanes=i,e;case Dl:return e=Ue(13,n,t,o),e.elementType=Dl,e.lanes=i,e;case Vl:return e=Ue(19,n,t,o),e.elementType=Vl,e.lanes=i,e;case gm:return fa(n,o,i,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case mm:a=10;break e;case pm:a=9;break e;case Lu:a=11;break e;case Bu:a=14;break e;case Jt:a=16,r=null;break e}throw Error(R(130,e==null?e:typeof e,""))}return t=Ue(a,n,t,o),t.elementType=e,t.type=r,t.lanes=i,t}function sn(e,t,n,r){return e=Ue(7,e,r,t),e.lanes=n,e}function fa(e,t,n,r){return e=Ue(22,e,r,t),e.elementType=gm,e.lanes=n,e.stateNode={isHidden:!1},e}function Fl(e,t,n){return e=Ue(6,e,null,t),e.lanes=n,e}function Ul(e,t,n){return t=Ue(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function X0(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vl(0),this.expirationTimes=vl(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vl(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function gc(e,t,n,r,o,i,a,s,l){return e=new X0(e,t,n,s,l),t===1?(t=1,i===!0&&(t|=8)):t=0,i=Ue(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Xu(i),e}function Z0(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:kn,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function sg(e){if(!e)return zt;e=e._reactInternals;e:{if(pn(e)!==e||e.tag!==1)throw Error(R(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Se(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(R(171))}if(e.tag===1){var n=e.type;if(Se(n))return ap(e,n,t)}return t}function lg(e,t,n,r,o,i,a,s,l){return e=gc(n,r,!0,e,o,i,a,s,l),e.context=sg(null),n=e.current,r=pe(),o=Dt(n),i=dt(r,o),i.callback=t??null,qt(n,i,o),e.current.lanes=o,yo(e,o,r),Te(e,r),e}function da(e,t,n,r){var o=t.current,i=pe(),a=Dt(o);return n=sg(n),t.context===null?t.context=n:t.pendingContext=n,t=dt(i,a),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=qt(o,t,a),e!==null&&(He(e,o,a,i),Ri(e,o,a)),a}function ea(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function um(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function yc(e,t){um(e,t),(e=e.alternate)&&um(e,t)}function ew(){return null}var ug=typeof reportError=="function"?reportError:function(e){console.error(e)};function hc(e){this._internalRoot=e}ma.prototype.render=hc.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(R(409));da(e,t,null,null)};ma.prototype.unmount=hc.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;dn(function(){da(null,e,null,null)}),t[pt]=null}};function ma(e){this._internalRoot=e}ma.prototype.unstable_scheduleHydration=function(e){if(e){var t=Dm();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Ot.length&&t!==0&&t<Ot[n].priority;n++);Ot.splice(n,0,e),n===0&&bm(e)}};function wc(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function pa(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function cm(){}function tw(e,t,n,r,o){if(o){if(typeof r=="function"){var i=r;r=function(){var c=ea(a);i.call(c)}}var a=lg(t,r,e,0,null,!1,!1,"",cm);return e._reactRootContainer=a,e[pt]=a.current,ao(e.nodeType===8?e.parentNode:e),dn(),a}for(;o=e.lastChild;)e.removeChild(o);if(typeof r=="function"){var s=r;r=function(){var c=ea(l);s.call(c)}}var l=gc(e,0,!1,null,null,!1,!1,"",cm);return e._reactRootContainer=l,e[pt]=l.current,ao(e.nodeType===8?e.parentNode:e),dn(function(){da(t,l,n,r)}),l}function ga(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if(typeof o=="function"){var s=o;o=function(){var l=ea(a);s.call(l)}}da(t,a,e,o)}else a=tw(n,t,e,o,r);return ea(a)}qm=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=br(t.pendingLanes);n!==0&&(qu(t,n|1),Te(t,K()),!(U&6)&&(_n=K()+500,$t()))}break;case 13:dn(function(){var r=gt(e,1);if(r!==null){var o=pe();He(r,e,1,o)}}),yc(e,1)}};Au=function(e){if(e.tag===13){var t=gt(e,134217728);if(t!==null){var n=pe();He(t,e,134217728,n)}yc(e,134217728)}};Am=function(e){if(e.tag===13){var t=Dt(e),n=gt(e,t);if(n!==null){var r=pe();He(n,e,t,r)}yc(e,t)}};Dm=function(){return q};Vm=function(e,t){var n=q;try{return q=e,t()}finally{q=n}};Kl=function(e,t,n){switch(t){case"input":if(Gl(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=ia(r);if(!o)throw Error(R(90));hm(r),Gl(r,o)}}}break;case"textarea":vm(e,n);break;case"select":t=n.value,t!=null&&Bn(e,!!n.multiple,t,!1)}};Em=fc;Jm=dn;var nw={usingClientEntryPoint:!1,Events:[wo,Jn,ia,Rm,xm,fc]},qr={findFiberByHostInstance:nn,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rw={bundleType:qr.bundleType,version:qr.version,rendererPackageName:qr.rendererPackageName,rendererConfig:qr.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ht.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=Im(e),e===null?null:e.stateNode},findFiberByHostInstance:qr.findFiberByHostInstance||ew,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&(Ar=__REACT_DEVTOOLS_GLOBAL_HOOK__,!Ar.isDisabled&&Ar.supportsFiber))try{ta=Ar.inject(rw),tt=Ar}catch{}var Ar;Oe.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nw;Oe.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!wc(t))throw Error(R(200));return Z0(e,t,null,n)};Oe.createRoot=function(e,t){if(!wc(e))throw Error(R(299));var n=!1,r="",o=ug;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(o=t.onRecoverableError)),t=gc(e,1,!1,null,null,n,!1,r,o),e[pt]=t.current,ao(e.nodeType===8?e.parentNode:e),new hc(t)};Oe.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(R(188)):(e=Object.keys(e).join(","),Error(R(268,e)));return e=Im(t),e=e===null?null:e.stateNode,e};Oe.flushSync=function(e){return dn(e)};Oe.hydrate=function(e,t,n){if(!pa(t))throw Error(R(200));return ga(null,e,t,!0,n)};Oe.hydrateRoot=function(e,t,n){if(!wc(e))throw Error(R(405));var r=n!=null&&n.hydratedSources||null,o=!1,i="",a=ug;if(n!=null&&(n.unstable_strictMode===!0&&(o=!0),n.identifierPrefix!==void 0&&(i=n.identifierPrefix),n.onRecoverableError!==void 0&&(a=n.onRecoverableError)),t=lg(t,null,e,1,n??null,o,!1,i,a),e[pt]=t.current,ao(e),r)for(e=0;e<r.length;e++)n=r[e],o=n._getVersion,o=o(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new ma(t)};Oe.render=function(e,t,n){if(!pa(t))throw Error(R(200));return ga(null,e,t,!1,n)};Oe.unmountComponentAtNode=function(e){if(!pa(e))throw Error(R(40));return e._reactRootContainer?(dn(function(){ga(null,null,e,!1,function(){e._reactRootContainer=null,e[pt]=null})}),!0):!1};Oe.unstable_batchedUpdates=fc;Oe.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!pa(n))throw Error(R(200));if(e==null||e._reactInternals===void 0)throw Error(R(38));return ga(e,t,n,!1,r)};Oe.version="18.2.0-next-9e3b772b8-20220608"});var mg=it((bv,dg)=>{"use strict";function fg(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(fg)}catch(e){console.error(e)}}fg(),dg.exports=cg()});var gg=it(vc=>{"use strict";var pg=mg();vc.createRoot=pg.createRoot,vc.hydrateRoot=pg.hydrateRoot;var zv});var Cy=it(el=>{"use strict";var Jv=st(),Nv=Symbol.for("react.element"),Ov=Symbol.for("react.fragment"),Iv=Object.prototype.hasOwnProperty,Cv=Jv.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Mv={key:!0,ref:!0,__self:!0,__source:!0};function Iy(e,t,n){var r,o={},i=null,a=null;n!==void 0&&(i=""+n),t.key!==void 0&&(i=""+t.key),t.ref!==void 0&&(a=t.ref);for(r in t)Iv.call(t,r)&&!Mv.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps,t)o[r]===void 0&&(o[r]=t[r]);return{$$typeof:Nv,type:e,key:i,ref:a,props:o,_owner:Cv.current}}el.Fragment=Ov;el.jsx=Iy;el.jsxs=Iy});var Lf=it((bP,My)=>{"use strict";My.exports=Cy()});var Xt=at(st(),1),Ly=at(gg(),1);function j(e,t){if(!e)throw new Error(t)}var ow=34028234663852886e22,iw=-34028234663852886e22,aw=4294967295,sw=2147483647,lw=-2147483648;function Wn(e){if(typeof e!="number")throw new Error("invalid int 32: "+typeof e);if(!Number.isInteger(e)||e>sw||e<lw)throw new Error("invalid int 32: "+e)}function So(e){if(typeof e!="number")throw new Error("invalid uint 32: "+typeof e);if(!Number.isInteger(e)||e>aw||e<0)throw new Error("invalid uint 32: "+e)}function ya(e){if(typeof e!="number")throw new Error("invalid float 32: "+typeof e);if(Number.isFinite(e)&&(e>ow||e<iw))throw new Error("invalid float 32: "+e)}var yg=Symbol("@bufbuild/protobuf/enum-type");function hg(e){let t=e[yg];return j(t,"missing enum type on enum object"),t}function Sc(e,t,n,r){e[yg]=Tc(t,n.map(o=>({no:o.no,name:o.name,localName:e[o.no]})),r)}function Tc(e,t,n){let r=Object.create(null),o=Object.create(null),i=[];for(let a of t){let s=vg(a);i.push(s),r[a.name]=s,o[a.no]=s}return{typeName:e,values:i,findName(a){return r[a]},findNumber(a){return o[a]}}}function wg(e,t,n){let r={};for(let o of t){let i=vg(o);r[i.localName]=i.no,r[i.no]=i.localName}return Sc(r,e,t,n),r}function vg(e){return"localName"in e?e:Object.assign(Object.assign({},e),{localName:e.name})}var y=class{equals(t){return this.getType().runtime.util.equals(this.getType(),this,t)}clone(){return this.getType().runtime.util.clone(this)}fromBinary(t,n){let r=this.getType(),o=r.runtime.bin,i=o.makeReadOptions(n);return o.readMessage(this,i.readerFactory(t),t.byteLength,i),this}fromJson(t,n){let r=this.getType(),o=r.runtime.json,i=o.makeReadOptions(n);return o.readMessage(r,t,i,this),this}fromJsonString(t,n){let r;try{r=JSON.parse(t)}catch(o){throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${o instanceof Error?o.message:String(o)}`)}return this.fromJson(r,n)}toBinary(t){let n=this.getType(),r=n.runtime.bin,o=r.makeWriteOptions(t),i=o.writerFactory();return r.writeMessage(this,i,o),i.finish()}toJson(t){let n=this.getType(),r=n.runtime.json,o=r.makeWriteOptions(t);return r.writeMessage(this,o)}toJsonString(t){var n;let r=this.toJson(t);return JSON.stringify(r,null,(n=t?.prettySpaces)!==null&&n!==void 0?n:0)}toJSON(){return this.toJson({emitDefaultValues:!0})}getType(){return Object.getPrototypeOf(this).constructor}};function Sg(e,t,n,r){var o;let i=(o=r?.localName)!==null&&o!==void 0?o:t.substring(t.lastIndexOf(".")+1),a={[i]:function(s){e.util.initFields(this),e.util.initPartial(s,this)}}[i];return Object.setPrototypeOf(a.prototype,new y),Object.assign(a,{runtime:e,typeName:t,fields:e.util.newFieldList(n),fromBinary(s,l){return new a().fromBinary(s,l)},fromJson(s,l){return new a().fromJson(s,l)},fromJsonString(s,l){return new a().fromJsonString(s,l)},equals(s,l){return e.util.equals(a,s,l)}}),a}function ha(e,t,n,r){return{syntax:e,json:t,bin:n,util:r,makeMessageType(o,i,a){return Sg(this,o,i,a)},makeEnum:wg,makeEnumType:Tc,getEnumType:hg}}var T;(function(e){e[e.DOUBLE=1]="DOUBLE",e[e.FLOAT=2]="FLOAT",e[e.INT64=3]="INT64",e[e.UINT64=4]="UINT64",e[e.INT32=5]="INT32",e[e.FIXED64=6]="FIXED64",e[e.FIXED32=7]="FIXED32",e[e.BOOL=8]="BOOL",e[e.STRING=9]="STRING",e[e.BYTES=12]="BYTES",e[e.UINT32=13]="UINT32",e[e.SFIXED32=15]="SFIXED32",e[e.SFIXED64=16]="SFIXED64",e[e.SINT32=17]="SINT32",e[e.SINT64=18]="SINT64"})(T||(T={}));var Ve;(function(e){e[e.BIGINT=0]="BIGINT",e[e.STRING=1]="STRING"})(Ve||(Ve={}));function kg(){let e=0,t=0;for(let r=0;r<28;r+=7){let o=this.buf[this.pos++];if(e|=(o&127)<<r,!(o&128))return this.assertBounds(),[e,t]}let n=this.buf[this.pos++];if(e|=(n&15)<<28,t=(n&112)>>4,!(n&128))return this.assertBounds(),[e,t];for(let r=3;r<=31;r+=7){let o=this.buf[this.pos++];if(t|=(o&127)<<r,!(o&128))return this.assertBounds(),[e,t]}throw new Error("invalid varint")}function va(e,t,n){for(let i=0;i<28;i=i+7){let a=e>>>i,s=!(!(a>>>7)&&t==0),l=(s?a|128:a)&255;if(n.push(l),!s)return}let r=e>>>28&15|(t&7)<<4,o=!!(t>>3);if(n.push((o?r|128:r)&255),!!o){for(let i=3;i<31;i=i+7){let a=t>>>i,s=!!(a>>>7),l=(s?a|128:a)&255;if(n.push(l),!s)return}n.push(t>>>31&1)}}var wa=4294967296;function kc(e){let t=e[0]==="-";t&&(e=e.slice(1));let n=1e6,r=0,o=0;function i(a,s){let l=Number(e.slice(a,s));o*=n,r=r*n+l,r>=wa&&(o=o+(r/wa|0),r=r%wa)}return i(-24,-18),i(-18,-12),i(-12,-6),i(-6),t?Rg(r,o):Rc(r,o)}function Pg(e,t){let n=Rc(e,t),r=n.hi&2147483648;r&&(n=Rg(n.lo,n.hi));let o=Pc(n.lo,n.hi);return r?"-"+o:o}function Pc(e,t){if({lo:e,hi:t}=uw(e,t),t<=2097151)return String(wa*t+e);let n=e&16777215,r=(e>>>24|t<<8)&16777215,o=t>>16&65535,i=n+r*6777216+o*6710656,a=r+o*8147497,s=o*2,l=1e7;return i>=l&&(a+=Math.floor(i/l),i%=l),a>=l&&(s+=Math.floor(a/l),a%=l),s.toString()+Tg(a)+Tg(i)}function uw(e,t){return{lo:e>>>0,hi:t>>>0}}function Rc(e,t){return{lo:e|0,hi:t|0}}function Rg(e,t){return t=~t,e?e=~e+1:t+=1,Rc(e,t)}var Tg=e=>{let t=String(e);return"0000000".slice(t.length)+t};function xc(e,t){if(e>=0){for(;e>127;)t.push(e&127|128),e=e>>>7;t.push(e)}else{for(let n=0;n<9;n++)t.push(e&127|128),e=e>>7;t.push(1)}}function xg(){let e=this.buf[this.pos++],t=e&127;if(!(e&128))return this.assertBounds(),t;if(e=this.buf[this.pos++],t|=(e&127)<<7,!(e&128))return this.assertBounds(),t;if(e=this.buf[this.pos++],t|=(e&127)<<14,!(e&128))return this.assertBounds(),t;if(e=this.buf[this.pos++],t|=(e&127)<<21,!(e&128))return this.assertBounds(),t;e=this.buf[this.pos++],t|=(e&15)<<28;for(let n=5;e&128&&n<10;n++)e=this.buf[this.pos++];if(e&128)throw new Error("invalid varint");return this.assertBounds(),t>>>0}function cw(){let e=new DataView(new ArrayBuffer(8));if(typeof BigInt=="function"&&typeof e.getBigInt64=="function"&&typeof e.getBigUint64=="function"&&typeof e.setBigInt64=="function"&&typeof e.setBigUint64=="function"&&(typeof process!="object"||typeof process.env!="object"||process.env.BUF_BIGINT_DISABLE!=="1")){let o=BigInt("-9223372036854775808"),i=BigInt("9223372036854775807"),a=BigInt("0"),s=BigInt("18446744073709551615");return{zero:BigInt(0),supported:!0,parse(l){let c=typeof l=="bigint"?l:BigInt(l);if(c>i||c<o)throw new Error(`int64 invalid: ${l}`);return c},uParse(l){let c=typeof l=="bigint"?l:BigInt(l);if(c>s||c<a)throw new Error(`uint64 invalid: ${l}`);return c},enc(l){return e.setBigInt64(0,this.parse(l),!0),{lo:e.getInt32(0,!0),hi:e.getInt32(4,!0)}},uEnc(l){return e.setBigInt64(0,this.uParse(l),!0),{lo:e.getInt32(0,!0),hi:e.getInt32(4,!0)}},dec(l,c){return e.setInt32(0,l,!0),e.setInt32(4,c,!0),e.getBigInt64(0,!0)},uDec(l,c){return e.setInt32(0,l,!0),e.setInt32(4,c,!0),e.getBigUint64(0,!0)}}}let n=o=>j(/^-?[0-9]+$/.test(o),`int64 invalid: ${o}`),r=o=>j(/^[0-9]+$/.test(o),`uint64 invalid: ${o}`);return{zero:"0",supported:!1,parse(o){return typeof o!="string"&&(o=o.toString()),n(o),o},uParse(o){return typeof o!="string"&&(o=o.toString()),r(o),o},enc(o){return typeof o!="string"&&(o=o.toString()),n(o),kc(o)},uEnc(o){return typeof o!="string"&&(o=o.toString()),r(o),kc(o)},dec(o,i){return Pg(o,i)},uDec(o,i){return Pc(o,i)}}}var F=cw();var A;(function(e){e[e.Varint=0]="Varint",e[e.Bit64=1]="Bit64",e[e.LengthDelimited=2]="LengthDelimited",e[e.StartGroup=3]="StartGroup",e[e.EndGroup=4]="EndGroup",e[e.Bit32=5]="Bit32"})(A||(A={}));var Sa=class{constructor(t){this.stack=[],this.textEncoder=t??new TextEncoder,this.chunks=[],this.buf=[]}finish(){this.chunks.push(new Uint8Array(this.buf));let t=0;for(let o=0;o<this.chunks.length;o++)t+=this.chunks[o].length;let n=new Uint8Array(t),r=0;for(let o=0;o<this.chunks.length;o++)n.set(this.chunks[o],r),r+=this.chunks[o].length;return this.chunks=[],n}fork(){return this.stack.push({chunks:this.chunks,buf:this.buf}),this.chunks=[],this.buf=[],this}join(){let t=this.finish(),n=this.stack.pop();if(!n)throw new Error("invalid state, fork stack empty");return this.chunks=n.chunks,this.buf=n.buf,this.uint32(t.byteLength),this.raw(t)}tag(t,n){return this.uint32((t<<3|n)>>>0)}raw(t){return this.buf.length&&(this.chunks.push(new Uint8Array(this.buf)),this.buf=[]),this.chunks.push(t),this}uint32(t){for(So(t);t>127;)this.buf.push(t&127|128),t=t>>>7;return this.buf.push(t),this}int32(t){return Wn(t),xc(t,this.buf),this}bool(t){return this.buf.push(t?1:0),this}bytes(t){return this.uint32(t.byteLength),this.raw(t)}string(t){let n=this.textEncoder.encode(t);return this.uint32(n.byteLength),this.raw(n)}float(t){ya(t);let n=new Uint8Array(4);return new DataView(n.buffer).setFloat32(0,t,!0),this.raw(n)}double(t){let n=new Uint8Array(8);return new DataView(n.buffer).setFloat64(0,t,!0),this.raw(n)}fixed32(t){So(t);let n=new Uint8Array(4);return new DataView(n.buffer).setUint32(0,t,!0),this.raw(n)}sfixed32(t){Wn(t);let n=new Uint8Array(4);return new DataView(n.buffer).setInt32(0,t,!0),this.raw(n)}sint32(t){return Wn(t),t=(t<<1^t>>31)>>>0,xc(t,this.buf),this}sfixed64(t){let n=new Uint8Array(8),r=new DataView(n.buffer),o=F.enc(t);return r.setInt32(0,o.lo,!0),r.setInt32(4,o.hi,!0),this.raw(n)}fixed64(t){let n=new Uint8Array(8),r=new DataView(n.buffer),o=F.uEnc(t);return r.setInt32(0,o.lo,!0),r.setInt32(4,o.hi,!0),this.raw(n)}int64(t){let n=F.enc(t);return va(n.lo,n.hi,this.buf),this}sint64(t){let n=F.enc(t),r=n.hi>>31,o=n.lo<<1^r,i=(n.hi<<1|n.lo>>>31)^r;return va(o,i,this.buf),this}uint64(t){let n=F.uEnc(t);return va(n.lo,n.hi,this.buf),this}},Ta=class{constructor(t,n){this.varint64=kg,this.uint32=xg,this.buf=t,this.len=t.length,this.pos=0,this.view=new DataView(t.buffer,t.byteOffset,t.byteLength),this.textDecoder=n??new TextDecoder}tag(){let t=this.uint32(),n=t>>>3,r=t&7;if(n<=0||r<0||r>5)throw new Error("illegal tag: field no "+n+" wire type "+r);return[n,r]}skip(t){let n=this.pos;switch(t){case A.Varint:for(;this.buf[this.pos++]&128;);break;case A.Bit64:this.pos+=4;case A.Bit32:this.pos+=4;break;case A.LengthDelimited:let r=this.uint32();this.pos+=r;break;case A.StartGroup:let o;for(;(o=this.tag()[1])!==A.EndGroup;)this.skip(o);break;default:throw new Error("cant skip wire type "+t)}return this.assertBounds(),this.buf.subarray(n,this.pos)}assertBounds(){if(this.pos>this.len)throw new RangeError("premature EOF")}int32(){return this.uint32()|0}sint32(){let t=this.uint32();return t>>>1^-(t&1)}int64(){return F.dec(...this.varint64())}uint64(){return F.uDec(...this.varint64())}sint64(){let[t,n]=this.varint64(),r=-(t&1);return t=(t>>>1|(n&1)<<31)^r,n=n>>>1^r,F.dec(t,n)}bool(){let[t,n]=this.varint64();return t!==0||n!==0}fixed32(){return this.view.getUint32((this.pos+=4)-4,!0)}sfixed32(){return this.view.getInt32((this.pos+=4)-4,!0)}fixed64(){return F.uDec(this.sfixed32(),this.sfixed32())}sfixed64(){return F.dec(this.sfixed32(),this.sfixed32())}float(){return this.view.getFloat32((this.pos+=4)-4,!0)}double(){return this.view.getFloat64((this.pos+=8)-8,!0)}bytes(){let t=this.uint32(),n=this.pos;return this.pos+=t,this.assertBounds(),this.buf.subarray(n,n+t)}string(){return this.textDecoder.decode(this.bytes())}};function gn(e,t){return t instanceof y||!e.fieldWrapper?t:e.fieldWrapper.wrapField(t)}var cS={"google.protobuf.DoubleValue":T.DOUBLE,"google.protobuf.FloatValue":T.FLOAT,"google.protobuf.Int64Value":T.INT64,"google.protobuf.UInt64Value":T.UINT64,"google.protobuf.Int32Value":T.INT32,"google.protobuf.UInt32Value":T.UINT32,"google.protobuf.BoolValue":T.BOOL,"google.protobuf.StringValue":T.STRING,"google.protobuf.BytesValue":T.BYTES};function wt(e,t,n){if(t===n)return!0;if(e==T.BYTES){if(!(t instanceof Uint8Array)||!(n instanceof Uint8Array)||t.length!==n.length)return!1;for(let r=0;r<t.length;r++)if(t[r]!==n[r])return!1;return!0}switch(e){case T.UINT64:case T.FIXED64:case T.INT64:case T.SFIXED64:case T.SINT64:return t==n}return!1}function To(e,t){switch(e){case T.BOOL:return!1;case T.UINT64:case T.FIXED64:case T.INT64:case T.SFIXED64:case T.SINT64:return t==0?F.zero:"0";case T.DOUBLE:case T.FLOAT:return 0;case T.BYTES:return new Uint8Array(0);case T.STRING:return"";default:return 0}}function Ec(e,t){let n=t===void 0,r=A.Varint,o=t===0;switch(e){case T.STRING:o=n||!t.length,r=A.LengthDelimited;break;case T.BOOL:o=t===!1;break;case T.DOUBLE:r=A.Bit64;break;case T.FLOAT:r=A.Bit32;break;case T.INT64:o=n||t==0;break;case T.UINT64:o=n||t==0;break;case T.FIXED64:o=n||t==0,r=A.Bit64;break;case T.BYTES:o=n||!t.byteLength,r=A.LengthDelimited;break;case T.FIXED32:r=A.Bit32;break;case T.SFIXED32:r=A.Bit32;break;case T.SFIXED64:o=n||t==0,r=A.Bit64;break;case T.SINT64:o=n||t==0;break}let i=T[e].toLowerCase();return[r,i,n||o]}var Kn=Symbol("@bufbuild/protobuf/unknown-fields"),Eg={readUnknownFields:!0,readerFactory:e=>new Ta(e)},Jg={writeUnknownFields:!0,writerFactory:()=>new Sa};function fw(e){return e?Object.assign(Object.assign({},Eg),e):Eg}function dw(e){return e?Object.assign(Object.assign({},Jg),e):Jg}function Ra(){return{makeReadOptions:fw,makeWriteOptions:dw,listUnknownFields(e){var t;return(t=e[Kn])!==null&&t!==void 0?t:[]},discardUnknownFields(e){delete e[Kn]},writeUnknownFields(e,t){let r=e[Kn];if(r)for(let o of r)t.tag(o.no,o.wireType).raw(o.data)},onUnknownField(e,t,n,r){let o=e;Array.isArray(o[Kn])||(o[Kn]=[]),o[Kn].push({no:t,wireType:n,data:r})},readMessage(e,t,n,r,o){let i=e.getType(),a=o?t.len:t.pos+n,s,l;for(;t.pos<a&&([s,l]=t.tag(),l!=A.EndGroup);){let c=i.fields.find(s);if(!c){let m=t.skip(l);r.readUnknownFields&&this.onUnknownField(e,s,l,m);continue}let d=e,v=c.repeated,g=c.localName;switch(c.oneof&&(d=d[c.oneof.localName],d.case!=g&&delete d.value,d.case=g,g="value"),c.kind){case"scalar":case"enum":let m=c.kind=="enum"?T.INT32:c.T,S=Pa;if(c.kind=="scalar"&&c.L>0&&(S=pw),v){let f=d[g];if(l==A.LengthDelimited&&m!=T.STRING&&m!=T.BYTES){let w=t.uint32()+t.pos;for(;t.pos<w;)f.push(S(t,m))}else f.push(S(t,m))}else d[g]=S(t,m);break;case"message":let k=c.T;v?d[g].push(ka(t,new k,r,c)):d[g]instanceof y?ka(t,d[g],r,c):(d[g]=ka(t,new k,r,c),k.fieldWrapper&&!c.oneof&&!c.repeated&&(d[g]=k.fieldWrapper.unwrapField(d[g])));break;case"map":let[O,p]=mw(c,t,r);d[g][O]=p;break}}if(o&&(l!=A.EndGroup||s!==n))throw new Error("invalid end group tag")}}}function ka(e,t,n,r){let o=t.getType().runtime.bin,i=r?.delimited;return o.readMessage(t,e,i?r?.no:e.uint32(),n,i),t}function mw(e,t,n){let r=t.uint32(),o=t.pos+r,i,a;for(;t.pos<o;){let[s]=t.tag();switch(s){case 1:i=Pa(t,e.K);break;case 2:switch(e.V.kind){case"scalar":a=Pa(t,e.V.T);break;case"enum":a=t.int32();break;case"message":a=ka(t,new e.V.T,n,void 0);break}break}}if(i===void 0){let s=To(e.K,Ve.BIGINT);i=e.K==T.BOOL?s.toString():s}if(typeof i!="string"&&typeof i!="number"&&(i=i.toString()),a===void 0)switch(e.V.kind){case"scalar":a=To(e.V.T,Ve.BIGINT);break;case"enum":a=0;break;case"message":a=new e.V.T;break}return[i,a]}function pw(e,t){let n=Pa(e,t);return typeof n=="bigint"?n.toString():n}function Pa(e,t){switch(t){case T.STRING:return e.string();case T.BOOL:return e.bool();case T.DOUBLE:return e.double();case T.FLOAT:return e.float();case T.INT32:return e.int32();case T.INT64:return e.int64();case T.UINT64:return e.uint64();case T.FIXED64:return e.fixed64();case T.BYTES:return e.bytes();case T.FIXED32:return e.fixed32();case T.SFIXED32:return e.sfixed32();case T.SFIXED64:return e.sfixed64();case T.SINT64:return e.sint64();case T.UINT32:return e.uint32();case T.SINT32:return e.sint32()}}function xa(e,t,n,r,o){e.tag(n.no,A.LengthDelimited),e.fork();let i=r;switch(n.K){case T.INT32:case T.FIXED32:case T.UINT32:case T.SFIXED32:case T.SINT32:i=Number.parseInt(r);break;case T.BOOL:j(r=="true"||r=="false"),i=r=="true";break}switch(vt(e,n.K,1,i,!0),n.V.kind){case"scalar":vt(e,n.V.T,2,o,!0);break;case"enum":vt(e,T.INT32,2,o,!0);break;case"message":e.tag(2,A.LengthDelimited).bytes(o.toBinary(t));break}e.join()}function Qn(e,t,n,r){if(r!==void 0){let o=gn(n.T,r);n?.delimited?e.tag(n.no,A.StartGroup).raw(o.toBinary(t)).tag(n.no,A.EndGroup):e.tag(n.no,A.LengthDelimited).bytes(o.toBinary(t))}}function vt(e,t,n,r,o){let[i,a,s]=Ec(t,r);(!s||o)&&e.tag(n,i)[a](r)}function Ea(e,t,n,r){if(!r.length)return;e.tag(n,A.LengthDelimited).fork();let[,o]=Ec(t);for(let i=0;i<r.length;i++)e[o](r[i]);e.join()}function Ng(){return Object.assign(Object.assign({},Ra()),{writeMessage(e,t,n){let r=e.getType();for(let o of r.fields.byNumber()){let i,a=o.repeated,s=o.localName;if(o.oneof){let l=e[o.oneof.localName];if(l.case!==s)continue;i=l.value}else i=e[s];switch(o.kind){case"scalar":case"enum":let l=o.kind=="enum"?T.INT32:o.T;if(a)if(o.packed)Ea(t,l,o.no,i);else for(let c of i)vt(t,l,o.no,c,!0);else i!==void 0&&vt(t,l,o.no,i,!!o.oneof||o.opt);break;case"message":if(a)for(let c of i)Qn(t,n,o,c);else Qn(t,n,o,i);break;case"map":for(let[c,d]of Object.entries(i))xa(t,n,o,c,d);break}}return n.writeUnknownFields&&this.writeUnknownFields(e,t),t}})}var St="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""),Ja=[];for(let e=0;e<St.length;e++)Ja[St[e].charCodeAt(0)]=e;Ja["-".charCodeAt(0)]=St.indexOf("+");Ja["_".charCodeAt(0)]=St.indexOf("/");var _t={dec(e){let t=e.length*3/4;e[e.length-2]=="="?t-=2:e[e.length-1]=="="&&(t-=1);let n=new Uint8Array(t),r=0,o=0,i,a=0;for(let s=0;s<e.length;s++){if(i=Ja[e.charCodeAt(s)],i===void 0)switch(e[s]){case"=":o=0;case`
`:case"\r":case"	":case" ":continue;default:throw Error("invalid base64 string.")}switch(o){case 0:a=i,o=1;break;case 1:n[r++]=a<<2|(i&48)>>4,a=i,o=2;break;case 2:n[r++]=(a&15)<<4|(i&60)>>2,a=i,o=3;break;case 3:n[r++]=(a&3)<<6|i,o=0;break}}if(o==1)throw Error("invalid base64 string.");return n.subarray(0,r)},enc(e){let t="",n=0,r,o=0;for(let i=0;i<e.length;i++)switch(r=e[i],n){case 0:t+=St[r>>2],o=(r&3)<<4,n=1;break;case 1:t+=St[o|r>>4],o=(r&15)<<2,n=2;break;case 2:t+=St[o|r>>6],t+=St[r&63],n=0;break}return n&&(t+=St[o],t+="=",n==1&&(t+="=")),t}};var Og={ignoreUnknownFields:!1},Ig={emitDefaultValues:!1,enumAsInteger:!1,useProtoFieldName:!1,prettySpaces:0};function gw(e){return e?Object.assign(Object.assign({},Og),e):Og}function yw(e){return e?Object.assign(Object.assign({},Ig),e):Ig}function Na(e){let t=e(hw,Cg);return{makeReadOptions:gw,makeWriteOptions:yw,readMessage(n,r,o,i){if(r==null||Array.isArray(r)||typeof r!="object")throw new Error(`cannot decode message ${n.typeName} from JSON: ${this.debug(r)}`);i=i??new n;let a={};for(let[s,l]of Object.entries(r)){let c=n.fields.findJsonName(s);if(!c){if(!o.ignoreUnknownFields)throw new Error(`cannot decode message ${n.typeName} from JSON: key "${s}" is unknown`);continue}let d=c.localName,v=i;if(c.oneof){if(l===null&&c.kind=="scalar")continue;let g=a[c.oneof.localName];if(g)throw new Error(`cannot decode message ${n.typeName} from JSON: multiple keys for oneof "${c.oneof.name}" present: "${g}", "${s}"`);a[c.oneof.localName]=s,v=v[c.oneof.localName]={case:d},d="value"}if(c.repeated){if(l===null)continue;if(!Array.isArray(l))throw new Error(`cannot decode field ${n.typeName}.${c.name} from JSON: ${this.debug(l)}`);let g=v[d];for(let m of l){if(m===null)throw new Error(`cannot decode field ${n.typeName}.${c.name} from JSON: ${this.debug(m)}`);let S;switch(c.kind){case"message":S=c.T.fromJson(m,o);break;case"enum":if(S=Jc(c.T,m,o.ignoreUnknownFields),S===void 0)continue;break;case"scalar":try{S=ko(c.T,m,c.L)}catch(k){let O=`cannot decode field ${n.typeName}.${c.name} from JSON: ${this.debug(m)}`;throw k instanceof Error&&k.message.length>0&&(O+=`: ${k.message}`),new Error(O)}break}g.push(S)}}else if(c.kind=="map"){if(l===null)continue;if(Array.isArray(l)||typeof l!="object")throw new Error(`cannot decode field ${n.typeName}.${c.name} from JSON: ${this.debug(l)}`);let g=v[d];for(let[m,S]of Object.entries(l)){if(S===null)throw new Error(`cannot decode field ${n.typeName}.${c.name} from JSON: map value null`);let k;switch(c.V.kind){case"message":k=c.V.T.fromJson(S,o);break;case"enum":if(k=Jc(c.V.T,S,o.ignoreUnknownFields),k===void 0)continue;break;case"scalar":try{k=ko(c.V.T,S,Ve.BIGINT)}catch(O){let p=`cannot decode map value for field ${n.typeName}.${c.name} from JSON: ${this.debug(l)}`;throw O instanceof Error&&O.message.length>0&&(p+=`: ${O.message}`),new Error(p)}break}try{g[ko(c.K,c.K==T.BOOL?m=="true"?!0:m=="false"?!1:m:m,Ve.BIGINT).toString()]=k}catch(O){let p=`cannot decode map key for field ${n.typeName}.${c.name} from JSON: ${this.debug(l)}`;throw O instanceof Error&&O.message.length>0&&(p+=`: ${O.message}`),new Error(p)}}}else switch(c.kind){case"message":let g=c.T;if(l===null&&g.typeName!="google.protobuf.Value"){if(c.oneof)throw new Error(`cannot decode field ${n.typeName}.${c.name} from JSON: null is invalid for oneof field "${s}"`);continue}v[d]instanceof y?v[d].fromJson(l,o):(v[d]=g.fromJson(l,o),g.fieldWrapper&&!c.oneof&&(v[d]=g.fieldWrapper.unwrapField(v[d])));break;case"enum":let m=Jc(c.T,l,o.ignoreUnknownFields);m!==void 0&&(v[d]=m);break;case"scalar":try{v[d]=ko(c.T,l,c.L)}catch(S){let k=`cannot decode field ${n.typeName}.${c.name} from JSON: ${this.debug(l)}`;throw S instanceof Error&&S.message.length>0&&(k+=`: ${S.message}`),new Error(k)}break}}return i},writeMessage(n,r){let o=n.getType(),i={},a;try{for(let s of o.fields.byMember()){let l;if(s.kind=="oneof"){let c=n[s.localName];if(c.value===void 0)continue;if(a=s.findField(c.case),!a)throw"oneof case not found: "+c.case;l=t(a,c.value,r)}else a=s,l=t(a,n[a.localName],r);l!==void 0&&(i[r.useProtoFieldName?a.name:a.jsonName]=l)}}catch(s){let l=a?`cannot encode field ${o.typeName}.${a.name} to JSON`:`cannot encode message ${o.typeName} to JSON`,c=s instanceof Error?s.message:String(s);throw new Error(l+(c.length>0?`: ${c}`:""))}return i},readScalar:ko,writeScalar:Cg,debug:Mg}}function Mg(e){if(e===null)return"null";switch(typeof e){case"object":return Array.isArray(e)?"array":"object";case"string":return e.length>100?"string":`"${e.split('"').join('\\"')}"`;default:return String(e)}}function ko(e,t,n){switch(e){case T.DOUBLE:case T.FLOAT:if(t===null)return 0;if(t==="NaN")return Number.NaN;if(t==="Infinity")return Number.POSITIVE_INFINITY;if(t==="-Infinity")return Number.NEGATIVE_INFINITY;if(t===""||typeof t=="string"&&t.trim().length!==t.length||typeof t!="string"&&typeof t!="number")break;let r=Number(t);if(Number.isNaN(r)||!Number.isFinite(r))break;return e==T.FLOAT&&ya(r),r;case T.INT32:case T.FIXED32:case T.SFIXED32:case T.SINT32:case T.UINT32:if(t===null)return 0;let o;if(typeof t=="number"?o=t:typeof t=="string"&&t.length>0&&t.trim().length===t.length&&(o=Number(t)),o===void 0)break;return e==T.UINT32?So(o):Wn(o),o;case T.INT64:case T.SFIXED64:case T.SINT64:if(t===null)return F.zero;if(typeof t!="number"&&typeof t!="string")break;let i=F.parse(t);return n?i.toString():i;case T.FIXED64:case T.UINT64:if(t===null)return F.zero;if(typeof t!="number"&&typeof t!="string")break;let a=F.uParse(t);return n?a.toString():a;case T.BOOL:if(t===null)return!1;if(typeof t!="boolean")break;return t;case T.STRING:if(t===null)return"";if(typeof t!="string")break;try{encodeURIComponent(t)}catch{throw new Error("invalid UTF8")}return t;case T.BYTES:if(t===null||t==="")return new Uint8Array(0);if(typeof t!="string")break;return _t.dec(t)}throw new Error}function Jc(e,t,n){if(t===null)return 0;switch(typeof t){case"number":if(Number.isInteger(t))return t;break;case"string":let r=e.findName(t);if(r||n)return r?.no;break}throw new Error(`cannot decode enum ${e.typeName} from JSON: ${Mg(t)}`)}function hw(e,t,n,r){var o;if(t===void 0)return t;if(t===0&&!n)return;if(r)return t;if(e.typeName=="google.protobuf.NullValue")return null;let i=e.findNumber(t);return(o=i?.name)!==null&&o!==void 0?o:t}function Cg(e,t,n){if(t!==void 0)switch(e){case T.INT32:case T.SFIXED32:case T.SINT32:case T.FIXED32:case T.UINT32:return j(typeof t=="number"),t!=0||n?t:void 0;case T.FLOAT:case T.DOUBLE:return j(typeof t=="number"),Number.isNaN(t)?"NaN":t===Number.POSITIVE_INFINITY?"Infinity":t===Number.NEGATIVE_INFINITY?"-Infinity":t!==0||n?t:void 0;case T.STRING:return j(typeof t=="string"),t.length>0||n?t:void 0;case T.BOOL:return j(typeof t=="boolean"),t||n?t:void 0;case T.UINT64:case T.FIXED64:case T.INT64:case T.SFIXED64:case T.SINT64:return j(typeof t=="bigint"||typeof t=="string"||typeof t=="number"),n||t!=0?t.toString(10):void 0;case T.BYTES:return j(t instanceof Uint8Array),n||t.byteLength>0?_t.enc(t):void 0}}function Lg(){return Na((e,t)=>function(r,o,i){if(r.kind=="map"){let a={};switch(r.V.kind){case"scalar":for(let[l,c]of Object.entries(o)){let d=t(r.V.T,c,!0);j(d!==void 0),a[l.toString()]=d}break;case"message":for(let[l,c]of Object.entries(o))a[l.toString()]=c.toJson(i);break;case"enum":let s=r.V.T;for(let[l,c]of Object.entries(o)){j(c===void 0||typeof c=="number");let d=e(s,c,!0,i.enumAsInteger);j(d!==void 0),a[l.toString()]=d}break}return i.emitDefaultValues||Object.keys(a).length>0?a:void 0}else if(r.repeated){let a=[];switch(r.kind){case"scalar":for(let s=0;s<o.length;s++)a.push(t(r.T,o[s],!0));break;case"enum":for(let s=0;s<o.length;s++)a.push(e(r.T,o[s],!0,i.enumAsInteger));break;case"message":for(let s=0;s<o.length;s++)a.push(gn(r.T,o[s]).toJson(i));break}return i.emitDefaultValues||a.length>0?a:void 0}else switch(r.kind){case"scalar":return t(r.T,o,!!r.oneof||r.opt||i.emitDefaultValues);case"enum":return e(r.T,o,!!r.oneof||r.opt||i.emitDefaultValues,i.enumAsInteger);case"message":return o!==void 0?gn(r.T,o).toJson(i):void 0}})}function Ia(){return{setEnumType:Sc,initPartial(e,t){if(e===void 0)return;let n=t.getType();for(let r of n.fields.byMember()){let o=r.localName,i=t,a=e;if(a[o]!==void 0)switch(r.kind){case"oneof":let s=a[o].case;if(s===void 0)continue;let l=r.findField(s),c=a[o].value;l&&l.kind=="message"&&!(c instanceof l.T)?c=new l.T(c):l&&l.kind==="scalar"&&l.T===T.BYTES&&(c=Po(c)),i[o]={case:s,value:c};break;case"scalar":case"enum":let d=a[o];r.T===T.BYTES&&(d=r.repeated?d.map(Po):Po(d)),i[o]=d;break;case"map":switch(r.V.kind){case"scalar":case"enum":if(r.V.T===T.BYTES)for(let[m,S]of Object.entries(a[o]))i[o][m]=Po(S);else Object.assign(i[o],a[o]);break;case"message":let g=r.V.T;for(let m of Object.keys(a[o])){let S=a[o][m];g.fieldWrapper||(S=new g(S)),i[o][m]=S}break}break;case"message":let v=r.T;if(r.repeated)i[o]=a[o].map(g=>g instanceof v?g:new v(g));else if(a[o]!==void 0){let g=a[o];v.fieldWrapper?v.typeName==="google.protobuf.BytesValue"?i[o]=Po(g):i[o]=g:i[o]=g instanceof v?g:new v(g)}break}}},equals(e,t,n){return t===n?!0:!t||!n?!1:e.fields.byMember().every(r=>{let o=t[r.localName],i=n[r.localName];if(r.repeated){if(o.length!==i.length)return!1;switch(r.kind){case"message":return o.every((a,s)=>r.T.equals(a,i[s]));case"scalar":return o.every((a,s)=>wt(r.T,a,i[s]));case"enum":return o.every((a,s)=>wt(T.INT32,a,i[s]))}throw new Error(`repeated cannot contain ${r.kind}`)}switch(r.kind){case"message":return r.T.equals(o,i);case"enum":return wt(T.INT32,o,i);case"scalar":return wt(r.T,o,i);case"oneof":if(o.case!==i.case)return!1;let a=r.findField(o.case);if(a===void 0)return!0;switch(a.kind){case"message":return a.T.equals(o.value,i.value);case"enum":return wt(T.INT32,o.value,i.value);case"scalar":return wt(a.T,o.value,i.value)}throw new Error(`oneof cannot contain ${a.kind}`);case"map":let s=Object.keys(o).concat(Object.keys(i));switch(r.V.kind){case"message":let l=r.V.T;return s.every(d=>l.equals(o[d],i[d]));case"enum":return s.every(d=>wt(T.INT32,o[d],i[d]));case"scalar":let c=r.V.T;return s.every(d=>wt(c,o[d],i[d]))}break}})},clone(e){let t=e.getType(),n=new t,r=n;for(let o of t.fields.byMember()){let i=e[o.localName],a;if(o.repeated)a=i.map(Oa);else if(o.kind=="map"){a=r[o.localName];for(let[s,l]of Object.entries(i))a[s]=Oa(l)}else o.kind=="oneof"?a=o.findField(i.case)?{case:i.case,value:Oa(i.value)}:{case:void 0}:a=Oa(i);r[o.localName]=a}return n}}}function Oa(e){if(e===void 0)return e;if(e instanceof y)return e.clone();if(e instanceof Uint8Array){let t=new Uint8Array(e.byteLength);return t.set(e),t}return e}function Po(e){return e instanceof Uint8Array?e:new Uint8Array(e)}var Xn=class{constructor(t,n){this._fields=t,this._normalizer=n}findJsonName(t){if(!this.jsonNames){let n={};for(let r of this.list())n[r.jsonName]=n[r.name]=r;this.jsonNames=n}return this.jsonNames[t]}find(t){if(!this.numbers){let n={};for(let r of this.list())n[r.no]=r;this.numbers=n}return this.numbers[t]}list(){return this.all||(this.all=this._normalizer(this._fields)),this.all}byNumber(){return this.numbersAsc||(this.numbersAsc=this.list().concat().sort((t,n)=>t.no-n.no)),this.numbersAsc}byMember(){if(!this.members){this.members=[];let t=this.members,n;for(let r of this.list())r.oneof?r.oneof!==n&&(n=r.oneof,t.push(n)):t.push(r)}return this.members}};function Ro(e,t){let n=Fg(e);return t?n:Tw(Sw(n))}function Bg(e){return Ro(e,!1)}var Ca=Fg;function Fg(e){let t=!1,n=[];for(let r=0;r<e.length;r++){let o=e.charAt(r);switch(o){case"_":t=!0;break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":n.push(o),t=!1;break;default:t&&(t=!1,o=o.toUpperCase()),n.push(o);break}}return n.join("")}var ww=new Set(["constructor","toString","toJSON","valueOf"]),vw=new Set(["getType","clone","equals","fromBinary","fromJson","fromJsonString","toBinary","toJson","toJsonString","toObject"]),Ug=e=>`${e}$`,Sw=e=>vw.has(e)?Ug(e):e,Tw=e=>ww.has(e)?Ug(e):e;var Zn=class{constructor(t){this.kind="oneof",this.repeated=!1,this.packed=!1,this.opt=!1,this.default=void 0,this.fields=[],this.name=t,this.localName=Bg(t)}addField(t){j(t.oneof===this,`field ${t.name} not one of ${this.name}`),this.fields.push(t)}findField(t){if(!this._lookup){this._lookup=Object.create(null);for(let n=0;n<this.fields.length;n++)this._lookup[this.fields[n].localName]=this.fields[n]}return this._lookup[t]}};var u=ha("proto3",Lg(),Ng(),Object.assign(Object.assign({},Ia()),{newFieldList(e){return new Xn(e,kw)},initFields(e){for(let t of e.getType().fields.byMember()){if(t.opt)continue;let n=t.localName,r=e;if(t.repeated){r[n]=[];continue}switch(t.kind){case"oneof":r[n]={case:void 0};break;case"enum":r[n]=0;break;case"map":r[n]={};break;case"scalar":r[n]=To(t.T,t.L);break;case"message":break}}}}));function kw(e){var t,n,r,o;let i=[],a;for(let s of typeof e=="function"?e():e){let l=s;if(l.localName=Ro(s.name,s.oneof!==void 0),l.jsonName=(t=s.jsonName)!==null&&t!==void 0?t:Ca(s.name),l.repeated=(n=s.repeated)!==null&&n!==void 0?n:!1,s.kind=="scalar"&&(l.L=(r=s.L)!==null&&r!==void 0?r:Ve.BIGINT),s.oneof!==void 0){let c=typeof s.oneof=="string"?s.oneof:s.oneof.name;(!a||a.name!=c)&&(a=new Zn(c)),l.oneof=a,a.addField(l)}s.kind=="message"&&(l.delimited=!1),l.packed=(o=s.packed)!==null&&o!==void 0?o:s.kind=="enum"||s.kind=="scalar"&&s.T!=T.BYTES&&s.T!=T.STRING,i.push(l)}return i}function qg(){return Object.assign(Object.assign({},Ra()),{writeMessage(e,t,n){let r=e.getType(),o;try{for(o of r.fields.byNumber()){let i,a=o.repeated,s=o.localName;if(o.oneof){let l=e[o.oneof.localName];if(l.case!==s)continue;i=l.value}else if(i=e[s],i===void 0&&!o.oneof&&!o.opt)throw new Error(`cannot encode field ${r.typeName}.${o.name} to binary: required field not set`);switch(o.kind){case"scalar":case"enum":let l=o.kind=="enum"?T.INT32:o.T;if(a)if(o.packed)Ea(t,l,o.no,i);else for(let c of i)vt(t,l,o.no,c,!0);else i!==void 0&&vt(t,l,o.no,i,!0);break;case"message":if(a)for(let c of i)Qn(t,n,o,c);else Qn(t,n,o,i);break;case"map":for(let[c,d]of Object.entries(i))xa(t,n,o,c,d);break}}}catch(i){let a=o?`cannot encode field ${r.typeName}.${o?.name} to binary`:`cannot encode message ${r.typeName} to binary`,s=i instanceof Error?i.message:String(i);throw new Error(a+(s.length>0?`: ${s}`:""))}return n.writeUnknownFields&&this.writeUnknownFields(e,t),t}})}function Ag(){return Na((e,t)=>function(r,o,i){if(r.kind=="map"){let a={};switch(r.V.kind){case"scalar":for(let[l,c]of Object.entries(o)){let d=t(r.V.T,c,!0);j(d!==void 0),a[l.toString()]=d}break;case"message":for(let[l,c]of Object.entries(o))a[l.toString()]=c.toJson(i);break;case"enum":let s=r.V.T;for(let[l,c]of Object.entries(o)){j(c===void 0||typeof c=="number");let d=e(s,c,!0,i.enumAsInteger);j(d!==void 0),a[l.toString()]=d}break}return i.emitDefaultValues||Object.keys(a).length>0?a:void 0}else if(r.repeated){let a=[];switch(r.kind){case"scalar":for(let s=0;s<o.length;s++)a.push(t(r.T,o[s],!0));break;case"enum":for(let s=0;s<o.length;s++)a.push(e(r.T,o[s],!0,i.enumAsInteger));break;case"message":for(let s=0;s<o.length;s++)a.push(o[s].toJson(i));break}return i.emitDefaultValues||a.length>0?a:void 0}else{if(o===void 0){if(!r.oneof&&!r.opt)throw"required field not set";return}switch(r.kind){case"scalar":return t(r.T,o,!0);case"enum":return e(r.T,o,!0,i.enumAsInteger);case"message":return gn(r.T,o).toJson(i)}}})}var h=ha("proto2",Ag(),qg(),Object.assign(Object.assign({},Ia()),{newFieldList(e){return new Xn(e,Pw)},initFields(e){for(let t of e.getType().fields.byMember()){let n=t.localName,r=e;if(t.repeated){r[n]=[];continue}switch(t.kind){case"oneof":r[n]={case:void 0};break;case"map":r[n]={};break;case"scalar":case"enum":case"message":break}}}}));function Pw(e){var t,n,r,o,i;let a=[],s;for(let l of typeof e=="function"?e():e){let c=l;if(c.localName=Ro(l.name,l.oneof!==void 0),c.jsonName=(t=l.jsonName)!==null&&t!==void 0?t:Ca(l.name),c.repeated=(n=l.repeated)!==null&&n!==void 0?n:!1,l.kind=="scalar"&&(c.L=(r=l.L)!==null&&r!==void 0?r:Ve.BIGINT),l.oneof!==void 0){let d=typeof l.oneof=="string"?l.oneof:l.oneof.name;(!s||s.name!=d)&&(s=new Zn(d)),c.oneof=s,s.addField(c)}l.kind=="message"&&(c.delimited=(o=l.delimited)!==null&&o!==void 0?o:!1),c.packed=(i=l.packed)!==null&&i!==void 0?i:!1,a.push(c)}return a}var J;(function(e){e[e.Unary=0]="Unary",e[e.ServerStreaming=1]="ServerStreaming",e[e.ClientStreaming=2]="ClientStreaming",e[e.BiDiStreaming=3]="BiDiStreaming"})(J||(J={}));var xo;(function(e){e[e.NoSideEffects=1]="NoSideEffects",e[e.Idempotent=2]="Idempotent"})(xo||(xo={}));var Ht;(function(e){e[e.EDITION_UNKNOWN=0]="EDITION_UNKNOWN",e[e.EDITION_PROTO2=998]="EDITION_PROTO2",e[e.EDITION_PROTO3=999]="EDITION_PROTO3",e[e.EDITION_2023=1e3]="EDITION_2023",e[e.EDITION_1_TEST_ONLY=1]="EDITION_1_TEST_ONLY",e[e.EDITION_2_TEST_ONLY=2]="EDITION_2_TEST_ONLY",e[e.EDITION_99997_TEST_ONLY=99997]="EDITION_99997_TEST_ONLY",e[e.EDITION_99998_TEST_ONLY=99998]="EDITION_99998_TEST_ONLY",e[e.EDITION_99999_TEST_ONLY=99999]="EDITION_99999_TEST_ONLY"})(Ht||(Ht={}));h.util.setEnumType(Ht,"google.protobuf.Edition",[{no:0,name:"EDITION_UNKNOWN"},{no:998,name:"EDITION_PROTO2"},{no:999,name:"EDITION_PROTO3"},{no:1e3,name:"EDITION_2023"},{no:1,name:"EDITION_1_TEST_ONLY"},{no:2,name:"EDITION_2_TEST_ONLY"},{no:99997,name:"EDITION_99997_TEST_ONLY"},{no:99998,name:"EDITION_99998_TEST_ONLY"},{no:99999,name:"EDITION_99999_TEST_ONLY"}]);var Eo=class e extends y{constructor(t){super(),this.file=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};Eo.runtime=h;Eo.typeName="google.protobuf.FileDescriptorSet";Eo.fields=h.util.newFieldList(()=>[{no:1,name:"file",kind:"message",T:er,repeated:!0}]);var er=class e extends y{constructor(t){super(),this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};er.runtime=h;er.typeName="google.protobuf.FileDescriptorProto";er.fields=h.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"package",kind:"scalar",T:9,opt:!0},{no:3,name:"dependency",kind:"scalar",T:9,repeated:!0},{no:10,name:"public_dependency",kind:"scalar",T:5,repeated:!0},{no:11,name:"weak_dependency",kind:"scalar",T:5,repeated:!0},{no:4,name:"message_type",kind:"message",T:rt,repeated:!0},{no:5,name:"enum_type",kind:"message",T:Tt,repeated:!0},{no:6,name:"service",kind:"message",T:lr,repeated:!0},{no:7,name:"extension",kind:"message",T:Yt,repeated:!0},{no:8,name:"options",kind:"message",T:cr,opt:!0},{no:9,name:"source_code_info",kind:"message",T:Tr,opt:!0},{no:12,name:"syntax",kind:"scalar",T:9,opt:!0},{no:14,name:"edition",kind:"enum",T:h.getEnumType(Ht),opt:!0}]);var rt=class e extends y{constructor(t){super(),this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};rt.runtime=h;rt.typeName="google.protobuf.DescriptorProto";rt.fields=h.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"field",kind:"message",T:Yt,repeated:!0},{no:6,name:"extension",kind:"message",T:Yt,repeated:!0},{no:3,name:"nested_type",kind:"message",T:rt,repeated:!0},{no:4,name:"enum_type",kind:"message",T:Tt,repeated:!0},{no:5,name:"extension_range",kind:"message",T:tr,repeated:!0},{no:8,name:"oneof_decl",kind:"message",T:ir,repeated:!0},{no:7,name:"options",kind:"message",T:fr,opt:!0},{no:9,name:"reserved_range",kind:"message",T:nr,repeated:!0},{no:10,name:"reserved_name",kind:"scalar",T:9,repeated:!0}]);var tr=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};tr.runtime=h;tr.typeName="google.protobuf.DescriptorProto.ExtensionRange";tr.fields=h.util.newFieldList(()=>[{no:1,name:"start",kind:"scalar",T:5,opt:!0},{no:2,name:"end",kind:"scalar",T:5,opt:!0},{no:3,name:"options",kind:"message",T:rr,opt:!0}]);var nr=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};nr.runtime=h;nr.typeName="google.protobuf.DescriptorProto.ReservedRange";nr.fields=h.util.newFieldList(()=>[{no:1,name:"start",kind:"scalar",T:5,opt:!0},{no:2,name:"end",kind:"scalar",T:5,opt:!0}]);var rr=class e extends y{constructor(t){super(),this.uninterpretedOption=[],this.declaration=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};rr.runtime=h;rr.typeName="google.protobuf.ExtensionRangeOptions";rr.fields=h.util.newFieldList(()=>[{no:999,name:"uninterpreted_option",kind:"message",T:ke,repeated:!0},{no:2,name:"declaration",kind:"message",T:or,repeated:!0},{no:50,name:"features",kind:"message",T:ye,opt:!0},{no:3,name:"verification",kind:"enum",T:h.getEnumType(Jo),opt:!0,default:Jo.UNVERIFIED}]);var Jo;(function(e){e[e.DECLARATION=0]="DECLARATION",e[e.UNVERIFIED=1]="UNVERIFIED"})(Jo||(Jo={}));h.util.setEnumType(Jo,"google.protobuf.ExtensionRangeOptions.VerificationState",[{no:0,name:"DECLARATION"},{no:1,name:"UNVERIFIED"}]);var or=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};or.runtime=h;or.typeName="google.protobuf.ExtensionRangeOptions.Declaration";or.fields=h.util.newFieldList(()=>[{no:1,name:"number",kind:"scalar",T:5,opt:!0},{no:2,name:"full_name",kind:"scalar",T:9,opt:!0},{no:3,name:"type",kind:"scalar",T:9,opt:!0},{no:5,name:"reserved",kind:"scalar",T:8,opt:!0},{no:6,name:"repeated",kind:"scalar",T:8,opt:!0}]);var Yt=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};Yt.runtime=h;Yt.typeName="google.protobuf.FieldDescriptorProto";Yt.fields=h.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:3,name:"number",kind:"scalar",T:5,opt:!0},{no:4,name:"label",kind:"enum",T:h.getEnumType(La),opt:!0},{no:5,name:"type",kind:"enum",T:h.getEnumType(Ma),opt:!0},{no:6,name:"type_name",kind:"scalar",T:9,opt:!0},{no:2,name:"extendee",kind:"scalar",T:9,opt:!0},{no:7,name:"default_value",kind:"scalar",T:9,opt:!0},{no:9,name:"oneof_index",kind:"scalar",T:5,opt:!0},{no:10,name:"json_name",kind:"scalar",T:9,opt:!0},{no:8,name:"options",kind:"message",T:dr,opt:!0},{no:17,name:"proto3_optional",kind:"scalar",T:8,opt:!0}]);var Ma;(function(e){e[e.DOUBLE=1]="DOUBLE",e[e.FLOAT=2]="FLOAT",e[e.INT64=3]="INT64",e[e.UINT64=4]="UINT64",e[e.INT32=5]="INT32",e[e.FIXED64=6]="FIXED64",e[e.FIXED32=7]="FIXED32",e[e.BOOL=8]="BOOL",e[e.STRING=9]="STRING",e[e.GROUP=10]="GROUP",e[e.MESSAGE=11]="MESSAGE",e[e.BYTES=12]="BYTES",e[e.UINT32=13]="UINT32",e[e.ENUM=14]="ENUM",e[e.SFIXED32=15]="SFIXED32",e[e.SFIXED64=16]="SFIXED64",e[e.SINT32=17]="SINT32",e[e.SINT64=18]="SINT64"})(Ma||(Ma={}));h.util.setEnumType(Ma,"google.protobuf.FieldDescriptorProto.Type",[{no:1,name:"TYPE_DOUBLE"},{no:2,name:"TYPE_FLOAT"},{no:3,name:"TYPE_INT64"},{no:4,name:"TYPE_UINT64"},{no:5,name:"TYPE_INT32"},{no:6,name:"TYPE_FIXED64"},{no:7,name:"TYPE_FIXED32"},{no:8,name:"TYPE_BOOL"},{no:9,name:"TYPE_STRING"},{no:10,name:"TYPE_GROUP"},{no:11,name:"TYPE_MESSAGE"},{no:12,name:"TYPE_BYTES"},{no:13,name:"TYPE_UINT32"},{no:14,name:"TYPE_ENUM"},{no:15,name:"TYPE_SFIXED32"},{no:16,name:"TYPE_SFIXED64"},{no:17,name:"TYPE_SINT32"},{no:18,name:"TYPE_SINT64"}]);var La;(function(e){e[e.OPTIONAL=1]="OPTIONAL",e[e.REPEATED=3]="REPEATED",e[e.REQUIRED=2]="REQUIRED"})(La||(La={}));h.util.setEnumType(La,"google.protobuf.FieldDescriptorProto.Label",[{no:1,name:"LABEL_OPTIONAL"},{no:3,name:"LABEL_REPEATED"},{no:2,name:"LABEL_REQUIRED"}]);var ir=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};ir.runtime=h;ir.typeName="google.protobuf.OneofDescriptorProto";ir.fields=h.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"options",kind:"message",T:pr,opt:!0}]);var Tt=class e extends y{constructor(t){super(),this.value=[],this.reservedRange=[],this.reservedName=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};Tt.runtime=h;Tt.typeName="google.protobuf.EnumDescriptorProto";Tt.fields=h.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"value",kind:"message",T:sr,repeated:!0},{no:3,name:"options",kind:"message",T:gr,opt:!0},{no:4,name:"reserved_range",kind:"message",T:ar,repeated:!0},{no:5,name:"reserved_name",kind:"scalar",T:9,repeated:!0}]);var ar=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};ar.runtime=h;ar.typeName="google.protobuf.EnumDescriptorProto.EnumReservedRange";ar.fields=h.util.newFieldList(()=>[{no:1,name:"start",kind:"scalar",T:5,opt:!0},{no:2,name:"end",kind:"scalar",T:5,opt:!0}]);var sr=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};sr.runtime=h;sr.typeName="google.protobuf.EnumValueDescriptorProto";sr.fields=h.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"number",kind:"scalar",T:5,opt:!0},{no:3,name:"options",kind:"message",T:yr,opt:!0}]);var lr=class e extends y{constructor(t){super(),this.method=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};lr.runtime=h;lr.typeName="google.protobuf.ServiceDescriptorProto";lr.fields=h.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"method",kind:"message",T:ur,repeated:!0},{no:3,name:"options",kind:"message",T:hr,opt:!0}]);var ur=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};ur.runtime=h;ur.typeName="google.protobuf.MethodDescriptorProto";ur.fields=h.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"input_type",kind:"scalar",T:9,opt:!0},{no:3,name:"output_type",kind:"scalar",T:9,opt:!0},{no:4,name:"options",kind:"message",T:wr,opt:!0},{no:5,name:"client_streaming",kind:"scalar",T:8,opt:!0,default:!1},{no:6,name:"server_streaming",kind:"scalar",T:8,opt:!0,default:!1}]);var cr=class e extends y{constructor(t){super(),this.uninterpretedOption=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};cr.runtime=h;cr.typeName="google.protobuf.FileOptions";cr.fields=h.util.newFieldList(()=>[{no:1,name:"java_package",kind:"scalar",T:9,opt:!0},{no:8,name:"java_outer_classname",kind:"scalar",T:9,opt:!0},{no:10,name:"java_multiple_files",kind:"scalar",T:8,opt:!0,default:!1},{no:20,name:"java_generate_equals_and_hash",kind:"scalar",T:8,opt:!0},{no:27,name:"java_string_check_utf8",kind:"scalar",T:8,opt:!0,default:!1},{no:9,name:"optimize_for",kind:"enum",T:h.getEnumType(No),opt:!0,default:No.SPEED},{no:11,name:"go_package",kind:"scalar",T:9,opt:!0},{no:16,name:"cc_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:17,name:"java_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:18,name:"py_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:42,name:"php_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:23,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:31,name:"cc_enable_arenas",kind:"scalar",T:8,opt:!0,default:!0},{no:36,name:"objc_class_prefix",kind:"scalar",T:9,opt:!0},{no:37,name:"csharp_namespace",kind:"scalar",T:9,opt:!0},{no:39,name:"swift_prefix",kind:"scalar",T:9,opt:!0},{no:40,name:"php_class_prefix",kind:"scalar",T:9,opt:!0},{no:41,name:"php_namespace",kind:"scalar",T:9,opt:!0},{no:44,name:"php_metadata_namespace",kind:"scalar",T:9,opt:!0},{no:45,name:"ruby_package",kind:"scalar",T:9,opt:!0},{no:50,name:"features",kind:"message",T:ye,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:ke,repeated:!0}]);var No;(function(e){e[e.SPEED=1]="SPEED",e[e.CODE_SIZE=2]="CODE_SIZE",e[e.LITE_RUNTIME=3]="LITE_RUNTIME"})(No||(No={}));h.util.setEnumType(No,"google.protobuf.FileOptions.OptimizeMode",[{no:1,name:"SPEED"},{no:2,name:"CODE_SIZE"},{no:3,name:"LITE_RUNTIME"}]);var fr=class e extends y{constructor(t){super(),this.uninterpretedOption=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};fr.runtime=h;fr.typeName="google.protobuf.MessageOptions";fr.fields=h.util.newFieldList(()=>[{no:1,name:"message_set_wire_format",kind:"scalar",T:8,opt:!0,default:!1},{no:2,name:"no_standard_descriptor_accessor",kind:"scalar",T:8,opt:!0,default:!1},{no:3,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:7,name:"map_entry",kind:"scalar",T:8,opt:!0},{no:11,name:"deprecated_legacy_json_field_conflicts",kind:"scalar",T:8,opt:!0},{no:12,name:"features",kind:"message",T:ye,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:ke,repeated:!0}]);var dr=class e extends y{constructor(t){super(),this.targets=[],this.editionDefaults=[],this.uninterpretedOption=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};dr.runtime=h;dr.typeName="google.protobuf.FieldOptions";dr.fields=h.util.newFieldList(()=>[{no:1,name:"ctype",kind:"enum",T:h.getEnumType(Oo),opt:!0,default:Oo.STRING},{no:2,name:"packed",kind:"scalar",T:8,opt:!0},{no:6,name:"jstype",kind:"enum",T:h.getEnumType(Io),opt:!0,default:Io.JS_NORMAL},{no:5,name:"lazy",kind:"scalar",T:8,opt:!0,default:!1},{no:15,name:"unverified_lazy",kind:"scalar",T:8,opt:!0,default:!1},{no:3,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:10,name:"weak",kind:"scalar",T:8,opt:!0,default:!1},{no:16,name:"debug_redact",kind:"scalar",T:8,opt:!0,default:!1},{no:17,name:"retention",kind:"enum",T:h.getEnumType(Ba),opt:!0},{no:19,name:"targets",kind:"enum",T:h.getEnumType(Fa),repeated:!0},{no:20,name:"edition_defaults",kind:"message",T:mr,repeated:!0},{no:21,name:"features",kind:"message",T:ye,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:ke,repeated:!0}]);var Oo;(function(e){e[e.STRING=0]="STRING",e[e.CORD=1]="CORD",e[e.STRING_PIECE=2]="STRING_PIECE"})(Oo||(Oo={}));h.util.setEnumType(Oo,"google.protobuf.FieldOptions.CType",[{no:0,name:"STRING"},{no:1,name:"CORD"},{no:2,name:"STRING_PIECE"}]);var Io;(function(e){e[e.JS_NORMAL=0]="JS_NORMAL",e[e.JS_STRING=1]="JS_STRING",e[e.JS_NUMBER=2]="JS_NUMBER"})(Io||(Io={}));h.util.setEnumType(Io,"google.protobuf.FieldOptions.JSType",[{no:0,name:"JS_NORMAL"},{no:1,name:"JS_STRING"},{no:2,name:"JS_NUMBER"}]);var Ba;(function(e){e[e.RETENTION_UNKNOWN=0]="RETENTION_UNKNOWN",e[e.RETENTION_RUNTIME=1]="RETENTION_RUNTIME",e[e.RETENTION_SOURCE=2]="RETENTION_SOURCE"})(Ba||(Ba={}));h.util.setEnumType(Ba,"google.protobuf.FieldOptions.OptionRetention",[{no:0,name:"RETENTION_UNKNOWN"},{no:1,name:"RETENTION_RUNTIME"},{no:2,name:"RETENTION_SOURCE"}]);var Fa;(function(e){e[e.TARGET_TYPE_UNKNOWN=0]="TARGET_TYPE_UNKNOWN",e[e.TARGET_TYPE_FILE=1]="TARGET_TYPE_FILE",e[e.TARGET_TYPE_EXTENSION_RANGE=2]="TARGET_TYPE_EXTENSION_RANGE",e[e.TARGET_TYPE_MESSAGE=3]="TARGET_TYPE_MESSAGE",e[e.TARGET_TYPE_FIELD=4]="TARGET_TYPE_FIELD",e[e.TARGET_TYPE_ONEOF=5]="TARGET_TYPE_ONEOF",e[e.TARGET_TYPE_ENUM=6]="TARGET_TYPE_ENUM",e[e.TARGET_TYPE_ENUM_ENTRY=7]="TARGET_TYPE_ENUM_ENTRY",e[e.TARGET_TYPE_SERVICE=8]="TARGET_TYPE_SERVICE",e[e.TARGET_TYPE_METHOD=9]="TARGET_TYPE_METHOD"})(Fa||(Fa={}));h.util.setEnumType(Fa,"google.protobuf.FieldOptions.OptionTargetType",[{no:0,name:"TARGET_TYPE_UNKNOWN"},{no:1,name:"TARGET_TYPE_FILE"},{no:2,name:"TARGET_TYPE_EXTENSION_RANGE"},{no:3,name:"TARGET_TYPE_MESSAGE"},{no:4,name:"TARGET_TYPE_FIELD"},{no:5,name:"TARGET_TYPE_ONEOF"},{no:6,name:"TARGET_TYPE_ENUM"},{no:7,name:"TARGET_TYPE_ENUM_ENTRY"},{no:8,name:"TARGET_TYPE_SERVICE"},{no:9,name:"TARGET_TYPE_METHOD"}]);var mr=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};mr.runtime=h;mr.typeName="google.protobuf.FieldOptions.EditionDefault";mr.fields=h.util.newFieldList(()=>[{no:3,name:"edition",kind:"enum",T:h.getEnumType(Ht),opt:!0},{no:2,name:"value",kind:"scalar",T:9,opt:!0}]);var pr=class e extends y{constructor(t){super(),this.uninterpretedOption=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};pr.runtime=h;pr.typeName="google.protobuf.OneofOptions";pr.fields=h.util.newFieldList(()=>[{no:1,name:"features",kind:"message",T:ye,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:ke,repeated:!0}]);var gr=class e extends y{constructor(t){super(),this.uninterpretedOption=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};gr.runtime=h;gr.typeName="google.protobuf.EnumOptions";gr.fields=h.util.newFieldList(()=>[{no:2,name:"allow_alias",kind:"scalar",T:8,opt:!0},{no:3,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:6,name:"deprecated_legacy_json_field_conflicts",kind:"scalar",T:8,opt:!0},{no:7,name:"features",kind:"message",T:ye,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:ke,repeated:!0}]);var yr=class e extends y{constructor(t){super(),this.uninterpretedOption=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};yr.runtime=h;yr.typeName="google.protobuf.EnumValueOptions";yr.fields=h.util.newFieldList(()=>[{no:1,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:2,name:"features",kind:"message",T:ye,opt:!0},{no:3,name:"debug_redact",kind:"scalar",T:8,opt:!0,default:!1},{no:999,name:"uninterpreted_option",kind:"message",T:ke,repeated:!0}]);var hr=class e extends y{constructor(t){super(),this.uninterpretedOption=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};hr.runtime=h;hr.typeName="google.protobuf.ServiceOptions";hr.fields=h.util.newFieldList(()=>[{no:34,name:"features",kind:"message",T:ye,opt:!0},{no:33,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:999,name:"uninterpreted_option",kind:"message",T:ke,repeated:!0}]);var wr=class e extends y{constructor(t){super(),this.uninterpretedOption=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};wr.runtime=h;wr.typeName="google.protobuf.MethodOptions";wr.fields=h.util.newFieldList(()=>[{no:33,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:34,name:"idempotency_level",kind:"enum",T:h.getEnumType(Co),opt:!0,default:Co.IDEMPOTENCY_UNKNOWN},{no:35,name:"features",kind:"message",T:ye,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:ke,repeated:!0}]);var Co;(function(e){e[e.IDEMPOTENCY_UNKNOWN=0]="IDEMPOTENCY_UNKNOWN",e[e.NO_SIDE_EFFECTS=1]="NO_SIDE_EFFECTS",e[e.IDEMPOTENT=2]="IDEMPOTENT"})(Co||(Co={}));h.util.setEnumType(Co,"google.protobuf.MethodOptions.IdempotencyLevel",[{no:0,name:"IDEMPOTENCY_UNKNOWN"},{no:1,name:"NO_SIDE_EFFECTS"},{no:2,name:"IDEMPOTENT"}]);var ke=class e extends y{constructor(t){super(),this.name=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};ke.runtime=h;ke.typeName="google.protobuf.UninterpretedOption";ke.fields=h.util.newFieldList(()=>[{no:2,name:"name",kind:"message",T:vr,repeated:!0},{no:3,name:"identifier_value",kind:"scalar",T:9,opt:!0},{no:4,name:"positive_int_value",kind:"scalar",T:4,opt:!0},{no:5,name:"negative_int_value",kind:"scalar",T:3,opt:!0},{no:6,name:"double_value",kind:"scalar",T:1,opt:!0},{no:7,name:"string_value",kind:"scalar",T:12,opt:!0},{no:8,name:"aggregate_value",kind:"scalar",T:9,opt:!0}]);var vr=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};vr.runtime=h;vr.typeName="google.protobuf.UninterpretedOption.NamePart";vr.fields=h.util.newFieldList(()=>[{no:1,name:"name_part",kind:"scalar",T:9},{no:2,name:"is_extension",kind:"scalar",T:8}]);var ye=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};ye.runtime=h;ye.typeName="google.protobuf.FeatureSet";ye.fields=h.util.newFieldList(()=>[{no:1,name:"field_presence",kind:"enum",T:h.getEnumType(Ua),opt:!0},{no:2,name:"enum_type",kind:"enum",T:h.getEnumType(qa),opt:!0},{no:3,name:"repeated_field_encoding",kind:"enum",T:h.getEnumType(Aa),opt:!0},{no:4,name:"utf8_validation",kind:"enum",T:h.getEnumType(Da),opt:!0},{no:5,name:"message_encoding",kind:"enum",T:h.getEnumType(Va),opt:!0},{no:6,name:"json_format",kind:"enum",T:h.getEnumType(ba),opt:!0}]);var Ua;(function(e){e[e.FIELD_PRESENCE_UNKNOWN=0]="FIELD_PRESENCE_UNKNOWN",e[e.EXPLICIT=1]="EXPLICIT",e[e.IMPLICIT=2]="IMPLICIT",e[e.LEGACY_REQUIRED=3]="LEGACY_REQUIRED"})(Ua||(Ua={}));h.util.setEnumType(Ua,"google.protobuf.FeatureSet.FieldPresence",[{no:0,name:"FIELD_PRESENCE_UNKNOWN"},{no:1,name:"EXPLICIT"},{no:2,name:"IMPLICIT"},{no:3,name:"LEGACY_REQUIRED"}]);var qa;(function(e){e[e.ENUM_TYPE_UNKNOWN=0]="ENUM_TYPE_UNKNOWN",e[e.OPEN=1]="OPEN",e[e.CLOSED=2]="CLOSED"})(qa||(qa={}));h.util.setEnumType(qa,"google.protobuf.FeatureSet.EnumType",[{no:0,name:"ENUM_TYPE_UNKNOWN"},{no:1,name:"OPEN"},{no:2,name:"CLOSED"}]);var Aa;(function(e){e[e.REPEATED_FIELD_ENCODING_UNKNOWN=0]="REPEATED_FIELD_ENCODING_UNKNOWN",e[e.PACKED=1]="PACKED",e[e.EXPANDED=2]="EXPANDED"})(Aa||(Aa={}));h.util.setEnumType(Aa,"google.protobuf.FeatureSet.RepeatedFieldEncoding",[{no:0,name:"REPEATED_FIELD_ENCODING_UNKNOWN"},{no:1,name:"PACKED"},{no:2,name:"EXPANDED"}]);var Da;(function(e){e[e.UTF8_VALIDATION_UNKNOWN=0]="UTF8_VALIDATION_UNKNOWN",e[e.NONE=1]="NONE",e[e.VERIFY=2]="VERIFY"})(Da||(Da={}));h.util.setEnumType(Da,"google.protobuf.FeatureSet.Utf8Validation",[{no:0,name:"UTF8_VALIDATION_UNKNOWN"},{no:1,name:"NONE"},{no:2,name:"VERIFY"}]);var Va;(function(e){e[e.MESSAGE_ENCODING_UNKNOWN=0]="MESSAGE_ENCODING_UNKNOWN",e[e.LENGTH_PREFIXED=1]="LENGTH_PREFIXED",e[e.DELIMITED=2]="DELIMITED"})(Va||(Va={}));h.util.setEnumType(Va,"google.protobuf.FeatureSet.MessageEncoding",[{no:0,name:"MESSAGE_ENCODING_UNKNOWN"},{no:1,name:"LENGTH_PREFIXED"},{no:2,name:"DELIMITED"}]);var ba;(function(e){e[e.JSON_FORMAT_UNKNOWN=0]="JSON_FORMAT_UNKNOWN",e[e.ALLOW=1]="ALLOW",e[e.LEGACY_BEST_EFFORT=2]="LEGACY_BEST_EFFORT"})(ba||(ba={}));h.util.setEnumType(ba,"google.protobuf.FeatureSet.JsonFormat",[{no:0,name:"JSON_FORMAT_UNKNOWN"},{no:1,name:"ALLOW"},{no:2,name:"LEGACY_BEST_EFFORT"}]);var Mo=class e extends y{constructor(t){super(),this.defaults=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};Mo.runtime=h;Mo.typeName="google.protobuf.FeatureSetDefaults";Mo.fields=h.util.newFieldList(()=>[{no:1,name:"defaults",kind:"message",T:Sr,repeated:!0},{no:4,name:"minimum_edition",kind:"enum",T:h.getEnumType(Ht),opt:!0},{no:5,name:"maximum_edition",kind:"enum",T:h.getEnumType(Ht),opt:!0}]);var Sr=class e extends y{constructor(t){super(),h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};Sr.runtime=h;Sr.typeName="google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault";Sr.fields=h.util.newFieldList(()=>[{no:3,name:"edition",kind:"enum",T:h.getEnumType(Ht),opt:!0},{no:2,name:"features",kind:"message",T:ye,opt:!0}]);var Tr=class e extends y{constructor(t){super(),this.location=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};Tr.runtime=h;Tr.typeName="google.protobuf.SourceCodeInfo";Tr.fields=h.util.newFieldList(()=>[{no:1,name:"location",kind:"message",T:kr,repeated:!0}]);var kr=class e extends y{constructor(t){super(),this.path=[],this.span=[],this.leadingDetachedComments=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};kr.runtime=h;kr.typeName="google.protobuf.SourceCodeInfo.Location";kr.fields=h.util.newFieldList(()=>[{no:1,name:"path",kind:"scalar",T:5,repeated:!0,packed:!0},{no:2,name:"span",kind:"scalar",T:5,repeated:!0,packed:!0},{no:3,name:"leading_comments",kind:"scalar",T:9,opt:!0},{no:4,name:"trailing_comments",kind:"scalar",T:9,opt:!0},{no:6,name:"leading_detached_comments",kind:"scalar",T:9,repeated:!0}]);var Lo=class e extends y{constructor(t){super(),this.annotation=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};Lo.runtime=h;Lo.typeName="google.protobuf.GeneratedCodeInfo";Lo.fields=h.util.newFieldList(()=>[{no:1,name:"annotation",kind:"message",T:Pr,repeated:!0}]);var Pr=class e extends y{constructor(t){super(),this.path=[],h.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return h.util.equals(e,t,n)}};Pr.runtime=h;Pr.typeName="google.protobuf.GeneratedCodeInfo.Annotation";Pr.fields=h.util.newFieldList(()=>[{no:1,name:"path",kind:"scalar",T:5,repeated:!0,packed:!0},{no:2,name:"source_file",kind:"scalar",T:9,opt:!0},{no:3,name:"begin",kind:"scalar",T:5,opt:!0},{no:4,name:"end",kind:"scalar",T:5,opt:!0},{no:5,name:"semantic",kind:"enum",T:h.getEnumType(za),opt:!0}]);var za;(function(e){e[e.NONE=0]="NONE",e[e.SET=1]="SET",e[e.ALIAS=2]="ALIAS"})(za||(za={}));h.util.setEnumType(za,"google.protobuf.GeneratedCodeInfo.Annotation.Semantic",[{no:0,name:"NONE"},{no:1,name:"SET"},{no:2,name:"ALIAS"}]);var Z=class e extends y{constructor(t){super(),u.util.initPartial(t,this)}static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}};Z.runtime=u;Z.typeName="google.protobuf.Empty";Z.fields=u.util.newFieldList(()=>[]);var Ga=class e extends y{secret="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.VerifyUserRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"secret",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ja=class e extends y{secret="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.GroupInfoRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"secret",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},$a=class e extends y{groupId="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.GroupID";static fields=u.util.newFieldList(()=>[{no:1,name:"group_id",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},_a=class e extends y{contentId="";groupId="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.ShareRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"content_id",kind:"scalar",T:9},{no:2,name:"group_id",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Bo=class e extends y{secret="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.GroupInvite";static fields=u.util.newFieldList(()=>[{no:1,name:"secret",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Ha=class e extends y{groups=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.Groups";static fields=u.util.newFieldList(()=>[{no:1,name:"groups",kind:"message",T:kt,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Dg=class e extends y{text="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.AnalyzeConversationRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ot=class e extends y{email="";password="";username="";config;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.User";static fields=u.util.newFieldList(()=>[{no:1,name:"email",kind:"scalar",T:9},{no:2,name:"password",kind:"scalar",T:9},{no:3,name:"username",kind:"scalar",T:9},{no:4,name:"config",kind:"message",T:Fo}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},kt=class e extends y{id="";name="";users=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.Group";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"users",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Fo=class e extends y{domainWhitelist=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.Config";static fields=u.util.newFieldList(()=>[{no:1,name:"domain_whitelist",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Vg=class e extends y{constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="user.LoginResponse";static fields=u.util.newFieldList(()=>[]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}};var Ya=class e extends y{content;site;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.TypesResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:as},{no:2,name:"site",kind:"message",T:as}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Wa=class e extends y{contentTypes=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.GetSourcesRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"content_types",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Ka=class e extends y{captureDevice=0;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.VoiceInputRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"capture_device",kind:"scalar",T:5}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Qa=class e extends y{segment;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.VoiceInputResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"segment",kind:"message",T:Rr}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Xa=class e extends y{parent="";children=[];connect=!1;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.RelateRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"parent",kind:"scalar",T:9},{no:2,name:"children",kind:"scalar",T:9,repeated:!0},{no:3,name:"connect",kind:"scalar",T:8}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Za=class e extends y{sources=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Sources";static fields=u.util.newFieldList(()=>[{no:1,name:"sources",kind:"message",T:Nc,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Nc=class e extends y{source;displayContent=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.EnumeratedSource";static fields=u.util.newFieldList(()=>[{no:1,name:"source",kind:"message",T:Ic},{no:2,name:"display_content",kind:"message",T:Oc,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Oc=class e extends y{title="";description="";type="";content;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.DisplayContent";static fields=u.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"description",kind:"scalar",T:9},{no:3,name:"type",kind:"scalar",T:9},{no:4,name:"content",kind:"message",T:We}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Ic=class e extends y{name="";type={case:void 0};constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Source";static fields=u.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"server",kind:"message",T:Cc,oneof:"type"},{no:3,name:"folder",kind:"message",T:Mc,oneof:"type"}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Cc=class e extends y{constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Server";static fields=u.util.newFieldList(()=>[]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Mc=class e extends y{path="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Folder";static fields=u.util.newFieldList(()=>[{no:2,name:"path",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},es=class e extends y{contentId="";tags=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.SetTagsRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"content_id",kind:"scalar",T:9},{no:2,name:"tags",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ts=class e extends y{groupId="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.TagRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"group_id",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ns=class e extends y{tags=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Tags";static fields=u.util.newFieldList(()=>[{no:1,name:"tags",kind:"message",T:rs,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},rs=class e extends y{name="";subTags=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Tag";static fields=u.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"sub_tags",kind:"message",T:e,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Wt=class e extends y{contentIds=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.ContentIDs";static fields=u.util.newFieldList(()=>[{no:1,name:"content_ids",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Uo=class e extends y{content;tags=[];related=[];parents=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Contents";static fields=u.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:We},{no:2,name:"tags",kind:"scalar",T:9,repeated:!0},{no:3,name:"related",kind:"message",T:We,repeated:!0},{no:4,name:"parents",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},os=class e extends y{query="";page=0;contentID="";groupID="";tags=[];contentTypes=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Query";static fields=u.util.newFieldList(()=>[{no:1,name:"query",kind:"scalar",T:9},{no:2,name:"page",kind:"scalar",T:13},{no:3,name:"contentID",kind:"scalar",T:9},{no:4,name:"groupID",kind:"scalar",T:9},{no:5,name:"tags",kind:"scalar",T:9,repeated:!0},{no:6,name:"content_types",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},is=class e extends y{storedContent=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Results";static fields=u.util.newFieldList(()=>[{no:1,name:"storedContent",kind:"message",T:Lc,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Lc=class e extends y{content;id="";related=[];title="";description="";image="";url="";user;tags=[];preview="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.StoredContent";static fields=u.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:We},{no:2,name:"id",kind:"scalar",T:9},{no:3,name:"related",kind:"message",T:We,repeated:!0},{no:4,name:"title",kind:"scalar",T:9},{no:5,name:"description",kind:"scalar",T:9},{no:6,name:"image",kind:"scalar",T:9},{no:7,name:"url",kind:"scalar",T:9},{no:9,name:"user",kind:"message",T:ot},{no:10,name:"tags",kind:"message",T:rs,repeated:!0},{no:11,name:"preview",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},bg=class e extends y{from="";to="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Edge";static fields=u.util.newFieldList(()=>[{no:1,name:"from",kind:"scalar",T:9},{no:2,name:"to",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},We=class e extends y{tags=[];createdAt="";uri="";id="";type={case:void 0};constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Content";static fields=u.util.newFieldList(()=>[{no:1,name:"tags",kind:"scalar",T:9,repeated:!0},{no:2,name:"created_at",kind:"scalar",T:9},{no:3,name:"uri",kind:"scalar",T:9},{no:4,name:"id",kind:"scalar",T:9},{no:6,name:"data",kind:"message",T:Fc,oneof:"type"},{no:7,name:"normalized",kind:"message",T:Uc,oneof:"type"},{no:8,name:"transformed",kind:"message",T:qc,oneof:"type"},{no:9,name:"post",kind:"message",T:Bc,oneof:"type"},{no:10,name:"site",kind:"message",T:Yc,oneof:"type"}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Bc=class e extends y{title="";summary="";content="";authors=[];draft=!1;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Post";static fields=u.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"summary",kind:"scalar",T:9},{no:3,name:"content",kind:"scalar",T:9},{no:4,name:"authors",kind:"scalar",T:9,repeated:!0},{no:6,name:"draft",kind:"scalar",T:8}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},zg=class e extends y{url="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.GitRepo";static fields=u.util.newFieldList(()=>[{no:1,name:"url",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Fc=class e extends y{type={case:void 0};constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Data";static fields=u.util.newFieldList(()=>[{no:4,name:"text",kind:"message",T:jc,oneof:"type"},{no:5,name:"file",kind:"message",T:Gc,oneof:"type"},{no:6,name:"url",kind:"message",T:$c,oneof:"type"}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Uc=class e extends y{type={case:void 0};constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Normalized";static fields=u.util.newFieldList(()=>[{no:3,name:"article",kind:"message",T:Ac,oneof:"type"},{no:4,name:"html",kind:"message",T:Dc,oneof:"type"},{no:6,name:"transcript",kind:"message",T:Hc,oneof:"type"},{no:7,name:"readme",kind:"message",T:Vc,oneof:"type"}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},qc=class e extends y{type={case:void 0};constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Transformed";static fields=u.util.newFieldList(()=>[{no:1,name:"summary",kind:"message",T:bc,oneof:"type"},{no:2,name:"categories",kind:"message",T:zc,oneof:"type"}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Ac=class e extends y{title="";author="";length=0;excerpt="";siteName="";image="";favicon="";text="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Article";static fields=u.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"author",kind:"scalar",T:9},{no:3,name:"length",kind:"scalar",T:5},{no:4,name:"excerpt",kind:"scalar",T:9},{no:5,name:"site_name",kind:"scalar",T:9},{no:6,name:"image",kind:"scalar",T:9},{no:7,name:"favicon",kind:"scalar",T:9},{no:8,name:"text",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Dc=class e extends y{html="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.HTML";static fields=u.util.newFieldList(()=>[{no:1,name:"html",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Vc=class e extends y{data="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.ReadMe";static fields=u.util.newFieldList(()=>[{no:1,name:"data",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},bc=class e extends y{summary="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Summary";static fields=u.util.newFieldList(()=>[{no:1,name:"summary",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},zc=class e extends y{categories=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Categories";static fields=u.util.newFieldList(()=>[{no:1,name:"categories",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Gc=class e extends y{file="";data=new Uint8Array(0);url="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.File";static fields=u.util.newFieldList(()=>[{no:1,name:"file",kind:"scalar",T:9},{no:2,name:"data",kind:"scalar",T:12},{no:3,name:"url",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},jc=class e extends y{data="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Text";static fields=u.util.newFieldList(()=>[{no:1,name:"data",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},$c=class e extends y{url="";crawl=!1;title="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.URL";static fields=u.util.newFieldList(()=>[{no:1,name:"url",kind:"scalar",T:9},{no:2,name:"crawl",kind:"scalar",T:8},{no:3,name:"title",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},_c=class e extends y{id=0;startTime=F.zero;endTime=F.zero;text="";p="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Token";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:13},{no:2,name:"start_time",kind:"scalar",T:4},{no:3,name:"end_time",kind:"scalar",T:4},{no:4,name:"text",kind:"scalar",T:9},{no:5,name:"p",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Rr=class e extends y{num=0;tokens=[];text="";startTime=F.zero;endTime=F.zero;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Segment";static fields=u.util.newFieldList(()=>[{no:1,name:"num",kind:"scalar",T:13},{no:2,name:"tokens",kind:"message",T:_c,repeated:!0},{no:3,name:"text",kind:"scalar",T:9},{no:4,name:"start_time",kind:"scalar",T:4},{no:5,name:"end_time",kind:"scalar",T:4}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Hc=class e extends y{id="";name="";segments=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Transcript";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"segments",kind:"message",T:Rr,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},as=class e extends y{msg;descLookup={};enumLookup={};packageName="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.GRPCTypeInfo";static fields=u.util.newFieldList(()=>[{no:1,name:"msg",kind:"message",T:rt},{no:3,name:"desc_lookup",kind:"map",K:9,V:{kind:"message",T:rt}},{no:4,name:"enum_lookup",kind:"map",K:9,V:{kind:"message",T:Tt}},{no:6,name:"package_name",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Yc=class e extends y{hugoConfig;postTags=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.Site";static fields=u.util.newFieldList(()=>[{no:1,name:"hugo_config",kind:"message",T:Wc},{no:2,name:"post_tags",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Wc=class e extends y{publishDir="";baseUrl="";title="";paginate=0;theme=[];enableInlineShortcodes=!1;enableRobotsTxt=!1;buildDrafts=!1;buildFuture=!1;buildExpired=!1;enableEmoji=!1;pygmentsUseClasses=!1;mainSections=[];minify;languages={};outputs={};params;markup;services;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.HugoConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"publish_dir",kind:"scalar",T:9},{no:2,name:"base_url",kind:"scalar",T:9},{no:3,name:"title",kind:"scalar",T:9},{no:4,name:"paginate",kind:"scalar",T:5},{no:5,name:"theme",kind:"scalar",T:9,repeated:!0},{no:6,name:"enable_inline_shortcodes",kind:"scalar",T:8},{no:7,name:"enable_robots_txt",kind:"scalar",T:8},{no:8,name:"build_drafts",kind:"scalar",T:8},{no:9,name:"build_future",kind:"scalar",T:8},{no:10,name:"build_expired",kind:"scalar",T:8},{no:11,name:"enable_emoji",kind:"scalar",T:8},{no:12,name:"pygments_use_classes",kind:"scalar",T:8},{no:13,name:"main_sections",kind:"scalar",T:9,repeated:!0},{no:14,name:"minify",kind:"message",T:Kc},{no:15,name:"languages",kind:"map",K:9,V:{kind:"message",T:Qc}},{no:16,name:"outputs",kind:"map",K:9,V:{kind:"message",T:sf}},{no:17,name:"params",kind:"message",T:uf},{no:18,name:"markup",kind:"message",T:tf},{no:19,name:"services",kind:"message",T:af}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Kc=class e extends y{disableXml=!1;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.MinifyConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"disable_xml",kind:"scalar",T:8}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Qc=class e extends y{languageName="";weight=0;title="";taxonomies={};menu={};params={};constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.LanguageConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"language_name",kind:"scalar",T:9},{no:2,name:"weight",kind:"scalar",T:5},{no:3,name:"title",kind:"scalar",T:9},{no:4,name:"taxonomies",kind:"map",K:9,V:{kind:"scalar",T:9}},{no:5,name:"menu",kind:"map",K:9,V:{kind:"message",T:lf}},{no:6,name:"params",kind:"map",K:9,V:{kind:"scalar",T:9}}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Xc=class e extends y{name="";url="";weight=0;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.MenuItem";static fields=u.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"url",kind:"scalar",T:9},{no:3,name:"weight",kind:"scalar",T:5}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Zc=class e extends y{url="";text="";appendFilePath=!1;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.EditPostConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"url",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9},{no:3,name:"append_file_path",kind:"scalar",T:8}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ef=class e extends y{disableHljs=!1;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.AssetsConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"disable_hljs",kind:"scalar",T:8}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},tf=class e extends y{goldmark;highlight;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.MarkupConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"goldmark",kind:"message",T:nf},{no:2,name:"highlight",kind:"message",T:of}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},nf=class e extends y{renderer;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.GoldmarkConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"renderer",kind:"message",T:rf}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},rf=class e extends y{unsafe=!1;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.RendererConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"unsafe",kind:"scalar",T:8}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},of=class e extends y{noClasses=!1;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.HighlightConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"no_classes",kind:"scalar",T:8}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},af=class e extends y{instagram;twitter;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.ServicesConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"instagram",kind:"message",T:ss},{no:2,name:"twitter",kind:"message",T:ss}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ss=class e extends y{disableInlineCss=!1;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.ServiceConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"disable_inline_css",kind:"scalar",T:8}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},sf=class e extends y{values=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.repeated_string";static fields=u.util.newFieldList(()=>[{no:1,name:"values",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},lf=class e extends y{items=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.repeated_menu_item";static fields=u.util.newFieldList(()=>[{no:1,name:"items",kind:"message",T:Xc,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},uf=class e extends y{env="";description="";author="";defaultTheme="";showShareButtons=!1;showReadingTime=!1;displayFullLangName=!1;showPostNavLinks=!1;showBreadCrumbs=!1;showCodeCopyButtons=!1;showRssButtonInSectionTermList=!1;showAllPagesInArchive=!1;showPageNums=!1;showToc=!1;images=[];profileMode;homeInfoParams;socialIcons=[];editPost;assets;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.ParamsConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"env",kind:"scalar",T:9},{no:2,name:"description",kind:"scalar",T:9},{no:3,name:"author",kind:"scalar",T:9},{no:4,name:"default_theme",kind:"scalar",T:9},{no:5,name:"show_share_buttons",kind:"scalar",T:8},{no:6,name:"show_reading_time",kind:"scalar",T:8},{no:7,name:"display_full_lang_name",kind:"scalar",T:8},{no:8,name:"show_post_nav_links",kind:"scalar",T:8},{no:9,name:"show_bread_crumbs",kind:"scalar",T:8},{no:10,name:"show_code_copy_buttons",kind:"scalar",T:8},{no:11,name:"show_rss_button_in_section_term_list",kind:"scalar",T:8},{no:12,name:"show_all_pages_in_archive",kind:"scalar",T:8},{no:13,name:"show_page_nums",kind:"scalar",T:8},{no:14,name:"show_toc",kind:"scalar",T:8},{no:15,name:"images",kind:"scalar",T:9,repeated:!0},{no:16,name:"profile_mode",kind:"message",T:cf},{no:17,name:"home_info_params",kind:"message",T:df},{no:18,name:"social_icons",kind:"message",T:mf,repeated:!0},{no:19,name:"edit_post",kind:"message",T:Zc},{no:20,name:"assets",kind:"message",T:ef}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},cf=class e extends y{enabled=!1;title="";imageUrl="";imageTitle="";buttons=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.ProfileModeConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"enabled",kind:"scalar",T:8},{no:2,name:"title",kind:"scalar",T:9},{no:3,name:"image_url",kind:"scalar",T:9},{no:4,name:"image_title",kind:"scalar",T:9},{no:5,name:"buttons",kind:"message",T:ff,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ff=class e extends y{name="";url="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.ButtonConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"url",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},df=class e extends y{title="";content="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.HomeInfoParamsConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"content",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},mf=class e extends y{name="";title="";url="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="content.SocialIconConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"title",kind:"scalar",T:9},{no:3,name:"url",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}};var ls=class e extends y{text="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.AnalyzeConversationRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},us=class e extends y{prompt="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.GenerateImagesRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"prompt",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},cs=class e extends y{images=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.GenerateImagesResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"images",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},fs=class e extends y{id="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.DeleteSessionRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},xr=class e extends y{id="";text="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.Prompt";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ds=class e extends y{constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.GetPromptsRequest";static fields=u.util.newFieldList(()=>[]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ms=class e extends y{prompts=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.GetPromptsResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"prompts",kind:"message",T:xr,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ps=class e extends y{prompt="";text=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.InferRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"prompt",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},gs=class e extends y{text="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.InferResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ys=class e extends y{content;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.UploadContentRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:We}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Gg=class e extends y{id="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.UploadContentResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},hs=class e extends y{id="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.GetSessionRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ws=class e extends y{session;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.GetSessionResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"session",kind:"message",T:ks}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},vs=class e extends y{page=F.zero;limit=F.zero;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.GetSessionsRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"page",kind:"scalar",T:4},{no:2,name:"limit",kind:"scalar",T:4}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Ss=class e extends y{sessions=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.GetSessionsResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"sessions",kind:"message",T:ks,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},pf=class e extends y{id=0;startTime=F.zero;endTime=F.zero;text="";p="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.Token";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:13},{no:2,name:"start_time",kind:"scalar",T:4},{no:3,name:"end_time",kind:"scalar",T:4},{no:4,name:"text",kind:"scalar",T:9},{no:5,name:"p",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Ts=class e extends y{num=0;tokens=[];text="";startTime=F.zero;endTime=F.zero;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.Segment";static fields=u.util.newFieldList(()=>[{no:1,name:"num",kind:"scalar",T:13},{no:2,name:"tokens",kind:"message",T:pf,repeated:!0},{no:3,name:"text",kind:"scalar",T:9},{no:4,name:"start_time",kind:"scalar",T:4},{no:5,name:"end_time",kind:"scalar",T:4}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},ks=class e extends y{id="";name="";segments=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.Session";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"segments",kind:"message",T:Ts,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},jg=class e extends y{filePath="";model="";language="";translate=!1;offset=F.zero;duration=F.zero;threads=0;speedup=!1;maxLen=0;maxTokens=0;wordThreshold=0;tokens=!1;colorize=!1;out="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.TranscriptionRequest";static fields=u.util.newFieldList(()=>[{no:14,name:"file_path",kind:"scalar",T:9},{no:1,name:"model",kind:"scalar",T:9},{no:2,name:"language",kind:"scalar",T:9},{no:3,name:"translate",kind:"scalar",T:8},{no:4,name:"offset",kind:"scalar",T:3},{no:5,name:"duration",kind:"scalar",T:3},{no:6,name:"threads",kind:"scalar",T:13},{no:7,name:"speedup",kind:"scalar",T:8},{no:8,name:"max_len",kind:"scalar",T:13},{no:9,name:"max_tokens",kind:"scalar",T:13},{no:10,name:"word_threshold",kind:"scalar",T:1},{no:11,name:"tokens",kind:"scalar",T:8},{no:12,name:"colorize",kind:"scalar",T:8},{no:13,name:"out",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},$g=class e extends y{constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.RegisterFlags";static fields=u.util.newFieldList(()=>[]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},_g=class e extends y{text="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.OCRText";static fields=u.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Hg=class e extends y{image=new Uint8Array(0);constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.Image";static fields=u.util.newFieldList(()=>[{no:1,name:"image",kind:"scalar",T:12}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Ps=class e extends y{from="";to="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.ConvertFileRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"from",kind:"scalar",T:9},{no:2,name:"to",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Rs=class e extends y{captureDevice=0;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.ChatRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"capture_device",kind:"scalar",T:5}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},qo=class e extends y{segment;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.ChatResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"segment",kind:"message",T:Ts}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},xs=class e extends y{id="";file="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.YouTubeVideo";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"file",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Ao=class e extends y{file="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.FilePath";static fields=u.util.newFieldList(()=>[{no:1,name:"file",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Es=class e extends y{title="";filePath;transcript=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="protoflow.YouTubeVideoResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"file_path",kind:"message",T:Ao},{no:3,name:"transcript",kind:"message",T:Rr,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}};var Js=class e extends y{phoneNumbers=[];summary="";questions=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="ai.AnalyzeConversationResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"phone_numbers",kind:"scalar",T:9,repeated:!0},{no:2,name:"summary",kind:"scalar",T:9},{no:3,name:"questions",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Yg=class e extends y{categories=[];constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="ai.AnalyzeContent";static fields=u.util.newFieldList(()=>[{no:1,name:"categories",kind:"scalar",T:9,repeated:!0}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}};var Wg={typeName:"protoflow.ProtoflowService",methods:{downloadYouTubeVideo:{name:"DownloadYouTubeVideo",I:xs,O:Es,kind:J.Unary},getSessions:{name:"GetSessions",I:vs,O:Ss,kind:J.Unary},getSession:{name:"GetSession",I:hs,O:ws,kind:J.Unary},deleteSession:{name:"DeleteSession",I:fs,O:Z,kind:J.Unary},getPrompts:{name:"GetPrompts",I:ds,O:ms,kind:J.Unary},newPrompt:{name:"NewPrompt",I:xr,O:xr,kind:J.Unary},uploadContent:{name:"UploadContent",I:ys,O:qo,kind:J.ServerStreaming},infer:{name:"Infer",I:ps,O:gs,kind:J.ServerStreaming},chat:{name:"Chat",I:Rs,O:qo,kind:J.ServerStreaming},convertFile:{name:"ConvertFile",I:Ps,O:Ao,kind:J.Unary},generateImages:{name:"GenerateImages",I:us,O:cs,kind:J.Unary},analyzeConversation:{name:"AnalyzeConversation",I:ls,O:Js,kind:J.Unary}}};var Kg={typeName:"content.ContentService",methods:{save:{name:"Save",I:Uo,O:Wt,kind:J.Unary},search:{name:"Search",I:os,O:is,kind:J.Unary},relate:{name:"Relate",I:Xa,O:Z,kind:J.Unary},analyze:{name:"Analyze",I:We,O:Uo,kind:J.Unary},delete:{name:"Delete",I:Wt,O:Wt,kind:J.Unary},getTags:{name:"GetTags",I:ts,O:ns,kind:J.Unary},setTags:{name:"SetTags",I:es,O:Z,kind:J.Unary},publish:{name:"Publish",I:Wt,O:Wt,kind:J.Unary},getSources:{name:"GetSources",I:Wa,O:Za,kind:J.Unary},types:{name:"Types",I:Z,O:Ya,kind:J.Unary},voiceInput:{name:"VoiceInput",I:Ka,O:Qa,kind:J.ServerStreaming}}};var Qg={typeName:"user.UserService",methods:{register:{name:"Register",I:ot,O:ot,kind:J.Unary},login:{name:"Login",I:ot,O:ot,kind:J.Unary},logout:{name:"Logout",I:Z,O:Z,kind:J.Unary},resetPassword:{name:"ResetPassword",I:ot,O:Z,kind:J.Unary},verifyUser:{name:"VerifyUser",I:Ga,O:Z,kind:J.Unary},updateConfig:{name:"UpdateConfig",I:Fo,O:Z,kind:J.Unary},createGroupInvite:{name:"CreateGroupInvite",I:$a,O:Bo,kind:J.Unary},joinGroup:{name:"JoinGroup",I:Bo,O:kt,kind:J.Unary},groupInfo:{name:"GroupInfo",I:ja,O:kt,kind:J.Unary},createGroup:{name:"CreateGroup",I:kt,O:kt,kind:J.Unary},getGroups:{name:"GetGroups",I:Z,O:Ha,kind:J.Unary},deleteGroup:{name:"DeleteGroup",I:kt,O:Z,kind:J.Unary},share:{name:"Share",I:_a,O:Z,kind:J.Unary}}};var Ns=class e extends y{user="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="chat.BanUserRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"user",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Os=class e extends y{constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="chat.BanUserResponse";static fields=u.util.newFieldList(()=>[]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Is=class e extends y{message="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="chat.SendMessageRequest";static fields=u.util.newFieldList(()=>[{no:2,name:"message",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Cs=class e extends y{constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="chat.SendMessageResponse";static fields=u.util.newFieldList(()=>[]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Ms=class e extends y{constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="chat.ReceiveMessagesRequest";static fields=u.util.newFieldList(()=>[]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Ls=class e extends y{user="";text="";timestamp=F.zero;constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="chat.Message";static fields=u.util.newFieldList(()=>[{no:1,name:"user",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9},{no:3,name:"timestamp",kind:"scalar",T:3}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}};var Xg={typeName:"chat.ChatService",methods:{sendMessage:{name:"SendMessage",I:Is,O:Cs,kind:J.Unary},receiveMessages:{name:"ReceiveMessages",I:Ms,O:Ls,kind:J.ServerStreaming},banUser:{name:"BanUser",I:Ns,O:Os,kind:J.Unary}}};var Bs=class e extends y{type={case:void 0};constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="event.Metric";static fields=u.util.newFieldList(()=>[{no:1,name:"http",kind:"message",T:gf,oneof:"type"},{no:2,name:"rrweb",kind:"message",T:yf,oneof:"type"}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},gf=class e extends y{method="";path="";query="";headers={};host="";remoteAddr="";userAgent="";referer="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="event.HTTPRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"method",kind:"scalar",T:9},{no:2,name:"path",kind:"scalar",T:9},{no:3,name:"query",kind:"scalar",T:9},{no:4,name:"headers",kind:"map",K:9,V:{kind:"scalar",T:9}},{no:5,name:"host",kind:"scalar",T:9},{no:6,name:"remoteAddr",kind:"scalar",T:9},{no:7,name:"userAgent",kind:"scalar",T:9},{no:8,name:"referer",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},yf=class e extends y{events="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="event.RRWeb";static fields=u.util.newFieldList(()=>[{no:1,name:"events",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}},Fs=class e extends y{id="";constructor(t){super(),u.util.initPartial(t,this)}static runtime=u;static typeName="event.SendResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(t,n){return new e().fromBinary(t,n)}static fromJson(t,n){return new e().fromJson(t,n)}static fromJsonString(t,n){return new e().fromJsonString(t,n)}static equals(t,n){return u.util.equals(e,t,n)}};var Zg={typeName:"event.EventService",methods:{send:{name:"Send",I:Bs,O:Fs,kind:J.Unary}}};var M;(function(e){e[e.Canceled=1]="Canceled",e[e.Unknown=2]="Unknown",e[e.InvalidArgument=3]="InvalidArgument",e[e.DeadlineExceeded=4]="DeadlineExceeded",e[e.NotFound=5]="NotFound",e[e.AlreadyExists=6]="AlreadyExists",e[e.PermissionDenied=7]="PermissionDenied",e[e.ResourceExhausted=8]="ResourceExhausted",e[e.FailedPrecondition=9]="FailedPrecondition",e[e.Aborted=10]="Aborted",e[e.OutOfRange=11]="OutOfRange",e[e.Unimplemented=12]="Unimplemented",e[e.Internal=13]="Internal",e[e.Unavailable=14]="Unavailable",e[e.DataLoss=15]="DataLoss",e[e.Unauthenticated=16]="Unauthenticated"})(M||(M={}));function Do(e){let t=M[e];return typeof t!="string"?e.toString():t[0].toLowerCase()+t.substring(1).replace(/[A-Z]/g,n=>"_"+n.toLowerCase())}var Us;function ey(e){if(!Us){Us={};for(let t of Object.values(M))typeof t!="string"&&(Us[Do(t)]=t)}return Us[e]}var Q=class e extends Error{constructor(t,n=M.Unknown,r,o,i){super(Rw(t,n)),this.name="ConnectError",Object.setPrototypeOf(this,new.target.prototype),this.rawMessage=t,this.code=n,this.metadata=new Headers(r??{}),this.details=o??[],this.cause=i}static from(t,n=M.Unknown){return t instanceof e?t:t instanceof Error?t.name=="AbortError"?new e(t.message,M.Canceled):new e(t.message,n,void 0,void 0,t):new e(String(t),n,void 0,void 0,t)}static[Symbol.hasInstance](t){return t instanceof Error?Object.getPrototypeOf(t)===e.prototype?!0:t.name==="ConnectError"&&"code"in t&&typeof t.code=="number"&&"metadata"in t&&"details"in t&&Array.isArray(t.details)&&"rawMessage"in t&&typeof t.rawMessage=="string"&&"cause"in t:!1}findDetails(t){let n="typeName"in t?{findMessage:o=>o===t.typeName?t:void 0}:t,r=[];for(let o of this.details){if(o instanceof y){n.findMessage(o.getType().typeName)&&r.push(o);continue}let i=n.findMessage(o.type);if(i)try{r.push(i.fromBinary(o.value))}catch{}}return r}};function Rw(e,t){return e.length?`[${Do(t)}] ${e}`:`[${Do(t)}]`}function hf(...e){let t=new Headers;for(let n of e)n.forEach((r,o)=>{t.append(o,r)});return t}function ty(e,t){let n={};for(let[r,o]of Object.entries(e.methods)){let i=t(Object.assign(Object.assign({},o),{localName:r,service:e}));i!=null&&(n[r]=i)}return n}function wf(e){let t,n=new Uint8Array(0);function r(o){let i=new Uint8Array(n.length+o.length);i.set(n),i.set(o,n.length),n=i}return new ReadableStream({start(){t=e.getReader()},async pull(o){let i;for(;;){if(i===void 0&&n.byteLength>=5){let l=0;for(let c=1;c<5;c++)l=(l<<8)+n[c];i={flags:n[0],length:l}}if(i!==void 0&&n.byteLength>=i.length+5)break;let s=await t.read();if(s.done)break;r(s.value)}if(i===void 0){if(n.byteLength==0){o.close();return}o.error(new Q("premature end of stream",M.DataLoss));return}let a=n.subarray(5,5+i.length);n=n.subarray(5+i.length),o.enqueue({flags:i.flags,data:a})}})}function vf(e,t){let n=new Uint8Array(t.length+5);n.set(t,5);let r=new DataView(n.buffer,n.byteOffset,n.byteLength);return r.setUint8(0,e),r.setUint32(1,t.length),n}var xw=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator],n;return t?t.call(e):(e=typeof __values=="function"?__values(e):e[Symbol.iterator](),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(i){n[i]=e[i]&&function(a){return new Promise(function(s,l){a=e[i](a),o(s,l,a.done,a.value)})}}function o(i,a,s,l){Promise.resolve(l).then(function(c){i({value:c,done:s})},a)}},Vo=function(e){return this instanceof Vo?(this.v=e,this):new Vo(e)},Ew=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=n.apply(e,t||[]),o,i=[];return o={},s("next"),s("throw"),s("return",a),o[Symbol.asyncIterator]=function(){return this},o;function a(m){return function(S){return Promise.resolve(S).then(m,v)}}function s(m,S){r[m]&&(o[m]=function(k){return new Promise(function(O,p){i.push([m,k,O,p])>1||l(m,k)})},S&&(o[m]=S(o[m])))}function l(m,S){try{c(r[m](S))}catch(k){g(i[0][3],k)}}function c(m){m.value instanceof Vo?Promise.resolve(m.value.v).then(d,v):g(i[0][2],m)}function d(m){l("next",m)}function v(m){l("throw",m)}function g(m,S){m(S),i.shift(),i.length&&l(i[0][0],i[0][1])}},Jw=function(e){var t,n;return t={},r("next"),r("throw",function(o){throw o}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(o,i){t[o]=e[o]?function(a){return(n=!n)?{value:Vo(e[o](a)),done:!1}:i?i(a):a}:i}};function ny(e){return Ew(this,arguments,function*(){yield Vo(yield*Jw(xw(e)))})}var ry=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator],n;return t?t.call(e):(e=typeof __values=="function"?__values(e):e[Symbol.iterator](),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(i){n[i]=e[i]&&function(a){return new Promise(function(s,l){a=e[i](a),o(s,l,a.done,a.value)})}}function o(i,a,s,l){Promise.resolve(l).then(function(c){i({value:c,done:s})},a)}},Er=function(e){return this instanceof Er?(this.v=e,this):new Er(e)},Nw=function(e){var t,n;return t={},r("next"),r("throw",function(o){throw o}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(o,i){t[o]=e[o]?function(a){return(n=!n)?{value:Er(e[o](a)),done:!1}:i?i(a):a}:i}},Ow=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=n.apply(e,t||[]),o,i=[];return o={},s("next"),s("throw"),s("return",a),o[Symbol.asyncIterator]=function(){return this},o;function a(m){return function(S){return Promise.resolve(S).then(m,v)}}function s(m,S){r[m]&&(o[m]=function(k){return new Promise(function(O,p){i.push([m,k,O,p])>1||l(m,k)})},S&&(o[m]=S(o[m])))}function l(m,S){try{c(r[m](S))}catch(k){g(i[0][3],k)}}function c(m){m.value instanceof Er?Promise.resolve(m.value.v).then(d,v):g(i[0][2],m)}function d(m){l("next",m)}function v(m){l("throw",m)}function g(m,S){m(S),i.shift(),i.length&&l(i[0][0],i[0][1])}};function yn(e,t){return ty(e,n=>{switch(n.kind){case J.Unary:return Iw(t,e,n);case J.ServerStreaming:return Cw(t,e,n);case J.ClientStreaming:return Mw(t,e,n);case J.BiDiStreaming:return Lw(t,e,n);default:return null}})}function Iw(e,t,n){return async function(r,o){var i,a;let s=await e.unary(t,n,o?.signal,o?.timeoutMs,o?.headers,r,o?.contextValues);return(i=o?.onHeader)===null||i===void 0||i.call(o,s.header),(a=o?.onTrailer)===null||a===void 0||a.call(o,s.trailer),s.message}}function Cw(e,t,n){return function(r,o){return oy(e.stream(t,n,o?.signal,o?.timeoutMs,o?.headers,ny([r]),o?.contextValues),o)}}function Mw(e,t,n){return async function(r,o){var i,a,s,l,c,d;let v=await e.stream(t,n,o?.signal,o?.timeoutMs,o?.headers,r,o?.contextValues);(c=o?.onHeader)===null||c===void 0||c.call(o,v.header);let g;try{for(var m=!0,S=ry(v.message),k;k=await S.next(),i=k.done,!i;m=!0)l=k.value,m=!1,g=l}catch(O){a={error:O}}finally{try{!m&&!i&&(s=S.return)&&await s.call(S)}finally{if(a)throw a.error}}if(!g)throw new Q("protocol error: missing response message",M.Internal);return(d=o?.onTrailer)===null||d===void 0||d.call(o,v.trailer),g}}function Lw(e,t,n){return function(r,o){return oy(e.stream(t,n,o?.signal,o?.timeoutMs,o?.headers,r,o?.contextValues),o)}}function oy(e,t){let n=function(){var r,o;return Ow(this,arguments,function*(){let i=yield Er(e);(r=t?.onHeader)===null||r===void 0||r.call(t,i.header),yield Er(yield*Nw(ry(i.message))),(o=t?.onTrailer)===null||o===void 0||o.call(t,i.trailer)})}()[Symbol.asyncIterator]();return{[Symbol.asyncIterator]:()=>({next:()=>n.next()})}}function iy(...e){let t=new AbortController,n=e.filter(o=>o!==void 0).concat(t.signal);for(let o of n){if(o.aborted){r.apply(o);break}o.addEventListener("abort",r)}function r(){t.signal.aborted||t.abort(Sf(this));for(let o of n)o.removeEventListener("abort",r)}return t}function ay(e){let t=new AbortController,n=()=>{t.abort(new Q("the operation timed out",M.DeadlineExceeded))},r;return e!==void 0&&(e<=0?n():r=setTimeout(n,e)),{signal:t.signal,cleanup:()=>clearTimeout(r)}}function Sf(e){if(!e.aborted)return;if(e.reason!==void 0)return e.reason;let t=new Error("This operation was aborted");return t.name="AbortError",t}function qs(){return{get(e){return e.id in this?this[e.id]:e.defaultValue},set(e,t){return this[e.id]=t,this},delete(e){return delete this[e.id],this}}}function As(e,t,n){let r=typeof t=="string"?t:t.typeName,o=typeof n=="string"?n:n.name;return e.toString().replace(/\/?$/,`/${r}/${o}`)}function Tf(e,t){return t instanceof e?t:new e(t)}function sy(e,t){function n(r){return r.done===!0?r:{done:r.done,value:Tf(e,r.value)}}return{[Symbol.asyncIterator](){let r=t[Symbol.asyncIterator](),o={next:()=>r.next().then(n)};return r.throw!==void 0&&(o.throw=i=>r.throw(i).then(n)),r.return!==void 0&&(o.return=i=>r.return(i).then(n)),o}}}function Ds(e){var t;let n=Object.assign({},e);return(t=n.ignoreUnknownFields)!==null&&t!==void 0||(n.ignoreUnknownFields=!0),n}function Vs(e,t,n,r){let o=t?ly(e.I,r):uy(e.I,n);return{parse:(t?ly(e.O,r):uy(e.O,n)).parse,serialize:o.serialize}}function ly(e,t){return{parse(n){try{return e.fromBinary(n,t)}catch(r){let o=r instanceof Error?r.message:String(r);throw new Q(`parse binary: ${o}`,M.InvalidArgument)}},serialize(n){try{return n.toBinary(t)}catch(r){let o=r instanceof Error?r.message:String(r);throw new Q(`serialize binary: ${o}`,M.Internal)}}}}function uy(e,t){var n,r;let o=(n=t?.textEncoder)!==null&&n!==void 0?n:new TextEncoder,i=(r=t?.textDecoder)!==null&&r!==void 0?r:new TextDecoder,a=Ds(t);return{parse(s){try{let l=i.decode(s);return e.fromJsonString(l,a)}catch(l){throw Q.from(l,M.InvalidArgument)}},serialize(s){try{let l=s.toJsonString(a);return o.encode(l)}catch(l){throw Q.from(l,M.Internal)}}}}var Bw=/^application\/(connect\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;var cy="application/proto",fy="application/json",dy="application/connect+proto",my="application/connect+json";function py(e){let t=e?.match(Bw);if(!t)return;let n=!!t[1],r=!!t[3];return{stream:n,binary:r}}function bo(e,t,n){if(t&&new Headers(t).forEach((a,s)=>n.metadata.append(s,a)),typeof e!="object"||e==null||Array.isArray(e)||!("code"in e)||typeof e.code!="string")throw n;let r=ey(e.code);if(r===void 0)throw n;let o=e.message;if(o!=null&&typeof o!="string")throw n;let i=new Q(o??"",r,t);if("details"in e&&Array.isArray(e.details))for(let a of e.details){if(a===null||typeof a!="object"||Array.isArray(a)||typeof a.type!="string"||typeof a.value!="string"||"debug"in a&&typeof a.debug!="object")throw n;try{i.details.push({type:a.type,value:_t.dec(a.value),debug:a.debug})}catch{throw n}}return i}var bs=2;function kf(e){let t=new Q("invalid end stream",M.InvalidArgument),n;try{n=JSON.parse(typeof e=="string"?e:new TextDecoder().decode(e))}catch{throw t}if(typeof n!="object"||n==null||Array.isArray(n))throw t;let r=new Headers;if("metadata"in n){if(typeof n.metadata!="object"||n.metadata==null||Array.isArray(n.metadata))throw t;for(let[i,a]of Object.entries(n.metadata)){if(!Array.isArray(a)||a.some(s=>typeof s!="string"))throw t;for(let s of a)r.append(i,s)}}let o="error"in n?bo(n.error,r,t):void 0;return{metadata:r,error:o}}var zo="Content-Type",gy="Content-Length",zs="Content-Encoding";var Pf="Accept-Encoding";var yy="Connect-Timeout-Ms",Gs="Connect-Protocol-Version",hy="User-Agent";function wy(e){switch(e){case 400:return M.InvalidArgument;case 401:return M.Unauthenticated;case 403:return M.PermissionDenied;case 404:return M.Unimplemented;case 408:return M.DeadlineExceeded;case 409:return M.Aborted;case 412:return M.FailedPrecondition;case 413:return M.ResourceExhausted;case 415:return M.Internal;case 429:return M.Unavailable;case 431:return M.ResourceExhausted;case 502:return M.Unavailable;case 503:return M.Unavailable;case 504:return M.Unavailable;default:return M.Unknown}}function js(e){let t=new Headers,n=new Headers;return e.forEach((r,o)=>{o.toLowerCase().startsWith("trailer-")?n.set(o.substring(8),r):t.set(o,r)}),[t,n]}var $s="1";function _s(e,t,n,r,o){let i=new Headers(r??{});return n!==void 0&&i.set(yy,`${n}`),i.set(zo,e==J.Unary?t?cy:fy:t?dy:my),i.set(Gs,$s),o&&i.set(hy,"connect-es/1.3.0"),i}function Hs(e,t,n){let r=n.get("Content-Type"),o=py(r);if(t!==200){let i=new Q(`HTTP ${t}`,wy(t),n);if(e==J.Unary&&o&&!o.binary)return{isUnaryError:!0,unaryError:i};throw i}return{isUnaryError:!1}}var vy="application/";function Uw(e,t){return t?_t.enc(e).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,""):encodeURIComponent(new TextDecoder().decode(e))}function Rf(e,t,n){let r=`?connect=v${$s}`,o=e.header.get(zo);o?.indexOf(vy)===0&&(r+="&encoding="+encodeURIComponent(o.slice(vy.length)));let i=e.header.get(zs);i!==null&&i!=="identity"&&(r+="&compression="+encodeURIComponent(i),n=!0),n&&(r+="&base64=1"),r+="&message="+Uw(t,n);let a=e.url+r,s=new Headers(e.header);return[Gs,zo,gy,zs,Pf].forEach(l=>s.delete(l)),Object.assign(Object.assign({},e),{init:Object.assign(Object.assign({},e.init),{method:"GET"}),url:a,header:s})}function xf(e){let t=Ty(e.next,e.interceptors),[n,r,o]=Sy(e),i=Object.assign(Object.assign({},e.req),{message:Tf(e.req.method.I,e.req.message),signal:n});return t(i).then(a=>(o(),a),r)}function Ef(e){let t=Ty(e.next,e.interceptors),[n,r,o]=Sy(e),i=Object.assign(Object.assign({},e.req),{message:sy(e.req.method.I,e.req.message),signal:n}),a=!1;return n.addEventListener("abort",function(){var s,l;let c=e.req.message[Symbol.asyncIterator]();a||(s=c.throw)===null||s===void 0||s.call(c,this.reason).catch(()=>{}),(l=c.return)===null||l===void 0||l.call(c).catch(()=>{})}),t(i).then(s=>Object.assign(Object.assign({},s),{message:{[Symbol.asyncIterator](){let l=s.message[Symbol.asyncIterator]();return{next(){return l.next().then(c=>(c.done==!0&&(a=!0,o()),c),r)}}}}}),r)}function Sy(e){let{signal:t,cleanup:n}=ay(e.timeoutMs),r=iy(e.signal,t);return[r.signal,function(i){let a=Q.from(t.aborted?Sf(t):i);return r.abort(a),n(),Promise.reject(a)},function(){n(),r.abort()}]}function Ty(e,t){var n;return(n=t?.concat().reverse().reduce((r,o)=>o(r),e))!==null&&n!==void 0?n:e}function ky(){try{new Headers}catch{throw new Error("connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.")}}var Go=function(e){return this instanceof Go?(this.v=e,this):new Go(e)},qw=function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=n.apply(e,t||[]),o,i=[];return o={},s("next"),s("throw"),s("return",a),o[Symbol.asyncIterator]=function(){return this},o;function a(m){return function(S){return Promise.resolve(S).then(m,v)}}function s(m,S){r[m]&&(o[m]=function(k){return new Promise(function(O,p){i.push([m,k,O,p])>1||l(m,k)})},S&&(o[m]=S(o[m])))}function l(m,S){try{c(r[m](S))}catch(k){g(i[0][3],k)}}function c(m){m.value instanceof Go?Promise.resolve(m.value.v).then(d,v):g(i[0][2],m)}function d(m){l("next",m)}function v(m){l("throw",m)}function g(m,S){m(S),i.shift(),i.length&&l(i[0][0],i[0][1])}};function Jf(e){var t;ky();let n=(t=e.useBinaryFormat)!==null&&t!==void 0?t:!1;return{async unary(r,o,i,a,s,l,c){var d;let{serialize:v,parse:g}=Vs(o,n,e.jsonOptions,e.binaryOptions);return a=a===void 0?e.defaultTimeoutMs:a<=0?void 0:a,await xf({interceptors:e.interceptors,signal:i,timeoutMs:a,req:{stream:!1,service:r,method:o,url:As(e.baseUrl,r,o),init:{method:"POST",credentials:(d=e.credentials)!==null&&d!==void 0?d:"same-origin",redirect:"error",mode:"cors"},header:_s(o.kind,n,a,s,!1),contextValues:c??qs(),message:l},next:async m=>{var S;let k=e.useHttpGet===!0&&o.idempotency===xo.NoSideEffects,O=null;k?m=Rf(m,v(m.message),n):O=v(m.message);let f=await((S=e.fetch)!==null&&S!==void 0?S:globalThis.fetch)(m.url,Object.assign(Object.assign({},m.init),{headers:m.header,signal:m.signal,body:O})),{isUnaryError:w,unaryError:P}=Hs(o.kind,f.status,f.headers);if(w)throw bo(await f.json(),hf(...js(f.headers)),P);let[E,N]=js(f.headers);return{stream:!1,service:r,method:o,header:E,message:n?g(new Uint8Array(await f.arrayBuffer())):o.O.fromJson(await f.json(),Ds(e.jsonOptions)),trailer:N}}})},async stream(r,o,i,a,s,l,c){var d;let{serialize:v,parse:g}=Vs(o,n,e.jsonOptions,e.binaryOptions);function m(k,O,p){return qw(this,arguments,function*(){let w=wf(k).getReader(),P=!1;for(;;){let E=yield Go(w.read());if(E.done)break;let{flags:N,data:I}=E.value;if((N&bs)===bs){P=!0;let C=kf(I);if(C.error){let $=C.error;throw p.forEach((L,Ke)=>{$.metadata.append(Ke,L)}),$}C.metadata.forEach(($,L)=>O.set(L,$));continue}yield yield Go(g(I))}if(!P)throw"missing EndStreamResponse"})}async function S(k){if(o.kind!=J.ServerStreaming)throw"The fetch API does not support streaming request bodies";let O=await k[Symbol.asyncIterator]().next();if(O.done==!0)throw"missing request message";return vf(0,v(O.value))}return a=a===void 0?e.defaultTimeoutMs:a<=0?void 0:a,await Ef({interceptors:e.interceptors,timeoutMs:a,signal:i,req:{stream:!0,service:r,method:o,url:As(e.baseUrl,r,o),init:{method:"POST",credentials:(d=e.credentials)!==null&&d!==void 0?d:"same-origin",redirect:"error",mode:"cors"},header:_s(o.kind,n,a,s,!1),contextValues:c??qs(),message:l},next:async k=>{var O;let f=await((O=e.fetch)!==null&&O!==void 0?O:globalThis.fetch)(k.url,Object.assign(Object.assign({},k.init),{headers:k.header,signal:k.signal,body:await S(k.message)}));if(Hs(o.kind,f.status,f.headers),f.body===null)throw"missing response body";let w=new Headers;return Object.assign(Object.assign({},k),{header:f.headers,trailer:w,message:m(f.body,w,f.headers)})}})}}}var Aw="https://demo.lunabrain.com",jo=Jf({baseUrl:`${Aw}/api`||"error"}),EP=yn(Wg,jo),JP=yn(Kg,jo),Nf=yn(Qg,jo),NP=yn(Xg,jo),OP=yn(Zg,jo);var Zs=at(st(),1),_o=at(st(),1),Rt=at(st(),1);var Dw={data:""},Vw=e=>typeof window=="object"?((e?e.querySelector("#_goober"):window._goober)||Object.assign((e||document.head).appendChild(document.createElement("style")),{innerHTML:" ",id:"_goober"})).firstChild:e||Dw;var bw=/(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g,zw=/\/\*[^]*?\*\/|  +/g,Py=/\n+/g,Kt=(e,t)=>{let n="",r="",o="";for(let i in e){let a=e[i];i[0]=="@"?i[1]=="i"?n=i+" "+a+";":r+=i[1]=="f"?Kt(a,i):i+"{"+Kt(a,i[1]=="k"?"":t)+"}":typeof a=="object"?r+=Kt(a,t?t.replace(/([^,])+/g,s=>i.replace(/(^:.*)|([^,])+/g,l=>/&/.test(l)?l.replace(/&/g,s):s?s+" "+l:l)):i):a!=null&&(i=/^--/.test(i)?i:i.replace(/[A-Z]/g,"-$&").toLowerCase(),o+=Kt.p?Kt.p(i,a):i+":"+a+";")}return n+(t&&o?t+"{"+o+"}":o)+r},Pt={},Ry=e=>{if(typeof e=="object"){let t="";for(let n in e)t+=n+Ry(e[n]);return t}return e},Gw=(e,t,n,r,o)=>{let i=Ry(e),a=Pt[i]||(Pt[i]=(l=>{let c=0,d=11;for(;c<l.length;)d=101*d+l.charCodeAt(c++)>>>0;return"go"+d})(i));if(!Pt[a]){let l=i!==e?e:(c=>{let d,v,g=[{}];for(;d=bw.exec(c.replace(zw,""));)d[4]?g.shift():d[3]?(v=d[3].replace(Py," ").trim(),g.unshift(g[0][v]=g[0][v]||{})):g[0][d[1]]=d[2].replace(Py," ").trim();return g[0]})(e);Pt[a]=Kt(o?{["@keyframes "+a]:l}:l,n?"":"."+a)}let s=n&&Pt.g?Pt.g:null;return n&&(Pt.g=Pt[a]),((l,c,d,v)=>{v?c.data=c.data.replace(v,l):c.data.indexOf(l)===-1&&(c.data=d?l+c.data:c.data+l)})(Pt[a],t,r,s),a},jw=(e,t,n)=>e.reduce((r,o,i)=>{let a=t[i];if(a&&a.call){let s=a(n),l=s&&s.props&&s.props.className||/^go/.test(s)&&s;a=l?"."+l:s&&typeof s=="object"?s.props?"":Kt(s,""):s===!1?"":s}return r+o+(a??"")},"");function $o(e){let t=this||{},n=e.call?e(t.p):e;return Gw(n.unshift?n.raw?jw(n,[].slice.call(arguments,1),t.p):n.reduce((r,o)=>Object.assign(r,o&&o.call?o(t.p):o),{}):n,Vw(t.target),t.g,t.o,t.k)}var xy,Of,If,CP=$o.bind({g:1}),Pe=$o.bind({k:1});function Ey(e,t,n,r){Kt.p=t,xy=e,Of=n,If=r}function Ie(e,t){let n=this||{};return function(){let r=arguments;function o(i,a){let s=Object.assign({},i),l=s.className||o.className;n.p=Object.assign({theme:Of&&Of()},s),n.o=/ *go\d+/.test(l),s.className=$o.apply(n,r)+(l?" "+l:""),t&&(s.ref=a);let c=e;return e[0]&&(c=s.as||e,delete s.as),If&&c[0]&&If(s),xy(c,s)}return t?t(o):o}}var hn=at(st(),1);var Qt=at(st(),1),$w=e=>typeof e=="function",Xs=(e,t)=>$w(e)?e(t):e,_w=(()=>{let e=0;return()=>(++e).toString()})(),Ny=(()=>{let e;return()=>{if(e===void 0&&typeof window<"u"){let t=matchMedia("(prefers-reduced-motion: reduce)");e=!t||t.matches}return e}})(),Hw=20,Ws=new Map,Yw=1e3,Jy=e=>{if(Ws.has(e))return;let t=setTimeout(()=>{Ws.delete(e),wn({type:4,toastId:e})},Yw);Ws.set(e,t)},Ww=e=>{let t=Ws.get(e);t&&clearTimeout(t)},Cf=(e,t)=>{switch(t.type){case 0:return{...e,toasts:[t.toast,...e.toasts].slice(0,Hw)};case 1:return t.toast.id&&Ww(t.toast.id),{...e,toasts:e.toasts.map(i=>i.id===t.toast.id?{...i,...t.toast}:i)};case 2:let{toast:n}=t;return e.toasts.find(i=>i.id===n.id)?Cf(e,{type:1,toast:n}):Cf(e,{type:0,toast:n});case 3:let{toastId:r}=t;return r?Jy(r):e.toasts.forEach(i=>{Jy(i.id)}),{...e,toasts:e.toasts.map(i=>i.id===r||r===void 0?{...i,visible:!1}:i)};case 4:return t.toastId===void 0?{...e,toasts:[]}:{...e,toasts:e.toasts.filter(i=>i.id!==t.toastId)};case 5:return{...e,pausedAt:t.time};case 6:let o=t.time-(e.pausedAt||0);return{...e,pausedAt:void 0,toasts:e.toasts.map(i=>({...i,pauseDuration:i.pauseDuration+o}))}}},Ks=[],Qs={toasts:[],pausedAt:void 0},wn=e=>{Qs=Cf(Qs,e),Ks.forEach(t=>{t(Qs)})},Kw={blank:4e3,error:4e3,success:2e3,loading:1/0,custom:4e3},Qw=(e={})=>{let[t,n]=(0,Zs.useState)(Qs);(0,Zs.useEffect)(()=>(Ks.push(n),()=>{let o=Ks.indexOf(n);o>-1&&Ks.splice(o,1)}),[t]);let r=t.toasts.map(o=>{var i,a;return{...e,...e[o.type],...o,duration:o.duration||((i=e[o.type])==null?void 0:i.duration)||e?.duration||Kw[o.type],style:{...e.style,...(a=e[o.type])==null?void 0:a.style,...o.style}}});return{...t,toasts:r}},Xw=(e,t="blank",n)=>({createdAt:Date.now(),visible:!0,type:t,ariaProps:{role:"status","aria-live":"polite"},message:e,pauseDuration:0,...n,id:n?.id||_w()}),Ho=e=>(t,n)=>{let r=Xw(t,e,n);return wn({type:2,toast:r}),r.id},Ce=(e,t)=>Ho("blank")(e,t);Ce.error=Ho("error");Ce.success=Ho("success");Ce.loading=Ho("loading");Ce.custom=Ho("custom");Ce.dismiss=e=>{wn({type:3,toastId:e})};Ce.remove=e=>wn({type:4,toastId:e});Ce.promise=(e,t,n)=>{let r=Ce.loading(t.loading,{...n,...n?.loading});return e.then(o=>(Ce.success(Xs(t.success,o),{id:r,...n,...n?.success}),o)).catch(o=>{Ce.error(Xs(t.error,o),{id:r,...n,...n?.error})}),e};var Zw=(e,t)=>{wn({type:1,toast:{id:e,height:t}})},ev=()=>{wn({type:5,time:Date.now()})},tv=e=>{let{toasts:t,pausedAt:n}=Qw(e);(0,_o.useEffect)(()=>{if(n)return;let i=Date.now(),a=t.map(s=>{if(s.duration===1/0)return;let l=(s.duration||0)+s.pauseDuration-(i-s.createdAt);if(l<0){s.visible&&Ce.dismiss(s.id);return}return setTimeout(()=>Ce.dismiss(s.id),l)});return()=>{a.forEach(s=>s&&clearTimeout(s))}},[t,n]);let r=(0,_o.useCallback)(()=>{n&&wn({type:6,time:Date.now()})},[n]),o=(0,_o.useCallback)((i,a)=>{let{reverseOrder:s=!1,gutter:l=8,defaultPosition:c}=a||{},d=t.filter(m=>(m.position||c)===(i.position||c)&&m.height),v=d.findIndex(m=>m.id===i.id),g=d.filter((m,S)=>S<v&&m.visible).length;return d.filter(m=>m.visible).slice(...s?[g+1]:[0,g]).reduce((m,S)=>m+(S.height||0)+l,0)},[t]);return{toasts:t,handlers:{updateHeight:Zw,startPause:ev,endPause:r,calculateOffset:o}}},nv=Pe`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`,rv=Pe`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`,ov=Pe`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`,iv=Ie("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${e=>e.primary||"#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${nv} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${rv} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${e=>e.secondary||"#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${ov} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`,av=Pe`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`,sv=Ie("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${e=>e.secondary||"#e0e0e0"};
  border-right-color: ${e=>e.primary||"#616161"};
  animation: ${av} 1s linear infinite;
`,lv=Pe`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`,uv=Pe`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`,cv=Ie("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${e=>e.primary||"#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${lv} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${uv} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${e=>e.secondary||"#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`,fv=Ie("div")`
  position: absolute;
`,dv=Ie("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`,mv=Pe`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`,pv=Ie("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${mv} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`,gv=({toast:e})=>{let{icon:t,type:n,iconTheme:r}=e;return t!==void 0?typeof t=="string"?hn.createElement(pv,null,t):t:n==="blank"?null:hn.createElement(dv,null,hn.createElement(sv,{...r}),n!=="loading"&&hn.createElement(fv,null,n==="error"?hn.createElement(iv,{...r}):hn.createElement(cv,{...r})))},yv=e=>`
0% {transform: translate3d(0,${e*-200}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`,hv=e=>`
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${e*-150}%,-1px) scale(.6); opacity:0;}
`,wv="0%{opacity:0;} 100%{opacity:1;}",vv="0%{opacity:1;} 100%{opacity:0;}",Sv=Ie("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`,Tv=Ie("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`,kv=(e,t)=>{let n=e.includes("top")?1:-1,[r,o]=Ny()?[wv,vv]:[yv(n),hv(n)];return{animation:t?`${Pe(r)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards`:`${Pe(o)} 0.4s forwards cubic-bezier(.06,.71,.55,1)`}},Pv=Rt.memo(({toast:e,position:t,style:n,children:r})=>{let o=e.height?kv(e.position||t||"top-center",e.visible):{opacity:0},i=Rt.createElement(gv,{toast:e}),a=Rt.createElement(Tv,{...e.ariaProps},Xs(e.message,e));return Rt.createElement(Sv,{className:e.className,style:{...o,...n,...e.style}},typeof r=="function"?r({icon:i,message:a}):Rt.createElement(Rt.Fragment,null,i,a))});Ey(Qt.createElement);var Rv=({id:e,className:t,style:n,onHeightUpdate:r,children:o})=>{let i=Qt.useCallback(a=>{if(a){let s=()=>{let l=a.getBoundingClientRect().height;r(e,l)};s(),new MutationObserver(s).observe(a,{subtree:!0,childList:!0,characterData:!0})}},[e,r]);return Qt.createElement("div",{ref:i,className:t,style:n},o)},xv=(e,t)=>{let n=e.includes("top"),r=n?{top:0}:{bottom:0},o=e.includes("center")?{justifyContent:"center"}:e.includes("right")?{justifyContent:"flex-end"}:{};return{left:0,right:0,display:"flex",position:"absolute",transition:Ny()?void 0:"all 230ms cubic-bezier(.21,1.02,.73,1)",transform:`translateY(${t*(n?1:-1)}px)`,...r,...o}},Ev=$o`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`,Ys=16,Oy=({reverseOrder:e,position:t="top-center",toastOptions:n,gutter:r,children:o,containerStyle:i,containerClassName:a})=>{let{toasts:s,handlers:l}=tv(n);return Qt.createElement("div",{style:{position:"fixed",zIndex:9999,top:Ys,left:Ys,right:Ys,bottom:Ys,pointerEvents:"none",...i},className:a,onMouseEnter:l.startPause,onMouseLeave:l.endPause},s.map(c=>{let d=c.position||t,v=l.calculateOffset(c,{reverseOrder:e,gutter:r,defaultPosition:t}),g=xv(d,v);return Qt.createElement(Rv,{id:c.id,key:c.id,onHeightUpdate:l.updateHeight,className:c.visible?Ev:"",style:g},c.type==="custom"?Xs(c.message,c):o?o(c):Qt.createElement(Pv,{toast:c,position:d}))}))},Mf=Ce;var Me=at(Lf(),1),Lv=()=>{let[e,t]=(0,Xt.useState)([]),[n,r]=(0,Xt.useState)(""),[o,i]=(0,Xt.useState)([]);(0,Xt.useEffect)(()=>{(async()=>{let c=await Nf.login({});c.config&&t(c.config.domainWhitelist||[])})(),chrome&&chrome.tabs.query({},c=>{let d=new Set;c.forEach(v=>{let g=new URL(v.url||"");d.add(g.hostname)}),i([...d])})},[t]);let a=()=>{n&&!e.includes(n)&&(t([...e,n]),r(""))},s=c=>{t(d=>d.filter(v=>v!==c))},l=async()=>{try{await Nf.updateConfig({domainWhitelist:e}),Mf.success("Whitelist saved")}catch(c){console.error(c),Mf.error(c.message)}};return(0,Me.jsxs)("div",{children:[(0,Me.jsx)("h3",{children:"Whitelisted Domains"}),(0,Me.jsx)("input",{type:"text",placeholder:"Enter domain hostname",value:n}),(0,Me.jsx)("button",{className:"btn",onClick:a,children:"Add to Whitelist"}),(0,Me.jsx)("ul",{children:e.map(c=>(0,Me.jsxs)("li",{children:[c,(0,Me.jsx)("button",{className:"btn",onClick:()=>s(c),children:"Delete"})]},c))}),(0,Me.jsx)("button",{className:"btn",onClick:l,children:"Save Whitelist"})]})},By=document.createElement("div");document.body.appendChild(By);var Bv=Ly.default.createRoot(By);Bv.render((0,Me.jsxs)(Xt.default.StrictMode,{children:[(0,Me.jsx)(Lv,{}),(0,Me.jsx)(Oy,{})]}));})();
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.production.min.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2xpZW50LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwgIi4uLy4uL2V4dGVuc2lvbi9vcHRpb25zLnRzeCIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3ByaXZhdGUvYXNzZXJ0LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcHJpdmF0ZS9lbnVtLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vbWVzc2FnZS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3ByaXZhdGUvbWVzc2FnZS10eXBlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcHJpdmF0ZS9wcm90by1ydW50aW1lLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vZmllbGQuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9nb29nbGUvdmFyaW50LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcHJvdG8taW50NjQuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9iaW5hcnktZW5jb2RpbmcuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2ZpZWxkLXdyYXBwZXIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL3NjYWxhcnMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2JpbmFyeS1mb3JtYXQtY29tbW9uLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcHJpdmF0ZS9iaW5hcnktZm9ybWF0LXByb3RvMy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3Byb3RvLWJhc2U2NC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3ByaXZhdGUvanNvbi1mb3JtYXQtY29tbW9uLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcHJpdmF0ZS9qc29uLWZvcm1hdC1wcm90bzMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL3V0aWwtY29tbW9uLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcHJpdmF0ZS9maWVsZC1saXN0LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcHJpdmF0ZS9uYW1lcy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL3ByaXZhdGUvZmllbGQuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcm90bzMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcml2YXRlL2JpbmFyeS1mb3JtYXQtcHJvdG8yLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AYnVmYnVpbGQvcHJvdG9idWYvZGlzdC9lc20vcHJpdmF0ZS9qc29uLWZvcm1hdC1wcm90bzIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9wcm90bzIuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9zZXJ2aWNlLXR5cGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BidWZidWlsZC9wcm90b2J1Zi9kaXN0L2VzbS9nb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvcl9wYi5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGJ1ZmJ1aWxkL3Byb3RvYnVmL2Rpc3QvZXNtL2dvb2dsZS9wcm90b2J1Zi9lbXB0eV9wYi5qcyIsICIuLi8uLi9ycGMvdXNlci91c2VyX3BiLnRzIiwgIi4uLy4uL3JwYy9jb250ZW50L2NvbnRlbnRfcGIudHMiLCAiLi4vLi4vcnBjL3Byb3RvZmxvd19wYi50cyIsICIuLi8uLi9ycGMvYWlfcGIudHMiLCAiLi4vLi4vcnBjL3Byb3RvZmxvd19jb25uZWN0LnRzIiwgIi4uLy4uL3JwYy9jb250ZW50L2NvbnRlbnRfY29ubmVjdC50cyIsICIuLi8uLi9ycGMvdXNlci91c2VyX2Nvbm5lY3QudHMiLCAiLi4vLi4vcnBjL2NoYXQvY2hhdF9wYi50cyIsICIuLi8uLi9ycGMvY2hhdC9jaGF0X2Nvbm5lY3QudHMiLCAiLi4vLi4vcnBjL2V2ZW50L2V2ZW50X3BiLnRzIiwgIi4uLy4uL3JwYy9ldmVudC9ldmVudF9jb25uZWN0LnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL2NvZGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvdG9jb2wtY29ubmVjdC9jb2RlLXN0cmluZy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9jb25uZWN0LWVycm9yLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL2h0dHAtaGVhZGVycy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9hbnktY2xpZW50LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sL2VudmVsb3BlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sL2FzeW5jLWl0ZXJhYmxlLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb21pc2UtY2xpZW50LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sL3NpZ25hbHMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vY29udGV4dC12YWx1ZXMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvdG9jb2wvY3JlYXRlLW1ldGhvZC11cmwuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvdG9jb2wvbm9ybWFsaXplLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sL3NlcmlhbGl6YXRpb24uanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvdG9jb2wtY29ubmVjdC9jb250ZW50LXR5cGUuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvdG9jb2wtY29ubmVjdC9lcnJvci1qc29uLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sLWNvbm5lY3QvZW5kLXN0cmVhbS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L2hlYWRlcnMuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvdG9jb2wtY29ubmVjdC9odHRwLXN0YXR1cy5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L3RyYWlsZXItbXV4LmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sLWNvbm5lY3QvdmVyc2lvbi5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC1jb25uZWN0L3JlcXVlc3QtaGVhZGVyLmpzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9AY29ubmVjdHJwYy9jb25uZWN0L2Rpc3QvZXNtL3Byb3RvY29sLWNvbm5lY3QvdmFsaWRhdGUtcmVzcG9uc2UuanMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0Bjb25uZWN0cnBjL2Nvbm5lY3QvZGlzdC9lc20vcHJvdG9jb2wtY29ubmVjdC9nZXQtcmVxdWVzdC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC9kaXN0L2VzbS9wcm90b2NvbC9ydW4tY2FsbC5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC13ZWIvZGlzdC9lc20vYXNzZXJ0LWZldGNoLWFwaS5qcyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGNvbm5lY3RycGMvY29ubmVjdC13ZWIvZGlzdC9lc20vY29ubmVjdC10cmFuc3BvcnQuanMiLCAiLi4vLi4vc2l0ZS9zZXJ2aWNlLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1ob3QtdG9hc3Qvc3JjL2NvcmUvdHlwZXMudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvdC10b2FzdC9zcmMvY29yZS91dGlscy50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90LXRvYXN0L3NyYy9jb3JlL3N0b3JlLnRzIiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1ob3QtdG9hc3Qvc3JjL2NvcmUvdG9hc3QudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvdC10b2FzdC9zcmMvY29yZS91c2UtdG9hc3Rlci50cyIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90LXRvYXN0L3NyYy9jb21wb25lbnRzL3RvYXN0LWJhci50c3giLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvdC10b2FzdC9zcmMvY29tcG9uZW50cy90b2FzdC1pY29uLnRzeCIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90LXRvYXN0L3NyYy9jb21wb25lbnRzL2Vycm9yLnRzeCIsICIuLi8uLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtaG90LXRvYXN0L3NyYy9jb21wb25lbnRzL2xvYWRlci50c3giLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvdC10b2FzdC9zcmMvY29tcG9uZW50cy9jaGVja21hcmsudHN4IiwgIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1ob3QtdG9hc3Qvc3JjL2NvbXBvbmVudHMvdG9hc3Rlci50c3giLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWhvdC10b2FzdC9zcmMvaW5kZXgudHMiLCAiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dvb2Jlci9kaXN0L2dvb2Jlci5tb2Rlcm4uanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMFwiO1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwgIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7ZnVuY3Rpb24gZihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7MDxjOyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYoMDxnKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBoKGEpe3JldHVybiAwPT09YS5sZW5ndGg/bnVsbDphWzBdfWZ1bmN0aW9uIGsoYSl7aWYoMD09PWEubGVuZ3RoKXJldHVybiBudWxsO3ZhciBiPWFbMF0sYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoLHc9ZT4+PjE7ZDx3Oyl7dmFyIG09MiooZCsxKS0xLEM9YVttXSxuPW0rMSx4PWFbbl07aWYoMD5nKEMsYykpbjxlJiYwPmcoeCxDKT8oYVtkXT14LGFbbl09YyxkPW4pOihhW2RdPUMsYVttXT1jLGQ9bSk7ZWxzZSBpZihuPGUmJjA+Zyh4LGMpKWFbZF09eCxhW25dPWMsZD1uO2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9XG5mdW5jdGlvbiBnKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfWlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX12YXIgcj1bXSx0PVtdLHU9MSx2PW51bGwseT0zLHo9ITEsQT0hMSxCPSExLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpudWxsLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6bnVsbCxGPVwidW5kZWZpbmVkXCIhPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpudWxsO1xuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyYmbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcuYmluZChuYXZpZ2F0b3Iuc2NoZWR1bGluZyk7ZnVuY3Rpb24gRyhhKXtmb3IodmFyIGI9aCh0KTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKWsodCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlrKHQpLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsZihyLGIpO2Vsc2UgYnJlYWs7Yj1oKHQpfX1mdW5jdGlvbiBIKGEpe0I9ITE7RyhhKTtpZighQSlpZihudWxsIT09aChyKSlBPSEwLEkoSik7ZWxzZXt2YXIgYj1oKHQpO251bGwhPT1iJiZLKEgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gSihhLGIpe0E9ITE7QiYmKEI9ITEsRShMKSxMPS0xKTt6PSEwO3ZhciBjPXk7dHJ5e0coYik7Zm9yKHY9aChyKTtudWxsIT09diYmKCEodi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIU0oKSk7KXt2YXIgZD12LmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2LmNhbGxiYWNrPW51bGw7eT12LnByaW9yaXR5TGV2ZWw7dmFyIGU9ZCh2LmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/di5jYWxsYmFjaz1lOnY9PT1oKHIpJiZrKHIpO0coYil9ZWxzZSBrKHIpO3Y9aChyKX1pZihudWxsIT09dil2YXIgdz0hMDtlbHNle3ZhciBtPWgodCk7bnVsbCE9PW0mJksoSCxtLnN0YXJ0VGltZS1iKTt3PSExfXJldHVybiB3fWZpbmFsbHl7dj1udWxsLHk9Yyx6PSExfX12YXIgTj0hMSxPPW51bGwsTD0tMSxQPTUsUT0tMTtcbmZ1bmN0aW9uIE0oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKS1RPFA/ITE6ITB9ZnVuY3Rpb24gUigpe2lmKG51bGwhPT1PKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1E9YTt2YXIgYj0hMDt0cnl7Yj1PKCEwLGEpfWZpbmFsbHl7Yj9TKCk6KE49ITEsTz1udWxsKX19ZWxzZSBOPSExfXZhciBTO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBGKVM9ZnVuY3Rpb24oKXtGKFIpfTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9UjtTPWZ1bmN0aW9uKCl7VS5wb3N0TWVzc2FnZShudWxsKX19ZWxzZSBTPWZ1bmN0aW9uKCl7RChSLDApfTtmdW5jdGlvbiBJKGEpe089YTtOfHwoTj0hMCxTKCkpfWZ1bmN0aW9uIEsoYSxiKXtMPUQoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtBfHx6fHwoQT0hMCxJKEopKX07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpQPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gaChyKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaCh5KXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj15fXZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7eT1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz15O3k9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e3k9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDp1KyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxmKHQsYSksbnVsbD09PWgocikmJmE9PT1oKHQpJiYoQj8oRShMKSxMPS0xKTpCPSEwLEsoSCxjLWQpKSk6KGEuc29ydEluZGV4PWUsZihyLGEpLEF8fHp8fChBPSEwLEkoSikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPU07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9eTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7eT1jfX19O1xuIiwgIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksY2E9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiBwKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifXZhciBkYT1uZXcgU2V0LGVhPXt9O2Z1bmN0aW9uIGZhKGEsYil7aGEoYSxiKTtoYShhK1wiQ2FwdHVyZVwiLGIpfVxuZnVuY3Rpb24gaGEoYSxiKXtlYVthXT1iO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZGEuYWRkKGJbYV0pfVxudmFyIGlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSxqYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LGthPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxsYT1cbnt9LG1hPXt9O2Z1bmN0aW9uIG9hKGEpe2lmKGphLmNhbGwobWEsYSkpcmV0dXJuITA7aWYoamEuY2FsbChsYSxhKSlyZXR1cm4hMTtpZihrYS50ZXN0KGEpKXJldHVybiBtYVthXT0hMDtsYVthXT0hMDtyZXR1cm4hMX1mdW5jdGlvbiBwYShhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIHFhKGEsYixjLGQpe2lmKG51bGw9PT1ifHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIGJ8fHBhKGEsYixjLGQpKXJldHVybiEwO2lmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpc3dpdGNoKGMudHlwZSl7Y2FzZSAzOnJldHVybiFiO2Nhc2UgNDpyZXR1cm4hMT09PWI7Y2FzZSA1OnJldHVybiBpc05hTihiKTtjYXNlIDY6cmV0dXJuIGlzTmFOKGIpfHwxPmJ9cmV0dXJuITF9ZnVuY3Rpb24gdihhLGIsYyxkLGUsZixnKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zjt0aGlzLnJlbW92ZUVtcHR5U3RyaW5nPWd9dmFyIHo9e307XG5cImNoaWxkcmVuIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGRlZmF1bHRWYWx1ZSBkZWZhdWx0Q2hlY2tlZCBpbm5lckhUTUwgc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHN1cHByZXNzSHlkcmF0aW9uV2FybmluZyBzdHlsZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwwLCExLGEsbnVsbCwhMSwhMSl9KTtbW1wiYWNjZXB0Q2hhcnNldFwiLFwiYWNjZXB0LWNoYXJzZXRcIl0sW1wiY2xhc3NOYW1lXCIsXCJjbGFzc1wiXSxbXCJodG1sRm9yXCIsXCJmb3JcIl0sW1wiaHR0cEVxdWl2XCIsXCJodHRwLWVxdWl2XCJdXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWFbMF07eltiXT1uZXcgdihiLDEsITEsYVsxXSxudWxsLCExLCExKX0pO1tcImNvbnRlbnRFZGl0YWJsZVwiLFwiZHJhZ2dhYmxlXCIsXCJzcGVsbENoZWNrXCIsXCJ2YWx1ZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiYXV0b1JldmVyc2VcIixcImV4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWRcIixcImZvY3VzYWJsZVwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwyLCExLGEsbnVsbCwhMSwhMSl9KTtcImFsbG93RnVsbFNjcmVlbiBhc3luYyBhdXRvRm9jdXMgYXV0b1BsYXkgY29udHJvbHMgZGVmYXVsdCBkZWZlciBkaXNhYmxlZCBkaXNhYmxlUGljdHVyZUluUGljdHVyZSBkaXNhYmxlUmVtb3RlUGxheWJhY2sgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO3ZhciByYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIHNhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLFxuc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxzYSk7eltiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuei54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwLCExKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwLCEwKX0pO1xuZnVuY3Rpb24gdGEoYSxiLGMsZCl7dmFyIGU9ei5oYXNPd25Qcm9wZXJ0eShiKT96W2JdOm51bGw7aWYobnVsbCE9PWU/MCE9PWUudHlwZTpkfHwhKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0pcWEoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP29hKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKX1cbnZhciB1YT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCx2YT1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSx3YT1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHlhPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSx6YT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIiksQWE9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLEJhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKSxDYT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSxEYT1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksRWE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpLEZhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpLEdhPVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLEhhPVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtcbnZhciBJYT1TeW1ib2wuZm9yKFwicmVhY3Qub2Zmc2NyZWVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5jYWNoZVwiKTtTeW1ib2wuZm9yKFwicmVhY3QudHJhY2luZ19tYXJrZXJcIik7dmFyIEphPVN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBLYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9SmEmJmFbSmFdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIEE9T2JqZWN0LmFzc2lnbixMYTtmdW5jdGlvbiBNYShhKXtpZih2b2lkIDA9PT1MYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtMYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTGErYX12YXIgTmE9ITE7XG5mdW5jdGlvbiBPYShhLGIpe2lmKCFhfHxOYSlyZXR1cm5cIlwiO05hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChsKXt2YXIgZD1sfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2gobCl7ZD1sfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2gobCl7ZD1sfWEoKX19Y2F0Y2gobCl7aWYobCYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBsLnN0YWNrKXtmb3IodmFyIGU9bC5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXt2YXIgaz1cIlxcblwiK2VbZ10ucmVwbGFjZShcIiBhdCBuZXcgXCIsXCIgYXQgXCIpO2EuZGlzcGxheU5hbWUmJmsuaW5jbHVkZXMoXCI8YW5vbnltb3VzPlwiKSYmKGs9ay5yZXBsYWNlKFwiPGFub255bW91cz5cIixhLmRpc3BsYXlOYW1lKSk7cmV0dXJuIGt9d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e05hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TWEoYSk6XCJcIn1cbmZ1bmN0aW9uIFBhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBNYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE1hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBNYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE1hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1PYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1PYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMTpyZXR1cm4gYT1PYShhLnR5cGUsITApLGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFFhKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2Ugd2E6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIEFhOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIHphOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgRWE6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgRmE6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQ2E6cmV0dXJuKGEuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgQmE6cmV0dXJuKGEuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgRGE6dmFyIGI9YS5yZW5kZXI7YT1hLmRpc3BsYXlOYW1lO2F8fChhPWIuZGlzcGxheU5hbWV8fFxuYi5uYW1lfHxcIlwiLGE9XCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO3JldHVybiBhO2Nhc2UgR2E6cmV0dXJuIGI9YS5kaXNwbGF5TmFtZXx8bnVsbCxudWxsIT09Yj9iOlFhKGEudHlwZSl8fFwiTWVtb1wiO2Nhc2UgSGE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFFhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSYShhKXt2YXIgYj1hLnR5cGU7c3dpdGNoKGEudGFnKXtjYXNlIDI0OnJldHVyblwiQ2FjaGVcIjtjYXNlIDk6cmV0dXJuKGIuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Db25zdW1lclwiO2Nhc2UgMTA6cmV0dXJuKGIuX2NvbnRleHQuZGlzcGxheU5hbWV8fFwiQ29udGV4dFwiKStcIi5Qcm92aWRlclwiO2Nhc2UgMTg6cmV0dXJuXCJEZWh5ZHJhdGVkRnJhZ21lbnRcIjtjYXNlIDExOnJldHVybiBhPWIucmVuZGVyLGE9YS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIlwiLGIuZGlzcGxheU5hbWV8fChcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSA3OnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIDU6cmV0dXJuIGI7Y2FzZSA0OnJldHVyblwiUG9ydGFsXCI7Y2FzZSAzOnJldHVyblwiUm9vdFwiO2Nhc2UgNjpyZXR1cm5cIlRleHRcIjtjYXNlIDE2OnJldHVybiBRYShiKTtjYXNlIDg6cmV0dXJuIGI9PT16YT9cIlN0cmljdE1vZGVcIjpcIk1vZGVcIjtjYXNlIDIyOnJldHVyblwiT2Zmc2NyZWVuXCI7XG5jYXNlIDEyOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIDIxOnJldHVyblwiU2NvcGVcIjtjYXNlIDEzOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIDE5OnJldHVyblwiU3VzcGVuc2VMaXN0XCI7Y2FzZSAyNTpyZXR1cm5cIlRyYWNpbmdNYXJrZXJcIjtjYXNlIDE6Y2FzZSAwOmNhc2UgMTc6Y2FzZSAyOmNhc2UgMTQ6Y2FzZSAxNTppZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYilyZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBTYShhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7Y2FzZSBcIm9iamVjdFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIEEoe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gYWIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZ0YShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYmIoYSxiKXthYihhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2NiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmNiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGNiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfXZhciBlYj1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IocCg5MSkpO3JldHVybiBBKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHAoOTIpKTtpZihlYihjKSl7aWYoMTxjLmxlbmd0aCl0aHJvdyBFcnJvcihwKDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX1mdW5jdGlvbiBrYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fVxuZnVuY3Rpb24gbGIoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP2tiKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIG1iLG5iPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIhPT1hLm5hbWVzcGFjZVVSSXx8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle21iPW1ifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO21iLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPW1iLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIG9iKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9XG52YXIgcGI9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGFzcGVjdFJhdGlvOiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCxcbnpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0scWI9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKHBiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3FiLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7cGJbYl09cGJbYV19KX0pO2Z1bmN0aW9uIHJiKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxwYi5oYXNPd25Qcm9wZXJ0eShhKSYmcGJbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gc2IoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9cmIoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgdGI9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIHViKGEsYil7aWYoYil7aWYodGJbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDEzNyxhKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcihwKDYwKSk7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MfHwhKFwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcihwKDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcihwKDYyKSk7fX1cbmZ1bmN0aW9uIHZiKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgd2I9bnVsbDtmdW5jdGlvbiB4YihhKXthPWEudGFyZ2V0fHxhLnNyY0VsZW1lbnR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9dmFyIHliPW51bGwsemI9bnVsbCxBYj1udWxsO1xuZnVuY3Rpb24gQmIoYSl7aWYoYT1DYihhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHliKXRocm93IEVycm9yKHAoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9RGIoYikseWIoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRWIoYSl7emI/QWI/QWIucHVzaChhKTpBYj1bYV06emI9YX1mdW5jdGlvbiBGYigpe2lmKHpiKXt2YXIgYT16YixiPUFiO0FiPXpiPW51bGw7QmIoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUJiKGJbYV0pfX1mdW5jdGlvbiBHYihhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEhiKCl7fXZhciBJYj0hMTtmdW5jdGlvbiBKYihhLGIsYyl7aWYoSWIpcmV0dXJuIGEoYixjKTtJYj0hMDt0cnl7cmV0dXJuIEdiKGEsYixjKX1maW5hbGx5e2lmKEliPSExLG51bGwhPT16Ynx8bnVsbCE9PUFiKUhiKCksRmIoKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHAoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgTGI9ITE7aWYoaWEpdHJ5e3ZhciBNYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoTWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0xiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYil9Y2F0Y2goYSl7TGI9ITF9ZnVuY3Rpb24gTmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIE9iPSExLFBiPW51bGwsUWI9ITEsUmI9bnVsbCxTYj17b25FcnJvcjpmdW5jdGlvbihhKXtPYj0hMDtQYj1hfX07ZnVuY3Rpb24gVGIoYSxiLGMsZCxlLGYsZyxoLGspe09iPSExO1BiPW51bGw7TmIuYXBwbHkoU2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFViKGEsYixjLGQsZSxmLGcsaCxrKXtUYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoT2Ipe2lmKE9iKXt2YXIgbD1QYjtPYj0hMTtQYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IocCgxOTgpKTtRYnx8KFFiPSEwLFJiPWwpfX1mdW5jdGlvbiBWYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmNDA5OCkmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIFdiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gWGIoYSl7aWYoVmIoYSkhPT1hKXRocm93IEVycm9yKHAoMTg4KSk7fVxuZnVuY3Rpb24gWWIoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9VmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gWGIoZSksYTtpZihmPT09ZClyZXR1cm4gWGIoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcihwKDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHAoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IocCgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBaYihhKXthPVliKGEpO3JldHVybiBudWxsIT09YT8kYihhKTpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhO2ZvcihhPWEuY2hpbGQ7bnVsbCE9PWE7KXt2YXIgYj0kYihhKTtpZihudWxsIT09YilyZXR1cm4gYjthPWEuc2libGluZ31yZXR1cm4gbnVsbH1cbnZhciBhYz1jYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLGJjPWNhLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLGNjPWNhLnVuc3RhYmxlX3Nob3VsZFlpZWxkLGRjPWNhLnVuc3RhYmxlX3JlcXVlc3RQYWludCxCPWNhLnVuc3RhYmxlX25vdyxlYz1jYS51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxmYz1jYS51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxnYz1jYS51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxoYz1jYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxpYz1jYS51bnN0YWJsZV9Mb3dQcmlvcml0eSxqYz1jYS51bnN0YWJsZV9JZGxlUHJpb3JpdHksa2M9bnVsbCxsYz1udWxsO2Z1bmN0aW9uIG1jKGEpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclJvb3QpdHJ5e2xjLm9uQ29tbWl0RmliZXJSb290KGtjLGEsdm9pZCAwLDEyOD09PShhLmN1cnJlbnQuZmxhZ3MmMTI4KSl9Y2F0Y2goYil7fX1cbnZhciBvYz1NYXRoLmNsejMyP01hdGguY2x6MzI6bmMscGM9TWF0aC5sb2cscWM9TWF0aC5MTjI7ZnVuY3Rpb24gbmMoYSl7YT4+Pj0wO3JldHVybiAwPT09YT8zMjozMS0ocGMoYSkvcWN8MCl8MH12YXIgcmM9NjQsc2M9NDE5NDMwNDtcbmZ1bmN0aW9uIHRjKGEpe3N3aXRjaChhJi1hKXtjYXNlIDE6cmV0dXJuIDE7Y2FzZSAyOnJldHVybiAyO2Nhc2UgNDpyZXR1cm4gNDtjYXNlIDg6cmV0dXJuIDg7Y2FzZSAxNjpyZXR1cm4gMTY7Y2FzZSAzMjpyZXR1cm4gMzI7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYSY0MTk0MjQwO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuIGEmMTMwMDIzNDI0O2Nhc2UgMTM0MjE3NzI4OnJldHVybiAxMzQyMTc3Mjg7Y2FzZSAyNjg0MzU0NTY6cmV0dXJuIDI2ODQzNTQ1NjtjYXNlIDUzNjg3MDkxMjpyZXR1cm4gNTM2ODcwOTEyO2Nhc2UgMTA3Mzc0MTgyNDpyZXR1cm4gMTA3Mzc0MTgyNDtcbmRlZmF1bHQ6cmV0dXJuIGF9fWZ1bmN0aW9uIHVjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXM7aWYoMD09PWMpcmV0dXJuIDA7dmFyIGQ9MCxlPWEuc3VzcGVuZGVkTGFuZXMsZj1hLnBpbmdlZExhbmVzLGc9YyYyNjg0MzU0NTU7aWYoMCE9PWcpe3ZhciBoPWcmfmU7MCE9PWg/ZD10YyhoKTooZiY9ZywwIT09ZiYmKGQ9dGMoZikpKX1lbHNlIGc9YyZ+ZSwwIT09Zz9kPXRjKGcpOjAhPT1mJiYoZD10YyhmKSk7aWYoMD09PWQpcmV0dXJuIDA7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZSkmJihlPWQmLWQsZj1iJi1iLGU+PWZ8fDE2PT09ZSYmMCE9PShmJjQxOTQyNDApKSlyZXR1cm4gYjswIT09KGQmNCkmJihkfD1jJjE2KTtiPWEuZW50YW5nbGVkTGFuZXM7aWYoMCE9PWIpZm9yKGE9YS5lbnRhbmdsZW1lbnRzLGImPWQ7MDxiOyljPTMxLW9jKGIpLGU9MTw8YyxkfD1hW2NdLGImPX5lO3JldHVybiBkfVxuZnVuY3Rpb24gdmMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDQ6cmV0dXJuIGIrMjUwO2Nhc2UgODpjYXNlIDE2OmNhc2UgMzI6Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpyZXR1cm4gYis1RTM7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4tMTtjYXNlIDEzNDIxNzcyODpjYXNlIDI2ODQzNTQ1NjpjYXNlIDUzNjg3MDkxMjpjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuLTE7ZGVmYXVsdDpyZXR1cm4tMX19XG5mdW5jdGlvbiB3YyhhLGIpe2Zvcih2YXIgYz1hLnN1c3BlbmRlZExhbmVzLGQ9YS5waW5nZWRMYW5lcyxlPWEuZXhwaXJhdGlvblRpbWVzLGY9YS5wZW5kaW5nTGFuZXM7MDxmOyl7dmFyIGc9MzEtb2MoZiksaD0xPDxnLGs9ZVtnXTtpZigtMT09PWspe2lmKDA9PT0oaCZjKXx8MCE9PShoJmQpKWVbZ109dmMoaCxiKX1lbHNlIGs8PWImJihhLmV4cGlyZWRMYW5lc3w9aCk7ZiY9fmh9fWZ1bmN0aW9uIHhjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiB5Yygpe3ZhciBhPXJjO3JjPDw9MTswPT09KHJjJjQxOTQyNDApJiYocmM9NjQpO3JldHVybiBhfWZ1bmN0aW9uIHpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gQWMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iOzUzNjg3MDkxMiE9PWImJihhLnN1c3BlbmRlZExhbmVzPTAsYS5waW5nZWRMYW5lcz0wKTthPWEuZXZlbnRUaW1lcztiPTMxLW9jKGIpO2FbYl09Y31mdW5jdGlvbiBCYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzJn5iO2EucGVuZGluZ0xhbmVzPWI7YS5zdXNwZW5kZWRMYW5lcz0wO2EucGluZ2VkTGFuZXM9MDthLmV4cGlyZWRMYW5lcyY9YjthLm11dGFibGVSZWFkTGFuZXMmPWI7YS5lbnRhbmdsZWRMYW5lcyY9YjtiPWEuZW50YW5nbGVtZW50czt2YXIgZD1hLmV2ZW50VGltZXM7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxjOyl7dmFyIGU9MzEtb2MoYyksZj0xPDxlO2JbZV09MDtkW2VdPS0xO2FbZV09LTE7YyY9fmZ9fVxuZnVuY3Rpb24gQ2MoYSxiKXt2YXIgYz1hLmVudGFuZ2xlZExhbmVzfD1iO2ZvcihhPWEuZW50YW5nbGVtZW50cztjOyl7dmFyIGQ9MzEtb2MoYyksZT0xPDxkO2UmYnxhW2RdJmImJihhW2RdfD1iKTtjJj1+ZX19dmFyIEM9MDtmdW5jdGlvbiBEYyhhKXthJj0tYTtyZXR1cm4gMTxhPzQ8YT8wIT09KGEmMjY4NDM1NDU1KT8xNjo1MzY4NzA5MTI6NDoxfXZhciBFYyxGYyxHYyxIYyxJYyxKYz0hMSxLYz1bXSxMYz1udWxsLE1jPW51bGwsTmM9bnVsbCxPYz1uZXcgTWFwLFBjPW5ldyBNYXAsUWM9W10sUmM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjb3B5IGN1dCBwYXN0ZSBjbGljayBjaGFuZ2UgY29udGV4dG1lbnUgcmVzZXQgc3VibWl0XCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gU2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpMYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6TWM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6TmM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOk9jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOlBjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gVGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT17YmxvY2tlZE9uOmIsZG9tRXZlbnROYW1lOmMsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmYsdGFyZ2V0Q29udGFpbmVyczpbZV19LG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmRmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gVWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4gTGM9VGMoTGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIE1jPVRjKE1jLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBOYz1UYyhOYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO09jLnNldChmLFRjKE9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxQYy5zZXQoZixUYyhQYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiBWYyhhKXt2YXIgYj1XYyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVZiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPVdiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO0ljKGEucHJpb3JpdHksZnVuY3Rpb24oKXtHYyhjKX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiBYYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9WWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbD09PWMpe2M9YS5uYXRpdmVFdmVudDt2YXIgZD1uZXcgYy5jb25zdHJ1Y3RvcihjLnR5cGUsYyk7d2I9ZDtjLnRhcmdldC5kaXNwYXRjaEV2ZW50KGQpO3diPW51bGx9ZWxzZSByZXR1cm4gYj1DYihjKSxudWxsIT09YiYmRmMoYiksYS5ibG9ja2VkT249YywhMTtiLnNoaWZ0KCl9cmV0dXJuITB9ZnVuY3Rpb24gWmMoYSxiLGMpe1hjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiAkYygpe0pjPSExO251bGwhPT1MYyYmWGMoTGMpJiYoTGM9bnVsbCk7bnVsbCE9PU1jJiZYYyhNYykmJihNYz1udWxsKTtudWxsIT09TmMmJlhjKE5jKSYmKE5jPW51bGwpO09jLmZvckVhY2goWmMpO1BjLmZvckVhY2goWmMpfVxuZnVuY3Rpb24gYWQoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLEpjfHwoSmM9ITAsY2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhjYS51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSwkYykpKX1cbmZ1bmN0aW9uIGJkKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIGFkKGIsYSl9aWYoMDxLYy5sZW5ndGgpe2FkKEtjWzBdLGEpO2Zvcih2YXIgYz0xO2M8S2MubGVuZ3RoO2MrKyl7dmFyIGQ9S2NbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1MYyYmYWQoTGMsYSk7bnVsbCE9PU1jJiZhZChNYyxhKTtudWxsIT09TmMmJmFkKE5jLGEpO09jLmZvckVhY2goYik7UGMuZm9yRWFjaChiKTtmb3IoYz0wO2M8UWMubGVuZ3RoO2MrKylkPVFjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxRYy5sZW5ndGgmJihjPVFjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KVZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmUWMuc2hpZnQoKX12YXIgY2Q9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsZGQ9ITA7XG5mdW5jdGlvbiBlZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9MSxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fWZ1bmN0aW9uIGdkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz00LGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19XG5mdW5jdGlvbiBmZChhLGIsYyxkKXtpZihkZCl7dmFyIGU9WWMoYSxiLGMsZCk7aWYobnVsbD09PWUpaGQoYSxiLGQsaWQsYyksU2MoYSxkKTtlbHNlIGlmKFVjKGUsYSxiLGMsZCkpZC5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKFNjKGEsZCksYiY0JiYtMTxSYy5pbmRleE9mKGEpKXtmb3IoO251bGwhPT1lOyl7dmFyIGY9Q2IoZSk7bnVsbCE9PWYmJkVjKGYpO2Y9WWMoYSxiLGMsZCk7bnVsbD09PWYmJmhkKGEsYixkLGlkLGMpO2lmKGY9PT1lKWJyZWFrO2U9Zn1udWxsIT09ZSYmZC5zdG9wUHJvcGFnYXRpb24oKX1lbHNlIGhkKGEsYixkLG51bGwsYyl9fXZhciBpZD1udWxsO1xuZnVuY3Rpb24gWWMoYSxiLGMsZCl7aWQ9bnVsbDthPXhiKGQpO2E9V2MoYSk7aWYobnVsbCE9PWEpaWYoYj1WYihhKSxudWxsPT09YilhPW51bGw7ZWxzZSBpZihjPWIudGFnLDEzPT09Yyl7YT1XYihiKTtpZihudWxsIT09YSlyZXR1cm4gYTthPW51bGx9ZWxzZSBpZigzPT09Yyl7aWYoYi5zdGF0ZU5vZGUuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZClyZXR1cm4gMz09PWIudGFnP2Iuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDthPW51bGx9ZWxzZSBiIT09YSYmKGE9bnVsbCk7aWQ9YTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGpkKGEpe3N3aXRjaChhKXtjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsaWNrXCI6Y2FzZSBcImNsb3NlXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjpjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwia2V5dXBcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwicGFzdGVcIjpjYXNlIFwicGF1c2VcIjpjYXNlIFwicGxheVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOmNhc2UgXCJyYXRlY2hhbmdlXCI6Y2FzZSBcInJlc2V0XCI6Y2FzZSBcInJlc2l6ZVwiOmNhc2UgXCJzZWVrZWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjpjYXNlIFwidm9sdW1lY2hhbmdlXCI6Y2FzZSBcImNoYW5nZVwiOmNhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjpjYXNlIFwidGV4dElucHV0XCI6Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjpjYXNlIFwiYmVmb3JlaW5wdXRcIjpjYXNlIFwiYmx1clwiOmNhc2UgXCJmdWxsc2NyZWVuY2hhbmdlXCI6Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImhhc2hjaGFuZ2VcIjpjYXNlIFwicG9wc3RhdGVcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInNlbGVjdHN0YXJ0XCI6cmV0dXJuIDE7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwic2Nyb2xsXCI6Y2FzZSBcInRvZ2dsZVwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwid2hlZWxcIjpjYXNlIFwibW91c2VlbnRlclwiOmNhc2UgXCJtb3VzZWxlYXZlXCI6Y2FzZSBcInBvaW50ZXJlbnRlclwiOmNhc2UgXCJwb2ludGVybGVhdmVcIjpyZXR1cm4gNDtcbmNhc2UgXCJtZXNzYWdlXCI6c3dpdGNoKGVjKCkpe2Nhc2UgZmM6cmV0dXJuIDE7Y2FzZSBnYzpyZXR1cm4gNDtjYXNlIGhjOmNhc2UgaWM6cmV0dXJuIDE2O2Nhc2UgamM6cmV0dXJuIDUzNjg3MDkxMjtkZWZhdWx0OnJldHVybiAxNn1kZWZhdWx0OnJldHVybiAxNn19dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO2Z1bmN0aW9uIG5kKCl7aWYobWQpcmV0dXJuIG1kO3ZhciBhLGI9bGQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gbWQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1cbmZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9QShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9QSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPUEoe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPUEoe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPUEoe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1BKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9QSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1BKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9QSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1BKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1BKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9QSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9QSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9aWEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9aWEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoaWEpe3ZhciB4ZTtpZihpYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO0piKHJlLGIpfX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlO1xuZnVuY3Rpb24gSWUoYSxiKXtpZihIZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07aWYoIWphLmNhbGwoYixlKXx8IUhlKGFbZV0sYltlXSkpcmV0dXJuITF9cmV0dXJuITB9ZnVuY3Rpb24gSmUoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfVxuZnVuY3Rpb24gS2UoYSxiKXt2YXIgYz1KZShhKTthPTA7Zm9yKHZhciBkO2M7KXtpZigzPT09Yy5ub2RlVHlwZSl7ZD1hK2MudGV4dENvbnRlbnQubGVuZ3RoO2lmKGE8PWImJmQ+PWIpcmV0dXJue25vZGU6YyxvZmZzZXQ6Yi1hfTthPWR9YTp7Zm9yKDtjOyl7aWYoYy5uZXh0U2libGluZyl7Yz1jLm5leHRTaWJsaW5nO2JyZWFrIGF9Yz1jLnBhcmVudE5vZGV9Yz12b2lkIDB9Yz1KZShjKX19ZnVuY3Rpb24gTGUoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT9MZShhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9XG5mdW5jdGlvbiBNZSgpe2Zvcih2YXIgYT13aW5kb3csYj1YYSgpO2IgaW5zdGFuY2VvZiBhLkhUTUxJRnJhbWVFbGVtZW50Oyl7dHJ5e3ZhciBjPVwic3RyaW5nXCI9PT10eXBlb2YgYi5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWZ9Y2F0Y2goZCl7Yz0hMX1pZihjKWE9Yi5jb250ZW50V2luZG93O2Vsc2UgYnJlYWs7Yj1YYShhLmRvY3VtZW50KX1yZXR1cm4gYn1mdW5jdGlvbiBOZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfVxuZnVuY3Rpb24gT2UoYSl7dmFyIGI9TWUoKSxjPWEuZm9jdXNlZEVsZW0sZD1hLnNlbGVjdGlvblJhbmdlO2lmKGIhPT1jJiZjJiZjLm93bmVyRG9jdW1lbnQmJkxlKGMub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsYykpe2lmKG51bGwhPT1kJiZOZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKGE9KGI9Yy5vd25lckRvY3VtZW50fHxkb2N1bWVudCkmJmIuZGVmYXVsdFZpZXd8fHdpbmRvdyxhLmdldFNlbGVjdGlvbil7YT1hLmdldFNlbGVjdGlvbigpO3ZhciBlPWMudGV4dENvbnRlbnQubGVuZ3RoLGY9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2Y6TWF0aC5taW4oZC5lbmQsZSk7IWEuZXh0ZW5kJiZmPmQmJihlPWQsZD1mLGY9ZSk7ZT1LZShjLGYpO3ZhciBnPUtlKGMsXG5kKTtlJiZnJiYoMSE9PWEucmFuZ2VDb3VudHx8YS5hbmNob3JOb2RlIT09ZS5ub2RlfHxhLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxhLmZvY3VzTm9kZSE9PWcubm9kZXx8YS5mb2N1c09mZnNldCE9PWcub2Zmc2V0KSYmKGI9Yi5jcmVhdGVSYW5nZSgpLGIuc2V0U3RhcnQoZS5ub2RlLGUub2Zmc2V0KSxhLnJlbW92ZUFsbFJhbmdlcygpLGY+ZD8oYS5hZGRSYW5nZShiKSxhLmV4dGVuZChnLm5vZGUsZy5vZmZzZXQpKTooYi5zZXRFbmQoZy5ub2RlLGcub2Zmc2V0KSxhLmFkZFJhbmdlKGIpKSl9Yj1bXTtmb3IoYT1jO2E9YS5wYXJlbnROb2RlOykxPT09YS5ub2RlVHlwZSYmYi5wdXNoKHtlbGVtZW50OmEsbGVmdDphLnNjcm9sbExlZnQsdG9wOmEuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZm9jdXMmJmMuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsYS5lbGVtZW50LnNjcm9sbFRvcD1hLnRvcH19XG52YXIgUGU9aWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk5lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkllKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cbmZ1bmN0aW9uIFZlKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFdlPXthbmltYXRpb25lbmQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpWZShcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFhlPXt9LFllPXt9O1xuaWEmJihZZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBXZS5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBXZS5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBXZS50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFplKGEpe2lmKFhlW2FdKXJldHVybiBYZVthXTtpZighV2VbYV0pcmV0dXJuIGE7dmFyIGI9V2VbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gWWUpcmV0dXJuIFhlW2FdPWJbY107cmV0dXJuIGF9dmFyICRlPVplKFwiYW5pbWF0aW9uZW5kXCIpLGFmPVplKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLGJmPVplKFwiYW5pbWF0aW9uc3RhcnRcIiksY2Y9WmUoXCJ0cmFuc2l0aW9uZW5kXCIpLGRmPW5ldyBNYXAsZWY9XCJhYm9ydCBhdXhDbGljayBjYW5jZWwgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkcmFnIGRyYWdFbmQgZHJhZ0VudGVyIGRyYWdFeGl0IGRyYWdMZWF2ZSBkcmFnT3ZlciBkcmFnU3RhcnQgZHJvcCBkdXJhdGlvbkNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBnb3RQb2ludGVyQ2FwdHVyZSBpbnB1dCBpbnZhbGlkIGtleURvd24ga2V5UHJlc3Mga2V5VXAgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBsb3N0UG9pbnRlckNhcHR1cmUgbW91c2VEb3duIG1vdXNlTW92ZSBtb3VzZU91dCBtb3VzZU92ZXIgbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHBsYXlpbmcgcG9pbnRlckNhbmNlbCBwb2ludGVyRG93biBwb2ludGVyTW92ZSBwb2ludGVyT3V0IHBvaW50ZXJPdmVyIHBvaW50ZXJVcCBwcm9ncmVzcyByYXRlQ2hhbmdlIHJlc2V0IHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1Ym1pdCBzdXNwZW5kIHRpbWVVcGRhdGUgdG91Y2hDYW5jZWwgdG91Y2hFbmQgdG91Y2hTdGFydCB2b2x1bWVDaGFuZ2Ugc2Nyb2xsIHRvZ2dsZSB0b3VjaE1vdmUgd2FpdGluZyB3aGVlbFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIGZmKGEsYil7ZGYuc2V0KGEsYik7ZmEoYixbYV0pfWZvcih2YXIgZ2Y9MDtnZjxlZi5sZW5ndGg7Z2YrKyl7dmFyIGhmPWVmW2dmXSxqZj1oZi50b0xvd2VyQ2FzZSgpLGtmPWhmWzBdLnRvVXBwZXJDYXNlKCkraGYuc2xpY2UoMSk7ZmYoamYsXCJvblwiK2tmKX1mZigkZSxcIm9uQW5pbWF0aW9uRW5kXCIpO2ZmKGFmLFwib25BbmltYXRpb25JdGVyYXRpb25cIik7ZmYoYmYsXCJvbkFuaW1hdGlvblN0YXJ0XCIpO2ZmKFwiZGJsY2xpY2tcIixcIm9uRG91YmxlQ2xpY2tcIik7ZmYoXCJmb2N1c2luXCIsXCJvbkZvY3VzXCIpO2ZmKFwiZm9jdXNvdXRcIixcIm9uQmx1clwiKTtmZihjZixcIm9uVHJhbnNpdGlvbkVuZFwiKTtoYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtcbmhhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZmEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtmYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5mYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgbGY9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHJlc2l6ZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxtZj1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChsZikpO1xuZnVuY3Rpb24gbmYoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7VWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfX19aWYoUWIpdGhyb3cgYT1SYixRYj0hMSxSYj1udWxsLGE7fVxuZnVuY3Rpb24gRChhLGIpe3ZhciBjPWJbb2ZdO3ZvaWQgMD09PWMmJihjPWJbb2ZdPW5ldyBTZXQpO3ZhciBkPWErXCJfX2J1YmJsZVwiO2MuaGFzKGQpfHwocGYoYixhLDIsITEpLGMuYWRkKGQpKX1mdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9MDtiJiYoZHw9NCk7cGYoYyxhLGQsYil9dmFyIHJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gc2YoYSl7aWYoIWFbcmZdKXthW3JmXT0hMDtkYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1wic2VsZWN0aW9uY2hhbmdlXCIhPT1iJiYobWYuaGFzKGIpfHxxZihiLCExLGEpLHFmKGIsITAsYSkpfSk7dmFyIGI9OT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7bnVsbD09PWJ8fGJbcmZdfHwoYltyZl09ITAscWYoXCJzZWxlY3Rpb25jaGFuZ2VcIiwhMSxiKSl9fVxuZnVuY3Rpb24gcGYoYSxiLGMsZCl7c3dpdGNoKGpkKGIpKXtjYXNlIDE6dmFyIGU9ZWQ7YnJlYWs7Y2FzZSA0OmU9Z2Q7YnJlYWs7ZGVmYXVsdDplPWZkfWM9ZS5iaW5kKG51bGwsYixjLGEpO2U9dm9pZCAwOyFMYnx8XCJ0b3VjaHN0YXJ0XCIhPT1iJiZcInRvdWNobW92ZVwiIT09YiYmXCJ3aGVlbFwiIT09Ynx8KGU9ITApO2Q/dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtjYXB0dXJlOiEwLHBhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITApOnZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7cGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkLGUpe3ZhciBmPWQ7aWYoMD09PShiJjEpJiYwPT09KGImMikmJm51bGwhPT1kKWE6Zm9yKDs7KXtpZihudWxsPT09ZClyZXR1cm47dmFyIGc9ZC50YWc7aWYoMz09PWd8fDQ9PT1nKXt2YXIgaD1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2lmKGg9PT1lfHw4PT09aC5ub2RlVHlwZSYmaC5wYXJlbnROb2RlPT09ZSlicmVhaztpZig0PT09Zylmb3IoZz1kLnJldHVybjtudWxsIT09Zzspe3ZhciBrPWcudGFnO2lmKDM9PT1rfHw0PT09aylpZihrPWcuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saz09PWV8fDg9PT1rLm5vZGVUeXBlJiZrLnBhcmVudE5vZGU9PT1lKXJldHVybjtnPWcucmV0dXJufWZvcig7bnVsbCE9PWg7KXtnPVdjKGgpO2lmKG51bGw9PT1nKXJldHVybjtrPWcudGFnO2lmKDU9PT1rfHw2PT09ayl7ZD1mPWc7Y29udGludWUgYX1oPWgucGFyZW50Tm9kZX19ZD1kLnJldHVybn1KYihmdW5jdGlvbigpe3ZhciBkPWYsZT14YihjKSxnPVtdO1xuYTp7dmFyIGg9ZGYuZ2V0KGEpO2lmKHZvaWQgMCE9PWgpe3ZhciBrPXRkLG49YTtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9kKGMpKWJyZWFrIGE7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjprPVJkO2JyZWFrO2Nhc2UgXCJmb2N1c2luXCI6bj1cImZvY3VzXCI7az1GZDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpuPVwiYmx1clwiO2s9RmQ7YnJlYWs7Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6az1GZDticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pYnJlYWsgYTtjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJjb250ZXh0bWVudVwiOms9QmQ7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6az1cbkRkO2JyZWFrO2Nhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaG1vdmVcIjpjYXNlIFwidG91Y2hzdGFydFwiOms9VmQ7YnJlYWs7Y2FzZSAkZTpjYXNlIGFmOmNhc2UgYmY6az1IZDticmVhaztjYXNlIGNmOms9WGQ7YnJlYWs7Y2FzZSBcInNjcm9sbFwiOms9dmQ7YnJlYWs7Y2FzZSBcIndoZWVsXCI6az1aZDticmVhaztjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwicGFzdGVcIjprPUpkO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJ1cFwiOms9VGR9dmFyIHQ9MCE9PShiJjQpLEo9IXQmJlwic2Nyb2xsXCI9PT1hLHg9dD9udWxsIT09aD9oK1wiQ2FwdHVyZVwiOm51bGw6aDt0PVtdO2Zvcih2YXIgdz1kLHU7bnVsbCE9PVxudzspe3U9dzt2YXIgRj11LnN0YXRlTm9kZTs1PT09dS50YWcmJm51bGwhPT1GJiYodT1GLG51bGwhPT14JiYoRj1LYih3LHgpLG51bGwhPUYmJnQucHVzaCh0Zih3LEYsdSkpKSk7aWYoSilicmVhazt3PXcucmV0dXJufTA8dC5sZW5ndGgmJihoPW5ldyBrKGgsbixudWxsLGMsZSksZy5wdXNoKHtldmVudDpoLGxpc3RlbmVyczp0fSkpfX1pZigwPT09KGImNykpe2E6e2g9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWE7az1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoaCYmYyE9PXdiJiYobj1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYoV2Mobil8fG5bdWZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYobj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCxuPW4/V2Mobik6bnVsbCxudWxsIT09XG5uJiYoSj1WYihuKSxuIT09Snx8NSE9PW4udGFnJiY2IT09bi50YWcpKW49bnVsbH1lbHNlIGs9bnVsbCxuPWQ7aWYoayE9PW4pe3Q9QmQ7Rj1cIm9uTW91c2VMZWF2ZVwiO3g9XCJvbk1vdXNlRW50ZXJcIjt3PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdD1UZCxGPVwib25Qb2ludGVyTGVhdmVcIix4PVwib25Qb2ludGVyRW50ZXJcIix3PVwicG9pbnRlclwiO0o9bnVsbD09az9oOnVlKGspO3U9bnVsbD09bj9oOnVlKG4pO2g9bmV3IHQoRix3K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9SjtoLnJlbGF0ZWRUYXJnZXQ9dTtGPW51bGw7V2MoZSk9PT1kJiYodD1uZXcgdCh4LHcrXCJlbnRlclwiLG4sYyxlKSx0LnRhcmdldD11LHQucmVsYXRlZFRhcmdldD1KLEY9dCk7Sj1GO2lmKGsmJm4pYjp7dD1rO3g9bjt3PTA7Zm9yKHU9dDt1O3U9dmYodSkpdysrO3U9MDtmb3IoRj14O0Y7Rj12ZihGKSl1Kys7Zm9yKDswPHctdTspdD12Zih0KSx3LS07Zm9yKDswPHUtdzspeD1cbnZmKHgpLHUtLTtmb3IoO3ctLTspe2lmKHQ9PT14fHxudWxsIT09eCYmdD09PXguYWx0ZXJuYXRlKWJyZWFrIGI7dD12Zih0KTt4PXZmKHgpfXQ9bnVsbH1lbHNlIHQ9bnVsbDtudWxsIT09ayYmd2YoZyxoLGssdCwhMSk7bnVsbCE9PW4mJm51bGwhPT1KJiZ3ZihnLEosbix0LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBuYT12ZTtlbHNlIGlmKG1lKGgpKWlmKHdlKW5hPUZlO2Vsc2V7bmE9RGU7dmFyIHhhPUNlfWVsc2Uoaz1oLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09ay50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09aC50eXBlfHxcInJhZGlvXCI9PT1oLnR5cGUpJiYobmE9RWUpO2lmKG5hJiYobmE9bmEoYSxkKSkpe25lKGcsbmEsYyxlKTticmVhayBhfXhhJiZ4YShhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKHhhPWguX3dyYXBwZXJTdGF0ZSkmJlxueGEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWgudHlwZSYmY2IoaCxcIm51bWJlclwiLGgudmFsdWUpfXhhPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKHhhKXx8XCJ0cnVlXCI9PT14YS5jb250ZW50RWRpdGFibGUpUWU9eGEsUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciAkYTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIjticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmJhPVwib25Db21wb3NpdGlvbkVuZFwiO1xuYnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpiYT1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifWJhPXZvaWQgMH1lbHNlIGllP2dlKGEsYykmJihiYT1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtiYSYmKGRlJiZcImtvXCIhPT1jLmxvY2FsZSYmKGllfHxcIm9uQ29tcG9zaXRpb25TdGFydFwiIT09YmE/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1iYSYmaWUmJigkYT1uZCgpKTooa2Q9ZSxsZD1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxpZT0hMCkpLHhhPW9lKGQsYmEpLDA8eGEubGVuZ3RoJiYoYmE9bmV3IExkKGJhLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6YmEsbGlzdGVuZXJzOnhhfSksJGE/YmEuZGF0YT0kYTooJGE9aGUoYyksbnVsbCE9PSRhJiYoYmEuZGF0YT0kYSkpKSk7aWYoJGE9Y2U/amUoYSxjKTprZShhLGMpKWQ9b2UoZCxcIm9uQmVmb3JlSW5wdXRcIiksXG4wPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXCJiZWZvcmVpbnB1dFwiLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmUsbGlzdGVuZXJzOmR9KSxlLmRhdGE9JGEpfXNlKGcsYil9KX1mdW5jdGlvbiB0ZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9S2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQodGYoYSxmLGUpKSxmPUtiKGEsYiksbnVsbCE9ZiYmZC5wdXNoKHRmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gdmYoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIHdmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9S2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQodGYoYyxrLGgpKSk6ZXx8KGs9S2IoYyxmKSxudWxsIT1rJiZnLnB1c2godGYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX12YXIgeGY9L1xcclxcbj8vZyx5Zj0vXFx1MDAwMHxcXHVGRkZEL2c7ZnVuY3Rpb24gemYoYSl7cmV0dXJuKFwic3RyaW5nXCI9PT10eXBlb2YgYT9hOlwiXCIrYSkucmVwbGFjZSh4ZixcIlxcblwiKS5yZXBsYWNlKHlmLFwiXCIpfWZ1bmN0aW9uIEFmKGEsYixjKXtiPXpmKGIpO2lmKHpmKGEpIT09YiYmYyl0aHJvdyBFcnJvcihwKDQyNSkpO31mdW5jdGlvbiBCZigpe31cbnZhciBDZj1udWxsLERmPW51bGw7ZnVuY3Rpb24gRWYoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9XG52YXIgRmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsR2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwLEhmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBQcm9taXNlP1Byb21pc2U6dm9pZCAwLEpmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBxdWV1ZU1pY3JvdGFzaz9xdWV1ZU1pY3JvdGFzazpcInVuZGVmaW5lZFwiIT09dHlwZW9mIEhmP2Z1bmN0aW9uKGEpe3JldHVybiBIZi5yZXNvbHZlKG51bGwpLnRoZW4oYSkuY2F0Y2goSWYpfTpGZjtmdW5jdGlvbiBJZihhKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYTt9KX1cbmZ1bmN0aW9uIEtmKGEsYil7dmFyIGM9YixkPTA7ZG97dmFyIGU9Yy5uZXh0U2libGluZzthLnJlbW92ZUNoaWxkKGMpO2lmKGUmJjg9PT1lLm5vZGVUeXBlKWlmKGM9ZS5kYXRhLFwiLyRcIj09PWMpe2lmKDA9PT1kKXthLnJlbW92ZUNoaWxkKGUpO2JkKGIpO3JldHVybn1kLS19ZWxzZVwiJFwiIT09YyYmXCIkP1wiIT09YyYmXCIkIVwiIT09Y3x8ZCsrO2M9ZX13aGlsZShjKTtiZChiKX1mdW5jdGlvbiBMZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVhaztpZig4PT09Yil7Yj1hLmRhdGE7aWYoXCIkXCI9PT1ifHxcIiQhXCI9PT1ifHxcIiQ/XCI9PT1iKWJyZWFrO2lmKFwiLyRcIj09PWIpcmV0dXJuIG51bGx9fXJldHVybiBhfVxuZnVuY3Rpb24gTWYoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIiRcIj09PWN8fFwiJCFcIj09PWN8fFwiJD9cIj09PWMpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlXCIvJFwiPT09YyYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5mPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE9mPVwiX19yZWFjdEZpYmVyJFwiK05mLFBmPVwiX19yZWFjdFByb3BzJFwiK05mLHVmPVwiX19yZWFjdENvbnRhaW5lciRcIitOZixvZj1cIl9fcmVhY3RFdmVudHMkXCIrTmYsUWY9XCJfX3JlYWN0TGlzdGVuZXJzJFwiK05mLFJmPVwiX19yZWFjdEhhbmRsZXMkXCIrTmY7XG5mdW5jdGlvbiBXYyhhKXt2YXIgYj1hW09mXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1t1Zl18fGNbT2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9TWYoYSk7bnVsbCE9PWE7KXtpZihjPWFbT2ZdKXJldHVybiBjO2E9TWYoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVtPZl18fGFbdWZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IocCgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVtQZl18fG51bGx9dmFyIFNmPVtdLFRmPS0xO2Z1bmN0aW9uIFVmKGEpe3JldHVybntjdXJyZW50OmF9fVxuZnVuY3Rpb24gRShhKXswPlRmfHwoYS5jdXJyZW50PVNmW1RmXSxTZltUZl09bnVsbCxUZi0tKX1mdW5jdGlvbiBHKGEsYil7VGYrKztTZltUZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBWZj17fSxIPVVmKFZmKSxXZj1VZighMSksWGY9VmY7ZnVuY3Rpb24gWWYoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBWZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFpmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gJGYoKXtFKFdmKTtFKEgpfWZ1bmN0aW9uIGFnKGEsYixjKXtpZihILmN1cnJlbnQhPT1WZil0aHJvdyBFcnJvcihwKDE2OCkpO0coSCxiKTtHKFdmLGMpfWZ1bmN0aW9uIGJnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtiPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYikpdGhyb3cgRXJyb3IocCgxMDgsUmEoYSl8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gQSh7fSxjLGQpfVxuZnVuY3Rpb24gY2coYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fFZmO1hmPUguY3VycmVudDtHKEgsYSk7RyhXZixXZi5jdXJyZW50KTtyZXR1cm4hMH1mdW5jdGlvbiBkZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IocCgxNjkpKTtjPyhhPWJnKGEsYixYZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEUoV2YpLEUoSCksRyhILGEpKTpFKFdmKTtHKFdmLGMpfXZhciBlZz1udWxsLGZnPSExLGdnPSExO2Z1bmN0aW9uIGhnKGEpe251bGw9PT1lZz9lZz1bYV06ZWcucHVzaChhKX1mdW5jdGlvbiBpZyhhKXtmZz0hMDtoZyhhKX1cbmZ1bmN0aW9uIGpnKCl7aWYoIWdnJiZudWxsIT09ZWcpe2dnPSEwO3ZhciBhPTAsYj1DO3RyeXt2YXIgYz1lZztmb3IoQz0xO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdO2RvIGQ9ZCghMCk7d2hpbGUobnVsbCE9PWQpfWVnPW51bGw7Zmc9ITF9Y2F0Y2goZSl7dGhyb3cgbnVsbCE9PWVnJiYoZWc9ZWcuc2xpY2UoYSsxKSksYWMoZmMsamcpLGU7fWZpbmFsbHl7Qz1iLGdnPSExfX1yZXR1cm4gbnVsbH12YXIga2c9W10sbGc9MCxtZz1udWxsLG5nPTAsb2c9W10scGc9MCxxZz1udWxsLHJnPTEsc2c9XCJcIjtmdW5jdGlvbiB0ZyhhLGIpe2tnW2xnKytdPW5nO2tnW2xnKytdPW1nO21nPWE7bmc9Yn1cbmZ1bmN0aW9uIHVnKGEsYixjKXtvZ1twZysrXT1yZztvZ1twZysrXT1zZztvZ1twZysrXT1xZztxZz1hO3ZhciBkPXJnO2E9c2c7dmFyIGU9MzItb2MoZCktMTtkJj1+KDE8PGUpO2MrPTE7dmFyIGY9MzItb2MoYikrZTtpZigzMDxmKXt2YXIgZz1lLWUlNTtmPShkJigxPDxnKS0xKS50b1N0cmluZygzMik7ZD4+PWc7ZS09ZztyZz0xPDwzMi1vYyhiKStlfGM8PGV8ZDtzZz1mK2F9ZWxzZSByZz0xPDxmfGM8PGV8ZCxzZz1hfWZ1bmN0aW9uIHZnKGEpe251bGwhPT1hLnJldHVybiYmKHRnKGEsMSksdWcoYSwxLDApKX1mdW5jdGlvbiB3ZyhhKXtmb3IoO2E9PT1tZzspbWc9a2dbLS1sZ10sa2dbbGddPW51bGwsbmc9a2dbLS1sZ10sa2dbbGddPW51bGw7Zm9yKDthPT09cWc7KXFnPW9nWy0tcGddLG9nW3BnXT1udWxsLHNnPW9nWy0tcGddLG9nW3BnXT1udWxsLHJnPW9nWy0tcGddLG9nW3BnXT1udWxsfXZhciB4Zz1udWxsLHlnPW51bGwsST0hMSx6Zz1udWxsO1xuZnVuY3Rpb24gQWcoYSxiKXt2YXIgYz1CZyg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtiPWEuZGVsZXRpb25zO251bGw9PT1iPyhhLmRlbGV0aW9ucz1bY10sYS5mbGFnc3w9MTYpOmIucHVzaChjKX1cbmZ1bmN0aW9uIENnKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9TGYoYi5maXJzdENoaWxkKSwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLHhnPWEseWc9bnVsbCwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4gYj04IT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGM9bnVsbCE9PXFnP3tpZDpyZyxvdmVyZmxvdzpzZ306bnVsbCxhLm1lbW9pemVkU3RhdGU9e2RlaHlkcmF0ZWQ6Yix0cmVlQ29udGV4dDpjLHJldHJ5TGFuZToxMDczNzQxODI0fSxjPUJnKDE4LG51bGwsbnVsbCwwKSxjLnN0YXRlTm9kZT1iLGMucmV0dXJuPWEsYS5jaGlsZD1jLHhnPWEseWc9XG5udWxsLCEwKTohMTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBEZyhhKXtyZXR1cm4gMCE9PShhLm1vZGUmMSkmJjA9PT0oYS5mbGFncyYxMjgpfWZ1bmN0aW9uIEVnKGEpe2lmKEkpe3ZhciBiPXlnO2lmKGIpe3ZhciBjPWI7aWYoIUNnKGEsYikpe2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7Yj1MZihjLm5leHRTaWJsaW5nKTt2YXIgZD14ZztiJiZDZyhhLGIpP0FnKGQsYyk6KGEuZmxhZ3M9YS5mbGFncyYtNDA5N3wyLEk9ITEseGc9YSl9fWVsc2V7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTthLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MjtJPSExO3hnPWF9fX1mdW5jdGlvbiBGZyhhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47eGc9YX1cbmZ1bmN0aW9uIEdnKGEpe2lmKGEhPT14ZylyZXR1cm4hMTtpZighSSlyZXR1cm4gRmcoYSksST0hMCwhMTt2YXIgYjsoYj0zIT09YS50YWcpJiYhKGI9NSE9PWEudGFnKSYmKGI9YS50eXBlLGI9XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFFZihhLnR5cGUsYS5tZW1vaXplZFByb3BzKSk7aWYoYiYmKGI9eWcpKXtpZihEZyhhKSl0aHJvdyBIZygpLEVycm9yKHAoNDE4KSk7Zm9yKDtiOylBZyhhLGIpLGI9TGYoYi5uZXh0U2libGluZyl9RmcoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcihwKDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiLyRcIj09PWMpe2lmKDA9PT1iKXt5Zz1MZihhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlXCIkXCIhPT1jJiZcIiQhXCIhPT1jJiZcIiQ/XCIhPT1jfHxiKyt9YT1hLm5leHRTaWJsaW5nfXlnPVxubnVsbH19ZWxzZSB5Zz14Zz9MZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1mdW5jdGlvbiBIZygpe2Zvcih2YXIgYT15ZzthOylhPUxmKGEubmV4dFNpYmxpbmcpfWZ1bmN0aW9uIElnKCl7eWc9eGc9bnVsbDtJPSExfWZ1bmN0aW9uIEpnKGEpe251bGw9PT16Zz96Zz1bYV06emcucHVzaChhKX12YXIgS2c9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gTGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1BKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIE1nPVVmKG51bGwpLE5nPW51bGwsT2c9bnVsbCxQZz1udWxsO2Z1bmN0aW9uIFFnKCl7UGc9T2c9Tmc9bnVsbH1mdW5jdGlvbiBSZyhhKXt2YXIgYj1NZy5jdXJyZW50O0UoTWcpO2EuX2N1cnJlbnRWYWx1ZT1ifVxuZnVuY3Rpb24gU2coYSxiLGMpe2Zvcig7bnVsbCE9PWE7KXt2YXIgZD1hLmFsdGVybmF0ZTsoYS5jaGlsZExhbmVzJmIpIT09Yj8oYS5jaGlsZExhbmVzfD1iLG51bGwhPT1kJiYoZC5jaGlsZExhbmVzfD1iKSk6bnVsbCE9PWQmJihkLmNoaWxkTGFuZXMmYikhPT1iJiYoZC5jaGlsZExhbmVzfD1iKTtpZihhPT09YylicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBUZyhhLGIpe05nPWE7UGc9T2c9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJigwIT09KGEubGFuZXMmYikmJihVZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBWZyhhKXt2YXIgYj1hLl9jdXJyZW50VmFsdWU7aWYoUGchPT1hKWlmKGE9e2NvbnRleHQ6YSxtZW1vaXplZFZhbHVlOmIsbmV4dDpudWxsfSxudWxsPT09T2cpe2lmKG51bGw9PT1OZyl0aHJvdyBFcnJvcihwKDMwOCkpO09nPWE7TmcuZGVwZW5kZW5jaWVzPXtsYW5lczowLGZpcnN0Q29udGV4dDphfX1lbHNlIE9nPU9nLm5leHQ9YTtyZXR1cm4gYn12YXIgV2c9bnVsbDtmdW5jdGlvbiBYZyhhKXtudWxsPT09V2c/V2c9W2FdOldnLnB1c2goYSl9ZnVuY3Rpb24gWWcoYSxiLGMsZCl7dmFyIGU9Yi5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYy5uZXh0PWMsWGcoYikpOihjLm5leHQ9ZS5uZXh0LGUubmV4dD1jKTtiLmludGVybGVhdmVkPWM7cmV0dXJuIFpnKGEsZCl9XG5mdW5jdGlvbiBaZyhhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9dmFyICRnPSExO2Z1bmN0aW9uIGFoKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjB9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiBiaChhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiBjaChhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1cbmZ1bmN0aW9uIGRoKGEsYixjKXt2YXIgZD1hLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Q9ZC5zaGFyZWQ7aWYoMCE9PShLJjIpKXt2YXIgZT1kLnBlbmRpbmc7bnVsbD09PWU/Yi5uZXh0PWI6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QucGVuZGluZz1iO3JldHVybiBaZyhhLGMpfWU9ZC5pbnRlcmxlYXZlZDtudWxsPT09ZT8oYi5uZXh0PWIsWGcoZCkpOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLmludGVybGVhdmVkPWI7cmV0dXJuIFpnKGEsYyl9ZnVuY3Rpb24gZWgoYSxiLGMpe2I9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YiYmKGI9Yi5zaGFyZWQsMCE9PShjJjQxOTQyNDApKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbmZ1bmN0aW9uIGZoKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBnaChhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlOyRnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG09YS5hbHRlcm5hdGU7bnVsbCE9PW0mJihtPW0udXBkYXRlUXVldWUsaD1tLmxhc3RCYXNlVXBkYXRlLGghPT1nJiYobnVsbD09PWg/bS5maXJzdEJhc2VVcGRhdGU9bDpoLm5leHQ9bCxtLmxhc3RCYXNlVXBkYXRlPWspKX1pZihudWxsIT09Zil7dmFyIHE9ZS5iYXNlU3RhdGU7Zz0wO209bD1rPW51bGw7aD1mO2Rve3ZhciByPWgubGFuZSx5PWguZXZlbnRUaW1lO2lmKChkJnIpPT09cil7bnVsbCE9PW0mJihtPW0ubmV4dD17ZXZlbnRUaW1lOnksbGFuZTowLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIG49YSx0PWg7cj1iO3k9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpuPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbil7cT1uLmNhbGwoeSxxLHIpO2JyZWFrIGF9cT1uO2JyZWFrIGE7Y2FzZSAzOm4uZmxhZ3M9bi5mbGFncyYtNjU1Mzd8MTI4O2Nhc2UgMDpuPXQucGF5bG9hZDtyPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuP24uY2FsbCh5LHEscik6bjtpZihudWxsPT09cnx8dm9pZCAwPT09cilicmVhayBhO3E9QSh7fSxxLHIpO2JyZWFrIGE7Y2FzZSAyOiRnPSEwfX1udWxsIT09aC5jYWxsYmFjayYmMCE9PWgubGFuZSYmKGEuZmxhZ3N8PTY0LHI9ZS5lZmZlY3RzLG51bGw9PT1yP2UuZWZmZWN0cz1baF06ci5wdXNoKGgpKX1lbHNlIHk9e2V2ZW50VGltZTp5LGxhbmU6cix0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxuZXh0Om51bGx9LG51bGw9PT1tPyhsPW09eSxrPXEpOm09bS5uZXh0PXksZ3w9cjtcbmg9aC5uZXh0O2lmKG51bGw9PT1oKWlmKGg9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09aClicmVhaztlbHNlIHI9aCxoPXIubmV4dCxyLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPXIsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1tJiYoaz1xKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1tO2I9ZS5zaGFyZWQuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWIpe2U9YjtkbyBnfD1lLmxhbmUsZT1lLm5leHQ7d2hpbGUoZSE9PWIpfWVsc2UgbnVsbD09PWYmJihlLnNoYXJlZC5sYW5lcz0wKTtoaHw9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPXF9fVxuZnVuY3Rpb24gaWgoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHAoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgamg9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24ga2goYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOkEoe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIG5oPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1ZiKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUwoKSxlPWxoKGEpLGY9Y2goZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUwoKSxlPWxoKGEpLGY9Y2goZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9TCgpLGQ9XG5saChhKSxlPWNoKGMsZCk7ZS50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGUuY2FsbGJhY2s9Yik7Yj1kaChhLGUsZCk7bnVsbCE9PWImJihtaChiLGEsZCxjKSxlaChiLGEsZCkpfX07ZnVuY3Rpb24gb2goYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSWUoYyxkKXx8IUllKGUsZik6ITB9XG5mdW5jdGlvbiBwaChhLGIsYyl7dmFyIGQ9ITEsZT1WZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1WZyhmKTooZT1aZihiKT9YZjpILmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9ZZihhLGUpOlZmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9bmg7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBxaChhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiByaChhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPWpoO2FoKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9VmcoZik6KGY9WmYoYik/WGY6SC5jdXJyZW50LGUuY29udGV4dD1ZZihhLGYpKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoa2goYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGI9ZS5zdGF0ZSxcblwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmbmguZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksZ2goYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NDE5NDMwOCl9XG5mdW5jdGlvbiBzaChhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHAoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IocCgxNDcsYSkpO3ZhciBlPWQsZj1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZilyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1lLnJlZnM7Yj09PWpoJiYoYj1lLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2ZdOmJbZl09YX07Yi5fc3RyaW5nUmVmPWY7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHAoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHAoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiB0aChhLGIpe2E9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpO3Rocm93IEVycm9yKHAoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWE/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YSkpO31mdW5jdGlvbiB1aChhKXt2YXIgYj1hLl9pbml0O3JldHVybiBiKGEuX3BheWxvYWQpfVxuZnVuY3Rpb24gdmgoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIuZGVsZXRpb25zO251bGw9PT1kPyhiLmRlbGV0aW9ucz1bY10sYi5mbGFnc3w9MTYpOmQucHVzaChjKX19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9d2goYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBiLmZsYWdzfD0xMDQ4NTc2LGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFnc3w9MixjKTpkO2IuZmxhZ3N8PTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZcbm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3N8PTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj14aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe3ZhciBmPWMudHlwZTtpZihmPT09eWEpcmV0dXJuIG0oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxjLmtleSk7aWYobnVsbCE9PWImJihiLmVsZW1lbnRUeXBlPT09Znx8XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi4kJHR5cGVvZj09PUhhJiZ1aChmKT09PWIudHlwZSkpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPXNoKGEsYixjKSxkLnJldHVybj1hLGQ7ZD15aChjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1zaChhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fFxuYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1jLmltcGxlbWVudGF0aW9uKXJldHVybiBiPXpoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBtKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1BaChjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIHEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYiYmXCJcIiE9PWJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj14aChcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYz15aChiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxcbmMucmVmPXNoKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB3YTpyZXR1cm4gYj16aChiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7Y2FzZSBIYTp2YXIgZD1iLl9pbml0O3JldHVybiBxKGEsZChiLl9wYXlsb2FkKSxjKX1pZihlYihiKXx8S2EoYikpcmV0dXJuIGI9QWgoYixhLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7dGgoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiByKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjJiZcIlwiIT09Y3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYy5rZXk9PT1lP2soYSxiLGMsZCk6bnVsbDtjYXNlIHdhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsO2Nhc2UgSGE6cmV0dXJuIGU9Yy5faW5pdCxyKGEsXG5iLGUoYy5fcGF5bG9hZCksZCl9aWYoZWIoYyl8fEthKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTt0aChhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHkoYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGQmJlwiXCIhPT1kfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxrKGIsYSxkLGUpO2Nhc2Ugd2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSk7Y2FzZSBIYTp2YXIgZj1kLl9pbml0O3JldHVybiB5KGEsYixjLGYoZC5fcGF5bG9hZCksZSl9aWYoZWIoZCl8fEthKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTt0aChiLGQpfXJldHVybiBudWxsfVxuZnVuY3Rpb24gbihlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCxtPW51bGwsdT1nLHc9Zz0wLHg9bnVsbDtudWxsIT09dSYmdzxoLmxlbmd0aDt3Kyspe3UuaW5kZXg+dz8oeD11LHU9bnVsbCk6eD11LnNpYmxpbmc7dmFyIG49cihlLHUsaFt3XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXgpO2JyZWFrfWEmJnUmJm51bGw9PT1uLmFsdGVybmF0ZSYmYihlLHUpO2c9ZihuLGcsdyk7bnVsbD09PW0/bD1uOm0uc2libGluZz1uO209bjt1PXh9aWYodz09PWgubGVuZ3RoKXJldHVybiBjKGUsdSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT11KXtmb3IoO3c8aC5sZW5ndGg7dysrKXU9cShlLGhbd10sayksbnVsbCE9PXUmJihnPWYodSxnLHcpLG51bGw9PT1tP2w9dTptLnNpYmxpbmc9dSxtPXUpO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3c8aC5sZW5ndGg7dysrKXg9eSh1LGUsdyxoW3ddLGspLG51bGwhPT14JiYoYSYmbnVsbCE9PXguYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09XG54LmtleT93Ongua2V5KSxnPWYoeCxnLHcpLG51bGw9PT1tP2w9eDptLnNpYmxpbmc9eCxtPXgpO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiB0KGUsZyxoLGspe3ZhciBsPUthKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHAoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09aCl0aHJvdyBFcnJvcihwKDE1MSkpO2Zvcih2YXIgdT1sPW51bGwsbT1nLHc9Zz0wLHg9bnVsbCxuPWgubmV4dCgpO251bGwhPT1tJiYhbi5kb25lO3crKyxuPWgubmV4dCgpKXttLmluZGV4Pnc/KHg9bSxtPW51bGwpOng9bS5zaWJsaW5nO3ZhciB0PXIoZSxtLG4udmFsdWUsayk7aWYobnVsbD09PXQpe251bGw9PT1tJiYobT14KTticmVha31hJiZtJiZudWxsPT09dC5hbHRlcm5hdGUmJmIoZSxtKTtnPWYodCxnLHcpO251bGw9PT11P2w9dDp1LnNpYmxpbmc9dDt1PXQ7bT14fWlmKG4uZG9uZSlyZXR1cm4gYyhlLFxubSksSSYmdGcoZSx3KSxsO2lmKG51bGw9PT1tKXtmb3IoOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj1xKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXkobSxlLHcsbi52YWx1ZSxrKSxudWxsIT09biYmKGEmJm51bGwhPT1uLmFsdGVybmF0ZSYmbS5kZWxldGUobnVsbD09PW4ua2V5P3c6bi5rZXkpLGc9ZihuLGcsdyksbnVsbD09PXU/bD1uOnUuc2libGluZz1uLHU9bik7YSYmbS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIEooYSxkLGYsaCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09eWEmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zil7c3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgdmE6YTp7Zm9yKHZhciBrPVxuZi5rZXksbD1kO251bGwhPT1sOyl7aWYobC5rZXk9PT1rKXtrPWYudHlwZTtpZihrPT09eWEpe2lmKDc9PT1sLnRhZyl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19ZWxzZSBpZihsLmVsZW1lbnRUeXBlPT09a3x8XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09ayYmay4kJHR5cGVvZj09PUhhJiZ1aChrKT09PWwudHlwZSl7YyhhLGwuc2libGluZyk7ZD1lKGwsZi5wcm9wcyk7ZC5yZWY9c2goYSxsLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YyhhLGwpO2JyZWFrfWVsc2UgYihhLGwpO2w9bC5zaWJsaW5nfWYudHlwZT09PXlhPyhkPUFoKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD15aChmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1zaChhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2Ugd2E6YTp7Zm9yKGw9Zi5rZXk7bnVsbCE9PVxuZDspe2lmKGQua2V5PT09bClpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD16aChmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKTtjYXNlIEhhOnJldHVybiBsPWYuX2luaXQsSihhLGQsbChmLl9wYXlsb2FkKSxoKX1pZihlYihmKSlyZXR1cm4gbihhLGQsZixoKTtpZihLYShmKSlyZXR1cm4gdChhLGQsZixoKTt0aChhLGYpfXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgZiYmXCJcIiE9PWZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZj8oZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOlxuKGMoYSxkKSxkPXhoKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpKTpjKGEsZCl9cmV0dXJuIEp9dmFyIEJoPXZoKCEwKSxDaD12aCghMSksRGg9e30sRWg9VWYoRGgpLEZoPVVmKERoKSxHaD1VZihEaCk7ZnVuY3Rpb24gSGgoYSl7aWYoYT09PURoKXRocm93IEVycm9yKHAoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gSWgoYSxiKXtHKEdoLGIpO0coRmgsYSk7RyhFaCxEaCk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpsYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bGIoYixhKX1FKEVoKTtHKEVoLGIpfWZ1bmN0aW9uIEpoKCl7RShFaCk7RShGaCk7RShHaCl9XG5mdW5jdGlvbiBLaChhKXtIaChHaC5jdXJyZW50KTt2YXIgYj1IaChFaC5jdXJyZW50KTt2YXIgYz1sYihiLGEudHlwZSk7YiE9PWMmJihHKEZoLGEpLEcoRWgsYykpfWZ1bmN0aW9uIExoKGEpe0ZoLmN1cnJlbnQ9PT1hJiYoRShFaCksRShGaCkpfXZhciBNPVVmKDApO1xuZnVuY3Rpb24gTWgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8XCIkP1wiPT09Yy5kYXRhfHxcIiQhXCI9PT1jLmRhdGEpKXJldHVybiBifWVsc2UgaWYoMTk9PT1iLnRhZyYmdm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyKXtpZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIE5oPVtdO1xuZnVuY3Rpb24gT2goKXtmb3IodmFyIGE9MDthPE5oLmxlbmd0aDthKyspTmhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDtOaC5sZW5ndGg9MH12YXIgUGg9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixRaD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxSaD0wLE49bnVsbCxPPW51bGwsUD1udWxsLFNoPSExLFRoPSExLFVoPTAsVmg9MDtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IocCgzMjEpKTt9ZnVuY3Rpb24gV2goYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKGEsYixjLGQsZSxmKXtSaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO1BoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/WWg6Wmg7YT1jKGQsZSk7aWYoVGgpe2Y9MDtkb3tUaD0hMTtVaD0wO2lmKDI1PD1mKXRocm93IEVycm9yKHAoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7UGguY3VycmVudD0kaDthPWMoZCxlKX13aGlsZShUaCl9UGguY3VycmVudD1haTtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O1JoPTA7UD1PPU49bnVsbDtTaD0hMTtpZihiKXRocm93IEVycm9yKHAoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmkoKXt2YXIgYT0wIT09VWg7VWg9MDtyZXR1cm4gYX1cbmZ1bmN0aW9uIGNpKCl7dmFyIGE9e21lbW9pemVkU3RhdGU6bnVsbCxiYXNlU3RhdGU6bnVsbCxiYXNlUXVldWU6bnVsbCxxdWV1ZTpudWxsLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hO3JldHVybiBQfWZ1bmN0aW9uIGRpKCl7aWYobnVsbD09PU8pe3ZhciBhPU4uYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPU8ubmV4dDt2YXIgYj1udWxsPT09UD9OLm1lbW9pemVkU3RhdGU6UC5uZXh0O2lmKG51bGwhPT1iKVA9YixPPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDMxMCkpO089YTthPXttZW1vaXplZFN0YXRlOk8ubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Ty5iYXNlU3RhdGUsYmFzZVF1ZXVlOk8uYmFzZVF1ZXVlLHF1ZXVlOk8ucXVldWUsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWF9cmV0dXJuIFB9XG5mdW5jdGlvbiBlaShhLGIpe3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yn1cbmZ1bmN0aW9uIGZpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9TyxlPWQuYmFzZVF1ZXVlLGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXtpZihudWxsIT09ZSl7dmFyIGc9ZS5uZXh0O2UubmV4dD1mLm5leHQ7Zi5uZXh0PWd9ZC5iYXNlUXVldWU9ZT1mO2MucGVuZGluZz1udWxsfWlmKG51bGwhPT1lKXtmPWUubmV4dDtkPWQuYmFzZVN0YXRlO3ZhciBoPWc9bnVsbCxrPW51bGwsbD1mO2Rve3ZhciBtPWwubGFuZTtpZigoUmgmbSk9PT1tKW51bGwhPT1rJiYoaz1rLm5leHQ9e2xhbmU6MCxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1sLmhhc0VhZ2VyU3RhdGU/bC5lYWdlclN0YXRlOmEoZCxsLmFjdGlvbik7ZWxzZXt2YXIgcT17bGFuZTptLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxcbmVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWs/KGg9az1xLGc9ZCk6az1rLm5leHQ9cTtOLmxhbmVzfD1tO2hofD1tfWw9bC5uZXh0fXdoaWxlKG51bGwhPT1sJiZsIT09Zik7bnVsbD09PWs/Zz1kOmsubmV4dD1oO0hlKGQsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1nO2IuYmFzZVF1ZXVlPWs7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfWE9Yy5pbnRlcmxlYXZlZDtpZihudWxsIT09YSl7ZT1hO2RvIGY9ZS5sYW5lLE4ubGFuZXN8PWYsaGh8PWYsZT1lLm5leHQ7d2hpbGUoZSE9PWEpfWVsc2UgbnVsbD09PWUmJihjLmxhbmVzPTApO3JldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiBnaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7SGUoZixiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1mdW5jdGlvbiBoaSgpe31cbmZ1bmN0aW9uIGlpKGEsYil7dmFyIGM9TixkPWRpKCksZT1iKCksZj0hSGUoZC5tZW1vaXplZFN0YXRlLGUpO2YmJihkLm1lbW9pemVkU3RhdGU9ZSxVZz0hMCk7ZD1kLnF1ZXVlO2ppKGtpLmJpbmQobnVsbCxjLGQsYSksW2FdKTtpZihkLmdldFNuYXBzaG90IT09Ynx8Znx8bnVsbCE9PVAmJlAubWVtb2l6ZWRTdGF0ZS50YWcmMSl7Yy5mbGFnc3w9MjA0ODtsaSg5LG1pLmJpbmQobnVsbCxjLGQsZSxiKSx2b2lkIDAsbnVsbCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoYyxiLGUpfXJldHVybiBlfWZ1bmN0aW9uIG5pKGEsYixjKXthLmZsYWdzfD0xNjM4NDthPXtnZXRTbmFwc2hvdDpiLHZhbHVlOmN9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5zdG9yZXM9W2FdKTooYz1iLnN0b3JlcyxudWxsPT09Yz9iLnN0b3Jlcz1bYV06Yy5wdXNoKGEpKX1cbmZ1bmN0aW9uIG1pKGEsYixjLGQpe2IudmFsdWU9YztiLmdldFNuYXBzaG90PWQ7b2koYikmJnBpKGEpfWZ1bmN0aW9uIGtpKGEsYixjKXtyZXR1cm4gYyhmdW5jdGlvbigpe29pKGIpJiZwaShhKX0pfWZ1bmN0aW9uIG9pKGEpe3ZhciBiPWEuZ2V0U25hcHNob3Q7YT1hLnZhbHVlO3RyeXt2YXIgYz1iKCk7cmV0dXJuIUhlKGEsYyl9Y2F0Y2goZCl7cmV0dXJuITB9fWZ1bmN0aW9uIHBpKGEpe3ZhciBiPVpnKGEsMSk7bnVsbCE9PWImJm1oKGIsYSwxLC0xKX1cbmZ1bmN0aW9uIHFpKGEpe3ZhciBiPWNpKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6ZWksbGFzdFJlbmRlcmVkU3RhdGU6YX07Yi5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1yaS5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gbGkoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsLHN0b3JlczpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIHNpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiB0aShhLGIsYyxkKXt2YXIgZT1jaSgpO04uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9XG5mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1kaSgpO2Q9dm9pZCAwPT09ZD9udWxsOmQ7dmFyIGY9dm9pZCAwO2lmKG51bGwhPT1PKXt2YXIgZz1PLm1lbW9pemVkU3RhdGU7Zj1nLmRlc3Ryb3k7aWYobnVsbCE9PWQmJldoKGQsZy5kZXBzKSl7ZS5tZW1vaXplZFN0YXRlPWxpKGIsYyxmLGQpO3JldHVybn19Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsZixkKX1mdW5jdGlvbiB2aShhLGIpe3JldHVybiB0aSg4MzkwNjU2LDgsYSxiKX1mdW5jdGlvbiBqaShhLGIpe3JldHVybiB1aSgyMDQ4LDgsYSxiKX1mdW5jdGlvbiB3aShhLGIpe3JldHVybiB1aSg0LDIsYSxiKX1mdW5jdGlvbiB4aShhLGIpe3JldHVybiB1aSg0LDQsYSxiKX1cbmZ1bmN0aW9uIHlpKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gemkoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB1aSg0LDQseWkuYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gQWkoKXt9ZnVuY3Rpb24gQmkoYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBDaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBEaShhLGIsYyl7aWYoMD09PShSaCYyMSkpcmV0dXJuIGEuYmFzZVN0YXRlJiYoYS5iYXNlU3RhdGU9ITEsVWc9ITApLGEubWVtb2l6ZWRTdGF0ZT1jO0hlKGMsYil8fChjPXljKCksTi5sYW5lc3w9YyxoaHw9YyxhLmJhc2VTdGF0ZT0hMCk7cmV0dXJuIGJ9ZnVuY3Rpb24gRWkoYSxiKXt2YXIgYz1DO0M9MCE9PWMmJjQ+Yz9jOjQ7YSghMCk7dmFyIGQ9UWgudHJhbnNpdGlvbjtRaC50cmFuc2l0aW9uPXt9O3RyeXthKCExKSxiKCl9ZmluYWxseXtDPWMsUWgudHJhbnNpdGlvbj1kfX1mdW5jdGlvbiBGaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9bGgoYSk7Yz17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixjKTtlbHNlIGlmKGM9WWcoYSxiLGMsZCksbnVsbCE9PWMpe3ZhciBlPUwoKTttaChjLGEsZCxlKTtKaShjLGIsZCl9fVxuZnVuY3Rpb24gcmkoYSxiLGMpe3ZhciBkPWxoKGEpLGU9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsZSk7ZWxzZXt2YXIgZj1hLmFsdGVybmF0ZTtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1mfHwwPT09Zi5sYW5lcykmJihmPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZikpdHJ5e3ZhciBnPWIubGFzdFJlbmRlcmVkU3RhdGUsaD1mKGcsYyk7ZS5oYXNFYWdlclN0YXRlPSEwO2UuZWFnZXJTdGF0ZT1oO2lmKEhlKGgsZykpe3ZhciBrPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWs/KGUubmV4dD1lLFhnKGIpKTooZS5uZXh0PWsubmV4dCxrLm5leHQ9ZSk7Yi5pbnRlcmxlYXZlZD1lO3JldHVybn19Y2F0Y2gobCl7fWZpbmFsbHl7fWM9WWcoYSxiLGUsZCk7bnVsbCE9PWMmJihlPUwoKSxtaChjLGEsZCxlKSxKaShjLGIsZCkpfX1cbmZ1bmN0aW9uIEhpKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO3JldHVybiBhPT09Tnx8bnVsbCE9PWImJmI9PT1OfWZ1bmN0aW9uIElpKGEsYil7VGg9U2g9ITA7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn1mdW5jdGlvbiBKaShhLGIsYyl7aWYoMCE9PShjJjQxOTQyNDApKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxudmFyIGFpPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlSW5zZXJ0aW9uRWZmZWN0OlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRLHVzZU11dGFibGVTb3VyY2U6USx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpRLHVzZUlkOlEsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxZaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtjaSgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDp2aSx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdGkoNDE5NDMwOCxcbjQseWkuYmluZChudWxsLGIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0MTk0MzA4LDQsYSxiKX0sdXNlSW5zZXJ0aW9uRWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9Y2koKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX0sdXNlUmVkdWNlcjpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Y2koKTtiPXZvaWQgMCE9PWM/YyhiKTpiO2QubWVtb2l6ZWRTdGF0ZT1kLmJhc2VTdGF0ZT1iO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07ZC5xdWV1ZT1hO2E9YS5kaXNwYXRjaD1HaS5iaW5kKG51bGwsTixhKTtyZXR1cm5bZC5tZW1vaXplZFN0YXRlLGFdfSx1c2VSZWY6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jaSgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTpxaSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7cmV0dXJuIGNpKCkubWVtb2l6ZWRTdGF0ZT1hfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9cWkoITEpLGI9YVswXTthPUVpLmJpbmQobnVsbCxhWzFdKTtjaSgpLm1lbW9pemVkU3RhdGU9YTtyZXR1cm5bYixhXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbigpe30sdXNlU3luY0V4dGVybmFsU3RvcmU6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPU4sZT1jaSgpO2lmKEkpe2lmKHZvaWQgMD09PWMpdGhyb3cgRXJyb3IocCg0MDcpKTtjPWMoKX1lbHNle2M9YigpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGQsYixjKX1lLm1lbW9pemVkU3RhdGU9Yzt2YXIgZj17dmFsdWU6YyxnZXRTbmFwc2hvdDpifTtlLnF1ZXVlPWY7dmkoa2kuYmluZChudWxsLGQsXG5mLGEpLFthXSk7ZC5mbGFnc3w9MjA0ODtsaSg5LG1pLmJpbmQobnVsbCxkLGYsYyxiKSx2b2lkIDAsbnVsbCk7cmV0dXJuIGN9LHVzZUlkOmZ1bmN0aW9uKCl7dmFyIGE9Y2koKSxiPVIuaWRlbnRpZmllclByZWZpeDtpZihJKXt2YXIgYz1zZzt2YXIgZD1yZztjPShkJn4oMTw8MzItb2MoZCktMSkpLnRvU3RyaW5nKDMyKStjO2I9XCI6XCIrYitcIlJcIitjO2M9VWgrKzswPGMmJihiKz1cIkhcIitjLnRvU3RyaW5nKDMyKSk7Yis9XCI6XCJ9ZWxzZSBjPVZoKyssYj1cIjpcIitiK1wiclwiK2MudG9TdHJpbmcoMzIpK1wiOlwiO3JldHVybiBhLm1lbW9pemVkU3RhdGU9Yn0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxaaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpmaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZmkoZWkpfSxcbnVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1kaSgpO3JldHVybiBEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWZpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LCRoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmdpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBnaShlaSl9LHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1kaSgpO3JldHVybiBudWxsPT09XG5PP2IubWVtb2l6ZWRTdGF0ZT1hOkRpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9Z2koZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX07ZnVuY3Rpb24gS2koYSxiKXt0cnl7dmFyIGM9XCJcIixkPWI7ZG8gYys9UGEoZCksZD1kLnJldHVybjt3aGlsZShkKTt2YXIgZT1jfWNhdGNoKGYpe2U9XCJcXG5FcnJvciBnZW5lcmF0aW5nIHN0YWNrOiBcIitmLm1lc3NhZ2UrXCJcXG5cIitmLnN0YWNrfXJldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOmUsZGlnZXN0Om51bGx9fWZ1bmN0aW9uIExpKGEsYixjKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6bnVsbCxzdGFjazpudWxsIT1jP2M6bnVsbCxkaWdlc3Q6bnVsbCE9Yj9iOm51bGx9fVxuZnVuY3Rpb24gTWkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE5pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIE9pKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1BpfHwoUGk9ITAsUWk9ZCk7TWkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBSaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIGQoZSl9O2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1TaT9TaT1uZXcgU2V0KFt0aGlzXSk6U2kuYWRkKHRoaXMpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbmZ1bmN0aW9uIFRpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtpZihudWxsPT09ZCl7ZD1hLnBpbmdDYWNoZT1uZXcgTmk7dmFyIGU9bmV3IFNldDtkLnNldChiLGUpfWVsc2UgZT1kLmdldChiKSx2b2lkIDA9PT1lJiYoZT1uZXcgU2V0LGQuc2V0KGIsZSkpO2UuaGFzKGMpfHwoZS5hZGQoYyksYT1VaS5iaW5kKG51bGwsYSxiLGMpLGIudGhlbihhLGEpKX1mdW5jdGlvbiBWaShhKXtkb3t2YXIgYjtpZihiPTEzPT09YS50YWcpYj1hLm1lbW9pemVkU3RhdGUsYj1udWxsIT09Yj9udWxsIT09Yi5kZWh5ZHJhdGVkPyEwOiExOiEwO2lmKGIpcmV0dXJuIGE7YT1hLnJldHVybn13aGlsZShudWxsIT09YSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBXaShhLGIsYyxkLGUpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiBhPT09Yj9hLmZsYWdzfD02NTUzNjooYS5mbGFnc3w9MTI4LGMuZmxhZ3N8PTEzMTA3MixjLmZsYWdzJj0tNTI4MDUsMT09PWMudGFnJiYobnVsbD09PWMuYWx0ZXJuYXRlP2MudGFnPTE3OihiPWNoKC0xLDEpLGIudGFnPTIsZGgoYyxiLDEpKSksYy5sYW5lc3w9MSksYTthLmZsYWdzfD02NTUzNjthLmxhbmVzPWU7cmV0dXJuIGF9dmFyIFhpPXVhLlJlYWN0Q3VycmVudE93bmVyLFVnPSExO2Z1bmN0aW9uIFlpKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/Q2goYixudWxsLGMsZCk6QmgoYixhLmNoaWxkLGMsZCl9XG5mdW5jdGlvbiBaaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7VGcoYixlKTtkPVhoKGEsYixjLGQsZixlKTtjPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZjJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWooYSxiLGMsZCxlKXtpZihudWxsPT09YSl7dmFyIGY9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYhYmooZikmJnZvaWQgMD09PWYuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWYsY2ooYSxiLGYsZCxlKTthPXloKGMudHlwZSxudWxsLGQsYixiLm1vZGUsZSk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfWY9YS5jaGlsZDtpZigwPT09KGEubGFuZXMmZSkpe3ZhciBnPWYubWVtb2l6ZWRQcm9wcztjPWMuY29tcGFyZTtjPW51bGwhPT1jP2M6SWU7aWYoYyhnLGQpJiZhLnJlZj09PWIucmVmKXJldHVybiAkaShhLGIsZSl9Yi5mbGFnc3w9MTthPXdoKGYsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2ooYSxiLGMsZCxlKXtpZihudWxsIT09YSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKEllKGYsZCkmJmEucmVmPT09Yi5yZWYpaWYoVWc9ITEsYi5wZW5kaW5nUHJvcHM9ZD1mLDAhPT0oYS5sYW5lcyZlKSkwIT09KGEuZmxhZ3MmMTMxMDcyKSYmKFVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsJGkoYSxiLGUpfXJldHVybiBkaihhLGIsYyxkLGUpfVxuZnVuY3Rpb24gZWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxHKGZqLGdqKSxnanw9YztlbHNle2lmKDA9PT0oYyYxMDczNzQxODI0KSlyZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LGIudXBkYXRlUXVldWU9bnVsbCxHKGZqLGdqKSxnanw9YSxudWxsO2IubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH07ZD1udWxsIT09Zj9mLmJhc2VMYW5lczpjO0coZmosZ2opO2dqfD1kfWVsc2UgbnVsbCE9PVxuZj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsRyhmaixnaiksZ2p8PWQ7WWkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGooYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTJ9ZnVuY3Rpb24gZGooYSxiLGMsZCxlKXt2YXIgZj1aZihjKT9YZjpILmN1cnJlbnQ7Zj1ZZihiLGYpO1RnKGIsZSk7Yz1YaChhLGIsYyxkLGYsZSk7ZD1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmZCYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlqKGEsYixjLGQsZSl7aWYoWmYoYykpe3ZhciBmPSEwO2NnKGIpfWVsc2UgZj0hMTtUZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSlqaihhLGIpLHBoKGIsYyxkKSxyaChiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1WZyhsKToobD1aZihjKT9YZjpILmN1cnJlbnQsbD1ZZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxxPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PWR8fGshPT1sKSYmcWgoYixnLGQsbCk7JGc9ITE7dmFyIHI9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8ciE9PWt8fFdmLmN1cnJlbnR8fCRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKGtoKGIsYyxtLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD0kZ3x8b2goYixjLGgsZCxyLGssbCkpPyhxfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCkpOlxuKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7YmgoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpMZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO3E9Yi5wZW5kaW5nUHJvcHM7cj1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az1WZyhrKTooaz1aZihjKT9YZjpILmN1cnJlbnQsaz1ZZihiLGspKTt2YXIgeT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgeXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXF8fHIhPT1rKSYmcWgoYixnLGQsayk7JGc9ITE7cj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO3ZhciBuPWIubWVtb2l6ZWRTdGF0ZTtoIT09cXx8ciE9PW58fFdmLmN1cnJlbnR8fCRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgeSYmKGtoKGIsYyx5LGQpLG49Yi5tZW1vaXplZFN0YXRlKSwobD0kZ3x8b2goYixjLGwsZCxyLG4sayl8fCExKT8obXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcbmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCxuLGspKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZmxhZ3N8PTEwMjQpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9biksZy5wcm9wcz1kLGcuc3RhdGU9bixnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1cbmEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksZD0hMSl9cmV0dXJuIGtqKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGtqKGEsYixjLGQsZSxmKXtoaihhLGIpO3ZhciBnPTAhPT0oYi5mbGFncyYxMjgpO2lmKCFkJiYhZylyZXR1cm4gZSYmZGcoYixjLCExKSwkaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtYaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPUJoKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9QmgoYixudWxsLGgsZikpOllpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJmRnKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gbGooYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9hZyhhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZhZyhhLGIuY29udGV4dCwhMSk7SWgoYSxiLmNvbnRhaW5lckluZm8pfVxuZnVuY3Rpb24gbWooYSxiLGMsZCxlKXtJZygpO0pnKGUpO2IuZmxhZ3N8PTI1NjtZaShhLGIsYyxkKTtyZXR1cm4gYi5jaGlsZH12YXIgbmo9e2RlaHlkcmF0ZWQ6bnVsbCx0cmVlQ29udGV4dDpudWxsLHJldHJ5TGFuZTowfTtmdW5jdGlvbiBvaihhKXtyZXR1cm57YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH19XG5mdW5jdGlvbiBwaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1NLmN1cnJlbnQsZj0hMSxnPTAhPT0oYi5mbGFncyYxMjgpLGg7KGg9Zyl8fChoPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7aWYoaClmPSEwLGIuZmxhZ3MmPS0xMjk7ZWxzZSBpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSllfD0xO0coTSxlJjEpO2lmKG51bGw9PT1hKXtFZyhiKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmKGE9YS5kZWh5ZHJhdGVkLG51bGwhPT1hKSlyZXR1cm4gMD09PShiLm1vZGUmMSk/Yi5sYW5lcz0xOlwiJCFcIj09PWEuZGF0YT9iLmxhbmVzPTg6Yi5sYW5lcz0xMDczNzQxODI0LG51bGw7Zz1kLmNoaWxkcmVuO2E9ZC5mYWxsYmFjaztyZXR1cm4gZj8oZD1iLm1vZGUsZj1iLmNoaWxkLGc9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpnfSwwPT09KGQmMSkmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1cbmcpOmY9cWooZyxkLDAsbnVsbCksYT1BaChhLGQsYyxudWxsKSxmLnJldHVybj1iLGEucmV0dXJuPWIsZi5zaWJsaW5nPWEsYi5jaGlsZD1mLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT1vaihjKSxiLm1lbW9pemVkU3RhdGU9bmosYSk6cmooYixnKX1lPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSYmKGg9ZS5kZWh5ZHJhdGVkLG51bGwhPT1oKSlyZXR1cm4gc2ooYSxiLGcsZCxoLGUsYyk7aWYoZil7Zj1kLmZhbGxiYWNrO2c9Yi5tb2RlO2U9YS5jaGlsZDtoPWUuc2libGluZzt2YXIgaz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmQuY2hpbGRyZW59OzA9PT0oZyYxKSYmYi5jaGlsZCE9PWU/KGQ9Yi5jaGlsZCxkLmNoaWxkTGFuZXM9MCxkLnBlbmRpbmdQcm9wcz1rLGIuZGVsZXRpb25zPW51bGwpOihkPXdoKGUsayksZC5zdWJ0cmVlRmxhZ3M9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQpO251bGwhPT1oP2Y9d2goaCxmKTooZj1BaChmLGcsYyxudWxsKSxmLmZsYWdzfD0yKTtmLnJldHVybj1cbmI7ZC5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7ZD1mO2Y9Yi5jaGlsZDtnPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZTtnPW51bGw9PT1nP29qKGMpOntiYXNlTGFuZXM6Zy5iYXNlTGFuZXN8YyxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfTtmLm1lbW9pemVkU3RhdGU9ZztmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZH1mPWEuY2hpbGQ7YT1mLnNpYmxpbmc7ZD13aChmLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59KTswPT09KGIubW9kZSYxKSYmKGQubGFuZXM9Yyk7ZC5yZXR1cm49YjtkLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGM9Yi5kZWxldGlvbnMsbnVsbD09PWM/KGIuZGVsZXRpb25zPVthXSxiLmZsYWdzfD0xNik6Yy5wdXNoKGEpKTtiLmNoaWxkPWQ7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGR9XG5mdW5jdGlvbiByaihhLGIpe2I9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Yn0sYS5tb2RlLDAsbnVsbCk7Yi5yZXR1cm49YTtyZXR1cm4gYS5jaGlsZD1ifWZ1bmN0aW9uIHRqKGEsYixjLGQpe251bGwhPT1kJiZKZyhkKTtCaChiLGEuY2hpbGQsbnVsbCxjKTthPXJqKGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4pO2EuZmxhZ3N8PTI7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGF9XG5mdW5jdGlvbiBzaihhLGIsYyxkLGUsZixnKXtpZihjKXtpZihiLmZsYWdzJjI1NilyZXR1cm4gYi5mbGFncyY9LTI1NyxkPUxpKEVycm9yKHAoNDIyKSkpLHRqKGEsYixnLGQpO2lmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpcmV0dXJuIGIuY2hpbGQ9YS5jaGlsZCxiLmZsYWdzfD0xMjgsbnVsbDtmPWQuZmFsbGJhY2s7ZT1iLm1vZGU7ZD1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSxlLDAsbnVsbCk7Zj1BaChmLGUsZyxudWxsKTtmLmZsYWdzfD0yO2QucmV0dXJuPWI7Zi5yZXR1cm49YjtkLnNpYmxpbmc9ZjtiLmNoaWxkPWQ7MCE9PShiLm1vZGUmMSkmJkJoKGIsYS5jaGlsZCxudWxsLGcpO2IuY2hpbGQubWVtb2l6ZWRTdGF0ZT1vaihnKTtiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGZ9aWYoMD09PShiLm1vZGUmMSkpcmV0dXJuIHRqKGEsYixnLG51bGwpO2lmKFwiJCFcIj09PWUuZGF0YSl7ZD1lLm5leHRTaWJsaW5nJiZlLm5leHRTaWJsaW5nLmRhdGFzZXQ7XG5pZihkKXZhciBoPWQuZGdzdDtkPWg7Zj1FcnJvcihwKDQxOSkpO2Q9TGkoZixkLHZvaWQgMCk7cmV0dXJuIHRqKGEsYixnLGQpfWg9MCE9PShnJmEuY2hpbGRMYW5lcyk7aWYoVWd8fGgpe2Q9UjtpZihudWxsIT09ZCl7c3dpdGNoKGcmLWcpe2Nhc2UgNDplPTI7YnJlYWs7Y2FzZSAxNjplPTg7YnJlYWs7Y2FzZSA2NDpjYXNlIDEyODpjYXNlIDI1NjpjYXNlIDUxMjpjYXNlIDEwMjQ6Y2FzZSAyMDQ4OmNhc2UgNDA5NjpjYXNlIDgxOTI6Y2FzZSAxNjM4NDpjYXNlIDMyNzY4OmNhc2UgNjU1MzY6Y2FzZSAxMzEwNzI6Y2FzZSAyNjIxNDQ6Y2FzZSA1MjQyODg6Y2FzZSAxMDQ4NTc2OmNhc2UgMjA5NzE1MjpjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OmU9MzI7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6ZT0yNjg0MzU0NTY7YnJlYWs7ZGVmYXVsdDplPTB9ZT0wIT09KGUmKGQuc3VzcGVuZGVkTGFuZXN8ZykpPzA6ZTtcbjAhPT1lJiZlIT09Zi5yZXRyeUxhbmUmJihmLnJldHJ5TGFuZT1lLFpnKGEsZSksbWgoZCxhLGUsLTEpKX11aigpO2Q9TGkoRXJyb3IocCg0MjEpKSk7cmV0dXJuIHRqKGEsYixnLGQpfWlmKFwiJD9cIj09PWUuZGF0YSlyZXR1cm4gYi5mbGFnc3w9MTI4LGIuY2hpbGQ9YS5jaGlsZCxiPXZqLmJpbmQobnVsbCxhKSxlLl9yZWFjdFJldHJ5PWIsbnVsbDthPWYudHJlZUNvbnRleHQ7eWc9TGYoZS5uZXh0U2libGluZyk7eGc9YjtJPSEwO3pnPW51bGw7bnVsbCE9PWEmJihvZ1twZysrXT1yZyxvZ1twZysrXT1zZyxvZ1twZysrXT1xZyxyZz1hLmlkLHNnPWEub3ZlcmZsb3cscWc9Yik7Yj1yaihiLGQuY2hpbGRyZW4pO2IuZmxhZ3N8PTQwOTY7cmV0dXJuIGJ9ZnVuY3Rpb24gd2ooYSxiLGMpe2EubGFuZXN8PWI7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbCE9PWQmJihkLmxhbmVzfD1iKTtTZyhhLnJldHVybixiLGMpfVxuZnVuY3Rpb24geGooYSxiLGMsZCxlKXt2YXIgZj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWY/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbE1vZGU6ZX06KGYuaXNCYWNrd2FyZHM9YixmLnJlbmRlcmluZz1udWxsLGYucmVuZGVyaW5nU3RhcnRUaW1lPTAsZi5sYXN0PWQsZi50YWlsPWMsZi50YWlsTW9kZT1lKX1cbmZ1bmN0aW9uIHlqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7WWkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9MTI4O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmd2ooYSxjLGIpO2Vsc2UgaWYoMTk9PT1hLnRhZyl3aihhLGMsYik7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUcoTSxkKTtpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09TWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt4aihiLCExLGUsYyxmKTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PU1oKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX14aihiLCEwLGMsbnVsbCxmKTticmVhaztjYXNlIFwidG9nZXRoZXJcIjp4aihiLCExLG51bGwsbnVsbCx2b2lkIDApO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBqaihhLGIpezA9PT0oYi5tb2RlJjEpJiZudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKX1mdW5jdGlvbiAkaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7aGh8PWIubGFuZXM7aWYoMD09PShjJmIuY2hpbGRMYW5lcykpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHAoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPXdoKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz13aChhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gemooYSxiLGMpe3N3aXRjaChiLnRhZyl7Y2FzZSAzOmxqKGIpO0lnKCk7YnJlYWs7Y2FzZSA1OktoKGIpO2JyZWFrO2Nhc2UgMTpaZihiLnR5cGUpJiZjZyhiKTticmVhaztjYXNlIDQ6SWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTticmVhaztjYXNlIDEwOnZhciBkPWIudHlwZS5fY29udGV4dCxlPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWU7YnJlYWs7Y2FzZSAxMzpkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCl7aWYobnVsbCE9PWQuZGVoeWRyYXRlZClyZXR1cm4gRyhNLE0uY3VycmVudCYxKSxiLmZsYWdzfD0xMjgsbnVsbDtpZigwIT09KGMmYi5jaGlsZC5jaGlsZExhbmVzKSlyZXR1cm4gcGooYSxiLGMpO0coTSxNLmN1cnJlbnQmMSk7YT0kaShhLGIsYyk7cmV0dXJuIG51bGwhPT1hP2Euc2libGluZzpudWxsfUcoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZcbmIuY2hpbGRMYW5lcyk7aWYoMCE9PShhLmZsYWdzJjEyOCkpe2lmKGQpcmV0dXJuIHlqKGEsYixjKTtiLmZsYWdzfD0xMjh9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtHKE0sTS5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBiLmxhbmVzPTAsZWooYSxiLGMpfXJldHVybiAkaShhLGIsYyl9dmFyIEFqLEJqLENqLERqO1xuQWo9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O0JqPWZ1bmN0aW9uKCl7fTtcbkNqPWZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWEubWVtb2l6ZWRQcm9wcztpZihlIT09ZCl7YT1iLnN0YXRlTm9kZTtIaChFaC5jdXJyZW50KTt2YXIgZj1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjplPVlhKGEsZSk7ZD1ZYShhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9QSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX11YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PWwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiZcbihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHwoYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsXG5jKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRChcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixjKTt2YXIgbD1mO2lmKGIudXBkYXRlUXVldWU9bCliLmZsYWdzfD00fX07RGo9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmZsYWdzfD00KX07XG5mdW5jdGlvbiBFaihhLGIpe2lmKCFJKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBTKGEpe3ZhciBiPW51bGwhPT1hLmFsdGVybmF0ZSYmYS5hbHRlcm5hdGUuY2hpbGQ9PT1hLmNoaWxkLGM9MCxkPTA7aWYoYilmb3IodmFyIGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MmMTQ2ODAwNjQsZHw9ZS5mbGFncyYxNDY4MDA2NCxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Vsc2UgZm9yKGU9YS5jaGlsZDtudWxsIT09ZTspY3w9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZHw9ZS5zdWJ0cmVlRmxhZ3MsZHw9ZS5mbGFncyxlLnJldHVybj1hLGU9ZS5zaWJsaW5nO2Euc3VidHJlZUZsYWdzfD1kO2EuY2hpbGRMYW5lcz1jO3JldHVybiBifVxuZnVuY3Rpb24gRmooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIFMoYiksbnVsbDtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMzpkPWIuc3RhdGVOb2RlO0poKCk7RShXZik7RShIKTtPaCgpO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClHZyhiKT9iLmZsYWdzfD00Om51bGw9PT1hfHxhLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYwPT09KGIuZmxhZ3MmMjU2KXx8KGIuZmxhZ3N8PTEwMjQsbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpKTtCaihhLGIpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA1OkxoKGIpO3ZhciBlPUhoKEdoLmN1cnJlbnQpO1xuYz1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKUNqKGEsYixjLGQsZSksYS5yZWYhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtTKGIpO3JldHVybiBudWxsfWE9SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7ZFtQZl09ZjthPTAhPT0oYi5tb2RlJjEpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGQpO0QoXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmQpO0QoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoZCxmKTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEQoXCJpbnZhbGlkXCIsZCl9dWIoYyxmKTtlPW51bGw7Zm9yKHZhciBnIGluIGYpaWYoZi5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGg9ZltnXTtcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgaD9kLnRleHRDb250ZW50IT09aCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsaCxhKSxlPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKCEwIT09Zi5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQudGV4dENvbnRlbnQsXG5oLGEpLGU9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTplYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmXCJvblNjcm9sbFwiPT09ZyYmRChcInNjcm9sbFwiLGQpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtkYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPUJmKX1kPWU7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSYmKGE9a2IoYykpO1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XG5cInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoYyx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChjKSxcInNlbGVjdFwiPT09YyYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsYyk7YVtPZl09YjthW1BmXT1kO0FqKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTthOntnPXZiKGMsZCk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsYSk7RChcImNsb3NlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpEKFwiZXJyb3JcIixcbmEpO0QoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpaYShhLGQpO2U9WWEoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWQ7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFkLm11bHRpcGxlfTtlPUEoe30sZCx7dmFsdWU6dm9pZCAwfSk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihhLGQpO2U9Z2IoYSxkKTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXViKGMsZSk7aD1lO2ZvcihmIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGs9aFtmXTtcInN0eWxlXCI9PT1mP3NiKGEsayk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZuYihhLGspKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09XG5jfHxcIlwiIT09aykmJm9iKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZvYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGVhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkQoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZ0YShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2RiKGEsZCwhMSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoYSk7amIoYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWQudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixcIlwiK1NhKGQudmFsdWUpKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWQubXVsdGlwbGU7Zj1kLnZhbHVlO251bGwhPWY/ZmIoYSwhIWQubXVsdGlwbGUsZiwhMSk6bnVsbCE9ZC5kZWZhdWx0VmFsdWUmJmZiKGEsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLFxuITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1CZil9c3dpdGNoKGMpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ZD0hIWQuYXV0b0ZvY3VzO2JyZWFrIGE7Y2FzZSBcImltZ1wiOmQ9ITA7YnJlYWsgYTtkZWZhdWx0OmQ9ITF9fWQmJihiLmZsYWdzfD00KX1udWxsIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mil9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGooYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7Yz1IaChHaC5jdXJyZW50KTtIaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2lmKGY9ZC5ub2RlVmFsdWUhPT1jKWlmKGE9XG54ZyxudWxsIT09YSlzd2l0Y2goYS50YWcpe2Nhc2UgMzpBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKTticmVhaztjYXNlIDU6ITAhPT1hLm1lbW9pemVkUHJvcHMuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLm5vZGVWYWx1ZSxjLDAhPT0oYS5tb2RlJjEpKX1mJiYoYi5mbGFnc3w9NCl9ZWxzZSBkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFtPZl09YixiLnN0YXRlTm9kZT1kfVMoYik7cmV0dXJuIG51bGw7Y2FzZSAxMzpFKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlJiZudWxsIT09YS5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQpe2lmKEkmJm51bGwhPT15ZyYmMCE9PShiLm1vZGUmMSkmJjA9PT0oYi5mbGFncyYxMjgpKUhnKCksSWcoKSxiLmZsYWdzfD05ODU2MCxmPSExO2Vsc2UgaWYoZj1HZyhiKSxudWxsIT09ZCYmbnVsbCE9PWQuZGVoeWRyYXRlZCl7aWYobnVsbD09PVxuYSl7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTgpKTtmPWIubWVtb2l6ZWRTdGF0ZTtmPW51bGwhPT1mP2YuZGVoeWRyYXRlZDpudWxsO2lmKCFmKXRocm93IEVycm9yKHAoMzE3KSk7ZltPZl09Yn1lbHNlIElnKCksMD09PShiLmZsYWdzJjEyOCkmJihiLm1lbW9pemVkU3RhdGU9bnVsbCksYi5mbGFnc3w9NDtTKGIpO2Y9ITF9ZWxzZSBudWxsIT09emcmJihHaih6Zyksemc9bnVsbCksZj0hMDtpZighZilyZXR1cm4gYi5mbGFncyY2NTUzNj9iOm51bGx9aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7ZCE9PShudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSkmJmQmJihiLmNoaWxkLmZsYWdzfD04MTkyLDAhPT0oYi5tb2RlJjEpJiYobnVsbD09PWF8fDAhPT0oTS5jdXJyZW50JjEpPzA9PT1UJiYoVD0zKTp1aigpKSk7bnVsbCE9PWIudXBkYXRlUXVldWUmJihiLmZsYWdzfD00KTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxcbkJqKGEsYiksbnVsbD09PWEmJnNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLFMoYiksbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLFMoYiksbnVsbDtjYXNlIDE3OnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDE5OkUoTSk7Zj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWYpcmV0dXJuIFMoYiksbnVsbDtkPTAhPT0oYi5mbGFncyYxMjgpO2c9Zi5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZClFaihmLCExKTtlbHNle2lmKDAhPT1UfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9TWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTEyODtFaihmLCExKTtkPWcudXBkYXRlUXVldWU7bnVsbCE9PWQmJihiLnVwZGF0ZVF1ZXVlPWQsYi5mbGFnc3w9NCk7Yi5zdWJ0cmVlRmxhZ3M9MDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0xNDY4MDA2Nixcbmc9Zi5hbHRlcm5hdGUsbnVsbD09PWc/KGYuY2hpbGRMYW5lcz0wLGYubGFuZXM9YSxmLmNoaWxkPW51bGwsZi5zdWJ0cmVlRmxhZ3M9MCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYuc3VidHJlZUZsYWdzPTAsZi5kZWxldGlvbnM9bnVsbCxmLm1lbW9pemVkUHJvcHM9Zy5tZW1vaXplZFByb3BzLGYubWVtb2l6ZWRTdGF0ZT1nLm1lbW9pemVkU3RhdGUsZi51cGRhdGVRdWV1ZT1nLnVwZGF0ZVF1ZXVlLGYudHlwZT1nLnR5cGUsYT1nLmRlcGVuZGVuY2llcyxmLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0coTSxNLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPVxuYS5zaWJsaW5nfW51bGwhPT1mLnRhaWwmJkIoKT5IaiYmKGIuZmxhZ3N8PTEyOCxkPSEwLEVqKGYsITEpLGIubGFuZXM9NDE5NDMwNCl9ZWxzZXtpZighZClpZihhPU1oKGcpLG51bGwhPT1hKXtpZihiLmZsYWdzfD0xMjgsZD0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRWooZiwhMCksbnVsbD09PWYudGFpbCYmXCJoaWRkZW5cIj09PWYudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIUkpcmV0dXJuIFMoYiksbnVsbH1lbHNlIDIqQigpLWYucmVuZGVyaW5nU3RhcnRUaW1lPkhqJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PTEyOCxkPSEwLEVqKGYsITEpLGIubGFuZXM9NDE5NDMwNCk7Zi5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1mLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGYubGFzdD1nKX1pZihudWxsIT09Zi50YWlsKXJldHVybiBiPWYudGFpbCxmLnJlbmRlcmluZz1cbmIsZi50YWlsPWIuc2libGluZyxmLnJlbmRlcmluZ1N0YXJ0VGltZT1CKCksYi5zaWJsaW5nPW51bGwsYz1NLmN1cnJlbnQsRyhNLGQ/YyYxfDI6YyYxKSxiO1MoYik7cmV0dXJuIG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLGQ9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PWQmJihiLmZsYWdzfD04MTkyKSxkJiYwIT09KGIubW9kZSYxKT8wIT09KGdqJjEwNzM3NDE4MjQpJiYoUyhiKSxiLnN1YnRyZWVGbGFncyY2JiYoYi5mbGFnc3w9ODE5MikpOlMoYiksbnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2Nhc2UgMjU6cmV0dXJuIG51bGx9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBKaihhLGIpe3dnKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLGE9Yi5mbGFncyxhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMzpyZXR1cm4gSmgoKSxFKFdmKSxFKEgpLE9oKCksYT1iLmZsYWdzLDAhPT0oYSY2NTUzNikmJjA9PT0oYSYxMjgpPyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgNTpyZXR1cm4gTGgoYiksbnVsbDtjYXNlIDEzOkUoTSk7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1iLmFsdGVybmF0ZSl0aHJvdyBFcnJvcihwKDM0MCkpO0lnKCl9YT1iLmZsYWdzO3JldHVybiBhJjY1NTM2PyhiLmZsYWdzPWEmLTY1NTM3fDEyOCxiKTpudWxsO2Nhc2UgMTk6cmV0dXJuIEUoTSksbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksbnVsbDtjYXNlIDEwOnJldHVybiBSZyhiLnR5cGUuX2NvbnRleHQpLG51bGw7Y2FzZSAyMjpjYXNlIDIzOnJldHVybiBJaigpLFxubnVsbDtjYXNlIDI0OnJldHVybiBudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fXZhciBLaj0hMSxVPSExLExqPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0LFY9bnVsbDtmdW5jdGlvbiBNaihhLGIpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKGQpe1coYSxiLGQpfWVsc2UgYy5jdXJyZW50PW51bGx9ZnVuY3Rpb24gTmooYSxiLGMpe3RyeXtjKCl9Y2F0Y2goZCl7VyhhLGIsZCl9fXZhciBPaj0hMTtcbmZ1bmN0aW9uIFBqKGEsYil7Q2Y9ZGQ7YT1NZSgpO2lmKE5lKGEpKXtpZihcInNlbGVjdGlvblN0YXJ0XCJpbiBhKXZhciBjPXtzdGFydDphLnNlbGVjdGlvblN0YXJ0LGVuZDphLnNlbGVjdGlvbkVuZH07ZWxzZSBhOntjPShjPWEub3duZXJEb2N1bWVudCkmJmMuZGVmYXVsdFZpZXd8fHdpbmRvdzt2YXIgZD1jLmdldFNlbGVjdGlvbiYmYy5nZXRTZWxlY3Rpb24oKTtpZihkJiYwIT09ZC5yYW5nZUNvdW50KXtjPWQuYW5jaG9yTm9kZTt2YXIgZT1kLmFuY2hvck9mZnNldCxmPWQuZm9jdXNOb2RlO2Q9ZC5mb2N1c09mZnNldDt0cnl7Yy5ub2RlVHlwZSxmLm5vZGVUeXBlfWNhdGNoKEYpe2M9bnVsbDticmVhayBhfXZhciBnPTAsaD0tMSxrPS0xLGw9MCxtPTAscT1hLHI9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB5Ozspe3EhPT1jfHwwIT09ZSYmMyE9PXEubm9kZVR5cGV8fChoPWcrZSk7cSE9PWZ8fDAhPT1kJiYzIT09cS5ub2RlVHlwZXx8KGs9ZytkKTszPT09cS5ub2RlVHlwZSYmKGcrPVxucS5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHk9cS5maXJzdENoaWxkKSlicmVhaztyPXE7cT15fWZvcig7Oyl7aWYocT09PWEpYnJlYWsgYjtyPT09YyYmKytsPT09ZSYmKGg9Zyk7cj09PWYmJisrbT09PWQmJihrPWcpO2lmKG51bGwhPT0oeT1xLm5leHRTaWJsaW5nKSlicmVhaztxPXI7cj1xLnBhcmVudE5vZGV9cT15fWM9LTE9PT1ofHwtMT09PWs/bnVsbDp7c3RhcnQ6aCxlbmQ6a319ZWxzZSBjPW51bGx9Yz1jfHx7c3RhcnQ6MCxlbmQ6MH19ZWxzZSBjPW51bGw7RGY9e2ZvY3VzZWRFbGVtOmEsc2VsZWN0aW9uUmFuZ2U6Y307ZGQ9ITE7Zm9yKFY9YjtudWxsIT09VjspaWYoYj1WLGE9Yi5jaGlsZCwwIT09KGIuc3VidHJlZUZsYWdzJjEwMjgpJiZudWxsIT09YSlhLnJldHVybj1iLFY9YTtlbHNlIGZvcig7bnVsbCE9PVY7KXtiPVY7dHJ5e3ZhciBuPWIuYWx0ZXJuYXRlO2lmKDAhPT0oYi5mbGFncyYxMDI0KSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6YnJlYWs7XG5jYXNlIDE6aWYobnVsbCE9PW4pe3ZhciB0PW4ubWVtb2l6ZWRQcm9wcyxKPW4ubWVtb2l6ZWRTdGF0ZSx4PWIuc3RhdGVOb2RlLHc9eC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP3Q6TGcoYi50eXBlLHQpLEopO3guX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9d31icmVhaztjYXNlIDM6dmFyIHU9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzsxPT09dS5ub2RlVHlwZT91LnRleHRDb250ZW50PVwiXCI6OT09PXUubm9kZVR5cGUmJnUuZG9jdW1lbnRFbGVtZW50JiZ1LnJlbW92ZUNoaWxkKHUuZG9jdW1lbnRFbGVtZW50KTticmVhaztjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OmJyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9fWNhdGNoKEYpe1coYixiLnJldHVybixGKX1hPWIuc2libGluZztpZihudWxsIT09YSl7YS5yZXR1cm49Yi5yZXR1cm47Vj1hO2JyZWFrfVY9Yi5yZXR1cm59bj1PajtPaj0hMTtyZXR1cm4gbn1cbmZ1bmN0aW9uIFFqKGEsYixjKXt2YXIgZD1iLnVwZGF0ZVF1ZXVlO2Q9bnVsbCE9PWQ/ZC5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWQpe3ZhciBlPWQ9ZC5uZXh0O2Rve2lmKChlLnRhZyZhKT09PWEpe3ZhciBmPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWYmJk5qKGIsYyxmKX1lPWUubmV4dH13aGlsZShlIT09ZCl9fWZ1bmN0aW9uIFJqKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBTaihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1jO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fVxuZnVuY3Rpb24gVGooYSl7dmFyIGI9YS5hbHRlcm5hdGU7bnVsbCE9PWImJihhLmFsdGVybmF0ZT1udWxsLFRqKGIpKTthLmNoaWxkPW51bGw7YS5kZWxldGlvbnM9bnVsbDthLnNpYmxpbmc9bnVsbDs1PT09YS50YWcmJihiPWEuc3RhdGVOb2RlLG51bGwhPT1iJiYoZGVsZXRlIGJbT2ZdLGRlbGV0ZSBiW1BmXSxkZWxldGUgYltvZl0sZGVsZXRlIGJbUWZdLGRlbGV0ZSBiW1JmXSkpO2Euc3RhdGVOb2RlPW51bGw7YS5yZXR1cm49bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EubWVtb2l6ZWRQcm9wcz1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDthLnVwZGF0ZVF1ZXVlPW51bGx9ZnVuY3Rpb24gVWooYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBWaihhKXthOmZvcig7Oyl7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxVaihhLnJldHVybikpcmV0dXJuIG51bGw7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2ZvcihhPWEuc2libGluZzs1IT09YS50YWcmJjYhPT1hLnRhZyYmMTghPT1hLnRhZzspe2lmKGEuZmxhZ3MmMiljb250aW51ZSBhO2lmKG51bGw9PT1hLmNoaWxkfHw0PT09YS50YWcpY29udGludWUgYTtlbHNlIGEuY2hpbGQucmV0dXJuPWEsYT1hLmNoaWxkfWlmKCEoYS5mbGFncyYyKSlyZXR1cm4gYS5zdGF0ZU5vZGV9fVxuZnVuY3Rpb24gV2ooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPUJmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspV2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gWGooYSxiLGMpe3ZhciBkPWEudGFnO2lmKDU9PT1kfHw2PT09ZClhPWEuc3RhdGVOb2RlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihYaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVhqKGEsYixjKSxhPWEuc2libGluZ312YXIgWD1udWxsLFlqPSExO2Z1bmN0aW9uIFpqKGEsYixjKXtmb3IoYz1jLmNoaWxkO251bGwhPT1jOylhayhhLGIsYyksYz1jLnNpYmxpbmd9XG5mdW5jdGlvbiBhayhhLGIsYyl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyVW5tb3VudCl0cnl7bGMub25Db21taXRGaWJlclVubW91bnQoa2MsYyl9Y2F0Y2goaCl7fXN3aXRjaChjLnRhZyl7Y2FzZSA1OlV8fE1qKGMsYik7Y2FzZSA2OnZhciBkPVgsZT1ZajtYPW51bGw7WmooYSxiLGMpO1g9ZDtZaj1lO251bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjKTphLnJlbW92ZUNoaWxkKGMpKTpYLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSAxODpudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9LZihhLnBhcmVudE5vZGUsYyk6MT09PWEubm9kZVR5cGUmJktmKGEsYyksYmQoYSkpOktmKFgsYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDQ6ZD1YO2U9WWo7WD1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO1xuWmooYSxiLGMpO1g9ZDtZaj1lO2JyZWFrO2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTppZighVSYmKGQ9Yy51cGRhdGVRdWV1ZSxudWxsIT09ZCYmKGQ9ZC5sYXN0RWZmZWN0LG51bGwhPT1kKSkpe2U9ZD1kLm5leHQ7ZG97dmFyIGY9ZSxnPWYuZGVzdHJveTtmPWYudGFnO3ZvaWQgMCE9PWcmJigwIT09KGYmMik/TmooYyxiLGcpOjAhPT0oZiY0KSYmTmooYyxiLGcpKTtlPWUubmV4dH13aGlsZShlIT09ZCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMTppZighVSYmKE1qKGMsYiksZD1jLnN0YXRlTm9kZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnRXaWxsVW5tb3VudCkpdHJ5e2QucHJvcHM9Yy5tZW1vaXplZFByb3BzLGQuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGQuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChoKXtXKGMsYixoKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAyMTpaaihhLGIsYyk7YnJlYWs7Y2FzZSAyMjpjLm1vZGUmMT8oVT0oZD1VKXx8bnVsbCE9PVxuYy5tZW1vaXplZFN0YXRlLFpqKGEsYixjKSxVPWQpOlpqKGEsYixjKTticmVhaztkZWZhdWx0OlpqKGEsYixjKX19ZnVuY3Rpb24gYmsoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgTGopO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1jay5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIGRrKGEsYil7dmFyIGM9Yi5kZWxldGlvbnM7aWYobnVsbCE9PWMpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF07dHJ5e3ZhciBmPWEsZz1iLGg9ZzthOmZvcig7bnVsbCE9PWg7KXtzd2l0Y2goaC50YWcpe2Nhc2UgNTpYPWguc3RhdGVOb2RlO1lqPSExO2JyZWFrIGE7Y2FzZSAzOlg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhO2Nhc2UgNDpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYX1oPWgucmV0dXJufWlmKG51bGw9PT1YKXRocm93IEVycm9yKHAoMTYwKSk7YWsoZixnLGUpO1g9bnVsbDtZaj0hMTt2YXIgaz1lLmFsdGVybmF0ZTtudWxsIT09ayYmKGsucmV0dXJuPW51bGwpO2UucmV0dXJuPW51bGx9Y2F0Y2gobCl7VyhlLGIsbCl9fWlmKGIuc3VidHJlZUZsYWdzJjEyODU0KWZvcihiPWIuY2hpbGQ7bnVsbCE9PWI7KWVrKGIsYSksYj1iLnNpYmxpbmd9XG5mdW5jdGlvbiBlayhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlLGQ9YS5mbGFncztzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7dHJ5e1FqKDMsYSxhLnJldHVybiksUmooMyxhKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9dHJ5e1FqKDUsYSxhLnJldHVybil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDE6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2JyZWFrO2Nhc2UgNTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7aWYoYS5mbGFncyYzMil7dmFyIGU9YS5zdGF0ZU5vZGU7dHJ5e29iKGUsXCJcIil9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1pZihkJjQmJihlPWEuc3RhdGVOb2RlLG51bGwhPWUpKXt2YXIgZj1hLm1lbW9pemVkUHJvcHMsZz1udWxsIT09Yz9jLm1lbW9pemVkUHJvcHM6ZixoPWEudHlwZSxrPWEudXBkYXRlUXVldWU7XG5hLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWspdHJ5e1wiaW5wdXRcIj09PWgmJlwicmFkaW9cIj09PWYudHlwZSYmbnVsbCE9Zi5uYW1lJiZhYihlLGYpO3ZiKGgsZyk7dmFyIGw9dmIoaCxmKTtmb3IoZz0wO2c8ay5sZW5ndGg7Zys9Mil7dmFyIG09a1tnXSxxPWtbZysxXTtcInN0eWxlXCI9PT1tP3NiKGUscSk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bT9uYihlLHEpOlwiY2hpbGRyZW5cIj09PW0/b2IoZSxxKTp0YShlLG0scSxsKX1zd2l0Y2goaCl7Y2FzZSBcImlucHV0XCI6YmIoZSxmKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihlLGYpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjp2YXIgcj1lLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU7ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZi5tdWx0aXBsZTt2YXIgeT1mLnZhbHVlO251bGwhPXk/ZmIoZSwhIWYubXVsdGlwbGUseSwhMSk6ciE9PSEhZi5tdWx0aXBsZSYmKG51bGwhPWYuZGVmYXVsdFZhbHVlP2ZiKGUsISFmLm11bHRpcGxlLFxuZi5kZWZhdWx0VmFsdWUsITApOmZiKGUsISFmLm11bHRpcGxlLGYubXVsdGlwbGU/W106XCJcIiwhMSkpfWVbUGZdPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDY6ZGsoYixhKTtmayhhKTtpZihkJjQpe2lmKG51bGw9PT1hLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2MikpO2U9YS5zdGF0ZU5vZGU7Zj1hLm1lbW9pemVkUHJvcHM7dHJ5e2Uubm9kZVZhbHVlPWZ9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1icmVhaztjYXNlIDM6ZGsoYixhKTtmayhhKTtpZihkJjQmJm51bGwhPT1jJiZjLm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXRyeXtiZChiLmNvbnRhaW5lckluZm8pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX1icmVhaztjYXNlIDQ6ZGsoYixhKTtmayhhKTticmVhaztjYXNlIDEzOmRrKGIsYSk7ZmsoYSk7ZT1hLmNoaWxkO2UuZmxhZ3MmODE5MiYmKGY9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZSxlLnN0YXRlTm9kZS5pc0hpZGRlbj1mLCFmfHxcbm51bGwhPT1lLmFsdGVybmF0ZSYmbnVsbCE9PWUuYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGV8fChnaz1CKCkpKTtkJjQmJmJrKGEpO2JyZWFrO2Nhc2UgMjI6bT1udWxsIT09YyYmbnVsbCE9PWMubWVtb2l6ZWRTdGF0ZTthLm1vZGUmMT8oVT0obD1VKXx8bSxkayhiLGEpLFU9bCk6ZGsoYixhKTtmayhhKTtpZihkJjgxOTIpe2w9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZigoYS5zdGF0ZU5vZGUuaXNIaWRkZW49bCkmJiFtJiYwIT09KGEubW9kZSYxKSlmb3IoVj1hLG09YS5jaGlsZDtudWxsIT09bTspe2ZvcihxPVY9bTtudWxsIT09Vjspe3I9Vjt5PXIuY2hpbGQ7c3dpdGNoKHIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6UWooNCxyLHIucmV0dXJuKTticmVhaztjYXNlIDE6TWoocixyLnJldHVybik7dmFyIG49ci5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbFVubW91bnQpe2Q9cjtjPXIucmV0dXJuO3RyeXtiPWQsbi5wcm9wcz1cbmIubWVtb2l6ZWRQcm9wcyxuLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxuLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7VyhkLGMsdCl9fWJyZWFrO2Nhc2UgNTpNaihyLHIucmV0dXJuKTticmVhaztjYXNlIDIyOmlmKG51bGwhPT1yLm1lbW9pemVkU3RhdGUpe2hrKHEpO2NvbnRpbnVlfX1udWxsIT09eT8oeS5yZXR1cm49cixWPXkpOmhrKHEpfW09bS5zaWJsaW5nfWE6Zm9yKG09bnVsbCxxPWE7Oyl7aWYoNT09PXEudGFnKXtpZihudWxsPT09bSl7bT1xO3RyeXtlPXEuc3RhdGVOb2RlLGw/KGY9ZS5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGg9cS5zdGF0ZU5vZGUsaz1xLm1lbW9pemVkUHJvcHMuc3R5bGUsZz12b2lkIDAhPT1rJiZudWxsIT09ayYmay5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ay5kaXNwbGF5Om51bGwsaC5zdHlsZS5kaXNwbGF5PVxucmIoXCJkaXNwbGF5XCIsZykpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19fWVsc2UgaWYoNj09PXEudGFnKXtpZihudWxsPT09bSl0cnl7cS5zdGF0ZU5vZGUubm9kZVZhbHVlPWw/XCJcIjpxLm1lbW9pemVkUHJvcHN9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX1lbHNlIGlmKCgyMiE9PXEudGFnJiYyMyE9PXEudGFnfHxudWxsPT09cS5tZW1vaXplZFN0YXRlfHxxPT09YSkmJm51bGwhPT1xLmNoaWxkKXtxLmNoaWxkLnJldHVybj1xO3E9cS5jaGlsZDtjb250aW51ZX1pZihxPT09YSlicmVhayBhO2Zvcig7bnVsbD09PXEuc2libGluZzspe2lmKG51bGw9PT1xLnJldHVybnx8cS5yZXR1cm49PT1hKWJyZWFrIGE7bT09PXEmJihtPW51bGwpO3E9cS5yZXR1cm59bT09PXEmJihtPW51bGwpO3Euc2libGluZy5yZXR1cm49cS5yZXR1cm47cT1xLnNpYmxpbmd9fWJyZWFrO2Nhc2UgMTk6ZGsoYixhKTtmayhhKTtkJjQmJmJrKGEpO2JyZWFrO2Nhc2UgMjE6YnJlYWs7ZGVmYXVsdDpkayhiLFxuYSksZmsoYSl9fWZ1bmN0aW9uIGZrKGEpe3ZhciBiPWEuZmxhZ3M7aWYoYiYyKXt0cnl7YTp7Zm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoVWooYykpe3ZhciBkPWM7YnJlYWsgYX1jPWMucmV0dXJufXRocm93IEVycm9yKHAoMTYwKSk7fXN3aXRjaChkLnRhZyl7Y2FzZSA1OnZhciBlPWQuc3RhdGVOb2RlO2QuZmxhZ3MmMzImJihvYihlLFwiXCIpLGQuZmxhZ3MmPS0zMyk7dmFyIGY9VmooYSk7WGooYSxmLGUpO2JyZWFrO2Nhc2UgMzpjYXNlIDQ6dmFyIGc9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxoPVZqKGEpO1dqKGEsaCxnKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYxKSk7fX1jYXRjaChrKXtXKGEsYS5yZXR1cm4sayl9YS5mbGFncyY9LTN9YiY0MDk2JiYoYS5mbGFncyY9LTQwOTcpfWZ1bmN0aW9uIGlrKGEsYixjKXtWPWE7amsoYSxiLGMpfVxuZnVuY3Rpb24gamsoYSxiLGMpe2Zvcih2YXIgZD0wIT09KGEubW9kZSYxKTtudWxsIT09Vjspe3ZhciBlPVYsZj1lLmNoaWxkO2lmKDIyPT09ZS50YWcmJmQpe3ZhciBnPW51bGwhPT1lLm1lbW9pemVkU3RhdGV8fEtqO2lmKCFnKXt2YXIgaD1lLmFsdGVybmF0ZSxrPW51bGwhPT1oJiZudWxsIT09aC5tZW1vaXplZFN0YXRlfHxVO2g9S2o7dmFyIGw9VTtLaj1nO2lmKChVPWspJiYhbClmb3IoVj1lO251bGwhPT1WOylnPVYsaz1nLmNoaWxkLDIyPT09Zy50YWcmJm51bGwhPT1nLm1lbW9pemVkU3RhdGU/a2soZSk6bnVsbCE9PWs/KGsucmV0dXJuPWcsVj1rKTprayhlKTtmb3IoO251bGwhPT1mOylWPWYsamsoZixiLGMpLGY9Zi5zaWJsaW5nO1Y9ZTtLaj1oO1U9bH1sayhhLGIsYyl9ZWxzZSAwIT09KGUuc3VidHJlZUZsYWdzJjg3NzIpJiZudWxsIT09Zj8oZi5yZXR1cm49ZSxWPWYpOmxrKGEsYixjKX19XG5mdW5jdGlvbiBsayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZigwIT09KGIuZmxhZ3MmODc3Mikpe3ZhciBjPWIuYWx0ZXJuYXRlO3RyeXtpZigwIT09KGIuZmxhZ3MmODc3Mikpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlV8fFJqKDUsYik7YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKGIuZmxhZ3MmNCYmIVUpaWYobnVsbD09PWMpZC5jb21wb25lbnREaWRNb3VudCgpO2Vsc2V7dmFyIGU9Yi5lbGVtZW50VHlwZT09PWIudHlwZT9jLm1lbW9pemVkUHJvcHM6TGcoYi50eXBlLGMubWVtb2l6ZWRQcm9wcyk7ZC5jb21wb25lbnREaWRVcGRhdGUoZSxjLm1lbW9pemVkU3RhdGUsZC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9dmFyIGY9Yi51cGRhdGVRdWV1ZTtudWxsIT09ZiYmaWgoYixmLGQpO2JyZWFrO2Nhc2UgMzp2YXIgZz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1nKXtjPW51bGw7aWYobnVsbCE9PWIuY2hpbGQpc3dpdGNoKGIuY2hpbGQudGFnKXtjYXNlIDU6Yz1cbmIuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTpjPWIuY2hpbGQuc3RhdGVOb2RlfWloKGIsZyxjKX1icmVhaztjYXNlIDU6dmFyIGg9Yi5zdGF0ZU5vZGU7aWYobnVsbD09PWMmJmIuZmxhZ3MmNCl7Yz1oO3ZhciBrPWIubWVtb2l6ZWRQcm9wcztzd2l0Y2goYi50eXBlKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmsuYXV0b0ZvY3VzJiZjLmZvY3VzKCk7YnJlYWs7Y2FzZSBcImltZ1wiOmsuc3JjJiYoYy5zcmM9ay5zcmMpfX1icmVhaztjYXNlIDY6YnJlYWs7Y2FzZSA0OmJyZWFrO2Nhc2UgMTI6YnJlYWs7Y2FzZSAxMzppZihudWxsPT09Yi5tZW1vaXplZFN0YXRlKXt2YXIgbD1iLmFsdGVybmF0ZTtpZihudWxsIT09bCl7dmFyIG09bC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1tKXt2YXIgcT1tLmRlaHlkcmF0ZWQ7bnVsbCE9PXEmJmJkKHEpfX19YnJlYWs7Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjE6Y2FzZSAyMjpjYXNlIDIzOmNhc2UgMjU6YnJlYWs7XG5kZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fVV8fGIuZmxhZ3MmNTEyJiZTaihiKX1jYXRjaChyKXtXKGIsYi5yZXR1cm4scil9fWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9Yz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1mdW5jdGlvbiBoayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9VjtpZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBjPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fVxuZnVuY3Rpb24ga2soYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7dHJ5e3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp2YXIgYz1iLnJldHVybjt0cnl7UmooNCxiKX1jYXRjaChrKXtXKGIsYyxrKX1icmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkTW91bnQpe3ZhciBlPWIucmV0dXJuO3RyeXtkLmNvbXBvbmVudERpZE1vdW50KCl9Y2F0Y2goayl7VyhiLGUsayl9fXZhciBmPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZixrKX1icmVhaztjYXNlIDU6dmFyIGc9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixnLGspfX19Y2F0Y2goayl7VyhiLGIucmV0dXJuLGspfWlmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGg9Yi5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1iLnJldHVybjtWPWg7YnJlYWt9Vj1iLnJldHVybn19XG52YXIgbWs9TWF0aC5jZWlsLG5rPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsb2s9dWEuUmVhY3RDdXJyZW50T3duZXIscGs9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsSz0wLFI9bnVsbCxZPW51bGwsWj0wLGdqPTAsZmo9VWYoMCksVD0wLHFrPW51bGwsaGg9MCxyaz0wLHNrPTAsdGs9bnVsbCx1az1udWxsLGdrPTAsSGo9SW5maW5pdHksdms9bnVsbCxQaT0hMSxRaT1udWxsLFNpPW51bGwsd2s9ITEseGs9bnVsbCx5az0wLHprPTAsQWs9bnVsbCxCaz0tMSxDaz0wO2Z1bmN0aW9uIEwoKXtyZXR1cm4gMCE9PShLJjYpP0IoKTotMSE9PUJrP0JrOkJrPUIoKX1cbmZ1bmN0aW9uIGxoKGEpe2lmKDA9PT0oYS5tb2RlJjEpKXJldHVybiAxO2lmKDAhPT0oSyYyKSYmMCE9PVopcmV0dXJuIFomLVo7aWYobnVsbCE9PUtnLnRyYW5zaXRpb24pcmV0dXJuIDA9PT1DayYmKENrPXljKCkpLENrO2E9QztpZigwIT09YSlyZXR1cm4gYTthPXdpbmRvdy5ldmVudDthPXZvaWQgMD09PWE/MTY6amQoYS50eXBlKTtyZXR1cm4gYX1mdW5jdGlvbiBtaChhLGIsYyxkKXtpZig1MDx6ayl0aHJvdyB6az0wLEFrPW51bGwsRXJyb3IocCgxODUpKTtBYyhhLGMsZCk7aWYoMD09PShLJjIpfHxhIT09UilhPT09UiYmKDA9PT0oSyYyKSYmKHJrfD1jKSw0PT09VCYmRGsoYSxaKSksRWsoYSxkKSwxPT09YyYmMD09PUsmJjA9PT0oYi5tb2RlJjEpJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9XG5mdW5jdGlvbiBFayhhLGIpe3ZhciBjPWEuY2FsbGJhY2tOb2RlO3djKGEsYik7dmFyIGQ9dWMoYSxhPT09Uj9aOjApO2lmKDA9PT1kKW51bGwhPT1jJiZiYyhjKSxhLmNhbGxiYWNrTm9kZT1udWxsLGEuY2FsbGJhY2tQcmlvcml0eT0wO2Vsc2UgaWYoYj1kJi1kLGEuY2FsbGJhY2tQcmlvcml0eSE9PWIpe251bGwhPWMmJmJjKGMpO2lmKDE9PT1iKTA9PT1hLnRhZz9pZyhGay5iaW5kKG51bGwsYSkpOmhnKEZrLmJpbmQobnVsbCxhKSksSmYoZnVuY3Rpb24oKXswPT09KEsmNikmJmpnKCl9KSxjPW51bGw7ZWxzZXtzd2l0Y2goRGMoZCkpe2Nhc2UgMTpjPWZjO2JyZWFrO2Nhc2UgNDpjPWdjO2JyZWFrO2Nhc2UgMTY6Yz1oYzticmVhaztjYXNlIDUzNjg3MDkxMjpjPWpjO2JyZWFrO2RlZmF1bHQ6Yz1oY31jPUdrKGMsSGsuYmluZChudWxsLGEpKX1hLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIEhrKGEsYil7Qms9LTE7Q2s9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTt2YXIgYz1hLmNhbGxiYWNrTm9kZTtpZihJaygpJiZhLmNhbGxiYWNrTm9kZSE9PWMpcmV0dXJuIG51bGw7dmFyIGQ9dWMoYSxhPT09Uj9aOjApO2lmKDA9PT1kKXJldHVybiBudWxsO2lmKDAhPT0oZCYzMCl8fDAhPT0oZCZhLmV4cGlyZWRMYW5lcyl8fGIpYj1KayhhLGQpO2Vsc2V7Yj1kO3ZhciBlPUs7S3w9Mjt2YXIgZj1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLEhqPUIoKSs1MDAsTGsoYSxiKTtkbyB0cnl7TWsoKTticmVha31jYXRjaChoKXtOayhhLGgpfXdoaWxlKDEpO1FnKCk7bmsuY3VycmVudD1mO0s9ZTtudWxsIT09WT9iPTA6KFI9bnVsbCxaPTAsYj1UKX1pZigwIT09Yil7Mj09PWImJihlPXhjKGEpLDAhPT1lJiYoZD1lLGI9T2soYSxlKSkpO2lmKDE9PT1iKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2lmKDY9PT1iKURrKGEsZCk7XG5lbHNle2U9YS5jdXJyZW50LmFsdGVybmF0ZTtpZigwPT09KGQmMzApJiYhUGsoZSkmJihiPUprKGEsZCksMj09PWImJihmPXhjKGEpLDAhPT1mJiYoZD1mLGI9T2soYSxmKSkpLDE9PT1iKSl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYzthLmZpbmlzaGVkV29yaz1lO2EuZmluaXNoZWRMYW5lcz1kO3N3aXRjaChiKXtjYXNlIDA6Y2FzZSAxOnRocm93IEVycm9yKHAoMzQ1KSk7Y2FzZSAyOlFrKGEsdWssdmspO2JyZWFrO2Nhc2UgMzpEayhhLGQpO2lmKChkJjEzMDAyMzQyNCk9PT1kJiYoYj1nays1MDAtQigpLDEwPGIpKXtpZigwIT09dWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmZCkhPT1kKXtMKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZlO2JyZWFrfWEudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksYik7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA0OkRrKGEsZCk7aWYoKGQmNDE5NDI0MCk9PT1cbmQpYnJlYWs7Yj1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxkOyl7dmFyIGc9MzEtb2MoZCk7Zj0xPDxnO2c9YltnXTtnPmUmJihlPWcpO2QmPX5mfWQ9ZTtkPUIoKS1kO2Q9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqbWsoZC8xOTYwKSktZDtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGQpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNTpRayhhLHVrLHZrKTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzI5KSk7fX19RWsoYSxCKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWM/SGsuYmluZChudWxsLGEpOm51bGx9XG5mdW5jdGlvbiBPayhhLGIpe3ZhciBjPXRrO2EuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmKExrKGEsYikuZmxhZ3N8PTI1Nik7YT1KayhhLGIpOzIhPT1hJiYoYj11ayx1az1jLG51bGwhPT1iJiZHaihiKSk7cmV0dXJuIGF9ZnVuY3Rpb24gR2ooYSl7bnVsbD09PXVrP3VrPWE6dWsucHVzaC5hcHBseSh1ayxhKX1cbmZ1bmN0aW9uIFBrKGEpe2Zvcih2YXIgYj1hOzspe2lmKGIuZmxhZ3MmMTYzODQpe3ZhciBjPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWMmJihjPWMuc3RvcmVzLG51bGwhPT1jKSlmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxmPWUuZ2V0U25hcHNob3Q7ZT1lLnZhbHVlO3RyeXtpZighSGUoZigpLGUpKXJldHVybiExfWNhdGNoKGcpe3JldHVybiExfX19Yz1iLmNoaWxkO2lmKGIuc3VidHJlZUZsYWdzJjE2Mzg0JiZudWxsIT09YyljLnJldHVybj1iLGI9YztlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiEwO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuITB9XG5mdW5jdGlvbiBEayhhLGIpe2ImPX5zaztiJj1+cms7YS5zdXNwZW5kZWRMYW5lc3w9YjthLnBpbmdlZExhbmVzJj1+Yjtmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGI7KXt2YXIgYz0zMS1vYyhiKSxkPTE8PGM7YVtjXT0tMTtiJj1+ZH19ZnVuY3Rpb24gRmsoYSl7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7SWsoKTt2YXIgYj11YyhhLDApO2lmKDA9PT0oYiYxKSlyZXR1cm4gRWsoYSxCKCkpLG51bGw7dmFyIGM9SmsoYSxiKTtpZigwIT09YS50YWcmJjI9PT1jKXt2YXIgZD14YyhhKTswIT09ZCYmKGI9ZCxjPU9rKGEsZCkpfWlmKDE9PT1jKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGIpLEVrKGEsQigpKSxjO2lmKDY9PT1jKXRocm93IEVycm9yKHAoMzQ1KSk7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtRayhhLHVrLHZrKTtFayhhLEIoKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBSayhhLGIpe3ZhciBjPUs7S3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtLPWMsMD09PUsmJihIaj1CKCkrNTAwLGZnJiZqZygpKX19ZnVuY3Rpb24gU2soYSl7bnVsbCE9PXhrJiYwPT09eGsudGFnJiYwPT09KEsmNikmJklrKCk7dmFyIGI9SztLfD0xO3ZhciBjPXBrLnRyYW5zaXRpb24sZD1DO3RyeXtpZihway50cmFuc2l0aW9uPW51bGwsQz0xLGEpcmV0dXJuIGEoKX1maW5hbGx5e0M9ZCxway50cmFuc2l0aW9uPWMsSz1iLDA9PT0oSyY2KSYmamcoKX19ZnVuY3Rpb24gSWooKXtnaj1mai5jdXJyZW50O0UoZmopfVxuZnVuY3Rpb24gTGsoYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsR2YoYykpO2lmKG51bGwhPT1ZKWZvcihjPVkucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yzt3ZyhkKTtzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmJGYoKTticmVhaztjYXNlIDM6SmgoKTtFKFdmKTtFKEgpO09oKCk7YnJlYWs7Y2FzZSA1OkxoKGQpO2JyZWFrO2Nhc2UgNDpKaCgpO2JyZWFrO2Nhc2UgMTM6RShNKTticmVhaztjYXNlIDE5OkUoTSk7YnJlYWs7Y2FzZSAxMDpSZyhkLnR5cGUuX2NvbnRleHQpO2JyZWFrO2Nhc2UgMjI6Y2FzZSAyMzpJaigpfWM9Yy5yZXR1cm59Uj1hO1k9YT13aChhLmN1cnJlbnQsbnVsbCk7Wj1naj1iO1Q9MDtxaz1udWxsO3NrPXJrPWhoPTA7dWs9dGs9bnVsbDtpZihudWxsIT09V2cpe2ZvcihiPVxuMDtiPFdnLmxlbmd0aDtiKyspaWYoYz1XZ1tiXSxkPWMuaW50ZXJsZWF2ZWQsbnVsbCE9PWQpe2MuaW50ZXJsZWF2ZWQ9bnVsbDt2YXIgZT1kLm5leHQsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe3ZhciBnPWYubmV4dDtmLm5leHQ9ZTtkLm5leHQ9Z31jLnBlbmRpbmc9ZH1XZz1udWxsfXJldHVybiBhfVxuZnVuY3Rpb24gTmsoYSxiKXtkb3t2YXIgYz1ZO3RyeXtRZygpO1BoLmN1cnJlbnQ9YWk7aWYoU2gpe2Zvcih2YXIgZD1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWQ7KXt2YXIgZT1kLnF1ZXVlO251bGwhPT1lJiYoZS5wZW5kaW5nPW51bGwpO2Q9ZC5uZXh0fVNoPSExfVJoPTA7UD1PPU49bnVsbDtUaD0hMTtVaD0wO29rLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtUPTE7cWs9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1aO2guZmxhZ3N8PTMyNzY4O2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWssbT1oLHE9bS50YWc7aWYoMD09PShtLm1vZGUmMSkmJigwPT09cXx8MTE9PT1xfHwxNT09PXEpKXt2YXIgcj1tLmFsdGVybmF0ZTtyPyhtLnVwZGF0ZVF1ZXVlPXIudXBkYXRlUXVldWUsbS5tZW1vaXplZFN0YXRlPXIubWVtb2l6ZWRTdGF0ZSxcbm0ubGFuZXM9ci5sYW5lcyk6KG0udXBkYXRlUXVldWU9bnVsbCxtLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIHk9VmkoZyk7aWYobnVsbCE9PXkpe3kuZmxhZ3MmPS0yNTc7V2koeSxnLGgsZixiKTt5Lm1vZGUmMSYmVGkoZixsLGIpO2I9eTtrPWw7dmFyIG49Yi51cGRhdGVRdWV1ZTtpZihudWxsPT09bil7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtiLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBuLmFkZChrKTticmVhayBhfWVsc2V7aWYoMD09PShiJjEpKXtUaShmLGwsYik7dWooKTticmVhayBhfWs9RXJyb3IocCg0MjYpKX19ZWxzZSBpZihJJiZoLm1vZGUmMSl7dmFyIEo9VmkoZyk7aWYobnVsbCE9PUopezA9PT0oSi5mbGFncyY2NTUzNikmJihKLmZsYWdzfD0yNTYpO1dpKEosZyxoLGYsYik7SmcoS2koayxoKSk7YnJlYWsgYX19Zj1rPUtpKGssaCk7NCE9PVQmJihUPTIpO251bGw9PT10az90az1bZl06dGsucHVzaChmKTtmPWc7ZG97c3dpdGNoKGYudGFnKXtjYXNlIDM6Zi5mbGFnc3w9NjU1MzY7XG5iJj0tYjtmLmxhbmVzfD1iO3ZhciB4PU9pKGYsayxiKTtmaChmLHgpO2JyZWFrIGE7Y2FzZSAxOmg9azt2YXIgdz1mLnR5cGUsdT1mLnN0YXRlTm9kZTtpZigwPT09KGYuZmxhZ3MmMTI4KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1LmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNpfHwhU2kuaGFzKHUpKSkpe2YuZmxhZ3N8PTY1NTM2O2ImPS1iO2YubGFuZXN8PWI7dmFyIEY9UmkoZixoLGIpO2ZoKGYsRik7YnJlYWsgYX19Zj1mLnJldHVybn13aGlsZShudWxsIT09Zil9VGsoYyl9Y2F0Y2gobmEpe2I9bmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1mdW5jdGlvbiBLaygpe3ZhciBhPW5rLmN1cnJlbnQ7bmsuY3VycmVudD1haTtyZXR1cm4gbnVsbD09PWE/YWk6YX1cbmZ1bmN0aW9uIHVqKCl7aWYoMD09PVR8fDM9PT1UfHwyPT09VClUPTQ7bnVsbD09PVJ8fDA9PT0oaGgmMjY4NDM1NDU1KSYmMD09PShyayYyNjg0MzU0NTUpfHxEayhSLFopfWZ1bmN0aW9uIEprKGEsYil7dmFyIGM9SztLfD0yO3ZhciBkPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsTGsoYSxiKTtkbyB0cnl7VWsoKTticmVha31jYXRjaChlKXtOayhhLGUpfXdoaWxlKDEpO1FnKCk7Sz1jO25rLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcihwKDI2MSkpO1I9bnVsbDtaPTA7cmV0dXJuIFR9ZnVuY3Rpb24gVWsoKXtmb3IoO251bGwhPT1ZOylWayhZKX1mdW5jdGlvbiBNaygpe2Zvcig7bnVsbCE9PVkmJiFjYygpOylWayhZKX1mdW5jdGlvbiBWayhhKXt2YXIgYj1XayhhLmFsdGVybmF0ZSxhLGdqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/VGsoYSk6WT1iO29rLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFRrKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMzI3NjgpKXtpZihjPUZqKGMsYixnaiksbnVsbCE9PWMpe1k9YztyZXR1cm59fWVsc2V7Yz1KaihjLGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0zMjc2NztZPWM7cmV0dXJufWlmKG51bGwhPT1hKWEuZmxhZ3N8PTMyNzY4LGEuc3VidHJlZUZsYWdzPTAsYS5kZWxldGlvbnM9bnVsbDtlbHNle1Q9NjtZPW51bGw7cmV0dXJufX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVQmJihUPTUpfWZ1bmN0aW9uIFFrKGEsYixjKXt2YXIgZD1DLGU9cGsudHJhbnNpdGlvbjt0cnl7cGsudHJhbnNpdGlvbj1udWxsLEM9MSxYayhhLGIsYyxkKX1maW5hbGx5e3BrLnRyYW5zaXRpb249ZSxDPWR9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBYayhhLGIsYyxkKXtkbyBJaygpO3doaWxlKG51bGwhPT14ayk7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7Yz1hLmZpbmlzaGVkV29yazt2YXIgZT1hLmZpbmlzaGVkTGFuZXM7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHAoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDthLmNhbGxiYWNrUHJpb3JpdHk9MDt2YXIgZj1jLmxhbmVzfGMuY2hpbGRMYW5lcztCYyhhLGYpO2E9PT1SJiYoWT1SPW51bGwsWj0wKTswPT09KGMuc3VidHJlZUZsYWdzJjIwNjQpJiYwPT09KGMuZmxhZ3MmMjA2NCl8fHdrfHwod2s9ITAsR2soaGMsZnVuY3Rpb24oKXtJaygpO3JldHVybiBudWxsfSkpO2Y9MCE9PShjLmZsYWdzJjE1OTkwKTtpZigwIT09KGMuc3VidHJlZUZsYWdzJjE1OTkwKXx8Zil7Zj1way50cmFuc2l0aW9uO3BrLnRyYW5zaXRpb249bnVsbDtcbnZhciBnPUM7Qz0xO3ZhciBoPUs7S3w9NDtvay5jdXJyZW50PW51bGw7UGooYSxjKTtlayhjLGEpO09lKERmKTtkZD0hIUNmO0RmPUNmPW51bGw7YS5jdXJyZW50PWM7aWsoYyxhLGUpO2RjKCk7Sz1oO0M9Zztway50cmFuc2l0aW9uPWZ9ZWxzZSBhLmN1cnJlbnQ9Yzt3ayYmKHdrPSExLHhrPWEseWs9ZSk7Zj1hLnBlbmRpbmdMYW5lczswPT09ZiYmKFNpPW51bGwpO21jKGMuc3RhdGVOb2RlLGQpO0VrKGEsQigpKTtpZihudWxsIT09Yilmb3IoZD1hLm9uUmVjb3ZlcmFibGVFcnJvcixjPTA7YzxiLmxlbmd0aDtjKyspZT1iW2NdLGQoZS52YWx1ZSx7Y29tcG9uZW50U3RhY2s6ZS5zdGFjayxkaWdlc3Q6ZS5kaWdlc3R9KTtpZihQaSl0aHJvdyBQaT0hMSxhPVFpLFFpPW51bGwsYTswIT09KHlrJjEpJiYwIT09YS50YWcmJklrKCk7Zj1hLnBlbmRpbmdMYW5lczswIT09KGYmMSk/YT09PUFrP3prKys6KHprPTAsQWs9YSk6ems9MDtqZygpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gSWsoKXtpZihudWxsIT09eGspe3ZhciBhPURjKHlrKSxiPXBrLnRyYW5zaXRpb24sYz1DO3RyeXtway50cmFuc2l0aW9uPW51bGw7Qz0xNj5hPzE2OmE7aWYobnVsbD09PXhrKXZhciBkPSExO2Vsc2V7YT14azt4az1udWxsO3lrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzMxKSk7dmFyIGU9SztLfD00O2ZvcihWPWEuY3VycmVudDtudWxsIT09Vjspe3ZhciBmPVYsZz1mLmNoaWxkO2lmKDAhPT0oVi5mbGFncyYxNikpe3ZhciBoPWYuZGVsZXRpb25zO2lmKG51bGwhPT1oKXtmb3IodmFyIGs9MDtrPGgubGVuZ3RoO2srKyl7dmFyIGw9aFtrXTtmb3IoVj1sO251bGwhPT1WOyl7dmFyIG09Vjtzd2l0Y2gobS50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOCxtLGYpfXZhciBxPW0uY2hpbGQ7aWYobnVsbCE9PXEpcS5yZXR1cm49bSxWPXE7ZWxzZSBmb3IoO251bGwhPT1WOyl7bT1WO3ZhciByPW0uc2libGluZyx5PW0ucmV0dXJuO1RqKG0pO2lmKG09PT1cbmwpe1Y9bnVsbDticmVha31pZihudWxsIT09cil7ci5yZXR1cm49eTtWPXI7YnJlYWt9Vj15fX19dmFyIG49Zi5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe3ZhciB0PW4uY2hpbGQ7aWYobnVsbCE9PXQpe24uY2hpbGQ9bnVsbDtkb3t2YXIgSj10LnNpYmxpbmc7dC5zaWJsaW5nPW51bGw7dD1KfXdoaWxlKG51bGwhPT10KX19Vj1mfX1pZigwIT09KGYuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09ZylnLnJldHVybj1mLFY9ZztlbHNlIGI6Zm9yKDtudWxsIT09Vjspe2Y9VjtpZigwIT09KGYuZmxhZ3MmMjA0OCkpc3dpdGNoKGYudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDksZixmLnJldHVybil9dmFyIHg9Zi5zaWJsaW5nO2lmKG51bGwhPT14KXt4LnJldHVybj1mLnJldHVybjtWPXg7YnJlYWsgYn1WPWYucmV0dXJufX12YXIgdz1hLmN1cnJlbnQ7Zm9yKFY9dztudWxsIT09Vjspe2c9Vjt2YXIgdT1nLmNoaWxkO2lmKDAhPT0oZy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1cbnUpdS5yZXR1cm49ZyxWPXU7ZWxzZSBiOmZvcihnPXc7bnVsbCE9PVY7KXtoPVY7aWYoMCE9PShoLmZsYWdzJjIwNDgpKXRyeXtzd2l0Y2goaC50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UmooOSxoKX19Y2F0Y2gobmEpe1coaCxoLnJldHVybixuYSl9aWYoaD09PWcpe1Y9bnVsbDticmVhayBifXZhciBGPWguc2libGluZztpZihudWxsIT09Ril7Ri5yZXR1cm49aC5yZXR1cm47Vj1GO2JyZWFrIGJ9Vj1oLnJldHVybn19Sz1lO2pnKCk7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vblBvc3RDb21taXRGaWJlclJvb3QpdHJ5e2xjLm9uUG9zdENvbW1pdEZpYmVyUm9vdChrYyxhKX1jYXRjaChuYSl7fWQ9ITB9cmV0dXJuIGR9ZmluYWxseXtDPWMscGsudHJhbnNpdGlvbj1ifX1yZXR1cm4hMX1mdW5jdGlvbiBZayhhLGIsYyl7Yj1LaShjLGIpO2I9T2koYSxiLDEpO2E9ZGgoYSxiLDEpO2I9TCgpO251bGwhPT1hJiYoQWMoYSwxLGIpLEVrKGEsYikpfVxuZnVuY3Rpb24gVyhhLGIsYyl7aWYoMz09PWEudGFnKVlrKGEsYSxjKTtlbHNlIGZvcig7bnVsbCE9PWI7KXtpZigzPT09Yi50YWcpe1lrKGIsYSxjKTticmVha31lbHNlIGlmKDE9PT1iLnRhZyl7dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVNpfHwhU2kuaGFzKGQpKSl7YT1LaShjLGEpO2E9UmkoYixhLDEpO2I9ZGgoYixhLDEpO2E9TCgpO251bGwhPT1iJiYoQWMoYiwxLGEpLEVrKGIsYSkpO2JyZWFrfX1iPWIucmV0dXJufX1cbmZ1bmN0aW9uIFVpKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1MKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1I9PT1hJiYoWiZjKT09PWMmJig0PT09VHx8Mz09PVQmJihaJjEzMDAyMzQyNCk9PT1aJiY1MDA+QigpLWdrP0xrKGEsMCk6c2t8PWMpO0VrKGEsYil9ZnVuY3Rpb24gWmsoYSxiKXswPT09YiYmKDA9PT0oYS5tb2RlJjEpP2I9MTooYj1zYyxzYzw8PTEsMD09PShzYyYxMzAwMjM0MjQpJiYoc2M9NDE5NDMwNCkpKTt2YXIgYz1MKCk7YT1aZyhhLGIpO251bGwhPT1hJiYoQWMoYSxiLGMpLEVrKGEsYykpfWZ1bmN0aW9uIHZqKGEpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZSxjPTA7bnVsbCE9PWImJihjPWIucmV0cnlMYW5lKTtaayhhLGMpfVxuZnVuY3Rpb24gY2soYSxiKXt2YXIgYz0wO3N3aXRjaChhLnRhZyl7Y2FzZSAxMzp2YXIgZD1hLnN0YXRlTm9kZTt2YXIgZT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihjPWUucmV0cnlMYW5lKTticmVhaztjYXNlIDE5OmQ9YS5zdGF0ZU5vZGU7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMxNCkpO31udWxsIT09ZCYmZC5kZWxldGUoYik7WmsoYSxjKX12YXIgV2s7XG5Xaz1mdW5jdGlvbihhLGIsYyl7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fFdmLmN1cnJlbnQpVWc9ITA7ZWxzZXtpZigwPT09KGEubGFuZXMmYykmJjA9PT0oYi5mbGFncyYxMjgpKXJldHVybiBVZz0hMSx6aihhLGIsYyk7VWc9MCE9PShhLmZsYWdzJjEzMTA3Mik/ITA6ITF9ZWxzZSBVZz0hMSxJJiYwIT09KGIuZmxhZ3MmMTA0ODU3NikmJnVnKGIsbmcsYi5pbmRleCk7Yi5sYW5lcz0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOnZhciBkPWIudHlwZTtqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7dmFyIGU9WWYoYixILmN1cnJlbnQpO1RnKGIsYyk7ZT1YaChudWxsLGIsZCxhLGUsYyk7dmFyIGY9YmkoKTtiLmZsYWdzfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZj8oYi50YWc9MSxiLm1lbW9pemVkU3RhdGU9bnVsbCxiLnVwZGF0ZVF1ZXVlPVxubnVsbCxaZihkKT8oZj0hMCxjZyhiKSk6Zj0hMSxiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsLGFoKGIpLGUudXBkYXRlcj1uaCxiLnN0YXRlTm9kZT1lLGUuX3JlYWN0SW50ZXJuYWxzPWIscmgoYixkLGEsYyksYj1raihudWxsLGIsZCwhMCxmLGMpKTooYi50YWc9MCxJJiZmJiZ2ZyhiKSxZaShudWxsLGIsZSxjKSxiPWIuY2hpbGQpO3JldHVybiBiO2Nhc2UgMTY6ZD1iLmVsZW1lbnRUeXBlO2E6e2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wcztlPWQuX2luaXQ7ZD1lKGQuX3BheWxvYWQpO2IudHlwZT1kO2U9Yi50YWc9JGsoZCk7YT1MZyhkLGEpO3N3aXRjaChlKXtjYXNlIDA6Yj1kaihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9aWoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1aaShudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWFqKG51bGwsYixkLExnKGQudHlwZSxhKSxjKTticmVhayBhfXRocm93IEVycm9yKHAoMzA2LFxuZCxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxkaihhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxpaihhLGIsZCxlLGMpO2Nhc2UgMzphOntsaihiKTtpZihudWxsPT09YSl0aHJvdyBFcnJvcihwKDM4NykpO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkU3RhdGU7ZT1mLmVsZW1lbnQ7YmgoYSxiKTtnaChiLGQsbnVsbCxjKTt2YXIgZz1iLm1lbW9pemVkU3RhdGU7ZD1nLmVsZW1lbnQ7aWYoZi5pc0RlaHlkcmF0ZWQpaWYoZj17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDohMSxjYWNoZTpnLmNhY2hlLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6Zy5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9LGIudXBkYXRlUXVldWUuYmFzZVN0YXRlPVxuZixiLm1lbW9pemVkU3RhdGU9ZixiLmZsYWdzJjI1Nil7ZT1LaShFcnJvcihwKDQyMykpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgaWYoZCE9PWUpe2U9S2koRXJyb3IocCg0MjQpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGZvcih5Zz1MZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLHhnPWIsST0hMCx6Zz1udWxsLGM9Q2goYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3w0MDk2LGM9Yy5zaWJsaW5nO2Vsc2V7SWcoKTtpZihkPT09ZSl7Yj0kaShhLGIsYyk7YnJlYWsgYX1ZaShhLGIsZCxjKX1iPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBLaChiKSxudWxsPT09YSYmRWcoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixFZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmRWYoZCxmKSYmKGIuZmxhZ3N8PTMyKSxcbmhqKGEsYiksWWkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZFZyhiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHBqKGEsYixjKTtjYXNlIDQ6cmV0dXJuIEloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPUJoKGIsbnVsbCxkLGMpOllpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxaaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zj1iLm1lbW9pemVkUHJvcHM7XG5nPWUudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1nO2lmKG51bGwhPT1mKWlmKEhlKGYudmFsdWUsZykpe2lmKGYuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhV2YuY3VycmVudCl7Yj0kaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoZj1iLmNoaWxkLG51bGwhPT1mJiYoZi5yZXR1cm49Yik7bnVsbCE9PWY7KXt2YXIgaD1mLmRlcGVuZGVuY2llcztpZihudWxsIT09aCl7Zz1mLmNoaWxkO2Zvcih2YXIgaz1oLmZpcnN0Q29udGV4dDtudWxsIT09azspe2lmKGsuY29udGV4dD09PWQpe2lmKDE9PT1mLnRhZyl7az1jaCgtMSxjJi1jKTtrLnRhZz0yO3ZhciBsPWYudXBkYXRlUXVldWU7aWYobnVsbCE9PWwpe2w9bC5zaGFyZWQ7dmFyIG09bC5wZW5kaW5nO251bGw9PT1tP2submV4dD1rOihrLm5leHQ9bS5uZXh0LG0ubmV4dD1rKTtsLnBlbmRpbmc9a319Zi5sYW5lc3w9YztrPWYuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5sYW5lc3w9Yyk7U2coZi5yZXR1cm4sXG5jLGIpO2gubGFuZXN8PWM7YnJlYWt9az1rLm5leHR9fWVsc2UgaWYoMTA9PT1mLnRhZylnPWYudHlwZT09PWIudHlwZT9udWxsOmYuY2hpbGQ7ZWxzZSBpZigxOD09PWYudGFnKXtnPWYucmV0dXJuO2lmKG51bGw9PT1nKXRocm93IEVycm9yKHAoMzQxKSk7Zy5sYW5lc3w9YztoPWcuYWx0ZXJuYXRlO251bGwhPT1oJiYoaC5sYW5lc3w9Yyk7U2coZyxjLGIpO2c9Zi5zaWJsaW5nfWVsc2UgZz1mLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWY7ZWxzZSBmb3IoZz1mO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31mPWcuc2libGluZztpZihudWxsIT09Zil7Zi5yZXR1cm49Zy5yZXR1cm47Zz1mO2JyZWFrfWc9Zy5yZXR1cm59Zj1nfVlpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGQ9Yi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sVGcoYixjKSxlPVZnKGUpLGQ9ZChlKSxiLmZsYWdzfD0xLFlpKGEsYixkLGMpLFxuYi5jaGlsZDtjYXNlIDE0OnJldHVybiBkPWIudHlwZSxlPUxnKGQsYi5wZW5kaW5nUHJvcHMpLGU9TGcoZC50eXBlLGUpLGFqKGEsYixkLGUsYyk7Y2FzZSAxNTpyZXR1cm4gY2ooYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGpqKGEsYiksYi50YWc9MSxaZihkKT8oYT0hMCxjZyhiKSk6YT0hMSxUZyhiLGMpLHBoKGIsZCxlKSxyaChiLGQsZSxjKSxraihudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIHlqKGEsYixjKTtjYXNlIDIyOnJldHVybiBlaihhLGIsYyl9dGhyb3cgRXJyb3IocCgxNTYsYi50YWcpKTt9O2Z1bmN0aW9uIEdrKGEsYil7cmV0dXJuIGFjKGEsYil9XG5mdW5jdGlvbiBhbChhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuc3VidHJlZUZsYWdzPXRoaXMuZmxhZ3M9MDt0aGlzLmRlbGV0aW9ucz1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBCZyhhLGIsYyxkKXtyZXR1cm4gbmV3IGFsKGEsYixjLGQpfWZ1bmN0aW9uIGJqKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiAkayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmooYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PURhKXJldHVybiAxMTtpZihhPT09R2EpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gd2goYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1CZyhhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLnN1YnRyZWVGbGFncz0wLGMuZGVsZXRpb25zPW51bGwpO2MuZmxhZ3M9YS5mbGFncyYxNDY4MDA2NDtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24geWgoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWJqKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHlhOnJldHVybiBBaChjLmNoaWxkcmVuLGUsZixiKTtjYXNlIHphOmc9ODtlfD04O2JyZWFrO2Nhc2UgQWE6cmV0dXJuIGE9QmcoMTIsYyxiLGV8MiksYS5lbGVtZW50VHlwZT1BYSxhLmxhbmVzPWYsYTtjYXNlIEVhOnJldHVybiBhPUJnKDEzLGMsYixlKSxhLmVsZW1lbnRUeXBlPUVhLGEubGFuZXM9ZixhO2Nhc2UgRmE6cmV0dXJuIGE9QmcoMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9RmEsYS5sYW5lcz1mLGE7Y2FzZSBJYTpyZXR1cm4gcWooYyxlLGYsYik7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIEJhOmc9MTA7YnJlYWsgYTtjYXNlIENhOmc9OTticmVhayBhO2Nhc2UgRGE6Zz0xMTtcbmJyZWFrIGE7Y2FzZSBHYTpnPTE0O2JyZWFrIGE7Y2FzZSBIYTpnPTE2O2Q9bnVsbDticmVhayBhfXRocm93IEVycm9yKHAoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9QmcoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBBaChhLGIsYyxkKXthPUJnKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBxaihhLGIsYyxkKXthPUJnKDIyLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YzthLnN0YXRlTm9kZT17aXNIaWRkZW46ITF9O3JldHVybiBhfWZ1bmN0aW9uIHhoKGEsYixjKXthPUJnKDYsYSxudWxsLGIpO2EubGFuZXM9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIHpoKGEsYixjKXtiPUJnKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmxhbmVzPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYmwoYSxiLGMsZCxlKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLmNhbGxiYWNrTm9kZT10aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz16YygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz16YygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz16YygwKTt0aGlzLmlkZW50aWZpZXJQcmVmaXg9ZDt0aGlzLm9uUmVjb3ZlcmFibGVFcnJvcj1lO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1cbm51bGx9ZnVuY3Rpb24gY2woYSxiLGMsZCxlLGYsZyxoLGspe2E9bmV3IGJsKGEsYixjLGgsayk7MT09PWI/KGI9MSwhMD09PWYmJihifD04KSk6Yj0wO2Y9QmcoMyxudWxsLG51bGwsYik7YS5jdXJyZW50PWY7Zi5zdGF0ZU5vZGU9YTtmLm1lbW9pemVkU3RhdGU9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6YyxjYWNoZTpudWxsLHRyYW5zaXRpb25zOm51bGwscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpudWxsfTthaChmKTtyZXR1cm4gYX1mdW5jdGlvbiBkbChhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOndhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxuZnVuY3Rpb24gZWwoYSl7aWYoIWEpcmV0dXJuIFZmO2E9YS5fcmVhY3RJbnRlcm5hbHM7YTp7aWYoVmIoYSkhPT1hfHwxIT09YS50YWcpdGhyb3cgRXJyb3IocCgxNzApKTt2YXIgYj1hO2Rve3N3aXRjaChiLnRhZyl7Y2FzZSAzOmI9Yi5zdGF0ZU5vZGUuY29udGV4dDticmVhayBhO2Nhc2UgMTppZihaZihiLnR5cGUpKXtiPWIuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGF9fWI9Yi5yZXR1cm59d2hpbGUobnVsbCE9PWIpO3Rocm93IEVycm9yKHAoMTcxKSk7fWlmKDE9PT1hLnRhZyl7dmFyIGM9YS50eXBlO2lmKFpmKGMpKXJldHVybiBiZyhhLGMsYil9cmV0dXJuIGJ9XG5mdW5jdGlvbiBmbChhLGIsYyxkLGUsZixnLGgsayl7YT1jbChjLGQsITAsYSxlLGYsZyxoLGspO2EuY29udGV4dD1lbChudWxsKTtjPWEuY3VycmVudDtkPUwoKTtlPWxoKGMpO2Y9Y2goZCxlKTtmLmNhbGxiYWNrPXZvaWQgMCE9PWImJm51bGwhPT1iP2I6bnVsbDtkaChjLGYsZSk7YS5jdXJyZW50LmxhbmVzPWU7QWMoYSxlLGQpO0VrKGEsZCk7cmV0dXJuIGF9ZnVuY3Rpb24gZ2woYSxiLGMsZCl7dmFyIGU9Yi5jdXJyZW50LGY9TCgpLGc9bGgoZSk7Yz1lbChjKTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWNoKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO2E9ZGgoZSxiLGcpO251bGwhPT1hJiYobWgoYSxlLGcsZiksZWgoYSxlLGcpKTtyZXR1cm4gZ31cbmZ1bmN0aW9uIGhsKGEpe2E9YS5jdXJyZW50O2lmKCFhLmNoaWxkKXJldHVybiBudWxsO3N3aXRjaChhLmNoaWxkLnRhZyl7Y2FzZSA1OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZTtkZWZhdWx0OnJldHVybiBhLmNoaWxkLnN0YXRlTm9kZX19ZnVuY3Rpb24gaWwoYSxiKXthPWEubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7dmFyIGM9YS5yZXRyeUxhbmU7YS5yZXRyeUxhbmU9MCE9PWMmJmM8Yj9jOmJ9fWZ1bmN0aW9uIGpsKGEsYil7aWwoYSxiKTsoYT1hLmFsdGVybmF0ZSkmJmlsKGEsYil9ZnVuY3Rpb24ga2woKXtyZXR1cm4gbnVsbH12YXIgbGw9XCJmdW5jdGlvblwiPT09dHlwZW9mIHJlcG9ydEVycm9yP3JlcG9ydEVycm9yOmZ1bmN0aW9uKGEpe2NvbnNvbGUuZXJyb3IoYSl9O2Z1bmN0aW9uIG1sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnJlbmRlcj1tbC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDQwOSkpO2dsKGEsYixudWxsLG51bGwpfTtubC5wcm90b3R5cGUudW5tb3VudD1tbC5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdDtpZihudWxsIT09YSl7dGhpcy5faW50ZXJuYWxSb290PW51bGw7dmFyIGI9YS5jb250YWluZXJJbmZvO1NrKGZ1bmN0aW9uKCl7Z2wobnVsbCxhLG51bGwsbnVsbCl9KTtiW3VmXT1udWxsfX07ZnVuY3Rpb24gbmwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUudW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb249ZnVuY3Rpb24oYSl7aWYoYSl7dmFyIGI9SGMoKTthPXtibG9ja2VkT246bnVsbCx0YXJnZXQ6YSxwcmlvcml0eTpifTtmb3IodmFyIGM9MDtjPFFjLmxlbmd0aCYmMCE9PWImJmI8UWNbY10ucHJpb3JpdHk7YysrKTtRYy5zcGxpY2UoYywwLGEpOzA9PT1jJiZWYyhhKX19O2Z1bmN0aW9uIG9sKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlKX1mdW5jdGlvbiBwbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gcWwoKXt9XG5mdW5jdGlvbiBybChhLGIsYyxkLGUpe2lmKGUpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZj1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1obChnKTtmLmNhbGwoYSl9fXZhciBnPWZsKGIsZCxhLDAsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9ZzthW3VmXT1nLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKCk7cmV0dXJuIGd9Zm9yKDtlPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGUpO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgaD1kO2Q9ZnVuY3Rpb24oKXt2YXIgYT1obChrKTtoLmNhbGwoYSl9fXZhciBrPWNsKGEsMCwhMSxudWxsLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWs7YVt1Zl09ay5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTayhmdW5jdGlvbigpe2dsKGIsayxjLGQpfSk7cmV0dXJuIGt9XG5mdW5jdGlvbiBzbChhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1obChnKTtoLmNhbGwoYSl9fWdsKGIsZyxhLGUpfWVsc2UgZz1ybChjLGIsYSxlLGQpO3JldHVybiBobChnKX1FYz1mdW5jdGlvbihhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMzp2YXIgYj1hLnN0YXRlTm9kZTtpZihiLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe3ZhciBjPXRjKGIucGVuZGluZ0xhbmVzKTswIT09YyYmKENjKGIsY3wxKSxFayhiLEIoKSksMD09PShLJjYpJiYoSGo9QigpKzUwMCxqZygpKSl9YnJlYWs7Y2FzZSAxMzpTayhmdW5jdGlvbigpe3ZhciBiPVpnKGEsMSk7aWYobnVsbCE9PWIpe3ZhciBjPUwoKTttaChiLGEsMSxjKX19KSxqbChhLDEpfX07XG5GYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1aZyhhLDEzNDIxNzcyOCk7aWYobnVsbCE9PWIpe3ZhciBjPUwoKTttaChiLGEsMTM0MjE3NzI4LGMpfWpsKGEsMTM0MjE3NzI4KX19O0djPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWxoKGEpLGM9WmcoYSxiKTtpZihudWxsIT09Yyl7dmFyIGQ9TCgpO21oKGMsYSxiLGQpfWpsKGEsYil9fTtIYz1mdW5jdGlvbigpe3JldHVybiBDfTtJYz1mdW5jdGlvbihhLGIpe3ZhciBjPUM7dHJ5e3JldHVybiBDPWEsYigpfWZpbmFsbHl7Qz1jfX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmJiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcihwKDkwKSk7V2EoZCk7YmIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVJrO0hiPVNrO1xudmFyIHRsPXt1c2luZ0NsaWVudEVudHJ5UG9pbnQ6ITEsRXZlbnRzOltDYix1ZSxEYixFYixGYixSa119LHVsPXtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpXYyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE4LjIuMFwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn07XG52YXIgdmw9e2J1bmRsZVR5cGU6dWwuYnVuZGxlVHlwZSx2ZXJzaW9uOnVsLnZlcnNpb24scmVuZGVyZXJQYWNrYWdlTmFtZTp1bC5yZW5kZXJlclBhY2thZ2VOYW1lLHJlbmRlcmVyQ29uZmlnOnVsLnJlbmRlcmVyQ29uZmlnLG92ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoOm51bGwsb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6bnVsbCxzZXRFcnJvckhhbmRsZXI6bnVsbCxzZXRTdXNwZW5zZUhhbmRsZXI6bnVsbCxzY2hlZHVsZVVwZGF0ZTpudWxsLGN1cnJlbnREaXNwYXRjaGVyUmVmOnVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsZmluZEhvc3RJbnN0YW5jZUJ5RmliZXI6ZnVuY3Rpb24oYSl7YT1aYihhKTtyZXR1cm4gbnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZX0sZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dWwuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V8fFxua2wsZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbCxyZWNvbmNpbGVyVmVyc2lvbjpcIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwifTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHdsPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZighd2wuaXNEaXNhYmxlZCYmd2wuc3VwcG9ydHNGaWJlcil0cnl7a2M9d2wuaW5qZWN0KHZsKSxsYz13bH1jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dGw7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFvbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBkbChhLGIsbnVsbCxjKX07ZXhwb3J0cy5jcmVhdGVSb290PWZ1bmN0aW9uKGEsYil7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoMjk5KSk7dmFyIGM9ITEsZD1cIlwiLGU9bGw7bnVsbCE9PWImJnZvaWQgMCE9PWImJighMD09PWIudW5zdGFibGVfc3RyaWN0TW9kZSYmKGM9ITApLHZvaWQgMCE9PWIuaWRlbnRpZmllclByZWZpeCYmKGQ9Yi5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1iLm9uUmVjb3ZlcmFibGVFcnJvciYmKGU9Yi5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWNsKGEsMSwhMSxudWxsLG51bGwsYywhMSxkLGUpO2FbdWZdPWIuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7cmV0dXJuIG5ldyBtbChiKX07XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHAoMTg4KSk7YT1PYmplY3Qua2V5cyhhKS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihwKDI2OCxhKSk7fWE9WmIoYik7YT1udWxsPT09YT9udWxsOmEuc3RhdGVOb2RlO3JldHVybiBhfTtleHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhKXtyZXR1cm4gU2soYSl9O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIXBsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsYSxiLCEwLGMpfTtcbmV4cG9ydHMuaHlkcmF0ZVJvb3Q9ZnVuY3Rpb24oYSxiLGMpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDQwNSkpO3ZhciBkPW51bGwhPWMmJmMuaHlkcmF0ZWRTb3VyY2VzfHxudWxsLGU9ITEsZj1cIlwiLGc9bGw7bnVsbCE9PWMmJnZvaWQgMCE9PWMmJighMD09PWMudW5zdGFibGVfc3RyaWN0TW9kZSYmKGU9ITApLHZvaWQgMCE9PWMuaWRlbnRpZmllclByZWZpeCYmKGY9Yy5pZGVudGlmaWVyUHJlZml4KSx2b2lkIDAhPT1jLm9uUmVjb3ZlcmFibGVFcnJvciYmKGc9Yy5vblJlY292ZXJhYmxlRXJyb3IpKTtiPWZsKGIsbnVsbCxhLDEsbnVsbCE9Yz9jOm51bGwsZSwhMSxmLGcpO2FbdWZdPWIuY3VycmVudDtzZihhKTtpZihkKWZvcihhPTA7YTxkLmxlbmd0aDthKyspYz1kW2FdLGU9Yy5fZ2V0VmVyc2lvbixlPWUoYy5fc291cmNlKSxudWxsPT1iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtjLGVdOmIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGMsXG5lKTtyZXR1cm4gbmV3IG5sKGIpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXBsKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIHNsKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXBsKGEpKXRocm93IEVycm9yKHAoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhTayhmdW5jdGlvbigpe3NsKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVt1Zl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVJrO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcGwoYykpdGhyb3cgRXJyb3IocCgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcihwKDM4KSk7cmV0dXJuIHNsKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIjtcbiIsICIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCAiJ3VzZSBzdHJpY3QnO1xuXG52YXIgbSA9IHJlcXVpcmUoJ3JlYWN0LWRvbScpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gbS5jcmVhdGVSb290O1xuICBleHBvcnRzLmh5ZHJhdGVSb290ID0gbS5oeWRyYXRlUm9vdDtcbn0gZWxzZSB7XG4gIHZhciBpID0gbS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtcbiAgZXhwb3J0cy5jcmVhdGVSb290ID0gZnVuY3Rpb24oYywgbykge1xuICAgIGkudXNpbmdDbGllbnRFbnRyeVBvaW50ID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG0uY3JlYXRlUm9vdChjLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBmdW5jdGlvbihjLCBoLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5oeWRyYXRlUm9vdChjLCBoLCBvKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCAiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLG09T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsZyl7dmFyIGIsZD17fSxlPW51bGwsaD1udWxsO3ZvaWQgMCE9PWcmJihlPVwiXCIrZyk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYoaD1hLnJlZik7Zm9yKGIgaW4gYSltLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6ayx0eXBlOmMsa2V5OmUscmVmOmgscHJvcHM6ZCxfb3duZXI6bi5jdXJyZW50fX1leHBvcnRzLkZyYWdtZW50PWw7ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsICIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsICJpbXBvcnQgUmVhY3QsIHt1c2VFZmZlY3QsIHVzZVN0YXRlfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tL2NsaWVudCc7XG5pbXBvcnQge3Byb2plY3RTZXJ2aWNlLCB1c2VyU2VydmljZX0gZnJvbSBcIkAvc2VydmljZVwiO1xuaW1wb3J0IHRvYXN0LCB7VG9hc3Rlcn0gZnJvbSBcInJlYWN0LWhvdC10b2FzdFwiO1xuXG5jb25zdCBPcHRpb25zID0gKCkgPT4ge1xuICAgIGNvbnN0IFt3aGl0ZWxpc3QsIHNldFdoaXRlbGlzdF0gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuICAgIGNvbnN0IFtjdXJyZW50RG9tYWluLCBzZXRDdXJyZW50RG9tYWluXSA9IHVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbYXZhaWxhYmxlRG9tYWlucywgc2V0QXZhaWxhYmxlRG9tYWluc10gPSB1c2VTdGF0ZTxzdHJpbmdbXT4oW10pO1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgKFxuICAgICAgICAgICAgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHVzZXJTZXJ2aWNlLmxvZ2luKHt9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzLmNvbmZpZykge1xuICAgICAgICAgICAgICAgICAgICBzZXRXaGl0ZWxpc3QocmVzLmNvbmZpZy5kb21haW5XaGl0ZWxpc3QgfHwgW10pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKSgpXG4gICAgICAgIGlmICghY2hyb21lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmV0Y2ggYWxsIHRhYnMgYW5kIHNldCB0aGVpciBkb21haW5zIGluIHN0YXRlXG4gICAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KHt9LCAodGFicykgPT4ge1xuICAgICAgICAgICAgY29uc3QgZG9tYWluU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gICAgICAgICAgICB0YWJzLmZvckVhY2godGFiID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHRhYi51cmwgfHwgJycpO1xuICAgICAgICAgICAgICAgIGRvbWFpblNldC5hZGQodXJsLmhvc3RuYW1lKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0QXZhaWxhYmxlRG9tYWlucyhbLi4uZG9tYWluU2V0XSk7XG4gICAgICAgIH0pO1xuICAgIH0sIFtzZXRXaGl0ZWxpc3RdKTtcblxuICAgIGNvbnN0IGFkZERvbWFpbiA9ICgpID0+IHtcbiAgICAgICAgaWYgKGN1cnJlbnREb21haW4gJiYgIXdoaXRlbGlzdC5pbmNsdWRlcyhjdXJyZW50RG9tYWluKSkge1xuICAgICAgICAgICAgc2V0V2hpdGVsaXN0KFsuLi53aGl0ZWxpc3QsIGN1cnJlbnREb21haW5dKTtcbiAgICAgICAgICAgIHNldEN1cnJlbnREb21haW4oJycpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IHJlbW92ZURvbWFpbiA9IChkb21haW46IHN0cmluZykgPT4ge1xuICAgICAgICBzZXRXaGl0ZWxpc3QocHJldldoaXRlbGlzdCA9PiBwcmV2V2hpdGVsaXN0LmZpbHRlcihkID0+IGQgIT09IGRvbWFpbikpO1xuICAgIH07XG5cbiAgICBjb25zdCBzYXZlV2hpdGVsaXN0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdXNlclNlcnZpY2UudXBkYXRlQ29uZmlnKHtcbiAgICAgICAgICAgICAgICBkb21haW5XaGl0ZWxpc3Q6IHdoaXRlbGlzdCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0b2FzdC5zdWNjZXNzKCdXaGl0ZWxpc3Qgc2F2ZWQnKTtcbiAgICAgICAgfSBjYXRjaCAoZTogYW55KSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgdG9hc3QuZXJyb3IoZS5tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8aDM+V2hpdGVsaXN0ZWQgRG9tYWluczwvaDM+XG4gICAgICAgICAgICB7Lyo8RHJvcGRvd24qL31cbiAgICAgICAgICAgIHsvKiAgICBwbGFjZWhvbGRlcj1cIlNlbGVjdCBkb21haW5zIGZyb20gb3BlbmVkIHRhYnNcIiovfVxuICAgICAgICAgICAgey8qICAgIG9wdGlvbnM9e2F2YWlsYWJsZURvbWFpbnMubWFwKGRvbWFpbiA9PiAoeyBrZXk6IGRvbWFpbiwgdGV4dDogZG9tYWluIH0pKX0qL31cbiAgICAgICAgICAgIHsvKiAgICBvbkNoYW5nZT17KGUsIG9wdGlvbikgPT4gc2V0Q3VycmVudERvbWFpbihvcHRpb24/LnRleHQgfHwgJycpfSovfVxuICAgICAgICAgICAgey8qLz4qL31cbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPXtcInRleHRcIn1cbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVudGVyIGRvbWFpbiBob3N0bmFtZVwiXG4gICAgICAgICAgICAgICAgdmFsdWU9e2N1cnJlbnREb21haW59XG4gICAgICAgICAgICAgICAgLy8gb25DaGFuZ2U9eyhlLCBuZXdWYWx1ZSkgPT4gc2V0Q3VycmVudERvbWFpbihuZXdWYWx1ZSB8fCAnJyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9e1wiYnRuXCJ9IG9uQ2xpY2s9e2FkZERvbWFpbn0+QWRkIHRvIFdoaXRlbGlzdDwvYnV0dG9uPlxuICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgIHt3aGl0ZWxpc3QubWFwKChkb21haW4pID0+IChcbiAgICAgICAgICAgICAgICAgICAgPGxpIGtleT17ZG9tYWlufT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtkb21haW59XG4gICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17XCJidG5cIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiByZW1vdmVEb21haW4oZG9tYWluKX1cbiAgICAgICAgICAgICAgICAgICAgICAgID5EZWxldGU8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT17XCJidG5cIn0gb25DbGljaz17c2F2ZVdoaXRlbGlzdH0+U2F2ZSBXaGl0ZWxpc3Q8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgKTtcbn07XG5cblxuY29uc3Qgcm9vdEVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChyb290RWxlbSk7XG5cbmNvbnN0IHJvb3QgPSBSZWFjdERPTS5jcmVhdGVSb290KHJvb3RFbGVtIGFzIEhUTUxFbGVtZW50KTtcbnJvb3QucmVuZGVyKFxuICAgIDxSZWFjdC5TdHJpY3RNb2RlPlxuICAgICAgICA8T3B0aW9ucyAvPlxuICAgICAgICA8VG9hc3RlciAvPlxuICAgIDwvUmVhY3QuU3RyaWN0TW9kZT5cbik7XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQXNzZXJ0IHRoYXQgY29uZGl0aW9uIGlzIHRydXRoeSBvciB0aHJvdyBlcnJvciAod2l0aCBtZXNzYWdlKVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgbXNnKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9zdHJpY3QtYm9vbGVhbi1leHByZXNzaW9ucyAtLSB3ZSB3YW50IHRoZSBpbXBsaWNpdCBjb252ZXJzaW9uIHRvIGJvb2xlYW5cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG5jb25zdCBGTE9BVDMyX01BWCA9IDMuNDAyODIzNDY2Mzg1Mjg4NmUzOCwgRkxPQVQzMl9NSU4gPSAtMy40MDI4MjM0NjYzODUyODg2ZTM4LCBVSU5UMzJfTUFYID0gMHhmZmZmZmZmZiwgSU5UMzJfTUFYID0gMHg3ZmZmZmZmZiwgSU5UMzJfTUlOID0gLTB4ODAwMDAwMDA7XG4vKipcbiAqIEFzc2VydCBhIHZhbGlkIHNpZ25lZCBwcm90b2J1ZiAzMi1iaXQgaW50ZWdlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEludDMyKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSBcIm51bWJlclwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGludCAzMjogXCIgKyB0eXBlb2YgYXJnKTtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIoYXJnKSB8fCBhcmcgPiBJTlQzMl9NQVggfHwgYXJnIDwgSU5UMzJfTUlOKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGludCAzMjogXCIgKyBhcmcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC1wbHVzLW9wZXJhbmRzIC0tIHdlIHdhbnQgdGhlIGltcGxpY2l0IGNvbnZlcnNpb24gdG8gc3RyaW5nXG59XG4vKipcbiAqIEFzc2VydCBhIHZhbGlkIHVuc2lnbmVkIHByb3RvYnVmIDMyLWJpdCBpbnRlZ2VyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VUludDMyKGFyZykge1xuICAgIGlmICh0eXBlb2YgYXJnICE9PSBcIm51bWJlclwiKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHVpbnQgMzI6IFwiICsgdHlwZW9mIGFyZyk7XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGFyZykgfHwgYXJnID4gVUlOVDMyX01BWCB8fCBhcmcgPCAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHVpbnQgMzI6IFwiICsgYXJnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtcGx1cy1vcGVyYW5kcyAtLSB3ZSB3YW50IHRoZSBpbXBsaWNpdCBjb252ZXJzaW9uIHRvIHN0cmluZ1xufVxuLyoqXG4gKiBBc3NlcnQgYSB2YWxpZCBwcm90b2J1ZiBmbG9hdCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEZsb2F0MzIoYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09IFwibnVtYmVyXCIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZmxvYXQgMzI6IFwiICsgdHlwZW9mIGFyZyk7XG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoYXJnKSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChhcmcgPiBGTE9BVDMyX01BWCB8fCBhcmcgPCBGTE9BVDMyX01JTilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmbG9hdCAzMjogXCIgKyBhcmcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC1wbHVzLW9wZXJhbmRzIC0tIHdlIHdhbnQgdGhlIGltcGxpY2l0IGNvbnZlcnNpb24gdG8gc3RyaW5nXG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCIuL2Fzc2VydC5qc1wiO1xuY29uc3QgZW51bVR5cGVTeW1ib2wgPSBTeW1ib2woXCJAYnVmYnVpbGQvcHJvdG9idWYvZW51bS10eXBlXCIpO1xuLyoqXG4gKiBHZXQgcmVmbGVjdGlvbiBpbmZvcm1hdGlvbiBmcm9tIGEgZ2VuZXJhdGVkIGVudW0uXG4gKiBJZiB0aGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBzb21ldGhpbmcgb3RoZXIgdGhhbiBhIGdlbmVyYXRlZFxuICogZW51bSwgaXQgcmFpc2VzIGFuIGVycm9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW51bVR5cGUoZW51bU9iamVjdCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MsQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50LEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCB0ID0gZW51bU9iamVjdFtlbnVtVHlwZVN5bWJvbF07XG4gICAgYXNzZXJ0KHQsIFwibWlzc2luZyBlbnVtIHR5cGUgb24gZW51bSBvYmplY3RcIik7XG4gICAgcmV0dXJuIHQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm5cbn1cbi8qKlxuICogU2V0cyByZWZsZWN0aW9uIGluZm9ybWF0aW9uIG9uIGEgZ2VuZXJhdGVkIGVudW0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFbnVtVHlwZShlbnVtT2JqZWN0LCB0eXBlTmFtZSwgdmFsdWVzLCBvcHQpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgZW51bU9iamVjdFtlbnVtVHlwZVN5bWJvbF0gPSBtYWtlRW51bVR5cGUodHlwZU5hbWUsIHZhbHVlcy5tYXAoKHYpID0+ICh7XG4gICAgICAgIG5vOiB2Lm5vLFxuICAgICAgICBuYW1lOiB2Lm5hbWUsXG4gICAgICAgIGxvY2FsTmFtZTogZW51bU9iamVjdFt2Lm5vXSxcbiAgICB9KSksIG9wdCk7XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBFbnVtVHlwZSB3aXRoIHRoZSBnaXZlbiB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRW51bVR5cGUodHlwZU5hbWUsIHZhbHVlcywgXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5fb3B0KSB7XG4gICAgY29uc3QgbmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnN0IG51bWJlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIGNvbnN0IG5vcm1hbFZhbHVlcyA9IFtdO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICAgIC8vIFdlIGRvIG5vdCBzdXJmYWNlIG9wdGlvbnMgYXQgdGhpcyB0aW1lXG4gICAgICAgIC8vIGNvbnN0IHZhbHVlOiBFbnVtVmFsdWVJbmZvID0gey4uLnYsIG9wdGlvbnM6IHYub3B0aW9ucyA/PyBlbXB0eVJlYWRvbmx5T2JqZWN0fTtcbiAgICAgICAgY29uc3QgbiA9IG5vcm1hbGl6ZUVudW1WYWx1ZSh2YWx1ZSk7XG4gICAgICAgIG5vcm1hbFZhbHVlcy5wdXNoKG4pO1xuICAgICAgICBuYW1lc1t2YWx1ZS5uYW1lXSA9IG47XG4gICAgICAgIG51bWJlcnNbdmFsdWUubm9dID0gbjtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZU5hbWUsXG4gICAgICAgIHZhbHVlczogbm9ybWFsVmFsdWVzLFxuICAgICAgICAvLyBXZSBkbyBub3Qgc3VyZmFjZSBvcHRpb25zIGF0IHRoaXMgdGltZVxuICAgICAgICAvLyBvcHRpb25zOiBvcHQ/Lm9wdGlvbnMgPz8gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgICAgZmluZE5hbWUobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIG5hbWVzW25hbWVdO1xuICAgICAgICB9LFxuICAgICAgICBmaW5kTnVtYmVyKG5vKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyc1tub107XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGVudW0gb2JqZWN0IHdpdGggdGhlIGdpdmVuIHZhbHVlcy5cbiAqIFNldHMgcmVmbGVjdGlvbiBpbmZvcm1hdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VFbnVtKHR5cGVOYW1lLCB2YWx1ZXMsIG9wdCkge1xuICAgIGNvbnN0IGVudW1PYmplY3QgPSB7fTtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgICBjb25zdCBuID0gbm9ybWFsaXplRW51bVZhbHVlKHZhbHVlKTtcbiAgICAgICAgZW51bU9iamVjdFtuLmxvY2FsTmFtZV0gPSBuLm5vO1xuICAgICAgICBlbnVtT2JqZWN0W24ubm9dID0gbi5sb2NhbE5hbWU7XG4gICAgfVxuICAgIHNldEVudW1UeXBlKGVudW1PYmplY3QsIHR5cGVOYW1lLCB2YWx1ZXMsIG9wdCk7XG4gICAgcmV0dXJuIGVudW1PYmplY3Q7XG59XG5mdW5jdGlvbiBub3JtYWxpemVFbnVtVmFsdWUodmFsdWUpIHtcbiAgICBpZiAoXCJsb2NhbE5hbWVcIiBpbiB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHZhbHVlKSwgeyBsb2NhbE5hbWU6IHZhbHVlLm5hbWUgfSk7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogTWVzc2FnZSBpcyB0aGUgYmFzZSBjbGFzcyBvZiBldmVyeSBtZXNzYWdlLCBnZW5lcmF0ZWQsIG9yIGNyZWF0ZWQgYXRcbiAqIHJ1bnRpbWUuXG4gKlxuICogSXQgaXMgX25vdF8gc2FmZSB0byBleHRlbmQgdGhpcyBjbGFzcy4gSWYgeW91IHdhbnQgdG8gY3JlYXRlIGEgbWVzc2FnZSBhdFxuICogcnVuIHRpbWUsIHVzZSBwcm90bzMubWFrZU1lc3NhZ2VUeXBlKCkuXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlIHtcbiAgICAvKipcbiAgICAgKiBDb21wYXJlIHdpdGggYSBtZXNzYWdlIG9mIHRoZSBzYW1lIHR5cGUuXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFR5cGUoKS5ydW50aW1lLnV0aWwuZXF1YWxzKHRoaXMuZ2V0VHlwZSgpLCB0aGlzLCBvdGhlcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRlZXAgY29weS5cbiAgICAgKi9cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VHlwZSgpLnJ1bnRpbWUudXRpbC5jbG9uZSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFyc2UgZnJvbSBiaW5hcnkgZGF0YSwgbWVyZ2luZyBmaWVsZHMuXG4gICAgICpcbiAgICAgKiBSZXBlYXRlZCBmaWVsZHMgYXJlIGFwcGVuZGVkLiBNYXAgZW50cmllcyBhcmUgYWRkZWQsIG92ZXJ3cml0aW5nXG4gICAgICogZXhpc3Rpbmcga2V5cy5cbiAgICAgKlxuICAgICAqIElmIGEgbWVzc2FnZSBmaWVsZCBpcyBhbHJlYWR5IHByZXNlbnQsIGl0IHdpbGwgYmUgbWVyZ2VkIHdpdGggdGhlXG4gICAgICogbmV3IGRhdGEuXG4gICAgICovXG4gICAgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5nZXRUeXBlKCksIGZvcm1hdCA9IHR5cGUucnVudGltZS5iaW4sIG9wdCA9IGZvcm1hdC5tYWtlUmVhZE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGZvcm1hdC5yZWFkTWVzc2FnZSh0aGlzLCBvcHQucmVhZGVyRmFjdG9yeShieXRlcyksIGJ5dGVzLmJ5dGVMZW5ndGgsIG9wdCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBhIG1lc3NhZ2UgZnJvbSBhIEpTT04gdmFsdWUuXG4gICAgICovXG4gICAgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmdldFR5cGUoKSwgZm9ybWF0ID0gdHlwZS5ydW50aW1lLmpzb24sIG9wdCA9IGZvcm1hdC5tYWtlUmVhZE9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIGZvcm1hdC5yZWFkTWVzc2FnZSh0eXBlLCBqc29uVmFsdWUsIG9wdCwgdGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQYXJzZSBhIG1lc3NhZ2UgZnJvbSBhIEpTT04gc3RyaW5nLlxuICAgICAqL1xuICAgIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IGpzb247XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBqc29uID0gSlNPTi5wYXJzZShqc29uU3RyaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZGVjb2RlICR7dGhpcy5nZXRUeXBlKCkudHlwZU5hbWV9IGZyb20gSlNPTjogJHtlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBTdHJpbmcoZSl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbUpzb24oanNvbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlcmlhbGl6ZSB0aGUgbWVzc2FnZSB0byBiaW5hcnkgZGF0YS5cbiAgICAgKi9cbiAgICB0b0JpbmFyeShvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLmdldFR5cGUoKSwgYmluID0gdHlwZS5ydW50aW1lLmJpbiwgb3B0ID0gYmluLm1ha2VXcml0ZU9wdGlvbnMob3B0aW9ucyksIHdyaXRlciA9IG9wdC53cml0ZXJGYWN0b3J5KCk7XG4gICAgICAgIGJpbi53cml0ZU1lc3NhZ2UodGhpcywgd3JpdGVyLCBvcHQpO1xuICAgICAgICByZXR1cm4gd3JpdGVyLmZpbmlzaCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXJpYWxpemUgdGhlIG1lc3NhZ2UgdG8gYSBKU09OIHZhbHVlLCBhIEphdmFTY3JpcHQgdmFsdWUgdGhhdCBjYW4gYmVcbiAgICAgKiBwYXNzZWQgdG8gSlNPTi5zdHJpbmdpZnkoKS5cbiAgICAgKi9cbiAgICB0b0pzb24ob3B0aW9ucykge1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5nZXRUeXBlKCksIGpzb24gPSB0eXBlLnJ1bnRpbWUuanNvbiwgb3B0ID0ganNvbi5tYWtlV3JpdGVPcHRpb25zKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4ganNvbi53cml0ZU1lc3NhZ2UodGhpcywgb3B0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VyaWFsaXplIHRoZSBtZXNzYWdlIHRvIGEgSlNPTiBzdHJpbmcuXG4gICAgICovXG4gICAgdG9Kc29uU3RyaW5nKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudG9Kc29uKG9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIG51bGwsIChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5wcmV0dHlTcGFjZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSBmb3Igc2VyaWFsaXphdGlvbiBiZWhhdmlvci4gVGhpcyB3aWxsIGJlIGludm9rZWQgd2hlbiBjYWxsaW5nXG4gICAgICogSlNPTi5zdHJpbmdpZnkgb24gdGhpcyBtZXNzYWdlIChpLmUuIEpTT04uc3RyaW5naWZ5KG1zZykpLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoaXMgd2lsbCBub3Qgc2VyaWFsaXplIGdvb2dsZS5wcm90b2J1Zi5Bbnkgd2l0aCBhIHBhY2tlZFxuICAgICAqIG1lc3NhZ2UgYmVjYXVzZSB0aGUgcHJvdG9idWYgSlNPTiBmb3JtYXQgc3BlY2lmaWVzIHRoYXQgaXQgbmVlZHMgdG8gYmVcbiAgICAgKiB1bnBhY2tlZCwgYW5kIHRoaXMgaXMgb25seSBwb3NzaWJsZSB3aXRoIGEgdHlwZSByZWdpc3RyeSB0byBsb29rIHVwIHRoZVxuICAgICAqIG1lc3NhZ2UgdHlwZS4gIEFzIGEgcmVzdWx0LCBhdHRlbXB0aW5nIHRvIHNlcmlhbGl6ZSBhIG1lc3NhZ2Ugd2l0aCB0aGlzXG4gICAgICogdHlwZSB3aWxsIHRocm93IGFuIEVycm9yLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgcHJvdGVjdGVkIGJlY2F1c2UgeW91IHNob3VsZCBub3QgbmVlZCB0byBpbnZva2UgaXRcbiAgICAgKiBkaXJlY3RseSAtLSBpbnN0ZWFkIHVzZSBKU09OLnN0cmluZ2lmeSBvciB0b0pzb25TdHJpbmcgZm9yXG4gICAgICogc3RyaW5naWZpZWQgSlNPTi4gIEFsdGVybmF0aXZlbHksIGlmIGFjdHVhbCBKU09OIGlzIGRlc2lyZWQsIHlvdSBzaG91bGRcbiAgICAgKiB1c2UgdG9Kc29uLlxuICAgICAqL1xuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG9Kc29uKHtcbiAgICAgICAgICAgIGVtaXREZWZhdWx0VmFsdWVzOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIE1lc3NhZ2VUeXBlIG9mIHRoaXMgbWVzc2FnZSAtIGEgc2luZ2xldG9uIHRoYXQgcmVwcmVzZW50c1xuICAgICAqIHRoZSBwcm90b2J1ZiBtZXNzYWdlIGRlY2xhcmF0aW9uIGFuZCBwcm92aWRlcyBtZXRhZGF0YSBmb3IgcmVmbGVjdGlvbi1cbiAgICAgKiBiYXNlZCBvcGVyYXRpb25zLlxuICAgICAqL1xuICAgIGdldFR5cGUoKSB7XG4gICAgICAgIC8vIEFueSBjbGFzcyB0aGF0IGV4dGVuZHMgTWVzc2FnZSBfbXVzdF8gcHJvdmlkZSBhIGNvbXBsZXRlIHN0YXRpY1xuICAgICAgICAvLyBpbXBsZW1lbnRhdGlvbiBvZiBNZXNzYWdlVHlwZS5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVyblxuICAgICAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yO1xuICAgIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzIEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCIuLi9tZXNzYWdlLmpzXCI7XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBtZXNzYWdlIHR5cGUgdXNpbmcgdGhlIGdpdmVuIHJ1bnRpbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlTWVzc2FnZVR5cGUocnVudGltZSwgdHlwZU5hbWUsIGZpZWxkcywgb3B0KSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IGxvY2FsTmFtZSA9IChfYSA9IG9wdCA9PT0gbnVsbCB8fCBvcHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdC5sb2NhbE5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHR5cGVOYW1lLnN1YnN0cmluZyh0eXBlTmFtZS5sYXN0SW5kZXhPZihcIi5cIikgKyAxKTtcbiAgICBjb25zdCB0eXBlID0ge1xuICAgICAgICBbbG9jYWxOYW1lXTogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHJ1bnRpbWUudXRpbC5pbml0RmllbGRzKHRoaXMpO1xuICAgICAgICAgICAgcnVudGltZS51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgICAgICB9LFxuICAgIH1bbG9jYWxOYW1lXTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodHlwZS5wcm90b3R5cGUsIG5ldyBNZXNzYWdlKCkpO1xuICAgIE9iamVjdC5hc3NpZ24odHlwZSwge1xuICAgICAgICBydW50aW1lLFxuICAgICAgICB0eXBlTmFtZSxcbiAgICAgICAgZmllbGRzOiBydW50aW1lLnV0aWwubmV3RmllbGRMaXN0KGZpZWxkcyksXG4gICAgICAgIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdHlwZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgICAgICB9LFxuICAgICAgICBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdHlwZSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgdHlwZSgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICAgICAgICB9LFxuICAgICAgICBlcXVhbHMoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIHJ1bnRpbWUudXRpbC5lcXVhbHModHlwZSwgYSwgYik7XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIHR5cGU7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IGdldEVudW1UeXBlLCBtYWtlRW51bSwgbWFrZUVudW1UeXBlIH0gZnJvbSBcIi4vZW51bS5qc1wiO1xuaW1wb3J0IHsgbWFrZU1lc3NhZ2VUeXBlIH0gZnJvbSBcIi4vbWVzc2FnZS10eXBlLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gbWFrZVByb3RvUnVudGltZShzeW50YXgsIGpzb24sIGJpbiwgdXRpbCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN5bnRheCxcbiAgICAgICAganNvbixcbiAgICAgICAgYmluLFxuICAgICAgICB1dGlsLFxuICAgICAgICBtYWtlTWVzc2FnZVR5cGUodHlwZU5hbWUsIGZpZWxkcywgb3B0KSB7XG4gICAgICAgICAgICByZXR1cm4gbWFrZU1lc3NhZ2VUeXBlKHRoaXMsIHR5cGVOYW1lLCBmaWVsZHMsIG9wdCk7XG4gICAgICAgIH0sXG4gICAgICAgIG1ha2VFbnVtLFxuICAgICAgICBtYWtlRW51bVR5cGUsXG4gICAgICAgIGdldEVudW1UeXBlLFxuICAgIH07XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogU2NhbGFyIHZhbHVlIHR5cGVzLiBUaGlzIGlzIGEgc3Vic2V0IG9mIGZpZWxkIHR5cGVzIGRlY2xhcmVkIGJ5IHByb3RvYnVmXG4gKiBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5UeXBlIFRoZSB0eXBlcyBHUk9VUCBhbmQgTUVTU0FHRVxuICogYXJlIG9taXR0ZWQsIGJ1dCB0aGUgbnVtZXJpY2FsIHZhbHVlcyBhcmUgaWRlbnRpY2FsLlxuICovXG5leHBvcnQgdmFyIFNjYWxhclR5cGU7XG4oZnVuY3Rpb24gKFNjYWxhclR5cGUpIHtcbiAgICAvLyAwIGlzIHJlc2VydmVkIGZvciBlcnJvcnMuXG4gICAgLy8gT3JkZXIgaXMgd2VpcmQgZm9yIGhpc3RvcmljYWwgcmVhc29ucy5cbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJET1VCTEVcIl0gPSAxXSA9IFwiRE9VQkxFXCI7XG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiRkxPQVRcIl0gPSAyXSA9IFwiRkxPQVRcIjtcbiAgICAvLyBOb3QgWmlnWmFnIGVuY29kZWQuICBOZWdhdGl2ZSBudW1iZXJzIHRha2UgMTAgYnl0ZXMuICBVc2UgVFlQRV9TSU5UNjQgaWZcbiAgICAvLyBuZWdhdGl2ZSB2YWx1ZXMgYXJlIGxpa2VseS5cbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJJTlQ2NFwiXSA9IDNdID0gXCJJTlQ2NFwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIlVJTlQ2NFwiXSA9IDRdID0gXCJVSU5UNjRcIjtcbiAgICAvLyBOb3QgWmlnWmFnIGVuY29kZWQuICBOZWdhdGl2ZSBudW1iZXJzIHRha2UgMTAgYnl0ZXMuICBVc2UgVFlQRV9TSU5UMzIgaWZcbiAgICAvLyBuZWdhdGl2ZSB2YWx1ZXMgYXJlIGxpa2VseS5cbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJJTlQzMlwiXSA9IDVdID0gXCJJTlQzMlwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIkZJWEVENjRcIl0gPSA2XSA9IFwiRklYRUQ2NFwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIkZJWEVEMzJcIl0gPSA3XSA9IFwiRklYRUQzMlwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIkJPT0xcIl0gPSA4XSA9IFwiQk9PTFwiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIlNUUklOR1wiXSA9IDldID0gXCJTVFJJTkdcIjtcbiAgICAvLyBUYWctZGVsaW1pdGVkIGFnZ3JlZ2F0ZS5cbiAgICAvLyBHcm91cCB0eXBlIGlzIGRlcHJlY2F0ZWQgYW5kIG5vdCBzdXBwb3J0ZWQgaW4gcHJvdG8zLiBIb3dldmVyLCBQcm90bzNcbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIHN0aWxsIGJlIGFibGUgdG8gcGFyc2UgdGhlIGdyb3VwIHdpcmUgZm9ybWF0IGFuZFxuICAgIC8vIHRyZWF0IGdyb3VwIGZpZWxkcyBhcyB1bmtub3duIGZpZWxkcy5cbiAgICAvLyBUWVBFX0dST1VQID0gMTAsXG4gICAgLy8gVFlQRV9NRVNTQUdFID0gMTEsICAvLyBMZW5ndGgtZGVsaW1pdGVkIGFnZ3JlZ2F0ZS5cbiAgICAvLyBOZXcgaW4gdmVyc2lvbiAyLlxuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIkJZVEVTXCJdID0gMTJdID0gXCJCWVRFU1wiO1xuICAgIFNjYWxhclR5cGVbU2NhbGFyVHlwZVtcIlVJTlQzMlwiXSA9IDEzXSA9IFwiVUlOVDMyXCI7XG4gICAgLy8gVFlQRV9FTlVNID0gMTQsXG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiU0ZJWEVEMzJcIl0gPSAxNV0gPSBcIlNGSVhFRDMyXCI7XG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiU0ZJWEVENjRcIl0gPSAxNl0gPSBcIlNGSVhFRDY0XCI7XG4gICAgU2NhbGFyVHlwZVtTY2FsYXJUeXBlW1wiU0lOVDMyXCJdID0gMTddID0gXCJTSU5UMzJcIjtcbiAgICBTY2FsYXJUeXBlW1NjYWxhclR5cGVbXCJTSU5UNjRcIl0gPSAxOF0gPSBcIlNJTlQ2NFwiO1xufSkoU2NhbGFyVHlwZSB8fCAoU2NhbGFyVHlwZSA9IHt9KSk7XG4vKipcbiAqIEphdmFTY3JpcHQgcmVwcmVzZW50YXRpb24gb2YgZmllbGRzIHdpdGggNjQgYml0IGludGVncmFsIHR5cGVzIChpbnQ2NCwgdWludDY0LFxuICogc2ludDY0LCBmaXhlZDY0LCBzZml4ZWQ2NCkuXG4gKlxuICogVGhpcyBpcyBhIHN1YnNldCBvZiBnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLkpTVHlwZSwgd2hpY2ggZGVmaW5lcyBKU19OT1JNQUwsXG4gKiBKU19TVFJJTkcsIGFuZCBKU19OVU1CRVIuIFByb3RvYnVmLUVTIHVzZXMgQmlnSW50IGJ5IGRlZmF1bHQsIGJ1dCB3aWxsIHVzZVxuICogU3RyaW5nIGlmIGBbanN0eXBlID0gSlNfU1RSSU5HXWAgaXMgc3BlY2lmaWVkLlxuICpcbiAqIGBgYHByb3RvYnVmXG4gKiB1aW50NjQgZmllbGRfYSA9IDE7IC8vIEJpZ0ludFxuICogdWludDY0IGZpZWxkX2IgPSAyIFtqc3R5cGUgPSBKU19OT1JNQUxdOyAvLyBCaWdJbnRcbiAqIHVpbnQ2NCBmaWVsZF9iID0gMiBbanN0eXBlID0gSlNfTlVNQkVSXTsgLy8gQmlnSW50XG4gKiB1aW50NjQgZmllbGRfYiA9IDIgW2pzdHlwZSA9IEpTX1NUUklOR107IC8vIFN0cmluZ1xuICogYGBgXG4gKi9cbmV4cG9ydCB2YXIgTG9uZ1R5cGU7XG4oZnVuY3Rpb24gKExvbmdUeXBlKSB7XG4gICAgLyoqXG4gICAgICogVXNlIEphdmFTY3JpcHQgQmlnSW50LlxuICAgICAqL1xuICAgIExvbmdUeXBlW0xvbmdUeXBlW1wiQklHSU5UXCJdID0gMF0gPSBcIkJJR0lOVFwiO1xuICAgIC8qKlxuICAgICAqIFVzZSBKYXZhU2NyaXB0IFN0cmluZy5cbiAgICAgKlxuICAgICAqIEZpZWxkIG9wdGlvbiBgW2pzdHlwZSA9IEpTX1NUUklOR11gLlxuICAgICAqL1xuICAgIExvbmdUeXBlW0xvbmdUeXBlW1wiU1RSSU5HXCJdID0gMV0gPSBcIlNUUklOR1wiO1xufSkoTG9uZ1R5cGUgfHwgKExvbmdUeXBlID0ge30pKTtcbiIsICIvLyBDb3B5cmlnaHQgMjAwOCBHb29nbGUgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vXG4vLyBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXRcbi8vIG1vZGlmaWNhdGlvbiwgYXJlIHBlcm1pdHRlZCBwcm92aWRlZCB0aGF0IHRoZSBmb2xsb3dpbmcgY29uZGl0aW9ucyBhcmVcbi8vIG1ldDpcbi8vXG4vLyAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4vLyBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4vLyAqIFJlZGlzdHJpYnV0aW9ucyBpbiBiaW5hcnkgZm9ybSBtdXN0IHJlcHJvZHVjZSB0aGUgYWJvdmVcbi8vIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXJcbi8vIGluIHRoZSBkb2N1bWVudGF0aW9uIGFuZC9vciBvdGhlciBtYXRlcmlhbHMgcHJvdmlkZWQgd2l0aCB0aGVcbi8vIGRpc3RyaWJ1dGlvbi5cbi8vICogTmVpdGhlciB0aGUgbmFtZSBvZiBHb29nbGUgSW5jLiBub3IgdGhlIG5hbWVzIG9mIGl0c1xuLy8gY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb21cbi8vIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24uXG4vL1xuLy8gVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SU1xuLy8gXCJBUyBJU1wiIEFORCBBTlkgRVhQUkVTUyBPUiBJTVBMSUVEIFdBUlJBTlRJRVMsIElOQ0xVRElORywgQlVUIE5PVFxuLy8gTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SXG4vLyBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBUkUgRElTQ0xBSU1FRC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIENPUFlSSUdIVFxuLy8gT1dORVIgT1IgQ09OVFJJQlVUT1JTIEJFIExJQUJMRSBGT1IgQU5ZIERJUkVDVCwgSU5ESVJFQ1QsIElOQ0lERU5UQUwsXG4vLyBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UXG4vLyBMSU1JVEVEIFRPLCBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSxcbi8vIERBVEEsIE9SIFBST0ZJVFM7IE9SIEJVU0lORVNTIElOVEVSUlVQVElPTikgSE9XRVZFUiBDQVVTRUQgQU5EIE9OIEFOWVxuLy8gVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVFxuLy8gKElOQ0xVRElORyBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFXG4vLyBPRiBUSElTIFNPRlRXQVJFLCBFVkVOIElGIEFEVklTRUQgT0YgVEhFIFBPU1NJQklMSVRZIE9GIFNVQ0ggREFNQUdFLlxuLy9cbi8vIENvZGUgZ2VuZXJhdGVkIGJ5IHRoZSBQcm90b2NvbCBCdWZmZXIgY29tcGlsZXIgaXMgb3duZWQgYnkgdGhlIG93bmVyXG4vLyBvZiB0aGUgaW5wdXQgZmlsZSB1c2VkIHdoZW4gZ2VuZXJhdGluZyBpdC4gIFRoaXMgY29kZSBpcyBub3Rcbi8vIHN0YW5kYWxvbmUgYW5kIHJlcXVpcmVzIGEgc3VwcG9ydCBsaWJyYXJ5IHRvIGJlIGxpbmtlZCB3aXRoIGl0LiAgVGhpc1xuLy8gc3VwcG9ydCBsaWJyYXJ5IGlzIGl0c2VsZiBjb3ZlcmVkIGJ5IHRoZSBhYm92ZSBsaWNlbnNlLlxuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLWNvbnN0LEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC1wbHVzLW9wZXJhbmRzICovXG4vKipcbiAqIFJlYWQgYSA2NCBiaXQgdmFyaW50IGFzIHR3byBKUyBudW1iZXJzLlxuICpcbiAqIFJldHVybnMgdHVwbGU6XG4gKiBbMF06IGxvdyBiaXRzXG4gKiBbMV06IGhpZ2ggYml0c1xuICpcbiAqIENvcHlyaWdodCAyMDA4IEdvb2dsZSBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcHJvdG9jb2xidWZmZXJzL3Byb3RvYnVmL2Jsb2IvOGE3MTkyN2Q3NGE0Y2UzNGVmZTJkODc2OWZkYTE5OGY1MmQyMGQxMi9qcy9leHBlcmltZW50YWwvcnVudGltZS9rZXJuZWwvYnVmZmVyX2RlY29kZXIuanMjTDE3NVxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFyaW50NjRyZWFkKCkge1xuICAgIGxldCBsb3dCaXRzID0gMDtcbiAgICBsZXQgaGlnaEJpdHMgPSAwO1xuICAgIGZvciAobGV0IHNoaWZ0ID0gMDsgc2hpZnQgPCAyODsgc2hpZnQgKz0gNykge1xuICAgICAgICBsZXQgYiA9IHRoaXMuYnVmW3RoaXMucG9zKytdO1xuICAgICAgICBsb3dCaXRzIHw9IChiICYgMHg3ZikgPDwgc2hpZnQ7XG4gICAgICAgIGlmICgoYiAmIDB4ODApID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuYXNzZXJ0Qm91bmRzKCk7XG4gICAgICAgICAgICByZXR1cm4gW2xvd0JpdHMsIGhpZ2hCaXRzXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgbWlkZGxlQnl0ZSA9IHRoaXMuYnVmW3RoaXMucG9zKytdO1xuICAgIC8vIGxhc3QgZm91ciBiaXRzIG9mIHRoZSBmaXJzdCAzMiBiaXQgbnVtYmVyXG4gICAgbG93Qml0cyB8PSAobWlkZGxlQnl0ZSAmIDB4MGYpIDw8IDI4O1xuICAgIC8vIDMgdXBwZXIgYml0cyBhcmUgcGFydCBvZiB0aGUgbmV4dCAzMiBiaXQgbnVtYmVyXG4gICAgaGlnaEJpdHMgPSAobWlkZGxlQnl0ZSAmIDB4NzApID4+IDQ7XG4gICAgaWYgKChtaWRkbGVCeXRlICYgMHg4MCkgPT0gMCkge1xuICAgICAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgICAgICByZXR1cm4gW2xvd0JpdHMsIGhpZ2hCaXRzXTtcbiAgICB9XG4gICAgZm9yIChsZXQgc2hpZnQgPSAzOyBzaGlmdCA8PSAzMTsgc2hpZnQgKz0gNykge1xuICAgICAgICBsZXQgYiA9IHRoaXMuYnVmW3RoaXMucG9zKytdO1xuICAgICAgICBoaWdoQml0cyB8PSAoYiAmIDB4N2YpIDw8IHNoaWZ0O1xuICAgICAgICBpZiAoKGIgJiAweDgwKSA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgICAgICAgICAgcmV0dXJuIFtsb3dCaXRzLCBoaWdoQml0c107XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCB2YXJpbnRcIik7XG59XG4vKipcbiAqIFdyaXRlIGEgNjQgYml0IHZhcmludCwgZ2l2ZW4gYXMgdHdvIEpTIG51bWJlcnMsIHRvIHRoZSBnaXZlbiBieXRlcyBhcnJheS5cbiAqXG4gKiBDb3B5cmlnaHQgMjAwOCBHb29nbGUgSW5jLiAgQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Byb3RvY29sYnVmZmVycy9wcm90b2J1Zi9ibG9iLzhhNzE5MjdkNzRhNGNlMzRlZmUyZDg3NjlmZGExOThmNTJkMjBkMTIvanMvZXhwZXJpbWVudGFsL3J1bnRpbWUva2VybmVsL3dyaXRlci5qcyNMMzQ0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YXJpbnQ2NHdyaXRlKGxvLCBoaSwgYnl0ZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDI4OyBpID0gaSArIDcpIHtcbiAgICAgICAgY29uc3Qgc2hpZnQgPSBsbyA+Pj4gaTtcbiAgICAgICAgY29uc3QgaGFzTmV4dCA9ICEoc2hpZnQgPj4+IDcgPT0gMCAmJiBoaSA9PSAwKTtcbiAgICAgICAgY29uc3QgYnl0ZSA9IChoYXNOZXh0ID8gc2hpZnQgfCAweDgwIDogc2hpZnQpICYgMHhmZjtcbiAgICAgICAgYnl0ZXMucHVzaChieXRlKTtcbiAgICAgICAgaWYgKCFoYXNOZXh0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3BsaXRCaXRzID0gKChsbyA+Pj4gMjgpICYgMHgwZikgfCAoKGhpICYgMHgwNykgPDwgNCk7XG4gICAgY29uc3QgaGFzTW9yZUJpdHMgPSAhKGhpID4+IDMgPT0gMCk7XG4gICAgYnl0ZXMucHVzaCgoaGFzTW9yZUJpdHMgPyBzcGxpdEJpdHMgfCAweDgwIDogc3BsaXRCaXRzKSAmIDB4ZmYpO1xuICAgIGlmICghaGFzTW9yZUJpdHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMzsgaSA8IDMxOyBpID0gaSArIDcpIHtcbiAgICAgICAgY29uc3Qgc2hpZnQgPSBoaSA+Pj4gaTtcbiAgICAgICAgY29uc3QgaGFzTmV4dCA9ICEoc2hpZnQgPj4+IDcgPT0gMCk7XG4gICAgICAgIGNvbnN0IGJ5dGUgPSAoaGFzTmV4dCA/IHNoaWZ0IHwgMHg4MCA6IHNoaWZ0KSAmIDB4ZmY7XG4gICAgICAgIGJ5dGVzLnB1c2goYnl0ZSk7XG4gICAgICAgIGlmICghaGFzTmV4dCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIGJ5dGVzLnB1c2goKGhpID4+PiAzMSkgJiAweDAxKTtcbn1cbi8vIGNvbnN0YW50cyBmb3IgYmluYXJ5IG1hdGhcbmNvbnN0IFRXT19QV1JfMzJfREJMID0gMHgxMDAwMDAwMDA7XG4vKipcbiAqIFBhcnNlIGRlY2ltYWwgc3RyaW5nIG9mIDY0IGJpdCBpbnRlZ2VyIHZhbHVlIGFzIHR3byBKUyBudW1iZXJzLlxuICpcbiAqIENvcHlyaWdodCAyMDA4IEdvb2dsZSBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcHJvdG9jb2xidWZmZXJzL3Byb3RvYnVmLWphdmFzY3JpcHQvYmxvYi9hNDI4YzU4MjczYWJhZDA3YzY2MDcxZDk3NTNiYzRkMTI4OWRlNDI2L2V4cGVyaW1lbnRhbC9ydW50aW1lL2ludDY0LmpzI0wxMFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW50NjRGcm9tU3RyaW5nKGRlYykge1xuICAgIC8vIENoZWNrIGZvciBtaW51cyBzaWduLlxuICAgIGNvbnN0IG1pbnVzID0gZGVjWzBdID09PSBcIi1cIjtcbiAgICBpZiAobWludXMpIHtcbiAgICAgICAgZGVjID0gZGVjLnNsaWNlKDEpO1xuICAgIH1cbiAgICAvLyBXb3JrIDYgZGVjaW1hbCBkaWdpdHMgYXQgYSB0aW1lLCBhY3RpbmcgbGlrZSB3ZSdyZSBjb252ZXJ0aW5nIGJhc2UgMWU2XG4gICAgLy8gZGlnaXRzIHRvIGJpbmFyeS4gVGhpcyBpcyBzYWZlIHRvIGRvIHdpdGggZmxvYXRpbmcgcG9pbnQgbWF0aCBiZWNhdXNlXG4gICAgLy8gTnVtYmVyLmlzU2FmZUludGVnZXIoQUxMXzMyX0JJVFMgKiAxZTYpID09IHRydWUuXG4gICAgY29uc3QgYmFzZSA9IDFlNjtcbiAgICBsZXQgbG93Qml0cyA9IDA7XG4gICAgbGV0IGhpZ2hCaXRzID0gMDtcbiAgICBmdW5jdGlvbiBhZGQxZTZkaWdpdChiZWdpbiwgZW5kKSB7XG4gICAgICAgIC8vIE5vdGU6IE51bWJlcignJykgaXMgMC5cbiAgICAgICAgY29uc3QgZGlnaXQxZTYgPSBOdW1iZXIoZGVjLnNsaWNlKGJlZ2luLCBlbmQpKTtcbiAgICAgICAgaGlnaEJpdHMgKj0gYmFzZTtcbiAgICAgICAgbG93Qml0cyA9IGxvd0JpdHMgKiBiYXNlICsgZGlnaXQxZTY7XG4gICAgICAgIC8vIENhcnJ5IGJpdHMgZnJvbSBsb3dCaXRzIHRvXG4gICAgICAgIGlmIChsb3dCaXRzID49IFRXT19QV1JfMzJfREJMKSB7XG4gICAgICAgICAgICBoaWdoQml0cyA9IGhpZ2hCaXRzICsgKChsb3dCaXRzIC8gVFdPX1BXUl8zMl9EQkwpIHwgMCk7XG4gICAgICAgICAgICBsb3dCaXRzID0gbG93Qml0cyAlIFRXT19QV1JfMzJfREJMO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZDFlNmRpZ2l0KC0yNCwgLTE4KTtcbiAgICBhZGQxZTZkaWdpdCgtMTgsIC0xMik7XG4gICAgYWRkMWU2ZGlnaXQoLTEyLCAtNik7XG4gICAgYWRkMWU2ZGlnaXQoLTYpO1xuICAgIHJldHVybiBtaW51cyA/IG5lZ2F0ZShsb3dCaXRzLCBoaWdoQml0cykgOiBuZXdCaXRzKGxvd0JpdHMsIGhpZ2hCaXRzKTtcbn1cbi8qKlxuICogTG9zc2xlc3NseSBjb252ZXJ0cyBhIDY0LWJpdCBzaWduZWQgaW50ZWdlciBpbiAzMjozMiBzcGxpdCByZXByZXNlbnRhdGlvblxuICogaW50byBhIGRlY2ltYWwgc3RyaW5nLlxuICpcbiAqIENvcHlyaWdodCAyMDA4IEdvb2dsZSBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcHJvdG9jb2xidWZmZXJzL3Byb3RvYnVmLWphdmFzY3JpcHQvYmxvYi9hNDI4YzU4MjczYWJhZDA3YzY2MDcxZDk3NTNiYzRkMTI4OWRlNDI2L2V4cGVyaW1lbnRhbC9ydW50aW1lL2ludDY0LmpzI0wxMFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW50NjRUb1N0cmluZyhsbywgaGkpIHtcbiAgICBsZXQgYml0cyA9IG5ld0JpdHMobG8sIGhpKTtcbiAgICAvLyBJZiB3ZSdyZSB0cmVhdGluZyB0aGUgaW5wdXQgYXMgYSBzaWduZWQgdmFsdWUgYW5kIHRoZSBoaWdoIGJpdCBpcyBzZXQsIGRvXG4gICAgLy8gYSBtYW51YWwgdHdvJ3MgY29tcGxlbWVudCBjb252ZXJzaW9uIGJlZm9yZSB0aGUgZGVjaW1hbCBjb252ZXJzaW9uLlxuICAgIGNvbnN0IG5lZ2F0aXZlID0gKGJpdHMuaGkgJiAweDgwMDAwMDAwKTtcbiAgICBpZiAobmVnYXRpdmUpIHtcbiAgICAgICAgYml0cyA9IG5lZ2F0ZShiaXRzLmxvLCBiaXRzLmhpKTtcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gdUludDY0VG9TdHJpbmcoYml0cy5sbywgYml0cy5oaSk7XG4gICAgcmV0dXJuIG5lZ2F0aXZlID8gXCItXCIgKyByZXN1bHQgOiByZXN1bHQ7XG59XG4vKipcbiAqIExvc3NsZXNzbHkgY29udmVydHMgYSA2NC1iaXQgdW5zaWduZWQgaW50ZWdlciBpbiAzMjozMiBzcGxpdCByZXByZXNlbnRhdGlvblxuICogaW50byBhIGRlY2ltYWwgc3RyaW5nLlxuICpcbiAqIENvcHlyaWdodCAyMDA4IEdvb2dsZSBJbmMuICBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcHJvdG9jb2xidWZmZXJzL3Byb3RvYnVmLWphdmFzY3JpcHQvYmxvYi9hNDI4YzU4MjczYWJhZDA3YzY2MDcxZDk3NTNiYzRkMTI4OWRlNDI2L2V4cGVyaW1lbnRhbC9ydW50aW1lL2ludDY0LmpzI0wxMFxuICovXG5leHBvcnQgZnVuY3Rpb24gdUludDY0VG9TdHJpbmcobG8sIGhpKSB7XG4gICAgKHsgbG8sIGhpIH0gPSB0b1Vuc2lnbmVkKGxvLCBoaSkpO1xuICAgIC8vIFNraXAgdGhlIGV4cGVuc2l2ZSBjb252ZXJzaW9uIGlmIHRoZSBudW1iZXIgaXMgc21hbGwgZW5vdWdoIHRvIHVzZSB0aGVcbiAgICAvLyBidWlsdC1pbiBjb252ZXJzaW9ucy5cbiAgICAvLyBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiA9IDB4MDAxRkZGRkYgRkZGRkZGRkYsIHRodXMgYW55IG51bWJlciB3aXRoXG4gICAgLy8gaGlnaEJpdHMgPD0gMHgxRkZGRkYgY2FuIGJlIHNhZmVseSBleHByZXNzZWQgd2l0aCBhIGRvdWJsZSBhbmQgcmV0YWluXG4gICAgLy8gaW50ZWdlciBwcmVjaXNpb24uXG4gICAgLy8gUHJvdmVuIGJ5OiBOdW1iZXIuaXNTYWZlSW50ZWdlcigweDFGRkZGRiAqIDIqKjMyICsgMHhGRkZGRkZGRikgPT0gdHJ1ZS5cbiAgICBpZiAoaGkgPD0gMHgxRkZGRkYpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyhUV09fUFdSXzMyX0RCTCAqIGhpICsgbG8pO1xuICAgIH1cbiAgICAvLyBXaGF0IHRoaXMgY29kZSBpcyBkb2luZyBpcyBlc3NlbnRpYWxseSBjb252ZXJ0aW5nIHRoZSBpbnB1dCBudW1iZXIgZnJvbVxuICAgIC8vIGJhc2UtMiB0byBiYXNlLTFlNywgd2hpY2ggYWxsb3dzIHVzIHRvIHJlcHJlc2VudCB0aGUgNjQtYml0IHJhbmdlIHdpdGhcbiAgICAvLyBvbmx5IDMgKHZlcnkgbGFyZ2UpIGRpZ2l0cy4gVGhvc2UgZGlnaXRzIGFyZSB0aGVuIHRyaXZpYWwgdG8gY29udmVydCB0b1xuICAgIC8vIGEgYmFzZS0xMCBzdHJpbmcuXG4gICAgLy8gVGhlIG1hZ2ljIG51bWJlcnMgdXNlZCBoZXJlIGFyZSAtXG4gICAgLy8gMl4yNCA9IDE2Nzc3MjE2ID0gKDEsNjc3NzIxNikgaW4gYmFzZS0xZTcuXG4gICAgLy8gMl40OCA9IDI4MTQ3NDk3NjcxMDY1NiA9ICgyLDgxNDc0OTcsNjcxMDY1NikgaW4gYmFzZS0xZTcuXG4gICAgLy8gU3BsaXQgMzI6MzIgcmVwcmVzZW50YXRpb24gaW50byAxNjoyNDoyNCByZXByZXNlbnRhdGlvbiBzbyBvdXJcbiAgICAvLyBpbnRlcm1lZGlhdGUgZGlnaXRzIGRvbid0IG92ZXJmbG93LlxuICAgIGNvbnN0IGxvdyA9IGxvICYgMHhGRkZGRkY7XG4gICAgY29uc3QgbWlkID0gKChsbyA+Pj4gMjQpIHwgKGhpIDw8IDgpKSAmIDB4RkZGRkZGO1xuICAgIGNvbnN0IGhpZ2ggPSAoaGkgPj4gMTYpICYgMHhGRkZGO1xuICAgIC8vIEFzc2VtYmxlIG91ciB0aHJlZSBiYXNlLTFlNyBkaWdpdHMsIGlnbm9yaW5nIGNhcnJpZXMuIFRoZSBtYXhpbXVtXG4gICAgLy8gdmFsdWUgaW4gYSBkaWdpdCBhdCB0aGlzIHN0ZXAgaXMgcmVwcmVzZW50YWJsZSBhcyBhIDQ4LWJpdCBpbnRlZ2VyLCB3aGljaFxuICAgIC8vIGNhbiBiZSBzdG9yZWQgaW4gYSA2NC1iaXQgZmxvYXRpbmcgcG9pbnQgbnVtYmVyLlxuICAgIGxldCBkaWdpdEEgPSBsb3cgKyAobWlkICogNjc3NzIxNikgKyAoaGlnaCAqIDY3MTA2NTYpO1xuICAgIGxldCBkaWdpdEIgPSBtaWQgKyAoaGlnaCAqIDgxNDc0OTcpO1xuICAgIGxldCBkaWdpdEMgPSAoaGlnaCAqIDIpO1xuICAgIC8vIEFwcGx5IGNhcnJpZXMgZnJvbSBBIHRvIEIgYW5kIGZyb20gQiB0byBDLlxuICAgIGNvbnN0IGJhc2UgPSAxMDAwMDAwMDtcbiAgICBpZiAoZGlnaXRBID49IGJhc2UpIHtcbiAgICAgICAgZGlnaXRCICs9IE1hdGguZmxvb3IoZGlnaXRBIC8gYmFzZSk7XG4gICAgICAgIGRpZ2l0QSAlPSBiYXNlO1xuICAgIH1cbiAgICBpZiAoZGlnaXRCID49IGJhc2UpIHtcbiAgICAgICAgZGlnaXRDICs9IE1hdGguZmxvb3IoZGlnaXRCIC8gYmFzZSk7XG4gICAgICAgIGRpZ2l0QiAlPSBiYXNlO1xuICAgIH1cbiAgICAvLyBJZiBkaWdpdEMgaXMgMCwgdGhlbiB3ZSBzaG91bGQgaGF2ZSByZXR1cm5lZCBpbiB0aGUgdHJpdmlhbCBjb2RlIHBhdGhcbiAgICAvLyBhdCB0aGUgdG9wIGZvciBub24tc2FmZSBpbnRlZ2Vycy4gR2l2ZW4gdGhpcywgd2UgY2FuIGFzc3VtZSBib3RoIGRpZ2l0QlxuICAgIC8vIGFuZCBkaWdpdEEgbmVlZCBsZWFkaW5nIHplcm9zLlxuICAgIHJldHVybiBkaWdpdEMudG9TdHJpbmcoKSArIGRlY2ltYWxGcm9tMWU3V2l0aExlYWRpbmdaZXJvcyhkaWdpdEIpICtcbiAgICAgICAgZGVjaW1hbEZyb20xZTdXaXRoTGVhZGluZ1plcm9zKGRpZ2l0QSk7XG59XG5mdW5jdGlvbiB0b1Vuc2lnbmVkKGxvLCBoaSkge1xuICAgIHJldHVybiB7IGxvOiBsbyA+Pj4gMCwgaGk6IGhpID4+PiAwIH07XG59XG5mdW5jdGlvbiBuZXdCaXRzKGxvLCBoaSkge1xuICAgIHJldHVybiB7IGxvOiBsbyB8IDAsIGhpOiBoaSB8IDAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB0d28ncyBjb21wbGltZW50IG5lZ2F0aW9uIG9mIGlucHV0LlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9PcGVyYXRvcnMvQml0d2lzZV9PcGVyYXRvcnMjU2lnbmVkXzMyLWJpdF9pbnRlZ2Vyc1xuICovXG5mdW5jdGlvbiBuZWdhdGUobG93Qml0cywgaGlnaEJpdHMpIHtcbiAgICBoaWdoQml0cyA9IH5oaWdoQml0cztcbiAgICBpZiAobG93Qml0cykge1xuICAgICAgICBsb3dCaXRzID0gfmxvd0JpdHMgKyAxO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gSWYgbG93Qml0cyBpcyAwLCB0aGVuIGJpdHdpc2Utbm90IGlzIDB4RkZGRkZGRkYsXG4gICAgICAgIC8vIGFkZGluZyAxIHRvIHRoYXQsIHJlc3VsdHMgaW4gMHgxMDAwMDAwMDAsIHdoaWNoIGxlYXZlc1xuICAgICAgICAvLyB0aGUgbG93IGJpdHMgMHgwIGFuZCBzaW1wbHkgYWRkcyBvbmUgdG8gdGhlIGhpZ2ggYml0cy5cbiAgICAgICAgaGlnaEJpdHMgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld0JpdHMobG93Qml0cywgaGlnaEJpdHMpO1xufVxuLyoqXG4gKiBSZXR1cm5zIGRlY2ltYWwgcmVwcmVzZW50YXRpb24gb2YgZGlnaXQxZTcgd2l0aCBsZWFkaW5nIHplcm9zLlxuICovXG5jb25zdCBkZWNpbWFsRnJvbTFlN1dpdGhMZWFkaW5nWmVyb3MgPSAoZGlnaXQxZTcpID0+IHtcbiAgICBjb25zdCBwYXJ0aWFsID0gU3RyaW5nKGRpZ2l0MWU3KTtcbiAgICByZXR1cm4gXCIwMDAwMDAwXCIuc2xpY2UocGFydGlhbC5sZW5ndGgpICsgcGFydGlhbDtcbn07XG4vKipcbiAqIFdyaXRlIGEgMzIgYml0IHZhcmludCwgc2lnbmVkIG9yIHVuc2lnbmVkLiBTYW1lIGFzIGB2YXJpbnQ2NHdyaXRlKDAsIHZhbHVlLCBieXRlcylgXG4gKlxuICogQ29weXJpZ2h0IDIwMDggR29vZ2xlIEluYy4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9wcm90b2NvbGJ1ZmZlcnMvcHJvdG9idWYvYmxvYi8xYjE4ODMzZjRmMmEyZjY4MWY0ZTRhMjVjZGYzYjBhNDMxMTVlYzI2L2pzL2JpbmFyeS9lbmNvZGVyLmpzI0wxNDRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhcmludDMyd3JpdGUodmFsdWUsIGJ5dGVzKSB7XG4gICAgaWYgKHZhbHVlID49IDApIHtcbiAgICAgICAgLy8gd3JpdGUgdmFsdWUgYXMgdmFyaW50IDMyXG4gICAgICAgIHdoaWxlICh2YWx1ZSA+IDB4N2YpIHtcbiAgICAgICAgICAgIGJ5dGVzLnB1c2goKHZhbHVlICYgMHg3ZikgfCAweDgwKTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPj4+IDc7XG4gICAgICAgIH1cbiAgICAgICAgYnl0ZXMucHVzaCh2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDk7IGkrKykge1xuICAgICAgICAgICAgYnl0ZXMucHVzaCgodmFsdWUgJiAxMjcpIHwgMTI4KTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPj4gNztcbiAgICAgICAgfVxuICAgICAgICBieXRlcy5wdXNoKDEpO1xuICAgIH1cbn1cbi8qKlxuICogUmVhZCBhbiB1bnNpZ25lZCAzMiBiaXQgdmFyaW50LlxuICpcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcHJvdG9jb2xidWZmZXJzL3Byb3RvYnVmL2Jsb2IvOGE3MTkyN2Q3NGE0Y2UzNGVmZTJkODc2OWZkYTE5OGY1MmQyMGQxMi9qcy9leHBlcmltZW50YWwvcnVudGltZS9rZXJuZWwvYnVmZmVyX2RlY29kZXIuanMjTDIyMFxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFyaW50MzJyZWFkKCkge1xuICAgIGxldCBiID0gdGhpcy5idWZbdGhpcy5wb3MrK107XG4gICAgbGV0IHJlc3VsdCA9IGIgJiAweDdmO1xuICAgIGlmICgoYiAmIDB4ODApID09IDApIHtcbiAgICAgICAgdGhpcy5hc3NlcnRCb3VuZHMoKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYiA9IHRoaXMuYnVmW3RoaXMucG9zKytdO1xuICAgIHJlc3VsdCB8PSAoYiAmIDB4N2YpIDw8IDc7XG4gICAgaWYgKChiICYgMHg4MCkgPT0gMCkge1xuICAgICAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBiID0gdGhpcy5idWZbdGhpcy5wb3MrK107XG4gICAgcmVzdWx0IHw9IChiICYgMHg3ZikgPDwgMTQ7XG4gICAgaWYgKChiICYgMHg4MCkgPT0gMCkge1xuICAgICAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBiID0gdGhpcy5idWZbdGhpcy5wb3MrK107XG4gICAgcmVzdWx0IHw9IChiICYgMHg3ZikgPDwgMjE7XG4gICAgaWYgKChiICYgMHg4MCkgPT0gMCkge1xuICAgICAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICAvLyBFeHRyYWN0IG9ubHkgbGFzdCA0IGJpdHNcbiAgICBiID0gdGhpcy5idWZbdGhpcy5wb3MrK107XG4gICAgcmVzdWx0IHw9IChiICYgMHgwZikgPDwgMjg7XG4gICAgZm9yIChsZXQgcmVhZEJ5dGVzID0gNTsgKGIgJiAweDgwKSAhPT0gMCAmJiByZWFkQnl0ZXMgPCAxMDsgcmVhZEJ5dGVzKyspXG4gICAgICAgIGIgPSB0aGlzLmJ1Zlt0aGlzLnBvcysrXTtcbiAgICBpZiAoKGIgJiAweDgwKSAhPSAwKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHZhcmludFwiKTtcbiAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgIC8vIFJlc3VsdCBjYW4gaGF2ZSAzMiBiaXRzLCBjb252ZXJ0IGl0IHRvIHVuc2lnbmVkXG4gICAgcmV0dXJuIHJlc3VsdCA+Pj4gMDtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzIEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSBcIi4vcHJpdmF0ZS9hc3NlcnQuanNcIjtcbmltcG9ydCB7IGludDY0RnJvbVN0cmluZywgaW50NjRUb1N0cmluZywgdUludDY0VG9TdHJpbmcsIH0gZnJvbSBcIi4vZ29vZ2xlL3ZhcmludC5qc1wiO1xuZnVuY3Rpb24gbWFrZUludDY0U3VwcG9ydCgpIHtcbiAgICBjb25zdCBkdiA9IG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoOCkpO1xuICAgIC8vIG5vdGUgdGhhdCBTYWZhcmkgMTQgaW1wbGVtZW50cyBCaWdJbnQsIGJ1dCBub3QgdGhlIERhdGFWaWV3IG1ldGhvZHNcbiAgICBjb25zdCBvayA9IHR5cGVvZiBCaWdJbnQgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICB0eXBlb2YgZHYuZ2V0QmlnSW50NjQgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICB0eXBlb2YgZHYuZ2V0QmlnVWludDY0ID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgdHlwZW9mIGR2LnNldEJpZ0ludDY0ID09PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgdHlwZW9mIGR2LnNldEJpZ1VpbnQ2NCA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICh0eXBlb2YgcHJvY2VzcyAhPSBcIm9iamVjdFwiIHx8XG4gICAgICAgICAgICB0eXBlb2YgcHJvY2Vzcy5lbnYgIT0gXCJvYmplY3RcIiB8fFxuICAgICAgICAgICAgcHJvY2Vzcy5lbnYuQlVGX0JJR0lOVF9ESVNBQkxFICE9PSBcIjFcIik7XG4gICAgaWYgKG9rKSB7XG4gICAgICAgIGNvbnN0IE1JTiA9IEJpZ0ludChcIi05MjIzMzcyMDM2ODU0Nzc1ODA4XCIpLCBNQVggPSBCaWdJbnQoXCI5MjIzMzcyMDM2ODU0Nzc1ODA3XCIpLCBVTUlOID0gQmlnSW50KFwiMFwiKSwgVU1BWCA9IEJpZ0ludChcIjE4NDQ2NzQ0MDczNzA5NTUxNjE1XCIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgemVybzogQmlnSW50KDApLFxuICAgICAgICAgICAgc3VwcG9ydGVkOiB0cnVlLFxuICAgICAgICAgICAgcGFyc2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiaSA9IHR5cGVvZiB2YWx1ZSA9PSBcImJpZ2ludFwiID8gdmFsdWUgOiBCaWdJbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChiaSA+IE1BWCB8fCBiaSA8IE1JTikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludDY0IGludmFsaWQ6ICR7dmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBiaTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1UGFyc2UodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiaSA9IHR5cGVvZiB2YWx1ZSA9PSBcImJpZ2ludFwiID8gdmFsdWUgOiBCaWdJbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChiaSA+IFVNQVggfHwgYmkgPCBVTUlOKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgdWludDY0IGludmFsaWQ6ICR7dmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBiaTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbmModmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkdi5zZXRCaWdJbnQ2NCgwLCB0aGlzLnBhcnNlKHZhbHVlKSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbG86IGR2LmdldEludDMyKDAsIHRydWUpLFxuICAgICAgICAgICAgICAgICAgICBoaTogZHYuZ2V0SW50MzIoNCwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1RW5jKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgZHYuc2V0QmlnSW50NjQoMCwgdGhpcy51UGFyc2UodmFsdWUpLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBsbzogZHYuZ2V0SW50MzIoMCwgdHJ1ZSksXG4gICAgICAgICAgICAgICAgICAgIGhpOiBkdi5nZXRJbnQzMig0LCB0cnVlKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlYyhsbywgaGkpIHtcbiAgICAgICAgICAgICAgICBkdi5zZXRJbnQzMigwLCBsbywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgZHYuc2V0SW50MzIoNCwgaGksIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBkdi5nZXRCaWdJbnQ2NCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB1RGVjKGxvLCBoaSkge1xuICAgICAgICAgICAgICAgIGR2LnNldEludDMyKDAsIGxvLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBkdi5zZXRJbnQzMig0LCBoaSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGR2LmdldEJpZ1VpbnQ2NCgwLCB0cnVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IGFzc2VydEludDY0U3RyaW5nID0gKHZhbHVlKSA9PiBhc3NlcnQoL14tP1swLTldKyQvLnRlc3QodmFsdWUpLCBgaW50NjQgaW52YWxpZDogJHt2YWx1ZX1gKTtcbiAgICBjb25zdCBhc3NlcnRVSW50NjRTdHJpbmcgPSAodmFsdWUpID0+IGFzc2VydCgvXlswLTldKyQvLnRlc3QodmFsdWUpLCBgdWludDY0IGludmFsaWQ6ICR7dmFsdWV9YCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgemVybzogXCIwXCIsXG4gICAgICAgIHN1cHBvcnRlZDogZmFsc2UsXG4gICAgICAgIHBhcnNlKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NlcnRJbnQ2NFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHVQYXJzZSh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzZXJ0VUludDY0U3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5jKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3NlcnRJbnQ2NFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gaW50NjRGcm9tU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgfSxcbiAgICAgICAgdUVuYyh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXNzZXJ0VUludDY0U3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBpbnQ2NEZyb21TdHJpbmcodmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBkZWMobG8sIGhpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50NjRUb1N0cmluZyhsbywgaGkpO1xuICAgICAgICB9LFxuICAgICAgICB1RGVjKGxvLCBoaSkge1xuICAgICAgICAgICAgcmV0dXJuIHVJbnQ2NFRvU3RyaW5nKGxvLCBoaSk7XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydCBjb25zdCBwcm90b0ludDY0ID0gbWFrZUludDY0U3VwcG9ydCgpO1xuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjMgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyB2YXJpbnQzMnJlYWQsIHZhcmludDMyd3JpdGUsIHZhcmludDY0cmVhZCwgdmFyaW50NjR3cml0ZSwgfSBmcm9tIFwiLi9nb29nbGUvdmFyaW50LmpzXCI7XG5pbXBvcnQgeyBhc3NlcnRGbG9hdDMyLCBhc3NlcnRJbnQzMiwgYXNzZXJ0VUludDMyIH0gZnJvbSBcIi4vcHJpdmF0ZS9hc3NlcnQuanNcIjtcbmltcG9ydCB7IHByb3RvSW50NjQgfSBmcm9tIFwiLi9wcm90by1pbnQ2NC5qc1wiO1xuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLWNvbnN0LG5vLWNhc2UtZGVjbGFyYXRpb25zLEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC1wbHVzLW9wZXJhbmRzICovXG4vKipcbiAqIFByb3RvYnVmIGJpbmFyeSBmb3JtYXQgd2lyZSB0eXBlcy5cbiAqXG4gKiBBIHdpcmUgdHlwZSBwcm92aWRlcyBqdXN0IGVub3VnaCBpbmZvcm1hdGlvbiB0byBmaW5kIHRoZSBsZW5ndGggb2YgdGhlXG4gKiBmb2xsb3dpbmcgdmFsdWUuXG4gKlxuICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL3Byb3RvY29sLWJ1ZmZlcnMvZG9jcy9lbmNvZGluZyNzdHJ1Y3R1cmVcbiAqL1xuZXhwb3J0IHZhciBXaXJlVHlwZTtcbihmdW5jdGlvbiAoV2lyZVR5cGUpIHtcbiAgICAvKipcbiAgICAgKiBVc2VkIGZvciBpbnQzMiwgaW50NjQsIHVpbnQzMiwgdWludDY0LCBzaW50MzIsIHNpbnQ2NCwgYm9vbCwgZW51bVxuICAgICAqL1xuICAgIFdpcmVUeXBlW1dpcmVUeXBlW1wiVmFyaW50XCJdID0gMF0gPSBcIlZhcmludFwiO1xuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIGZpeGVkNjQsIHNmaXhlZDY0LCBkb3VibGUuXG4gICAgICogQWx3YXlzIDggYnl0ZXMgd2l0aCBsaXR0bGUtZW5kaWFuIGJ5dGUgb3JkZXIuXG4gICAgICovXG4gICAgV2lyZVR5cGVbV2lyZVR5cGVbXCJCaXQ2NFwiXSA9IDFdID0gXCJCaXQ2NFwiO1xuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIHN0cmluZywgYnl0ZXMsIGVtYmVkZGVkIG1lc3NhZ2VzLCBwYWNrZWQgcmVwZWF0ZWQgZmllbGRzXG4gICAgICpcbiAgICAgKiBPbmx5IHJlcGVhdGVkIG51bWVyaWMgdHlwZXMgKHR5cGVzIHdoaWNoIHVzZSB0aGUgdmFyaW50LCAzMi1iaXQsXG4gICAgICogb3IgNjQtYml0IHdpcmUgdHlwZXMpIGNhbiBiZSBwYWNrZWQuIEluIHByb3RvMywgc3VjaCBmaWVsZHMgYXJlXG4gICAgICogcGFja2VkIGJ5IGRlZmF1bHQuXG4gICAgICovXG4gICAgV2lyZVR5cGVbV2lyZVR5cGVbXCJMZW5ndGhEZWxpbWl0ZWRcIl0gPSAyXSA9IFwiTGVuZ3RoRGVsaW1pdGVkXCI7XG4gICAgLyoqXG4gICAgICogU3RhcnQgb2YgYSB0YWctZGVsaW1pdGVkIGFnZ3JlZ2F0ZSwgc3VjaCBhcyBhIHByb3RvMiBncm91cCwgb3IgYSBtZXNzYWdlXG4gICAgICogaW4gZWRpdGlvbnMgd2l0aCBtZXNzYWdlX2VuY29kaW5nID0gREVMSU1JVEVELlxuICAgICAqL1xuICAgIFdpcmVUeXBlW1dpcmVUeXBlW1wiU3RhcnRHcm91cFwiXSA9IDNdID0gXCJTdGFydEdyb3VwXCI7XG4gICAgLyoqXG4gICAgICogRW5kIG9mIGEgdGFnLWRlbGltaXRlZCBhZ2dyZWdhdGUuXG4gICAgICovXG4gICAgV2lyZVR5cGVbV2lyZVR5cGVbXCJFbmRHcm91cFwiXSA9IDRdID0gXCJFbmRHcm91cFwiO1xuICAgIC8qKlxuICAgICAqIFVzZWQgZm9yIGZpeGVkMzIsIHNmaXhlZDMyLCBmbG9hdC5cbiAgICAgKiBBbHdheXMgNCBieXRlcyB3aXRoIGxpdHRsZS1lbmRpYW4gYnl0ZSBvcmRlci5cbiAgICAgKi9cbiAgICBXaXJlVHlwZVtXaXJlVHlwZVtcIkJpdDMyXCJdID0gNV0gPSBcIkJpdDMyXCI7XG59KShXaXJlVHlwZSB8fCAoV2lyZVR5cGUgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIEJpbmFyeVdyaXRlciB7XG4gICAgY29uc3RydWN0b3IodGV4dEVuY29kZXIpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByZXZpb3VzIGZvcmsgc3RhdGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuICAgICAgICB0aGlzLnRleHRFbmNvZGVyID0gdGV4dEVuY29kZXIgIT09IG51bGwgJiYgdGV4dEVuY29kZXIgIT09IHZvaWQgMCA/IHRleHRFbmNvZGVyIDogbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgICAgIHRoaXMuY2h1bmtzID0gW107XG4gICAgICAgIHRoaXMuYnVmID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybiBhbGwgYnl0ZXMgd3JpdHRlbiBhbmQgcmVzZXQgdGhpcyB3cml0ZXIuXG4gICAgICovXG4gICAgZmluaXNoKCkge1xuICAgICAgICB0aGlzLmNodW5rcy5wdXNoKG5ldyBVaW50OEFycmF5KHRoaXMuYnVmKSk7IC8vIGZsdXNoIHRoZSBidWZmZXJcbiAgICAgICAgbGV0IGxlbiA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaHVua3MubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICBsZW4gKz0gdGhpcy5jaHVua3NbaV0ubGVuZ3RoO1xuICAgICAgICBsZXQgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNodW5rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYnl0ZXMuc2V0KHRoaXMuY2h1bmtzW2ldLCBvZmZzZXQpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHRoaXMuY2h1bmtzW2ldLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNodW5rcyA9IFtdO1xuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0IGEgbmV3IGZvcmsgZm9yIGxlbmd0aC1kZWxpbWl0ZWQgZGF0YSBsaWtlIGEgbWVzc2FnZVxuICAgICAqIG9yIGEgcGFja2VkIHJlcGVhdGVkIGZpZWxkLlxuICAgICAqXG4gICAgICogTXVzdCBiZSBqb2luZWQgbGF0ZXIgd2l0aCBgam9pbigpYC5cbiAgICAgKi9cbiAgICBmb3JrKCkge1xuICAgICAgICB0aGlzLnN0YWNrLnB1c2goeyBjaHVua3M6IHRoaXMuY2h1bmtzLCBidWY6IHRoaXMuYnVmIH0pO1xuICAgICAgICB0aGlzLmNodW5rcyA9IFtdO1xuICAgICAgICB0aGlzLmJ1ZiA9IFtdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSm9pbiB0aGUgbGFzdCBmb3JrLiBXcml0ZSBpdHMgbGVuZ3RoIGFuZCBieXRlcywgdGhlblxuICAgICAqIHJldHVybiB0byB0aGUgcHJldmlvdXMgc3RhdGUuXG4gICAgICovXG4gICAgam9pbigpIHtcbiAgICAgICAgLy8gZ2V0IGNodW5rIG9mIGZvcmtcbiAgICAgICAgbGV0IGNodW5rID0gdGhpcy5maW5pc2goKTtcbiAgICAgICAgLy8gcmVzdG9yZSBwcmV2aW91cyBzdGF0ZVxuICAgICAgICBsZXQgcHJldiA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgICAgIGlmICghcHJldilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgc3RhdGUsIGZvcmsgc3RhY2sgZW1wdHlcIik7XG4gICAgICAgIHRoaXMuY2h1bmtzID0gcHJldi5jaHVua3M7XG4gICAgICAgIHRoaXMuYnVmID0gcHJldi5idWY7XG4gICAgICAgIC8vIHdyaXRlIGxlbmd0aCBvZiBjaHVuayBhcyB2YXJpbnRcbiAgICAgICAgdGhpcy51aW50MzIoY2h1bmsuYnl0ZUxlbmd0aCk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlcyBhIHRhZyAoZmllbGQgbnVtYmVyIGFuZCB3aXJlIHR5cGUpLlxuICAgICAqXG4gICAgICogRXF1aXZhbGVudCB0byBgdWludDMyKCAoZmllbGRObyA8PCAzIHwgdHlwZSkgPj4+IDAgKWAuXG4gICAgICpcbiAgICAgKiBHZW5lcmF0ZWQgY29kZSBzaG91bGQgY29tcHV0ZSB0aGUgdGFnIGFoZWFkIG9mIHRpbWUgYW5kIGNhbGwgYHVpbnQzMigpYC5cbiAgICAgKi9cbiAgICB0YWcoZmllbGRObywgdHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy51aW50MzIoKChmaWVsZE5vIDw8IDMpIHwgdHlwZSkgPj4+IDApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZSBhIGNodW5rIG9mIHJhdyBieXRlcy5cbiAgICAgKi9cbiAgICByYXcoY2h1bmspIHtcbiAgICAgICAgaWYgKHRoaXMuYnVmLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5jaHVua3MucHVzaChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZikpO1xuICAgICAgICAgICAgdGhpcy5idWYgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYHVpbnQzMmAgdmFsdWUsIGFuIHVuc2lnbmVkIDMyIGJpdCB2YXJpbnQuXG4gICAgICovXG4gICAgdWludDMyKHZhbHVlKSB7XG4gICAgICAgIGFzc2VydFVJbnQzMih2YWx1ZSk7XG4gICAgICAgIC8vIHdyaXRlIHZhbHVlIGFzIHZhcmludCAzMiwgaW5saW5lZCBmb3Igc3BlZWRcbiAgICAgICAgd2hpbGUgKHZhbHVlID4gMHg3Zikge1xuICAgICAgICAgICAgdGhpcy5idWYucHVzaCgodmFsdWUgJiAweDdmKSB8IDB4ODApO1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA+Pj4gNztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1Zi5wdXNoKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYGludDMyYCB2YWx1ZSwgYSBzaWduZWQgMzIgYml0IHZhcmludC5cbiAgICAgKi9cbiAgICBpbnQzMih2YWx1ZSkge1xuICAgICAgICBhc3NlcnRJbnQzMih2YWx1ZSk7XG4gICAgICAgIHZhcmludDMyd3JpdGUodmFsdWUsIHRoaXMuYnVmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYGJvb2xgIHZhbHVlLCBhIHZhcmlhbnQuXG4gICAgICovXG4gICAgYm9vbCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmJ1Zi5wdXNoKHZhbHVlID8gMSA6IDApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBgYnl0ZXNgIHZhbHVlLCBsZW5ndGgtZGVsaW1pdGVkIGFyYml0cmFyeSBkYXRhLlxuICAgICAqL1xuICAgIGJ5dGVzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudWludDMyKHZhbHVlLmJ5dGVMZW5ndGgpOyAvLyB3cml0ZSBsZW5ndGggb2YgY2h1bmsgYXMgdmFyaW50XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyh2YWx1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYHN0cmluZ2AgdmFsdWUsIGxlbmd0aC1kZWxpbWl0ZWQgZGF0YSBjb252ZXJ0ZWQgdG8gVVRGLTggdGV4dC5cbiAgICAgKi9cbiAgICBzdHJpbmcodmFsdWUpIHtcbiAgICAgICAgbGV0IGNodW5rID0gdGhpcy50ZXh0RW5jb2Rlci5lbmNvZGUodmFsdWUpO1xuICAgICAgICB0aGlzLnVpbnQzMihjaHVuay5ieXRlTGVuZ3RoKTsgLy8gd3JpdGUgbGVuZ3RoIG9mIGNodW5rIGFzIHZhcmludFxuICAgICAgICByZXR1cm4gdGhpcy5yYXcoY2h1bmspO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZSBhIGBmbG9hdGAgdmFsdWUsIDMyLWJpdCBmbG9hdGluZyBwb2ludCBudW1iZXIuXG4gICAgICovXG4gICAgZmxvYXQodmFsdWUpIHtcbiAgICAgICAgYXNzZXJ0RmxvYXQzMih2YWx1ZSk7XG4gICAgICAgIGxldCBjaHVuayA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgICBuZXcgRGF0YVZpZXcoY2h1bmsuYnVmZmVyKS5zZXRGbG9hdDMyKDAsIHZhbHVlLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmF3KGNodW5rKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV3JpdGUgYSBgZG91YmxlYCB2YWx1ZSwgYSA2NC1iaXQgZmxvYXRpbmcgcG9pbnQgbnVtYmVyLlxuICAgICAqL1xuICAgIGRvdWJsZSh2YWx1ZSkge1xuICAgICAgICBsZXQgY2h1bmsgPSBuZXcgVWludDhBcnJheSg4KTtcbiAgICAgICAgbmV3IERhdGFWaWV3KGNodW5rLmJ1ZmZlcikuc2V0RmxvYXQ2NCgwLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYGZpeGVkMzJgIHZhbHVlLCBhbiB1bnNpZ25lZCwgZml4ZWQtbGVuZ3RoIDMyLWJpdCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIGZpeGVkMzIodmFsdWUpIHtcbiAgICAgICAgYXNzZXJ0VUludDMyKHZhbHVlKTtcbiAgICAgICAgbGV0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoNCk7XG4gICAgICAgIG5ldyBEYXRhVmlldyhjaHVuay5idWZmZXIpLnNldFVpbnQzMigwLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYHNmaXhlZDMyYCB2YWx1ZSwgYSBzaWduZWQsIGZpeGVkLWxlbmd0aCAzMi1iaXQgaW50ZWdlci5cbiAgICAgKi9cbiAgICBzZml4ZWQzMih2YWx1ZSkge1xuICAgICAgICBhc3NlcnRJbnQzMih2YWx1ZSk7XG4gICAgICAgIGxldCBjaHVuayA9IG5ldyBVaW50OEFycmF5KDQpO1xuICAgICAgICBuZXcgRGF0YVZpZXcoY2h1bmsuYnVmZmVyKS5zZXRJbnQzMigwLCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYHNpbnQzMmAgdmFsdWUsIGEgc2lnbmVkLCB6aWd6YWctZW5jb2RlZCAzMi1iaXQgdmFyaW50LlxuICAgICAqL1xuICAgIHNpbnQzMih2YWx1ZSkge1xuICAgICAgICBhc3NlcnRJbnQzMih2YWx1ZSk7XG4gICAgICAgIC8vIHppZ3phZyBlbmNvZGVcbiAgICAgICAgdmFsdWUgPSAoKHZhbHVlIDw8IDEpIF4gKHZhbHVlID4+IDMxKSkgPj4+IDA7XG4gICAgICAgIHZhcmludDMyd3JpdGUodmFsdWUsIHRoaXMuYnVmKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYGZpeGVkNjRgIHZhbHVlLCBhIHNpZ25lZCwgZml4ZWQtbGVuZ3RoIDY0LWJpdCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIHNmaXhlZDY0KHZhbHVlKSB7XG4gICAgICAgIGxldCBjaHVuayA9IG5ldyBVaW50OEFycmF5KDgpLCB2aWV3ID0gbmV3IERhdGFWaWV3KGNodW5rLmJ1ZmZlciksIHRjID0gcHJvdG9JbnQ2NC5lbmModmFsdWUpO1xuICAgICAgICB2aWV3LnNldEludDMyKDAsIHRjLmxvLCB0cnVlKTtcbiAgICAgICAgdmlldy5zZXRJbnQzMig0LCB0Yy5oaSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYGZpeGVkNjRgIHZhbHVlLCBhbiB1bnNpZ25lZCwgZml4ZWQtbGVuZ3RoIDY0IGJpdCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIGZpeGVkNjQodmFsdWUpIHtcbiAgICAgICAgbGV0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoOCksIHZpZXcgPSBuZXcgRGF0YVZpZXcoY2h1bmsuYnVmZmVyKSwgdGMgPSBwcm90b0ludDY0LnVFbmModmFsdWUpO1xuICAgICAgICB2aWV3LnNldEludDMyKDAsIHRjLmxvLCB0cnVlKTtcbiAgICAgICAgdmlldy5zZXRJbnQzMig0LCB0Yy5oaSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzLnJhdyhjaHVuayk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgYGludDY0YCB2YWx1ZSwgYSBzaWduZWQgNjQtYml0IHZhcmludC5cbiAgICAgKi9cbiAgICBpbnQ2NCh2YWx1ZSkge1xuICAgICAgICBsZXQgdGMgPSBwcm90b0ludDY0LmVuYyh2YWx1ZSk7XG4gICAgICAgIHZhcmludDY0d3JpdGUodGMubG8sIHRjLmhpLCB0aGlzLmJ1Zik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZSBhIGBzaW50NjRgIHZhbHVlLCBhIHNpZ25lZCwgemlnLXphZy1lbmNvZGVkIDY0LWJpdCB2YXJpbnQuXG4gICAgICovXG4gICAgc2ludDY0KHZhbHVlKSB7XG4gICAgICAgIGxldCB0YyA9IHByb3RvSW50NjQuZW5jKHZhbHVlKSwgXG4gICAgICAgIC8vIHppZ3phZyBlbmNvZGVcbiAgICAgICAgc2lnbiA9IHRjLmhpID4+IDMxLCBsbyA9ICh0Yy5sbyA8PCAxKSBeIHNpZ24sIGhpID0gKCh0Yy5oaSA8PCAxKSB8ICh0Yy5sbyA+Pj4gMzEpKSBeIHNpZ247XG4gICAgICAgIHZhcmludDY0d3JpdGUobG8sIGhpLCB0aGlzLmJ1Zik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZSBhIGB1aW50NjRgIHZhbHVlLCBhbiB1bnNpZ25lZCA2NC1iaXQgdmFyaW50LlxuICAgICAqL1xuICAgIHVpbnQ2NCh2YWx1ZSkge1xuICAgICAgICBsZXQgdGMgPSBwcm90b0ludDY0LnVFbmModmFsdWUpO1xuICAgICAgICB2YXJpbnQ2NHdyaXRlKHRjLmxvLCB0Yy5oaSwgdGhpcy5idWYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQmluYXJ5UmVhZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihidWYsIHRleHREZWNvZGVyKSB7XG4gICAgICAgIHRoaXMudmFyaW50NjQgPSB2YXJpbnQ2NHJlYWQ7IC8vIGRpcnR5IGNhc3QgZm9yIGB0aGlzYFxuICAgICAgICAvKipcbiAgICAgICAgICogUmVhZCBhIGB1aW50MzJgIGZpZWxkLCBhbiB1bnNpZ25lZCAzMiBiaXQgdmFyaW50LlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51aW50MzIgPSB2YXJpbnQzMnJlYWQ7IC8vIGRpcnR5IGNhc3QgZm9yIGB0aGlzYCBhbmQgYWNjZXNzIHRvIHByb3RlY3RlZCBgYnVmYFxuICAgICAgICB0aGlzLmJ1ZiA9IGJ1ZjtcbiAgICAgICAgdGhpcy5sZW4gPSBidWYubGVuZ3RoO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMudmlldyA9IG5ldyBEYXRhVmlldyhidWYuYnVmZmVyLCBidWYuYnl0ZU9mZnNldCwgYnVmLmJ5dGVMZW5ndGgpO1xuICAgICAgICB0aGlzLnRleHREZWNvZGVyID0gdGV4dERlY29kZXIgIT09IG51bGwgJiYgdGV4dERlY29kZXIgIT09IHZvaWQgMCA/IHRleHREZWNvZGVyIDogbmV3IFRleHREZWNvZGVyKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWRzIGEgdGFnIC0gZmllbGQgbnVtYmVyIGFuZCB3aXJlIHR5cGUuXG4gICAgICovXG4gICAgdGFnKCkge1xuICAgICAgICBsZXQgdGFnID0gdGhpcy51aW50MzIoKSwgZmllbGRObyA9IHRhZyA+Pj4gMywgd2lyZVR5cGUgPSB0YWcgJiA3O1xuICAgICAgICBpZiAoZmllbGRObyA8PSAwIHx8IHdpcmVUeXBlIDwgMCB8fCB3aXJlVHlwZSA+IDUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHRhZzogZmllbGQgbm8gXCIgKyBmaWVsZE5vICsgXCIgd2lyZSB0eXBlIFwiICsgd2lyZVR5cGUpO1xuICAgICAgICByZXR1cm4gW2ZpZWxkTm8sIHdpcmVUeXBlXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2tpcCBvbmUgZWxlbWVudCBvbiB0aGUgd2lyZSBhbmQgcmV0dXJuIHRoZSBza2lwcGVkIGRhdGEuXG4gICAgICogU3VwcG9ydHMgV2lyZVR5cGUuU3RhcnRHcm91cCBzaW5jZSB2Mi4wLjAtYWxwaGEuMjMuXG4gICAgICovXG4gICAgc2tpcCh3aXJlVHlwZSkge1xuICAgICAgICBsZXQgc3RhcnQgPSB0aGlzLnBvcztcbiAgICAgICAgc3dpdGNoICh3aXJlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBXaXJlVHlwZS5WYXJpbnQ6XG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuYnVmW3RoaXMucG9zKytdICYgMHg4MCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgVFM3MDI5OiBGYWxsdGhyb3VnaCBjYXNlIGluIHN3aXRjaFxuICAgICAgICAgICAgY2FzZSBXaXJlVHlwZS5CaXQ2NDpcbiAgICAgICAgICAgICAgICB0aGlzLnBvcyArPSA0O1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIFRTNzAyOTogRmFsbHRocm91Z2ggY2FzZSBpbiBzd2l0Y2hcbiAgICAgICAgICAgIGNhc2UgV2lyZVR5cGUuQml0MzI6XG4gICAgICAgICAgICAgICAgdGhpcy5wb3MgKz0gNDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkOlxuICAgICAgICAgICAgICAgIGxldCBsZW4gPSB0aGlzLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHRoaXMucG9zICs9IGxlbjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgV2lyZVR5cGUuU3RhcnRHcm91cDpcbiAgICAgICAgICAgICAgICAvLyBGcm9tIGRlc2NyaXB0b3IucHJvdG86IEdyb3VwIHR5cGUgaXMgZGVwcmVjYXRlZCwgbm90IHN1cHBvcnRlZCBpbiBwcm90bzMuXG4gICAgICAgICAgICAgICAgLy8gQnV0IHdlIG11c3Qgc3RpbGwgYmUgYWJsZSB0byBwYXJzZSBhbmQgdHJlYXQgYXMgdW5rbm93bi5cbiAgICAgICAgICAgICAgICBsZXQgdDtcbiAgICAgICAgICAgICAgICB3aGlsZSAoKHQgPSB0aGlzLnRhZygpWzFdKSAhPT0gV2lyZVR5cGUuRW5kR3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5za2lwKHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2FudCBza2lwIHdpcmUgdHlwZSBcIiArIHdpcmVUeXBlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgICAgICByZXR1cm4gdGhpcy5idWYuc3ViYXJyYXkoc3RhcnQsIHRoaXMucG9zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhyb3dzIGVycm9yIGlmIHBvc2l0aW9uIGluIGJ5dGUgYXJyYXkgaXMgb3V0IG9mIHJhbmdlLlxuICAgICAqL1xuICAgIGFzc2VydEJvdW5kcygpIHtcbiAgICAgICAgaWYgKHRoaXMucG9zID4gdGhpcy5sZW4pXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInByZW1hdHVyZSBFT0ZcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBgaW50MzJgIGZpZWxkLCBhIHNpZ25lZCAzMiBiaXQgdmFyaW50LlxuICAgICAqL1xuICAgIGludDMyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51aW50MzIoKSB8IDA7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBgc2ludDMyYCBmaWVsZCwgYSBzaWduZWQsIHppZ3phZy1lbmNvZGVkIDMyLWJpdCB2YXJpbnQuXG4gICAgICovXG4gICAgc2ludDMyKCkge1xuICAgICAgICBsZXQgenplID0gdGhpcy51aW50MzIoKTtcbiAgICAgICAgLy8gZGVjb2RlIHppZ3phZ1xuICAgICAgICByZXR1cm4gKHp6ZSA+Pj4gMSkgXiAtKHp6ZSAmIDEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgYGludDY0YCBmaWVsZCwgYSBzaWduZWQgNjQtYml0IHZhcmludC5cbiAgICAgKi9cbiAgICBpbnQ2NCgpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvSW50NjQuZGVjKC4uLnRoaXMudmFyaW50NjQoKSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBgdWludDY0YCBmaWVsZCwgYW4gdW5zaWduZWQgNjQtYml0IHZhcmludC5cbiAgICAgKi9cbiAgICB1aW50NjQoKSB7XG4gICAgICAgIHJldHVybiBwcm90b0ludDY0LnVEZWMoLi4udGhpcy52YXJpbnQ2NCgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBzaW50NjRgIGZpZWxkLCBhIHNpZ25lZCwgemlnLXphZy1lbmNvZGVkIDY0LWJpdCB2YXJpbnQuXG4gICAgICovXG4gICAgc2ludDY0KCkge1xuICAgICAgICBsZXQgW2xvLCBoaV0gPSB0aGlzLnZhcmludDY0KCk7XG4gICAgICAgIC8vIGRlY29kZSB6aWcgemFnXG4gICAgICAgIGxldCBzID0gLShsbyAmIDEpO1xuICAgICAgICBsbyA9ICgobG8gPj4+IDEpIHwgKChoaSAmIDEpIDw8IDMxKSkgXiBzO1xuICAgICAgICBoaSA9IChoaSA+Pj4gMSkgXiBzO1xuICAgICAgICByZXR1cm4gcHJvdG9JbnQ2NC5kZWMobG8sIGhpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBib29sYCBmaWVsZCwgYSB2YXJpYW50LlxuICAgICAqL1xuICAgIGJvb2woKSB7XG4gICAgICAgIGxldCBbbG8sIGhpXSA9IHRoaXMudmFyaW50NjQoKTtcbiAgICAgICAgcmV0dXJuIGxvICE9PSAwIHx8IGhpICE9PSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgYGZpeGVkMzJgIGZpZWxkLCBhbiB1bnNpZ25lZCwgZml4ZWQtbGVuZ3RoIDMyLWJpdCBpbnRlZ2VyLlxuICAgICAqL1xuICAgIGZpeGVkMzIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0VWludDMyKCh0aGlzLnBvcyArPSA0KSAtIDQsIHRydWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgYHNmaXhlZDMyYCBmaWVsZCwgYSBzaWduZWQsIGZpeGVkLWxlbmd0aCAzMi1iaXQgaW50ZWdlci5cbiAgICAgKi9cbiAgICBzZml4ZWQzMigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5nZXRJbnQzMigodGhpcy5wb3MgKz0gNCkgLSA0LCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBmaXhlZDY0YCBmaWVsZCwgYW4gdW5zaWduZWQsIGZpeGVkLWxlbmd0aCA2NCBiaXQgaW50ZWdlci5cbiAgICAgKi9cbiAgICBmaXhlZDY0KCkge1xuICAgICAgICByZXR1cm4gcHJvdG9JbnQ2NC51RGVjKHRoaXMuc2ZpeGVkMzIoKSwgdGhpcy5zZml4ZWQzMigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBmaXhlZDY0YCBmaWVsZCwgYSBzaWduZWQsIGZpeGVkLWxlbmd0aCA2NC1iaXQgaW50ZWdlci5cbiAgICAgKi9cbiAgICBzZml4ZWQ2NCgpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvSW50NjQuZGVjKHRoaXMuc2ZpeGVkMzIoKSwgdGhpcy5zZml4ZWQzMigpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBmbG9hdGAgZmllbGQsIDMyLWJpdCBmbG9hdGluZyBwb2ludCBudW1iZXIuXG4gICAgICovXG4gICAgZmxvYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0RmxvYXQzMigodGhpcy5wb3MgKz0gNCkgLSA0LCB0cnVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBkb3VibGVgIGZpZWxkLCBhIDY0LWJpdCBmbG9hdGluZyBwb2ludCBudW1iZXIuXG4gICAgICovXG4gICAgZG91YmxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3LmdldEZsb2F0NjQoKHRoaXMucG9zICs9IDgpIC0gOCwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBgYnl0ZXNgIGZpZWxkLCBsZW5ndGgtZGVsaW1pdGVkIGFyYml0cmFyeSBkYXRhLlxuICAgICAqL1xuICAgIGJ5dGVzKCkge1xuICAgICAgICBsZXQgbGVuID0gdGhpcy51aW50MzIoKSwgc3RhcnQgPSB0aGlzLnBvcztcbiAgICAgICAgdGhpcy5wb3MgKz0gbGVuO1xuICAgICAgICB0aGlzLmFzc2VydEJvdW5kcygpO1xuICAgICAgICByZXR1cm4gdGhpcy5idWYuc3ViYXJyYXkoc3RhcnQsIHN0YXJ0ICsgbGVuKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVhZCBhIGBzdHJpbmdgIGZpZWxkLCBsZW5ndGgtZGVsaW1pdGVkIGRhdGEgY29udmVydGVkIHRvIFVURi04IHRleHQuXG4gICAgICovXG4gICAgc3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50ZXh0RGVjb2Rlci5kZWNvZGUodGhpcy5ieXRlcygpKTtcbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwiLi4vbWVzc2FnZS5qc1wiO1xuaW1wb3J0IHsgU2NhbGFyVHlwZSB9IGZyb20gXCIuLi9maWVsZC5qc1wiO1xuLyoqXG4gKiBXcmFwIGEgcHJpbWl0aXZlIG1lc3NhZ2UgZmllbGQgdmFsdWUgaW4gaXRzIGNvcnJlc3BvbmRpbmcgd3JhcHBlclxuICogbWVzc2FnZS4gVGhpcyBmdW5jdGlvbiBpcyBpZGVtcG90ZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gd3JhcEZpZWxkKHR5cGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTWVzc2FnZSB8fCAhdHlwZS5maWVsZFdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZS5maWVsZFdyYXBwZXIud3JhcEZpZWxkKHZhbHVlKTtcbn1cbi8qKlxuICogSWYgdGhlIGdpdmVuIGZpZWxkIHVzZXMgb25lIG9mIHRoZSB3ZWxsLWtub3duIHdyYXBwZXIgdHlwZXMsIHJldHVyblxuICogdGhlIHByaW1pdGl2ZSB0eXBlIGl0IHdyYXBzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW53cmFwcGVkRmllbGRUeXBlKGZpZWxkKSB7XG4gICAgaWYgKGZpZWxkLmZpZWxkS2luZCAhPT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGZpZWxkLnJlcGVhdGVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChmaWVsZC5vbmVvZiAhPSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHdrdFdyYXBwZXJUb1NjYWxhclR5cGVbZmllbGQubWVzc2FnZS50eXBlTmFtZV07XG59XG5jb25zdCB3a3RXcmFwcGVyVG9TY2FsYXJUeXBlID0ge1xuICAgIFwiZ29vZ2xlLnByb3RvYnVmLkRvdWJsZVZhbHVlXCI6IFNjYWxhclR5cGUuRE9VQkxFLFxuICAgIFwiZ29vZ2xlLnByb3RvYnVmLkZsb2F0VmFsdWVcIjogU2NhbGFyVHlwZS5GTE9BVCxcbiAgICBcImdvb2dsZS5wcm90b2J1Zi5JbnQ2NFZhbHVlXCI6IFNjYWxhclR5cGUuSU5UNjQsXG4gICAgXCJnb29nbGUucHJvdG9idWYuVUludDY0VmFsdWVcIjogU2NhbGFyVHlwZS5VSU5UNjQsXG4gICAgXCJnb29nbGUucHJvdG9idWYuSW50MzJWYWx1ZVwiOiBTY2FsYXJUeXBlLklOVDMyLFxuICAgIFwiZ29vZ2xlLnByb3RvYnVmLlVJbnQzMlZhbHVlXCI6IFNjYWxhclR5cGUuVUlOVDMyLFxuICAgIFwiZ29vZ2xlLnByb3RvYnVmLkJvb2xWYWx1ZVwiOiBTY2FsYXJUeXBlLkJPT0wsXG4gICAgXCJnb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWVcIjogU2NhbGFyVHlwZS5TVFJJTkcsXG4gICAgXCJnb29nbGUucHJvdG9idWYuQnl0ZXNWYWx1ZVwiOiBTY2FsYXJUeXBlLkJZVEVTLFxufTtcbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzIEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgTG9uZ1R5cGUsIFNjYWxhclR5cGUgfSBmcm9tIFwiLi4vZmllbGQuanNcIjtcbmltcG9ydCB7IFdpcmVUeXBlIH0gZnJvbSBcIi4uL2JpbmFyeS1lbmNvZGluZy5qc1wiO1xuaW1wb3J0IHsgcHJvdG9JbnQ2NCB9IGZyb20gXCIuLi9wcm90by1pbnQ2NC5qc1wiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYm90aCBzY2FsYXIgdmFsdWVzIGFyZSBlcXVhbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxhckVxdWFscyh0eXBlLCBhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpIHtcbiAgICAgICAgLy8gVGhpcyBjb3JyZWN0bHkgbWF0Y2hlcyBlcXVhbCB2YWx1ZXMgZXhjZXB0IEJZVEVTIGFuZCAocG9zc2libHkpIDY0LWJpdCBpbnRlZ2Vycy5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8vIFNwZWNpYWwgY2FzZSBCWVRFUyAtIHdlIG5lZWQgdG8gY29tcGFyZSBlYWNoIGJ5dGUgaW5kaXZpZHVhbGx5XG4gICAgaWYgKHR5cGUgPT0gU2NhbGFyVHlwZS5CWVRFUykge1xuICAgICAgICBpZiAoIShhIGluc3RhbmNlb2YgVWludDhBcnJheSkgfHwgIShiIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gU3BlY2lhbCBjYXNlIDY0LWJpdCBpbnRlZ2VycyAtIHdlIHN1cHBvcnQgbnVtYmVyLCBzdHJpbmcgYW5kIGJpZ2ludCByZXByZXNlbnRhdGlvbi5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3N3aXRjaC1leGhhdXN0aXZlbmVzcy1jaGVja1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuVUlOVDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRklYRUQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVENjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UNjQ6XG4gICAgICAgICAgICAvLyBMb29zZSBjb21wYXJpc29uIHdpbGwgbWF0Y2ggYmV0d2VlbiAwbiwgMCBhbmQgXCIwXCIuXG4gICAgICAgICAgICByZXR1cm4gYSA9PSBiO1xuICAgIH1cbiAgICAvLyBBbnl0aGluZyB0aGF0IGhhc24ndCBiZWVuIGNhdWdodCBieSBzdHJpY3QgY29tcGFyaXNvbiBvciBzcGVjaWFsIGNhc2VkXG4gICAgLy8gQllURVMgYW5kIDY0LWJpdCBpbnRlZ2VycyBpcyBub3QgZXF1YWwuXG4gICAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGUgZ2l2ZW4gc2NhbGFyIHR5cGUsIGZvbGxvd2luZ1xuICogcHJvdG8zIHNlbWFudGljcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxhckRlZmF1bHRWYWx1ZSh0eXBlLCBsb25nVHlwZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQk9PTDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVENjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDY0OlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtZW51bS1jb21wYXJpc29uIC0tIGFjY2VwdGFibGUgc2luY2UgaXQncyBjb3ZlcmVkIGJ5IHRlc3RzXG4gICAgICAgICAgICByZXR1cm4gbG9uZ1R5cGUgPT0gMCA/IHByb3RvSW50NjQuemVybyA6IFwiMFwiO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRE9VQkxFOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRkxPQVQ6XG4gICAgICAgICAgICByZXR1cm4gMC4wO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQllURVM6XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TVFJJTkc6XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIC8vIEhhbmRsZXMgSU5UMzIsIFVJTlQzMiwgU0lOVDMyLCBGSVhFRDMyLCBTRklYRUQzMi5cbiAgICAgICAgICAgIC8vIFdlIGRvIG5vdCB1c2UgaW5kaXZpZHVhbCBjYXNlcyB0byBzYXZlIGEgZmV3IGJ5dGVzIGNvZGUgc2l6ZS5cbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgIH1cbn1cbi8qKlxuICogR2V0IGluZm9ybWF0aW9uIGZvciB3cml0aW5nIGEgc2NhbGFyIHZhbHVlLlxuICpcbiAqIFJldHVybnMgdHVwbGU6XG4gKiBbMF06IGFwcHJvcHJpYXRlIFdpcmVUeXBlXG4gKiBbMV06IG5hbWUgb2YgdGhlIGFwcHJvcHJpYXRlIG1ldGhvZCBvZiBJQmluYXJ5V3JpdGVyXG4gKiBbMl06IHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGlzIGEgZGVmYXVsdCB2YWx1ZSBmb3IgcHJvdG8zIHNlbWFudGljc1xuICpcbiAqIElmIGFyZ3VtZW50IGB2YWx1ZWAgaXMgb21pdHRlZCwgWzJdIGlzIGFsd2F5cyBmYWxzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYWxhclR5cGVJbmZvKHR5cGUsIHZhbHVlKSB7XG4gICAgY29uc3QgaXNVbmRlZmluZWQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkO1xuICAgIGxldCB3aXJlVHlwZSA9IFdpcmVUeXBlLlZhcmludDtcbiAgICBsZXQgaXNJbnRyaW5zaWNEZWZhdWx0ID0gdmFsdWUgPT09IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9zd2l0Y2gtZXhoYXVzdGl2ZW5lc3MtY2hlY2sgLS0gSU5UMzIsIFVJTlQzMiwgU0lOVDMyIGFyZSBjb3ZlcmVkIGJ5IHRoZSBkZWZhdWx0c1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU1RSSU5HOlxuICAgICAgICAgICAgaXNJbnRyaW5zaWNEZWZhdWx0ID0gaXNVbmRlZmluZWQgfHwgIXZhbHVlLmxlbmd0aDtcbiAgICAgICAgICAgIHdpcmVUeXBlID0gV2lyZVR5cGUuTGVuZ3RoRGVsaW1pdGVkO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5CT09MOlxuICAgICAgICAgICAgaXNJbnRyaW5zaWNEZWZhdWx0ID0gdmFsdWUgPT09IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5ET1VCTEU6XG4gICAgICAgICAgICB3aXJlVHlwZSA9IFdpcmVUeXBlLkJpdDY0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GTE9BVDpcbiAgICAgICAgICAgIHdpcmVUeXBlID0gV2lyZVR5cGUuQml0MzI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDY0OlxuICAgICAgICAgICAgaXNJbnRyaW5zaWNEZWZhdWx0ID0gaXNVbmRlZmluZWQgfHwgdmFsdWUgPT0gMDsgLy8gTG9vc2UgY29tcGFyaXNvbiBtYXRjaGVzIDBuLCAwIGFuZCBcIjBcIlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5VSU5UNjQ6XG4gICAgICAgICAgICBpc0ludHJpbnNpY0RlZmF1bHQgPSBpc1VuZGVmaW5lZCB8fCB2YWx1ZSA9PSAwOyAvLyBMb29zZSBjb21wYXJpc29uIG1hdGNoZXMgMG4sIDAgYW5kIFwiMFwiXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVENjQ6XG4gICAgICAgICAgICBpc0ludHJpbnNpY0RlZmF1bHQgPSBpc1VuZGVmaW5lZCB8fCB2YWx1ZSA9PSAwOyAvLyBMb29zZSBjb21wYXJpc29uIG1hdGNoZXMgMG4sIDAgYW5kIFwiMFwiXG4gICAgICAgICAgICB3aXJlVHlwZSA9IFdpcmVUeXBlLkJpdDY0O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5CWVRFUzpcbiAgICAgICAgICAgIGlzSW50cmluc2ljRGVmYXVsdCA9IGlzVW5kZWZpbmVkIHx8ICF2YWx1ZS5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgd2lyZVR5cGUgPSBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVEMzI6XG4gICAgICAgICAgICB3aXJlVHlwZSA9IFdpcmVUeXBlLkJpdDMyO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQzMjpcbiAgICAgICAgICAgIHdpcmVUeXBlID0gV2lyZVR5cGUuQml0MzI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICAgICAgaXNJbnRyaW5zaWNEZWZhdWx0ID0gaXNVbmRlZmluZWQgfHwgdmFsdWUgPT0gMDtcbiAgICAgICAgICAgIHdpcmVUeXBlID0gV2lyZVR5cGUuQml0NjQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQ2NDpcbiAgICAgICAgICAgIGlzSW50cmluc2ljRGVmYXVsdCA9IGlzVW5kZWZpbmVkIHx8IHZhbHVlID09IDA7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gU2NhbGFyVHlwZVt0eXBlXS50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiBbd2lyZVR5cGUsIG1ldGhvZCwgaXNVbmRlZmluZWQgfHwgaXNJbnRyaW5zaWNEZWZhdWx0XTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzIEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgQmluYXJ5UmVhZGVyLCBCaW5hcnlXcml0ZXIsIFdpcmVUeXBlIH0gZnJvbSBcIi4uL2JpbmFyeS1lbmNvZGluZy5qc1wiO1xuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCIuLi9tZXNzYWdlLmpzXCI7XG5pbXBvcnQgeyBMb25nVHlwZSwgU2NhbGFyVHlwZSB9IGZyb20gXCIuLi9maWVsZC5qc1wiO1xuaW1wb3J0IHsgd3JhcEZpZWxkIH0gZnJvbSBcIi4vZmllbGQtd3JhcHBlci5qc1wiO1xuaW1wb3J0IHsgc2NhbGFyRGVmYXVsdFZhbHVlLCBzY2FsYXJUeXBlSW5mbyB9IGZyb20gXCIuL3NjYWxhcnMuanNcIjtcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCIuL2Fzc2VydC5qc1wiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm4sIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudCwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGwsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb24sIG5vLWNhc2UtZGVjbGFyYXRpb25zLCBwcmVmZXItY29uc3QgKi9cbmNvbnN0IHVua25vd25GaWVsZHNTeW1ib2wgPSBTeW1ib2woXCJAYnVmYnVpbGQvcHJvdG9idWYvdW5rbm93bi1maWVsZHNcIik7XG4vLyBEZWZhdWx0IG9wdGlvbnMgZm9yIHBhcnNpbmcgYmluYXJ5IGRhdGEuXG5jb25zdCByZWFkRGVmYXVsdHMgPSB7XG4gICAgcmVhZFVua25vd25GaWVsZHM6IHRydWUsXG4gICAgcmVhZGVyRmFjdG9yeTogKGJ5dGVzKSA9PiBuZXcgQmluYXJ5UmVhZGVyKGJ5dGVzKSxcbn07XG4vLyBEZWZhdWx0IG9wdGlvbnMgZm9yIHNlcmlhbGl6aW5nIGJpbmFyeSBkYXRhLlxuY29uc3Qgd3JpdGVEZWZhdWx0cyA9IHtcbiAgICB3cml0ZVVua25vd25GaWVsZHM6IHRydWUsXG4gICAgd3JpdGVyRmFjdG9yeTogKCkgPT4gbmV3IEJpbmFyeVdyaXRlcigpLFxufTtcbmZ1bmN0aW9uIG1ha2VSZWFkT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlYWREZWZhdWx0cyksIG9wdGlvbnMpIDogcmVhZERlZmF1bHRzO1xufVxuZnVuY3Rpb24gbWFrZVdyaXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHdyaXRlRGVmYXVsdHMpLCBvcHRpb25zKSA6IHdyaXRlRGVmYXVsdHM7XG59XG5leHBvcnQgZnVuY3Rpb24gbWFrZUJpbmFyeUZvcm1hdENvbW1vbigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtYWtlUmVhZE9wdGlvbnMsXG4gICAgICAgIG1ha2VXcml0ZU9wdGlvbnMsXG4gICAgICAgIGxpc3RVbmtub3duRmllbGRzKG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiAoX2EgPSBtZXNzYWdlW3Vua25vd25GaWVsZHNTeW1ib2xdKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcbiAgICAgICAgfSxcbiAgICAgICAgZGlzY2FyZFVua25vd25GaWVsZHMobWVzc2FnZSkge1xuICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdW5rbm93bkZpZWxkc1N5bWJvbF07XG4gICAgICAgIH0sXG4gICAgICAgIHdyaXRlVW5rbm93bkZpZWxkcyhtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IG0gPSBtZXNzYWdlO1xuICAgICAgICAgICAgY29uc3QgYyA9IG1bdW5rbm93bkZpZWxkc1N5bWJvbF07XG4gICAgICAgICAgICBpZiAoYykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZiBvZiBjKSB7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci50YWcoZi5ubywgZi53aXJlVHlwZSkucmF3KGYuZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBvblVua25vd25GaWVsZChtZXNzYWdlLCBubywgd2lyZVR5cGUsIGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IG0gPSBtZXNzYWdlO1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1bdW5rbm93bkZpZWxkc1N5bWJvbF0pKSB7XG4gICAgICAgICAgICAgICAgbVt1bmtub3duRmllbGRzU3ltYm9sXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbVt1bmtub3duRmllbGRzU3ltYm9sXS5wdXNoKHsgbm8sIHdpcmVUeXBlLCBkYXRhIH0pO1xuICAgICAgICB9LFxuICAgICAgICByZWFkTWVzc2FnZShtZXNzYWdlLCByZWFkZXIsIGxlbmd0aE9yRW5kVGFnRmllbGRObywgb3B0aW9ucywgZGVsaW1pdGVkTWVzc2FnZUVuY29kaW5nKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5nZXRUeXBlKCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3N0cmljdC1ib29sZWFuLWV4cHJlc3Npb25zXG4gICAgICAgICAgICBjb25zdCBlbmQgPSBkZWxpbWl0ZWRNZXNzYWdlRW5jb2RpbmdcbiAgICAgICAgICAgICAgICA/IHJlYWRlci5sZW5cbiAgICAgICAgICAgICAgICA6IHJlYWRlci5wb3MgKyBsZW5ndGhPckVuZFRhZ0ZpZWxkTm87XG4gICAgICAgICAgICBsZXQgZmllbGRObywgd2lyZVR5cGU7XG4gICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgICAgIFtmaWVsZE5vLCB3aXJlVHlwZV0gPSByZWFkZXIudGFnKCk7XG4gICAgICAgICAgICAgICAgaWYgKHdpcmVUeXBlID09IFdpcmVUeXBlLkVuZEdyb3VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IHR5cGUuZmllbGRzLmZpbmQoZmllbGRObyk7XG4gICAgICAgICAgICAgICAgaWYgKCFmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0gcmVhZGVyLnNraXAod2lyZVR5cGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5yZWFkVW5rbm93bkZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblVua25vd25GaWVsZChtZXNzYWdlLCBmaWVsZE5vLCB3aXJlVHlwZSwgZGF0YSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBtZXNzYWdlLCByZXBlYXRlZCA9IGZpZWxkLnJlcGVhdGVkLCBsb2NhbE5hbWUgPSBmaWVsZC5sb2NhbE5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkLm9uZW9mKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldFtmaWVsZC5vbmVvZi5sb2NhbE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0LmNhc2UgIT0gbG9jYWxOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGFyZ2V0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldC5jYXNlID0gbG9jYWxOYW1lO1xuICAgICAgICAgICAgICAgICAgICBsb2NhbE5hbWUgPSBcInZhbHVlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAoZmllbGQua2luZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2FsYXJUeXBlID0gZmllbGQua2luZCA9PSBcImVudW1cIiA/IFNjYWxhclR5cGUuSU5UMzIgOiBmaWVsZC5UO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlYWQgPSByZWFkU2NhbGFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtZW51bS1jb21wYXJpc29uIC0tIGFjY2VwdGFibGUgc2luY2UgaXQncyBjb3ZlcmVkIGJ5IHRlc3RzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQua2luZCA9PSBcInNjYWxhclwiICYmIGZpZWxkLkwgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZCA9IHJlYWRTY2FsYXJMVFN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXBlYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhcnIgPSB0YXJnZXRbbG9jYWxOYW1lXTsgLy8gc2FmZSB0byBhc3N1bWUgcHJlc2VuY2Ugb2YgYXJyYXksIG9uZW9mIGNhbm5vdCBjb250YWluIHJlcGVhdGVkIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3aXJlVHlwZSA9PSBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGFyVHlwZSAhPSBTY2FsYXJUeXBlLlNUUklORyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsYXJUeXBlICE9IFNjYWxhclR5cGUuQllURVMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGUgPSByZWFkZXIudWludDMyKCkgKyByZWFkZXIucG9zO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKHJlYWQocmVhZGVyLCBzY2FsYXJUeXBlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyci5wdXNoKHJlYWQocmVhZGVyLCBzY2FsYXJUeXBlKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2xvY2FsTmFtZV0gPSByZWFkKHJlYWRlciwgc2NhbGFyVHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VUeXBlID0gZmllbGQuVDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXBlYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNhZmUgdG8gYXNzdW1lIHByZXNlbmNlIG9mIGFycmF5LCBvbmVvZiBjYW5ub3QgY29udGFpbiByZXBlYXRlZCB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbG9jYWxOYW1lXS5wdXNoKHJlYWRNZXNzYWdlRmllbGQocmVhZGVyLCBuZXcgbWVzc2FnZVR5cGUoKSwgb3B0aW9ucywgZmllbGQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRbbG9jYWxOYW1lXSBpbnN0YW5jZW9mIE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZE1lc3NhZ2VGaWVsZChyZWFkZXIsIHRhcmdldFtsb2NhbE5hbWVdLCBvcHRpb25zLCBmaWVsZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbG9jYWxOYW1lXSA9IHJlYWRNZXNzYWdlRmllbGQocmVhZGVyLCBuZXcgbWVzc2FnZVR5cGUoKSwgb3B0aW9ucywgZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZVR5cGUuZmllbGRXcmFwcGVyICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhZmllbGQub25lb2YgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFmaWVsZC5yZXBlYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2xvY2FsTmFtZV0gPSBtZXNzYWdlVHlwZS5maWVsZFdyYXBwZXIudW53cmFwRmllbGQodGFyZ2V0W2xvY2FsTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBbbWFwS2V5LCBtYXBWYWxdID0gcmVhZE1hcEVudHJ5KGZpZWxkLCByZWFkZXIsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2FmZSB0byBhc3N1bWUgcHJlc2VuY2Ugb2YgbWFwIG9iamVjdCwgb25lb2YgY2Fubm90IGNvbnRhaW4gcmVwZWF0ZWQgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbG9jYWxOYW1lXVttYXBLZXldID0gbWFwVmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRlbGltaXRlZE1lc3NhZ2VFbmNvZGluZyAmJiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9zdHJpY3QtYm9vbGVhbi1leHByZXNzaW9uc1xuICAgICAgICAgICAgICAgICh3aXJlVHlwZSAhPSBXaXJlVHlwZS5FbmRHcm91cCB8fCBmaWVsZE5vICE9PSBsZW5ndGhPckVuZFRhZ0ZpZWxkTm8pKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGVuZCBncm91cCB0YWdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8gUmVhZCBhIG1lc3NhZ2UsIGF2b2lkaW5nIE1lc3NhZ2VUeXBlLmZyb21CaW5hcnkoKSB0byByZS11c2UgdGhlXG4vLyBCaW5hcnlSZWFkT3B0aW9ucyBhbmQgdGhlIElCaW5hcnlSZWFkZXIuXG5mdW5jdGlvbiByZWFkTWVzc2FnZUZpZWxkKHJlYWRlciwgbWVzc2FnZSwgb3B0aW9ucywgZmllbGQpIHtcbiAgICBjb25zdCBmb3JtYXQgPSBtZXNzYWdlLmdldFR5cGUoKS5ydW50aW1lLmJpbjtcbiAgICBjb25zdCBkZWxpbWl0ZWQgPSBmaWVsZCA9PT0gbnVsbCB8fCBmaWVsZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmllbGQuZGVsaW1pdGVkO1xuICAgIGZvcm1hdC5yZWFkTWVzc2FnZShtZXNzYWdlLCByZWFkZXIsIGRlbGltaXRlZCA/IGZpZWxkID09PSBudWxsIHx8IGZpZWxkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWVsZC5ubyA6IHJlYWRlci51aW50MzIoKSwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvc3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnNcbiAgICBvcHRpb25zLCBkZWxpbWl0ZWQpO1xuICAgIHJldHVybiBtZXNzYWdlO1xufVxuLy8gUmVhZCBhIG1hcCBmaWVsZCwgZXhwZWN0aW5nIGtleSBmaWVsZCA9IDEsIHZhbHVlIGZpZWxkID0gMlxuZnVuY3Rpb24gcmVhZE1hcEVudHJ5KGZpZWxkLCByZWFkZXIsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsZW5ndGggPSByZWFkZXIudWludDMyKCksIGVuZCA9IHJlYWRlci5wb3MgKyBsZW5ndGg7XG4gICAgbGV0IGtleSwgdmFsO1xuICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgIGxldCBbZmllbGROb10gPSByZWFkZXIudGFnKCk7XG4gICAgICAgIHN3aXRjaCAoZmllbGRObykge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGtleSA9IHJlYWRTY2FsYXIocmVhZGVyLCBmaWVsZC5LKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZpZWxkLlYua2luZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSByZWFkU2NhbGFyKHJlYWRlciwgZmllbGQuVi5UKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gcmVhZGVyLmludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHJlYWRNZXNzYWdlRmllbGQocmVhZGVyLCBuZXcgZmllbGQuVi5UKCksIG9wdGlvbnMsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxldCBrZXlSYXcgPSBzY2FsYXJEZWZhdWx0VmFsdWUoZmllbGQuSywgTG9uZ1R5cGUuQklHSU5UKTtcbiAgICAgICAga2V5ID1cbiAgICAgICAgICAgIGZpZWxkLksgPT0gU2NhbGFyVHlwZS5CT09MXG4gICAgICAgICAgICAgICAgPyBrZXlSYXcudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIDoga2V5UmF3O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGtleSAhPSBcInN0cmluZ1wiICYmIHR5cGVvZiBrZXkgIT0gXCJudW1iZXJcIikge1xuICAgICAgICBrZXkgPSBrZXkudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN3aXRjaCAoZmllbGQuVi5raW5kKSB7XG4gICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgdmFsID0gc2NhbGFyRGVmYXVsdFZhbHVlKGZpZWxkLlYuVCwgTG9uZ1R5cGUuQklHSU5UKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgdmFsID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgdmFsID0gbmV3IGZpZWxkLlYuVCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBba2V5LCB2YWxdO1xufVxuLy8gUmVhZCBhIHNjYWxhciB2YWx1ZSwgYnV0IHJldHVybiA2NCBiaXQgaW50ZWdyYWwgdHlwZXMgKGludDY0LCB1aW50NjQsXG4vLyBzaW50NjQsIGZpeGVkNjQsIHNmaXhlZDY0KSBhcyBzdHJpbmcgaW5zdGVhZCBvZiBiaWdpbnQuXG5leHBvcnQgZnVuY3Rpb24gcmVhZFNjYWxhckxUU3RyaW5nKHJlYWRlciwgdHlwZSkge1xuICAgIGNvbnN0IHYgPSByZWFkU2NhbGFyKHJlYWRlciwgdHlwZSk7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09IFwiYmlnaW50XCIgPyB2LnRvU3RyaW5nKCkgOiB2O1xufVxuLy8gRG9lcyBub3QgdXNlIHNjYWxhclR5cGVJbmZvKCkgZm9yIGJldHRlciBwZXJmb3JtYW5jZS5cbmZ1bmN0aW9uIHJlYWRTY2FsYXIocmVhZGVyLCB0eXBlKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TVFJJTkc6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQk9PTDpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuYm9vbCgpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuRE9VQkxFOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5kb3VibGUoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZMT0FUOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5mbG9hdCgpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuSU5UMzI6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLmludDMyKCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQ2NDpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuaW50NjQoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQ2NDpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIudWludDY0KCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDY0OlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5maXhlZDY0KCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5CWVRFUzpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuYnl0ZXMoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVEMzI6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLmZpeGVkMzIoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDMyOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci5zZml4ZWQzMigpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVENjQ6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLnNmaXhlZDY0KCk7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UNjQ6XG4gICAgICAgICAgICByZXR1cm4gcmVhZGVyLnNpbnQ2NCgpO1xuICAgICAgICBjYXNlIFNjYWxhclR5cGUuVUlOVDMyOlxuICAgICAgICAgICAgcmV0dXJuIHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQzMjpcbiAgICAgICAgICAgIHJldHVybiByZWFkZXIuc2ludDMyKCk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlTWFwRW50cnkod3JpdGVyLCBvcHRpb25zLCBmaWVsZCwga2V5LCB2YWx1ZSkge1xuICAgIHdyaXRlci50YWcoZmllbGQubm8sIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCk7XG4gICAgd3JpdGVyLmZvcmsoKTtcbiAgICAvLyBqYXZhc2NyaXB0IG9ubHkgYWxsb3dzIG51bWJlciBvciBzdHJpbmcgZm9yIG9iamVjdCBwcm9wZXJ0aWVzXG4gICAgLy8gd2UgY29udmVydCBmcm9tIG91ciByZXByZXNlbnRhdGlvbiB0byB0aGUgcHJvdG9idWYgdHlwZVxuICAgIGxldCBrZXlWYWx1ZSA9IGtleTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3N3aXRjaC1leGhhdXN0aXZlbmVzcy1jaGVjayAtLSB3ZSBkZWxpYmVyYXRlbHkgaGFuZGxlIGp1c3QgdGhlIHNwZWNpYWwgY2FzZXMgZm9yIG1hcCBrZXlzXG4gICAgc3dpdGNoIChmaWVsZC5LKSB7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVEMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5VSU5UMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQzMjpcbiAgICAgICAgICAgIGtleVZhbHVlID0gTnVtYmVyLnBhcnNlSW50KGtleSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJPT0w6XG4gICAgICAgICAgICBhc3NlcnQoa2V5ID09IFwidHJ1ZVwiIHx8IGtleSA9PSBcImZhbHNlXCIpO1xuICAgICAgICAgICAga2V5VmFsdWUgPSBrZXkgPT0gXCJ0cnVlXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gd3JpdGUga2V5LCBleHBlY3Rpbmcga2V5IGZpZWxkIG51bWJlciA9IDFcbiAgICB3cml0ZVNjYWxhcih3cml0ZXIsIGZpZWxkLkssIDEsIGtleVZhbHVlLCB0cnVlKTtcbiAgICAvLyB3cml0ZSB2YWx1ZSwgZXhwZWN0aW5nIHZhbHVlIGZpZWxkIG51bWJlciA9IDJcbiAgICBzd2l0Y2ggKGZpZWxkLlYua2luZCkge1xuICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICB3cml0ZVNjYWxhcih3cml0ZXIsIGZpZWxkLlYuVCwgMiwgdmFsdWUsIHRydWUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICB3cml0ZVNjYWxhcih3cml0ZXIsIFNjYWxhclR5cGUuSU5UMzIsIDIsIHZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgd3JpdGVyLnRhZygyLCBXaXJlVHlwZS5MZW5ndGhEZWxpbWl0ZWQpLmJ5dGVzKHZhbHVlLnRvQmluYXJ5KG9wdGlvbnMpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB3cml0ZXIuam9pbigpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlTWVzc2FnZUZpZWxkKHdyaXRlciwgb3B0aW9ucywgZmllbGQsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IHdyYXBGaWVsZChmaWVsZC5ULCB2YWx1ZSk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvc3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnNcbiAgICAgICAgaWYgKGZpZWxkID09PSBudWxsIHx8IGZpZWxkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBmaWVsZC5kZWxpbWl0ZWQpXG4gICAgICAgICAgICB3cml0ZXJcbiAgICAgICAgICAgICAgICAudGFnKGZpZWxkLm5vLCBXaXJlVHlwZS5TdGFydEdyb3VwKVxuICAgICAgICAgICAgICAgIC5yYXcobWVzc2FnZS50b0JpbmFyeShvcHRpb25zKSlcbiAgICAgICAgICAgICAgICAudGFnKGZpZWxkLm5vLCBXaXJlVHlwZS5FbmRHcm91cCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHdyaXRlclxuICAgICAgICAgICAgICAgIC50YWcoZmllbGQubm8sIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZClcbiAgICAgICAgICAgICAgICAuYnl0ZXMobWVzc2FnZS50b0JpbmFyeShvcHRpb25zKSk7XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlU2NhbGFyKHdyaXRlciwgdHlwZSwgZmllbGRObywgdmFsdWUsIGVtaXRJbnRyaW5zaWNEZWZhdWx0KSB7XG4gICAgbGV0IFt3aXJlVHlwZSwgbWV0aG9kLCBpc0ludHJpbnNpY0RlZmF1bHRdID0gc2NhbGFyVHlwZUluZm8odHlwZSwgdmFsdWUpO1xuICAgIGlmICghaXNJbnRyaW5zaWNEZWZhdWx0IHx8IGVtaXRJbnRyaW5zaWNEZWZhdWx0KSB7XG4gICAgICAgIHdyaXRlci50YWcoZmllbGRObywgd2lyZVR5cGUpW21ldGhvZF0odmFsdWUpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZVBhY2tlZCh3cml0ZXIsIHR5cGUsIGZpZWxkTm8sIHZhbHVlKSB7XG4gICAgaWYgKCF2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3cml0ZXIudGFnKGZpZWxkTm8sIFdpcmVUeXBlLkxlbmd0aERlbGltaXRlZCkuZm9yaygpO1xuICAgIGxldCBbLCBtZXRob2RdID0gc2NhbGFyVHlwZUluZm8odHlwZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB3cml0ZXJbbWV0aG9kXSh2YWx1ZVtpXSk7XG4gICAgfVxuICAgIHdyaXRlci5qb2luKCk7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IFNjYWxhclR5cGUgfSBmcm9tIFwiLi4vZmllbGQuanNcIjtcbmltcG9ydCB7IG1ha2VCaW5hcnlGb3JtYXRDb21tb24sIHdyaXRlTWFwRW50cnksIHdyaXRlTWVzc2FnZUZpZWxkLCB3cml0ZVBhY2tlZCwgd3JpdGVTY2FsYXIsIH0gZnJvbSBcIi4vYmluYXJ5LWZvcm1hdC1jb21tb24uanNcIjtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcywgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudCwgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uLCBAdHlwZXNjcmlwdC1lc2xpbnQvc3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnMsIHByZWZlci1jb25zdCwgbm8tY2FzZS1kZWNsYXJhdGlvbnMgKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQmluYXJ5Rm9ybWF0UHJvdG8zKCkge1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG1ha2VCaW5hcnlGb3JtYXRDb21tb24oKSksIHsgd3JpdGVNZXNzYWdlKG1lc3NhZ2UsIHdyaXRlciwgb3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgdHlwZSA9IG1lc3NhZ2UuZ2V0VHlwZSgpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlLmZpZWxkcy5ieU51bWJlcigpKSB7XG4gICAgICAgICAgICAgICAgbGV0IHZhbHVlLCAvLyB0aGlzIHdpbGwgYmUgb3VyIGZpZWxkIHZhbHVlLCB3aGV0aGVyIGl0IGlzIG1lbWJlciBvZiBhIG9uZW9mIG9yIHJlZ3VsYXIgZmllbGRcbiAgICAgICAgICAgICAgICByZXBlYXRlZCA9IGZpZWxkLnJlcGVhdGVkLCBsb2NhbE5hbWUgPSBmaWVsZC5sb2NhbE5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkLm9uZW9mKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9uZW9mID0gbWVzc2FnZVtmaWVsZC5vbmVvZi5sb2NhbE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAob25lb2YuY2FzZSAhPT0gbG9jYWxOYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gZmllbGQgaXMgbm90IHNlbGVjdGVkLCBza2lwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBvbmVvZi52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbWVzc2FnZVtsb2NhbE5hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZpZWxkLmtpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNjYWxhclR5cGUgPSBmaWVsZC5raW5kID09IFwiZW51bVwiID8gU2NhbGFyVHlwZS5JTlQzMiA6IGZpZWxkLlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVwZWF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQucGFja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlUGFja2VkKHdyaXRlciwgc2NhbGFyVHlwZSwgZmllbGQubm8sIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVTY2FsYXIod3JpdGVyLCBzY2FsYXJUeXBlLCBmaWVsZC5ubywgaXRlbSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZVNjYWxhcih3cml0ZXIsIHNjYWxhclR5cGUsIGZpZWxkLm5vLCB2YWx1ZSwgISFmaWVsZC5vbmVvZiB8fCBmaWVsZC5vcHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGVhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlTWVzc2FnZUZpZWxkKHdyaXRlciwgb3B0aW9ucywgZmllbGQsIGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlTWVzc2FnZUZpZWxkKHdyaXRlciwgb3B0aW9ucywgZmllbGQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWFwXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbF0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVNYXBFbnRyeSh3cml0ZXIsIG9wdGlvbnMsIGZpZWxkLCBrZXksIHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy53cml0ZVVua25vd25GaWVsZHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlVW5rbm93bkZpZWxkcyhtZXNzYWdlLCB3cml0ZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICAgICAgfSB9KTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzIEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5uZWNlc3NhcnktY29uZGl0aW9uLCBwcmVmZXItY29uc3QgKi9cbi8vIGxvb2t1cCB0YWJsZSBmcm9tIGJhc2U2NCBjaGFyYWN0ZXIgdG8gYnl0ZVxubGV0IGVuY1RhYmxlID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCIuc3BsaXQoXCJcIik7XG4vLyBsb29rdXAgdGFibGUgZnJvbSBiYXNlNjQgY2hhcmFjdGVyICpjb2RlKiB0byBieXRlIGJlY2F1c2UgbG9va3VwIGJ5IG51bWJlciBpcyBmYXN0XG5sZXQgZGVjVGFibGUgPSBbXTtcbmZvciAobGV0IGkgPSAwOyBpIDwgZW5jVGFibGUubGVuZ3RoOyBpKyspXG4gICAgZGVjVGFibGVbZW5jVGFibGVbaV0uY2hhckNvZGVBdCgwKV0gPSBpO1xuLy8gc3VwcG9ydCBiYXNlNjR1cmwgdmFyaWFudHNcbmRlY1RhYmxlW1wiLVwiLmNoYXJDb2RlQXQoMCldID0gZW5jVGFibGUuaW5kZXhPZihcIitcIik7XG5kZWNUYWJsZVtcIl9cIi5jaGFyQ29kZUF0KDApXSA9IGVuY1RhYmxlLmluZGV4T2YoXCIvXCIpO1xuZXhwb3J0IGNvbnN0IHByb3RvQmFzZTY0ID0ge1xuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBiYXNlNjQgc3RyaW5nIHRvIGEgYnl0ZSBhcnJheS5cbiAgICAgKlxuICAgICAqIC0gaWdub3JlcyB3aGl0ZS1zcGFjZSwgaW5jbHVkaW5nIGxpbmUgYnJlYWtzIGFuZCB0YWJzXG4gICAgICogLSBhbGxvd3MgaW5uZXIgcGFkZGluZyAoY2FuIGRlY29kZSBjb25jYXRlbmF0ZWQgYmFzZTY0IHN0cmluZ3MpXG4gICAgICogLSBkb2VzIG5vdCByZXF1aXJlIHBhZGRpbmdcbiAgICAgKiAtIHVuZGVyc3RhbmRzIGJhc2U2NHVybCBlbmNvZGluZzpcbiAgICAgKiAgIFwiLVwiIGluc3RlYWQgb2YgXCIrXCIsXG4gICAgICogICBcIl9cIiBpbnN0ZWFkIG9mIFwiL1wiLFxuICAgICAqICAgbm8gcGFkZGluZ1xuICAgICAqL1xuICAgIGRlYyhiYXNlNjRTdHIpIHtcbiAgICAgICAgLy8gZXN0aW1hdGUgYnl0ZSBzaXplLCBub3QgYWNjb3VudGluZyBmb3IgaW5uZXIgcGFkZGluZyBhbmQgd2hpdGVzcGFjZVxuICAgICAgICBsZXQgZXMgPSAoYmFzZTY0U3RyLmxlbmd0aCAqIDMpIC8gNDtcbiAgICAgICAgaWYgKGJhc2U2NFN0cltiYXNlNjRTdHIubGVuZ3RoIC0gMl0gPT0gXCI9XCIpXG4gICAgICAgICAgICBlcyAtPSAyO1xuICAgICAgICBlbHNlIGlmIChiYXNlNjRTdHJbYmFzZTY0U3RyLmxlbmd0aCAtIDFdID09IFwiPVwiKVxuICAgICAgICAgICAgZXMgLT0gMTtcbiAgICAgICAgbGV0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoZXMpLCBieXRlUG9zID0gMCwgLy8gcG9zaXRpb24gaW4gYnl0ZSBhcnJheVxuICAgICAgICBncm91cFBvcyA9IDAsIC8vIHBvc2l0aW9uIGluIGJhc2U2NCBncm91cFxuICAgICAgICBiLCAvLyBjdXJyZW50IGJ5dGVcbiAgICAgICAgcCA9IDA7IC8vIHByZXZpb3VzIGJ5dGVcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBiYXNlNjRTdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGIgPSBkZWNUYWJsZVtiYXNlNjRTdHIuY2hhckNvZGVBdChpKV07XG4gICAgICAgICAgICBpZiAoYiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChiYXNlNjRTdHJbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSBUUzcwMjk6IEZhbGx0aHJvdWdoIGNhc2UgaW4gc3dpdGNoXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCI9XCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cFBvcyA9IDA7IC8vIHJlc2V0IHN0YXRlIHdoZW4gcGFkZGluZyBmb3VuZFxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlIFRTNzAyOTogRmFsbHRocm91Z2ggY2FzZSBpbiBzd2l0Y2hcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlxcblwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiXFxyXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJcXHRcIjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIiBcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBza2lwIHdoaXRlLXNwYWNlLCBhbmQgcGFkZGluZ1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJpbnZhbGlkIGJhc2U2NCBzdHJpbmcuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoZ3JvdXBQb3MpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHAgPSBiO1xuICAgICAgICAgICAgICAgICAgICBncm91cFBvcyA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbYnl0ZVBvcysrXSA9IChwIDw8IDIpIHwgKChiICYgNDgpID4+IDQpO1xuICAgICAgICAgICAgICAgICAgICBwID0gYjtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBQb3MgPSAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGJ5dGVzW2J5dGVQb3MrK10gPSAoKHAgJiAxNSkgPDwgNCkgfCAoKGIgJiA2MCkgPj4gMik7XG4gICAgICAgICAgICAgICAgICAgIHAgPSBiO1xuICAgICAgICAgICAgICAgICAgICBncm91cFBvcyA9IDM7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgYnl0ZXNbYnl0ZVBvcysrXSA9ICgocCAmIDMpIDw8IDYpIHwgYjtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBQb3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZ3JvdXBQb3MgPT0gMSlcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiaW52YWxpZCBiYXNlNjQgc3RyaW5nLlwiKTtcbiAgICAgICAgcmV0dXJuIGJ5dGVzLnN1YmFycmF5KDAsIGJ5dGVQb3MpO1xuICAgIH0sXG4gICAgLyoqXG4gICAgICogRW5jb2RlIGEgYnl0ZSBhcnJheSB0byBhIGJhc2U2NCBzdHJpbmcuXG4gICAgICovXG4gICAgZW5jKGJ5dGVzKSB7XG4gICAgICAgIGxldCBiYXNlNjQgPSBcIlwiLCBncm91cFBvcyA9IDAsIC8vIHBvc2l0aW9uIGluIGJhc2U2NCBncm91cFxuICAgICAgICBiLCAvLyBjdXJyZW50IGJ5dGVcbiAgICAgICAgcCA9IDA7IC8vIGNhcnJ5IG92ZXIgZnJvbSBwcmV2aW91cyBieXRlXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGIgPSBieXRlc1tpXTtcbiAgICAgICAgICAgIHN3aXRjaCAoZ3JvdXBQb3MpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIGJhc2U2NCArPSBlbmNUYWJsZVtiID4+IDJdO1xuICAgICAgICAgICAgICAgICAgICBwID0gKGIgJiAzKSA8PCA0O1xuICAgICAgICAgICAgICAgICAgICBncm91cFBvcyA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgYmFzZTY0ICs9IGVuY1RhYmxlW3AgfCAoYiA+PiA0KV07XG4gICAgICAgICAgICAgICAgICAgIHAgPSAoYiAmIDE1KSA8PCAyO1xuICAgICAgICAgICAgICAgICAgICBncm91cFBvcyA9IDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgYmFzZTY0ICs9IGVuY1RhYmxlW3AgfCAoYiA+PiA2KV07XG4gICAgICAgICAgICAgICAgICAgIGJhc2U2NCArPSBlbmNUYWJsZVtiICYgNjNdO1xuICAgICAgICAgICAgICAgICAgICBncm91cFBvcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGFkZCBvdXRwdXQgcGFkZGluZ1xuICAgICAgICBpZiAoZ3JvdXBQb3MpIHtcbiAgICAgICAgICAgIGJhc2U2NCArPSBlbmNUYWJsZVtwXTtcbiAgICAgICAgICAgIGJhc2U2NCArPSBcIj1cIjtcbiAgICAgICAgICAgIGlmIChncm91cFBvcyA9PSAxKVxuICAgICAgICAgICAgICAgIGJhc2U2NCArPSBcIj1cIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmFzZTY0O1xuICAgIH0sXG59O1xuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjMgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIi4uL21lc3NhZ2UuanNcIjtcbmltcG9ydCB7IExvbmdUeXBlLCBTY2FsYXJUeXBlIH0gZnJvbSBcIi4uL2ZpZWxkLmpzXCI7XG5pbXBvcnQgeyBhc3NlcnQsIGFzc2VydEZsb2F0MzIsIGFzc2VydEludDMyLCBhc3NlcnRVSW50MzIgfSBmcm9tIFwiLi9hc3NlcnQuanNcIjtcbmltcG9ydCB7IHByb3RvSW50NjQgfSBmcm9tIFwiLi4vcHJvdG8taW50NjQuanNcIjtcbmltcG9ydCB7IHByb3RvQmFzZTY0IH0gZnJvbSBcIi4uL3Byb3RvLWJhc2U2NC5qc1wiO1xuLyogZXNsaW50LWRpc2FibGUgbm8tY2FzZS1kZWNsYXJhdGlvbnMsIEB0eXBlc2NyaXB0LWVzbGludC9yZXN0cmljdC1wbHVzLW9wZXJhbmRzLEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtY2FsbCxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MsQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudCAqL1xuLy8gRGVmYXVsdCBvcHRpb25zIGZvciBwYXJzaW5nIEpTT04uXG5jb25zdCBqc29uUmVhZERlZmF1bHRzID0ge1xuICAgIGlnbm9yZVVua25vd25GaWVsZHM6IGZhbHNlLFxufTtcbi8vIERlZmF1bHQgb3B0aW9ucyBmb3Igc2VyaWFsaXppbmcgdG8gSlNPTi5cbmNvbnN0IGpzb25Xcml0ZURlZmF1bHRzID0ge1xuICAgIGVtaXREZWZhdWx0VmFsdWVzOiBmYWxzZSxcbiAgICBlbnVtQXNJbnRlZ2VyOiBmYWxzZSxcbiAgICB1c2VQcm90b0ZpZWxkTmFtZTogZmFsc2UsXG4gICAgcHJldHR5U3BhY2VzOiAwLFxufTtcbmZ1bmN0aW9uIG1ha2VSZWFkT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMgPyBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGpzb25SZWFkRGVmYXVsdHMpLCBvcHRpb25zKSA6IGpzb25SZWFkRGVmYXVsdHM7XG59XG5mdW5jdGlvbiBtYWtlV3JpdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0aW9ucyA/IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwganNvbldyaXRlRGVmYXVsdHMpLCBvcHRpb25zKSA6IGpzb25Xcml0ZURlZmF1bHRzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VKc29uRm9ybWF0Q29tbW9uKG1ha2VXcml0ZUZpZWxkKSB7XG4gICAgY29uc3Qgd3JpdGVGaWVsZCA9IG1ha2VXcml0ZUZpZWxkKHdyaXRlRW51bSwgd3JpdGVTY2FsYXIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIG1ha2VSZWFkT3B0aW9ucyxcbiAgICAgICAgbWFrZVdyaXRlT3B0aW9ucyxcbiAgICAgICAgcmVhZE1lc3NhZ2UodHlwZSwganNvbiwgb3B0aW9ucywgbWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKGpzb24gPT0gbnVsbCB8fCBBcnJheS5pc0FycmF5KGpzb24pIHx8IHR5cGVvZiBqc29uICE9IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgbWVzc2FnZSAke3R5cGUudHlwZU5hbWV9IGZyb20gSlNPTjogJHt0aGlzLmRlYnVnKGpzb24pfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbWVzc2FnZSA9IG1lc3NhZ2UgIT09IG51bGwgJiYgbWVzc2FnZSAhPT0gdm9pZCAwID8gbWVzc2FnZSA6IG5ldyB0eXBlKCk7XG4gICAgICAgICAgICBjb25zdCBvbmVvZlNlZW4gPSB7fTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2pzb25LZXksIGpzb25WYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoanNvbikpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IHR5cGUuZmllbGRzLmZpbmRKc29uTmFtZShqc29uS2V5KTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5pZ25vcmVVbmtub3duRmllbGRzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgbWVzc2FnZSAke3R5cGUudHlwZU5hbWV9IGZyb20gSlNPTjoga2V5IFwiJHtqc29uS2V5fVwiIGlzIHVua25vd25gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IGxvY2FsTmFtZSA9IGZpZWxkLmxvY2FsTmFtZTtcbiAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gbWVzc2FnZTtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQub25lb2YpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25WYWx1ZSA9PT0gbnVsbCAmJiBmaWVsZC5raW5kID09IFwic2NhbGFyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNlZSBjb25mb3JtYW5jZSB0ZXN0IFJlcXVpcmVkLlByb3RvMy5Kc29uSW5wdXQuT25lb2ZGaWVsZE51bGx7Rmlyc3QsU2Vjb25kfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VlbiA9IG9uZW9mU2VlbltmaWVsZC5vbmVvZi5sb2NhbE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZGVjb2RlIG1lc3NhZ2UgJHt0eXBlLnR5cGVOYW1lfSBmcm9tIEpTT046IG11bHRpcGxlIGtleXMgZm9yIG9uZW9mIFwiJHtmaWVsZC5vbmVvZi5uYW1lfVwiIHByZXNlbnQ6IFwiJHtzZWVufVwiLCBcIiR7anNvbktleX1cImApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG9uZW9mU2VlbltmaWVsZC5vbmVvZi5sb2NhbE5hbWVdID0ganNvbktleTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0W2ZpZWxkLm9uZW9mLmxvY2FsTmFtZV0gPSB7IGNhc2U6IGxvY2FsTmFtZSB9O1xuICAgICAgICAgICAgICAgICAgICBsb2NhbE5hbWUgPSBcInZhbHVlXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmaWVsZC5yZXBlYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoanNvblZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoanNvblZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZGVjb2RlIGZpZWxkICR7dHlwZS50eXBlTmFtZX0uJHtmaWVsZC5uYW1lfSBmcm9tIEpTT046ICR7dGhpcy5kZWJ1Zyhqc29uVmFsdWUpfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldEFycmF5ID0gdGFyZ2V0W2xvY2FsTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QganNvbkl0ZW0gb2YganNvblZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvbkl0ZW0gPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGNhbm5vdCBkZWNvZGUgZmllbGQgJHt0eXBlLnR5cGVOYW1lfS4ke2ZpZWxkLm5hbWV9IGZyb20gSlNPTjogJHt0aGlzLmRlYnVnKGpzb25JdGVtKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3N3aXRjaC1leGhhdXN0aXZlbmVzcy1jaGVjayAtLSBcIm1hcFwiIGlzIGludmFsaWQgZm9yIHJlcGVhdGVkIGZpZWxkc1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmaWVsZC5raW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gZmllbGQuVC5mcm9tSnNvbihqc29uSXRlbSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHJlYWRFbnVtKGZpZWxkLlQsIGpzb25JdGVtLCBvcHRpb25zLmlnbm9yZVVua25vd25GaWVsZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gcmVhZFNjYWxhcihmaWVsZC5ULCBqc29uSXRlbSwgZmllbGQuTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gYGNhbm5vdCBkZWNvZGUgZmllbGQgJHt0eXBlLnR5cGVOYW1lfS4ke2ZpZWxkLm5hbWV9IGZyb20gSlNPTjogJHt0aGlzLmRlYnVnKGpzb25JdGVtKX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvciAmJiBlLm1lc3NhZ2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gKz0gYDogJHtlLm1lc3NhZ2V9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEFycmF5LnB1c2godmFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChmaWVsZC5raW5kID09IFwibWFwXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGpzb25WYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvblZhbHVlKSB8fCB0eXBlb2YganNvblZhbHVlICE9IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSBmaWVsZCAke3R5cGUudHlwZU5hbWV9LiR7ZmllbGQubmFtZX0gZnJvbSBKU09OOiAke3RoaXMuZGVidWcoanNvblZhbHVlKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXRNYXAgPSB0YXJnZXRbbG9jYWxOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbanNvbk1hcEtleSwganNvbk1hcFZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhqc29uVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvbk1hcFZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBjYW5ub3QgZGVjb2RlIGZpZWxkICR7dHlwZS50eXBlTmFtZX0uJHtmaWVsZC5uYW1lfSBmcm9tIEpTT046IG1hcCB2YWx1ZSBudWxsYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmaWVsZC5WLmtpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBmaWVsZC5WLlQuZnJvbUpzb24oanNvbk1hcFZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gcmVhZEVudW0oZmllbGQuVi5ULCBqc29uTWFwVmFsdWUsIG9wdGlvbnMuaWdub3JlVW5rbm93bkZpZWxkcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSByZWFkU2NhbGFyKGZpZWxkLlYuVCwganNvbk1hcFZhbHVlLCBMb25nVHlwZS5CSUdJTlQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbSA9IGBjYW5ub3QgZGVjb2RlIG1hcCB2YWx1ZSBmb3IgZmllbGQgJHt0eXBlLnR5cGVOYW1lfS4ke2ZpZWxkLm5hbWV9IGZyb20gSlNPTjogJHt0aGlzLmRlYnVnKGpzb25WYWx1ZSl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgRXJyb3IgJiYgZS5tZXNzYWdlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtICs9IGA6ICR7ZS5tZXNzYWdlfWA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldE1hcFtyZWFkU2NhbGFyKGZpZWxkLkssIGZpZWxkLksgPT0gU2NhbGFyVHlwZS5CT09MXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ganNvbk1hcEtleSA9PSBcInRydWVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGpzb25NYXBLZXkgPT0gXCJmYWxzZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoganNvbk1hcEtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGpzb25NYXBLZXksIExvbmdUeXBlLkJJR0lOVCkudG9TdHJpbmcoKV0gPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gYGNhbm5vdCBkZWNvZGUgbWFwIGtleSBmb3IgZmllbGQgJHt0eXBlLnR5cGVOYW1lfS4ke2ZpZWxkLm5hbWV9IGZyb20gSlNPTjogJHt0aGlzLmRlYnVnKGpzb25WYWx1ZSl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEVycm9yICYmIGUubWVzc2FnZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gKz0gYDogJHtlLm1lc3NhZ2V9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGZpZWxkLmtpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZVR5cGUgPSBmaWVsZC5UO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uVmFsdWUgPT09IG51bGwgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVR5cGUudHlwZU5hbWUgIT0gXCJnb29nbGUucHJvdG9idWYuVmFsdWVcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQub25lb2YpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSBmaWVsZCAke3R5cGUudHlwZU5hbWV9LiR7ZmllbGQubmFtZX0gZnJvbSBKU09OOiBudWxsIGlzIGludmFsaWQgZm9yIG9uZW9mIGZpZWxkIFwiJHtqc29uS2V5fVwiYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRbbG9jYWxOYW1lXSBpbnN0YW5jZW9mIE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2xvY2FsTmFtZV0uZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtsb2NhbE5hbWVdID0gbWVzc2FnZVR5cGUuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2VUeXBlLmZpZWxkV3JhcHBlciAmJiAhZmllbGQub25lb2YpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFtsb2NhbE5hbWVdID0gbWVzc2FnZVR5cGUuZmllbGRXcmFwcGVyLnVud3JhcEZpZWxkKHRhcmdldFtsb2NhbE5hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW51bVZhbHVlID0gcmVhZEVudW0oZmllbGQuVCwganNvblZhbHVlLCBvcHRpb25zLmlnbm9yZVVua25vd25GaWVsZHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnVtVmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRbbG9jYWxOYW1lXSA9IGVudW1WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2xvY2FsTmFtZV0gPSByZWFkU2NhbGFyKGZpZWxkLlQsIGpzb25WYWx1ZSwgZmllbGQuTCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBtID0gYGNhbm5vdCBkZWNvZGUgZmllbGQgJHt0eXBlLnR5cGVOYW1lfS4ke2ZpZWxkLm5hbWV9IGZyb20gSlNPTjogJHt0aGlzLmRlYnVnKGpzb25WYWx1ZSl9YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvciAmJiBlLm1lc3NhZ2UubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbSArPSBgOiAke2UubWVzc2FnZX1gO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfSxcbiAgICAgICAgd3JpdGVNZXNzYWdlKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBtZXNzYWdlLmdldFR5cGUoKTtcbiAgICAgICAgICAgIGNvbnN0IGpzb24gPSB7fTtcbiAgICAgICAgICAgIGxldCBmaWVsZDtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBtZW1iZXIgb2YgdHlwZS5maWVsZHMuYnlNZW1iZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQganNvblZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpZiAobWVtYmVyLmtpbmQgPT0gXCJvbmVvZlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvbmVvZiA9IG1lc3NhZ2VbbWVtYmVyLmxvY2FsTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob25lb2YudmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQgPSBtZW1iZXIuZmluZEZpZWxkKG9uZW9mLmNhc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWVsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwib25lb2YgY2FzZSBub3QgZm91bmQ6IFwiICsgb25lb2YuY2FzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb25WYWx1ZSA9IHdyaXRlRmllbGQoZmllbGQsIG9uZW9mLnZhbHVlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkID0gbWVtYmVyO1xuICAgICAgICAgICAgICAgICAgICAgICAganNvblZhbHVlID0gd3JpdGVGaWVsZChmaWVsZCwgbWVzc2FnZVtmaWVsZC5sb2NhbE5hbWVdLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoanNvblZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb25bb3B0aW9ucy51c2VQcm90b0ZpZWxkTmFtZSA/IGZpZWxkLm5hbWUgOiBmaWVsZC5qc29uTmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25WYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbSA9IGZpZWxkXG4gICAgICAgICAgICAgICAgICAgID8gYGNhbm5vdCBlbmNvZGUgZmllbGQgJHt0eXBlLnR5cGVOYW1lfS4ke2ZpZWxkLm5hbWV9IHRvIEpTT05gXG4gICAgICAgICAgICAgICAgICAgIDogYGNhbm5vdCBlbmNvZGUgbWVzc2FnZSAke3R5cGUudHlwZU5hbWV9IHRvIEpTT05gO1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBTdHJpbmcoZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG0gKyAoci5sZW5ndGggPiAwID8gYDogJHtyfWAgOiBcIlwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ganNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgcmVhZFNjYWxhcixcbiAgICAgICAgd3JpdGVTY2FsYXIsXG4gICAgICAgIGRlYnVnOiBkZWJ1Z0pzb25WYWx1ZSxcbiAgICB9O1xufVxuZnVuY3Rpb24gZGVidWdKc29uVmFsdWUoanNvbikge1xuICAgIGlmIChqc29uID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBcIm51bGxcIjtcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlb2YganNvbikge1xuICAgICAgICBjYXNlIFwib2JqZWN0XCI6XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShqc29uKSA/IFwiYXJyYXlcIiA6IFwib2JqZWN0XCI7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIHJldHVybiBqc29uLmxlbmd0aCA+IDEwMCA/IFwic3RyaW5nXCIgOiBgXCIke2pzb24uc3BsaXQoJ1wiJykuam9pbignXFxcXFwiJyl9XCJgO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyhqc29uKTtcbiAgICB9XG59XG4vLyBNYXkgdGhyb3cgYW4gZXJyb3IuIElmIHRoZSBlcnJvciBtZXNzYWdlIGlzIG5vbi1ibGFuaywgaXQgc2hvdWxkIGJlIHNob3duLlxuLy8gSXQgaXMgdXAgdG8gdGhlIGNhbGxlciB0byBwcm92aWRlIGNvbnRleHQuXG5mdW5jdGlvbiByZWFkU2NhbGFyKHR5cGUsIGpzb24sIGxvbmdUeXBlKSB7XG4gICAgLy8gZXZlcnkgdmFsaWQgY2FzZSBpbiB0aGUgc3dpdGNoIGJlbG93IHJldHVybnMsIGFuZCBldmVyeSBmYWxsXG4gICAgLy8gdGhyb3VnaCBpcyByZWdhcmRlZCBhcyBhIGZhaWx1cmUuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIC8vIGZsb2F0LCBkb3VibGU6IEpTT04gdmFsdWUgd2lsbCBiZSBhIG51bWJlciBvciBvbmUgb2YgdGhlIHNwZWNpYWwgc3RyaW5nIHZhbHVlcyBcIk5hTlwiLCBcIkluZmluaXR5XCIsIGFuZCBcIi1JbmZpbml0eVwiLlxuICAgICAgICAvLyBFaXRoZXIgbnVtYmVycyBvciBzdHJpbmdzIGFyZSBhY2NlcHRlZC4gRXhwb25lbnQgbm90YXRpb24gaXMgYWxzbyBhY2NlcHRlZC5cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkRPVUJMRTpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZMT0FUOlxuICAgICAgICAgICAgaWYgKGpzb24gPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuMDtcbiAgICAgICAgICAgIGlmIChqc29uID09PSBcIk5hTlwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIuTmFOO1xuICAgICAgICAgICAgaWYgKGpzb24gPT09IFwiSW5maW5pdHlcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgICAgaWYgKGpzb24gPT09IFwiLUluZmluaXR5XCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICAgICAgICAgIGlmIChqc29uID09PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgLy8gZW1wdHkgc3RyaW5nIGlzIG5vdCBhIG51bWJlclxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBqc29uID09IFwic3RyaW5nXCIgJiYganNvbi50cmltKCkubGVuZ3RoICE9PSBqc29uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIC8vIGV4dHJhIHdoaXRlc3BhY2VcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YganNvbiAhPSBcInN0cmluZ1wiICYmIHR5cGVvZiBqc29uICE9IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGZsb2F0ID0gTnVtYmVyKGpzb24pO1xuICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTihmbG9hdCkpIHtcbiAgICAgICAgICAgICAgICAvLyBub3QgYSBudW1iZXJcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGZsb2F0KSkge1xuICAgICAgICAgICAgICAgIC8vIGluZmluaXR5IGFuZCAtaW5maW5pdHkgYXJlIGhhbmRsZWQgYnkgc3RyaW5nIHJlcHJlc2VudGF0aW9uIGFib3ZlLCBzbyB0aGlzIGlzIGFuIGVycm9yXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PSBTY2FsYXJUeXBlLkZMT0FUKVxuICAgICAgICAgICAgICAgIGFzc2VydEZsb2F0MzIoZmxvYXQpO1xuICAgICAgICAgICAgcmV0dXJuIGZsb2F0O1xuICAgICAgICAvLyBpbnQzMiwgZml4ZWQzMiwgdWludDMyOiBKU09OIHZhbHVlIHdpbGwgYmUgYSBkZWNpbWFsIG51bWJlci4gRWl0aGVyIG51bWJlcnMgb3Igc3RyaW5ncyBhcmUgYWNjZXB0ZWQuXG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVEMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TRklYRUQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNJTlQzMjpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQzMjpcbiAgICAgICAgICAgIGlmIChqc29uID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgbGV0IGludDMyO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBqc29uID09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgaW50MzIgPSBqc29uO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGpzb24gPT0gXCJzdHJpbmdcIiAmJiBqc29uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoanNvbi50cmltKCkubGVuZ3RoID09PSBqc29uLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgaW50MzIgPSBOdW1iZXIoanNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW50MzIgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGlmICh0eXBlID09IFNjYWxhclR5cGUuVUlOVDMyKVxuICAgICAgICAgICAgICAgIGFzc2VydFVJbnQzMihpbnQzMik7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYXNzZXJ0SW50MzIoaW50MzIpO1xuICAgICAgICAgICAgcmV0dXJuIGludDMyO1xuICAgICAgICAvLyBpbnQ2NCwgZml4ZWQ2NCwgdWludDY0OiBKU09OIHZhbHVlIHdpbGwgYmUgYSBkZWNpbWFsIHN0cmluZy4gRWl0aGVyIG51bWJlcnMgb3Igc3RyaW5ncyBhcmUgYWNjZXB0ZWQuXG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDY0OlxuICAgICAgICAgICAgaWYgKGpzb24gPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvSW50NjQuemVybztcbiAgICAgICAgICAgIGlmICh0eXBlb2YganNvbiAhPSBcIm51bWJlclwiICYmIHR5cGVvZiBqc29uICE9IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjb25zdCBsb25nID0gcHJvdG9JbnQ2NC5wYXJzZShqc29uKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvc3RyaWN0LWJvb2xlYW4tZXhwcmVzc2lvbnNcbiAgICAgICAgICAgIHJldHVybiBsb25nVHlwZSA/IGxvbmcudG9TdHJpbmcoKSA6IGxvbmc7XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuVUlOVDY0OlxuICAgICAgICAgICAgaWYgKGpzb24gPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3RvSW50NjQuemVybztcbiAgICAgICAgICAgIGlmICh0eXBlb2YganNvbiAhPSBcIm51bWJlclwiICYmIHR5cGVvZiBqc29uICE9IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjb25zdCB1TG9uZyA9IHByb3RvSW50NjQudVBhcnNlKGpzb24pO1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9zdHJpY3QtYm9vbGVhbi1leHByZXNzaW9uc1xuICAgICAgICAgICAgcmV0dXJuIGxvbmdUeXBlID8gdUxvbmcudG9TdHJpbmcoKSA6IHVMb25nO1xuICAgICAgICAvLyBib29sOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQk9PTDpcbiAgICAgICAgICAgIGlmIChqc29uID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YganNvbiAhPT0gXCJib29sZWFuXCIpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICByZXR1cm4ganNvbjtcbiAgICAgICAgLy8gc3RyaW5nOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU1RSSU5HOlxuICAgICAgICAgICAgaWYgKGpzb24gPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGpzb24gIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEEgc3RyaW5nIG11c3QgYWx3YXlzIGNvbnRhaW4gVVRGLTggZW5jb2RlZCBvciA3LWJpdCBBU0NJSS5cbiAgICAgICAgICAgIC8vIFdlIHZhbGlkYXRlIHdpdGggZW5jb2RlVVJJQ29tcG9uZW50LCB3aGljaCBhcHBlYXJzIHRvIGJlIHRoZSBmYXN0ZXN0IHdpZGVseSBhdmFpbGFibGUgb3B0aW9uLlxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoanNvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgVVRGOFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBqc29uO1xuICAgICAgICAvLyBieXRlczogSlNPTiB2YWx1ZSB3aWxsIGJlIHRoZSBkYXRhIGVuY29kZWQgYXMgYSBzdHJpbmcgdXNpbmcgc3RhbmRhcmQgYmFzZTY0IGVuY29kaW5nIHdpdGggcGFkZGluZ3MuXG4gICAgICAgIC8vIEVpdGhlciBzdGFuZGFyZCBvciBVUkwtc2FmZSBiYXNlNjQgZW5jb2Rpbmcgd2l0aC93aXRob3V0IHBhZGRpbmdzIGFyZSBhY2NlcHRlZC5cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJZVEVTOlxuICAgICAgICAgICAgaWYgKGpzb24gPT09IG51bGwgfHwganNvbiA9PT0gXCJcIilcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGpzb24gIT09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICByZXR1cm4gcHJvdG9CYXNlNjQuZGVjKGpzb24pO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbn1cbmZ1bmN0aW9uIHJlYWRFbnVtKHR5cGUsIGpzb24sIGlnbm9yZVVua25vd25GaWVsZHMpIHtcbiAgICBpZiAoanNvbiA9PT0gbnVsbCkge1xuICAgICAgICAvLyBwcm90bzMgcmVxdWlyZXMgMCB0byBiZSBkZWZhdWx0IHZhbHVlIGZvciBhbGwgZW51bXNcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvc3dpdGNoLWV4aGF1c3RpdmVuZXNzLWNoZWNrXG4gICAgc3dpdGNoICh0eXBlb2YganNvbikge1xuICAgICAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihqc29uKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBqc29uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJzdHJpbmdcIjpcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdHlwZS5maW5kTmFtZShqc29uKTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW51bGxpc2gtY29hbGVzY2luZ1xuICAgICAgICAgICAgaWYgKHZhbHVlIHx8IGlnbm9yZVVua25vd25GaWVsZHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLm5vO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGRlY29kZSBlbnVtICR7dHlwZS50eXBlTmFtZX0gZnJvbSBKU09OOiAke2RlYnVnSnNvblZhbHVlKGpzb24pfWApO1xufVxuZnVuY3Rpb24gd3JpdGVFbnVtKHR5cGUsIHZhbHVlLCBlbWl0SW50cmluc2ljRGVmYXVsdCwgZW51bUFzSW50ZWdlcikge1xuICAgIHZhciBfYTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSA9PT0gMCAmJiAhZW1pdEludHJpbnNpY0RlZmF1bHQpIHtcbiAgICAgICAgLy8gcHJvdG8zIHJlcXVpcmVzIDAgdG8gYmUgZGVmYXVsdCB2YWx1ZSBmb3IgYWxsIGVudW1zXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChlbnVtQXNJbnRlZ2VyKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUudHlwZU5hbWUgPT0gXCJnb29nbGUucHJvdG9idWYuTnVsbFZhbHVlXCIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHZhbCA9IHR5cGUuZmluZE51bWJlcih2YWx1ZSk7XG4gICAgcmV0dXJuIChfYSA9IHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbC5uYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB2YWx1ZTsgLy8gaWYgd2UgZG9uJ3Qga25vdyB0aGUgZW51bSB2YWx1ZSwganVzdCByZXR1cm4gdGhlIG51bWJlclxufVxuZnVuY3Rpb24gd3JpdGVTY2FsYXIodHlwZSwgdmFsdWUsIGVtaXRJbnRyaW5zaWNEZWZhdWx0KSB7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIC8vIGludDMyLCBmaXhlZDMyLCB1aW50MzI6IEpTT04gdmFsdWUgd2lsbCBiZSBhIGRlY2ltYWwgbnVtYmVyLiBFaXRoZXIgbnVtYmVycyBvciBzdHJpbmdzIGFyZSBhY2NlcHRlZC5cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLklOVDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0ZJWEVEMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5TSU5UMzI6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5GSVhFRDMyOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuVUlOVDMyOlxuICAgICAgICAgICAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPSAwIHx8IGVtaXRJbnRyaW5zaWNEZWZhdWx0ID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgIC8vIGZsb2F0LCBkb3VibGU6IEpTT04gdmFsdWUgd2lsbCBiZSBhIG51bWJlciBvciBvbmUgb2YgdGhlIHNwZWNpYWwgc3RyaW5nIHZhbHVlcyBcIk5hTlwiLCBcIkluZmluaXR5XCIsIGFuZCBcIi1JbmZpbml0eVwiLlxuICAgICAgICAvLyBFaXRoZXIgbnVtYmVycyBvciBzdHJpbmdzIGFyZSBhY2NlcHRlZC4gRXhwb25lbnQgbm90YXRpb24gaXMgYWxzbyBhY2NlcHRlZC5cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZMT0FUOlxuICAgICAgICAvLyBhc3NlcnRGbG9hdDMyKHZhbHVlKTtcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkRPVUJMRTogLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1mYWxsdGhyb3VnaFxuICAgICAgICAgICAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PSBcIm51bWJlclwiKTtcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4odmFsdWUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIk5hTlwiO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSW5maW5pdHlcIjtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIi1JbmZpbml0eVwiO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSAwIHx8IGVtaXRJbnRyaW5zaWNEZWZhdWx0ID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgIC8vIHN0cmluZzpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNUUklORzpcbiAgICAgICAgICAgIGFzc2VydCh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIik7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUubGVuZ3RoID4gMCB8fCBlbWl0SW50cmluc2ljRGVmYXVsdCA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgICAgICAvLyBib29sOlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuQk9PTDpcbiAgICAgICAgICAgIGFzc2VydCh0eXBlb2YgdmFsdWUgPT0gXCJib29sZWFuXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlIHx8IGVtaXRJbnRyaW5zaWNEZWZhdWx0ID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgIC8vIEpTT04gdmFsdWUgd2lsbCBiZSBhIGRlY2ltYWwgc3RyaW5nLiBFaXRoZXIgbnVtYmVycyBvciBzdHJpbmdzIGFyZSBhY2NlcHRlZC5cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlVJTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkZJWEVENjQ6XG4gICAgICAgIGNhc2UgU2NhbGFyVHlwZS5JTlQ2NDpcbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLlNGSVhFRDY0OlxuICAgICAgICBjYXNlIFNjYWxhclR5cGUuU0lOVDY0OlxuICAgICAgICAgICAgYXNzZXJ0KHR5cGVvZiB2YWx1ZSA9PSBcImJpZ2ludFwiIHx8XG4gICAgICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT0gXCJudW1iZXJcIik7XG4gICAgICAgICAgICAvLyBXZSB1c2UgaW1wbGljaXQgY29udmVyc2lvbiB3aXRoIGB2YWx1ZSAhPSAwYCB0byBjYXRjaCBib3RoIDBuIGFuZCBcIjBcIlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHMtY29tbWVudFxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgcmV0dXJuIGVtaXRJbnRyaW5zaWNEZWZhdWx0IHx8IHZhbHVlICE9IDBcbiAgICAgICAgICAgICAgICA/IHZhbHVlLnRvU3RyaW5nKDEwKVxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAvLyBieXRlczogSlNPTiB2YWx1ZSB3aWxsIGJlIHRoZSBkYXRhIGVuY29kZWQgYXMgYSBzdHJpbmcgdXNpbmcgc3RhbmRhcmQgYmFzZTY0IGVuY29kaW5nIHdpdGggcGFkZGluZ3MuXG4gICAgICAgIC8vIEVpdGhlciBzdGFuZGFyZCBvciBVUkwtc2FmZSBiYXNlNjQgZW5jb2Rpbmcgd2l0aC93aXRob3V0IHBhZGRpbmdzIGFyZSBhY2NlcHRlZC5cbiAgICAgICAgY2FzZSBTY2FsYXJUeXBlLkJZVEVTOlxuICAgICAgICAgICAgYXNzZXJ0KHZhbHVlIGluc3RhbmNlb2YgVWludDhBcnJheSk7XG4gICAgICAgICAgICByZXR1cm4gZW1pdEludHJpbnNpY0RlZmF1bHQgfHwgdmFsdWUuYnl0ZUxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IHByb3RvQmFzZTY0LmVuYyh2YWx1ZSlcbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IHdyYXBGaWVsZCB9IGZyb20gXCIuL2ZpZWxkLXdyYXBwZXIuanNcIjtcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCIuL2Fzc2VydC5qc1wiO1xuaW1wb3J0IHsgbWFrZUpzb25Gb3JtYXRDb21tb24gfSBmcm9tIFwiLi9qc29uLWZvcm1hdC1jb21tb24uanNcIjtcbi8qIGVzbGludC1kaXNhYmxlIG5vLWNhc2UtZGVjbGFyYXRpb25zLCBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtcGx1cy1vcGVyYW5kcyxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtcmV0dXJuLEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudCxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGwsQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnQgKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlSnNvbkZvcm1hdFByb3RvMygpIHtcbiAgICByZXR1cm4gbWFrZUpzb25Gb3JtYXRDb21tb24oKHdyaXRlRW51bSwgd3JpdGVTY2FsYXIpID0+IHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHdyaXRlRmllbGQoZmllbGQsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoZmllbGQua2luZCA9PSBcIm1hcFwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QganNvbk9iaiA9IHt9O1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoZmllbGQuVi5raW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2VudHJ5S2V5LCBlbnRyeVZhbHVlXSBvZiBPYmplY3QuZW50cmllcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSB3cml0ZVNjYWxhcihmaWVsZC5WLlQsIGVudHJ5VmFsdWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydCh2YWwgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbk9ialtlbnRyeUtleS50b1N0cmluZygpXSA9IHZhbDsgLy8gSlNPTiBzdGFuZGFyZCBhbGxvd3Mgb25seSAoZG91YmxlIHF1b3RlZCkgc3RyaW5nIGFzIHByb3BlcnR5IGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtlbnRyeUtleSwgZW50cnlWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSlNPTiBzdGFuZGFyZCBhbGxvd3Mgb25seSAoZG91YmxlIHF1b3RlZCkgc3RyaW5nIGFzIHByb3BlcnR5IGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25PYmpbZW50cnlLZXkudG9TdHJpbmcoKV0gPSBlbnRyeVZhbHVlLnRvSnNvbihvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW51bVR5cGUgPSBmaWVsZC5WLlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtlbnRyeUtleSwgZW50cnlWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KGVudHJ5VmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgZW50cnlWYWx1ZSA9PSBcIm51bWJlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSB3cml0ZUVudW0oZW51bVR5cGUsIGVudHJ5VmFsdWUsIHRydWUsIG9wdGlvbnMuZW51bUFzSW50ZWdlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KHZhbCAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uT2JqW2VudHJ5S2V5LnRvU3RyaW5nKCldID0gdmFsOyAvLyBKU09OIHN0YW5kYXJkIGFsbG93cyBvbmx5IChkb3VibGUgcXVvdGVkKSBzdHJpbmcgYXMgcHJvcGVydHkga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZW1pdERlZmF1bHRWYWx1ZXMgfHwgT2JqZWN0LmtleXMoanNvbk9iaikubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA/IGpzb25PYmpcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChmaWVsZC5yZXBlYXRlZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGpzb25BcnIgPSBbXTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZpZWxkLmtpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25BcnIucHVzaCh3cml0ZVNjYWxhcihmaWVsZC5ULCB2YWx1ZVtpXSwgdHJ1ZSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbkFyci5wdXNoKHdyaXRlRW51bShmaWVsZC5ULCB2YWx1ZVtpXSwgdHJ1ZSwgb3B0aW9ucy5lbnVtQXNJbnRlZ2VyKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uQXJyLnB1c2god3JhcEZpZWxkKGZpZWxkLlQsIHZhbHVlW2ldKS50b0pzb24ob3B0aW9ucykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmVtaXREZWZhdWx0VmFsdWVzIHx8IGpzb25BcnIubGVuZ3RoID4gMFxuICAgICAgICAgICAgICAgICAgICA/IGpzb25BcnJcbiAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZpZWxkLmtpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcInNjYWxhclwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdyaXRlU2NhbGFyKGZpZWxkLlQsIHZhbHVlLCAhIWZpZWxkLm9uZW9mIHx8IGZpZWxkLm9wdCB8fCBvcHRpb25zLmVtaXREZWZhdWx0VmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3cml0ZUVudW0oZmllbGQuVCwgdmFsdWUsICEhZmllbGQub25lb2YgfHwgZmllbGQub3B0IHx8IG9wdGlvbnMuZW1pdERlZmF1bHRWYWx1ZXMsIG9wdGlvbnMuZW51bUFzSW50ZWdlcik7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gd3JhcEZpZWxkKGZpZWxkLlQsIHZhbHVlKS50b0pzb24ob3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IHNldEVudW1UeXBlIH0gZnJvbSBcIi4vZW51bS5qc1wiO1xuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCIuLi9tZXNzYWdlLmpzXCI7XG5pbXBvcnQgeyBTY2FsYXJUeXBlIH0gZnJvbSBcIi4uL2ZpZWxkLmpzXCI7XG5pbXBvcnQgeyBzY2FsYXJFcXVhbHMgfSBmcm9tIFwiLi9zY2FsYXJzLmpzXCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudCxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3MsQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1yZXR1cm4sQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudCxuby1jYXNlLWRlY2xhcmF0aW9ucyAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VVdGlsQ29tbW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHNldEVudW1UeXBlLFxuICAgICAgICBpbml0UGFydGlhbChzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAgICAgaWYgKHNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHRhcmdldC5nZXRUeXBlKCk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IG1lbWJlciBvZiB0eXBlLmZpZWxkcy5ieU1lbWJlcigpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxOYW1lID0gbWVtYmVyLmxvY2FsTmFtZSwgdCA9IHRhcmdldCwgcyA9IHNvdXJjZTtcbiAgICAgICAgICAgICAgICBpZiAoc1tsb2NhbE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHN3aXRjaCAobWVtYmVyLmtpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm9uZW9mXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzayA9IHNbbG9jYWxOYW1lXS5jYXNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNrID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZUZpZWxkID0gbWVtYmVyLmZpbmRGaWVsZChzayk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsID0gc1tsb2NhbE5hbWVdLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZUZpZWxkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlRmllbGQua2luZCA9PSBcIm1lc3NhZ2VcIiAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICEodmFsIGluc3RhbmNlb2Ygc291cmNlRmllbGQuVCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwgPSBuZXcgc291cmNlRmllbGQuVCh2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc291cmNlRmllbGQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VGaWVsZC5raW5kID09PSBcInNjYWxhclwiICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlRmllbGQuVCA9PT0gU2NhbGFyVHlwZS5CWVRFUykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHRvVThBcnIodmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRbbG9jYWxOYW1lXSA9IHsgY2FzZTogc2ssIHZhbHVlOiB2YWwgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29weSA9IHNbbG9jYWxOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZW1iZXIuVCA9PT0gU2NhbGFyVHlwZS5CWVRFUykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHkgPSBtZW1iZXIucmVwZWF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBjb3B5Lm1hcCh0b1U4QXJyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRvVThBcnIoY29weSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0W2xvY2FsTmFtZV0gPSBjb3B5O1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtYXBcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAobWVtYmVyLlYua2luZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVtYmVyLlYuVCA9PT0gU2NhbGFyVHlwZS5CWVRFUykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoc1tsb2NhbE5hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRbbG9jYWxOYW1lXVtrXSA9IHRvVThBcnIodik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRbbG9jYWxOYW1lXSwgc1tsb2NhbE5hbWVdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlVHlwZSA9IG1lbWJlci5WLlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgayBvZiBPYmplY3Qua2V5cyhzW2xvY2FsTmFtZV0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsID0gc1tsb2NhbE5hbWVdW2tdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXNzYWdlVHlwZS5maWVsZFdyYXBwZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBvbmx5IHRha2UgcGFydGlhbCBpbnB1dCBmb3IgbWVzc2FnZXMgdGhhdCBhcmUgbm90IGEgd3JhcHBlciB0eXBlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvciB0aG9zZSBtZXNzYWdlcywgd2UgcmVjdXJzaXZlbHkgbm9ybWFsaXplIHRoZSBwYXJ0aWFsIGlucHV0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IG5ldyBtZXNzYWdlVHlwZSh2YWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdFtsb2NhbE5hbWVdW2tdID0gdmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtdCA9IG1lbWJlci5UO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lbWJlci5yZXBlYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRbbG9jYWxOYW1lXSA9IHNbbG9jYWxOYW1lXS5tYXAoKHZhbCkgPT4gdmFsIGluc3RhbmNlb2YgbXQgPyB2YWwgOiBuZXcgbXQodmFsKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzW2xvY2FsTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IHNbbG9jYWxOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobXQuZmllbGRXcmFwcGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuJ3QgdXNlIEJ5dGVzVmFsdWUudHlwZU5hbWUgYXMgdGhhdCB3aWxsIGNyZWF0ZSBhIGNpcmN1bGFyIGltcG9ydFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdC50eXBlTmFtZSA9PT0gXCJnb29nbGUucHJvdG9idWYuQnl0ZXNWYWx1ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0W2xvY2FsTmFtZV0gPSB0b1U4QXJyKHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0W2xvY2FsTmFtZV0gPSB2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRbbG9jYWxOYW1lXSA9IHZhbCBpbnN0YW5jZW9mIG10ID8gdmFsIDogbmV3IG10KHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlcXVhbHModHlwZSwgYSwgYikge1xuICAgICAgICAgICAgaWYgKGEgPT09IGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYSB8fCAhYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0eXBlLmZpZWxkcy5ieU1lbWJlcigpLmV2ZXJ5KChtKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmEgPSBhW20ubG9jYWxOYW1lXTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YiA9IGJbbS5sb2NhbE5hbWVdO1xuICAgICAgICAgICAgICAgIGlmIChtLnJlcGVhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2YS5sZW5ndGggIT09IHZiLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvc3dpdGNoLWV4aGF1c3RpdmVuZXNzLWNoZWNrIC0tIHJlcGVhdGVkIGZpZWxkcyBhcmUgbmV2ZXIgXCJtYXBcIlxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG0ua2luZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmEuZXZlcnkoKGEsIGkpID0+IG0uVC5lcXVhbHMoYSwgdmJbaV0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmEuZXZlcnkoKGEsIGkpID0+IHNjYWxhckVxdWFscyhtLlQsIGEsIHZiW2ldKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YS5ldmVyeSgoYSwgaSkgPT4gc2NhbGFyRXF1YWxzKFNjYWxhclR5cGUuSU5UMzIsIGEsIHZiW2ldKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGByZXBlYXRlZCBjYW5ub3QgY29udGFpbiAke20ua2luZH1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoIChtLmtpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1lc3NhZ2VcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLlQuZXF1YWxzKHZhLCB2Yik7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NhbGFyRXF1YWxzKFNjYWxhclR5cGUuSU5UMzIsIHZhLCB2Yik7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY2FsYXJFcXVhbHMobS5ULCB2YSwgdmIpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwib25lb2ZcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YS5jYXNlICE9PSB2Yi5jYXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG0uZmluZEZpZWxkKHZhLmNhc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9zd2l0Y2gtZXhoYXVzdGl2ZW5lc3MtY2hlY2sgLS0gb25lb2YgZmllbGRzIGFyZSBuZXZlciBcIm1hcFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHMua2luZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLlQuZXF1YWxzKHZhLnZhbHVlLCB2Yi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjYWxhckVxdWFscyhTY2FsYXJUeXBlLklOVDMyLCB2YS52YWx1ZSwgdmIudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjYWxhckVxdWFscyhzLlQsIHZhLnZhbHVlLCB2Yi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG9uZW9mIGNhbm5vdCBjb250YWluICR7cy5raW5kfWApO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWFwXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModmEpLmNvbmNhdChPYmplY3Qua2V5cyh2YikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChtLlYua2luZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VUeXBlID0gbS5WLlQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXlzLmV2ZXJ5KChrKSA9PiBtZXNzYWdlVHlwZS5lcXVhbHModmFba10sIHZiW2tdKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleXMuZXZlcnkoKGspID0+IHNjYWxhckVxdWFscyhTY2FsYXJUeXBlLklOVDMyLCB2YVtrXSwgdmJba10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNjYWxhclR5cGUgPSBtLlYuVDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGtleXMuZXZlcnkoKGspID0+IHNjYWxhckVxdWFscyhzY2FsYXJUeXBlLCB2YVtrXSwgdmJba10pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBjbG9uZShtZXNzYWdlKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5nZXRUeXBlKCksIHRhcmdldCA9IG5ldyB0eXBlKCksIGFueSA9IHRhcmdldDtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWVtYmVyIG9mIHR5cGUuZmllbGRzLmJ5TWVtYmVyKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBtZXNzYWdlW21lbWJlci5sb2NhbE5hbWVdO1xuICAgICAgICAgICAgICAgIGxldCBjb3B5O1xuICAgICAgICAgICAgICAgIGlmIChtZW1iZXIucmVwZWF0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29weSA9IHNvdXJjZS5tYXAoY2xvbmVTaW5ndWxhckZpZWxkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAobWVtYmVyLmtpbmQgPT0gXCJtYXBcIikge1xuICAgICAgICAgICAgICAgICAgICBjb3B5ID0gYW55W21lbWJlci5sb2NhbE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZdIG9mIE9iamVjdC5lbnRyaWVzKHNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvcHlba2V5XSA9IGNsb25lU2luZ3VsYXJGaWVsZCh2KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtZW1iZXIua2luZCA9PSBcIm9uZW9mXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZiA9IG1lbWJlci5maW5kRmllbGQoc291cmNlLmNhc2UpO1xuICAgICAgICAgICAgICAgICAgICBjb3B5ID0gZlxuICAgICAgICAgICAgICAgICAgICAgICAgPyB7IGNhc2U6IHNvdXJjZS5jYXNlLCB2YWx1ZTogY2xvbmVTaW5ndWxhckZpZWxkKHNvdXJjZS52YWx1ZSkgfVxuICAgICAgICAgICAgICAgICAgICAgICAgOiB7IGNhc2U6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29weSA9IGNsb25lU2luZ3VsYXJGaWVsZChzb3VyY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhbnlbbWVtYmVyLmxvY2FsTmFtZV0gPSBjb3B5O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLy8gY2xvbmUgYSBzaW5nbGUgZmllbGQgdmFsdWUgLSBpLmUuIHRoZSBlbGVtZW50IHR5cGUgb2YgcmVwZWF0ZWQgZmllbGRzLCB0aGUgdmFsdWUgdHlwZSBvZiBtYXBzXG5mdW5jdGlvbiBjbG9uZVNpbmd1bGFyRmllbGQodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1lc3NhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLmNsb25lKCk7XG4gICAgfVxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgY29uc3QgYyA9IG5ldyBVaW50OEFycmF5KHZhbHVlLmJ5dGVMZW5ndGgpO1xuICAgICAgICBjLnNldCh2YWx1ZSk7XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59XG4vLyBjb252ZXJ0cyBhbnkgQXJyYXlMaWtlPG51bWJlcj4gdG8gVWludDhBcnJheSBpZiBuZWNlc3NhcnkuXG5mdW5jdGlvbiB0b1U4QXJyKGlucHV0KSB7XG4gICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSA/IGlucHV0IDogbmV3IFVpbnQ4QXJyYXkoaW5wdXQpO1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjMgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5leHBvcnQgY2xhc3MgSW50ZXJuYWxGaWVsZExpc3Qge1xuICAgIGNvbnN0cnVjdG9yKGZpZWxkcywgbm9ybWFsaXplcikge1xuICAgICAgICB0aGlzLl9maWVsZHMgPSBmaWVsZHM7XG4gICAgICAgIHRoaXMuX25vcm1hbGl6ZXIgPSBub3JtYWxpemVyO1xuICAgIH1cbiAgICBmaW5kSnNvbk5hbWUoanNvbk5hbWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLmpzb25OYW1lcykge1xuICAgICAgICAgICAgY29uc3QgdCA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBmIG9mIHRoaXMubGlzdCgpKSB7XG4gICAgICAgICAgICAgICAgdFtmLmpzb25OYW1lXSA9IHRbZi5uYW1lXSA9IGY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmpzb25OYW1lcyA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuanNvbk5hbWVzW2pzb25OYW1lXTtcbiAgICB9XG4gICAgZmluZChmaWVsZE5vKSB7XG4gICAgICAgIGlmICghdGhpcy5udW1iZXJzKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGYgb2YgdGhpcy5saXN0KCkpIHtcbiAgICAgICAgICAgICAgICB0W2Yubm9dID0gZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubnVtYmVycyA9IHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubnVtYmVyc1tmaWVsZE5vXTtcbiAgICB9XG4gICAgbGlzdCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFsbCkge1xuICAgICAgICAgICAgdGhpcy5hbGwgPSB0aGlzLl9ub3JtYWxpemVyKHRoaXMuX2ZpZWxkcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYWxsO1xuICAgIH1cbiAgICBieU51bWJlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLm51bWJlcnNBc2MpIHtcbiAgICAgICAgICAgIHRoaXMubnVtYmVyc0FzYyA9IHRoaXMubGlzdCgpXG4gICAgICAgICAgICAgICAgLmNvbmNhdCgpXG4gICAgICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IGEubm8gLSBiLm5vKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5udW1iZXJzQXNjO1xuICAgIH1cbiAgICBieU1lbWJlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1lbWJlcnMpIHtcbiAgICAgICAgICAgIHRoaXMubWVtYmVycyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgYSA9IHRoaXMubWVtYmVycztcbiAgICAgICAgICAgIGxldCBvO1xuICAgICAgICAgICAgZm9yIChjb25zdCBmIG9mIHRoaXMubGlzdCgpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGYub25lb2YpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYub25lb2YgIT09IG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBmLm9uZW9mO1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5wdXNoKG8pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhLnB1c2goZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm1lbWJlcnM7XG4gICAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjMgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIFJldHVybnMgdGhlIG5hbWUgb2YgYSBwcm90b2J1ZiBlbGVtZW50IGluIGdlbmVyYXRlZCBjb2RlLlxuICpcbiAqIEZpZWxkIG5hbWVzIC0gaW5jbHVkaW5nIG9uZW9mcyAtIGFyZSBjb252ZXJ0ZWQgdG8gbG93ZXJDYW1lbENhc2UuIEZvclxuICogbWVzc2FnZXMsIGVudW1lcmF0aW9ucyBhbmQgc2VydmljZXMsIHRoZSBwYWNrYWdlIG5hbWUgaXMgc3RyaXBwZWQgZnJvbVxuICogdGhlIHR5cGUgbmFtZS4gRm9yIG5lc3RlZCBtZXNzYWdlcyBhbmQgZW51bWVyYXRpb25zLCB0aGUgbmFtZXMgYXJlIGpvaW5lZFxuICogd2l0aCBhbiB1bmRlcnNjb3JlLiBGb3IgbWV0aG9kcywgdGhlIGZpcnN0IGNoYXJhY3RlciBpcyBtYWRlIGxvd2VyY2FzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsTmFtZShkZXNjKSB7XG4gICAgc3dpdGNoIChkZXNjLmtpbmQpIHtcbiAgICAgICAgY2FzZSBcImZpZWxkXCI6XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxGaWVsZE5hbWUoZGVzYy5uYW1lLCBkZXNjLm9uZW9mICE9PSB1bmRlZmluZWQpO1xuICAgICAgICBjYXNlIFwib25lb2ZcIjpcbiAgICAgICAgICAgIHJldHVybiBsb2NhbE9uZW9mTmFtZShkZXNjLm5hbWUpO1xuICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICBjYXNlIFwic2VydmljZVwiOiB7XG4gICAgICAgICAgICBjb25zdCBwa2cgPSBkZXNjLmZpbGUucHJvdG8ucGFja2FnZTtcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHBrZyA9PT0gdW5kZWZpbmVkID8gMCA6IHBrZy5sZW5ndGggKyAxO1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IGRlc2MudHlwZU5hbWUuc3Vic3RyaW5nKG9mZnNldCkucmVwbGFjZSgvXFwuL2csIFwiX1wiKTtcbiAgICAgICAgICAgIC8vIEZvciBzZXJ2aWNlcywgd2Ugb25seSBjYXJlIGFib3V0IHNhZmUgaWRlbnRpZmllcnMsIG5vdCBzYWZlIG9iamVjdCBwcm9wZXJ0aWVzLFxuICAgICAgICAgICAgLy8gYnV0IHdlIGhhdmUgc2hpcHBlZCB2MSB3aXRoIGEgYnVnIHRoYXQgcmVzcGVjdGVkIG9iamVjdCBwcm9wZXJ0aWVzLCBhbmQgd2VcbiAgICAgICAgICAgIC8vIGRvIG5vdCB3YW50IHRvIGludHJvZHVjZSBhIGJyZWFraW5nIGNoYW5nZSwgc28gd2UgY29udGludWUgdG8gZXNjYXBlIGZvclxuICAgICAgICAgICAgLy8gc2FmZSBvYmplY3QgcHJvcGVydGllcy5cbiAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vYnVmYnVpbGQvcHJvdG9idWYtZXMvcHVsbC8zOTFcbiAgICAgICAgICAgIHJldHVybiBzYWZlT2JqZWN0UHJvcGVydHkoc2FmZUlkZW50aWZpZXIobmFtZSkpO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJlbnVtX3ZhbHVlXCI6IHtcbiAgICAgICAgICAgIGNvbnN0IHNoYXJlZFByZWZpeCA9IGRlc2MucGFyZW50LnNoYXJlZFByZWZpeDtcbiAgICAgICAgICAgIGlmIChzaGFyZWRQcmVmaXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBkZXNjLm5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gZGVzYy5uYW1lLnN1YnN0cmluZyhzaGFyZWRQcmVmaXgubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBzYWZlT2JqZWN0UHJvcGVydHkobmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInJwY1wiOiB7XG4gICAgICAgICAgICBsZXQgbmFtZSA9IGRlc2MubmFtZTtcbiAgICAgICAgICAgIGlmIChuYW1lLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuYW1lID0gbmFtZVswXS50b0xvd2VyQ2FzZSgpICsgbmFtZS5zdWJzdHJpbmcoMSk7XG4gICAgICAgICAgICByZXR1cm4gc2FmZU9iamVjdFByb3BlcnR5KG5hbWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuYW1lIG9mIGEgZmllbGQgaW4gZ2VuZXJhdGVkIGNvZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbEZpZWxkTmFtZShwcm90b05hbWUsIGluT25lb2YpIHtcbiAgICBjb25zdCBuYW1lID0gcHJvdG9DYW1lbENhc2UocHJvdG9OYW1lKTtcbiAgICBpZiAoaW5PbmVvZikge1xuICAgICAgICAvLyBvbmVvZiBtZW1iZXIgbmFtZXMgYXJlIG5vdCBwcm9wZXJ0aWVzLCBidXQgdmFsdWVzIG9mIHRoZSBgY2FzZWAgcHJvcGVydHkuXG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICByZXR1cm4gc2FmZU9iamVjdFByb3BlcnR5KHNhZmVNZXNzYWdlUHJvcGVydHkobmFtZSkpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuYW1lIG9mIGEgb25lb2YgZ3JvdXAgaW4gZ2VuZXJhdGVkIGNvZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbE9uZW9mTmFtZShwcm90b05hbWUpIHtcbiAgICByZXR1cm4gbG9jYWxGaWVsZE5hbWUocHJvdG9OYW1lLCBmYWxzZSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIEpTT04gbmFtZSBmb3IgYSBwcm90b2J1ZiBmaWVsZCwgZXhhY3RseSBsaWtlIHByb3RvYyBkb2VzLlxuICovXG5leHBvcnQgY29uc3QgZmllbGRKc29uTmFtZSA9IHByb3RvQ2FtZWxDYXNlO1xuLyoqXG4gKiBGaW5kcyBhIHByZWZpeCBzaGFyZWQgYnkgZW51bSB2YWx1ZXMsIGZvciBleGFtcGxlIGBNWV9FTlVNX2AgZm9yXG4gKiBgZW51bSBNeUVudW0ge01ZX0VOVU1fQT0wOyBNWV9FTlVNX0I9MTt9YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRFbnVtU2hhcmVkUHJlZml4KGVudW1OYW1lLCB2YWx1ZU5hbWVzKSB7XG4gICAgY29uc3QgcHJlZml4ID0gY2FtZWxUb1NuYWtlQ2FzZShlbnVtTmFtZSkgKyBcIl9cIjtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdmFsdWVOYW1lcykge1xuICAgICAgICBpZiAoIW5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKHByZWZpeCkpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2hvcnROYW1lID0gbmFtZS5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCk7XG4gICAgICAgIGlmIChzaG9ydE5hbWUubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKC9eXFxkLy50ZXN0KHNob3J0TmFtZSkpIHtcbiAgICAgICAgICAgIC8vIGlkZW50aWZpZXJzIG11c3Qgbm90IHN0YXJ0IHdpdGggbnVtYmVyc1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJlZml4O1xufVxuLyoqXG4gKiBDb252ZXJ0cyBsb3dlckNhbWVsQ2FzZSBvciBVcHBlckNhbWVsQ2FzZSBpbnRvIGxvd2VyX3NuYWtlX2Nhc2UuXG4gKiBUaGlzIGlzIHVzZWQgdG8gZmluZCBzaGFyZWQgcHJlZml4ZXMgaW4gYW4gZW51bS5cbiAqL1xuZnVuY3Rpb24gY2FtZWxUb1NuYWtlQ2FzZShjYW1lbCkge1xuICAgIHJldHVybiAoY2FtZWwuc3Vic3RyaW5nKDAsIDEpICsgY2FtZWwuc3Vic3RyaW5nKDEpLnJlcGxhY2UoL1tBLVpdL2csIChjKSA9PiBcIl9cIiArIGMpKS50b0xvd2VyQ2FzZSgpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBzbmFrZV9jYXNlIHRvIHByb3RvQ2FtZWxDYXNlIGFjY29yZGluZyB0byB0aGUgY29udmVudGlvblxuICogdXNlZCBieSBwcm90b2MgdG8gY29udmVydCBhIGZpZWxkIG5hbWUgdG8gYSBKU09OIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIHByb3RvQ2FtZWxDYXNlKHNuYWtlQ2FzZSkge1xuICAgIGxldCBjYXBOZXh0ID0gZmFsc2U7XG4gICAgY29uc3QgYiA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25ha2VDYXNlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBjID0gc25ha2VDYXNlLmNoYXJBdChpKTtcbiAgICAgICAgc3dpdGNoIChjKSB7XG4gICAgICAgICAgICBjYXNlIFwiX1wiOlxuICAgICAgICAgICAgICAgIGNhcE5leHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIjBcIjpcbiAgICAgICAgICAgIGNhc2UgXCIxXCI6XG4gICAgICAgICAgICBjYXNlIFwiMlwiOlxuICAgICAgICAgICAgY2FzZSBcIjNcIjpcbiAgICAgICAgICAgIGNhc2UgXCI0XCI6XG4gICAgICAgICAgICBjYXNlIFwiNVwiOlxuICAgICAgICAgICAgY2FzZSBcIjZcIjpcbiAgICAgICAgICAgIGNhc2UgXCI3XCI6XG4gICAgICAgICAgICBjYXNlIFwiOFwiOlxuICAgICAgICAgICAgY2FzZSBcIjlcIjpcbiAgICAgICAgICAgICAgICBiLnB1c2goYyk7XG4gICAgICAgICAgICAgICAgY2FwTmV4dCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoY2FwTmV4dCkge1xuICAgICAgICAgICAgICAgICAgICBjYXBOZXh0ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGMgPSBjLnRvVXBwZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGIucHVzaChjKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYi5qb2luKFwiXCIpO1xufVxuLyoqXG4gKiBOYW1lcyB0aGF0IGNhbm5vdCBiZSB1c2VkIGZvciBpZGVudGlmaWVycywgc3VjaCBhcyBjbGFzcyBuYW1lcyxcbiAqIGJ1dCBfY2FuXyBiZSB1c2VkIGZvciBvYmplY3QgcHJvcGVydGllcy5cbiAqL1xuY29uc3QgcmVzZXJ2ZWRJZGVudGlmaWVycyA9IG5ldyBTZXQoW1xuICAgIC8vIEVDTUFTY3JpcHQgMjAxNSBrZXl3b3Jkc1xuICAgIFwiYnJlYWtcIixcbiAgICBcImNhc2VcIixcbiAgICBcImNhdGNoXCIsXG4gICAgXCJjbGFzc1wiLFxuICAgIFwiY29uc3RcIixcbiAgICBcImNvbnRpbnVlXCIsXG4gICAgXCJkZWJ1Z2dlclwiLFxuICAgIFwiZGVmYXVsdFwiLFxuICAgIFwiZGVsZXRlXCIsXG4gICAgXCJkb1wiLFxuICAgIFwiZWxzZVwiLFxuICAgIFwiZXhwb3J0XCIsXG4gICAgXCJleHRlbmRzXCIsXG4gICAgXCJmYWxzZVwiLFxuICAgIFwiZmluYWxseVwiLFxuICAgIFwiZm9yXCIsXG4gICAgXCJmdW5jdGlvblwiLFxuICAgIFwiaWZcIixcbiAgICBcImltcG9ydFwiLFxuICAgIFwiaW5cIixcbiAgICBcImluc3RhbmNlb2ZcIixcbiAgICBcIm5ld1wiLFxuICAgIFwibnVsbFwiLFxuICAgIFwicmV0dXJuXCIsXG4gICAgXCJzdXBlclwiLFxuICAgIFwic3dpdGNoXCIsXG4gICAgXCJ0aGlzXCIsXG4gICAgXCJ0aHJvd1wiLFxuICAgIFwidHJ1ZVwiLFxuICAgIFwidHJ5XCIsXG4gICAgXCJ0eXBlb2ZcIixcbiAgICBcInZhclwiLFxuICAgIFwidm9pZFwiLFxuICAgIFwid2hpbGVcIixcbiAgICBcIndpdGhcIixcbiAgICBcInlpZWxkXCIsXG4gICAgLy8gRUNNQVNjcmlwdCAyMDE1IGZ1dHVyZSByZXNlcnZlZCBrZXl3b3Jkc1xuICAgIFwiZW51bVwiLFxuICAgIFwiaW1wbGVtZW50c1wiLFxuICAgIFwiaW50ZXJmYWNlXCIsXG4gICAgXCJsZXRcIixcbiAgICBcInBhY2thZ2VcIixcbiAgICBcInByaXZhdGVcIixcbiAgICBcInByb3RlY3RlZFwiLFxuICAgIFwicHVibGljXCIsXG4gICAgXCJzdGF0aWNcIixcbiAgICAvLyBDbGFzcyBuYW1lIGNhbm5vdCBiZSAnT2JqZWN0JyB3aGVuIHRhcmdldGluZyBFUzUgd2l0aCBtb2R1bGUgQ29tbW9uSlNcbiAgICBcIk9iamVjdFwiLFxuICAgIC8vIFR5cGVTY3JpcHQga2V5d29yZHMgdGhhdCBjYW5ub3QgYmUgdXNlZCBmb3IgdHlwZXMgKGFzIG9wcG9zZWQgdG8gdmFyaWFibGVzKVxuICAgIFwiYmlnaW50XCIsXG4gICAgXCJudW1iZXJcIixcbiAgICBcImJvb2xlYW5cIixcbiAgICBcInN0cmluZ1wiLFxuICAgIFwib2JqZWN0XCIsXG4gICAgLy8gSWRlbnRpZmllcnMgcmVzZXJ2ZWQgZm9yIHRoZSBydW50aW1lLCBzbyB3ZSBjYW4gZ2VuZXJhdGUgbGVnaWJsZSBjb2RlXG4gICAgXCJnbG9iYWxUaGlzXCIsXG4gICAgXCJVaW50OEFycmF5XCIsXG4gICAgXCJQYXJ0aWFsXCIsXG5dKTtcbi8qKlxuICogTmFtZXMgdGhhdCBjYW5ub3QgYmUgdXNlZCBmb3Igb2JqZWN0IHByb3BlcnRpZXMgYmVjYXVzZSB0aGV5IGFyZSByZXNlcnZlZFxuICogYnkgYnVpbHQtaW4gSmF2YVNjcmlwdCBwcm9wZXJ0aWVzLlxuICovXG5jb25zdCByZXNlcnZlZE9iamVjdFByb3BlcnRpZXMgPSBuZXcgU2V0KFtcbiAgICAvLyBuYW1lcyByZXNlcnZlZCBieSBKYXZhU2NyaXB0XG4gICAgXCJjb25zdHJ1Y3RvclwiLFxuICAgIFwidG9TdHJpbmdcIixcbiAgICBcInRvSlNPTlwiLFxuICAgIFwidmFsdWVPZlwiLFxuXSk7XG4vKipcbiAqIE5hbWVzIHRoYXQgY2Fubm90IGJlIHVzZWQgZm9yIG9iamVjdCBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBhcmUgcmVzZXJ2ZWRcbiAqIGJ5IHRoZSBydW50aW1lLlxuICovXG5jb25zdCByZXNlcnZlZE1lc3NhZ2VQcm9wZXJ0aWVzID0gbmV3IFNldChbXG4gICAgLy8gbmFtZXMgcmVzZXJ2ZWQgYnkgdGhlIHJ1bnRpbWVcbiAgICBcImdldFR5cGVcIixcbiAgICBcImNsb25lXCIsXG4gICAgXCJlcXVhbHNcIixcbiAgICBcImZyb21CaW5hcnlcIixcbiAgICBcImZyb21Kc29uXCIsXG4gICAgXCJmcm9tSnNvblN0cmluZ1wiLFxuICAgIFwidG9CaW5hcnlcIixcbiAgICBcInRvSnNvblwiLFxuICAgIFwidG9Kc29uU3RyaW5nXCIsXG4gICAgLy8gbmFtZXMgcmVzZXJ2ZWQgYnkgdGhlIHJ1bnRpbWUgZm9yIHRoZSBmdXR1cmVcbiAgICBcInRvT2JqZWN0XCIsXG5dKTtcbmNvbnN0IGZhbGxiYWNrID0gKG5hbWUpID0+IGAke25hbWV9JGA7XG4vKipcbiAqIFdpbGwgd3JhcCBuYW1lcyB0aGF0IGFyZSBPYmplY3QgcHJvdG90eXBlIHByb3BlcnRpZXMgb3IgbmFtZXMgcmVzZXJ2ZWRcbiAqIGZvciBgTWVzc2FnZWBzLlxuICovXG5jb25zdCBzYWZlTWVzc2FnZVByb3BlcnR5ID0gKG5hbWUpID0+IHtcbiAgICBpZiAocmVzZXJ2ZWRNZXNzYWdlUHJvcGVydGllcy5oYXMobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbn07XG4vKipcbiAqIE5hbWVzIHRoYXQgY2Fubm90IGJlIHVzZWQgZm9yIG9iamVjdCBwcm9wZXJ0aWVzIGJlY2F1c2UgdGhleSBhcmUgcmVzZXJ2ZWRcbiAqIGJ5IGJ1aWx0LWluIEphdmFTY3JpcHQgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGNvbnN0IHNhZmVPYmplY3RQcm9wZXJ0eSA9IChuYW1lKSA9PiB7XG4gICAgaWYgKHJlc2VydmVkT2JqZWN0UHJvcGVydGllcy5oYXMobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbn07XG4vKipcbiAqIE5hbWVzIHRoYXQgY2FuIGJlIHVzZWQgZm9yIGlkZW50aWZpZXJzIG9yIGNsYXNzIHByb3BlcnRpZXNcbiAqL1xuZXhwb3J0IGNvbnN0IHNhZmVJZGVudGlmaWVyID0gKG5hbWUpID0+IHtcbiAgICBpZiAocmVzZXJ2ZWRJZGVudGlmaWVycy5oYXMobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbGxiYWNrKG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbn07XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IGxvY2FsT25lb2ZOYW1lIH0gZnJvbSBcIi4vbmFtZXMuanNcIjtcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCIuL2Fzc2VydC5qc1wiO1xuZXhwb3J0IGNsYXNzIEludGVybmFsT25lb2ZJbmZvIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIHRoaXMua2luZCA9IFwib25lb2ZcIjtcbiAgICAgICAgdGhpcy5yZXBlYXRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBhY2tlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm9wdCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlZmF1bHQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZmllbGRzID0gW107XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMubG9jYWxOYW1lID0gbG9jYWxPbmVvZk5hbWUobmFtZSk7XG4gICAgfVxuICAgIGFkZEZpZWxkKGZpZWxkKSB7XG4gICAgICAgIGFzc2VydChmaWVsZC5vbmVvZiA9PT0gdGhpcywgYGZpZWxkICR7ZmllbGQubmFtZX0gbm90IG9uZSBvZiAke3RoaXMubmFtZX1gKTtcbiAgICAgICAgdGhpcy5maWVsZHMucHVzaChmaWVsZCk7XG4gICAgfVxuICAgIGZpbmRGaWVsZChsb2NhbE5hbWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9sb29rdXApIHtcbiAgICAgICAgICAgIHRoaXMuX2xvb2t1cCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9va3VwW3RoaXMuZmllbGRzW2ldLmxvY2FsTmFtZV0gPSB0aGlzLmZpZWxkc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fbG9va3VwW2xvY2FsTmFtZV07XG4gICAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjMgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBtYWtlUHJvdG9SdW50aW1lIH0gZnJvbSBcIi4vcHJpdmF0ZS9wcm90by1ydW50aW1lLmpzXCI7XG5pbXBvcnQgeyBtYWtlQmluYXJ5Rm9ybWF0UHJvdG8zIH0gZnJvbSBcIi4vcHJpdmF0ZS9iaW5hcnktZm9ybWF0LXByb3RvMy5qc1wiO1xuaW1wb3J0IHsgbWFrZUpzb25Gb3JtYXRQcm90bzMgfSBmcm9tIFwiLi9wcml2YXRlL2pzb24tZm9ybWF0LXByb3RvMy5qc1wiO1xuaW1wb3J0IHsgbWFrZVV0aWxDb21tb24gfSBmcm9tIFwiLi9wcml2YXRlL3V0aWwtY29tbW9uLmpzXCI7XG5pbXBvcnQgeyBJbnRlcm5hbEZpZWxkTGlzdCB9IGZyb20gXCIuL3ByaXZhdGUvZmllbGQtbGlzdC5qc1wiO1xuaW1wb3J0IHsgc2NhbGFyRGVmYXVsdFZhbHVlIH0gZnJvbSBcIi4vcHJpdmF0ZS9zY2FsYXJzLmpzXCI7XG5pbXBvcnQgeyBMb25nVHlwZSwgU2NhbGFyVHlwZSB9IGZyb20gXCIuL2ZpZWxkLmpzXCI7XG5pbXBvcnQgeyBJbnRlcm5hbE9uZW9mSW5mbyB9IGZyb20gXCIuL3ByaXZhdGUvZmllbGQuanNcIjtcbmltcG9ydCB7IGxvY2FsRmllbGROYW1lLCBmaWVsZEpzb25OYW1lIH0gZnJvbSBcIi4vcHJpdmF0ZS9uYW1lcy5qc1wiO1xuLyoqXG4gKiBQcm92aWRlcyBmdW5jdGlvbmFsaXR5IGZvciBtZXNzYWdlcyBkZWZpbmVkIHdpdGggdGhlIHByb3RvMyBzeW50YXguXG4gKi9cbmV4cG9ydCBjb25zdCBwcm90bzMgPSBtYWtlUHJvdG9SdW50aW1lKFwicHJvdG8zXCIsIG1ha2VKc29uRm9ybWF0UHJvdG8zKCksIG1ha2VCaW5hcnlGb3JtYXRQcm90bzMoKSwgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBtYWtlVXRpbENvbW1vbigpKSwgeyBuZXdGaWVsZExpc3QoZmllbGRzKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW50ZXJuYWxGaWVsZExpc3QoZmllbGRzLCBub3JtYWxpemVGaWVsZEluZm9zUHJvdG8zKTtcbiAgICB9LFxuICAgIGluaXRGaWVsZHModGFyZ2V0KSB7XG4gICAgICAgIGZvciAoY29uc3QgbWVtYmVyIG9mIHRhcmdldC5nZXRUeXBlKCkuZmllbGRzLmJ5TWVtYmVyKCkpIHtcbiAgICAgICAgICAgIGlmIChtZW1iZXIub3B0KSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gbWVtYmVyLmxvY2FsTmFtZSwgdCA9IHRhcmdldDtcbiAgICAgICAgICAgIGlmIChtZW1iZXIucmVwZWF0ZWQpIHtcbiAgICAgICAgICAgICAgICB0W25hbWVdID0gW107XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKG1lbWJlci5raW5kKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm9uZW9mXCI6XG4gICAgICAgICAgICAgICAgICAgIHRbbmFtZV0gPSB7IGNhc2U6IHVuZGVmaW5lZCB9O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgICAgICB0W25hbWVdID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1hcFwiOlxuICAgICAgICAgICAgICAgICAgICB0W25hbWVdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgdFtuYW1lXSA9IHNjYWxhckRlZmF1bHRWYWx1ZShtZW1iZXIuVCwgbWVtYmVyLkwpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudFxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICAvLyBtZXNzYWdlIGZpZWxkcyBhcmUgYWx3YXlzIG9wdGlvbmFsIGluIHByb3RvM1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gfSkpO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnQsQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnQgKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUZpZWxkSW5mb3NQcm90bzMoZmllbGRJbmZvcykge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBjb25zdCByID0gW107XG4gICAgbGV0IG87XG4gICAgZm9yIChjb25zdCBmaWVsZCBvZiB0eXBlb2YgZmllbGRJbmZvcyA9PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBmaWVsZEluZm9zKClcbiAgICAgICAgOiBmaWVsZEluZm9zKSB7XG4gICAgICAgIGNvbnN0IGYgPSBmaWVsZDtcbiAgICAgICAgZi5sb2NhbE5hbWUgPSBsb2NhbEZpZWxkTmFtZShmaWVsZC5uYW1lLCBmaWVsZC5vbmVvZiAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgZi5qc29uTmFtZSA9IChfYSA9IGZpZWxkLmpzb25OYW1lKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmaWVsZEpzb25OYW1lKGZpZWxkLm5hbWUpO1xuICAgICAgICBmLnJlcGVhdGVkID0gKF9iID0gZmllbGQucmVwZWF0ZWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlO1xuICAgICAgICBpZiAoZmllbGQua2luZCA9PSBcInNjYWxhclwiKSB7XG4gICAgICAgICAgICBmLkwgPSAoX2MgPSBmaWVsZC5MKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBMb25nVHlwZS5CSUdJTlQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgZG8gbm90IHN1cmZhY2Ugb3B0aW9ucyBhdCB0aGlzIHRpbWVcbiAgICAgICAgLy8gZi5vcHRpb25zID0gZmllbGQub3B0aW9ucyA/PyBlbXB0eVJlYWRvbmx5T2JqZWN0O1xuICAgICAgICBpZiAoZmllbGQub25lb2YgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3Qgb29uYW1lID0gdHlwZW9mIGZpZWxkLm9uZW9mID09IFwic3RyaW5nXCIgPyBmaWVsZC5vbmVvZiA6IGZpZWxkLm9uZW9mLm5hbWU7XG4gICAgICAgICAgICBpZiAoIW8gfHwgby5uYW1lICE9IG9vbmFtZSkge1xuICAgICAgICAgICAgICAgIG8gPSBuZXcgSW50ZXJuYWxPbmVvZkluZm8ob29uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGYub25lb2YgPSBvO1xuICAgICAgICAgICAgby5hZGRGaWVsZChmKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBwcm90bzMgc3BlY2lmaWM6XG4gICAgICAgIGlmIChmaWVsZC5raW5kID09IFwibWVzc2FnZVwiKSB7XG4gICAgICAgICAgICBmLmRlbGltaXRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZyb20gdGhlIHByb3RvMyBsYW5ndWFnZSBndWlkZTpcbiAgICAgICAgLy8gPiBJbiBwcm90bzMsIHJlcGVhdGVkIGZpZWxkcyBvZiBzY2FsYXIgbnVtZXJpYyB0eXBlcyBhcmUgcGFja2VkIGJ5IGRlZmF1bHQuXG4gICAgICAgIC8vIFRoaXMgaW5mb3JtYXRpb24gaXMgaW5jb21wbGV0ZSAtIGFjY29yZGluZyB0byB0aGUgY29uZm9ybWFuY2UgdGVzdHMsIEJPT0xcbiAgICAgICAgLy8gYW5kIEVOVU0gYXJlIHBhY2tlZCBieSBkZWZhdWx0IGFzIHdlbGwuIFRoaXMgbWVhbnMgb25seSBTVFJJTkcgYW5kIEJZVEVTXG4gICAgICAgIC8vIGFyZSBub3QgcGFja2VkIGJ5IGRlZmF1bHQsIHdoaWNoIG1ha2VzIHNlbnNlIGJlY2F1c2UgdGhleSBhcmUgbGVuZ3RoLWRlbGltaXRlZC5cbiAgICAgICAgZi5wYWNrZWQgPVxuICAgICAgICAgICAgKF9kID0gZmllbGQucGFja2VkKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAoZmllbGQua2luZCA9PSBcImVudW1cIiB8fFxuICAgICAgICAgICAgICAgIChmaWVsZC5raW5kID09IFwic2NhbGFyXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgZmllbGQuVCAhPSBTY2FsYXJUeXBlLkJZVEVTICYmXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLlQgIT0gU2NhbGFyVHlwZS5TVFJJTkcpKTtcbiAgICAgICAgci5wdXNoKGYpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzIEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgU2NhbGFyVHlwZSB9IGZyb20gXCIuLi9maWVsZC5qc1wiO1xuaW1wb3J0IHsgbWFrZUJpbmFyeUZvcm1hdENvbW1vbiwgd3JpdGVNYXBFbnRyeSwgd3JpdGVNZXNzYWdlRmllbGQsIHdyaXRlUGFja2VkLCB3cml0ZVNjYWxhciwgfSBmcm9tIFwiLi9iaW5hcnktZm9ybWF0LWNvbW1vbi5qc1wiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1tZW1iZXItYWNjZXNzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50LCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnQsIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb24sIEB0eXBlc2NyaXB0LWVzbGludC9zdHJpY3QtYm9vbGVhbi1leHByZXNzaW9ucywgbm8tY2FzZS1kZWNsYXJhdGlvbnMsIHByZWZlci1jb25zdCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VCaW5hcnlGb3JtYXRQcm90bzIoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgbWFrZUJpbmFyeUZvcm1hdENvbW1vbigpKSwgeyB3cml0ZU1lc3NhZ2UobWVzc2FnZSwgd3JpdGVyLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gbWVzc2FnZS5nZXRUeXBlKCk7XG4gICAgICAgICAgICBsZXQgZmllbGQ7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAoZmllbGQgb2YgdHlwZS5maWVsZHMuYnlOdW1iZXIoKSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUsIC8vIHRoaXMgd2lsbCBiZSBvdXIgZmllbGQgdmFsdWUsIHdoZXRoZXIgaXQgaXMgbWVtYmVyIG9mIGEgb25lb2Ygb3Igbm90XG4gICAgICAgICAgICAgICAgICAgIHJlcGVhdGVkID0gZmllbGQucmVwZWF0ZWQsIGxvY2FsTmFtZSA9IGZpZWxkLmxvY2FsTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLm9uZW9mKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvbmVvZiA9IG1lc3NhZ2VbZmllbGQub25lb2YubG9jYWxOYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbmVvZi5jYXNlICE9PSBsb2NhbE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gZmllbGQgaXMgbm90IHNlbGVjdGVkLCBza2lwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG9uZW9mLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBtZXNzYWdlW2xvY2FsTmFtZV07XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbiBjb250cmFzdCB0byBwcm90bzMsIHdlIHJhaXNlIGFuIGVycm9yIGlmIGEgbm9uLW9wdGlvbmFsIChwcm90bzIgcmVxdWlyZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmaWVsZCBpcyBtaXNzaW5nIGEgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhZmllbGQub25lb2YgJiYgIWZpZWxkLm9wdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgY2Fubm90IGVuY29kZSBmaWVsZCAke3R5cGUudHlwZU5hbWV9LiR7ZmllbGQubmFtZX0gdG8gYmluYXJ5OiByZXF1aXJlZCBmaWVsZCBub3Qgc2V0YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmaWVsZC5raW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzY2FsYXJUeXBlID0gZmllbGQua2luZCA9PSBcImVudW1cIiA/IFNjYWxhclR5cGUuSU5UMzIgOiBmaWVsZC5UO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXBlYXRlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQucGFja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZVBhY2tlZCh3cml0ZXIsIHNjYWxhclR5cGUsIGZpZWxkLm5vLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZVNjYWxhcih3cml0ZXIsIHNjYWxhclR5cGUsIGZpZWxkLm5vLCBpdGVtLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIGNvbnRyYXN0IHRvIHByb3RvMywgd2UgZG8gbm90IHNraXAgaW50cmluc2ljIGRlZmF1bHQgdmFsdWVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhwbGljaXQgZGVmYXVsdCB2YWx1ZXMgYXJlIG5vdCBzcGVjaWFsIGNhc2VkIGVpdGhlci5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlU2NhbGFyKHdyaXRlciwgc2NhbGFyVHlwZSwgZmllbGQubm8sIHZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcGVhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiB2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3JpdGVNZXNzYWdlRmllbGQod3JpdGVyLCBvcHRpb25zLCBmaWVsZCwgaXRlbSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlTWVzc2FnZUZpZWxkKHdyaXRlciwgb3B0aW9ucywgZmllbGQsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWFwXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWxdIG9mIE9iamVjdC5lbnRyaWVzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZU1hcEVudHJ5KHdyaXRlciwgb3B0aW9ucywgZmllbGQsIGtleSwgdmFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGxldCBtID0gZmllbGRcbiAgICAgICAgICAgICAgICAgICAgPyBgY2Fubm90IGVuY29kZSBmaWVsZCAke3R5cGUudHlwZU5hbWV9LiR7ZmllbGQgPT09IG51bGwgfHwgZmllbGQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpZWxkLm5hbWV9IHRvIGJpbmFyeWBcbiAgICAgICAgICAgICAgICAgICAgOiBgY2Fubm90IGVuY29kZSBtZXNzYWdlICR7dHlwZS50eXBlTmFtZX0gdG8gYmluYXJ5YDtcbiAgICAgICAgICAgICAgICBsZXQgciA9IGUgaW5zdGFuY2VvZiBFcnJvciA/IGUubWVzc2FnZSA6IFN0cmluZyhlKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobSArIChyLmxlbmd0aCA+IDAgPyBgOiAke3J9YCA6IFwiXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChvcHRpb25zLndyaXRlVW5rbm93bkZpZWxkcykge1xuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVVbmtub3duRmllbGRzKG1lc3NhZ2UsIHdyaXRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgICAgICB9IH0pO1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjMgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyB3cmFwRmllbGQgfSBmcm9tIFwiLi9maWVsZC13cmFwcGVyLmpzXCI7XG5pbXBvcnQgeyBhc3NlcnQgfSBmcm9tIFwiLi9hc3NlcnQuanNcIjtcbmltcG9ydCB7IG1ha2VKc29uRm9ybWF0Q29tbW9uIH0gZnJvbSBcIi4vanNvbi1mb3JtYXQtY29tbW9uLmpzXCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1jYXNlLWRlY2xhcmF0aW9ucywgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXBsdXMtb3BlcmFuZHMsQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVybixAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnQsQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1jYWxsLEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50ICovXG5leHBvcnQgZnVuY3Rpb24gbWFrZUpzb25Gb3JtYXRQcm90bzIoKSB7XG4gICAgcmV0dXJuIG1ha2VKc29uRm9ybWF0Q29tbW9uKCh3cml0ZUVudW0sIHdyaXRlU2NhbGFyKSA9PiB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiB3cml0ZUZpZWxkKGZpZWxkLCB2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKGZpZWxkLmtpbmQgPT0gXCJtYXBcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGpzb25PYmogPSB7fTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGZpZWxkLlYua2luZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NhbGFyXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtlbnRyeUtleSwgZW50cnlWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXModmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gd3JpdGVTY2FsYXIoZmllbGQuVi5ULCBlbnRyeVZhbHVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnQodmFsICE9PSB1bmRlZmluZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25PYmpbZW50cnlLZXkudG9TdHJpbmcoKV0gPSB2YWw7IC8vIEpTT04gc3RhbmRhcmQgYWxsb3dzIG9ubHkgKGRvdWJsZSBxdW90ZWQpIHN0cmluZyBhcyBwcm9wZXJ0eSBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZW50cnlLZXksIGVudHJ5VmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEpTT04gc3RhbmRhcmQgYWxsb3dzIG9ubHkgKGRvdWJsZSBxdW90ZWQpIHN0cmluZyBhcyBwcm9wZXJ0eSBrZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uT2JqW2VudHJ5S2V5LnRvU3RyaW5nKCldID0gZW50cnlWYWx1ZS50b0pzb24ob3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcImVudW1cIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudW1UeXBlID0gZmllbGQuVi5UO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZW50cnlLZXksIGVudHJ5VmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydChlbnRyeVZhbHVlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIGVudHJ5VmFsdWUgPT0gXCJudW1iZXJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsID0gd3JpdGVFbnVtKGVudW1UeXBlLCBlbnRyeVZhbHVlLCB0cnVlLCBvcHRpb25zLmVudW1Bc0ludGVnZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydCh2YWwgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbk9ialtlbnRyeUtleS50b1N0cmluZygpXSA9IHZhbDsgLy8gSlNPTiBzdGFuZGFyZCBhbGxvd3Mgb25seSAoZG91YmxlIHF1b3RlZCkgc3RyaW5nIGFzIHByb3BlcnR5IGtleVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmVtaXREZWZhdWx0VmFsdWVzIHx8IE9iamVjdC5rZXlzKGpzb25PYmopLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICAgICAgPyBqc29uT2JqXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZmllbGQucmVwZWF0ZWQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBqc29uQXJyID0gW107XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmaWVsZC5raW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uQXJyLnB1c2god3JpdGVTY2FsYXIoZmllbGQuVCwgdmFsdWVbaV0sIHRydWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25BcnIucHVzaCh3cml0ZUVudW0oZmllbGQuVCwgdmFsdWVbaV0sIHRydWUsIG9wdGlvbnMuZW51bUFzSW50ZWdlcikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbkFyci5wdXNoKHZhbHVlW2ldLnRvSnNvbihvcHRpb25zKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZW1pdERlZmF1bHRWYWx1ZXMgfHwganNvbkFyci5sZW5ndGggPiAwXG4gICAgICAgICAgICAgICAgICAgID8ganNvbkFyclxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEluIGNvbnRyYXN0IHRvIHByb3RvMywgd2UgcmFpc2UgYW4gZXJyb3IgaWYgYSBub24tb3B0aW9uYWwgKHByb3RvMiByZXF1aXJlZClcbiAgICAgICAgICAgICAgICAvLyBmaWVsZCBpcyBtaXNzaW5nIGEgdmFsdWUuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFmaWVsZC5vbmVvZiAmJiAhZmllbGQub3B0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBgcmVxdWlyZWQgZmllbGQgbm90IHNldGA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3dpdGNoIChmaWVsZC5raW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEluIGNvbnRyYXN0IHRvIHByb3RvMywgd2UgZG8gbm90IHNraXAgaW50cmluc2ljIGRlZmF1bHQgdmFsdWVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXhwbGljaXQgZGVmYXVsdCB2YWx1ZXMgYXJlIG5vdCBzcGVjaWFsIGNhc2VkIGVpdGhlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3cml0ZVNjYWxhcihmaWVsZC5ULCB2YWx1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlbnVtXCI6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbiBjb250cmFzdCB0byBwcm90bzMsIHdlIGRvIG5vdCBza2lwIGludHJpbnNpYyBkZWZhdWx0IHZhbHVlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4cGxpY2l0IGRlZmF1bHQgdmFsdWVzIGFyZSBub3Qgc3BlY2lhbCBjYXNlZCBlaXRoZXIuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gd3JpdGVFbnVtKGZpZWxkLlQsIHZhbHVlLCB0cnVlLCBvcHRpb25zLmVudW1Bc0ludGVnZXIpO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdyYXBGaWVsZChmaWVsZC5ULCB2YWx1ZSkudG9Kc29uKG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzIEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgbWFrZVByb3RvUnVudGltZSB9IGZyb20gXCIuL3ByaXZhdGUvcHJvdG8tcnVudGltZS5qc1wiO1xuaW1wb3J0IHsgbWFrZUJpbmFyeUZvcm1hdFByb3RvMiB9IGZyb20gXCIuL3ByaXZhdGUvYmluYXJ5LWZvcm1hdC1wcm90bzIuanNcIjtcbmltcG9ydCB7IG1ha2VVdGlsQ29tbW9uIH0gZnJvbSBcIi4vcHJpdmF0ZS91dGlsLWNvbW1vbi5qc1wiO1xuaW1wb3J0IHsgSW50ZXJuYWxGaWVsZExpc3QgfSBmcm9tIFwiLi9wcml2YXRlL2ZpZWxkLWxpc3QuanNcIjtcbmltcG9ydCB7IEludGVybmFsT25lb2ZJbmZvIH0gZnJvbSBcIi4vcHJpdmF0ZS9maWVsZC5qc1wiO1xuaW1wb3J0IHsgbG9jYWxGaWVsZE5hbWUsIGZpZWxkSnNvbk5hbWUgfSBmcm9tIFwiLi9wcml2YXRlL25hbWVzLmpzXCI7XG5pbXBvcnQgeyBtYWtlSnNvbkZvcm1hdFByb3RvMiB9IGZyb20gXCIuL3ByaXZhdGUvanNvbi1mb3JtYXQtcHJvdG8yLmpzXCI7XG5pbXBvcnQgeyBMb25nVHlwZSB9IGZyb20gXCIuL2ZpZWxkLmpzXCI7XG4vKipcbiAqIFByb3ZpZGVzIGZ1bmN0aW9uYWxpdHkgZm9yIG1lc3NhZ2VzIGRlZmluZWQgd2l0aCB0aGUgcHJvdG8yIHN5bnRheC5cbiAqL1xuZXhwb3J0IGNvbnN0IHByb3RvMiA9IG1ha2VQcm90b1J1bnRpbWUoXCJwcm90bzJcIiwgbWFrZUpzb25Gb3JtYXRQcm90bzIoKSwgbWFrZUJpbmFyeUZvcm1hdFByb3RvMigpLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG1ha2VVdGlsQ29tbW9uKCkpLCB7IG5ld0ZpZWxkTGlzdChmaWVsZHMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbnRlcm5hbEZpZWxkTGlzdChmaWVsZHMsIG5vcm1hbGl6ZUZpZWxkSW5mb3NQcm90bzIpO1xuICAgIH0sXG4gICAgaW5pdEZpZWxkcyh0YXJnZXQpIHtcbiAgICAgICAgZm9yIChjb25zdCBtZW1iZXIgb2YgdGFyZ2V0LmdldFR5cGUoKS5maWVsZHMuYnlNZW1iZXIoKSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IG1lbWJlci5sb2NhbE5hbWUsIHQgPSB0YXJnZXQ7XG4gICAgICAgICAgICBpZiAobWVtYmVyLnJlcGVhdGVkKSB7XG4gICAgICAgICAgICAgICAgdFtuYW1lXSA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoIChtZW1iZXIua2luZCkge1xuICAgICAgICAgICAgICAgIGNhc2UgXCJvbmVvZlwiOlxuICAgICAgICAgICAgICAgICAgICB0W25hbWVdID0geyBjYXNlOiB1bmRlZmluZWQgfTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm1hcFwiOlxuICAgICAgICAgICAgICAgICAgICB0W25hbWVdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgXCJzY2FsYXJcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiZW51bVwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgICAgICAgICAgIC8vIEluIGNvbnRyYXN0IHRvIHByb3RvMywgZW51bSBhbmQgc2NhbGFyIGZpZWxkcyBoYXZlIG5vIGludHJpbnNpYyBkZWZhdWx0IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGFuIG9wdGlvbmFsIGV4cGxpY2l0IGRlZmF1bHQgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgIC8vIFVubGlrZSBwcm90bzMgaW50cmluc2ljIGRlZmF1bHQgdmFsdWVzLCBwcm90bzIgZXhwbGljaXQgZGVmYXVsdCB2YWx1ZXMgYXJlIG5vdFxuICAgICAgICAgICAgICAgICAgICAvLyBzZXQgb24gY29uc3RydWN0aW9uLCBiZWNhdXNlIHRoZXkgYXJlIG5vdCBvbWl0dGVkIG9uIHRoZSB3aXJlLiBJZiB3ZSBkaWQgc2V0XG4gICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHQgdmFsdWVzIG9uIGNvbnN0cnVjdGlvbiwgYSBkZXNlcmlhbGl6ZS1zZXJpYWxpemUgcm91bmQtdHJpcCB3b3VsZCBhZGRcbiAgICAgICAgICAgICAgICAgICAgLy8gZmllbGRzIHRvIGEgbWVzc2FnZS5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IH0pKTtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnksQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50LEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2VzcyxAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50ICovXG5mdW5jdGlvbiBub3JtYWxpemVGaWVsZEluZm9zUHJvdG8yKGZpZWxkSW5mb3MpIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lO1xuICAgIGNvbnN0IHIgPSBbXTtcbiAgICBsZXQgbztcbiAgICBmb3IgKGNvbnN0IGZpZWxkIG9mIHR5cGVvZiBmaWVsZEluZm9zID09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IGZpZWxkSW5mb3MoKVxuICAgICAgICA6IGZpZWxkSW5mb3MpIHtcbiAgICAgICAgY29uc3QgZiA9IGZpZWxkO1xuICAgICAgICBmLmxvY2FsTmFtZSA9IGxvY2FsRmllbGROYW1lKGZpZWxkLm5hbWUsIGZpZWxkLm9uZW9mICE9PSB1bmRlZmluZWQpO1xuICAgICAgICBmLmpzb25OYW1lID0gKF9hID0gZmllbGQuanNvbk5hbWUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZpZWxkSnNvbk5hbWUoZmllbGQubmFtZSk7XG4gICAgICAgIGYucmVwZWF0ZWQgPSAoX2IgPSBmaWVsZC5yZXBlYXRlZCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XG4gICAgICAgIGlmIChmaWVsZC5raW5kID09IFwic2NhbGFyXCIpIHtcbiAgICAgICAgICAgIGYuTCA9IChfYyA9IGZpZWxkLkwpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IExvbmdUeXBlLkJJR0lOVDtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBkbyBub3Qgc3VyZmFjZSBvcHRpb25zIGF0IHRoaXMgdGltZVxuICAgICAgICAvLyBmLm9wdGlvbnMgPSBmaWVsZC5vcHRpb25zID8/IGVtcHR5UmVhZG9ubHlPYmplY3Q7XG4gICAgICAgIGlmIChmaWVsZC5vbmVvZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCBvb25hbWUgPSB0eXBlb2YgZmllbGQub25lb2YgPT0gXCJzdHJpbmdcIiA/IGZpZWxkLm9uZW9mIDogZmllbGQub25lb2YubmFtZTtcbiAgICAgICAgICAgIGlmICghbyB8fCBvLm5hbWUgIT0gb29uYW1lKSB7XG4gICAgICAgICAgICAgICAgbyA9IG5ldyBJbnRlcm5hbE9uZW9mSW5mbyhvb25hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZi5vbmVvZiA9IG87XG4gICAgICAgICAgICBvLmFkZEZpZWxkKGYpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHByb3RvMiBzcGVjaWZpYzpcbiAgICAgICAgaWYgKGZpZWxkLmtpbmQgPT0gXCJtZXNzYWdlXCIpIHtcbiAgICAgICAgICAgIGYuZGVsaW1pdGVkID0gKF9kID0gZmllbGQuZGVsaW1pdGVkKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJbiBjb250cmFzdCB0byBwcm90bzMsIHJlcGVhdGVkIGZpZWxkcyBhcmUgdW5wYWNrZWQgZXhjZXB0IHdoZW4gZXhwbGljaXRseSBzcGVjaWZpZWQuXG4gICAgICAgIGYucGFja2VkID0gKF9lID0gZmllbGQucGFja2VkKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBmYWxzZTtcbiAgICAgICAgci5wdXNoKGYpO1xuICAgIH1cbiAgICByZXR1cm4gcjtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzIEJ1ZiBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBNZXRob2RLaW5kIHJlcHJlc2VudHMgdGhlIGZvdXIgbWV0aG9kIHR5cGVzIHRoYXQgY2FuIGJlIGRlY2xhcmVkIGluXG4gKiBwcm90b2J1ZiB3aXRoIHRoZSBgc3RyZWFtYCBrZXl3b3JkOlxuICpcbiAqIDEuIFVuYXJ5OiAgICAgICAgICAgcnBjIChJbnB1dCkgcmV0dXJucyAoT3V0cHV0KVxuICogMi4gU2VydmVyU3RyZWFtaW5nOiBycGMgKElucHV0KSByZXR1cm5zIChzdHJlYW0gT3V0cHV0KVxuICogMy4gQ2xpZW50U3RyZWFtaW5nOiBycGMgKHN0cmVhbSBJbnB1dCkgcmV0dXJucyAoT3V0cHV0KVxuICogNC4gQmlEaVN0cmVhbWluZzogICBycGMgKHN0cmVhbSBJbnB1dCkgcmV0dXJucyAoc3RyZWFtIE91dHB1dClcbiAqL1xuZXhwb3J0IHZhciBNZXRob2RLaW5kO1xuKGZ1bmN0aW9uIChNZXRob2RLaW5kKSB7XG4gICAgTWV0aG9kS2luZFtNZXRob2RLaW5kW1wiVW5hcnlcIl0gPSAwXSA9IFwiVW5hcnlcIjtcbiAgICBNZXRob2RLaW5kW01ldGhvZEtpbmRbXCJTZXJ2ZXJTdHJlYW1pbmdcIl0gPSAxXSA9IFwiU2VydmVyU3RyZWFtaW5nXCI7XG4gICAgTWV0aG9kS2luZFtNZXRob2RLaW5kW1wiQ2xpZW50U3RyZWFtaW5nXCJdID0gMl0gPSBcIkNsaWVudFN0cmVhbWluZ1wiO1xuICAgIE1ldGhvZEtpbmRbTWV0aG9kS2luZFtcIkJpRGlTdHJlYW1pbmdcIl0gPSAzXSA9IFwiQmlEaVN0cmVhbWluZ1wiO1xufSkoTWV0aG9kS2luZCB8fCAoTWV0aG9kS2luZCA9IHt9KSk7XG4vKipcbiAqIElzIHRoaXMgbWV0aG9kIHNpZGUtZWZmZWN0LWZyZWUgKG9yIHNhZmUgaW4gSFRUUCBwYXJsYW5jZSksIG9yIGp1c3RcbiAqIGlkZW1wb3RlbnQsIG9yIG5laXRoZXI/IEhUVFAgYmFzZWQgUlBDIGltcGxlbWVudGF0aW9uIG1heSBjaG9vc2UgR0VUIHZlcmJcbiAqIGZvciBzYWZlIG1ldGhvZHMsIGFuZCBQVVQgdmVyYiBmb3IgaWRlbXBvdGVudCBtZXRob2RzIGluc3RlYWQgb2YgdGhlXG4gKiBkZWZhdWx0IFBPU1QuXG4gKlxuICogVGhpcyBlbnVtIG1hdGNoZXMgdGhlIHByb3RvYnVmIGVudW0gZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuSWRlbXBvdGVuY3lMZXZlbCxcbiAqIGRlZmluZWQgaW4gdGhlIHdlbGwta25vd24gdHlwZSBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90bywgYnV0XG4gKiBkcm9wcyBVTktOT1dOLlxuICovXG5leHBvcnQgdmFyIE1ldGhvZElkZW1wb3RlbmN5O1xuKGZ1bmN0aW9uIChNZXRob2RJZGVtcG90ZW5jeSkge1xuICAgIC8qKlxuICAgICAqIElkZW1wb3RlbnQsIG5vIHNpZGUgZWZmZWN0cy5cbiAgICAgKi9cbiAgICBNZXRob2RJZGVtcG90ZW5jeVtNZXRob2RJZGVtcG90ZW5jeVtcIk5vU2lkZUVmZmVjdHNcIl0gPSAxXSA9IFwiTm9TaWRlRWZmZWN0c1wiO1xuICAgIC8qKlxuICAgICAqIElkZW1wb3RlbnQsIGJ1dCBtYXkgaGF2ZSBzaWRlIGVmZmVjdHMuXG4gICAgICovXG4gICAgTWV0aG9kSWRlbXBvdGVuY3lbTWV0aG9kSWRlbXBvdGVuY3lbXCJJZGVtcG90ZW50XCJdID0gMl0gPSBcIklkZW1wb3RlbnRcIjtcbn0pKE1ldGhvZElkZW1wb3RlbmN5IHx8IChNZXRob2RJZGVtcG90ZW5jeSA9IHt9KSk7XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMyBCdWYgVGVjaG5vbG9naWVzLCBJbmMuXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8vIEF1dGhvcjoga2VudG9uQGdvb2dsZS5jb20gKEtlbnRvbiBWYXJkYSlcbi8vICBCYXNlZCBvbiBvcmlnaW5hbCBQcm90b2NvbCBCdWZmZXJzIGRlc2lnbiBieVxuLy8gIFNhbmpheSBHaGVtYXdhdCwgSmVmZiBEZWFuLCBhbmQgb3RoZXJzLlxuLy9cbi8vIFRoZSBtZXNzYWdlcyBpbiB0aGlzIGZpbGUgZGVzY3JpYmUgdGhlIGRlZmluaXRpb25zIGZvdW5kIGluIC5wcm90byBmaWxlcy5cbi8vIEEgdmFsaWQgLnByb3RvIGZpbGUgY2FuIGJlIHRyYW5zbGF0ZWQgZGlyZWN0bHkgdG8gYSBGaWxlRGVzY3JpcHRvclByb3RvXG4vLyB3aXRob3V0IGFueSBvdGhlciBpbmZvcm1hdGlvbiAoZS5nLiB3aXRob3V0IHJlYWRpbmcgaXRzIGltcG9ydHMpLlxuLy8gQGdlbmVyYXRlZCBieSBwcm90b2MtZ2VuLWVzIHYxLjYuMCB3aXRoIHBhcmFtZXRlciBcImJvb3RzdHJhcF93a3Q9dHJ1ZSx0c19ub2NoZWNrPWZhbHNlLHRhcmdldD10c1wiXG4vLyBAZ2VuZXJhdGVkIGZyb20gZmlsZSBnb29nbGUvcHJvdG9idWYvZGVzY3JpcHRvci5wcm90byAocGFja2FnZSBnb29nbGUucHJvdG9idWYsIHN5bnRheCBwcm90bzIpXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuaW1wb3J0IHsgcHJvdG8yIH0gZnJvbSBcIi4uLy4uL3Byb3RvMi5qc1wiO1xuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gXCIuLi8uLi9tZXNzYWdlLmpzXCI7XG4vKipcbiAqIFRoZSBmdWxsIHNldCBvZiBrbm93biBlZGl0aW9ucy5cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRWRpdGlvblxuICovXG5leHBvcnQgdmFyIEVkaXRpb247XG4oZnVuY3Rpb24gKEVkaXRpb24pIHtcbiAgICAvKipcbiAgICAgKiBBIHBsYWNlaG9sZGVyIGZvciBhbiB1bmtub3duIGVkaXRpb24gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogRURJVElPTl9VTktOT1dOID0gMDtcbiAgICAgKi9cbiAgICBFZGl0aW9uW0VkaXRpb25bXCJFRElUSU9OX1VOS05PV05cIl0gPSAwXSA9IFwiRURJVElPTl9VTktOT1dOXCI7XG4gICAgLyoqXG4gICAgICogTGVnYWN5IHN5bnRheCBcImVkaXRpb25zXCIuICBUaGVzZSBwcmUtZGF0ZSBlZGl0aW9ucywgYnV0IGJlaGF2ZSBtdWNoIGxpa2VcbiAgICAgKiBkaXN0aW5jdCBlZGl0aW9ucy4gIFRoZXNlIGNhbid0IGJlIHVzZWQgdG8gc3BlY2lmeSB0aGUgZWRpdGlvbiBvZiBwcm90b1xuICAgICAqIGZpbGVzLCBidXQgZmVhdHVyZSBkZWZpbml0aW9ucyBtdXN0IHN1cHBseSBwcm90bzIvcHJvdG8zIGRlZmF1bHRzIGZvclxuICAgICAqIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEVESVRJT05fUFJPVE8yID0gOTk4O1xuICAgICAqL1xuICAgIEVkaXRpb25bRWRpdGlvbltcIkVESVRJT05fUFJPVE8yXCJdID0gOTk4XSA9IFwiRURJVElPTl9QUk9UTzJcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogRURJVElPTl9QUk9UTzMgPSA5OTk7XG4gICAgICovXG4gICAgRWRpdGlvbltFZGl0aW9uW1wiRURJVElPTl9QUk9UTzNcIl0gPSA5OTldID0gXCJFRElUSU9OX1BST1RPM1wiO1xuICAgIC8qKlxuICAgICAqIEVkaXRpb25zIHRoYXQgaGF2ZSBiZWVuIHJlbGVhc2VkLiAgVGhlIHNwZWNpZmljIHZhbHVlcyBhcmUgYXJiaXRyYXJ5IGFuZFxuICAgICAqIHNob3VsZCBub3QgYmUgZGVwZW5kZWQgb24sIGJ1dCB0aGV5IHdpbGwgYWx3YXlzIGJlIHRpbWUtb3JkZXJlZCBmb3IgZWFzeVxuICAgICAqIGNvbXBhcmlzb24uXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogRURJVElPTl8yMDIzID0gMTAwMDtcbiAgICAgKi9cbiAgICBFZGl0aW9uW0VkaXRpb25bXCJFRElUSU9OXzIwMjNcIl0gPSAxMDAwXSA9IFwiRURJVElPTl8yMDIzXCI7XG4gICAgLyoqXG4gICAgICogUGxhY2Vob2xkZXIgZWRpdGlvbnMgZm9yIHRlc3RpbmcgZmVhdHVyZSByZXNvbHV0aW9uLiAgVGhlc2Ugc2hvdWxkIG5vdCBiZVxuICAgICAqIHVzZWQgb3IgcmVseWVkIG9uIG91dHNpZGUgb2YgdGVzdHMuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogRURJVElPTl8xX1RFU1RfT05MWSA9IDE7XG4gICAgICovXG4gICAgRWRpdGlvbltFZGl0aW9uW1wiRURJVElPTl8xX1RFU1RfT05MWVwiXSA9IDFdID0gXCJFRElUSU9OXzFfVEVTVF9PTkxZXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEVESVRJT05fMl9URVNUX09OTFkgPSAyO1xuICAgICAqL1xuICAgIEVkaXRpb25bRWRpdGlvbltcIkVESVRJT05fMl9URVNUX09OTFlcIl0gPSAyXSA9IFwiRURJVElPTl8yX1RFU1RfT05MWVwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFRElUSU9OXzk5OTk3X1RFU1RfT05MWSA9IDk5OTk3O1xuICAgICAqL1xuICAgIEVkaXRpb25bRWRpdGlvbltcIkVESVRJT05fOTk5OTdfVEVTVF9PTkxZXCJdID0gOTk5OTddID0gXCJFRElUSU9OXzk5OTk3X1RFU1RfT05MWVwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFRElUSU9OXzk5OTk4X1RFU1RfT05MWSA9IDk5OTk4O1xuICAgICAqL1xuICAgIEVkaXRpb25bRWRpdGlvbltcIkVESVRJT05fOTk5OThfVEVTVF9PTkxZXCJdID0gOTk5OThdID0gXCJFRElUSU9OXzk5OTk4X1RFU1RfT05MWVwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBFRElUSU9OXzk5OTk5X1RFU1RfT05MWSA9IDk5OTk5O1xuICAgICAqL1xuICAgIEVkaXRpb25bRWRpdGlvbltcIkVESVRJT05fOTk5OTlfVEVTVF9PTkxZXCJdID0gOTk5OTldID0gXCJFRElUSU9OXzk5OTk5X1RFU1RfT05MWVwiO1xufSkoRWRpdGlvbiB8fCAoRWRpdGlvbiA9IHt9KSk7XG4vLyBSZXRyaWV2ZSBlbnVtIG1ldGFkYXRhIHdpdGg6IHByb3RvMi5nZXRFbnVtVHlwZShFZGl0aW9uKVxucHJvdG8yLnV0aWwuc2V0RW51bVR5cGUoRWRpdGlvbiwgXCJnb29nbGUucHJvdG9idWYuRWRpdGlvblwiLCBbXG4gICAgeyBubzogMCwgbmFtZTogXCJFRElUSU9OX1VOS05PV05cIiB9LFxuICAgIHsgbm86IDk5OCwgbmFtZTogXCJFRElUSU9OX1BST1RPMlwiIH0sXG4gICAgeyBubzogOTk5LCBuYW1lOiBcIkVESVRJT05fUFJPVE8zXCIgfSxcbiAgICB7IG5vOiAxMDAwLCBuYW1lOiBcIkVESVRJT05fMjAyM1wiIH0sXG4gICAgeyBubzogMSwgbmFtZTogXCJFRElUSU9OXzFfVEVTVF9PTkxZXCIgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIkVESVRJT05fMl9URVNUX09OTFlcIiB9LFxuICAgIHsgbm86IDk5OTk3LCBuYW1lOiBcIkVESVRJT05fOTk5OTdfVEVTVF9PTkxZXCIgfSxcbiAgICB7IG5vOiA5OTk5OCwgbmFtZTogXCJFRElUSU9OXzk5OTk4X1RFU1RfT05MWVwiIH0sXG4gICAgeyBubzogOTk5OTksIG5hbWU6IFwiRURJVElPTl85OTk5OV9URVNUX09OTFlcIiB9LFxuXSk7XG4vKipcbiAqIFRoZSBwcm90b2NvbCBjb21waWxlciBjYW4gb3V0cHV0IGEgRmlsZURlc2NyaXB0b3JTZXQgY29udGFpbmluZyB0aGUgLnByb3RvXG4gKiBmaWxlcyBpdCBwYXJzZXMuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yU2V0XG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlRGVzY3JpcHRvclNldCBleHRlbmRzIE1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG8gZmlsZSA9IDE7XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZpbGUgPSBbXTtcbiAgICAgICAgcHJvdG8yLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsZURlc2NyaXB0b3JTZXQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZpbGVEZXNjcmlwdG9yU2V0KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWxlRGVzY3JpcHRvclNldCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvMi51dGlsLmVxdWFscyhGaWxlRGVzY3JpcHRvclNldCwgYSwgYik7XG4gICAgfVxufVxuRmlsZURlc2NyaXB0b3JTZXQucnVudGltZSA9IHByb3RvMjtcbkZpbGVEZXNjcmlwdG9yU2V0LnR5cGVOYW1lID0gXCJnb29nbGUucHJvdG9idWYuRmlsZURlc2NyaXB0b3JTZXRcIjtcbkZpbGVEZXNjcmlwdG9yU2V0LmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJmaWxlXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBGaWxlRGVzY3JpcHRvclByb3RvLCByZXBlYXRlZDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIERlc2NyaWJlcyBhIGNvbXBsZXRlIC5wcm90byBmaWxlLlxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5GaWxlRGVzY3JpcHRvclByb3RvXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlRGVzY3JpcHRvclByb3RvIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogTmFtZXMgb2YgZmlsZXMgaW1wb3J0ZWQgYnkgdGhpcyBmaWxlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIHN0cmluZyBkZXBlbmRlbmN5ID0gMztcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZGVwZW5kZW5jeSA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW5kZXhlcyBvZiB0aGUgcHVibGljIGltcG9ydGVkIGZpbGVzIGluIHRoZSBkZXBlbmRlbmN5IGxpc3QgYWJvdmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgaW50MzIgcHVibGljX2RlcGVuZGVuY3kgPSAxMDtcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucHVibGljRGVwZW5kZW5jeSA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogSW5kZXhlcyBvZiB0aGUgd2VhayBpbXBvcnRlZCBmaWxlcyBpbiB0aGUgZGVwZW5kZW5jeSBsaXN0LlxuICAgICAgICAgKiBGb3IgR29vZ2xlLWludGVybmFsIG1pZ3JhdGlvbiBvbmx5LiBEbyBub3QgdXNlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGludDMyIHdlYWtfZGVwZW5kZW5jeSA9IDExO1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy53ZWFrRGVwZW5kZW5jeSA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQWxsIHRvcC1sZXZlbCBkZWZpbml0aW9ucyBpbiB0aGlzIGZpbGUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90byBtZXNzYWdlX3R5cGUgPSA0O1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tZXNzYWdlVHlwZSA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90byBlbnVtX3R5cGUgPSA1O1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5lbnVtVHlwZSA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90byBzZXJ2aWNlID0gNjtcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc2VydmljZSA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8gZXh0ZW5zaW9uID0gNztcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uID0gW107XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZpbGVEZXNjcmlwdG9yUHJvdG8oKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZpbGVEZXNjcmlwdG9yUHJvdG8oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZpbGVEZXNjcmlwdG9yUHJvdG8oKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoRmlsZURlc2NyaXB0b3JQcm90bywgYSwgYik7XG4gICAgfVxufVxuRmlsZURlc2NyaXB0b3JQcm90by5ydW50aW1lID0gcHJvdG8yO1xuRmlsZURlc2NyaXB0b3JQcm90by50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLkZpbGVEZXNjcmlwdG9yUHJvdG9cIjtcbkZpbGVEZXNjcmlwdG9yUHJvdG8uZmllbGRzID0gcHJvdG8yLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcIm5hbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJwYWNrYWdlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwiZGVwZW5kZW5jeVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDEwLCBuYW1lOiBcInB1YmxpY19kZXBlbmRlbmN5XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDUgLyogU2NhbGFyVHlwZS5JTlQzMiAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiAxMSwgbmFtZTogXCJ3ZWFrX2RlcGVuZGVuY3lcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNSAvKiBTY2FsYXJUeXBlLklOVDMyICovLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwibWVzc2FnZV90eXBlXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBEZXNjcmlwdG9yUHJvdG8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogNSwgbmFtZTogXCJlbnVtX3R5cGVcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEVudW1EZXNjcmlwdG9yUHJvdG8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogNiwgbmFtZTogXCJzZXJ2aWNlXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTZXJ2aWNlRGVzY3JpcHRvclByb3RvLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDcsIG5hbWU6IFwiZXh0ZW5zaW9uXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBGaWVsZERlc2NyaXB0b3JQcm90bywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiA4LCBuYW1lOiBcIm9wdGlvbnNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEZpbGVPcHRpb25zLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA5LCBuYW1lOiBcInNvdXJjZV9jb2RlX2luZm9cIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFNvdXJjZUNvZGVJbmZvLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAxMiwgbmFtZTogXCJzeW50YXhcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMTQsIG5hbWU6IFwiZWRpdGlvblwiLCBraW5kOiBcImVudW1cIiwgVDogcHJvdG8yLmdldEVudW1UeXBlKEVkaXRpb24pLCBvcHQ6IHRydWUgfSxcbl0pO1xuLyoqXG4gKiBEZXNjcmliZXMgYSBtZXNzYWdlIHR5cGUuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90b1xuICovXG5leHBvcnQgY2xhc3MgRGVzY3JpcHRvclByb3RvIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8gZmllbGQgPSAyO1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maWVsZCA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8gZXh0ZW5zaW9uID0gNjtcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8gbmVzdGVkX3R5cGUgPSAzO1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5uZXN0ZWRUeXBlID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvIGVudW1fdHlwZSA9IDQ7XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVudW1UeXBlID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uRXh0ZW5zaW9uUmFuZ2UgZXh0ZW5zaW9uX3JhbmdlID0gNTtcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZXh0ZW5zaW9uUmFuZ2UgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLk9uZW9mRGVzY3JpcHRvclByb3RvIG9uZW9mX2RlY2wgPSA4O1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5vbmVvZkRlY2wgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5SZXNlcnZlZFJhbmdlIHJlc2VydmVkX3JhbmdlID0gOTtcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzZXJ2ZWRSYW5nZSA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVzZXJ2ZWQgZmllbGQgbmFtZXMsIHdoaWNoIG1heSBub3QgYmUgdXNlZCBieSBmaWVsZHMgaW4gdGhlIHNhbWUgbWVzc2FnZS5cbiAgICAgICAgICogQSBnaXZlbiBuYW1lIG1heSBvbmx5IGJlIHJlc2VydmVkIG9uY2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIHJlc2VydmVkX25hbWUgPSAxMDtcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzZXJ2ZWROYW1lID0gW107XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IERlc2NyaXB0b3JQcm90bygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVzY3JpcHRvclByb3RvKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZXNjcmlwdG9yUHJvdG8oKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoRGVzY3JpcHRvclByb3RvLCBhLCBiKTtcbiAgICB9XG59XG5EZXNjcmlwdG9yUHJvdG8ucnVudGltZSA9IHByb3RvMjtcbkRlc2NyaXB0b3JQcm90by50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90b1wiO1xuRGVzY3JpcHRvclByb3RvLmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJuYW1lXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiZmllbGRcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEZpZWxkRGVzY3JpcHRvclByb3RvLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDYsIG5hbWU6IFwiZXh0ZW5zaW9uXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBGaWVsZERlc2NyaXB0b3JQcm90bywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcIm5lc3RlZF90eXBlXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBEZXNjcmlwdG9yUHJvdG8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogNCwgbmFtZTogXCJlbnVtX3R5cGVcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEVudW1EZXNjcmlwdG9yUHJvdG8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogNSwgbmFtZTogXCJleHRlbnNpb25fcmFuZ2VcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IERlc2NyaXB0b3JQcm90b19FeHRlbnNpb25SYW5nZSwgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiA4LCBuYW1lOiBcIm9uZW9mX2RlY2xcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IE9uZW9mRGVzY3JpcHRvclByb3RvLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDcsIG5hbWU6IFwib3B0aW9uc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogTWVzc2FnZU9wdGlvbnMsIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDksIG5hbWU6IFwicmVzZXJ2ZWRfcmFuZ2VcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IERlc2NyaXB0b3JQcm90b19SZXNlcnZlZFJhbmdlLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDEwLCBuYW1lOiBcInJlc2VydmVkX25hbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbl0pO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRGVzY3JpcHRvclByb3RvLkV4dGVuc2lvblJhbmdlXG4gKi9cbmV4cG9ydCBjbGFzcyBEZXNjcmlwdG9yUHJvdG9fRXh0ZW5zaW9uUmFuZ2UgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IERlc2NyaXB0b3JQcm90b19FeHRlbnNpb25SYW5nZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVzY3JpcHRvclByb3RvX0V4dGVuc2lvblJhbmdlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZXNjcmlwdG9yUHJvdG9fRXh0ZW5zaW9uUmFuZ2UoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoRGVzY3JpcHRvclByb3RvX0V4dGVuc2lvblJhbmdlLCBhLCBiKTtcbiAgICB9XG59XG5EZXNjcmlwdG9yUHJvdG9fRXh0ZW5zaW9uUmFuZ2UucnVudGltZSA9IHByb3RvMjtcbkRlc2NyaXB0b3JQcm90b19FeHRlbnNpb25SYW5nZS50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5FeHRlbnNpb25SYW5nZVwiO1xuRGVzY3JpcHRvclByb3RvX0V4dGVuc2lvblJhbmdlLmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJzdGFydFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA1IC8qIFNjYWxhclR5cGUuSU5UMzIgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiZW5kXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDUgLyogU2NhbGFyVHlwZS5JTlQzMiAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJvcHRpb25zXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBFeHRlbnNpb25SYW5nZU9wdGlvbnMsIG9wdDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIFJhbmdlIG9mIHJlc2VydmVkIHRhZyBudW1iZXJzLiBSZXNlcnZlZCB0YWcgbnVtYmVycyBtYXkgbm90IGJlIHVzZWQgYnlcbiAqIGZpZWxkcyBvciBleHRlbnNpb24gcmFuZ2VzIGluIHRoZSBzYW1lIG1lc3NhZ2UuIFJlc2VydmVkIHJhbmdlcyBtYXlcbiAqIG5vdCBvdmVybGFwLlxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8uUmVzZXJ2ZWRSYW5nZVxuICovXG5leHBvcnQgY2xhc3MgRGVzY3JpcHRvclByb3RvX1Jlc2VydmVkUmFuZ2UgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IERlc2NyaXB0b3JQcm90b19SZXNlcnZlZFJhbmdlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZXNjcmlwdG9yUHJvdG9fUmVzZXJ2ZWRSYW5nZSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGVzY3JpcHRvclByb3RvX1Jlc2VydmVkUmFuZ2UoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoRGVzY3JpcHRvclByb3RvX1Jlc2VydmVkUmFuZ2UsIGEsIGIpO1xuICAgIH1cbn1cbkRlc2NyaXB0b3JQcm90b19SZXNlcnZlZFJhbmdlLnJ1bnRpbWUgPSBwcm90bzI7XG5EZXNjcmlwdG9yUHJvdG9fUmVzZXJ2ZWRSYW5nZS50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90by5SZXNlcnZlZFJhbmdlXCI7XG5EZXNjcmlwdG9yUHJvdG9fUmVzZXJ2ZWRSYW5nZS5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwic3RhcnRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNSAvKiBTY2FsYXJUeXBlLklOVDMyICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImVuZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA1IC8qIFNjYWxhclR5cGUuSU5UMzIgKi8sIG9wdDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5FeHRlbnNpb25SYW5nZU9wdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIEV4dGVuc2lvblJhbmdlT3B0aW9ucyBleHRlbmRzIE1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwYXJzZXIgc3RvcmVzIG9wdGlvbnMgaXQgZG9lc24ndCByZWNvZ25pemUgaGVyZS4gU2VlIGFib3ZlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uIHVuaW50ZXJwcmV0ZWRfb3B0aW9uID0gOTk5O1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51bmludGVycHJldGVkT3B0aW9uID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGb3IgZXh0ZXJuYWwgdXNlcnM6IERPIE5PVCBVU0UuIFdlIGFyZSBpbiB0aGUgcHJvY2VzcyBvZiBvcGVuIHNvdXJjaW5nXG4gICAgICAgICAqIGV4dGVuc2lvbiBkZWNsYXJhdGlvbiBhbmQgZXhlY3V0aW5nIGludGVybmFsIGNsZWFudXBzIGJlZm9yZSBpdCBjYW4gYmVcbiAgICAgICAgICogdXNlZCBleHRlcm5hbGx5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGdvb2dsZS5wcm90b2J1Zi5FeHRlbnNpb25SYW5nZU9wdGlvbnMuRGVjbGFyYXRpb24gZGVjbGFyYXRpb24gPSAyO1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZWNsYXJhdGlvbiA9IFtdO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFeHRlbnNpb25SYW5nZU9wdGlvbnMoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEV4dGVuc2lvblJhbmdlT3B0aW9ucygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXh0ZW5zaW9uUmFuZ2VPcHRpb25zKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKEV4dGVuc2lvblJhbmdlT3B0aW9ucywgYSwgYik7XG4gICAgfVxufVxuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zLnJ1bnRpbWUgPSBwcm90bzI7XG5FeHRlbnNpb25SYW5nZU9wdGlvbnMudHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5FeHRlbnNpb25SYW5nZU9wdGlvbnNcIjtcbkV4dGVuc2lvblJhbmdlT3B0aW9ucy5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDk5OSwgbmFtZTogXCJ1bmludGVycHJldGVkX29wdGlvblwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogVW5pbnRlcnByZXRlZE9wdGlvbiwgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImRlY2xhcmF0aW9uXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBFeHRlbnNpb25SYW5nZU9wdGlvbnNfRGVjbGFyYXRpb24sIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogNTAsIG5hbWU6IFwiZmVhdHVyZXNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEZlYXR1cmVTZXQsIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwidmVyaWZpY2F0aW9uXCIsIGtpbmQ6IFwiZW51bVwiLCBUOiBwcm90bzIuZ2V0RW51bVR5cGUoRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX1ZlcmlmaWNhdGlvblN0YXRlKSwgb3B0OiB0cnVlLCBkZWZhdWx0OiBFeHRlbnNpb25SYW5nZU9wdGlvbnNfVmVyaWZpY2F0aW9uU3RhdGUuVU5WRVJJRklFRCB9LFxuXSk7XG4vKipcbiAqIFRoZSB2ZXJpZmljYXRpb24gc3RhdGUgb2YgdGhlIGV4dGVuc2lvbiByYW5nZS5cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zLlZlcmlmaWNhdGlvblN0YXRlXG4gKi9cbmV4cG9ydCB2YXIgRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX1ZlcmlmaWNhdGlvblN0YXRlO1xuKGZ1bmN0aW9uIChFeHRlbnNpb25SYW5nZU9wdGlvbnNfVmVyaWZpY2F0aW9uU3RhdGUpIHtcbiAgICAvKipcbiAgICAgKiBBbGwgdGhlIGV4dGVuc2lvbnMgb2YgdGhlIHJhbmdlIG11c3QgYmUgZGVjbGFyZWQuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogREVDTEFSQVRJT04gPSAwO1xuICAgICAqL1xuICAgIEV4dGVuc2lvblJhbmdlT3B0aW9uc19WZXJpZmljYXRpb25TdGF0ZVtFeHRlbnNpb25SYW5nZU9wdGlvbnNfVmVyaWZpY2F0aW9uU3RhdGVbXCJERUNMQVJBVElPTlwiXSA9IDBdID0gXCJERUNMQVJBVElPTlwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBVTlZFUklGSUVEID0gMTtcbiAgICAgKi9cbiAgICBFeHRlbnNpb25SYW5nZU9wdGlvbnNfVmVyaWZpY2F0aW9uU3RhdGVbRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX1ZlcmlmaWNhdGlvblN0YXRlW1wiVU5WRVJJRklFRFwiXSA9IDFdID0gXCJVTlZFUklGSUVEXCI7XG59KShFeHRlbnNpb25SYW5nZU9wdGlvbnNfVmVyaWZpY2F0aW9uU3RhdGUgfHwgKEV4dGVuc2lvblJhbmdlT3B0aW9uc19WZXJpZmljYXRpb25TdGF0ZSA9IHt9KSk7XG4vLyBSZXRyaWV2ZSBlbnVtIG1ldGFkYXRhIHdpdGg6IHByb3RvMi5nZXRFbnVtVHlwZShFeHRlbnNpb25SYW5nZU9wdGlvbnNfVmVyaWZpY2F0aW9uU3RhdGUpXG5wcm90bzIudXRpbC5zZXRFbnVtVHlwZShFeHRlbnNpb25SYW5nZU9wdGlvbnNfVmVyaWZpY2F0aW9uU3RhdGUsIFwiZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy5WZXJpZmljYXRpb25TdGF0ZVwiLCBbXG4gICAgeyBubzogMCwgbmFtZTogXCJERUNMQVJBVElPTlwiIH0sXG4gICAgeyBubzogMSwgbmFtZTogXCJVTlZFUklGSUVEXCIgfSxcbl0pO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zLkRlY2xhcmF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBFeHRlbnNpb25SYW5nZU9wdGlvbnNfRGVjbGFyYXRpb24gZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEV4dGVuc2lvblJhbmdlT3B0aW9uc19EZWNsYXJhdGlvbigpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX0RlY2xhcmF0aW9uKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFeHRlbnNpb25SYW5nZU9wdGlvbnNfRGVjbGFyYXRpb24oKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX0RlY2xhcmF0aW9uLCBhLCBiKTtcbiAgICB9XG59XG5FeHRlbnNpb25SYW5nZU9wdGlvbnNfRGVjbGFyYXRpb24ucnVudGltZSA9IHByb3RvMjtcbkV4dGVuc2lvblJhbmdlT3B0aW9uc19EZWNsYXJhdGlvbi50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLkV4dGVuc2lvblJhbmdlT3B0aW9ucy5EZWNsYXJhdGlvblwiO1xuRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX0RlY2xhcmF0aW9uLmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJudW1iZXJcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNSAvKiBTY2FsYXJUeXBlLklOVDMyICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImZ1bGxfbmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcInR5cGVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogNSwgbmFtZTogXCJyZXNlcnZlZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogNiwgbmFtZTogXCJyZXBlYXRlZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLywgb3B0OiB0cnVlIH0sXG5dKTtcbi8qKlxuICogRGVzY3JpYmVzIGEgZmllbGQgd2l0aGluIGEgbWVzc2FnZS5cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG9cbiAqL1xuZXhwb3J0IGNsYXNzIEZpZWxkRGVzY3JpcHRvclByb3RvIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZERlc2NyaXB0b3JQcm90bygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmllbGREZXNjcmlwdG9yUHJvdG8oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZpZWxkRGVzY3JpcHRvclByb3RvKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKEZpZWxkRGVzY3JpcHRvclByb3RvLCBhLCBiKTtcbiAgICB9XG59XG5GaWVsZERlc2NyaXB0b3JQcm90by5ydW50aW1lID0gcHJvdG8yO1xuRmllbGREZXNjcmlwdG9yUHJvdG8udHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90b1wiO1xuRmllbGREZXNjcmlwdG9yUHJvdG8uZmllbGRzID0gcHJvdG8yLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcIm5hbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJudW1iZXJcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNSAvKiBTY2FsYXJUeXBlLklOVDMyICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcImxhYmVsXCIsIGtpbmQ6IFwiZW51bVwiLCBUOiBwcm90bzIuZ2V0RW51bVR5cGUoRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWwpLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA1LCBuYW1lOiBcInR5cGVcIiwga2luZDogXCJlbnVtXCIsIFQ6IHByb3RvMi5nZXRFbnVtVHlwZShGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlKSwgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogNiwgbmFtZTogXCJ0eXBlX25hbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJleHRlbmRlZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA3LCBuYW1lOiBcImRlZmF1bHRfdmFsdWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogOSwgbmFtZTogXCJvbmVvZl9pbmRleFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA1IC8qIFNjYWxhclR5cGUuSU5UMzIgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDEwLCBuYW1lOiBcImpzb25fbmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA4LCBuYW1lOiBcIm9wdGlvbnNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEZpZWxkT3B0aW9ucywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMTcsIG5hbWU6IFwicHJvdG8zX29wdGlvbmFsXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUgfSxcbl0pO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uVHlwZVxuICovXG5leHBvcnQgdmFyIEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGU7XG4oZnVuY3Rpb24gKEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGUpIHtcbiAgICAvKipcbiAgICAgKiAwIGlzIHJlc2VydmVkIGZvciBlcnJvcnMuXG4gICAgICogT3JkZXIgaXMgd2VpcmQgZm9yIGhpc3RvcmljYWwgcmVhc29ucy5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX0RPVUJMRSA9IDE7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiRE9VQkxFXCJdID0gMV0gPSBcIkRPVUJMRVwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX0ZMT0FUID0gMjtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJGTE9BVFwiXSA9IDJdID0gXCJGTE9BVFwiO1xuICAgIC8qKlxuICAgICAqIE5vdCBaaWdaYWcgZW5jb2RlZC4gIE5lZ2F0aXZlIG51bWJlcnMgdGFrZSAxMCBieXRlcy4gIFVzZSBUWVBFX1NJTlQ2NCBpZlxuICAgICAqIG5lZ2F0aXZlIHZhbHVlcyBhcmUgbGlrZWx5LlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRZUEVfSU5UNjQgPSAzO1xuICAgICAqL1xuICAgIEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtcIklOVDY0XCJdID0gM10gPSBcIklOVDY0XCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRZUEVfVUlOVDY0ID0gNDtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJVSU5UNjRcIl0gPSA0XSA9IFwiVUlOVDY0XCI7XG4gICAgLyoqXG4gICAgICogTm90IFppZ1phZyBlbmNvZGVkLiAgTmVnYXRpdmUgbnVtYmVycyB0YWtlIDEwIGJ5dGVzLiAgVXNlIFRZUEVfU0lOVDMyIGlmXG4gICAgICogbmVnYXRpdmUgdmFsdWVzIGFyZSBsaWtlbHkuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9JTlQzMiA9IDU7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiSU5UMzJcIl0gPSA1XSA9IFwiSU5UMzJcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9GSVhFRDY0ID0gNjtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJGSVhFRDY0XCJdID0gNl0gPSBcIkZJWEVENjRcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9GSVhFRDMyID0gNztcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJGSVhFRDMyXCJdID0gN10gPSBcIkZJWEVEMzJcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9CT09MID0gODtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJCT09MXCJdID0gOF0gPSBcIkJPT0xcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9TVFJJTkcgPSA5O1xuICAgICAqL1xuICAgIEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtcIlNUUklOR1wiXSA9IDldID0gXCJTVFJJTkdcIjtcbiAgICAvKipcbiAgICAgKiBUYWctZGVsaW1pdGVkIGFnZ3JlZ2F0ZS5cbiAgICAgKiBHcm91cCB0eXBlIGlzIGRlcHJlY2F0ZWQgYW5kIG5vdCBzdXBwb3J0ZWQgYWZ0ZXIgZ29vZ2xlLnByb3RvYnVmLiBIb3dldmVyLCBQcm90bzNcbiAgICAgKiBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIHN0aWxsIGJlIGFibGUgdG8gcGFyc2UgdGhlIGdyb3VwIHdpcmUgZm9ybWF0IGFuZFxuICAgICAqIHRyZWF0IGdyb3VwIGZpZWxkcyBhcyB1bmtub3duIGZpZWxkcy4gIEluIEVkaXRpb25zLCB0aGUgZ3JvdXAgd2lyZSBmb3JtYXRcbiAgICAgKiBjYW4gYmUgZW5hYmxlZCB2aWEgdGhlIGBtZXNzYWdlX2VuY29kaW5nYCBmZWF0dXJlLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRZUEVfR1JPVVAgPSAxMDtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJHUk9VUFwiXSA9IDEwXSA9IFwiR1JPVVBcIjtcbiAgICAvKipcbiAgICAgKiBMZW5ndGgtZGVsaW1pdGVkIGFnZ3JlZ2F0ZS5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX01FU1NBR0UgPSAxMTtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJNRVNTQUdFXCJdID0gMTFdID0gXCJNRVNTQUdFXCI7XG4gICAgLyoqXG4gICAgICogTmV3IGluIHZlcnNpb24gMi5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX0JZVEVTID0gMTI7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiQllURVNcIl0gPSAxMl0gPSBcIkJZVEVTXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRZUEVfVUlOVDMyID0gMTM7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiVUlOVDMyXCJdID0gMTNdID0gXCJVSU5UMzJcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9FTlVNID0gMTQ7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiRU5VTVwiXSA9IDE0XSA9IFwiRU5VTVwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX1NGSVhFRDMyID0gMTU7XG4gICAgICovXG4gICAgRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW1wiU0ZJWEVEMzJcIl0gPSAxNV0gPSBcIlNGSVhFRDMyXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRZUEVfU0ZJWEVENjQgPSAxNjtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJTRklYRUQ2NFwiXSA9IDE2XSA9IFwiU0ZJWEVENjRcIjtcbiAgICAvKipcbiAgICAgKiBVc2VzIFppZ1phZyBlbmNvZGluZy5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBUWVBFX1NJTlQzMiA9IDE3O1xuICAgICAqL1xuICAgIEZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZVtcIlNJTlQzMlwiXSA9IDE3XSA9IFwiU0lOVDMyXCI7XG4gICAgLyoqXG4gICAgICogVXNlcyBaaWdaYWcgZW5jb2RpbmcuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVFlQRV9TSU5UNjQgPSAxODtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlW0ZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGVbXCJTSU5UNjRcIl0gPSAxOF0gPSBcIlNJTlQ2NFwiO1xufSkoRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZSB8fCAoRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZSA9IHt9KSk7XG4vLyBSZXRyaWV2ZSBlbnVtIG1ldGFkYXRhIHdpdGg6IHByb3RvMi5nZXRFbnVtVHlwZShGaWVsZERlc2NyaXB0b3JQcm90b19UeXBlKVxucHJvdG8yLnV0aWwuc2V0RW51bVR5cGUoRmllbGREZXNjcmlwdG9yUHJvdG9fVHlwZSwgXCJnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uVHlwZVwiLCBbXG4gICAgeyBubzogMSwgbmFtZTogXCJUWVBFX0RPVUJMRVwiIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJUWVBFX0ZMT0FUXCIgfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcIlRZUEVfSU5UNjRcIiB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwiVFlQRV9VSU5UNjRcIiB9LFxuICAgIHsgbm86IDUsIG5hbWU6IFwiVFlQRV9JTlQzMlwiIH0sXG4gICAgeyBubzogNiwgbmFtZTogXCJUWVBFX0ZJWEVENjRcIiB9LFxuICAgIHsgbm86IDcsIG5hbWU6IFwiVFlQRV9GSVhFRDMyXCIgfSxcbiAgICB7IG5vOiA4LCBuYW1lOiBcIlRZUEVfQk9PTFwiIH0sXG4gICAgeyBubzogOSwgbmFtZTogXCJUWVBFX1NUUklOR1wiIH0sXG4gICAgeyBubzogMTAsIG5hbWU6IFwiVFlQRV9HUk9VUFwiIH0sXG4gICAgeyBubzogMTEsIG5hbWU6IFwiVFlQRV9NRVNTQUdFXCIgfSxcbiAgICB7IG5vOiAxMiwgbmFtZTogXCJUWVBFX0JZVEVTXCIgfSxcbiAgICB7IG5vOiAxMywgbmFtZTogXCJUWVBFX1VJTlQzMlwiIH0sXG4gICAgeyBubzogMTQsIG5hbWU6IFwiVFlQRV9FTlVNXCIgfSxcbiAgICB7IG5vOiAxNSwgbmFtZTogXCJUWVBFX1NGSVhFRDMyXCIgfSxcbiAgICB7IG5vOiAxNiwgbmFtZTogXCJUWVBFX1NGSVhFRDY0XCIgfSxcbiAgICB7IG5vOiAxNywgbmFtZTogXCJUWVBFX1NJTlQzMlwiIH0sXG4gICAgeyBubzogMTgsIG5hbWU6IFwiVFlQRV9TSU5UNjRcIiB9LFxuXSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GaWVsZERlc2NyaXB0b3JQcm90by5MYWJlbFxuICovXG5leHBvcnQgdmFyIEZpZWxkRGVzY3JpcHRvclByb3RvX0xhYmVsO1xuKGZ1bmN0aW9uIChGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbCkge1xuICAgIC8qKlxuICAgICAqIDAgaXMgcmVzZXJ2ZWQgZm9yIGVycm9yc1xuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IExBQkVMX09QVElPTkFMID0gMTtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbFtGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbFtcIk9QVElPTkFMXCJdID0gMV0gPSBcIk9QVElPTkFMXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IExBQkVMX1JFUEVBVEVEID0gMztcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbFtGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbFtcIlJFUEVBVEVEXCJdID0gM10gPSBcIlJFUEVBVEVEXCI7XG4gICAgLyoqXG4gICAgICogVGhlIHJlcXVpcmVkIGxhYmVsIGlzIG9ubHkgYWxsb3dlZCBpbiBnb29nbGUucHJvdG9idWYuICBJbiBwcm90bzMgYW5kIEVkaXRpb25zXG4gICAgICogaXQncyBleHBsaWNpdGx5IHByb2hpYml0ZWQuICBJbiBFZGl0aW9ucywgdGhlIGBmaWVsZF9wcmVzZW5jZWAgZmVhdHVyZVxuICAgICAqIGNhbiBiZSB1c2VkIHRvIGdldCB0aGlzIGJlaGF2aW9yLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IExBQkVMX1JFUVVJUkVEID0gMjtcbiAgICAgKi9cbiAgICBGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbFtGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbFtcIlJFUVVJUkVEXCJdID0gMl0gPSBcIlJFUVVJUkVEXCI7XG59KShGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbCB8fCAoRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWwgPSB7fSkpO1xuLy8gUmV0cmlldmUgZW51bSBtZXRhZGF0YSB3aXRoOiBwcm90bzIuZ2V0RW51bVR5cGUoRmllbGREZXNjcmlwdG9yUHJvdG9fTGFiZWwpXG5wcm90bzIudXRpbC5zZXRFbnVtVHlwZShGaWVsZERlc2NyaXB0b3JQcm90b19MYWJlbCwgXCJnb29nbGUucHJvdG9idWYuRmllbGREZXNjcmlwdG9yUHJvdG8uTGFiZWxcIiwgW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiTEFCRUxfT1BUSU9OQUxcIiB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwiTEFCRUxfUkVQRUFURURcIiB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiTEFCRUxfUkVRVUlSRURcIiB9LFxuXSk7XG4vKipcbiAqIERlc2NyaWJlcyBhIG9uZW9mLlxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5PbmVvZkRlc2NyaXB0b3JQcm90b1xuICovXG5leHBvcnQgY2xhc3MgT25lb2ZEZXNjcmlwdG9yUHJvdG8gZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IE9uZW9mRGVzY3JpcHRvclByb3RvKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPbmVvZkRlc2NyaXB0b3JQcm90bygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgT25lb2ZEZXNjcmlwdG9yUHJvdG8oKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoT25lb2ZEZXNjcmlwdG9yUHJvdG8sIGEsIGIpO1xuICAgIH1cbn1cbk9uZW9mRGVzY3JpcHRvclByb3RvLnJ1bnRpbWUgPSBwcm90bzI7XG5PbmVvZkRlc2NyaXB0b3JQcm90by50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLk9uZW9mRGVzY3JpcHRvclByb3RvXCI7XG5PbmVvZkRlc2NyaXB0b3JQcm90by5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIm9wdGlvbnNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IE9uZW9mT3B0aW9ucywgb3B0OiB0cnVlIH0sXG5dKTtcbi8qKlxuICogRGVzY3JpYmVzIGFuIGVudW0gdHlwZS5cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b1xuICovXG5leHBvcnQgY2xhc3MgRW51bURlc2NyaXB0b3JQcm90byBleHRlbmRzIE1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZURlc2NyaXB0b3JQcm90byB2YWx1ZSA9IDI7XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnZhbHVlID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSYW5nZSBvZiByZXNlcnZlZCBudW1lcmljIHZhbHVlcy4gUmVzZXJ2ZWQgbnVtZXJpYyB2YWx1ZXMgbWF5IG5vdCBiZSB1c2VkXG4gICAgICAgICAqIGJ5IGVudW0gdmFsdWVzIGluIHRoZSBzYW1lIGVudW0gZGVjbGFyYXRpb24uIFJlc2VydmVkIHJhbmdlcyBtYXkgbm90XG4gICAgICAgICAqIG92ZXJsYXAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLkVudW1EZXNjcmlwdG9yUHJvdG8uRW51bVJlc2VydmVkUmFuZ2UgcmVzZXJ2ZWRfcmFuZ2UgPSA0O1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXNlcnZlZFJhbmdlID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNlcnZlZCBlbnVtIHZhbHVlIG5hbWVzLCB3aGljaCBtYXkgbm90IGJlIHJldXNlZC4gQSBnaXZlbiBuYW1lIG1heSBvbmx5XG4gICAgICAgICAqIGJlIHJlc2VydmVkIG9uY2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIHJlc2VydmVkX25hbWUgPSA1O1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yZXNlcnZlZE5hbWUgPSBbXTtcbiAgICAgICAgcHJvdG8yLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW51bURlc2NyaXB0b3JQcm90bygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW51bURlc2NyaXB0b3JQcm90bygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW51bURlc2NyaXB0b3JQcm90bygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvMi51dGlsLmVxdWFscyhFbnVtRGVzY3JpcHRvclByb3RvLCBhLCBiKTtcbiAgICB9XG59XG5FbnVtRGVzY3JpcHRvclByb3RvLnJ1bnRpbWUgPSBwcm90bzI7XG5FbnVtRGVzY3JpcHRvclByb3RvLnR5cGVOYW1lID0gXCJnb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90b1wiO1xuRW51bURlc2NyaXB0b3JQcm90by5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcInZhbHVlXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBFbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJvcHRpb25zXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBFbnVtT3B0aW9ucywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogNCwgbmFtZTogXCJyZXNlcnZlZF9yYW5nZVwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRW51bURlc2NyaXB0b3JQcm90b19FbnVtUmVzZXJ2ZWRSYW5nZSwgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiA1LCBuYW1lOiBcInJlc2VydmVkX25hbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbl0pO1xuLyoqXG4gKiBSYW5nZSBvZiByZXNlcnZlZCBudW1lcmljIHZhbHVlcy4gUmVzZXJ2ZWQgdmFsdWVzIG1heSBub3QgYmUgdXNlZCBieVxuICogZW50cmllcyBpbiB0aGUgc2FtZSBlbnVtLiBSZXNlcnZlZCByYW5nZXMgbWF5IG5vdCBvdmVybGFwLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIGlzIGRpc3RpbmN0IGZyb20gRGVzY3JpcHRvclByb3RvLlJlc2VydmVkUmFuZ2UgaW4gdGhhdCBpdFxuICogaXMgaW5jbHVzaXZlIHN1Y2ggdGhhdCBpdCBjYW4gYXBwcm9wcmlhdGVseSByZXByZXNlbnQgdGhlIGVudGlyZSBpbnQzMlxuICogZG9tYWluLlxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLkVudW1SZXNlcnZlZFJhbmdlXG4gKi9cbmV4cG9ydCBjbGFzcyBFbnVtRGVzY3JpcHRvclByb3RvX0VudW1SZXNlcnZlZFJhbmdlIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtRGVzY3JpcHRvclByb3RvX0VudW1SZXNlcnZlZFJhbmdlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtRGVzY3JpcHRvclByb3RvX0VudW1SZXNlcnZlZFJhbmdlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtRGVzY3JpcHRvclByb3RvX0VudW1SZXNlcnZlZFJhbmdlKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKEVudW1EZXNjcmlwdG9yUHJvdG9fRW51bVJlc2VydmVkUmFuZ2UsIGEsIGIpO1xuICAgIH1cbn1cbkVudW1EZXNjcmlwdG9yUHJvdG9fRW51bVJlc2VydmVkUmFuZ2UucnVudGltZSA9IHByb3RvMjtcbkVudW1EZXNjcmlwdG9yUHJvdG9fRW51bVJlc2VydmVkUmFuZ2UudHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5FbnVtRGVzY3JpcHRvclByb3RvLkVudW1SZXNlcnZlZFJhbmdlXCI7XG5FbnVtRGVzY3JpcHRvclByb3RvX0VudW1SZXNlcnZlZFJhbmdlLmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJzdGFydFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA1IC8qIFNjYWxhclR5cGUuSU5UMzIgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiZW5kXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDUgLyogU2NhbGFyVHlwZS5JTlQzMiAqLywgb3B0OiB0cnVlIH0sXG5dKTtcbi8qKlxuICogRGVzY3JpYmVzIGEgdmFsdWUgd2l0aGluIGFuIGVudW0uXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZURlc2NyaXB0b3JQcm90b1xuICovXG5leHBvcnQgY2xhc3MgRW51bVZhbHVlRGVzY3JpcHRvclByb3RvIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8oKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEVudW1WYWx1ZURlc2NyaXB0b3JQcm90bygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW51bVZhbHVlRGVzY3JpcHRvclByb3RvKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKEVudW1WYWx1ZURlc2NyaXB0b3JQcm90bywgYSwgYik7XG4gICAgfVxufVxuRW51bVZhbHVlRGVzY3JpcHRvclByb3RvLnJ1bnRpbWUgPSBwcm90bzI7XG5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG8udHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVEZXNjcmlwdG9yUHJvdG9cIjtcbkVudW1WYWx1ZURlc2NyaXB0b3JQcm90by5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIm51bWJlclwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA1IC8qIFNjYWxhclR5cGUuSU5UMzIgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwib3B0aW9uc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRW51bVZhbHVlT3B0aW9ucywgb3B0OiB0cnVlIH0sXG5dKTtcbi8qKlxuICogRGVzY3JpYmVzIGEgc2VydmljZS5cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBnb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90b1xuICovXG5leHBvcnQgY2xhc3MgU2VydmljZURlc2NyaXB0b3JQcm90byBleHRlbmRzIE1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLk1ldGhvZERlc2NyaXB0b3JQcm90byBtZXRob2QgPSAyO1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5tZXRob2QgPSBbXTtcbiAgICAgICAgcHJvdG8yLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VydmljZURlc2NyaXB0b3JQcm90bygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VydmljZURlc2NyaXB0b3JQcm90bygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VydmljZURlc2NyaXB0b3JQcm90bygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvMi51dGlsLmVxdWFscyhTZXJ2aWNlRGVzY3JpcHRvclByb3RvLCBhLCBiKTtcbiAgICB9XG59XG5TZXJ2aWNlRGVzY3JpcHRvclByb3RvLnJ1bnRpbWUgPSBwcm90bzI7XG5TZXJ2aWNlRGVzY3JpcHRvclByb3RvLnR5cGVOYW1lID0gXCJnb29nbGUucHJvdG9idWYuU2VydmljZURlc2NyaXB0b3JQcm90b1wiO1xuU2VydmljZURlc2NyaXB0b3JQcm90by5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIm1ldGhvZFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogTWV0aG9kRGVzY3JpcHRvclByb3RvLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwib3B0aW9uc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogU2VydmljZU9wdGlvbnMsIG9wdDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIERlc2NyaWJlcyBhIG1ldGhvZCBvZiBhIHNlcnZpY2UuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLk1ldGhvZERlc2NyaXB0b3JQcm90b1xuICovXG5leHBvcnQgY2xhc3MgTWV0aG9kRGVzY3JpcHRvclByb3RvIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNZXRob2REZXNjcmlwdG9yUHJvdG8oKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IE1ldGhvZERlc2NyaXB0b3JQcm90bygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWV0aG9kRGVzY3JpcHRvclByb3RvKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKE1ldGhvZERlc2NyaXB0b3JQcm90bywgYSwgYik7XG4gICAgfVxufVxuTWV0aG9kRGVzY3JpcHRvclByb3RvLnJ1bnRpbWUgPSBwcm90bzI7XG5NZXRob2REZXNjcmlwdG9yUHJvdG8udHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5NZXRob2REZXNjcmlwdG9yUHJvdG9cIjtcbk1ldGhvZERlc2NyaXB0b3JQcm90by5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImlucHV0X3R5cGVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJvdXRwdXRfdHlwZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcIm9wdGlvbnNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IE1ldGhvZE9wdGlvbnMsIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDUsIG5hbWU6IFwiY2xpZW50X3N0cmVhbWluZ1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLywgb3B0OiB0cnVlLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIHsgbm86IDYsIG5hbWU6IFwic2VydmVyX3N0cmVhbWluZ1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLywgb3B0OiB0cnVlLCBkZWZhdWx0OiBmYWxzZSB9LFxuXSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5GaWxlT3B0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgRmlsZU9wdGlvbnMgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGFyc2VyIHN0b3JlcyBvcHRpb25zIGl0IGRvZXNuJ3QgcmVjb2duaXplIGhlcmUuXG4gICAgICAgICAqIFNlZSB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIFwiT3B0aW9uc1wiIHNlY3Rpb24gYWJvdmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24gdW5pbnRlcnByZXRlZF9vcHRpb24gPSA5OTk7XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVuaW50ZXJwcmV0ZWRPcHRpb24gPSBbXTtcbiAgICAgICAgcHJvdG8yLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmlsZU9wdGlvbnMoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZpbGVPcHRpb25zKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWxlT3B0aW9ucygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvMi51dGlsLmVxdWFscyhGaWxlT3B0aW9ucywgYSwgYik7XG4gICAgfVxufVxuRmlsZU9wdGlvbnMucnVudGltZSA9IHByb3RvMjtcbkZpbGVPcHRpb25zLnR5cGVOYW1lID0gXCJnb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnNcIjtcbkZpbGVPcHRpb25zLmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJqYXZhX3BhY2thZ2VcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogOCwgbmFtZTogXCJqYXZhX291dGVyX2NsYXNzbmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAxMCwgbmFtZTogXCJqYXZhX211bHRpcGxlX2ZpbGVzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgeyBubzogMjAsIG5hbWU6IFwiamF2YV9nZW5lcmF0ZV9lcXVhbHNfYW5kX2hhc2hcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDI3LCBuYW1lOiBcImphdmFfc3RyaW5nX2NoZWNrX3V0ZjhcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8sIG9wdDogdHJ1ZSwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB7IG5vOiA5LCBuYW1lOiBcIm9wdGltaXplX2ZvclwiLCBraW5kOiBcImVudW1cIiwgVDogcHJvdG8yLmdldEVudW1UeXBlKEZpbGVPcHRpb25zX09wdGltaXplTW9kZSksIG9wdDogdHJ1ZSwgZGVmYXVsdDogRmlsZU9wdGlvbnNfT3B0aW1pemVNb2RlLlNQRUVEIH0sXG4gICAgeyBubzogMTEsIG5hbWU6IFwiZ29fcGFja2FnZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAxNiwgbmFtZTogXCJjY19nZW5lcmljX3NlcnZpY2VzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgeyBubzogMTcsIG5hbWU6IFwiamF2YV9nZW5lcmljX3NlcnZpY2VzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgeyBubzogMTgsIG5hbWU6IFwicHlfZ2VuZXJpY19zZXJ2aWNlc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLywgb3B0OiB0cnVlLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIHsgbm86IDQyLCBuYW1lOiBcInBocF9nZW5lcmljX3NlcnZpY2VzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgeyBubzogMjMsIG5hbWU6IFwiZGVwcmVjYXRlZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLywgb3B0OiB0cnVlLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIHsgbm86IDMxLCBuYW1lOiBcImNjX2VuYWJsZV9hcmVuYXNcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8sIG9wdDogdHJ1ZSwgZGVmYXVsdDogdHJ1ZSB9LFxuICAgIHsgbm86IDM2LCBuYW1lOiBcIm9iamNfY2xhc3NfcHJlZml4XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDM3LCBuYW1lOiBcImNzaGFycF9uYW1lc3BhY2VcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMzksIG5hbWU6IFwic3dpZnRfcHJlZml4XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDQwLCBuYW1lOiBcInBocF9jbGFzc19wcmVmaXhcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogNDEsIG5hbWU6IFwicGhwX25hbWVzcGFjZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA0NCwgbmFtZTogXCJwaHBfbWV0YWRhdGFfbmFtZXNwYWNlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDQ1LCBuYW1lOiBcInJ1YnlfcGFja2FnZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA1MCwgbmFtZTogXCJmZWF0dXJlc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRmVhdHVyZVNldCwgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogOTk5LCBuYW1lOiBcInVuaW50ZXJwcmV0ZWRfb3B0aW9uXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBVbmludGVycHJldGVkT3B0aW9uLCByZXBlYXRlZDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIEdlbmVyYXRlZCBjbGFzc2VzIGNhbiBiZSBvcHRpbWl6ZWQgZm9yIHNwZWVkIG9yIGNvZGUgc2l6ZS5cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmlsZU9wdGlvbnMuT3B0aW1pemVNb2RlXG4gKi9cbmV4cG9ydCB2YXIgRmlsZU9wdGlvbnNfT3B0aW1pemVNb2RlO1xuKGZ1bmN0aW9uIChGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGUpIHtcbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBjb21wbGV0ZSBjb2RlIGZvciBwYXJzaW5nLCBzZXJpYWxpemF0aW9uLFxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFNQRUVEID0gMTtcbiAgICAgKi9cbiAgICBGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGVbRmlsZU9wdGlvbnNfT3B0aW1pemVNb2RlW1wiU1BFRURcIl0gPSAxXSA9IFwiU1BFRURcIjtcbiAgICAvKipcbiAgICAgKiBldGMuXG4gICAgICpcbiAgICAgKiBVc2UgUmVmbGVjdGlvbk9wcyB0byBpbXBsZW1lbnQgdGhlc2UgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBDT0RFX1NJWkUgPSAyO1xuICAgICAqL1xuICAgIEZpbGVPcHRpb25zX09wdGltaXplTW9kZVtGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGVbXCJDT0RFX1NJWkVcIl0gPSAyXSA9IFwiQ09ERV9TSVpFXCI7XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgY29kZSB1c2luZyBNZXNzYWdlTGl0ZSBhbmQgdGhlIGxpdGUgcnVudGltZS5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBMSVRFX1JVTlRJTUUgPSAzO1xuICAgICAqL1xuICAgIEZpbGVPcHRpb25zX09wdGltaXplTW9kZVtGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGVbXCJMSVRFX1JVTlRJTUVcIl0gPSAzXSA9IFwiTElURV9SVU5USU1FXCI7XG59KShGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGUgfHwgKEZpbGVPcHRpb25zX09wdGltaXplTW9kZSA9IHt9KSk7XG4vLyBSZXRyaWV2ZSBlbnVtIG1ldGFkYXRhIHdpdGg6IHByb3RvMi5nZXRFbnVtVHlwZShGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGUpXG5wcm90bzIudXRpbC5zZXRFbnVtVHlwZShGaWxlT3B0aW9uc19PcHRpbWl6ZU1vZGUsIFwiZ29vZ2xlLnByb3RvYnVmLkZpbGVPcHRpb25zLk9wdGltaXplTW9kZVwiLCBbXG4gICAgeyBubzogMSwgbmFtZTogXCJTUEVFRFwiIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJDT0RFX1NJWkVcIiB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwiTElURV9SVU5USU1FXCIgfSxcbl0pO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBnb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc3NhZ2VPcHRpb25zIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBhcnNlciBzdG9yZXMgb3B0aW9ucyBpdCBkb2Vzbid0IHJlY29nbml6ZSBoZXJlLiBTZWUgYWJvdmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24gdW5pbnRlcnByZXRlZF9vcHRpb24gPSA5OTk7XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVuaW50ZXJwcmV0ZWRPcHRpb24gPSBbXTtcbiAgICAgICAgcHJvdG8yLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWVzc2FnZU9wdGlvbnMoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IE1lc3NhZ2VPcHRpb25zKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNZXNzYWdlT3B0aW9ucygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvMi51dGlsLmVxdWFscyhNZXNzYWdlT3B0aW9ucywgYSwgYik7XG4gICAgfVxufVxuTWVzc2FnZU9wdGlvbnMucnVudGltZSA9IHByb3RvMjtcbk1lc3NhZ2VPcHRpb25zLnR5cGVOYW1lID0gXCJnb29nbGUucHJvdG9idWYuTWVzc2FnZU9wdGlvbnNcIjtcbk1lc3NhZ2VPcHRpb25zLmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJtZXNzYWdlX3NldF93aXJlX2Zvcm1hdFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLywgb3B0OiB0cnVlLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwibm9fc3RhbmRhcmRfZGVzY3JpcHRvcl9hY2Nlc3NvclwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLywgb3B0OiB0cnVlLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwiZGVwcmVjYXRlZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLywgb3B0OiB0cnVlLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgIHsgbm86IDcsIG5hbWU6IFwibWFwX2VudHJ5XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAxMSwgbmFtZTogXCJkZXByZWNhdGVkX2xlZ2FjeV9qc29uX2ZpZWxkX2NvbmZsaWN0c1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMTIsIG5hbWU6IFwiZmVhdHVyZXNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEZlYXR1cmVTZXQsIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDk5OSwgbmFtZTogXCJ1bmludGVycHJldGVkX29wdGlvblwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogVW5pbnRlcnByZXRlZE9wdGlvbiwgcmVwZWF0ZWQ6IHRydWUgfSxcbl0pO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWVsZE9wdGlvbnMgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuT3B0aW9uVGFyZ2V0VHlwZSB0YXJnZXRzID0gMTk7XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnRhcmdldHMgPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5FZGl0aW9uRGVmYXVsdCBlZGl0aW9uX2RlZmF1bHRzID0gMjA7XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmVkaXRpb25EZWZhdWx0cyA9IFtdO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBhcnNlciBzdG9yZXMgb3B0aW9ucyBpdCBkb2Vzbid0IHJlY29nbml6ZSBoZXJlLiBTZWUgYWJvdmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24gdW5pbnRlcnByZXRlZF9vcHRpb24gPSA5OTk7XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVuaW50ZXJwcmV0ZWRPcHRpb24gPSBbXTtcbiAgICAgICAgcHJvdG8yLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmllbGRPcHRpb25zKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZE9wdGlvbnMoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZpZWxkT3B0aW9ucygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvMi51dGlsLmVxdWFscyhGaWVsZE9wdGlvbnMsIGEsIGIpO1xuICAgIH1cbn1cbkZpZWxkT3B0aW9ucy5ydW50aW1lID0gcHJvdG8yO1xuRmllbGRPcHRpb25zLnR5cGVOYW1lID0gXCJnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zXCI7XG5GaWVsZE9wdGlvbnMuZmllbGRzID0gcHJvdG8yLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImN0eXBlXCIsIGtpbmQ6IFwiZW51bVwiLCBUOiBwcm90bzIuZ2V0RW51bVR5cGUoRmllbGRPcHRpb25zX0NUeXBlKSwgb3B0OiB0cnVlLCBkZWZhdWx0OiBGaWVsZE9wdGlvbnNfQ1R5cGUuU1RSSU5HIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJwYWNrZWRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDYsIG5hbWU6IFwianN0eXBlXCIsIGtpbmQ6IFwiZW51bVwiLCBUOiBwcm90bzIuZ2V0RW51bVR5cGUoRmllbGRPcHRpb25zX0pTVHlwZSksIG9wdDogdHJ1ZSwgZGVmYXVsdDogRmllbGRPcHRpb25zX0pTVHlwZS5KU19OT1JNQUwgfSxcbiAgICB7IG5vOiA1LCBuYW1lOiBcImxhenlcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8sIG9wdDogdHJ1ZSwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB7IG5vOiAxNSwgbmFtZTogXCJ1bnZlcmlmaWVkX2xhenlcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8sIG9wdDogdHJ1ZSwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcImRlcHJlY2F0ZWRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8sIG9wdDogdHJ1ZSwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB7IG5vOiAxMCwgbmFtZTogXCJ3ZWFrXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgeyBubzogMTYsIG5hbWU6IFwiZGVidWdfcmVkYWN0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgeyBubzogMTcsIG5hbWU6IFwicmV0ZW50aW9uXCIsIGtpbmQ6IFwiZW51bVwiLCBUOiBwcm90bzIuZ2V0RW51bVR5cGUoRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbiksIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDE5LCBuYW1lOiBcInRhcmdldHNcIiwga2luZDogXCJlbnVtXCIsIFQ6IHByb3RvMi5nZXRFbnVtVHlwZShGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZSksIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogMjAsIG5hbWU6IFwiZWRpdGlvbl9kZWZhdWx0c1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRmllbGRPcHRpb25zX0VkaXRpb25EZWZhdWx0LCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDIxLCBuYW1lOiBcImZlYXR1cmVzXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBGZWF0dXJlU2V0LCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA5OTksIG5hbWU6IFwidW5pbnRlcnByZXRlZF9vcHRpb25cIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFVuaW50ZXJwcmV0ZWRPcHRpb24sIHJlcGVhdGVkOiB0cnVlIH0sXG5dKTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5DVHlwZVxuICovXG5leHBvcnQgdmFyIEZpZWxkT3B0aW9uc19DVHlwZTtcbihmdW5jdGlvbiAoRmllbGRPcHRpb25zX0NUeXBlKSB7XG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBtb2RlLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFNUUklORyA9IDA7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX0NUeXBlW0ZpZWxkT3B0aW9uc19DVHlwZVtcIlNUUklOR1wiXSA9IDBdID0gXCJTVFJJTkdcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgb3B0aW9uIFtjdHlwZT1DT1JEXSBtYXkgYmUgYXBwbGllZCB0byBhIG5vbi1yZXBlYXRlZCBmaWVsZCBvZiB0eXBlXG4gICAgICogXCJieXRlc1wiLiBJdCBpbmRpY2F0ZXMgdGhhdCBpbiBDKyssIHRoZSBkYXRhIHNob3VsZCBiZSBzdG9yZWQgaW4gYSBDb3JkXG4gICAgICogaW5zdGVhZCBvZiBhIHN0cmluZy4gIEZvciB2ZXJ5IGxhcmdlIHN0cmluZ3MsIHRoaXMgbWF5IHJlZHVjZSBtZW1vcnlcbiAgICAgKiBmcmFnbWVudGF0aW9uLiBJdCBtYXkgYWxzbyBhbGxvdyBiZXR0ZXIgcGVyZm9ybWFuY2Ugd2hlbiBwYXJzaW5nIGZyb20gYVxuICAgICAqIENvcmQsIG9yIHdoZW4gcGFyc2luZyB3aXRoIGFsaWFzaW5nIGVuYWJsZWQsIGFzIHRoZSBwYXJzZWQgQ29yZCBtYXkgdGhlblxuICAgICAqIGFsaWFzIHRoZSBvcmlnaW5hbCBidWZmZXIuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogQ09SRCA9IDE7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX0NUeXBlW0ZpZWxkT3B0aW9uc19DVHlwZVtcIkNPUkRcIl0gPSAxXSA9IFwiQ09SRFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBTVFJJTkdfUElFQ0UgPSAyO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19DVHlwZVtGaWVsZE9wdGlvbnNfQ1R5cGVbXCJTVFJJTkdfUElFQ0VcIl0gPSAyXSA9IFwiU1RSSU5HX1BJRUNFXCI7XG59KShGaWVsZE9wdGlvbnNfQ1R5cGUgfHwgKEZpZWxkT3B0aW9uc19DVHlwZSA9IHt9KSk7XG4vLyBSZXRyaWV2ZSBlbnVtIG1ldGFkYXRhIHdpdGg6IHByb3RvMi5nZXRFbnVtVHlwZShGaWVsZE9wdGlvbnNfQ1R5cGUpXG5wcm90bzIudXRpbC5zZXRFbnVtVHlwZShGaWVsZE9wdGlvbnNfQ1R5cGUsIFwiZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5DVHlwZVwiLCBbXG4gICAgeyBubzogMCwgbmFtZTogXCJTVFJJTkdcIiB9LFxuICAgIHsgbm86IDEsIG5hbWU6IFwiQ09SRFwiIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJTVFJJTkdfUElFQ0VcIiB9LFxuXSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuSlNUeXBlXG4gKi9cbmV4cG9ydCB2YXIgRmllbGRPcHRpb25zX0pTVHlwZTtcbihmdW5jdGlvbiAoRmllbGRPcHRpb25zX0pTVHlwZSkge1xuICAgIC8qKlxuICAgICAqIFVzZSB0aGUgZGVmYXVsdCB0eXBlLlxuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEpTX05PUk1BTCA9IDA7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX0pTVHlwZVtGaWVsZE9wdGlvbnNfSlNUeXBlW1wiSlNfTk9STUFMXCJdID0gMF0gPSBcIkpTX05PUk1BTFwiO1xuICAgIC8qKlxuICAgICAqIFVzZSBKYXZhU2NyaXB0IHN0cmluZ3MuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogSlNfU1RSSU5HID0gMTtcbiAgICAgKi9cbiAgICBGaWVsZE9wdGlvbnNfSlNUeXBlW0ZpZWxkT3B0aW9uc19KU1R5cGVbXCJKU19TVFJJTkdcIl0gPSAxXSA9IFwiSlNfU1RSSU5HXCI7XG4gICAgLyoqXG4gICAgICogVXNlIEphdmFTY3JpcHQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBKU19OVU1CRVIgPSAyO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19KU1R5cGVbRmllbGRPcHRpb25zX0pTVHlwZVtcIkpTX05VTUJFUlwiXSA9IDJdID0gXCJKU19OVU1CRVJcIjtcbn0pKEZpZWxkT3B0aW9uc19KU1R5cGUgfHwgKEZpZWxkT3B0aW9uc19KU1R5cGUgPSB7fSkpO1xuLy8gUmV0cmlldmUgZW51bSBtZXRhZGF0YSB3aXRoOiBwcm90bzIuZ2V0RW51bVR5cGUoRmllbGRPcHRpb25zX0pTVHlwZSlcbnByb3RvMi51dGlsLnNldEVudW1UeXBlKEZpZWxkT3B0aW9uc19KU1R5cGUsIFwiZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5KU1R5cGVcIiwgW1xuICAgIHsgbm86IDAsIG5hbWU6IFwiSlNfTk9STUFMXCIgfSxcbiAgICB7IG5vOiAxLCBuYW1lOiBcIkpTX1NUUklOR1wiIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJKU19OVU1CRVJcIiB9LFxuXSk7XG4vKipcbiAqIElmIHNldCB0byBSRVRFTlRJT05fU09VUkNFLCB0aGUgb3B0aW9uIHdpbGwgYmUgb21pdHRlZCBmcm9tIHRoZSBiaW5hcnkuXG4gKiBOb3RlOiBhcyBvZiBKYW51YXJ5IDIwMjMsIHN1cHBvcnQgZm9yIHRoaXMgaXMgaW4gcHJvZ3Jlc3MgYW5kIGRvZXMgbm90IHlldFxuICogaGF2ZSBhbiBlZmZlY3QgKGIvMjY0NTkzNDg5KS5cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLk9wdGlvblJldGVudGlvblxuICovXG5leHBvcnQgdmFyIEZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb247XG4oZnVuY3Rpb24gKEZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb24pIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogUkVURU5USU9OX1VOS05PV04gPSAwO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb25bRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbltcIlJFVEVOVElPTl9VTktOT1dOXCJdID0gMF0gPSBcIlJFVEVOVElPTl9VTktOT1dOXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFJFVEVOVElPTl9SVU5USU1FID0gMTtcbiAgICAgKi9cbiAgICBGaWVsZE9wdGlvbnNfT3B0aW9uUmV0ZW50aW9uW0ZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb25bXCJSRVRFTlRJT05fUlVOVElNRVwiXSA9IDFdID0gXCJSRVRFTlRJT05fUlVOVElNRVwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBSRVRFTlRJT05fU09VUkNFID0gMjtcbiAgICAgKi9cbiAgICBGaWVsZE9wdGlvbnNfT3B0aW9uUmV0ZW50aW9uW0ZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb25bXCJSRVRFTlRJT05fU09VUkNFXCJdID0gMl0gPSBcIlJFVEVOVElPTl9TT1VSQ0VcIjtcbn0pKEZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb24gfHwgKEZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb24gPSB7fSkpO1xuLy8gUmV0cmlldmUgZW51bSBtZXRhZGF0YSB3aXRoOiBwcm90bzIuZ2V0RW51bVR5cGUoRmllbGRPcHRpb25zX09wdGlvblJldGVudGlvbilcbnByb3RvMi51dGlsLnNldEVudW1UeXBlKEZpZWxkT3B0aW9uc19PcHRpb25SZXRlbnRpb24sIFwiZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5PcHRpb25SZXRlbnRpb25cIiwgW1xuICAgIHsgbm86IDAsIG5hbWU6IFwiUkVURU5USU9OX1VOS05PV05cIiB9LFxuICAgIHsgbm86IDEsIG5hbWU6IFwiUkVURU5USU9OX1JVTlRJTUVcIiB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiUkVURU5USU9OX1NPVVJDRVwiIH0sXG5dKTtcbi8qKlxuICogVGhpcyBpbmRpY2F0ZXMgdGhlIHR5cGVzIG9mIGVudGl0aWVzIHRoYXQgdGhlIGZpZWxkIG1heSBhcHBseSB0byB3aGVuIHVzZWRcbiAqIGFzIGFuIG9wdGlvbi4gSWYgaXQgaXMgdW5zZXQsIHRoZW4gdGhlIGZpZWxkIG1heSBiZSBmcmVlbHkgdXNlZCBhcyBhblxuICogb3B0aW9uIG9uIGFueSBraW5kIG9mIGVudGl0eS4gTm90ZTogYXMgb2YgSmFudWFyeSAyMDIzLCBzdXBwb3J0IGZvciB0aGlzIGlzXG4gKiBpbiBwcm9ncmVzcyBhbmQgZG9lcyBub3QgeWV0IGhhdmUgYW4gZWZmZWN0IChiLzI2NDU5MzQ4OSkuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5PcHRpb25UYXJnZXRUeXBlXG4gKi9cbmV4cG9ydCB2YXIgRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGU7XG4oZnVuY3Rpb24gKEZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlKSB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRBUkdFVF9UWVBFX1VOS05PV04gPSAwO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW0ZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW1wiVEFSR0VUX1RZUEVfVU5LTk9XTlwiXSA9IDBdID0gXCJUQVJHRVRfVFlQRV9VTktOT1dOXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRBUkdFVF9UWVBFX0ZJTEUgPSAxO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW0ZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW1wiVEFSR0VUX1RZUEVfRklMRVwiXSA9IDFdID0gXCJUQVJHRVRfVFlQRV9GSUxFXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRBUkdFVF9UWVBFX0VYVEVOU0lPTl9SQU5HRSA9IDI7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbXCJUQVJHRVRfVFlQRV9FWFRFTlNJT05fUkFOR0VcIl0gPSAyXSA9IFwiVEFSR0VUX1RZUEVfRVhURU5TSU9OX1JBTkdFXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRBUkdFVF9UWVBFX01FU1NBR0UgPSAzO1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW0ZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW1wiVEFSR0VUX1RZUEVfTUVTU0FHRVwiXSA9IDNdID0gXCJUQVJHRVRfVFlQRV9NRVNTQUdFXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRBUkdFVF9UWVBFX0ZJRUxEID0gNDtcbiAgICAgKi9cbiAgICBGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZVtGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZVtcIlRBUkdFVF9UWVBFX0ZJRUxEXCJdID0gNF0gPSBcIlRBUkdFVF9UWVBFX0ZJRUxEXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRBUkdFVF9UWVBFX09ORU9GID0gNTtcbiAgICAgKi9cbiAgICBGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZVtGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZVtcIlRBUkdFVF9UWVBFX09ORU9GXCJdID0gNV0gPSBcIlRBUkdFVF9UWVBFX09ORU9GXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRBUkdFVF9UWVBFX0VOVU0gPSA2O1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW0ZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW1wiVEFSR0VUX1RZUEVfRU5VTVwiXSA9IDZdID0gXCJUQVJHRVRfVFlQRV9FTlVNXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRBUkdFVF9UWVBFX0VOVU1fRU5UUlkgPSA3O1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW0ZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW1wiVEFSR0VUX1RZUEVfRU5VTV9FTlRSWVwiXSA9IDddID0gXCJUQVJHRVRfVFlQRV9FTlVNX0VOVFJZXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRBUkdFVF9UWVBFX1NFUlZJQ0UgPSA4O1xuICAgICAqL1xuICAgIEZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW0ZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlW1wiVEFSR0VUX1RZUEVfU0VSVklDRVwiXSA9IDhdID0gXCJUQVJHRVRfVFlQRV9TRVJWSUNFXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFRBUkdFVF9UWVBFX01FVEhPRCA9IDk7XG4gICAgICovXG4gICAgRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGVbXCJUQVJHRVRfVFlQRV9NRVRIT0RcIl0gPSA5XSA9IFwiVEFSR0VUX1RZUEVfTUVUSE9EXCI7XG59KShGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZSB8fCAoRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGUgPSB7fSkpO1xuLy8gUmV0cmlldmUgZW51bSBtZXRhZGF0YSB3aXRoOiBwcm90bzIuZ2V0RW51bVR5cGUoRmllbGRPcHRpb25zX09wdGlvblRhcmdldFR5cGUpXG5wcm90bzIudXRpbC5zZXRFbnVtVHlwZShGaWVsZE9wdGlvbnNfT3B0aW9uVGFyZ2V0VHlwZSwgXCJnb29nbGUucHJvdG9idWYuRmllbGRPcHRpb25zLk9wdGlvblRhcmdldFR5cGVcIiwgW1xuICAgIHsgbm86IDAsIG5hbWU6IFwiVEFSR0VUX1RZUEVfVU5LTk9XTlwiIH0sXG4gICAgeyBubzogMSwgbmFtZTogXCJUQVJHRVRfVFlQRV9GSUxFXCIgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIlRBUkdFVF9UWVBFX0VYVEVOU0lPTl9SQU5HRVwiIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJUQVJHRVRfVFlQRV9NRVNTQUdFXCIgfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcIlRBUkdFVF9UWVBFX0ZJRUxEXCIgfSxcbiAgICB7IG5vOiA1LCBuYW1lOiBcIlRBUkdFVF9UWVBFX09ORU9GXCIgfSxcbiAgICB7IG5vOiA2LCBuYW1lOiBcIlRBUkdFVF9UWVBFX0VOVU1cIiB9LFxuICAgIHsgbm86IDcsIG5hbWU6IFwiVEFSR0VUX1RZUEVfRU5VTV9FTlRSWVwiIH0sXG4gICAgeyBubzogOCwgbmFtZTogXCJUQVJHRVRfVFlQRV9TRVJWSUNFXCIgfSxcbiAgICB7IG5vOiA5LCBuYW1lOiBcIlRBUkdFVF9UWVBFX01FVEhPRFwiIH0sXG5dKTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkZpZWxkT3B0aW9ucy5FZGl0aW9uRGVmYXVsdFxuICovXG5leHBvcnQgY2xhc3MgRmllbGRPcHRpb25zX0VkaXRpb25EZWZhdWx0IGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaWVsZE9wdGlvbnNfRWRpdGlvbkRlZmF1bHQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZpZWxkT3B0aW9uc19FZGl0aW9uRGVmYXVsdCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmllbGRPcHRpb25zX0VkaXRpb25EZWZhdWx0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKEZpZWxkT3B0aW9uc19FZGl0aW9uRGVmYXVsdCwgYSwgYik7XG4gICAgfVxufVxuRmllbGRPcHRpb25zX0VkaXRpb25EZWZhdWx0LnJ1bnRpbWUgPSBwcm90bzI7XG5GaWVsZE9wdGlvbnNfRWRpdGlvbkRlZmF1bHQudHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5GaWVsZE9wdGlvbnMuRWRpdGlvbkRlZmF1bHRcIjtcbkZpZWxkT3B0aW9uc19FZGl0aW9uRGVmYXVsdC5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDMsIG5hbWU6IFwiZWRpdGlvblwiLCBraW5kOiBcImVudW1cIiwgVDogcHJvdG8yLmdldEVudW1UeXBlKEVkaXRpb24pLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcInZhbHVlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIG9wdDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5PbmVvZk9wdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIE9uZW9mT3B0aW9ucyBleHRlbmRzIE1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwYXJzZXIgc3RvcmVzIG9wdGlvbnMgaXQgZG9lc24ndCByZWNvZ25pemUgaGVyZS4gU2VlIGFib3ZlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uIHVuaW50ZXJwcmV0ZWRfb3B0aW9uID0gOTk5O1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51bmludGVycHJldGVkT3B0aW9uID0gW107XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IE9uZW9mT3B0aW9ucygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgT25lb2ZPcHRpb25zKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPbmVvZk9wdGlvbnMoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoT25lb2ZPcHRpb25zLCBhLCBiKTtcbiAgICB9XG59XG5PbmVvZk9wdGlvbnMucnVudGltZSA9IHByb3RvMjtcbk9uZW9mT3B0aW9ucy50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLk9uZW9mT3B0aW9uc1wiO1xuT25lb2ZPcHRpb25zLmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJmZWF0dXJlc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRmVhdHVyZVNldCwgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogOTk5LCBuYW1lOiBcInVuaW50ZXJwcmV0ZWRfb3B0aW9uXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBVbmludGVycHJldGVkT3B0aW9uLCByZXBlYXRlZDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5FbnVtT3B0aW9uc1xuICovXG5leHBvcnQgY2xhc3MgRW51bU9wdGlvbnMgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGFyc2VyIHN0b3JlcyBvcHRpb25zIGl0IGRvZXNuJ3QgcmVjb2duaXplIGhlcmUuIFNlZSBhYm92ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbiB1bmludGVycHJldGVkX29wdGlvbiA9IDk5OTtcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudW5pbnRlcnByZXRlZE9wdGlvbiA9IFtdO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtT3B0aW9ucygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW51bU9wdGlvbnMoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEVudW1PcHRpb25zKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKEVudW1PcHRpb25zLCBhLCBiKTtcbiAgICB9XG59XG5FbnVtT3B0aW9ucy5ydW50aW1lID0gcHJvdG8yO1xuRW51bU9wdGlvbnMudHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5FbnVtT3B0aW9uc1wiO1xuRW51bU9wdGlvbnMuZmllbGRzID0gcHJvdG8yLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAyLCBuYW1lOiBcImFsbG93X2FsaWFzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcImRlcHJlY2F0ZWRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8sIG9wdDogdHJ1ZSwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB7IG5vOiA2LCBuYW1lOiBcImRlcHJlY2F0ZWRfbGVnYWN5X2pzb25fZmllbGRfY29uZmxpY3RzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA3LCBuYW1lOiBcImZlYXR1cmVzXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBGZWF0dXJlU2V0LCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA5OTksIG5hbWU6IFwidW5pbnRlcnByZXRlZF9vcHRpb25cIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFVuaW50ZXJwcmV0ZWRPcHRpb24sIHJlcGVhdGVkOiB0cnVlIH0sXG5dKTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkVudW1WYWx1ZU9wdGlvbnNcbiAqL1xuZXhwb3J0IGNsYXNzIEVudW1WYWx1ZU9wdGlvbnMgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgcGFyc2VyIHN0b3JlcyBvcHRpb25zIGl0IGRvZXNuJ3QgcmVjb2duaXplIGhlcmUuIFNlZSBhYm92ZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbiB1bmludGVycHJldGVkX29wdGlvbiA9IDk5OTtcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMudW5pbnRlcnByZXRlZE9wdGlvbiA9IFtdO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtVmFsdWVPcHRpb25zKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtVmFsdWVPcHRpb25zKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbnVtVmFsdWVPcHRpb25zKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKEVudW1WYWx1ZU9wdGlvbnMsIGEsIGIpO1xuICAgIH1cbn1cbkVudW1WYWx1ZU9wdGlvbnMucnVudGltZSA9IHByb3RvMjtcbkVudW1WYWx1ZU9wdGlvbnMudHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5FbnVtVmFsdWVPcHRpb25zXCI7XG5FbnVtVmFsdWVPcHRpb25zLmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJkZXByZWNhdGVkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJmZWF0dXJlc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRmVhdHVyZVNldCwgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJkZWJ1Z19yZWRhY3RcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8sIG9wdDogdHJ1ZSwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB7IG5vOiA5OTksIG5hbWU6IFwidW5pbnRlcnByZXRlZF9vcHRpb25cIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFVuaW50ZXJwcmV0ZWRPcHRpb24sIHJlcGVhdGVkOiB0cnVlIH0sXG5dKTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlT3B0aW9ucyBleHRlbmRzIE1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBwYXJzZXIgc3RvcmVzIG9wdGlvbnMgaXQgZG9lc24ndCByZWNvZ25pemUgaGVyZS4gU2VlIGFib3ZlLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uIHVuaW50ZXJwcmV0ZWRfb3B0aW9uID0gOTk5O1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy51bmludGVycHJldGVkT3B0aW9uID0gW107XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFNlcnZpY2VPcHRpb25zKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTZXJ2aWNlT3B0aW9ucygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VydmljZU9wdGlvbnMoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoU2VydmljZU9wdGlvbnMsIGEsIGIpO1xuICAgIH1cbn1cblNlcnZpY2VPcHRpb25zLnJ1bnRpbWUgPSBwcm90bzI7XG5TZXJ2aWNlT3B0aW9ucy50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLlNlcnZpY2VPcHRpb25zXCI7XG5TZXJ2aWNlT3B0aW9ucy5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDM0LCBuYW1lOiBcImZlYXR1cmVzXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBGZWF0dXJlU2V0LCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAzMywgbmFtZTogXCJkZXByZWNhdGVkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovLCBvcHQ6IHRydWUsIGRlZmF1bHQ6IGZhbHNlIH0sXG4gICAgeyBubzogOTk5LCBuYW1lOiBcInVuaW50ZXJwcmV0ZWRfb3B0aW9uXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBVbmludGVycHJldGVkT3B0aW9uLCByZXBlYXRlZDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5NZXRob2RPcHRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXRob2RPcHRpb25zIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHBhcnNlciBzdG9yZXMgb3B0aW9ucyBpdCBkb2Vzbid0IHJlY29nbml6ZSBoZXJlLiBTZWUgYWJvdmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24gdW5pbnRlcnByZXRlZF9vcHRpb24gPSA5OTk7XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnVuaW50ZXJwcmV0ZWRPcHRpb24gPSBbXTtcbiAgICAgICAgcHJvdG8yLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWV0aG9kT3B0aW9ucygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWV0aG9kT3B0aW9ucygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgTWV0aG9kT3B0aW9ucygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZXF1YWxzKGEsIGIpIHtcbiAgICAgICAgcmV0dXJuIHByb3RvMi51dGlsLmVxdWFscyhNZXRob2RPcHRpb25zLCBhLCBiKTtcbiAgICB9XG59XG5NZXRob2RPcHRpb25zLnJ1bnRpbWUgPSBwcm90bzI7XG5NZXRob2RPcHRpb25zLnR5cGVOYW1lID0gXCJnb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9uc1wiO1xuTWV0aG9kT3B0aW9ucy5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDMzLCBuYW1lOiBcImRlcHJlY2F0ZWRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8sIG9wdDogdHJ1ZSwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICB7IG5vOiAzNCwgbmFtZTogXCJpZGVtcG90ZW5jeV9sZXZlbFwiLCBraW5kOiBcImVudW1cIiwgVDogcHJvdG8yLmdldEVudW1UeXBlKE1ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbCksIG9wdDogdHJ1ZSwgZGVmYXVsdDogTWV0aG9kT3B0aW9uc19JZGVtcG90ZW5jeUxldmVsLklERU1QT1RFTkNZX1VOS05PV04gfSxcbiAgICB7IG5vOiAzNSwgbmFtZTogXCJmZWF0dXJlc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRmVhdHVyZVNldCwgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogOTk5LCBuYW1lOiBcInVuaW50ZXJwcmV0ZWRfb3B0aW9uXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBVbmludGVycHJldGVkT3B0aW9uLCByZXBlYXRlZDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIElzIHRoaXMgbWV0aG9kIHNpZGUtZWZmZWN0LWZyZWUgKG9yIHNhZmUgaW4gSFRUUCBwYXJsYW5jZSksIG9yIGlkZW1wb3RlbnQsXG4gKiBvciBuZWl0aGVyPyBIVFRQIGJhc2VkIFJQQyBpbXBsZW1lbnRhdGlvbiBtYXkgY2hvb3NlIEdFVCB2ZXJiIGZvciBzYWZlXG4gKiBtZXRob2RzLCBhbmQgUFVUIHZlcmIgZm9yIGlkZW1wb3RlbnQgbWV0aG9kcyBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0IFBPU1QuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLk1ldGhvZE9wdGlvbnMuSWRlbXBvdGVuY3lMZXZlbFxuICovXG5leHBvcnQgdmFyIE1ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbDtcbihmdW5jdGlvbiAoTWV0aG9kT3B0aW9uc19JZGVtcG90ZW5jeUxldmVsKSB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IElERU1QT1RFTkNZX1VOS05PV04gPSAwO1xuICAgICAqL1xuICAgIE1ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbFtNZXRob2RPcHRpb25zX0lkZW1wb3RlbmN5TGV2ZWxbXCJJREVNUE9URU5DWV9VTktOT1dOXCJdID0gMF0gPSBcIklERU1QT1RFTkNZX1VOS05PV05cIjtcbiAgICAvKipcbiAgICAgKiBpbXBsaWVzIGlkZW1wb3RlbnRcbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBOT19TSURFX0VGRkVDVFMgPSAxO1xuICAgICAqL1xuICAgIE1ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbFtNZXRob2RPcHRpb25zX0lkZW1wb3RlbmN5TGV2ZWxbXCJOT19TSURFX0VGRkVDVFNcIl0gPSAxXSA9IFwiTk9fU0lERV9FRkZFQ1RTXCI7XG4gICAgLyoqXG4gICAgICogaWRlbXBvdGVudCwgYnV0IG1heSBoYXZlIHNpZGUgZWZmZWN0c1xuICAgICAqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IElERU1QT1RFTlQgPSAyO1xuICAgICAqL1xuICAgIE1ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbFtNZXRob2RPcHRpb25zX0lkZW1wb3RlbmN5TGV2ZWxbXCJJREVNUE9URU5UXCJdID0gMl0gPSBcIklERU1QT1RFTlRcIjtcbn0pKE1ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbCB8fCAoTWV0aG9kT3B0aW9uc19JZGVtcG90ZW5jeUxldmVsID0ge30pKTtcbi8vIFJldHJpZXZlIGVudW0gbWV0YWRhdGEgd2l0aDogcHJvdG8yLmdldEVudW1UeXBlKE1ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbClcbnByb3RvMi51dGlsLnNldEVudW1UeXBlKE1ldGhvZE9wdGlvbnNfSWRlbXBvdGVuY3lMZXZlbCwgXCJnb29nbGUucHJvdG9idWYuTWV0aG9kT3B0aW9ucy5JZGVtcG90ZW5jeUxldmVsXCIsIFtcbiAgICB7IG5vOiAwLCBuYW1lOiBcIklERU1QT1RFTkNZX1VOS05PV05cIiB9LFxuICAgIHsgbm86IDEsIG5hbWU6IFwiTk9fU0lERV9FRkZFQ1RTXCIgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIklERU1QT1RFTlRcIiB9LFxuXSk7XG4vKipcbiAqIEEgbWVzc2FnZSByZXByZXNlbnRpbmcgYSBvcHRpb24gdGhlIHBhcnNlciBkb2VzIG5vdCByZWNvZ25pemUuIFRoaXMgb25seVxuICogYXBwZWFycyBpbiBvcHRpb25zIHByb3RvcyBjcmVhdGVkIGJ5IHRoZSBjb21waWxlcjo6UGFyc2VyIGNsYXNzLlxuICogRGVzY3JpcHRvclBvb2wgcmVzb2x2ZXMgdGhlc2Ugd2hlbiBidWlsZGluZyBEZXNjcmlwdG9yIG9iamVjdHMuIFRoZXJlZm9yZSxcbiAqIG9wdGlvbnMgcHJvdG9zIGluIGRlc2NyaXB0b3Igb2JqZWN0cyAoZS5nLiByZXR1cm5lZCBieSBEZXNjcmlwdG9yOjpvcHRpb25zKCksXG4gKiBvciBwcm9kdWNlZCBieSBEZXNjcmlwdG9yOjpDb3B5VG8oKSkgd2lsbCBuZXZlciBoYXZlIFVuaW50ZXJwcmV0ZWRPcHRpb25zXG4gKiBpbiB0aGVtLlxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBVbmludGVycHJldGVkT3B0aW9uIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuVW5pbnRlcnByZXRlZE9wdGlvbi5OYW1lUGFydCBuYW1lID0gMjtcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubmFtZSA9IFtdO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVbmludGVycHJldGVkT3B0aW9uKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVbmludGVycHJldGVkT3B0aW9uKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVbmludGVycHJldGVkT3B0aW9uKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKFVuaW50ZXJwcmV0ZWRPcHRpb24sIGEsIGIpO1xuICAgIH1cbn1cblVuaW50ZXJwcmV0ZWRPcHRpb24ucnVudGltZSA9IHByb3RvMjtcblVuaW50ZXJwcmV0ZWRPcHRpb24udHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5VbmludGVycHJldGVkT3B0aW9uXCI7XG5VbmludGVycHJldGVkT3B0aW9uLmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMiwgbmFtZTogXCJuYW1lXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBVbmludGVycHJldGVkT3B0aW9uX05hbWVQYXJ0LCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwiaWRlbnRpZmllcl92YWx1ZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcInBvc2l0aXZlX2ludF92YWx1ZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA0IC8qIFNjYWxhclR5cGUuVUlOVDY0ICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA1LCBuYW1lOiBcIm5lZ2F0aXZlX2ludF92YWx1ZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiAzIC8qIFNjYWxhclR5cGUuSU5UNjQgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDYsIG5hbWU6IFwiZG91YmxlX3ZhbHVlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDEgLyogU2NhbGFyVHlwZS5ET1VCTEUgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDcsIG5hbWU6IFwic3RyaW5nX3ZhbHVlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDEyIC8qIFNjYWxhclR5cGUuQllURVMgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDgsIG5hbWU6IFwiYWdncmVnYXRlX3ZhbHVlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIG9wdDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIFRoZSBuYW1lIG9mIHRoZSB1bmludGVycHJldGVkIG9wdGlvbi4gIEVhY2ggc3RyaW5nIHJlcHJlc2VudHMgYSBzZWdtZW50IGluXG4gKiBhIGRvdC1zZXBhcmF0ZWQgbmFtZS4gIGlzX2V4dGVuc2lvbiBpcyB0cnVlIGlmZiBhIHNlZ21lbnQgcmVwcmVzZW50cyBhblxuICogZXh0ZW5zaW9uIChkZW5vdGVkIHdpdGggcGFyZW50aGVzZXMgaW4gb3B0aW9ucyBzcGVjcyBpbiAucHJvdG8gZmlsZXMpLlxuICogRS5nLix7IFtcImZvb1wiLCBmYWxzZV0sIFtcImJhci5iYXpcIiwgdHJ1ZV0sIFtcIm1vb1wiLCBmYWxzZV0gfSByZXByZXNlbnRzXG4gKiBcImZvby4oYmFyLmJheikubW9vXCIuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uTmFtZVBhcnRcbiAqL1xuZXhwb3J0IGNsYXNzIFVuaW50ZXJwcmV0ZWRPcHRpb25fTmFtZVBhcnQgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFVuaW50ZXJwcmV0ZWRPcHRpb25fTmFtZVBhcnQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFVuaW50ZXJwcmV0ZWRPcHRpb25fTmFtZVBhcnQoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFVuaW50ZXJwcmV0ZWRPcHRpb25fTmFtZVBhcnQoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoVW5pbnRlcnByZXRlZE9wdGlvbl9OYW1lUGFydCwgYSwgYik7XG4gICAgfVxufVxuVW5pbnRlcnByZXRlZE9wdGlvbl9OYW1lUGFydC5ydW50aW1lID0gcHJvdG8yO1xuVW5pbnRlcnByZXRlZE9wdGlvbl9OYW1lUGFydC50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLlVuaW50ZXJwcmV0ZWRPcHRpb24uTmFtZVBhcnRcIjtcblVuaW50ZXJwcmV0ZWRPcHRpb25fTmFtZVBhcnQuZmllbGRzID0gcHJvdG8yLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcIm5hbWVfcGFydFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJpc19leHRlbnNpb25cIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8gfSxcbl0pO1xuLyoqXG4gKiBUT0RPIEVudW1zIGluIEMrKyBnZW5jb2RlIChhbmQgcG90ZW50aWFsbHkgb3RoZXIgbGFuZ3VhZ2VzKSBhcmVcbiAqIG5vdCB3ZWxsIHNjb3BlZC4gIFRoaXMgbWVhbnMgdGhhdCBlYWNoIG9mIHRoZSBmZWF0dXJlIGVudW1zIGJlbG93IGNhbiBjbGFzaFxuICogd2l0aCBlYWNoIG90aGVyLiAgVGhlIHNob3J0IG5hbWVzIHdlJ3ZlIGNob3NlbiBtYXhpbWl6ZSBjYWxsLXNpdGVcbiAqIHJlYWRhYmlsaXR5LCBidXQgbGVhdmUgdXMgdmVyeSBvcGVuIHRvIHRoaXMgc2NlbmFyaW8uICBBIGZ1dHVyZSBmZWF0dXJlIHdpbGxcbiAqIGJlIGRlc2lnbmVkIGFuZCBpbXBsZW1lbnRlZCB0byBoYW5kbGUgdGhpcywgaG9wZWZ1bGx5IGJlZm9yZSB3ZSBldmVyIGhpdCBhXG4gKiBjb25mbGljdCBoZXJlLlxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0XG4gKi9cbmV4cG9ydCBjbGFzcyBGZWF0dXJlU2V0IGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGZWF0dXJlU2V0KCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGZWF0dXJlU2V0KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGZWF0dXJlU2V0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKEZlYXR1cmVTZXQsIGEsIGIpO1xuICAgIH1cbn1cbkZlYXR1cmVTZXQucnVudGltZSA9IHByb3RvMjtcbkZlYXR1cmVTZXQudHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0XCI7XG5GZWF0dXJlU2V0LmZpZWxkcyA9IHByb3RvMi51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJmaWVsZF9wcmVzZW5jZVwiLCBraW5kOiBcImVudW1cIiwgVDogcHJvdG8yLmdldEVudW1UeXBlKEZlYXR1cmVTZXRfRmllbGRQcmVzZW5jZSksIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiZW51bV90eXBlXCIsIGtpbmQ6IFwiZW51bVwiLCBUOiBwcm90bzIuZ2V0RW51bVR5cGUoRmVhdHVyZVNldF9FbnVtVHlwZSksIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwicmVwZWF0ZWRfZmllbGRfZW5jb2RpbmdcIiwga2luZDogXCJlbnVtXCIsIFQ6IHByb3RvMi5nZXRFbnVtVHlwZShGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZyksIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwidXRmOF92YWxpZGF0aW9uXCIsIGtpbmQ6IFwiZW51bVwiLCBUOiBwcm90bzIuZ2V0RW51bVR5cGUoRmVhdHVyZVNldF9VdGY4VmFsaWRhdGlvbiksIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDUsIG5hbWU6IFwibWVzc2FnZV9lbmNvZGluZ1wiLCBraW5kOiBcImVudW1cIiwgVDogcHJvdG8yLmdldEVudW1UeXBlKEZlYXR1cmVTZXRfTWVzc2FnZUVuY29kaW5nKSwgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogNiwgbmFtZTogXCJqc29uX2Zvcm1hdFwiLCBraW5kOiBcImVudW1cIiwgVDogcHJvdG8yLmdldEVudW1UeXBlKEZlYXR1cmVTZXRfSnNvbkZvcm1hdCksIG9wdDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkZpZWxkUHJlc2VuY2VcbiAqL1xuZXhwb3J0IHZhciBGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2U7XG4oZnVuY3Rpb24gKEZlYXR1cmVTZXRfRmllbGRQcmVzZW5jZSkge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBGSUVMRF9QUkVTRU5DRV9VTktOT1dOID0gMDtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2VbRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlW1wiRklFTERfUFJFU0VOQ0VfVU5LTk9XTlwiXSA9IDBdID0gXCJGSUVMRF9QUkVTRU5DRV9VTktOT1dOXCI7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEVYUExJQ0lUID0gMTtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2VbRmVhdHVyZVNldF9GaWVsZFByZXNlbmNlW1wiRVhQTElDSVRcIl0gPSAxXSA9IFwiRVhQTElDSVRcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogSU1QTElDSVQgPSAyO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfRmllbGRQcmVzZW5jZVtGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2VbXCJJTVBMSUNJVFwiXSA9IDJdID0gXCJJTVBMSUNJVFwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBMRUdBQ1lfUkVRVUlSRUQgPSAzO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfRmllbGRQcmVzZW5jZVtGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2VbXCJMRUdBQ1lfUkVRVUlSRURcIl0gPSAzXSA9IFwiTEVHQUNZX1JFUVVJUkVEXCI7XG59KShGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2UgfHwgKEZlYXR1cmVTZXRfRmllbGRQcmVzZW5jZSA9IHt9KSk7XG4vLyBSZXRyaWV2ZSBlbnVtIG1ldGFkYXRhIHdpdGg6IHByb3RvMi5nZXRFbnVtVHlwZShGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2UpXG5wcm90bzIudXRpbC5zZXRFbnVtVHlwZShGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2UsIFwiZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuRmllbGRQcmVzZW5jZVwiLCBbXG4gICAgeyBubzogMCwgbmFtZTogXCJGSUVMRF9QUkVTRU5DRV9VTktOT1dOXCIgfSxcbiAgICB7IG5vOiAxLCBuYW1lOiBcIkVYUExJQ0lUXCIgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIklNUExJQ0lUXCIgfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcIkxFR0FDWV9SRVFVSVJFRFwiIH0sXG5dKTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuRW51bVR5cGVcbiAqL1xuZXhwb3J0IHZhciBGZWF0dXJlU2V0X0VudW1UeXBlO1xuKGZ1bmN0aW9uIChGZWF0dXJlU2V0X0VudW1UeXBlKSB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEVOVU1fVFlQRV9VTktOT1dOID0gMDtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X0VudW1UeXBlW0ZlYXR1cmVTZXRfRW51bVR5cGVbXCJFTlVNX1RZUEVfVU5LTk9XTlwiXSA9IDBdID0gXCJFTlVNX1RZUEVfVU5LTk9XTlwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBPUEVOID0gMTtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X0VudW1UeXBlW0ZlYXR1cmVTZXRfRW51bVR5cGVbXCJPUEVOXCJdID0gMV0gPSBcIk9QRU5cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogQ0xPU0VEID0gMjtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X0VudW1UeXBlW0ZlYXR1cmVTZXRfRW51bVR5cGVbXCJDTE9TRURcIl0gPSAyXSA9IFwiQ0xPU0VEXCI7XG59KShGZWF0dXJlU2V0X0VudW1UeXBlIHx8IChGZWF0dXJlU2V0X0VudW1UeXBlID0ge30pKTtcbi8vIFJldHJpZXZlIGVudW0gbWV0YWRhdGEgd2l0aDogcHJvdG8yLmdldEVudW1UeXBlKEZlYXR1cmVTZXRfRW51bVR5cGUpXG5wcm90bzIudXRpbC5zZXRFbnVtVHlwZShGZWF0dXJlU2V0X0VudW1UeXBlLCBcImdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LkVudW1UeXBlXCIsIFtcbiAgICB7IG5vOiAwLCBuYW1lOiBcIkVOVU1fVFlQRV9VTktOT1dOXCIgfSxcbiAgICB7IG5vOiAxLCBuYW1lOiBcIk9QRU5cIiB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiQ0xPU0VEXCIgfSxcbl0pO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5SZXBlYXRlZEZpZWxkRW5jb2RpbmdcbiAqL1xuZXhwb3J0IHZhciBGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZztcbihmdW5jdGlvbiAoRmVhdHVyZVNldF9SZXBlYXRlZEZpZWxkRW5jb2RpbmcpIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogUkVQRUFURURfRklFTERfRU5DT0RJTkdfVU5LTk9XTiA9IDA7XG4gICAgICovXG4gICAgRmVhdHVyZVNldF9SZXBlYXRlZEZpZWxkRW5jb2RpbmdbRmVhdHVyZVNldF9SZXBlYXRlZEZpZWxkRW5jb2RpbmdbXCJSRVBFQVRFRF9GSUVMRF9FTkNPRElOR19VTktOT1dOXCJdID0gMF0gPSBcIlJFUEVBVEVEX0ZJRUxEX0VOQ09ESU5HX1VOS05PV05cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogUEFDS0VEID0gMTtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZ1tGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZ1tcIlBBQ0tFRFwiXSA9IDFdID0gXCJQQUNLRURcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogRVhQQU5ERUQgPSAyO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfUmVwZWF0ZWRGaWVsZEVuY29kaW5nW0ZlYXR1cmVTZXRfUmVwZWF0ZWRGaWVsZEVuY29kaW5nW1wiRVhQQU5ERURcIl0gPSAyXSA9IFwiRVhQQU5ERURcIjtcbn0pKEZlYXR1cmVTZXRfUmVwZWF0ZWRGaWVsZEVuY29kaW5nIHx8IChGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZyA9IHt9KSk7XG4vLyBSZXRyaWV2ZSBlbnVtIG1ldGFkYXRhIHdpdGg6IHByb3RvMi5nZXRFbnVtVHlwZShGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZylcbnByb3RvMi51dGlsLnNldEVudW1UeXBlKEZlYXR1cmVTZXRfUmVwZWF0ZWRGaWVsZEVuY29kaW5nLCBcImdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LlJlcGVhdGVkRmllbGRFbmNvZGluZ1wiLCBbXG4gICAgeyBubzogMCwgbmFtZTogXCJSRVBFQVRFRF9GSUVMRF9FTkNPRElOR19VTktOT1dOXCIgfSxcbiAgICB7IG5vOiAxLCBuYW1lOiBcIlBBQ0tFRFwiIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJFWFBBTkRFRFwiIH0sXG5dKTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuVXRmOFZhbGlkYXRpb25cbiAqL1xuZXhwb3J0IHZhciBGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uO1xuKGZ1bmN0aW9uIChGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uKSB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IFVURjhfVkFMSURBVElPTl9VTktOT1dOID0gMDtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uW0ZlYXR1cmVTZXRfVXRmOFZhbGlkYXRpb25bXCJVVEY4X1ZBTElEQVRJT05fVU5LTk9XTlwiXSA9IDBdID0gXCJVVEY4X1ZBTElEQVRJT05fVU5LTk9XTlwiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBOT05FID0gMTtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uW0ZlYXR1cmVTZXRfVXRmOFZhbGlkYXRpb25bXCJOT05FXCJdID0gMV0gPSBcIk5PTkVcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogVkVSSUZZID0gMjtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uW0ZlYXR1cmVTZXRfVXRmOFZhbGlkYXRpb25bXCJWRVJJRllcIl0gPSAyXSA9IFwiVkVSSUZZXCI7XG59KShGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uIHx8IChGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uID0ge30pKTtcbi8vIFJldHJpZXZlIGVudW0gbWV0YWRhdGEgd2l0aDogcHJvdG8yLmdldEVudW1UeXBlKEZlYXR1cmVTZXRfVXRmOFZhbGlkYXRpb24pXG5wcm90bzIudXRpbC5zZXRFbnVtVHlwZShGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uLCBcImdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0LlV0ZjhWYWxpZGF0aW9uXCIsIFtcbiAgICB7IG5vOiAwLCBuYW1lOiBcIlVURjhfVkFMSURBVElPTl9VTktOT1dOXCIgfSxcbiAgICB7IG5vOiAxLCBuYW1lOiBcIk5PTkVcIiB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiVkVSSUZZXCIgfSxcbl0pO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gZW51bSBnb29nbGUucHJvdG9idWYuRmVhdHVyZVNldC5NZXNzYWdlRW5jb2RpbmdcbiAqL1xuZXhwb3J0IHZhciBGZWF0dXJlU2V0X01lc3NhZ2VFbmNvZGluZztcbihmdW5jdGlvbiAoRmVhdHVyZVNldF9NZXNzYWdlRW5jb2RpbmcpIHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogTUVTU0FHRV9FTkNPRElOR19VTktOT1dOID0gMDtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X01lc3NhZ2VFbmNvZGluZ1tGZWF0dXJlU2V0X01lc3NhZ2VFbmNvZGluZ1tcIk1FU1NBR0VfRU5DT0RJTkdfVU5LTk9XTlwiXSA9IDBdID0gXCJNRVNTQUdFX0VOQ09ESU5HX1VOS05PV05cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogTEVOR1RIX1BSRUZJWEVEID0gMTtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X01lc3NhZ2VFbmNvZGluZ1tGZWF0dXJlU2V0X01lc3NhZ2VFbmNvZGluZ1tcIkxFTkdUSF9QUkVGSVhFRFwiXSA9IDFdID0gXCJMRU5HVEhfUFJFRklYRURcIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogREVMSU1JVEVEID0gMjtcbiAgICAgKi9cbiAgICBGZWF0dXJlU2V0X01lc3NhZ2VFbmNvZGluZ1tGZWF0dXJlU2V0X01lc3NhZ2VFbmNvZGluZ1tcIkRFTElNSVRFRFwiXSA9IDJdID0gXCJERUxJTUlURURcIjtcbn0pKEZlYXR1cmVTZXRfTWVzc2FnZUVuY29kaW5nIHx8IChGZWF0dXJlU2V0X01lc3NhZ2VFbmNvZGluZyA9IHt9KSk7XG4vLyBSZXRyaWV2ZSBlbnVtIG1ldGFkYXRhIHdpdGg6IHByb3RvMi5nZXRFbnVtVHlwZShGZWF0dXJlU2V0X01lc3NhZ2VFbmNvZGluZylcbnByb3RvMi51dGlsLnNldEVudW1UeXBlKEZlYXR1cmVTZXRfTWVzc2FnZUVuY29kaW5nLCBcImdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0Lk1lc3NhZ2VFbmNvZGluZ1wiLCBbXG4gICAgeyBubzogMCwgbmFtZTogXCJNRVNTQUdFX0VOQ09ESU5HX1VOS05PV05cIiB9LFxuICAgIHsgbm86IDEsIG5hbWU6IFwiTEVOR1RIX1BSRUZJWEVEXCIgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIkRFTElNSVRFRFwiIH0sXG5dKTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuSnNvbkZvcm1hdFxuICovXG5leHBvcnQgdmFyIEZlYXR1cmVTZXRfSnNvbkZvcm1hdDtcbihmdW5jdGlvbiAoRmVhdHVyZVNldF9Kc29uRm9ybWF0KSB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGVudW0gdmFsdWU6IEpTT05fRk9STUFUX1VOS05PV04gPSAwO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfSnNvbkZvcm1hdFtGZWF0dXJlU2V0X0pzb25Gb3JtYXRbXCJKU09OX0ZPUk1BVF9VTktOT1dOXCJdID0gMF0gPSBcIkpTT05fRk9STUFUX1VOS05PV05cIjtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogQUxMT1cgPSAxO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfSnNvbkZvcm1hdFtGZWF0dXJlU2V0X0pzb25Gb3JtYXRbXCJBTExPV1wiXSA9IDFdID0gXCJBTExPV1wiO1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBMRUdBQ1lfQkVTVF9FRkZPUlQgPSAyO1xuICAgICAqL1xuICAgIEZlYXR1cmVTZXRfSnNvbkZvcm1hdFtGZWF0dXJlU2V0X0pzb25Gb3JtYXRbXCJMRUdBQ1lfQkVTVF9FRkZPUlRcIl0gPSAyXSA9IFwiTEVHQUNZX0JFU1RfRUZGT1JUXCI7XG59KShGZWF0dXJlU2V0X0pzb25Gb3JtYXQgfHwgKEZlYXR1cmVTZXRfSnNvbkZvcm1hdCA9IHt9KSk7XG4vLyBSZXRyaWV2ZSBlbnVtIG1ldGFkYXRhIHdpdGg6IHByb3RvMi5nZXRFbnVtVHlwZShGZWF0dXJlU2V0X0pzb25Gb3JtYXQpXG5wcm90bzIudXRpbC5zZXRFbnVtVHlwZShGZWF0dXJlU2V0X0pzb25Gb3JtYXQsIFwiZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXQuSnNvbkZvcm1hdFwiLCBbXG4gICAgeyBubzogMCwgbmFtZTogXCJKU09OX0ZPUk1BVF9VTktOT1dOXCIgfSxcbiAgICB7IG5vOiAxLCBuYW1lOiBcIkFMTE9XXCIgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIkxFR0FDWV9CRVNUX0VGRk9SVFwiIH0sXG5dKTtcbi8qKlxuICogQSBjb21waWxlZCBzcGVjaWZpY2F0aW9uIGZvciB0aGUgZGVmYXVsdHMgb2YgYSBzZXQgb2YgZmVhdHVyZXMuICBUaGVzZVxuICogbWVzc2FnZXMgYXJlIGdlbmVyYXRlZCBmcm9tIEZlYXR1cmVTZXQgZXh0ZW5zaW9ucyBhbmQgY2FuIGJlIHVzZWQgdG8gc2VlZFxuICogZmVhdHVyZSByZXNvbHV0aW9uLiBUaGUgcmVzb2x1dGlvbiB3aXRoIHRoaXMgb2JqZWN0IGJlY29tZXMgYSBzaW1wbGUgc2VhcmNoXG4gKiBmb3IgdGhlIGNsb3Nlc3QgbWF0Y2hpbmcgZWRpdGlvbiwgZm9sbG93ZWQgYnkgcHJvdG8gbWVyZ2VzLlxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0RGVmYXVsdHNcbiAqL1xuZXhwb3J0IGNsYXNzIEZlYXR1cmVTZXREZWZhdWx0cyBleHRlbmRzIE1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXREZWZhdWx0cy5GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHQgZGVmYXVsdHMgPSAxO1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kZWZhdWx0cyA9IFtdO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGZWF0dXJlU2V0RGVmYXVsdHMoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZlYXR1cmVTZXREZWZhdWx0cygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmVhdHVyZVNldERlZmF1bHRzKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKEZlYXR1cmVTZXREZWZhdWx0cywgYSwgYik7XG4gICAgfVxufVxuRmVhdHVyZVNldERlZmF1bHRzLnJ1bnRpbWUgPSBwcm90bzI7XG5GZWF0dXJlU2V0RGVmYXVsdHMudHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5GZWF0dXJlU2V0RGVmYXVsdHNcIjtcbkZlYXR1cmVTZXREZWZhdWx0cy5maWVsZHMgPSBwcm90bzIudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiZGVmYXVsdHNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEZlYXR1cmVTZXREZWZhdWx0c19GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHQsIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogNCwgbmFtZTogXCJtaW5pbXVtX2VkaXRpb25cIiwga2luZDogXCJlbnVtXCIsIFQ6IHByb3RvMi5nZXRFbnVtVHlwZShFZGl0aW9uKSwgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogNSwgbmFtZTogXCJtYXhpbXVtX2VkaXRpb25cIiwga2luZDogXCJlbnVtXCIsIFQ6IHByb3RvMi5nZXRFbnVtVHlwZShFZGl0aW9uKSwgb3B0OiB0cnVlIH0sXG5dKTtcbi8qKlxuICogQSBtYXAgZnJvbSBldmVyeSBrbm93biBlZGl0aW9uIHdpdGggYSB1bmlxdWUgc2V0IG9mIGRlZmF1bHRzIHRvIGl0c1xuICogZGVmYXVsdHMuIE5vdCBhbGwgZWRpdGlvbnMgbWF5IGJlIGNvbnRhaW5lZCBoZXJlLiAgRm9yIGEgZ2l2ZW4gZWRpdGlvbixcbiAqIHRoZSBkZWZhdWx0cyBhdCB0aGUgY2xvc2VzdCBtYXRjaGluZyBlZGl0aW9uIG9yZGVyZWQgYXQgb3IgYmVmb3JlIGl0IHNob3VsZFxuICogYmUgdXNlZC4gIFRoaXMgZmllbGQgbXVzdCBiZSBpbiBzdHJpY3QgYXNjZW5kaW5nIG9yZGVyIGJ5IGVkaXRpb24uXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXREZWZhdWx0cy5GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHRcbiAqL1xuZXhwb3J0IGNsYXNzIEZlYXR1cmVTZXREZWZhdWx0c19GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHQgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZlYXR1cmVTZXREZWZhdWx0c19GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZlYXR1cmVTZXREZWZhdWx0c19GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHQoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEZlYXR1cmVTZXREZWZhdWx0c19GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHQoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoRmVhdHVyZVNldERlZmF1bHRzX0ZlYXR1cmVTZXRFZGl0aW9uRGVmYXVsdCwgYSwgYik7XG4gICAgfVxufVxuRmVhdHVyZVNldERlZmF1bHRzX0ZlYXR1cmVTZXRFZGl0aW9uRGVmYXVsdC5ydW50aW1lID0gcHJvdG8yO1xuRmVhdHVyZVNldERlZmF1bHRzX0ZlYXR1cmVTZXRFZGl0aW9uRGVmYXVsdC50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLkZlYXR1cmVTZXREZWZhdWx0cy5GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHRcIjtcbkZlYXR1cmVTZXREZWZhdWx0c19GZWF0dXJlU2V0RWRpdGlvbkRlZmF1bHQuZmllbGRzID0gcHJvdG8yLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAzLCBuYW1lOiBcImVkaXRpb25cIiwga2luZDogXCJlbnVtXCIsIFQ6IHByb3RvMi5nZXRFbnVtVHlwZShFZGl0aW9uKSwgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJmZWF0dXJlc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRmVhdHVyZVNldCwgb3B0OiB0cnVlIH0sXG5dKTtcbi8qKlxuICogRW5jYXBzdWxhdGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSBmcm9tIHdoaWNoIGFcbiAqIEZpbGVEZXNjcmlwdG9yUHJvdG8gd2FzIGdlbmVyYXRlZC5cbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBnb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm9cbiAqL1xuZXhwb3J0IGNsYXNzIFNvdXJjZUNvZGVJbmZvIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogQSBMb2NhdGlvbiBpZGVudGlmaWVzIGEgcGllY2Ugb2Ygc291cmNlIGNvZGUgaW4gYSAucHJvdG8gZmlsZSB3aGljaFxuICAgICAgICAgKiBjb3JyZXNwb25kcyB0byBhIHBhcnRpY3VsYXIgZGVmaW5pdGlvbi4gIFRoaXMgaW5mb3JtYXRpb24gaXMgaW50ZW5kZWRcbiAgICAgICAgICogdG8gYmUgdXNlZnVsIHRvIElERXMsIGNvZGUgaW5kZXhlcnMsIGRvY3VtZW50YXRpb24gZ2VuZXJhdG9ycywgYW5kIHNpbWlsYXJcbiAgICAgICAgICogdG9vbHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIEZvciBleGFtcGxlLCBzYXkgd2UgaGF2ZSBhIGZpbGUgbGlrZTpcbiAgICAgICAgICogICBtZXNzYWdlIEZvbyB7XG4gICAgICAgICAqICAgICBvcHRpb25hbCBzdHJpbmcgZm9vID0gMTtcbiAgICAgICAgICogICB9XG4gICAgICAgICAqIExldCdzIGxvb2sgYXQganVzdCB0aGUgZmllbGQgZGVmaW5pdGlvbjpcbiAgICAgICAgICogICBvcHRpb25hbCBzdHJpbmcgZm9vID0gMTtcbiAgICAgICAgICogICBeICAgICAgIF5eICAgICBeXiAgXiAgXl5eXG4gICAgICAgICAqICAgYSAgICAgICBiYyAgICAgZGUgIGYgIGdoaVxuICAgICAgICAgKiBXZSBoYXZlIHRoZSBmb2xsb3dpbmcgbG9jYXRpb25zOlxuICAgICAgICAgKiAgIHNwYW4gICBwYXRoICAgICAgICAgICAgICAgcmVwcmVzZW50c1xuICAgICAgICAgKiAgIFthLGkpICBbIDQsIDAsIDIsIDAgXSAgICAgVGhlIHdob2xlIGZpZWxkIGRlZmluaXRpb24uXG4gICAgICAgICAqICAgW2EsYikgIFsgNCwgMCwgMiwgMCwgNCBdICBUaGUgbGFiZWwgKG9wdGlvbmFsKS5cbiAgICAgICAgICogICBbYyxkKSAgWyA0LCAwLCAyLCAwLCA1IF0gIFRoZSB0eXBlIChzdHJpbmcpLlxuICAgICAgICAgKiAgIFtlLGYpICBbIDQsIDAsIDIsIDAsIDEgXSAgVGhlIG5hbWUgKGZvbykuXG4gICAgICAgICAqICAgW2csaCkgIFsgNCwgMCwgMiwgMCwgMyBdICBUaGUgbnVtYmVyICgxKS5cbiAgICAgICAgICpcbiAgICAgICAgICogTm90ZXM6XG4gICAgICAgICAqIC0gQSBsb2NhdGlvbiBtYXkgcmVmZXIgdG8gYSByZXBlYXRlZCBmaWVsZCBpdHNlbGYgKGkuZS4gbm90IHRvIGFueVxuICAgICAgICAgKiAgIHBhcnRpY3VsYXIgaW5kZXggd2l0aGluIGl0KS4gIFRoaXMgaXMgdXNlZCB3aGVuZXZlciBhIHNldCBvZiBlbGVtZW50cyBhcmVcbiAgICAgICAgICogICBsb2dpY2FsbHkgZW5jbG9zZWQgaW4gYSBzaW5nbGUgY29kZSBzZWdtZW50LiAgRm9yIGV4YW1wbGUsIGFuIGVudGlyZVxuICAgICAgICAgKiAgIGV4dGVuZCBibG9jayAocG9zc2libHkgY29udGFpbmluZyBtdWx0aXBsZSBleHRlbnNpb24gZGVmaW5pdGlvbnMpIHdpbGxcbiAgICAgICAgICogICBoYXZlIGFuIG91dGVyIGxvY2F0aW9uIHdob3NlIHBhdGggcmVmZXJzIHRvIHRoZSBcImV4dGVuc2lvbnNcIiByZXBlYXRlZFxuICAgICAgICAgKiAgIGZpZWxkIHdpdGhvdXQgYW4gaW5kZXguXG4gICAgICAgICAqIC0gTXVsdGlwbGUgbG9jYXRpb25zIG1heSBoYXZlIHRoZSBzYW1lIHBhdGguICBUaGlzIGhhcHBlbnMgd2hlbiBhIHNpbmdsZVxuICAgICAgICAgKiAgIGxvZ2ljYWwgZGVjbGFyYXRpb24gaXMgc3ByZWFkIG91dCBhY3Jvc3MgbXVsdGlwbGUgcGxhY2VzLiAgVGhlIG1vc3RcbiAgICAgICAgICogICBvYnZpb3VzIGV4YW1wbGUgaXMgdGhlIFwiZXh0ZW5kXCIgYmxvY2sgYWdhaW4gLS0gdGhlcmUgbWF5IGJlIG11bHRpcGxlXG4gICAgICAgICAqICAgZXh0ZW5kIGJsb2NrcyBpbiB0aGUgc2FtZSBzY29wZSwgZWFjaCBvZiB3aGljaCB3aWxsIGhhdmUgdGhlIHNhbWUgcGF0aC5cbiAgICAgICAgICogLSBBIGxvY2F0aW9uJ3Mgc3BhbiBpcyBub3QgYWx3YXlzIGEgc3Vic2V0IG9mIGl0cyBwYXJlbnQncyBzcGFuLiAgRm9yXG4gICAgICAgICAqICAgZXhhbXBsZSwgdGhlIFwiZXh0ZW5kZWVcIiBvZiBhbiBleHRlbnNpb24gZGVjbGFyYXRpb24gYXBwZWFycyBhdCB0aGVcbiAgICAgICAgICogICBiZWdpbm5pbmcgb2YgdGhlIFwiZXh0ZW5kXCIgYmxvY2sgYW5kIGlzIHNoYXJlZCBieSBhbGwgZXh0ZW5zaW9ucyB3aXRoaW5cbiAgICAgICAgICogICB0aGUgYmxvY2suXG4gICAgICAgICAqIC0gSnVzdCBiZWNhdXNlIGEgbG9jYXRpb24ncyBzcGFuIGlzIGEgc3Vic2V0IG9mIHNvbWUgb3RoZXIgbG9jYXRpb24ncyBzcGFuXG4gICAgICAgICAqICAgZG9lcyBub3QgbWVhbiB0aGF0IGl0IGlzIGEgZGVzY2VuZGFudC4gIEZvciBleGFtcGxlLCBhIFwiZ3JvdXBcIiBkZWZpbmVzXG4gICAgICAgICAqICAgYm90aCBhIHR5cGUgYW5kIGEgZmllbGQgaW4gYSBzaW5nbGUgZGVjbGFyYXRpb24uICBUaHVzLCB0aGUgbG9jYXRpb25zXG4gICAgICAgICAqICAgY29ycmVzcG9uZGluZyB0byB0aGUgdHlwZSBhbmQgZmllbGQgYW5kIHRoZWlyIGNvbXBvbmVudHMgd2lsbCBvdmVybGFwLlxuICAgICAgICAgKiAtIENvZGUgd2hpY2ggdHJpZXMgdG8gaW50ZXJwcmV0IGxvY2F0aW9ucyBzaG91bGQgcHJvYmFibHkgYmUgZGVzaWduZWQgdG9cbiAgICAgICAgICogICBpZ25vcmUgdGhvc2UgdGhhdCBpdCBkb2Vzbid0IHVuZGVyc3RhbmQsIGFzIG1vcmUgdHlwZXMgb2YgbG9jYXRpb25zIGNvdWxkXG4gICAgICAgICAqICAgYmUgcmVjb3JkZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb24gbG9jYXRpb24gPSAxO1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sb2NhdGlvbiA9IFtdO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTb3VyY2VDb2RlSW5mbygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgU291cmNlQ29kZUluZm8oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFNvdXJjZUNvZGVJbmZvKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKFNvdXJjZUNvZGVJbmZvLCBhLCBiKTtcbiAgICB9XG59XG5Tb3VyY2VDb2RlSW5mby5ydW50aW1lID0gcHJvdG8yO1xuU291cmNlQ29kZUluZm8udHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mb1wiO1xuU291cmNlQ29kZUluZm8uZmllbGRzID0gcHJvdG8yLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImxvY2F0aW9uXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTb3VyY2VDb2RlSW5mb19Mb2NhdGlvbiwgcmVwZWF0ZWQ6IHRydWUgfSxcbl0pO1xuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBnb29nbGUucHJvdG9idWYuU291cmNlQ29kZUluZm8uTG9jYXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIFNvdXJjZUNvZGVJbmZvX0xvY2F0aW9uIGV4dGVuZHMgTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICAvKipcbiAgICAgICAgICogSWRlbnRpZmllcyB3aGljaCBwYXJ0IG9mIHRoZSBGaWxlRGVzY3JpcHRvclByb3RvIHdhcyBkZWZpbmVkIGF0IHRoaXNcbiAgICAgICAgICogbG9jYXRpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIEVhY2ggZWxlbWVudCBpcyBhIGZpZWxkIG51bWJlciBvciBhbiBpbmRleC4gIFRoZXkgZm9ybSBhIHBhdGggZnJvbVxuICAgICAgICAgKiB0aGUgcm9vdCBGaWxlRGVzY3JpcHRvclByb3RvIHRvIHRoZSBwbGFjZSB3aGVyZSB0aGUgZGVmaW5pdGlvbiBvY2N1cnMuXG4gICAgICAgICAqIEZvciBleGFtcGxlLCB0aGlzIHBhdGg6XG4gICAgICAgICAqICAgWyA0LCAzLCAyLCA3LCAxIF1cbiAgICAgICAgICogcmVmZXJzIHRvOlxuICAgICAgICAgKiAgIGZpbGUubWVzc2FnZV90eXBlKDMpICAvLyA0LCAzXG4gICAgICAgICAqICAgICAgIC5maWVsZCg3KSAgICAgICAgIC8vIDIsIDdcbiAgICAgICAgICogICAgICAgLm5hbWUoKSAgICAgICAgICAgLy8gMVxuICAgICAgICAgKiBUaGlzIGlzIGJlY2F1c2UgRmlsZURlc2NyaXB0b3JQcm90by5tZXNzYWdlX3R5cGUgaGFzIGZpZWxkIG51bWJlciA0OlxuICAgICAgICAgKiAgIHJlcGVhdGVkIERlc2NyaXB0b3JQcm90byBtZXNzYWdlX3R5cGUgPSA0O1xuICAgICAgICAgKiBhbmQgRGVzY3JpcHRvclByb3RvLmZpZWxkIGhhcyBmaWVsZCBudW1iZXIgMjpcbiAgICAgICAgICogICByZXBlYXRlZCBGaWVsZERlc2NyaXB0b3JQcm90byBmaWVsZCA9IDI7XG4gICAgICAgICAqIGFuZCBGaWVsZERlc2NyaXB0b3JQcm90by5uYW1lIGhhcyBmaWVsZCBudW1iZXIgMTpcbiAgICAgICAgICogICBvcHRpb25hbCBzdHJpbmcgbmFtZSA9IDE7XG4gICAgICAgICAqXG4gICAgICAgICAqIFRodXMsIHRoZSBhYm92ZSBwYXRoIGdpdmVzIHRoZSBsb2NhdGlvbiBvZiBhIGZpZWxkIG5hbWUuICBJZiB3ZSByZW1vdmVkXG4gICAgICAgICAqIHRoZSBsYXN0IGVsZW1lbnQ6XG4gICAgICAgICAqICAgWyA0LCAzLCAyLCA3IF1cbiAgICAgICAgICogdGhpcyBwYXRoIHJlZmVycyB0byB0aGUgd2hvbGUgZmllbGQgZGVjbGFyYXRpb24gKGZyb20gdGhlIGJlZ2lubmluZ1xuICAgICAgICAgKiBvZiB0aGUgbGFiZWwgdG8gdGhlIHRlcm1pbmF0aW5nIHNlbWljb2xvbikuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgaW50MzIgcGF0aCA9IDEgW3BhY2tlZCA9IHRydWVdO1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYXRoID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbHdheXMgaGFzIGV4YWN0bHkgdGhyZWUgb3IgZm91ciBlbGVtZW50czogc3RhcnQgbGluZSwgc3RhcnQgY29sdW1uLFxuICAgICAgICAgKiBlbmQgbGluZSAob3B0aW9uYWwsIG90aGVyd2lzZSBhc3N1bWVkIHNhbWUgYXMgc3RhcnQgbGluZSksIGVuZCBjb2x1bW4uXG4gICAgICAgICAqIFRoZXNlIGFyZSBwYWNrZWQgaW50byBhIHNpbmdsZSBmaWVsZCBmb3IgZWZmaWNpZW5jeS4gIE5vdGUgdGhhdCBsaW5lXG4gICAgICAgICAqIGFuZCBjb2x1bW4gbnVtYmVycyBhcmUgemVyby1iYXNlZCAtLSB0eXBpY2FsbHkgeW91IHdpbGwgd2FudCB0byBhZGRcbiAgICAgICAgICogMSB0byBlYWNoIGJlZm9yZSBkaXNwbGF5aW5nIHRvIGEgdXNlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBpbnQzMiBzcGFuID0gMiBbcGFja2VkID0gdHJ1ZV07XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNwYW4gPSBbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIGxlYWRpbmdfZGV0YWNoZWRfY29tbWVudHMgPSA2O1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5sZWFkaW5nRGV0YWNoZWRDb21tZW50cyA9IFtdO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTb3VyY2VDb2RlSW5mb19Mb2NhdGlvbigpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgU291cmNlQ29kZUluZm9fTG9jYXRpb24oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFNvdXJjZUNvZGVJbmZvX0xvY2F0aW9uKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKFNvdXJjZUNvZGVJbmZvX0xvY2F0aW9uLCBhLCBiKTtcbiAgICB9XG59XG5Tb3VyY2VDb2RlSW5mb19Mb2NhdGlvbi5ydW50aW1lID0gcHJvdG8yO1xuU291cmNlQ29kZUluZm9fTG9jYXRpb24udHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5Tb3VyY2VDb2RlSW5mby5Mb2NhdGlvblwiO1xuU291cmNlQ29kZUluZm9fTG9jYXRpb24uZmllbGRzID0gcHJvdG8yLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInBhdGhcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNSAvKiBTY2FsYXJUeXBlLklOVDMyICovLCByZXBlYXRlZDogdHJ1ZSwgcGFja2VkOiB0cnVlIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJzcGFuXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDUgLyogU2NhbGFyVHlwZS5JTlQzMiAqLywgcmVwZWF0ZWQ6IHRydWUsIHBhY2tlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwibGVhZGluZ19jb21tZW50c1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcInRyYWlsaW5nX2NvbW1lbnRzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIG9wdDogdHJ1ZSB9LFxuICAgIHsgbm86IDYsIG5hbWU6IFwibGVhZGluZ19kZXRhY2hlZF9jb21tZW50c1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCByZXBlYXRlZDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIERlc2NyaWJlcyB0aGUgcmVsYXRpb25zaGlwIGJldHdlZW4gZ2VuZXJhdGVkIGNvZGUgYW5kIGl0cyBvcmlnaW5hbCBzb3VyY2VcbiAqIGZpbGUuIEEgR2VuZXJhdGVkQ29kZUluZm8gbWVzc2FnZSBpcyBhc3NvY2lhdGVkIHdpdGggb25seSBvbmUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UgZmlsZSwgYnV0IG1heSBjb250YWluIHJlZmVyZW5jZXMgdG8gZGlmZmVyZW50IHNvdXJjZSAucHJvdG8gZmlsZXMuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvXG4gKi9cbmV4cG9ydCBjbGFzcyBHZW5lcmF0ZWRDb2RlSW5mbyBleHRlbmRzIE1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFuIEFubm90YXRpb24gY29ubmVjdHMgc29tZSBzcGFuIG9mIHRleHQgaW4gZ2VuZXJhdGVkIGNvZGUgdG8gYW4gZWxlbWVudFxuICAgICAgICAgKiBvZiBpdHMgZ2VuZXJhdGluZyAucHJvdG8gZmlsZS5cbiAgICAgICAgICpcbiAgICAgICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBnb29nbGUucHJvdG9idWYuR2VuZXJhdGVkQ29kZUluZm8uQW5ub3RhdGlvbiBhbm5vdGF0aW9uID0gMTtcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYW5ub3RhdGlvbiA9IFtdO1xuICAgICAgICBwcm90bzIudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBHZW5lcmF0ZWRDb2RlSW5mbygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgR2VuZXJhdGVkQ29kZUluZm8oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlZENvZGVJbmZvKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBlcXVhbHMoYSwgYikge1xuICAgICAgICByZXR1cm4gcHJvdG8yLnV0aWwuZXF1YWxzKEdlbmVyYXRlZENvZGVJbmZvLCBhLCBiKTtcbiAgICB9XG59XG5HZW5lcmF0ZWRDb2RlSW5mby5ydW50aW1lID0gcHJvdG8yO1xuR2VuZXJhdGVkQ29kZUluZm8udHlwZU5hbWUgPSBcImdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mb1wiO1xuR2VuZXJhdGVkQ29kZUluZm8uZmllbGRzID0gcHJvdG8yLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImFubm90YXRpb25cIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEdlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb24sIHJlcGVhdGVkOiB0cnVlIH0sXG5dKTtcbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb25cbiAqL1xuZXhwb3J0IGNsYXNzIEdlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb24gZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJZGVudGlmaWVzIHRoZSBlbGVtZW50IGluIHRoZSBvcmlnaW5hbCBzb3VyY2UgLnByb3RvIGZpbGUuIFRoaXMgZmllbGRcbiAgICAgICAgICogaXMgZm9ybWF0dGVkIHRoZSBzYW1lIGFzIFNvdXJjZUNvZGVJbmZvLkxvY2F0aW9uLnBhdGguXG4gICAgICAgICAqXG4gICAgICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgaW50MzIgcGF0aCA9IDEgW3BhY2tlZCA9IHRydWVdO1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5wYXRoID0gW107XG4gICAgICAgIHByb3RvMi51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb24oKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb24oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEdlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb24oKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzIudXRpbC5lcXVhbHMoR2VuZXJhdGVkQ29kZUluZm9fQW5ub3RhdGlvbiwgYSwgYik7XG4gICAgfVxufVxuR2VuZXJhdGVkQ29kZUluZm9fQW5ub3RhdGlvbi5ydW50aW1lID0gcHJvdG8yO1xuR2VuZXJhdGVkQ29kZUluZm9fQW5ub3RhdGlvbi50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb25cIjtcbkdlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb24uZmllbGRzID0gcHJvdG8yLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInBhdGhcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNSAvKiBTY2FsYXJUeXBlLklOVDMyICovLCByZXBlYXRlZDogdHJ1ZSwgcGFja2VkOiB0cnVlIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJzb3VyY2VfZmlsZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcImJlZ2luXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDUgLyogU2NhbGFyVHlwZS5JTlQzMiAqLywgb3B0OiB0cnVlIH0sXG4gICAgeyBubzogNCwgbmFtZTogXCJlbmRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNSAvKiBTY2FsYXJUeXBlLklOVDMyICovLCBvcHQ6IHRydWUgfSxcbiAgICB7IG5vOiA1LCBuYW1lOiBcInNlbWFudGljXCIsIGtpbmQ6IFwiZW51bVwiLCBUOiBwcm90bzIuZ2V0RW51bVR5cGUoR2VuZXJhdGVkQ29kZUluZm9fQW5ub3RhdGlvbl9TZW1hbnRpYyksIG9wdDogdHJ1ZSB9LFxuXSk7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGlkZW50aWZpZWQgb2JqZWN0J3MgZWZmZWN0IG9uIHRoZSBlbGVtZW50IGluIHRoZSBvcmlnaW5hbFxuICogLnByb3RvIGZpbGUuXG4gKlxuICogQGdlbmVyYXRlZCBmcm9tIGVudW0gZ29vZ2xlLnByb3RvYnVmLkdlbmVyYXRlZENvZGVJbmZvLkFubm90YXRpb24uU2VtYW50aWNcbiAqL1xuZXhwb3J0IHZhciBHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljO1xuKGZ1bmN0aW9uIChHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljKSB7XG4gICAgLyoqXG4gICAgICogVGhlcmUgaXMgbm8gZWZmZWN0IG9yIHRoZSBlZmZlY3QgaXMgaW5kZXNjcmliYWJsZS5cbiAgICAgKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBlbnVtIHZhbHVlOiBOT05FID0gMDtcbiAgICAgKi9cbiAgICBHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljW0dlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb25fU2VtYW50aWNbXCJOT05FXCJdID0gMF0gPSBcIk5PTkVcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgZWxlbWVudCBpcyBzZXQgb3Igb3RoZXJ3aXNlIG11dGF0ZWQuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogU0VUID0gMTtcbiAgICAgKi9cbiAgICBHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljW0dlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb25fU2VtYW50aWNbXCJTRVRcIl0gPSAxXSA9IFwiU0VUXCI7XG4gICAgLyoqXG4gICAgICogQW4gYWxpYXMgdG8gdGhlIGVsZW1lbnQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZW51bSB2YWx1ZTogQUxJQVMgPSAyO1xuICAgICAqL1xuICAgIEdlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb25fU2VtYW50aWNbR2VuZXJhdGVkQ29kZUluZm9fQW5ub3RhdGlvbl9TZW1hbnRpY1tcIkFMSUFTXCJdID0gMl0gPSBcIkFMSUFTXCI7XG59KShHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljIHx8IChHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljID0ge30pKTtcbi8vIFJldHJpZXZlIGVudW0gbWV0YWRhdGEgd2l0aDogcHJvdG8yLmdldEVudW1UeXBlKEdlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb25fU2VtYW50aWMpXG5wcm90bzIudXRpbC5zZXRFbnVtVHlwZShHZW5lcmF0ZWRDb2RlSW5mb19Bbm5vdGF0aW9uX1NlbWFudGljLCBcImdvb2dsZS5wcm90b2J1Zi5HZW5lcmF0ZWRDb2RlSW5mby5Bbm5vdGF0aW9uLlNlbWFudGljXCIsIFtcbiAgICB7IG5vOiAwLCBuYW1lOiBcIk5PTkVcIiB9LFxuICAgIHsgbm86IDEsIG5hbWU6IFwiU0VUXCIgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIkFMSUFTXCIgfSxcbl0pO1xuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjMgQnVmIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIi4uLy4uL21lc3NhZ2UuanNcIjtcbmltcG9ydCB7IHByb3RvMyB9IGZyb20gXCIuLi8uLi9wcm90bzMuanNcIjtcbi8qKlxuICogQSBnZW5lcmljIGVtcHR5IG1lc3NhZ2UgdGhhdCB5b3UgY2FuIHJlLXVzZSB0byBhdm9pZCBkZWZpbmluZyBkdXBsaWNhdGVkXG4gKiBlbXB0eSBtZXNzYWdlcyBpbiB5b3VyIEFQSXMuIEEgdHlwaWNhbCBleGFtcGxlIGlzIHRvIHVzZSBpdCBhcyB0aGUgcmVxdWVzdFxuICogb3IgdGhlIHJlc3BvbnNlIHR5cGUgb2YgYW4gQVBJIG1ldGhvZC4gRm9yIGluc3RhbmNlOlxuICpcbiAqICAgICBzZXJ2aWNlIEZvbyB7XG4gKiAgICAgICBycGMgQmFyKGdvb2dsZS5wcm90b2J1Zi5FbXB0eSkgcmV0dXJucyAoZ29vZ2xlLnByb3RvYnVmLkVtcHR5KTtcbiAqICAgICB9XG4gKlxuICpcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGdvb2dsZS5wcm90b2J1Zi5FbXB0eVxuICovXG5leHBvcnQgY2xhc3MgRW1wdHkgZXh0ZW5kcyBNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IEVtcHR5KCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFbXB0eSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgRW1wdHkoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgICB9XG4gICAgc3RhdGljIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoRW1wdHksIGEsIGIpO1xuICAgIH1cbn1cbkVtcHR5LnJ1bnRpbWUgPSBwcm90bzM7XG5FbXB0eS50eXBlTmFtZSA9IFwiZ29vZ2xlLnByb3RvYnVmLkVtcHR5XCI7XG5FbXB0eS5maWVsZHMgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW10pO1xuIiwgIi8vIEBnZW5lcmF0ZWQgYnkgcHJvdG9jLWdlbi1lcyB2MS42LjAgd2l0aCBwYXJhbWV0ZXIgXCJ0YXJnZXQ9dHNcIlxuLy8gQGdlbmVyYXRlZCBmcm9tIGZpbGUgdXNlci91c2VyLnByb3RvIChwYWNrYWdlIHVzZXIsIHN5bnRheCBwcm90bzMpXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxuaW1wb3J0IHR5cGUgeyBCaW5hcnlSZWFkT3B0aW9ucywgRmllbGRMaXN0LCBKc29uUmVhZE9wdGlvbnMsIEpzb25WYWx1ZSwgUGFydGlhbE1lc3NhZ2UsIFBsYWluTWVzc2FnZSB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbmltcG9ydCB7IE1lc3NhZ2UsIHByb3RvMyB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSB1c2VyLlZlcmlmeVVzZXJSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBWZXJpZnlVc2VyUmVxdWVzdCBleHRlbmRzIE1lc3NhZ2U8VmVyaWZ5VXNlclJlcXVlc3Q+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHNlY3JldCA9IDE7XG4gICAqL1xuICBzZWNyZXQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxWZXJpZnlVc2VyUmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwidXNlci5WZXJpZnlVc2VyUmVxdWVzdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwic2VjcmV0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFZlcmlmeVVzZXJSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFZlcmlmeVVzZXJSZXF1ZXN0KCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBWZXJpZnlVc2VyUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBWZXJpZnlVc2VyUmVxdWVzdCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVmVyaWZ5VXNlclJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgVmVyaWZ5VXNlclJlcXVlc3QoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogVmVyaWZ5VXNlclJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8VmVyaWZ5VXNlclJlcXVlc3Q+IHwgdW5kZWZpbmVkLCBiOiBWZXJpZnlVc2VyUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxWZXJpZnlVc2VyUmVxdWVzdD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFZlcmlmeVVzZXJSZXF1ZXN0LCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHVzZXIuR3JvdXBJbmZvUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgR3JvdXBJbmZvUmVxdWVzdCBleHRlbmRzIE1lc3NhZ2U8R3JvdXBJbmZvUmVxdWVzdD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgc2VjcmV0ID0gMTtcbiAgICovXG4gIHNlY3JldCA9IFwiXCI7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEdyb3VwSW5mb1JlcXVlc3Q+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInVzZXIuR3JvdXBJbmZvUmVxdWVzdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwic2VjcmV0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEdyb3VwSW5mb1JlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgR3JvdXBJbmZvUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR3JvdXBJbmZvUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBHcm91cEluZm9SZXF1ZXN0KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHcm91cEluZm9SZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEdyb3VwSW5mb1JlcXVlc3QoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogR3JvdXBJbmZvUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxHcm91cEluZm9SZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogR3JvdXBJbmZvUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxHcm91cEluZm9SZXF1ZXN0PiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoR3JvdXBJbmZvUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSB1c2VyLkdyb3VwSURcbiAqL1xuZXhwb3J0IGNsYXNzIEdyb3VwSUQgZXh0ZW5kcyBNZXNzYWdlPEdyb3VwSUQ+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGdyb3VwX2lkID0gMTtcbiAgICovXG4gIGdyb3VwSWQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxHcm91cElEPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJ1c2VyLkdyb3VwSURcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImdyb3VwX2lkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEdyb3VwSUQge1xuICAgIHJldHVybiBuZXcgR3JvdXBJRCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR3JvdXBJRCB7XG4gICAgcmV0dXJuIG5ldyBHcm91cElEKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHcm91cElEIHtcbiAgICByZXR1cm4gbmV3IEdyb3VwSUQoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogR3JvdXBJRCB8IFBsYWluTWVzc2FnZTxHcm91cElEPiB8IHVuZGVmaW5lZCwgYjogR3JvdXBJRCB8IFBsYWluTWVzc2FnZTxHcm91cElEPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoR3JvdXBJRCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSB1c2VyLlNoYXJlUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgU2hhcmVSZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZTxTaGFyZVJlcXVlc3Q+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGNvbnRlbnRfaWQgPSAxO1xuICAgKi9cbiAgY29udGVudElkID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgZ3JvdXBfaWQgPSAyO1xuICAgKi9cbiAgZ3JvdXBJZCA9IFwiXCI7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFNoYXJlUmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwidXNlci5TaGFyZVJlcXVlc3RcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImNvbnRlbnRfaWRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiZ3JvdXBfaWRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogU2hhcmVSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFNoYXJlUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU2hhcmVSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFNoYXJlUmVxdWVzdCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU2hhcmVSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFNoYXJlUmVxdWVzdCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBTaGFyZVJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8U2hhcmVSZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogU2hhcmVSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPFNoYXJlUmVxdWVzdD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFNoYXJlUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSB1c2VyLkdyb3VwSW52aXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBHcm91cEludml0ZSBleHRlbmRzIE1lc3NhZ2U8R3JvdXBJbnZpdGU+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHNlY3JldCA9IDE7XG4gICAqL1xuICBzZWNyZXQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxHcm91cEludml0ZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwidXNlci5Hcm91cEludml0ZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwic2VjcmV0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEdyb3VwSW52aXRlIHtcbiAgICByZXR1cm4gbmV3IEdyb3VwSW52aXRlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHcm91cEludml0ZSB7XG4gICAgcmV0dXJuIG5ldyBHcm91cEludml0ZSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR3JvdXBJbnZpdGUge1xuICAgIHJldHVybiBuZXcgR3JvdXBJbnZpdGUoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogR3JvdXBJbnZpdGUgfCBQbGFpbk1lc3NhZ2U8R3JvdXBJbnZpdGU+IHwgdW5kZWZpbmVkLCBiOiBHcm91cEludml0ZSB8IFBsYWluTWVzc2FnZTxHcm91cEludml0ZT4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEdyb3VwSW52aXRlLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHVzZXIuR3JvdXBzXG4gKi9cbmV4cG9ydCBjbGFzcyBHcm91cHMgZXh0ZW5kcyBNZXNzYWdlPEdyb3Vwcz4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCB1c2VyLkdyb3VwIGdyb3VwcyA9IDE7XG4gICAqL1xuICBncm91cHM6IEdyb3VwW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8R3JvdXBzPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJ1c2VyLkdyb3Vwc1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiZ3JvdXBzXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBHcm91cCwgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEdyb3VwcyB7XG4gICAgcmV0dXJuIG5ldyBHcm91cHMoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEdyb3VwcyB7XG4gICAgcmV0dXJuIG5ldyBHcm91cHMoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEdyb3VwcyB7XG4gICAgcmV0dXJuIG5ldyBHcm91cHMoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogR3JvdXBzIHwgUGxhaW5NZXNzYWdlPEdyb3Vwcz4gfCB1bmRlZmluZWQsIGI6IEdyb3VwcyB8IFBsYWluTWVzc2FnZTxHcm91cHM+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhHcm91cHMsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgdXNlci5BbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3QgZXh0ZW5kcyBNZXNzYWdlPEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0PiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0ZXh0ID0gMTtcbiAgICovXG4gIHRleHQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxBbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwidXNlci5BbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwidGV4dFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBBbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBBbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgQW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3QoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogQW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8QW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3Q+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhBbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSB1c2VyLlVzZXJcbiAqL1xuZXhwb3J0IGNsYXNzIFVzZXIgZXh0ZW5kcyBNZXNzYWdlPFVzZXI+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGVtYWlsID0gMTtcbiAgICovXG4gIGVtYWlsID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcGFzc3dvcmQgPSAyO1xuICAgKi9cbiAgcGFzc3dvcmQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB1c2VybmFtZSA9IDM7XG4gICAqL1xuICB1c2VybmFtZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogdXNlci5Db25maWcgY29uZmlnID0gNDtcbiAgICovXG4gIGNvbmZpZz86IENvbmZpZztcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8VXNlcj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwidXNlci5Vc2VyXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJlbWFpbFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJwYXNzd29yZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJ1c2VybmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogNCwgbmFtZTogXCJjb25maWdcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IENvbmZpZyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogVXNlciB7XG4gICAgcmV0dXJuIG5ldyBVc2VyKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBVc2VyIHtcbiAgICByZXR1cm4gbmV3IFVzZXIoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFVzZXIge1xuICAgIHJldHVybiBuZXcgVXNlcigpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBVc2VyIHwgUGxhaW5NZXNzYWdlPFVzZXI+IHwgdW5kZWZpbmVkLCBiOiBVc2VyIHwgUGxhaW5NZXNzYWdlPFVzZXI+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhVc2VyLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHVzZXIuR3JvdXBcbiAqL1xuZXhwb3J0IGNsYXNzIEdyb3VwIGV4dGVuZHMgTWVzc2FnZTxHcm91cD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaWQgPSAxO1xuICAgKi9cbiAgaWQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBuYW1lID0gMjtcbiAgICovXG4gIG5hbWUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIHN0cmluZyB1c2VycyA9IDM7XG4gICAqL1xuICB1c2Vyczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8R3JvdXA+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInVzZXIuR3JvdXBcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImlkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcIm5hbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwidXNlcnNcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEdyb3VwIHtcbiAgICByZXR1cm4gbmV3IEdyb3VwKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHcm91cCB7XG4gICAgcmV0dXJuIG5ldyBHcm91cCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR3JvdXAge1xuICAgIHJldHVybiBuZXcgR3JvdXAoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogR3JvdXAgfCBQbGFpbk1lc3NhZ2U8R3JvdXA+IHwgdW5kZWZpbmVkLCBiOiBHcm91cCB8IFBsYWluTWVzc2FnZTxHcm91cD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEdyb3VwLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHVzZXIuQ29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25maWcgZXh0ZW5kcyBNZXNzYWdlPENvbmZpZz4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBzdHJpbmcgZG9tYWluX3doaXRlbGlzdCA9IDE7XG4gICAqL1xuICBkb21haW5XaGl0ZWxpc3Q6IHN0cmluZ1tdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPENvbmZpZz4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwidXNlci5Db25maWdcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImRvbWFpbl93aGl0ZWxpc3RcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IENvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBDb25maWcoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IENvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBDb25maWcoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IENvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBDb25maWcoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogQ29uZmlnIHwgUGxhaW5NZXNzYWdlPENvbmZpZz4gfCB1bmRlZmluZWQsIGI6IENvbmZpZyB8IFBsYWluTWVzc2FnZTxDb25maWc+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhDb25maWcsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgdXNlci5Mb2dpblJlc3BvbnNlXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2dpblJlc3BvbnNlIGV4dGVuZHMgTWVzc2FnZTxMb2dpblJlc3BvbnNlPiB7XG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxMb2dpblJlc3BvbnNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJ1c2VyLkxvZ2luUmVzcG9uc2VcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IExvZ2luUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgTG9naW5SZXNwb25zZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogTG9naW5SZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBMb2dpblJlc3BvbnNlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBMb2dpblJlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IExvZ2luUmVzcG9uc2UoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogTG9naW5SZXNwb25zZSB8IFBsYWluTWVzc2FnZTxMb2dpblJlc3BvbnNlPiB8IHVuZGVmaW5lZCwgYjogTG9naW5SZXNwb25zZSB8IFBsYWluTWVzc2FnZTxMb2dpblJlc3BvbnNlPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoTG9naW5SZXNwb25zZSwgYSwgYik7XG4gIH1cbn1cblxuIiwgIi8vIEBnZW5lcmF0ZWQgYnkgcHJvdG9jLWdlbi1lcyB2MS42LjAgd2l0aCBwYXJhbWV0ZXIgXCJ0YXJnZXQ9dHNcIlxuLy8gQGdlbmVyYXRlZCBmcm9tIGZpbGUgY29udGVudC9jb250ZW50LnByb3RvIChwYWNrYWdlIGNvbnRlbnQsIHN5bnRheCBwcm90bzMpXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxuaW1wb3J0IHR5cGUgeyBCaW5hcnlSZWFkT3B0aW9ucywgRmllbGRMaXN0LCBKc29uUmVhZE9wdGlvbnMsIEpzb25WYWx1ZSwgUGFydGlhbE1lc3NhZ2UsIFBsYWluTWVzc2FnZSB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbmltcG9ydCB7IERlc2NyaXB0b3JQcm90bywgRW51bURlc2NyaXB0b3JQcm90bywgTWVzc2FnZSwgcHJvdG8zLCBwcm90b0ludDY0IH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi91c2VyL3VzZXJfcGIuanNcIjtcblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlR5cGVzUmVzcG9uc2VcbiAqL1xuZXhwb3J0IGNsYXNzIFR5cGVzUmVzcG9uc2UgZXh0ZW5kcyBNZXNzYWdlPFR5cGVzUmVzcG9uc2U+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogY29udGVudC5HUlBDVHlwZUluZm8gY29udGVudCA9IDE7XG4gICAqL1xuICBjb250ZW50PzogR1JQQ1R5cGVJbmZvO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGNvbnRlbnQuR1JQQ1R5cGVJbmZvIHNpdGUgPSAyO1xuICAgKi9cbiAgc2l0ZT86IEdSUENUeXBlSW5mbztcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8VHlwZXNSZXNwb25zZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5UeXBlc1Jlc3BvbnNlXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJjb250ZW50XCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBHUlBDVHlwZUluZm8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcInNpdGVcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEdSUENUeXBlSW5mbyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogVHlwZXNSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlc1Jlc3BvbnNlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBUeXBlc1Jlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IFR5cGVzUmVzcG9uc2UoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFR5cGVzUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgVHlwZXNSZXNwb25zZSgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBUeXBlc1Jlc3BvbnNlIHwgUGxhaW5NZXNzYWdlPFR5cGVzUmVzcG9uc2U+IHwgdW5kZWZpbmVkLCBiOiBUeXBlc1Jlc3BvbnNlIHwgUGxhaW5NZXNzYWdlPFR5cGVzUmVzcG9uc2U+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhUeXBlc1Jlc3BvbnNlLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuR2V0U291cmNlc1JlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEdldFNvdXJjZXNSZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZTxHZXRTb3VyY2VzUmVxdWVzdD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBzdHJpbmcgY29udGVudF90eXBlcyA9IDE7XG4gICAqL1xuICBjb250ZW50VHlwZXM6IHN0cmluZ1tdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEdldFNvdXJjZXNSZXF1ZXN0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LkdldFNvdXJjZXNSZXF1ZXN0XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJjb250ZW50X3R5cGVzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBHZXRTb3VyY2VzUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBHZXRTb3VyY2VzUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR2V0U291cmNlc1JlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgR2V0U291cmNlc1JlcXVlc3QoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEdldFNvdXJjZXNSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEdldFNvdXJjZXNSZXF1ZXN0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IEdldFNvdXJjZXNSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPEdldFNvdXJjZXNSZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogR2V0U291cmNlc1JlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8R2V0U291cmNlc1JlcXVlc3Q+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhHZXRTb3VyY2VzUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlZvaWNlSW5wdXRSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBWb2ljZUlucHV0UmVxdWVzdCBleHRlbmRzIE1lc3NhZ2U8Vm9pY2VJbnB1dFJlcXVlc3Q+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogaW50MzIgY2FwdHVyZV9kZXZpY2UgPSAxO1xuICAgKi9cbiAgY2FwdHVyZURldmljZSA9IDA7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFZvaWNlSW5wdXRSZXF1ZXN0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlZvaWNlSW5wdXRSZXF1ZXN0XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJjYXB0dXJlX2RldmljZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA1IC8qIFNjYWxhclR5cGUuSU5UMzIgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFZvaWNlSW5wdXRSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFZvaWNlSW5wdXRSZXF1ZXN0KCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBWb2ljZUlucHV0UmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBWb2ljZUlucHV0UmVxdWVzdCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVm9pY2VJbnB1dFJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgVm9pY2VJbnB1dFJlcXVlc3QoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogVm9pY2VJbnB1dFJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8Vm9pY2VJbnB1dFJlcXVlc3Q+IHwgdW5kZWZpbmVkLCBiOiBWb2ljZUlucHV0UmVxdWVzdCB8IFBsYWluTWVzc2FnZTxWb2ljZUlucHV0UmVxdWVzdD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFZvaWNlSW5wdXRSZXF1ZXN0LCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuVm9pY2VJbnB1dFJlc3BvbnNlXG4gKi9cbmV4cG9ydCBjbGFzcyBWb2ljZUlucHV0UmVzcG9uc2UgZXh0ZW5kcyBNZXNzYWdlPFZvaWNlSW5wdXRSZXNwb25zZT4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlNlZ21lbnQgc2VnbWVudCA9IDE7XG4gICAqL1xuICBzZWdtZW50PzogU2VnbWVudDtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8Vm9pY2VJbnB1dFJlc3BvbnNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlZvaWNlSW5wdXRSZXNwb25zZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwic2VnbWVudFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogU2VnbWVudCB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogVm9pY2VJbnB1dFJlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IFZvaWNlSW5wdXRSZXNwb25zZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVm9pY2VJbnB1dFJlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IFZvaWNlSW5wdXRSZXNwb25zZSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVm9pY2VJbnB1dFJlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IFZvaWNlSW5wdXRSZXNwb25zZSgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBWb2ljZUlucHV0UmVzcG9uc2UgfCBQbGFpbk1lc3NhZ2U8Vm9pY2VJbnB1dFJlc3BvbnNlPiB8IHVuZGVmaW5lZCwgYjogVm9pY2VJbnB1dFJlc3BvbnNlIHwgUGxhaW5NZXNzYWdlPFZvaWNlSW5wdXRSZXNwb25zZT4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFZvaWNlSW5wdXRSZXNwb25zZSwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlJlbGF0ZVJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFJlbGF0ZVJlcXVlc3QgZXh0ZW5kcyBNZXNzYWdlPFJlbGF0ZVJlcXVlc3Q+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHBhcmVudCA9IDE7XG4gICAqL1xuICBwYXJlbnQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIHN0cmluZyBjaGlsZHJlbiA9IDI7XG4gICAqL1xuICBjaGlsZHJlbjogc3RyaW5nW10gPSBbXTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIGNvbm5lY3QgPSAzO1xuICAgKi9cbiAgY29ubmVjdCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxSZWxhdGVSZXF1ZXN0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlJlbGF0ZVJlcXVlc3RcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInBhcmVudFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJjaGlsZHJlblwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwiY29ubmVjdFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogUmVsYXRlUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBSZWxhdGVSZXF1ZXN0KCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBSZWxhdGVSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFJlbGF0ZVJlcXVlc3QoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFJlbGF0ZVJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgUmVsYXRlUmVxdWVzdCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBSZWxhdGVSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPFJlbGF0ZVJlcXVlc3Q+IHwgdW5kZWZpbmVkLCBiOiBSZWxhdGVSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPFJlbGF0ZVJlcXVlc3Q+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhSZWxhdGVSZXF1ZXN0LCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuU291cmNlc1xuICovXG5leHBvcnQgY2xhc3MgU291cmNlcyBleHRlbmRzIE1lc3NhZ2U8U291cmNlcz4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBjb250ZW50LkVudW1lcmF0ZWRTb3VyY2Ugc291cmNlcyA9IDE7XG4gICAqL1xuICBzb3VyY2VzOiBFbnVtZXJhdGVkU291cmNlW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8U291cmNlcz4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5Tb3VyY2VzXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJzb3VyY2VzXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBFbnVtZXJhdGVkU291cmNlLCByZXBlYXRlZDogdHJ1ZSB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogU291cmNlcyB7XG4gICAgcmV0dXJuIG5ldyBTb3VyY2VzKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTb3VyY2VzIHtcbiAgICByZXR1cm4gbmV3IFNvdXJjZXMoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFNvdXJjZXMge1xuICAgIHJldHVybiBuZXcgU291cmNlcygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBTb3VyY2VzIHwgUGxhaW5NZXNzYWdlPFNvdXJjZXM+IHwgdW5kZWZpbmVkLCBiOiBTb3VyY2VzIHwgUGxhaW5NZXNzYWdlPFNvdXJjZXM+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhTb3VyY2VzLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuRW51bWVyYXRlZFNvdXJjZVxuICovXG5leHBvcnQgY2xhc3MgRW51bWVyYXRlZFNvdXJjZSBleHRlbmRzIE1lc3NhZ2U8RW51bWVyYXRlZFNvdXJjZT4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlNvdXJjZSBzb3VyY2UgPSAxO1xuICAgKi9cbiAgc291cmNlPzogU291cmNlO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGNvbnRlbnQuRGlzcGxheUNvbnRlbnQgZGlzcGxheV9jb250ZW50ID0gMjtcbiAgICovXG4gIGRpc3BsYXlDb250ZW50OiBEaXNwbGF5Q29udGVudFtdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEVudW1lcmF0ZWRTb3VyY2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuRW51bWVyYXRlZFNvdXJjZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwic291cmNlXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTb3VyY2UgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImRpc3BsYXlfY29udGVudFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRGlzcGxheUNvbnRlbnQsIHJlcGVhdGVkOiB0cnVlIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBFbnVtZXJhdGVkU291cmNlIHtcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZWRTb3VyY2UoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEVudW1lcmF0ZWRTb3VyY2Uge1xuICAgIHJldHVybiBuZXcgRW51bWVyYXRlZFNvdXJjZSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogRW51bWVyYXRlZFNvdXJjZSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGVkU291cmNlKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IEVudW1lcmF0ZWRTb3VyY2UgfCBQbGFpbk1lc3NhZ2U8RW51bWVyYXRlZFNvdXJjZT4gfCB1bmRlZmluZWQsIGI6IEVudW1lcmF0ZWRTb3VyY2UgfCBQbGFpbk1lc3NhZ2U8RW51bWVyYXRlZFNvdXJjZT4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEVudW1lcmF0ZWRTb3VyY2UsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5EaXNwbGF5Q29udGVudFxuICovXG5leHBvcnQgY2xhc3MgRGlzcGxheUNvbnRlbnQgZXh0ZW5kcyBNZXNzYWdlPERpc3BsYXlDb250ZW50PiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0aXRsZSA9IDE7XG4gICAqL1xuICB0aXRsZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGRlc2NyaXB0aW9uID0gMjtcbiAgICovXG4gIGRlc2NyaXB0aW9uID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdHlwZSA9IDM7XG4gICAqL1xuICB0eXBlID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LkNvbnRlbnQgY29udGVudCA9IDQ7XG4gICAqL1xuICBjb250ZW50PzogQ29udGVudDtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8RGlzcGxheUNvbnRlbnQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuRGlzcGxheUNvbnRlbnRcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInRpdGxlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImRlc2NyaXB0aW9uXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcInR5cGVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwiY29udGVudFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogQ29udGVudCB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogRGlzcGxheUNvbnRlbnQge1xuICAgIHJldHVybiBuZXcgRGlzcGxheUNvbnRlbnQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IERpc3BsYXlDb250ZW50IHtcbiAgICByZXR1cm4gbmV3IERpc3BsYXlDb250ZW50KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBEaXNwbGF5Q29udGVudCB7XG4gICAgcmV0dXJuIG5ldyBEaXNwbGF5Q29udGVudCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBEaXNwbGF5Q29udGVudCB8IFBsYWluTWVzc2FnZTxEaXNwbGF5Q29udGVudD4gfCB1bmRlZmluZWQsIGI6IERpc3BsYXlDb250ZW50IHwgUGxhaW5NZXNzYWdlPERpc3BsYXlDb250ZW50PiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoRGlzcGxheUNvbnRlbnQsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5Tb3VyY2VcbiAqL1xuZXhwb3J0IGNsYXNzIFNvdXJjZSBleHRlbmRzIE1lc3NhZ2U8U291cmNlPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBuYW1lID0gMTtcbiAgICovXG4gIG5hbWUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gb25lb2YgY29udGVudC5Tb3VyY2UudHlwZVxuICAgKi9cbiAgdHlwZToge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogY29udGVudC5TZXJ2ZXIgc2VydmVyID0gMjtcbiAgICAgKi9cbiAgICB2YWx1ZTogU2VydmVyO1xuICAgIGNhc2U6IFwic2VydmVyXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LkZvbGRlciBmb2xkZXIgPSAzO1xuICAgICAqL1xuICAgIHZhbHVlOiBGb2xkZXI7XG4gICAgY2FzZTogXCJmb2xkZXJcIjtcbiAgfSB8IHsgY2FzZTogdW5kZWZpbmVkOyB2YWx1ZT86IHVuZGVmaW5lZCB9ID0geyBjYXNlOiB1bmRlZmluZWQgfTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8U291cmNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlNvdXJjZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJzZXJ2ZXJcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFNlcnZlciwgb25lb2Y6IFwidHlwZVwiIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJmb2xkZXJcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEZvbGRlciwgb25lb2Y6IFwidHlwZVwiIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBTb3VyY2Uge1xuICAgIHJldHVybiBuZXcgU291cmNlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTb3VyY2Uge1xuICAgIHJldHVybiBuZXcgU291cmNlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTb3VyY2Uge1xuICAgIHJldHVybiBuZXcgU291cmNlKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFNvdXJjZSB8IFBsYWluTWVzc2FnZTxTb3VyY2U+IHwgdW5kZWZpbmVkLCBiOiBTb3VyY2UgfCBQbGFpbk1lc3NhZ2U8U291cmNlPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoU291cmNlLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuU2VydmVyXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2ZXIgZXh0ZW5kcyBNZXNzYWdlPFNlcnZlcj4ge1xuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8U2VydmVyPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlNlcnZlclwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogU2VydmVyIHtcbiAgICByZXR1cm4gbmV3IFNlcnZlcigpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU2VydmVyIHtcbiAgICByZXR1cm4gbmV3IFNlcnZlcigpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU2VydmVyIHtcbiAgICByZXR1cm4gbmV3IFNlcnZlcigpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBTZXJ2ZXIgfCBQbGFpbk1lc3NhZ2U8U2VydmVyPiB8IHVuZGVmaW5lZCwgYjogU2VydmVyIHwgUGxhaW5NZXNzYWdlPFNlcnZlcj4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFNlcnZlciwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LkZvbGRlclxuICovXG5leHBvcnQgY2xhc3MgRm9sZGVyIGV4dGVuZHMgTWVzc2FnZTxGb2xkZXI+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHBhdGggPSAyO1xuICAgKi9cbiAgcGF0aCA9IFwiXCI7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEZvbGRlcj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5Gb2xkZXJcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAyLCBuYW1lOiBcInBhdGhcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogRm9sZGVyIHtcbiAgICByZXR1cm4gbmV3IEZvbGRlcigpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogRm9sZGVyIHtcbiAgICByZXR1cm4gbmV3IEZvbGRlcigpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogRm9sZGVyIHtcbiAgICByZXR1cm4gbmV3IEZvbGRlcigpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBGb2xkZXIgfCBQbGFpbk1lc3NhZ2U8Rm9sZGVyPiB8IHVuZGVmaW5lZCwgYjogRm9sZGVyIHwgUGxhaW5NZXNzYWdlPEZvbGRlcj4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEZvbGRlciwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlNldFRhZ3NSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBTZXRUYWdzUmVxdWVzdCBleHRlbmRzIE1lc3NhZ2U8U2V0VGFnc1JlcXVlc3Q+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGNvbnRlbnRfaWQgPSAxO1xuICAgKi9cbiAgY29udGVudElkID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBzdHJpbmcgdGFncyA9IDI7XG4gICAqL1xuICB0YWdzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxTZXRUYWdzUmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5TZXRUYWdzUmVxdWVzdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiY29udGVudF9pZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJ0YWdzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBTZXRUYWdzUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBTZXRUYWdzUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU2V0VGFnc1JlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgU2V0VGFnc1JlcXVlc3QoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFNldFRhZ3NSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFNldFRhZ3NSZXF1ZXN0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFNldFRhZ3NSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPFNldFRhZ3NSZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogU2V0VGFnc1JlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8U2V0VGFnc1JlcXVlc3Q+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhTZXRUYWdzUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlRhZ1JlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFRhZ1JlcXVlc3QgZXh0ZW5kcyBNZXNzYWdlPFRhZ1JlcXVlc3Q+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGdyb3VwX2lkID0gMTtcbiAgICovXG4gIGdyb3VwSWQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxUYWdSZXF1ZXN0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlRhZ1JlcXVlc3RcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImdyb3VwX2lkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFRhZ1JlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgVGFnUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVGFnUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBUYWdSZXF1ZXN0KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBUYWdSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFRhZ1JlcXVlc3QoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogVGFnUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxUYWdSZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogVGFnUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxUYWdSZXF1ZXN0PiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoVGFnUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlRhZ3NcbiAqL1xuZXhwb3J0IGNsYXNzIFRhZ3MgZXh0ZW5kcyBNZXNzYWdlPFRhZ3M+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgY29udGVudC5UYWcgdGFncyA9IDE7XG4gICAqL1xuICB0YWdzOiBUYWdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxUYWdzPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlRhZ3NcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInRhZ3NcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFRhZywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFRhZ3Mge1xuICAgIHJldHVybiBuZXcgVGFncygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVGFncyB7XG4gICAgcmV0dXJuIG5ldyBUYWdzKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBUYWdzIHtcbiAgICByZXR1cm4gbmV3IFRhZ3MoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogVGFncyB8IFBsYWluTWVzc2FnZTxUYWdzPiB8IHVuZGVmaW5lZCwgYjogVGFncyB8IFBsYWluTWVzc2FnZTxUYWdzPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoVGFncywgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlRhZ1xuICovXG5leHBvcnQgY2xhc3MgVGFnIGV4dGVuZHMgTWVzc2FnZTxUYWc+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIG5hbWUgPSAxO1xuICAgKi9cbiAgbmFtZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgY29udGVudC5UYWcgc3ViX3RhZ3MgPSAyO1xuICAgKi9cbiAgc3ViVGFnczogVGFnW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8VGFnPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlRhZ1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJzdWJfdGFnc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogVGFnLCByZXBlYXRlZDogdHJ1ZSB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogVGFnIHtcbiAgICByZXR1cm4gbmV3IFRhZygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVGFnIHtcbiAgICByZXR1cm4gbmV3IFRhZygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVGFnIHtcbiAgICByZXR1cm4gbmV3IFRhZygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBUYWcgfCBQbGFpbk1lc3NhZ2U8VGFnPiB8IHVuZGVmaW5lZCwgYjogVGFnIHwgUGxhaW5NZXNzYWdlPFRhZz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFRhZywgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LkNvbnRlbnRJRHNcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRlbnRJRHMgZXh0ZW5kcyBNZXNzYWdlPENvbnRlbnRJRHM+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIGNvbnRlbnRfaWRzID0gMTtcbiAgICovXG4gIGNvbnRlbnRJZHM6IHN0cmluZ1tdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPENvbnRlbnRJRHM+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuQ29udGVudElEc1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiY29udGVudF9pZHNcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IENvbnRlbnRJRHMge1xuICAgIHJldHVybiBuZXcgQ29udGVudElEcygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQ29udGVudElEcyB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50SURzKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBDb250ZW50SURzIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRJRHMoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogQ29udGVudElEcyB8IFBsYWluTWVzc2FnZTxDb250ZW50SURzPiB8IHVuZGVmaW5lZCwgYjogQ29udGVudElEcyB8IFBsYWluTWVzc2FnZTxDb250ZW50SURzPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoQ29udGVudElEcywgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LkNvbnRlbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250ZW50cyBleHRlbmRzIE1lc3NhZ2U8Q29udGVudHM+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogY29udGVudC5Db250ZW50IGNvbnRlbnQgPSAxO1xuICAgKi9cbiAgY29udGVudD86IENvbnRlbnQ7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIHRhZ3MgPSAyO1xuICAgKi9cbiAgdGFnczogc3RyaW5nW10gPSBbXTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBjb250ZW50LkNvbnRlbnQgcmVsYXRlZCA9IDM7XG4gICAqL1xuICByZWxhdGVkOiBDb250ZW50W10gPSBbXTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBzdHJpbmcgcGFyZW50cyA9IDQ7XG4gICAqL1xuICBwYXJlbnRzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxDb250ZW50cz4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5Db250ZW50c1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiY29udGVudFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogQ29udGVudCB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwidGFnc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwicmVsYXRlZFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogQ29udGVudCwgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcInBhcmVudHNcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IENvbnRlbnRzIHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnRzKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBDb250ZW50cyB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50cygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQ29udGVudHMge1xuICAgIHJldHVybiBuZXcgQ29udGVudHMoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogQ29udGVudHMgfCBQbGFpbk1lc3NhZ2U8Q29udGVudHM+IHwgdW5kZWZpbmVkLCBiOiBDb250ZW50cyB8IFBsYWluTWVzc2FnZTxDb250ZW50cz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKENvbnRlbnRzLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuUXVlcnlcbiAqL1xuZXhwb3J0IGNsYXNzIFF1ZXJ5IGV4dGVuZHMgTWVzc2FnZTxRdWVyeT4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcXVlcnkgPSAxO1xuICAgKi9cbiAgcXVlcnkgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHVpbnQzMiBwYWdlID0gMjtcbiAgICovXG4gIHBhZ2UgPSAwO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBjb250ZW50SUQgPSAzO1xuICAgKi9cbiAgY29udGVudElEID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgZ3JvdXBJRCA9IDQ7XG4gICAqL1xuICBncm91cElEID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBzdHJpbmcgdGFncyA9IDU7XG4gICAqL1xuICB0YWdzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIHN0cmluZyBjb250ZW50X3R5cGVzID0gNjtcbiAgICovXG4gIGNvbnRlbnRUeXBlczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8UXVlcnk+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuUXVlcnlcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInF1ZXJ5XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcInBhZ2VcIiwga2luZDogXCJzY2FsYXJcIiwgVDogMTMgLyogU2NhbGFyVHlwZS5VSU5UMzIgKi8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcImNvbnRlbnRJRFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogNCwgbmFtZTogXCJncm91cElEXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA1LCBuYW1lOiBcInRhZ3NcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiA2LCBuYW1lOiBcImNvbnRlbnRfdHlwZXNcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFF1ZXJ5IHtcbiAgICByZXR1cm4gbmV3IFF1ZXJ5KCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBRdWVyeSB7XG4gICAgcmV0dXJuIG5ldyBRdWVyeSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogUXVlcnkge1xuICAgIHJldHVybiBuZXcgUXVlcnkoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogUXVlcnkgfCBQbGFpbk1lc3NhZ2U8UXVlcnk+IHwgdW5kZWZpbmVkLCBiOiBRdWVyeSB8IFBsYWluTWVzc2FnZTxRdWVyeT4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFF1ZXJ5LCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuUmVzdWx0c1xuICovXG5leHBvcnQgY2xhc3MgUmVzdWx0cyBleHRlbmRzIE1lc3NhZ2U8UmVzdWx0cz4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBjb250ZW50LlN0b3JlZENvbnRlbnQgc3RvcmVkQ29udGVudCA9IDE7XG4gICAqL1xuICBzdG9yZWRDb250ZW50OiBTdG9yZWRDb250ZW50W10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8UmVzdWx0cz4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5SZXN1bHRzXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJzdG9yZWRDb250ZW50XCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTdG9yZWRDb250ZW50LCByZXBlYXRlZDogdHJ1ZSB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogUmVzdWx0cyB7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHRzKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBSZXN1bHRzIHtcbiAgICByZXR1cm4gbmV3IFJlc3VsdHMoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFJlc3VsdHMge1xuICAgIHJldHVybiBuZXcgUmVzdWx0cygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBSZXN1bHRzIHwgUGxhaW5NZXNzYWdlPFJlc3VsdHM+IHwgdW5kZWZpbmVkLCBiOiBSZXN1bHRzIHwgUGxhaW5NZXNzYWdlPFJlc3VsdHM+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhSZXN1bHRzLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuU3RvcmVkQ29udGVudFxuICovXG5leHBvcnQgY2xhc3MgU3RvcmVkQ29udGVudCBleHRlbmRzIE1lc3NhZ2U8U3RvcmVkQ29udGVudD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LkNvbnRlbnQgY29udGVudCA9IDE7XG4gICAqL1xuICBjb250ZW50PzogQ29udGVudDtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaWQgPSAyO1xuICAgKi9cbiAgaWQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGNvbnRlbnQuQ29udGVudCByZWxhdGVkID0gMztcbiAgICovXG4gIHJlbGF0ZWQ6IENvbnRlbnRbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0aXRsZSA9IDQ7XG4gICAqL1xuICB0aXRsZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGRlc2NyaXB0aW9uID0gNTtcbiAgICovXG4gIGRlc2NyaXB0aW9uID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaW1hZ2UgPSA2O1xuICAgKi9cbiAgaW1hZ2UgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB1cmwgPSA3O1xuICAgKi9cbiAgdXJsID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiB1c2VyLlVzZXIgdXNlciA9IDk7XG4gICAqL1xuICB1c2VyPzogVXNlcjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBjb250ZW50LlRhZyB0YWdzID0gMTA7XG4gICAqL1xuICB0YWdzOiBUYWdbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBwcmV2aWV3ID0gMTE7XG4gICAqL1xuICBwcmV2aWV3ID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8U3RvcmVkQ29udGVudD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5TdG9yZWRDb250ZW50XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJjb250ZW50XCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBDb250ZW50IH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJpZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJyZWxhdGVkXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBDb250ZW50LCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwidGl0bGVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDUsIG5hbWU6IFwiZGVzY3JpcHRpb25cIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDYsIG5hbWU6IFwiaW1hZ2VcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDcsIG5hbWU6IFwidXJsXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA5LCBuYW1lOiBcInVzZXJcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFVzZXIgfSxcbiAgICB7IG5vOiAxMCwgbmFtZTogXCJ0YWdzXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBUYWcsIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogMTEsIG5hbWU6IFwicHJldmlld1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBTdG9yZWRDb250ZW50IHtcbiAgICByZXR1cm4gbmV3IFN0b3JlZENvbnRlbnQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFN0b3JlZENvbnRlbnQge1xuICAgIHJldHVybiBuZXcgU3RvcmVkQ29udGVudCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU3RvcmVkQ29udGVudCB7XG4gICAgcmV0dXJuIG5ldyBTdG9yZWRDb250ZW50KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFN0b3JlZENvbnRlbnQgfCBQbGFpbk1lc3NhZ2U8U3RvcmVkQ29udGVudD4gfCB1bmRlZmluZWQsIGI6IFN0b3JlZENvbnRlbnQgfCBQbGFpbk1lc3NhZ2U8U3RvcmVkQ29udGVudD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFN0b3JlZENvbnRlbnQsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5FZGdlXG4gKi9cbmV4cG9ydCBjbGFzcyBFZGdlIGV4dGVuZHMgTWVzc2FnZTxFZGdlPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBmcm9tID0gMTtcbiAgICovXG4gIGZyb20gPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0byA9IDI7XG4gICAqL1xuICB0byA9IFwiXCI7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEVkZ2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuRWRnZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiZnJvbVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJ0b1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBFZGdlIHtcbiAgICByZXR1cm4gbmV3IEVkZ2UoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEVkZ2Uge1xuICAgIHJldHVybiBuZXcgRWRnZSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogRWRnZSB7XG4gICAgcmV0dXJuIG5ldyBFZGdlKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IEVkZ2UgfCBQbGFpbk1lc3NhZ2U8RWRnZT4gfCB1bmRlZmluZWQsIGI6IEVkZ2UgfCBQbGFpbk1lc3NhZ2U8RWRnZT4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEVkZ2UsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQ29udGVudCBoYXMgZGF0YSBhbmQgbWV0YWRhdGFcbiAqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LkNvbnRlbnRcbiAqL1xuZXhwb3J0IGNsYXNzIENvbnRlbnQgZXh0ZW5kcyBNZXNzYWdlPENvbnRlbnQ+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIHRhZ3MgPSAxO1xuICAgKi9cbiAgdGFnczogc3RyaW5nW10gPSBbXTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgY3JlYXRlZF9hdCA9IDI7XG4gICAqL1xuICBjcmVhdGVkQXQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB1cmkgPSAzO1xuICAgKi9cbiAgdXJpID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaWQgPSA0O1xuICAgKi9cbiAgaWQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gb25lb2YgY29udGVudC5Db250ZW50LnR5cGVcbiAgICovXG4gIHR5cGU6IHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGNvbnRlbnQuRGF0YSBkYXRhID0gNjtcbiAgICAgKi9cbiAgICB2YWx1ZTogRGF0YTtcbiAgICBjYXNlOiBcImRhdGFcIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGNvbnRlbnQuTm9ybWFsaXplZCBub3JtYWxpemVkID0gNztcbiAgICAgKi9cbiAgICB2YWx1ZTogTm9ybWFsaXplZDtcbiAgICBjYXNlOiBcIm5vcm1hbGl6ZWRcIjtcbiAgfSB8IHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGNvbnRlbnQuVHJhbnNmb3JtZWQgdHJhbnNmb3JtZWQgPSA4O1xuICAgICAqL1xuICAgIHZhbHVlOiBUcmFuc2Zvcm1lZDtcbiAgICBjYXNlOiBcInRyYW5zZm9ybWVkXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlBvc3QgcG9zdCA9IDk7XG4gICAgICovXG4gICAgdmFsdWU6IFBvc3Q7XG4gICAgY2FzZTogXCJwb3N0XCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlNpdGUgc2l0ZSA9IDEwO1xuICAgICAqL1xuICAgIHZhbHVlOiBTaXRlO1xuICAgIGNhc2U6IFwic2l0ZVwiO1xuICB9IHwgeyBjYXNlOiB1bmRlZmluZWQ7IHZhbHVlPzogdW5kZWZpbmVkIH0gPSB7IGNhc2U6IHVuZGVmaW5lZCB9O1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxDb250ZW50Pikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LkNvbnRlbnRcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInRhZ3NcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImNyZWF0ZWRfYXRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwidXJpXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcImlkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA2LCBuYW1lOiBcImRhdGFcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IERhdGEsIG9uZW9mOiBcInR5cGVcIiB9LFxuICAgIHsgbm86IDcsIG5hbWU6IFwibm9ybWFsaXplZFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogTm9ybWFsaXplZCwgb25lb2Y6IFwidHlwZVwiIH0sXG4gICAgeyBubzogOCwgbmFtZTogXCJ0cmFuc2Zvcm1lZFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogVHJhbnNmb3JtZWQsIG9uZW9mOiBcInR5cGVcIiB9LFxuICAgIHsgbm86IDksIG5hbWU6IFwicG9zdFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogUG9zdCwgb25lb2Y6IFwidHlwZVwiIH0sXG4gICAgeyBubzogMTAsIG5hbWU6IFwic2l0ZVwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogU2l0ZSwgb25lb2Y6IFwidHlwZVwiIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBDb250ZW50IHtcbiAgICByZXR1cm4gbmV3IENvbnRlbnQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IENvbnRlbnQge1xuICAgIHJldHVybiBuZXcgQ29udGVudCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQ29udGVudCB7XG4gICAgcmV0dXJuIG5ldyBDb250ZW50KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IENvbnRlbnQgfCBQbGFpbk1lc3NhZ2U8Q29udGVudD4gfCB1bmRlZmluZWQsIGI6IENvbnRlbnQgfCBQbGFpbk1lc3NhZ2U8Q29udGVudD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKENvbnRlbnQsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5Qb3N0XG4gKi9cbmV4cG9ydCBjbGFzcyBQb3N0IGV4dGVuZHMgTWVzc2FnZTxQb3N0PiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0aXRsZSA9IDE7XG4gICAqL1xuICB0aXRsZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHN1bW1hcnkgPSAyO1xuICAgKi9cbiAgc3VtbWFyeSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGNvbnRlbnQgPSAzO1xuICAgKi9cbiAgY29udGVudCA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIGF1dGhvcnMgPSA0O1xuICAgKi9cbiAgYXV0aG9yczogc3RyaW5nW10gPSBbXTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIGRyYWZ0ID0gNjtcbiAgICovXG4gIGRyYWZ0ID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFBvc3Q+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuUG9zdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwidGl0bGVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwic3VtbWFyeVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJjb250ZW50XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcImF1dGhvcnNcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiA2LCBuYW1lOiBcImRyYWZ0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBQb3N0IHtcbiAgICByZXR1cm4gbmV3IFBvc3QoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFBvc3Qge1xuICAgIHJldHVybiBuZXcgUG9zdCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogUG9zdCB7XG4gICAgcmV0dXJuIG5ldyBQb3N0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFBvc3QgfCBQbGFpbk1lc3NhZ2U8UG9zdD4gfCB1bmRlZmluZWQsIGI6IFBvc3QgfCBQbGFpbk1lc3NhZ2U8UG9zdD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFBvc3QsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5HaXRSZXBvXG4gKi9cbmV4cG9ydCBjbGFzcyBHaXRSZXBvIGV4dGVuZHMgTWVzc2FnZTxHaXRSZXBvPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB1cmwgPSAxO1xuICAgKi9cbiAgdXJsID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8R2l0UmVwbz4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5HaXRSZXBvXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJ1cmxcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogR2l0UmVwbyB7XG4gICAgcmV0dXJuIG5ldyBHaXRSZXBvKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHaXRSZXBvIHtcbiAgICByZXR1cm4gbmV3IEdpdFJlcG8oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEdpdFJlcG8ge1xuICAgIHJldHVybiBuZXcgR2l0UmVwbygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBHaXRSZXBvIHwgUGxhaW5NZXNzYWdlPEdpdFJlcG8+IHwgdW5kZWZpbmVkLCBiOiBHaXRSZXBvIHwgUGxhaW5NZXNzYWdlPEdpdFJlcG8+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhHaXRSZXBvLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuRGF0YVxuICovXG5leHBvcnQgY2xhc3MgRGF0YSBleHRlbmRzIE1lc3NhZ2U8RGF0YT4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIG9uZW9mIGNvbnRlbnQuRGF0YS50eXBlXG4gICAqL1xuICB0eXBlOiB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlRleHQgdGV4dCA9IDQ7XG4gICAgICovXG4gICAgdmFsdWU6IFRleHQ7XG4gICAgY2FzZTogXCJ0ZXh0XCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LkZpbGUgZmlsZSA9IDU7XG4gICAgICovXG4gICAgdmFsdWU6IEZpbGU7XG4gICAgY2FzZTogXCJmaWxlXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlVSTCB1cmwgPSA2O1xuICAgICAqL1xuICAgIHZhbHVlOiBVUkw7XG4gICAgY2FzZTogXCJ1cmxcIjtcbiAgfSB8IHsgY2FzZTogdW5kZWZpbmVkOyB2YWx1ZT86IHVuZGVmaW5lZCB9ID0geyBjYXNlOiB1bmRlZmluZWQgfTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8RGF0YT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5EYXRhXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogNCwgbmFtZTogXCJ0ZXh0XCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBUZXh0LCBvbmVvZjogXCJ0eXBlXCIgfSxcbiAgICB7IG5vOiA1LCBuYW1lOiBcImZpbGVcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEZpbGUsIG9uZW9mOiBcInR5cGVcIiB9LFxuICAgIHsgbm86IDYsIG5hbWU6IFwidXJsXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBVUkwsIG9uZW9mOiBcInR5cGVcIiB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogRGF0YSB7XG4gICAgcmV0dXJuIG5ldyBEYXRhKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBEYXRhIHtcbiAgICByZXR1cm4gbmV3IERhdGEoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IERhdGEge1xuICAgIHJldHVybiBuZXcgRGF0YSgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBEYXRhIHwgUGxhaW5NZXNzYWdlPERhdGE+IHwgdW5kZWZpbmVkLCBiOiBEYXRhIHwgUGxhaW5NZXNzYWdlPERhdGE+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhEYXRhLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuTm9ybWFsaXplZFxuICovXG5leHBvcnQgY2xhc3MgTm9ybWFsaXplZCBleHRlbmRzIE1lc3NhZ2U8Tm9ybWFsaXplZD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIG9uZW9mIGNvbnRlbnQuTm9ybWFsaXplZC50eXBlXG4gICAqL1xuICB0eXBlOiB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LkFydGljbGUgYXJ0aWNsZSA9IDM7XG4gICAgICovXG4gICAgdmFsdWU6IEFydGljbGU7XG4gICAgY2FzZTogXCJhcnRpY2xlXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LkhUTUwgaHRtbCA9IDQ7XG4gICAgICovXG4gICAgdmFsdWU6IEhUTUw7XG4gICAgY2FzZTogXCJodG1sXCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlRyYW5zY3JpcHQgdHJhbnNjcmlwdCA9IDY7XG4gICAgICovXG4gICAgdmFsdWU6IFRyYW5zY3JpcHQ7XG4gICAgY2FzZTogXCJ0cmFuc2NyaXB0XCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlJlYWRNZSByZWFkbWUgPSA3O1xuICAgICAqL1xuICAgIHZhbHVlOiBSZWFkTWU7XG4gICAgY2FzZTogXCJyZWFkbWVcIjtcbiAgfSB8IHsgY2FzZTogdW5kZWZpbmVkOyB2YWx1ZT86IHVuZGVmaW5lZCB9ID0geyBjYXNlOiB1bmRlZmluZWQgfTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8Tm9ybWFsaXplZD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5Ob3JtYWxpemVkXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMywgbmFtZTogXCJhcnRpY2xlXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBBcnRpY2xlLCBvbmVvZjogXCJ0eXBlXCIgfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcImh0bWxcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEhUTUwsIG9uZW9mOiBcInR5cGVcIiB9LFxuICAgIHsgbm86IDYsIG5hbWU6IFwidHJhbnNjcmlwdFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogVHJhbnNjcmlwdCwgb25lb2Y6IFwidHlwZVwiIH0sXG4gICAgeyBubzogNywgbmFtZTogXCJyZWFkbWVcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFJlYWRNZSwgb25lb2Y6IFwidHlwZVwiIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBOb3JtYWxpemVkIHtcbiAgICByZXR1cm4gbmV3IE5vcm1hbGl6ZWQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IE5vcm1hbGl6ZWQge1xuICAgIHJldHVybiBuZXcgTm9ybWFsaXplZCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogTm9ybWFsaXplZCB7XG4gICAgcmV0dXJuIG5ldyBOb3JtYWxpemVkKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IE5vcm1hbGl6ZWQgfCBQbGFpbk1lc3NhZ2U8Tm9ybWFsaXplZD4gfCB1bmRlZmluZWQsIGI6IE5vcm1hbGl6ZWQgfCBQbGFpbk1lc3NhZ2U8Tm9ybWFsaXplZD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKE5vcm1hbGl6ZWQsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5UcmFuc2Zvcm1lZFxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNmb3JtZWQgZXh0ZW5kcyBNZXNzYWdlPFRyYW5zZm9ybWVkPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gb25lb2YgY29udGVudC5UcmFuc2Zvcm1lZC50eXBlXG4gICAqL1xuICB0eXBlOiB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlN1bW1hcnkgc3VtbWFyeSA9IDE7XG4gICAgICovXG4gICAgdmFsdWU6IFN1bW1hcnk7XG4gICAgY2FzZTogXCJzdW1tYXJ5XCI7XG4gIH0gfCB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LkNhdGVnb3JpZXMgY2F0ZWdvcmllcyA9IDI7XG4gICAgICovXG4gICAgdmFsdWU6IENhdGVnb3JpZXM7XG4gICAgY2FzZTogXCJjYXRlZ29yaWVzXCI7XG4gIH0gfCB7IGNhc2U6IHVuZGVmaW5lZDsgdmFsdWU/OiB1bmRlZmluZWQgfSA9IHsgY2FzZTogdW5kZWZpbmVkIH07XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFRyYW5zZm9ybWVkPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlRyYW5zZm9ybWVkXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJzdW1tYXJ5XCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTdW1tYXJ5LCBvbmVvZjogXCJ0eXBlXCIgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImNhdGVnb3JpZXNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IENhdGVnb3JpZXMsIG9uZW9mOiBcInR5cGVcIiB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogVHJhbnNmb3JtZWQge1xuICAgIHJldHVybiBuZXcgVHJhbnNmb3JtZWQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFRyYW5zZm9ybWVkIHtcbiAgICByZXR1cm4gbmV3IFRyYW5zZm9ybWVkKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBUcmFuc2Zvcm1lZCB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm1lZCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBUcmFuc2Zvcm1lZCB8IFBsYWluTWVzc2FnZTxUcmFuc2Zvcm1lZD4gfCB1bmRlZmluZWQsIGI6IFRyYW5zZm9ybWVkIHwgUGxhaW5NZXNzYWdlPFRyYW5zZm9ybWVkPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoVHJhbnNmb3JtZWQsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5BcnRpY2xlXG4gKi9cbmV4cG9ydCBjbGFzcyBBcnRpY2xlIGV4dGVuZHMgTWVzc2FnZTxBcnRpY2xlPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0aXRsZSA9IDE7XG4gICAqL1xuICB0aXRsZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGF1dGhvciA9IDI7XG4gICAqL1xuICBhdXRob3IgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDMyIGxlbmd0aCA9IDM7XG4gICAqL1xuICBsZW5ndGggPSAwO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBleGNlcnB0ID0gNDtcbiAgICovXG4gIGV4Y2VycHQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBzaXRlX25hbWUgPSA1O1xuICAgKi9cbiAgc2l0ZU5hbWUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBpbWFnZSA9IDY7XG4gICAqL1xuICBpbWFnZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGZhdmljb24gPSA3O1xuICAgKi9cbiAgZmF2aWNvbiA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHRleHQgPSA4O1xuICAgKi9cbiAgdGV4dCA9IFwiXCI7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEFydGljbGU+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuQXJ0aWNsZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwidGl0bGVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiYXV0aG9yXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcImxlbmd0aFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA1IC8qIFNjYWxhclR5cGUuSU5UMzIgKi8gfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcImV4Y2VycHRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDUsIG5hbWU6IFwic2l0ZV9uYW1lXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA2LCBuYW1lOiBcImltYWdlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA3LCBuYW1lOiBcImZhdmljb25cIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDgsIG5hbWU6IFwidGV4dFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBBcnRpY2xlIHtcbiAgICByZXR1cm4gbmV3IEFydGljbGUoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEFydGljbGUge1xuICAgIHJldHVybiBuZXcgQXJ0aWNsZSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQXJ0aWNsZSB7XG4gICAgcmV0dXJuIG5ldyBBcnRpY2xlKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IEFydGljbGUgfCBQbGFpbk1lc3NhZ2U8QXJ0aWNsZT4gfCB1bmRlZmluZWQsIGI6IEFydGljbGUgfCBQbGFpbk1lc3NhZ2U8QXJ0aWNsZT4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEFydGljbGUsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5IVE1MXG4gKi9cbmV4cG9ydCBjbGFzcyBIVE1MIGV4dGVuZHMgTWVzc2FnZTxIVE1MPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBodG1sID0gMTtcbiAgICovXG4gIGh0bWwgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxIVE1MPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LkhUTUxcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImh0bWxcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogSFRNTCB7XG4gICAgcmV0dXJuIG5ldyBIVE1MKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBIVE1MIHtcbiAgICByZXR1cm4gbmV3IEhUTUwoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEhUTUwge1xuICAgIHJldHVybiBuZXcgSFRNTCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBIVE1MIHwgUGxhaW5NZXNzYWdlPEhUTUw+IHwgdW5kZWZpbmVkLCBiOiBIVE1MIHwgUGxhaW5NZXNzYWdlPEhUTUw+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhIVE1MLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuUmVhZE1lXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWFkTWUgZXh0ZW5kcyBNZXNzYWdlPFJlYWRNZT4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgZGF0YSA9IDE7XG4gICAqL1xuICBkYXRhID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8UmVhZE1lPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlJlYWRNZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiZGF0YVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBSZWFkTWUge1xuICAgIHJldHVybiBuZXcgUmVhZE1lKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBSZWFkTWUge1xuICAgIHJldHVybiBuZXcgUmVhZE1lKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBSZWFkTWUge1xuICAgIHJldHVybiBuZXcgUmVhZE1lKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFJlYWRNZSB8IFBsYWluTWVzc2FnZTxSZWFkTWU+IHwgdW5kZWZpbmVkLCBiOiBSZWFkTWUgfCBQbGFpbk1lc3NhZ2U8UmVhZE1lPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoUmVhZE1lLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuU3VtbWFyeVxuICovXG5leHBvcnQgY2xhc3MgU3VtbWFyeSBleHRlbmRzIE1lc3NhZ2U8U3VtbWFyeT4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgc3VtbWFyeSA9IDE7XG4gICAqL1xuICBzdW1tYXJ5ID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8U3VtbWFyeT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5TdW1tYXJ5XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJzdW1tYXJ5XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFN1bW1hcnkge1xuICAgIHJldHVybiBuZXcgU3VtbWFyeSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU3VtbWFyeSB7XG4gICAgcmV0dXJuIG5ldyBTdW1tYXJ5KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTdW1tYXJ5IHtcbiAgICByZXR1cm4gbmV3IFN1bW1hcnkoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogU3VtbWFyeSB8IFBsYWluTWVzc2FnZTxTdW1tYXJ5PiB8IHVuZGVmaW5lZCwgYjogU3VtbWFyeSB8IFBsYWluTWVzc2FnZTxTdW1tYXJ5PiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoU3VtbWFyeSwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LkNhdGVnb3JpZXNcbiAqL1xuZXhwb3J0IGNsYXNzIENhdGVnb3JpZXMgZXh0ZW5kcyBNZXNzYWdlPENhdGVnb3JpZXM+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIGNhdGVnb3JpZXMgPSAxO1xuICAgKi9cbiAgY2F0ZWdvcmllczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8Q2F0ZWdvcmllcz4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5DYXRlZ29yaWVzXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJjYXRlZ29yaWVzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBDYXRlZ29yaWVzIHtcbiAgICByZXR1cm4gbmV3IENhdGVnb3JpZXMoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IENhdGVnb3JpZXMge1xuICAgIHJldHVybiBuZXcgQ2F0ZWdvcmllcygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQ2F0ZWdvcmllcyB7XG4gICAgcmV0dXJuIG5ldyBDYXRlZ29yaWVzKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IENhdGVnb3JpZXMgfCBQbGFpbk1lc3NhZ2U8Q2F0ZWdvcmllcz4gfCB1bmRlZmluZWQsIGI6IENhdGVnb3JpZXMgfCBQbGFpbk1lc3NhZ2U8Q2F0ZWdvcmllcz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKENhdGVnb3JpZXMsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5GaWxlXG4gKi9cbmV4cG9ydCBjbGFzcyBGaWxlIGV4dGVuZHMgTWVzc2FnZTxGaWxlPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBmaWxlID0gMTtcbiAgICovXG4gIGZpbGUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJ5dGVzIGRhdGEgPSAyO1xuICAgKi9cbiAgZGF0YSA9IG5ldyBVaW50OEFycmF5KDApO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB1cmwgPSAzO1xuICAgKi9cbiAgdXJsID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8RmlsZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5GaWxlXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJmaWxlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImRhdGFcIiwga2luZDogXCJzY2FsYXJcIiwgVDogMTIgLyogU2NhbGFyVHlwZS5CWVRFUyAqLyB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwidXJsXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEZpbGUge1xuICAgIHJldHVybiBuZXcgRmlsZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogRmlsZSB7XG4gICAgcmV0dXJuIG5ldyBGaWxlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBGaWxlIHtcbiAgICByZXR1cm4gbmV3IEZpbGUoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogRmlsZSB8IFBsYWluTWVzc2FnZTxGaWxlPiB8IHVuZGVmaW5lZCwgYjogRmlsZSB8IFBsYWluTWVzc2FnZTxGaWxlPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoRmlsZSwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlRleHRcbiAqL1xuZXhwb3J0IGNsYXNzIFRleHQgZXh0ZW5kcyBNZXNzYWdlPFRleHQ+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGRhdGEgPSAxO1xuICAgKi9cbiAgZGF0YSA9IFwiXCI7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFRleHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuVGV4dFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiZGF0YVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBUZXh0IHtcbiAgICByZXR1cm4gbmV3IFRleHQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFRleHQge1xuICAgIHJldHVybiBuZXcgVGV4dCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVGV4dCB7XG4gICAgcmV0dXJuIG5ldyBUZXh0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFRleHQgfCBQbGFpbk1lc3NhZ2U8VGV4dD4gfCB1bmRlZmluZWQsIGI6IFRleHQgfCBQbGFpbk1lc3NhZ2U8VGV4dD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFRleHQsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5VUkxcbiAqL1xuZXhwb3J0IGNsYXNzIFVSTCBleHRlbmRzIE1lc3NhZ2U8VVJMPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB1cmwgPSAxO1xuICAgKi9cbiAgdXJsID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIGNyYXdsID0gMjtcbiAgICovXG4gIGNyYXdsID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHRpdGxlID0gMztcbiAgICovXG4gIHRpdGxlID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8VVJMPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlVSTFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwidXJsXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImNyYXdsXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJ0aXRsZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBVUkwge1xuICAgIHJldHVybiBuZXcgVVJMKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBVUkwge1xuICAgIHJldHVybiBuZXcgVVJMKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBVUkwge1xuICAgIHJldHVybiBuZXcgVVJMKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFVSTCB8IFBsYWluTWVzc2FnZTxVUkw+IHwgdW5kZWZpbmVkLCBiOiBVUkwgfCBQbGFpbk1lc3NhZ2U8VVJMPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoVVJMLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuVG9rZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFRva2VuIGV4dGVuZHMgTWVzc2FnZTxUb2tlbj4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiB1aW50MzIgaWQgPSAxO1xuICAgKi9cbiAgaWQgPSAwO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHVpbnQ2NCBzdGFydF90aW1lID0gMjtcbiAgICovXG4gIHN0YXJ0VGltZSA9IHByb3RvSW50NjQuemVybztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiB1aW50NjQgZW5kX3RpbWUgPSAzO1xuICAgKi9cbiAgZW5kVGltZSA9IHByb3RvSW50NjQuemVybztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGV4dCA9IDQ7XG4gICAqL1xuICB0ZXh0ID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcCA9IDU7XG4gICAqL1xuICBwID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8VG9rZW4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuVG9rZW5cIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImlkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDEzIC8qIFNjYWxhclR5cGUuVUlOVDMyICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJzdGFydF90aW1lXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDQgLyogU2NhbGFyVHlwZS5VSU5UNjQgKi8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcImVuZF90aW1lXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDQgLyogU2NhbGFyVHlwZS5VSU5UNjQgKi8gfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcInRleHRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDUsIG5hbWU6IFwicFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBUb2tlbiB7XG4gICAgcmV0dXJuIG5ldyBUb2tlbigpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVG9rZW4ge1xuICAgIHJldHVybiBuZXcgVG9rZW4oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFRva2VuIHtcbiAgICByZXR1cm4gbmV3IFRva2VuKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFRva2VuIHwgUGxhaW5NZXNzYWdlPFRva2VuPiB8IHVuZGVmaW5lZCwgYjogVG9rZW4gfCBQbGFpbk1lc3NhZ2U8VG9rZW4+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhUb2tlbiwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlNlZ21lbnRcbiAqL1xuZXhwb3J0IGNsYXNzIFNlZ21lbnQgZXh0ZW5kcyBNZXNzYWdlPFNlZ21lbnQ+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogdWludDMyIG51bSA9IDE7XG4gICAqL1xuICBudW0gPSAwO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGNvbnRlbnQuVG9rZW4gdG9rZW5zID0gMjtcbiAgICovXG4gIHRva2VuczogVG9rZW5bXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0ZXh0ID0gMztcbiAgICovXG4gIHRleHQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHVpbnQ2NCBzdGFydF90aW1lID0gNDtcbiAgICovXG4gIHN0YXJ0VGltZSA9IHByb3RvSW50NjQuemVybztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiB1aW50NjQgZW5kX3RpbWUgPSA1O1xuICAgKi9cbiAgZW5kVGltZSA9IHByb3RvSW50NjQuemVybztcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8U2VnbWVudD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5TZWdtZW50XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJudW1cIiwga2luZDogXCJzY2FsYXJcIiwgVDogMTMgLyogU2NhbGFyVHlwZS5VSU5UMzIgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcInRva2Vuc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogVG9rZW4sIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJ0ZXh0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcInN0YXJ0X3RpbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNCAvKiBTY2FsYXJUeXBlLlVJTlQ2NCAqLyB9LFxuICAgIHsgbm86IDUsIG5hbWU6IFwiZW5kX3RpbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNCAvKiBTY2FsYXJUeXBlLlVJTlQ2NCAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogU2VnbWVudCB7XG4gICAgcmV0dXJuIG5ldyBTZWdtZW50KCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTZWdtZW50IHtcbiAgICByZXR1cm4gbmV3IFNlZ21lbnQoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFNlZ21lbnQge1xuICAgIHJldHVybiBuZXcgU2VnbWVudCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBTZWdtZW50IHwgUGxhaW5NZXNzYWdlPFNlZ21lbnQ+IHwgdW5kZWZpbmVkLCBiOiBTZWdtZW50IHwgUGxhaW5NZXNzYWdlPFNlZ21lbnQ+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhTZWdtZW50LCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuVHJhbnNjcmlwdFxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNjcmlwdCBleHRlbmRzIE1lc3NhZ2U8VHJhbnNjcmlwdD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaWQgPSAxO1xuICAgKi9cbiAgaWQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBuYW1lID0gMjtcbiAgICovXG4gIG5hbWUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGNvbnRlbnQuU2VnbWVudCBzZWdtZW50cyA9IDM7XG4gICAqL1xuICBzZWdtZW50czogU2VnbWVudFtdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFRyYW5zY3JpcHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuVHJhbnNjcmlwdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiaWRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwibmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJzZWdtZW50c1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogU2VnbWVudCwgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFRyYW5zY3JpcHQge1xuICAgIHJldHVybiBuZXcgVHJhbnNjcmlwdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVHJhbnNjcmlwdCB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2NyaXB0KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBUcmFuc2NyaXB0IHtcbiAgICByZXR1cm4gbmV3IFRyYW5zY3JpcHQoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogVHJhbnNjcmlwdCB8IFBsYWluTWVzc2FnZTxUcmFuc2NyaXB0PiB8IHVuZGVmaW5lZCwgYjogVHJhbnNjcmlwdCB8IFBsYWluTWVzc2FnZTxUcmFuc2NyaXB0PiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoVHJhbnNjcmlwdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LkdSUENUeXBlSW5mb1xuICovXG5leHBvcnQgY2xhc3MgR1JQQ1R5cGVJbmZvIGV4dGVuZHMgTWVzc2FnZTxHUlBDVHlwZUluZm8+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZ29vZ2xlLnByb3RvYnVmLkRlc2NyaXB0b3JQcm90byBtc2cgPSAxO1xuICAgKi9cbiAgbXNnPzogRGVzY3JpcHRvclByb3RvO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IG1hcDxzdHJpbmcsIGdvb2dsZS5wcm90b2J1Zi5EZXNjcmlwdG9yUHJvdG8+IGRlc2NfbG9va3VwID0gMztcbiAgICovXG4gIGRlc2NMb29rdXA6IHsgW2tleTogc3RyaW5nXTogRGVzY3JpcHRvclByb3RvIH0gPSB7fTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBtYXA8c3RyaW5nLCBnb29nbGUucHJvdG9idWYuRW51bURlc2NyaXB0b3JQcm90bz4gZW51bV9sb29rdXAgPSA0O1xuICAgKi9cbiAgZW51bUxvb2t1cDogeyBba2V5OiBzdHJpbmddOiBFbnVtRGVzY3JpcHRvclByb3RvIH0gPSB7fTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcGFja2FnZV9uYW1lID0gNjtcbiAgICovXG4gIHBhY2thZ2VOYW1lID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8R1JQQ1R5cGVJbmZvPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LkdSUENUeXBlSW5mb1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibXNnXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBEZXNjcmlwdG9yUHJvdG8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcImRlc2NfbG9va3VwXCIsIGtpbmQ6IFwibWFwXCIsIEs6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIFY6IHtraW5kOiBcIm1lc3NhZ2VcIiwgVDogRGVzY3JpcHRvclByb3RvfSB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwiZW51bV9sb29rdXBcIiwga2luZDogXCJtYXBcIiwgSzogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgVjoge2tpbmQ6IFwibWVzc2FnZVwiLCBUOiBFbnVtRGVzY3JpcHRvclByb3RvfSB9LFxuICAgIHsgbm86IDYsIG5hbWU6IFwicGFja2FnZV9uYW1lXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEdSUENUeXBlSW5mbyB7XG4gICAgcmV0dXJuIG5ldyBHUlBDVHlwZUluZm8oKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEdSUENUeXBlSW5mbyB7XG4gICAgcmV0dXJuIG5ldyBHUlBDVHlwZUluZm8oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEdSUENUeXBlSW5mbyB7XG4gICAgcmV0dXJuIG5ldyBHUlBDVHlwZUluZm8oKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogR1JQQ1R5cGVJbmZvIHwgUGxhaW5NZXNzYWdlPEdSUENUeXBlSW5mbz4gfCB1bmRlZmluZWQsIGI6IEdSUENUeXBlSW5mbyB8IFBsYWluTWVzc2FnZTxHUlBDVHlwZUluZm8+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhHUlBDVHlwZUluZm8sIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5TaXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBTaXRlIGV4dGVuZHMgTWVzc2FnZTxTaXRlPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGNvbnRlbnQuSHVnb0NvbmZpZyBodWdvX2NvbmZpZyA9IDE7XG4gICAqL1xuICBodWdvQ29uZmlnPzogSHVnb0NvbmZpZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBzdHJpbmcgcG9zdF90YWdzID0gMjtcbiAgICovXG4gIHBvc3RUYWdzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxTaXRlPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlNpdGVcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImh1Z29fY29uZmlnXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBIdWdvQ29uZmlnIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJwb3N0X3RhZ3NcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFNpdGUge1xuICAgIHJldHVybiBuZXcgU2l0ZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU2l0ZSB7XG4gICAgcmV0dXJuIG5ldyBTaXRlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTaXRlIHtcbiAgICByZXR1cm4gbmV3IFNpdGUoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogU2l0ZSB8IFBsYWluTWVzc2FnZTxTaXRlPiB8IHVuZGVmaW5lZCwgYjogU2l0ZSB8IFBsYWluTWVzc2FnZTxTaXRlPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoU2l0ZSwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50Lkh1Z29Db25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIEh1Z29Db25maWcgZXh0ZW5kcyBNZXNzYWdlPEh1Z29Db25maWc+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHB1Ymxpc2hfZGlyID0gMTtcbiAgICovXG4gIHB1Ymxpc2hEaXIgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBiYXNlX3VybCA9IDI7XG4gICAqL1xuICBiYXNlVXJsID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGl0bGUgPSAzO1xuICAgKi9cbiAgdGl0bGUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDMyIHBhZ2luYXRlID0gNDtcbiAgICovXG4gIHBhZ2luYXRlID0gMDtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBzdHJpbmcgdGhlbWUgPSA1O1xuICAgKi9cbiAgdGhlbWU6IHN0cmluZ1tdID0gW107XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCBlbmFibGVfaW5saW5lX3Nob3J0Y29kZXMgPSA2O1xuICAgKi9cbiAgZW5hYmxlSW5saW5lU2hvcnRjb2RlcyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgZW5hYmxlX3JvYm90c190eHQgPSA3O1xuICAgKi9cbiAgZW5hYmxlUm9ib3RzVHh0ID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCBidWlsZF9kcmFmdHMgPSA4O1xuICAgKi9cbiAgYnVpbGREcmFmdHMgPSBmYWxzZTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIGJ1aWxkX2Z1dHVyZSA9IDk7XG4gICAqL1xuICBidWlsZEZ1dHVyZSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgYnVpbGRfZXhwaXJlZCA9IDEwO1xuICAgKi9cbiAgYnVpbGRFeHBpcmVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCBlbmFibGVfZW1vamkgPSAxMTtcbiAgICovXG4gIGVuYWJsZUVtb2ppID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCBweWdtZW50c191c2VfY2xhc3NlcyA9IDEyO1xuICAgKi9cbiAgcHlnbWVudHNVc2VDbGFzc2VzID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIG1haW5fc2VjdGlvbnMgPSAxMztcbiAgICovXG4gIG1haW5TZWN0aW9uczogc3RyaW5nW10gPSBbXTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50Lk1pbmlmeUNvbmZpZyBtaW5pZnkgPSAxNDtcbiAgICovXG4gIG1pbmlmeT86IE1pbmlmeUNvbmZpZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBtYXA8c3RyaW5nLCBjb250ZW50Lkxhbmd1YWdlQ29uZmlnPiBsYW5ndWFnZXMgPSAxNTtcbiAgICovXG4gIGxhbmd1YWdlczogeyBba2V5OiBzdHJpbmddOiBMYW5ndWFnZUNvbmZpZyB9ID0ge307XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbWFwPHN0cmluZywgY29udGVudC5yZXBlYXRlZF9zdHJpbmc+IG91dHB1dHMgPSAxNjtcbiAgICovXG4gIG91dHB1dHM6IHsgW2tleTogc3RyaW5nXTogcmVwZWF0ZWRfc3RyaW5nIH0gPSB7fTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlBhcmFtc0NvbmZpZyBwYXJhbXMgPSAxNztcbiAgICovXG4gIHBhcmFtcz86IFBhcmFtc0NvbmZpZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50Lk1hcmt1cENvbmZpZyBtYXJrdXAgPSAxODtcbiAgICovXG4gIG1hcmt1cD86IE1hcmt1cENvbmZpZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlNlcnZpY2VzQ29uZmlnIHNlcnZpY2VzID0gMTk7XG4gICAqL1xuICBzZXJ2aWNlcz86IFNlcnZpY2VzQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxIdWdvQ29uZmlnPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50Lkh1Z29Db25maWdcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInB1Ymxpc2hfZGlyXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImJhc2VfdXJsXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcInRpdGxlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcInBhZ2luYXRlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDUgLyogU2NhbGFyVHlwZS5JTlQzMiAqLyB9LFxuICAgIHsgbm86IDUsIG5hbWU6IFwidGhlbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiA2LCBuYW1lOiBcImVuYWJsZV9pbmxpbmVfc2hvcnRjb2Rlc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICAgIHsgbm86IDcsIG5hbWU6IFwiZW5hYmxlX3JvYm90c190eHRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8gfSxcbiAgICB7IG5vOiA4LCBuYW1lOiBcImJ1aWxkX2RyYWZ0c1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICAgIHsgbm86IDksIG5hbWU6IFwiYnVpbGRfZnV0dXJlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovIH0sXG4gICAgeyBubzogMTAsIG5hbWU6IFwiYnVpbGRfZXhwaXJlZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICAgIHsgbm86IDExLCBuYW1lOiBcImVuYWJsZV9lbW9qaVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICAgIHsgbm86IDEyLCBuYW1lOiBcInB5Z21lbnRzX3VzZV9jbGFzc2VzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovIH0sXG4gICAgeyBubzogMTMsIG5hbWU6IFwibWFpbl9zZWN0aW9uc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDE0LCBuYW1lOiBcIm1pbmlmeVwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogTWluaWZ5Q29uZmlnIH0sXG4gICAgeyBubzogMTUsIG5hbWU6IFwibGFuZ3VhZ2VzXCIsIGtpbmQ6IFwibWFwXCIsIEs6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIFY6IHtraW5kOiBcIm1lc3NhZ2VcIiwgVDogTGFuZ3VhZ2VDb25maWd9IH0sXG4gICAgeyBubzogMTYsIG5hbWU6IFwib3V0cHV0c1wiLCBraW5kOiBcIm1hcFwiLCBLOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBWOiB7a2luZDogXCJtZXNzYWdlXCIsIFQ6IHJlcGVhdGVkX3N0cmluZ30gfSxcbiAgICB7IG5vOiAxNywgbmFtZTogXCJwYXJhbXNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFBhcmFtc0NvbmZpZyB9LFxuICAgIHsgbm86IDE4LCBuYW1lOiBcIm1hcmt1cFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogTWFya3VwQ29uZmlnIH0sXG4gICAgeyBubzogMTksIG5hbWU6IFwic2VydmljZXNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFNlcnZpY2VzQ29uZmlnIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBIdWdvQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IEh1Z29Db25maWcoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEh1Z29Db25maWcge1xuICAgIHJldHVybiBuZXcgSHVnb0NvbmZpZygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogSHVnb0NvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBIdWdvQ29uZmlnKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IEh1Z29Db25maWcgfCBQbGFpbk1lc3NhZ2U8SHVnb0NvbmZpZz4gfCB1bmRlZmluZWQsIGI6IEh1Z29Db25maWcgfCBQbGFpbk1lc3NhZ2U8SHVnb0NvbmZpZz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEh1Z29Db25maWcsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5NaW5pZnlDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIE1pbmlmeUNvbmZpZyBleHRlbmRzIE1lc3NhZ2U8TWluaWZ5Q29uZmlnPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgZGlzYWJsZV94bWwgPSAxO1xuICAgKi9cbiAgZGlzYWJsZVhtbCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxNaW5pZnlDb25maWc+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuTWluaWZ5Q29uZmlnXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJkaXNhYmxlX3htbFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogTWluaWZ5Q29uZmlnIHtcbiAgICByZXR1cm4gbmV3IE1pbmlmeUNvbmZpZygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogTWluaWZ5Q29uZmlnIHtcbiAgICByZXR1cm4gbmV3IE1pbmlmeUNvbmZpZygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogTWluaWZ5Q29uZmlnIHtcbiAgICByZXR1cm4gbmV3IE1pbmlmeUNvbmZpZygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBNaW5pZnlDb25maWcgfCBQbGFpbk1lc3NhZ2U8TWluaWZ5Q29uZmlnPiB8IHVuZGVmaW5lZCwgYjogTWluaWZ5Q29uZmlnIHwgUGxhaW5NZXNzYWdlPE1pbmlmeUNvbmZpZz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKE1pbmlmeUNvbmZpZywgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50Lkxhbmd1YWdlQ29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBMYW5ndWFnZUNvbmZpZyBleHRlbmRzIE1lc3NhZ2U8TGFuZ3VhZ2VDb25maWc+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGxhbmd1YWdlX25hbWUgPSAxO1xuICAgKi9cbiAgbGFuZ3VhZ2VOYW1lID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBpbnQzMiB3ZWlnaHQgPSAyO1xuICAgKi9cbiAgd2VpZ2h0ID0gMDtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGl0bGUgPSAzO1xuICAgKi9cbiAgdGl0bGUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IG1hcDxzdHJpbmcsIHN0cmluZz4gdGF4b25vbWllcyA9IDQ7XG4gICAqL1xuICB0YXhvbm9taWVzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogbWFwPHN0cmluZywgY29udGVudC5yZXBlYXRlZF9tZW51X2l0ZW0+IG1lbnUgPSA1O1xuICAgKi9cbiAgbWVudTogeyBba2V5OiBzdHJpbmddOiByZXBlYXRlZF9tZW51X2l0ZW0gfSA9IHt9O1xuXG4gIC8qKlxuICAgKiBgaW50ZXJmYWNle31gIGNvbnZlcnRlZCB0byBzdHJpbmcgZm9yIHNpbXBsaWNpdHlcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBtYXA8c3RyaW5nLCBzdHJpbmc+IHBhcmFtcyA9IDY7XG4gICAqL1xuICBwYXJhbXM6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7fTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8TGFuZ3VhZ2VDb25maWc+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuTGFuZ3VhZ2VDb25maWdcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImxhbmd1YWdlX25hbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwid2VpZ2h0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDUgLyogU2NhbGFyVHlwZS5JTlQzMiAqLyB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwidGl0bGVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwidGF4b25vbWllc1wiLCBraW5kOiBcIm1hcFwiLCBLOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCBWOiB7a2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqL30gfSxcbiAgICB7IG5vOiA1LCBuYW1lOiBcIm1lbnVcIiwga2luZDogXCJtYXBcIiwgSzogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgVjoge2tpbmQ6IFwibWVzc2FnZVwiLCBUOiByZXBlYXRlZF9tZW51X2l0ZW19IH0sXG4gICAgeyBubzogNiwgbmFtZTogXCJwYXJhbXNcIiwga2luZDogXCJtYXBcIiwgSzogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgVjoge2tpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi99IH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBMYW5ndWFnZUNvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBMYW5ndWFnZUNvbmZpZygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogTGFuZ3VhZ2VDb25maWcge1xuICAgIHJldHVybiBuZXcgTGFuZ3VhZ2VDb25maWcoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IExhbmd1YWdlQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IExhbmd1YWdlQ29uZmlnKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IExhbmd1YWdlQ29uZmlnIHwgUGxhaW5NZXNzYWdlPExhbmd1YWdlQ29uZmlnPiB8IHVuZGVmaW5lZCwgYjogTGFuZ3VhZ2VDb25maWcgfCBQbGFpbk1lc3NhZ2U8TGFuZ3VhZ2VDb25maWc+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhMYW5ndWFnZUNvbmZpZywgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50Lk1lbnVJdGVtXG4gKi9cbmV4cG9ydCBjbGFzcyBNZW51SXRlbSBleHRlbmRzIE1lc3NhZ2U8TWVudUl0ZW0+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIG5hbWUgPSAxO1xuICAgKi9cbiAgbmFtZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHVybCA9IDI7XG4gICAqL1xuICB1cmwgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDMyIHdlaWdodCA9IDM7XG4gICAqL1xuICB3ZWlnaHQgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxNZW51SXRlbT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5NZW51SXRlbVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJ1cmxcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwid2VpZ2h0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDUgLyogU2NhbGFyVHlwZS5JTlQzMiAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogTWVudUl0ZW0ge1xuICAgIHJldHVybiBuZXcgTWVudUl0ZW0oKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IE1lbnVJdGVtIHtcbiAgICByZXR1cm4gbmV3IE1lbnVJdGVtKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBNZW51SXRlbSB7XG4gICAgcmV0dXJuIG5ldyBNZW51SXRlbSgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBNZW51SXRlbSB8IFBsYWluTWVzc2FnZTxNZW51SXRlbT4gfCB1bmRlZmluZWQsIGI6IE1lbnVJdGVtIHwgUGxhaW5NZXNzYWdlPE1lbnVJdGVtPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoTWVudUl0ZW0sIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5FZGl0UG9zdENvbmZpZ1xuICovXG5leHBvcnQgY2xhc3MgRWRpdFBvc3RDb25maWcgZXh0ZW5kcyBNZXNzYWdlPEVkaXRQb3N0Q29uZmlnPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB1cmwgPSAxO1xuICAgKi9cbiAgdXJsID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGV4dCA9IDI7XG4gICAqL1xuICB0ZXh0ID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIGFwcGVuZF9maWxlX3BhdGggPSAzO1xuICAgKi9cbiAgYXBwZW5kRmlsZVBhdGggPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8RWRpdFBvc3RDb25maWc+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuRWRpdFBvc3RDb25maWdcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInVybFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJ0ZXh0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcImFwcGVuZF9maWxlX3BhdGhcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEVkaXRQb3N0Q29uZmlnIHtcbiAgICByZXR1cm4gbmV3IEVkaXRQb3N0Q29uZmlnKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBFZGl0UG9zdENvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBFZGl0UG9zdENvbmZpZygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogRWRpdFBvc3RDb25maWcge1xuICAgIHJldHVybiBuZXcgRWRpdFBvc3RDb25maWcoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogRWRpdFBvc3RDb25maWcgfCBQbGFpbk1lc3NhZ2U8RWRpdFBvc3RDb25maWc+IHwgdW5kZWZpbmVkLCBiOiBFZGl0UG9zdENvbmZpZyB8IFBsYWluTWVzc2FnZTxFZGl0UG9zdENvbmZpZz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEVkaXRQb3N0Q29uZmlnLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuQXNzZXRzQ29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBBc3NldHNDb25maWcgZXh0ZW5kcyBNZXNzYWdlPEFzc2V0c0NvbmZpZz4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIGRpc2FibGVfaGxqcyA9IDE7XG4gICAqL1xuICBkaXNhYmxlSGxqcyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxBc3NldHNDb25maWc+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuQXNzZXRzQ29uZmlnXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJkaXNhYmxlX2hsanNcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEFzc2V0c0NvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBBc3NldHNDb25maWcoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEFzc2V0c0NvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBBc3NldHNDb25maWcoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEFzc2V0c0NvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBBc3NldHNDb25maWcoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogQXNzZXRzQ29uZmlnIHwgUGxhaW5NZXNzYWdlPEFzc2V0c0NvbmZpZz4gfCB1bmRlZmluZWQsIGI6IEFzc2V0c0NvbmZpZyB8IFBsYWluTWVzc2FnZTxBc3NldHNDb25maWc+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhBc3NldHNDb25maWcsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5NYXJrdXBDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIE1hcmt1cENvbmZpZyBleHRlbmRzIE1lc3NhZ2U8TWFya3VwQ29uZmlnPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGNvbnRlbnQuR29sZG1hcmtDb25maWcgZ29sZG1hcmsgPSAxO1xuICAgKi9cbiAgZ29sZG1hcms/OiBHb2xkbWFya0NvbmZpZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LkhpZ2hsaWdodENvbmZpZyBoaWdobGlnaHQgPSAyO1xuICAgKi9cbiAgaGlnaGxpZ2h0PzogSGlnaGxpZ2h0Q29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxNYXJrdXBDb25maWc+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuTWFya3VwQ29uZmlnXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJnb2xkbWFya1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogR29sZG1hcmtDb25maWcgfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImhpZ2hsaWdodFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogSGlnaGxpZ2h0Q29uZmlnIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBNYXJrdXBDb25maWcge1xuICAgIHJldHVybiBuZXcgTWFya3VwQ29uZmlnKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBNYXJrdXBDb25maWcge1xuICAgIHJldHVybiBuZXcgTWFya3VwQ29uZmlnKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBNYXJrdXBDb25maWcge1xuICAgIHJldHVybiBuZXcgTWFya3VwQ29uZmlnKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IE1hcmt1cENvbmZpZyB8IFBsYWluTWVzc2FnZTxNYXJrdXBDb25maWc+IHwgdW5kZWZpbmVkLCBiOiBNYXJrdXBDb25maWcgfCBQbGFpbk1lc3NhZ2U8TWFya3VwQ29uZmlnPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoTWFya3VwQ29uZmlnLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuR29sZG1hcmtDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIEdvbGRtYXJrQ29uZmlnIGV4dGVuZHMgTWVzc2FnZTxHb2xkbWFya0NvbmZpZz4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LlJlbmRlcmVyQ29uZmlnIHJlbmRlcmVyID0gMTtcbiAgICovXG4gIHJlbmRlcmVyPzogUmVuZGVyZXJDb25maWc7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEdvbGRtYXJrQ29uZmlnPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LkdvbGRtYXJrQ29uZmlnXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJyZW5kZXJlclwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogUmVuZGVyZXJDb25maWcgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEdvbGRtYXJrQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IEdvbGRtYXJrQ29uZmlnKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHb2xkbWFya0NvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBHb2xkbWFya0NvbmZpZygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR29sZG1hcmtDb25maWcge1xuICAgIHJldHVybiBuZXcgR29sZG1hcmtDb25maWcoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogR29sZG1hcmtDb25maWcgfCBQbGFpbk1lc3NhZ2U8R29sZG1hcmtDb25maWc+IHwgdW5kZWZpbmVkLCBiOiBHb2xkbWFya0NvbmZpZyB8IFBsYWluTWVzc2FnZTxHb2xkbWFya0NvbmZpZz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEdvbGRtYXJrQ29uZmlnLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQuUmVuZGVyZXJDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIFJlbmRlcmVyQ29uZmlnIGV4dGVuZHMgTWVzc2FnZTxSZW5kZXJlckNvbmZpZz4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIHVuc2FmZSA9IDE7XG4gICAqL1xuICB1bnNhZmUgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8UmVuZGVyZXJDb25maWc+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuUmVuZGVyZXJDb25maWdcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInVuc2FmZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogUmVuZGVyZXJDb25maWcge1xuICAgIHJldHVybiBuZXcgUmVuZGVyZXJDb25maWcoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFJlbmRlcmVyQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IFJlbmRlcmVyQ29uZmlnKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBSZW5kZXJlckNvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBSZW5kZXJlckNvbmZpZygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBSZW5kZXJlckNvbmZpZyB8IFBsYWluTWVzc2FnZTxSZW5kZXJlckNvbmZpZz4gfCB1bmRlZmluZWQsIGI6IFJlbmRlcmVyQ29uZmlnIHwgUGxhaW5NZXNzYWdlPFJlbmRlcmVyQ29uZmlnPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoUmVuZGVyZXJDb25maWcsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5IaWdobGlnaHRDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodENvbmZpZyBleHRlbmRzIE1lc3NhZ2U8SGlnaGxpZ2h0Q29uZmlnPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgbm9fY2xhc3NlcyA9IDE7XG4gICAqL1xuICBub0NsYXNzZXMgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8SGlnaGxpZ2h0Q29uZmlnPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LkhpZ2hsaWdodENvbmZpZ1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibm9fY2xhc3Nlc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogSGlnaGxpZ2h0Q29uZmlnIHtcbiAgICByZXR1cm4gbmV3IEhpZ2hsaWdodENvbmZpZygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogSGlnaGxpZ2h0Q29uZmlnIHtcbiAgICByZXR1cm4gbmV3IEhpZ2hsaWdodENvbmZpZygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogSGlnaGxpZ2h0Q29uZmlnIHtcbiAgICByZXR1cm4gbmV3IEhpZ2hsaWdodENvbmZpZygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBIaWdobGlnaHRDb25maWcgfCBQbGFpbk1lc3NhZ2U8SGlnaGxpZ2h0Q29uZmlnPiB8IHVuZGVmaW5lZCwgYjogSGlnaGxpZ2h0Q29uZmlnIHwgUGxhaW5NZXNzYWdlPEhpZ2hsaWdodENvbmZpZz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEhpZ2hsaWdodENvbmZpZywgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlNlcnZpY2VzQ29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBTZXJ2aWNlc0NvbmZpZyBleHRlbmRzIE1lc3NhZ2U8U2VydmljZXNDb25maWc+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogY29udGVudC5TZXJ2aWNlQ29uZmlnIGluc3RhZ3JhbSA9IDE7XG4gICAqL1xuICBpbnN0YWdyYW0/OiBTZXJ2aWNlQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGNvbnRlbnQuU2VydmljZUNvbmZpZyB0d2l0dGVyID0gMjtcbiAgICovXG4gIHR3aXR0ZXI/OiBTZXJ2aWNlQ29uZmlnO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxTZXJ2aWNlc0NvbmZpZz4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5TZXJ2aWNlc0NvbmZpZ1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiaW5zdGFncmFtXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTZXJ2aWNlQ29uZmlnIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJ0d2l0dGVyXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTZXJ2aWNlQ29uZmlnIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBTZXJ2aWNlc0NvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBTZXJ2aWNlc0NvbmZpZygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU2VydmljZXNDb25maWcge1xuICAgIHJldHVybiBuZXcgU2VydmljZXNDb25maWcoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFNlcnZpY2VzQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IFNlcnZpY2VzQ29uZmlnKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFNlcnZpY2VzQ29uZmlnIHwgUGxhaW5NZXNzYWdlPFNlcnZpY2VzQ29uZmlnPiB8IHVuZGVmaW5lZCwgYjogU2VydmljZXNDb25maWcgfCBQbGFpbk1lc3NhZ2U8U2VydmljZXNDb25maWc+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhTZXJ2aWNlc0NvbmZpZywgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlNlcnZpY2VDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIFNlcnZpY2VDb25maWcgZXh0ZW5kcyBNZXNzYWdlPFNlcnZpY2VDb25maWc+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCBkaXNhYmxlX2lubGluZV9jc3MgPSAxO1xuICAgKi9cbiAgZGlzYWJsZUlubGluZUNzcyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxTZXJ2aWNlQ29uZmlnPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlNlcnZpY2VDb25maWdcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImRpc2FibGVfaW5saW5lX2Nzc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogU2VydmljZUNvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBTZXJ2aWNlQ29uZmlnKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTZXJ2aWNlQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IFNlcnZpY2VDb25maWcoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFNlcnZpY2VDb25maWcge1xuICAgIHJldHVybiBuZXcgU2VydmljZUNvbmZpZygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBTZXJ2aWNlQ29uZmlnIHwgUGxhaW5NZXNzYWdlPFNlcnZpY2VDb25maWc+IHwgdW5kZWZpbmVkLCBiOiBTZXJ2aWNlQ29uZmlnIHwgUGxhaW5NZXNzYWdlPFNlcnZpY2VDb25maWc+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhTZXJ2aWNlQ29uZmlnLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQucmVwZWF0ZWRfc3RyaW5nXG4gKi9cbmV4cG9ydCBjbGFzcyByZXBlYXRlZF9zdHJpbmcgZXh0ZW5kcyBNZXNzYWdlPHJlcGVhdGVkX3N0cmluZz4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBzdHJpbmcgdmFsdWVzID0gMTtcbiAgICovXG4gIHZhbHVlczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8cmVwZWF0ZWRfc3RyaW5nPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LnJlcGVhdGVkX3N0cmluZ1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwidmFsdWVzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiByZXBlYXRlZF9zdHJpbmcge1xuICAgIHJldHVybiBuZXcgcmVwZWF0ZWRfc3RyaW5nKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiByZXBlYXRlZF9zdHJpbmcge1xuICAgIHJldHVybiBuZXcgcmVwZWF0ZWRfc3RyaW5nKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiByZXBlYXRlZF9zdHJpbmcge1xuICAgIHJldHVybiBuZXcgcmVwZWF0ZWRfc3RyaW5nKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IHJlcGVhdGVkX3N0cmluZyB8IFBsYWluTWVzc2FnZTxyZXBlYXRlZF9zdHJpbmc+IHwgdW5kZWZpbmVkLCBiOiByZXBlYXRlZF9zdHJpbmcgfCBQbGFpbk1lc3NhZ2U8cmVwZWF0ZWRfc3RyaW5nPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMocmVwZWF0ZWRfc3RyaW5nLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNvbnRlbnQucmVwZWF0ZWRfbWVudV9pdGVtXG4gKi9cbmV4cG9ydCBjbGFzcyByZXBlYXRlZF9tZW51X2l0ZW0gZXh0ZW5kcyBNZXNzYWdlPHJlcGVhdGVkX21lbnVfaXRlbT4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBjb250ZW50Lk1lbnVJdGVtIGl0ZW1zID0gMTtcbiAgICovXG4gIGl0ZW1zOiBNZW51SXRlbVtdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPHJlcGVhdGVkX21lbnVfaXRlbT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY29udGVudC5yZXBlYXRlZF9tZW51X2l0ZW1cIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcIml0ZW1zXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBNZW51SXRlbSwgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IHJlcGVhdGVkX21lbnVfaXRlbSB7XG4gICAgcmV0dXJuIG5ldyByZXBlYXRlZF9tZW51X2l0ZW0oKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IHJlcGVhdGVkX21lbnVfaXRlbSB7XG4gICAgcmV0dXJuIG5ldyByZXBlYXRlZF9tZW51X2l0ZW0oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IHJlcGVhdGVkX21lbnVfaXRlbSB7XG4gICAgcmV0dXJuIG5ldyByZXBlYXRlZF9tZW51X2l0ZW0oKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogcmVwZWF0ZWRfbWVudV9pdGVtIHwgUGxhaW5NZXNzYWdlPHJlcGVhdGVkX21lbnVfaXRlbT4gfCB1bmRlZmluZWQsIGI6IHJlcGVhdGVkX21lbnVfaXRlbSB8IFBsYWluTWVzc2FnZTxyZXBlYXRlZF9tZW51X2l0ZW0+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhyZXBlYXRlZF9tZW51X2l0ZW0sIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5QYXJhbXNDb25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIFBhcmFtc0NvbmZpZyBleHRlbmRzIE1lc3NhZ2U8UGFyYW1zQ29uZmlnPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBlbnYgPSAxO1xuICAgKi9cbiAgZW52ID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgZGVzY3JpcHRpb24gPSAyO1xuICAgKi9cbiAgZGVzY3JpcHRpb24gPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBhdXRob3IgPSAzO1xuICAgKi9cbiAgYXV0aG9yID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgZGVmYXVsdF90aGVtZSA9IDQ7XG4gICAqL1xuICBkZWZhdWx0VGhlbWUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgc2hvd19zaGFyZV9idXR0b25zID0gNTtcbiAgICovXG4gIHNob3dTaGFyZUJ1dHRvbnMgPSBmYWxzZTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIHNob3dfcmVhZGluZ190aW1lID0gNjtcbiAgICovXG4gIHNob3dSZWFkaW5nVGltZSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgZGlzcGxheV9mdWxsX2xhbmdfbmFtZSA9IDc7XG4gICAqL1xuICBkaXNwbGF5RnVsbExhbmdOYW1lID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCBzaG93X3Bvc3RfbmF2X2xpbmtzID0gODtcbiAgICovXG4gIHNob3dQb3N0TmF2TGlua3MgPSBmYWxzZTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIHNob3dfYnJlYWRfY3J1bWJzID0gOTtcbiAgICovXG4gIHNob3dCcmVhZENydW1icyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgc2hvd19jb2RlX2NvcHlfYnV0dG9ucyA9IDEwO1xuICAgKi9cbiAgc2hvd0NvZGVDb3B5QnV0dG9ucyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgc2hvd19yc3NfYnV0dG9uX2luX3NlY3Rpb25fdGVybV9saXN0ID0gMTE7XG4gICAqL1xuICBzaG93UnNzQnV0dG9uSW5TZWN0aW9uVGVybUxpc3QgPSBmYWxzZTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBib29sIHNob3dfYWxsX3BhZ2VzX2luX2FyY2hpdmUgPSAxMjtcbiAgICovXG4gIHNob3dBbGxQYWdlc0luQXJjaGl2ZSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgc2hvd19wYWdlX251bXMgPSAxMztcbiAgICovXG4gIHNob3dQYWdlTnVtcyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgc2hvd190b2MgPSAxNDtcbiAgICovXG4gIHNob3dUb2MgPSBmYWxzZTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBzdHJpbmcgaW1hZ2VzID0gMTU7XG4gICAqL1xuICBpbWFnZXM6IHN0cmluZ1tdID0gW107XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogY29udGVudC5Qcm9maWxlTW9kZUNvbmZpZyBwcm9maWxlX21vZGUgPSAxNjtcbiAgICovXG4gIHByb2ZpbGVNb2RlPzogUHJvZmlsZU1vZGVDb25maWc7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogY29udGVudC5Ib21lSW5mb1BhcmFtc0NvbmZpZyBob21lX2luZm9fcGFyYW1zID0gMTc7XG4gICAqL1xuICBob21lSW5mb1BhcmFtcz86IEhvbWVJbmZvUGFyYW1zQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGNvbnRlbnQuU29jaWFsSWNvbkNvbmZpZyBzb2NpYWxfaWNvbnMgPSAxODtcbiAgICovXG4gIHNvY2lhbEljb25zOiBTb2NpYWxJY29uQ29uZmlnW10gPSBbXTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LkVkaXRQb3N0Q29uZmlnIGVkaXRfcG9zdCA9IDE5O1xuICAgKi9cbiAgZWRpdFBvc3Q/OiBFZGl0UG9zdENvbmZpZztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBjb250ZW50LkFzc2V0c0NvbmZpZyBhc3NldHMgPSAyMDtcbiAgICovXG4gIGFzc2V0cz86IEFzc2V0c0NvbmZpZztcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8UGFyYW1zQ29uZmlnPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlBhcmFtc0NvbmZpZ1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiZW52XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImRlc2NyaXB0aW9uXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcImF1dGhvclwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogNCwgbmFtZTogXCJkZWZhdWx0X3RoZW1lXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA1LCBuYW1lOiBcInNob3dfc2hhcmVfYnV0dG9uc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICAgIHsgbm86IDYsIG5hbWU6IFwic2hvd19yZWFkaW5nX3RpbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8gfSxcbiAgICB7IG5vOiA3LCBuYW1lOiBcImRpc3BsYXlfZnVsbF9sYW5nX25hbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8gfSxcbiAgICB7IG5vOiA4LCBuYW1lOiBcInNob3dfcG9zdF9uYXZfbGlua3NcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8gfSxcbiAgICB7IG5vOiA5LCBuYW1lOiBcInNob3dfYnJlYWRfY3J1bWJzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovIH0sXG4gICAgeyBubzogMTAsIG5hbWU6IFwic2hvd19jb2RlX2NvcHlfYnV0dG9uc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICAgIHsgbm86IDExLCBuYW1lOiBcInNob3dfcnNzX2J1dHRvbl9pbl9zZWN0aW9uX3Rlcm1fbGlzdFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICAgIHsgbm86IDEyLCBuYW1lOiBcInNob3dfYWxsX3BhZ2VzX2luX2FyY2hpdmVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOCAvKiBTY2FsYXJUeXBlLkJPT0wgKi8gfSxcbiAgICB7IG5vOiAxMywgbmFtZTogXCJzaG93X3BhZ2VfbnVtc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICAgIHsgbm86IDE0LCBuYW1lOiBcInNob3dfdG9jXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovIH0sXG4gICAgeyBubzogMTUsIG5hbWU6IFwiaW1hZ2VzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gICAgeyBubzogMTYsIG5hbWU6IFwicHJvZmlsZV9tb2RlXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBQcm9maWxlTW9kZUNvbmZpZyB9LFxuICAgIHsgbm86IDE3LCBuYW1lOiBcImhvbWVfaW5mb19wYXJhbXNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEhvbWVJbmZvUGFyYW1zQ29uZmlnIH0sXG4gICAgeyBubzogMTgsIG5hbWU6IFwic29jaWFsX2ljb25zXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTb2NpYWxJY29uQ29uZmlnLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDE5LCBuYW1lOiBcImVkaXRfcG9zdFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRWRpdFBvc3RDb25maWcgfSxcbiAgICB7IG5vOiAyMCwgbmFtZTogXCJhc3NldHNcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IEFzc2V0c0NvbmZpZyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogUGFyYW1zQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IFBhcmFtc0NvbmZpZygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogUGFyYW1zQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IFBhcmFtc0NvbmZpZygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogUGFyYW1zQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IFBhcmFtc0NvbmZpZygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBQYXJhbXNDb25maWcgfCBQbGFpbk1lc3NhZ2U8UGFyYW1zQ29uZmlnPiB8IHVuZGVmaW5lZCwgYjogUGFyYW1zQ29uZmlnIHwgUGxhaW5NZXNzYWdlPFBhcmFtc0NvbmZpZz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFBhcmFtc0NvbmZpZywgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LlByb2ZpbGVNb2RlQ29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9maWxlTW9kZUNvbmZpZyBleHRlbmRzIE1lc3NhZ2U8UHJvZmlsZU1vZGVDb25maWc+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCBlbmFibGVkID0gMTtcbiAgICovXG4gIGVuYWJsZWQgPSBmYWxzZTtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGl0bGUgPSAyO1xuICAgKi9cbiAgdGl0bGUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBpbWFnZV91cmwgPSAzO1xuICAgKi9cbiAgaW1hZ2VVcmwgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBpbWFnZV90aXRsZSA9IDQ7XG4gICAqL1xuICBpbWFnZVRpdGxlID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBjb250ZW50LkJ1dHRvbkNvbmZpZyBidXR0b25zID0gNTtcbiAgICovXG4gIGJ1dHRvbnM6IEJ1dHRvbkNvbmZpZ1tdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFByb2ZpbGVNb2RlQ29uZmlnPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlByb2ZpbGVNb2RlQ29uZmlnXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJlbmFibGVkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJ0aXRsZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJpbWFnZV91cmxcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwiaW1hZ2VfdGl0bGVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDUsIG5hbWU6IFwiYnV0dG9uc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogQnV0dG9uQ29uZmlnLCByZXBlYXRlZDogdHJ1ZSB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogUHJvZmlsZU1vZGVDb25maWcge1xuICAgIHJldHVybiBuZXcgUHJvZmlsZU1vZGVDb25maWcoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFByb2ZpbGVNb2RlQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IFByb2ZpbGVNb2RlQ29uZmlnKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBQcm9maWxlTW9kZUNvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBQcm9maWxlTW9kZUNvbmZpZygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBQcm9maWxlTW9kZUNvbmZpZyB8IFBsYWluTWVzc2FnZTxQcm9maWxlTW9kZUNvbmZpZz4gfCB1bmRlZmluZWQsIGI6IFByb2ZpbGVNb2RlQ29uZmlnIHwgUGxhaW5NZXNzYWdlPFByb2ZpbGVNb2RlQ29uZmlnPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoUHJvZmlsZU1vZGVDb25maWcsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5CdXR0b25Db25maWdcbiAqL1xuZXhwb3J0IGNsYXNzIEJ1dHRvbkNvbmZpZyBleHRlbmRzIE1lc3NhZ2U8QnV0dG9uQ29uZmlnPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBuYW1lID0gMTtcbiAgICovXG4gIG5hbWUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB1cmwgPSAyO1xuICAgKi9cbiAgdXJsID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8QnV0dG9uQ29uZmlnPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LkJ1dHRvbkNvbmZpZ1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwibmFtZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJ1cmxcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogQnV0dG9uQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IEJ1dHRvbkNvbmZpZygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQnV0dG9uQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IEJ1dHRvbkNvbmZpZygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQnV0dG9uQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IEJ1dHRvbkNvbmZpZygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBCdXR0b25Db25maWcgfCBQbGFpbk1lc3NhZ2U8QnV0dG9uQ29uZmlnPiB8IHVuZGVmaW5lZCwgYjogQnV0dG9uQ29uZmlnIHwgUGxhaW5NZXNzYWdlPEJ1dHRvbkNvbmZpZz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEJ1dHRvbkNvbmZpZywgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjb250ZW50LkhvbWVJbmZvUGFyYW1zQ29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBIb21lSW5mb1BhcmFtc0NvbmZpZyBleHRlbmRzIE1lc3NhZ2U8SG9tZUluZm9QYXJhbXNDb25maWc+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHRpdGxlID0gMTtcbiAgICovXG4gIHRpdGxlID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgY29udGVudCA9IDI7XG4gICAqL1xuICBjb250ZW50ID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8SG9tZUluZm9QYXJhbXNDb25maWc+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImNvbnRlbnQuSG9tZUluZm9QYXJhbXNDb25maWdcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInRpdGxlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImNvbnRlbnRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogSG9tZUluZm9QYXJhbXNDb25maWcge1xuICAgIHJldHVybiBuZXcgSG9tZUluZm9QYXJhbXNDb25maWcoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEhvbWVJbmZvUGFyYW1zQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IEhvbWVJbmZvUGFyYW1zQ29uZmlnKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBIb21lSW5mb1BhcmFtc0NvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBIb21lSW5mb1BhcmFtc0NvbmZpZygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBIb21lSW5mb1BhcmFtc0NvbmZpZyB8IFBsYWluTWVzc2FnZTxIb21lSW5mb1BhcmFtc0NvbmZpZz4gfCB1bmRlZmluZWQsIGI6IEhvbWVJbmZvUGFyYW1zQ29uZmlnIHwgUGxhaW5NZXNzYWdlPEhvbWVJbmZvUGFyYW1zQ29uZmlnPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoSG9tZUluZm9QYXJhbXNDb25maWcsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY29udGVudC5Tb2NpYWxJY29uQ29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBTb2NpYWxJY29uQ29uZmlnIGV4dGVuZHMgTWVzc2FnZTxTb2NpYWxJY29uQ29uZmlnPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBuYW1lID0gMTtcbiAgICovXG4gIG5hbWUgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0aXRsZSA9IDI7XG4gICAqL1xuICB0aXRsZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHVybCA9IDM7XG4gICAqL1xuICB1cmwgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxTb2NpYWxJY29uQ29uZmlnPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjb250ZW50LlNvY2lhbEljb25Db25maWdcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcIm5hbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwidGl0bGVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwidXJsXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFNvY2lhbEljb25Db25maWcge1xuICAgIHJldHVybiBuZXcgU29jaWFsSWNvbkNvbmZpZygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU29jaWFsSWNvbkNvbmZpZyB7XG4gICAgcmV0dXJuIG5ldyBTb2NpYWxJY29uQ29uZmlnKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTb2NpYWxJY29uQ29uZmlnIHtcbiAgICByZXR1cm4gbmV3IFNvY2lhbEljb25Db25maWcoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogU29jaWFsSWNvbkNvbmZpZyB8IFBsYWluTWVzc2FnZTxTb2NpYWxJY29uQ29uZmlnPiB8IHVuZGVmaW5lZCwgYjogU29jaWFsSWNvbkNvbmZpZyB8IFBsYWluTWVzc2FnZTxTb2NpYWxJY29uQ29uZmlnPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoU29jaWFsSWNvbkNvbmZpZywgYSwgYik7XG4gIH1cbn1cblxuIiwgIi8vIEBnZW5lcmF0ZWQgYnkgcHJvdG9jLWdlbi1lcyB2MS42LjAgd2l0aCBwYXJhbWV0ZXIgXCJ0YXJnZXQ9dHNcIlxuLy8gQGdlbmVyYXRlZCBmcm9tIGZpbGUgcHJvdG9mbG93LnByb3RvIChwYWNrYWdlIHByb3RvZmxvdywgc3ludGF4IHByb3RvMylcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG5pbXBvcnQgdHlwZSB7IEJpbmFyeVJlYWRPcHRpb25zLCBGaWVsZExpc3QsIEpzb25SZWFkT3B0aW9ucywgSnNvblZhbHVlLCBQYXJ0aWFsTWVzc2FnZSwgUGxhaW5NZXNzYWdlIH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuaW1wb3J0IHsgTWVzc2FnZSwgcHJvdG8zLCBwcm90b0ludDY0IH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuaW1wb3J0IHsgQ29udGVudCwgU2VnbWVudCBhcyBTZWdtZW50JDEgfSBmcm9tIFwiLi9jb250ZW50L2NvbnRlbnRfcGIuanNcIjtcblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBwcm90b2Zsb3cuQW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZTxBbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGV4dCA9IDE7XG4gICAqL1xuICB0ZXh0ID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8QW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3Q+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5BbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwidGV4dFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBBbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBBbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgQW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3QoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogQW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8QW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3Q+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhBbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBwcm90b2Zsb3cuR2VuZXJhdGVJbWFnZXNSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBHZW5lcmF0ZUltYWdlc1JlcXVlc3QgZXh0ZW5kcyBNZXNzYWdlPEdlbmVyYXRlSW1hZ2VzUmVxdWVzdD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcHJvbXB0ID0gMTtcbiAgICovXG4gIHByb21wdCA9IFwiXCI7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEdlbmVyYXRlSW1hZ2VzUmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwicHJvdG9mbG93LkdlbmVyYXRlSW1hZ2VzUmVxdWVzdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwicHJvbXB0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEdlbmVyYXRlSW1hZ2VzUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBHZW5lcmF0ZUltYWdlc1JlcXVlc3QoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEdlbmVyYXRlSW1hZ2VzUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBHZW5lcmF0ZUltYWdlc1JlcXVlc3QoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEdlbmVyYXRlSW1hZ2VzUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBHZW5lcmF0ZUltYWdlc1JlcXVlc3QoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogR2VuZXJhdGVJbWFnZXNSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPEdlbmVyYXRlSW1hZ2VzUmVxdWVzdD4gfCB1bmRlZmluZWQsIGI6IEdlbmVyYXRlSW1hZ2VzUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxHZW5lcmF0ZUltYWdlc1JlcXVlc3Q+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhHZW5lcmF0ZUltYWdlc1JlcXVlc3QsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgcHJvdG9mbG93LkdlbmVyYXRlSW1hZ2VzUmVzcG9uc2VcbiAqL1xuZXhwb3J0IGNsYXNzIEdlbmVyYXRlSW1hZ2VzUmVzcG9uc2UgZXh0ZW5kcyBNZXNzYWdlPEdlbmVyYXRlSW1hZ2VzUmVzcG9uc2U+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIGltYWdlcyA9IDE7XG4gICAqL1xuICBpbWFnZXM6IHN0cmluZ1tdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEdlbmVyYXRlSW1hZ2VzUmVzcG9uc2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5HZW5lcmF0ZUltYWdlc1Jlc3BvbnNlXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJpbWFnZXNcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEdlbmVyYXRlSW1hZ2VzUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgR2VuZXJhdGVJbWFnZXNSZXNwb25zZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR2VuZXJhdGVJbWFnZXNSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBHZW5lcmF0ZUltYWdlc1Jlc3BvbnNlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHZW5lcmF0ZUltYWdlc1Jlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IEdlbmVyYXRlSW1hZ2VzUmVzcG9uc2UoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogR2VuZXJhdGVJbWFnZXNSZXNwb25zZSB8IFBsYWluTWVzc2FnZTxHZW5lcmF0ZUltYWdlc1Jlc3BvbnNlPiB8IHVuZGVmaW5lZCwgYjogR2VuZXJhdGVJbWFnZXNSZXNwb25zZSB8IFBsYWluTWVzc2FnZTxHZW5lcmF0ZUltYWdlc1Jlc3BvbnNlPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoR2VuZXJhdGVJbWFnZXNSZXNwb25zZSwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBwcm90b2Zsb3cuRGVsZXRlU2Vzc2lvblJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIERlbGV0ZVNlc3Npb25SZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZTxEZWxldGVTZXNzaW9uUmVxdWVzdD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaWQgPSAxO1xuICAgKi9cbiAgaWQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxEZWxldGVTZXNzaW9uUmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwicHJvdG9mbG93LkRlbGV0ZVNlc3Npb25SZXF1ZXN0XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJpZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBEZWxldGVTZXNzaW9uUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBEZWxldGVTZXNzaW9uUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogRGVsZXRlU2Vzc2lvblJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgRGVsZXRlU2Vzc2lvblJlcXVlc3QoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IERlbGV0ZVNlc3Npb25SZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IERlbGV0ZVNlc3Npb25SZXF1ZXN0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IERlbGV0ZVNlc3Npb25SZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPERlbGV0ZVNlc3Npb25SZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogRGVsZXRlU2Vzc2lvblJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8RGVsZXRlU2Vzc2lvblJlcXVlc3Q+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhEZWxldGVTZXNzaW9uUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBwcm90b2Zsb3cuUHJvbXB0XG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9tcHQgZXh0ZW5kcyBNZXNzYWdlPFByb21wdD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaWQgPSAxO1xuICAgKi9cbiAgaWQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0ZXh0ID0gMjtcbiAgICovXG4gIHRleHQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxQcm9tcHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5Qcm9tcHRcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImlkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcInRleHRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogUHJvbXB0IHtcbiAgICByZXR1cm4gbmV3IFByb21wdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogUHJvbXB0IHtcbiAgICByZXR1cm4gbmV3IFByb21wdCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogUHJvbXB0IHtcbiAgICByZXR1cm4gbmV3IFByb21wdCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBQcm9tcHQgfCBQbGFpbk1lc3NhZ2U8UHJvbXB0PiB8IHVuZGVmaW5lZCwgYjogUHJvbXB0IHwgUGxhaW5NZXNzYWdlPFByb21wdD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFByb21wdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBwcm90b2Zsb3cuR2V0UHJvbXB0c1JlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEdldFByb21wdHNSZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZTxHZXRQcm9tcHRzUmVxdWVzdD4ge1xuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8R2V0UHJvbXB0c1JlcXVlc3Q+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5HZXRQcm9tcHRzUmVxdWVzdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogR2V0UHJvbXB0c1JlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgR2V0UHJvbXB0c1JlcXVlc3QoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEdldFByb21wdHNSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEdldFByb21wdHNSZXF1ZXN0KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHZXRQcm9tcHRzUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBHZXRQcm9tcHRzUmVxdWVzdCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBHZXRQcm9tcHRzUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxHZXRQcm9tcHRzUmVxdWVzdD4gfCB1bmRlZmluZWQsIGI6IEdldFByb21wdHNSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPEdldFByb21wdHNSZXF1ZXN0PiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoR2V0UHJvbXB0c1JlcXVlc3QsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgcHJvdG9mbG93LkdldFByb21wdHNSZXNwb25zZVxuICovXG5leHBvcnQgY2xhc3MgR2V0UHJvbXB0c1Jlc3BvbnNlIGV4dGVuZHMgTWVzc2FnZTxHZXRQcm9tcHRzUmVzcG9uc2U+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgcHJvdG9mbG93LlByb21wdCBwcm9tcHRzID0gMTtcbiAgICovXG4gIHByb21wdHM6IFByb21wdFtdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEdldFByb21wdHNSZXNwb25zZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwicHJvdG9mbG93LkdldFByb21wdHNSZXNwb25zZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwicHJvbXB0c1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogUHJvbXB0LCByZXBlYXRlZDogdHJ1ZSB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogR2V0UHJvbXB0c1Jlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IEdldFByb21wdHNSZXNwb25zZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR2V0UHJvbXB0c1Jlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IEdldFByb21wdHNSZXNwb25zZSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR2V0UHJvbXB0c1Jlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IEdldFByb21wdHNSZXNwb25zZSgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBHZXRQcm9tcHRzUmVzcG9uc2UgfCBQbGFpbk1lc3NhZ2U8R2V0UHJvbXB0c1Jlc3BvbnNlPiB8IHVuZGVmaW5lZCwgYjogR2V0UHJvbXB0c1Jlc3BvbnNlIHwgUGxhaW5NZXNzYWdlPEdldFByb21wdHNSZXNwb25zZT4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEdldFByb21wdHNSZXNwb25zZSwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBwcm90b2Zsb3cuSW5mZXJSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBJbmZlclJlcXVlc3QgZXh0ZW5kcyBNZXNzYWdlPEluZmVyUmVxdWVzdD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcHJvbXB0ID0gMTtcbiAgICovXG4gIHByb21wdCA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIHRleHQgPSAyO1xuICAgKi9cbiAgdGV4dDogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8SW5mZXJSZXF1ZXN0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJwcm90b2Zsb3cuSW5mZXJSZXF1ZXN0XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJwcm9tcHRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwidGV4dFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCByZXBlYXRlZDogdHJ1ZSB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogSW5mZXJSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEluZmVyUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogSW5mZXJSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEluZmVyUmVxdWVzdCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogSW5mZXJSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEluZmVyUmVxdWVzdCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBJbmZlclJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8SW5mZXJSZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogSW5mZXJSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPEluZmVyUmVxdWVzdD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEluZmVyUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBwcm90b2Zsb3cuSW5mZXJSZXNwb25zZVxuICovXG5leHBvcnQgY2xhc3MgSW5mZXJSZXNwb25zZSBleHRlbmRzIE1lc3NhZ2U8SW5mZXJSZXNwb25zZT4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGV4dCA9IDE7XG4gICAqL1xuICB0ZXh0ID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8SW5mZXJSZXNwb25zZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwicHJvdG9mbG93LkluZmVyUmVzcG9uc2VcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInRleHRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogSW5mZXJSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBJbmZlclJlc3BvbnNlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBJbmZlclJlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IEluZmVyUmVzcG9uc2UoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEluZmVyUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgSW5mZXJSZXNwb25zZSgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBJbmZlclJlc3BvbnNlIHwgUGxhaW5NZXNzYWdlPEluZmVyUmVzcG9uc2U+IHwgdW5kZWZpbmVkLCBiOiBJbmZlclJlc3BvbnNlIHwgUGxhaW5NZXNzYWdlPEluZmVyUmVzcG9uc2U+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhJbmZlclJlc3BvbnNlLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHByb3RvZmxvdy5VcGxvYWRDb250ZW50UmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgVXBsb2FkQ29udGVudFJlcXVlc3QgZXh0ZW5kcyBNZXNzYWdlPFVwbG9hZENvbnRlbnRSZXF1ZXN0PiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGNvbnRlbnQuQ29udGVudCBjb250ZW50ID0gMTtcbiAgICovXG4gIGNvbnRlbnQ/OiBDb250ZW50O1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxVcGxvYWRDb250ZW50UmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwicHJvdG9mbG93LlVwbG9hZENvbnRlbnRSZXF1ZXN0XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJjb250ZW50XCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBDb250ZW50IH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBVcGxvYWRDb250ZW50UmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBVcGxvYWRDb250ZW50UmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVXBsb2FkQ29udGVudFJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgVXBsb2FkQ29udGVudFJlcXVlc3QoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFVwbG9hZENvbnRlbnRSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFVwbG9hZENvbnRlbnRSZXF1ZXN0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFVwbG9hZENvbnRlbnRSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPFVwbG9hZENvbnRlbnRSZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogVXBsb2FkQ29udGVudFJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8VXBsb2FkQ29udGVudFJlcXVlc3Q+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhVcGxvYWRDb250ZW50UmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBwcm90b2Zsb3cuVXBsb2FkQ29udGVudFJlc3BvbnNlXG4gKi9cbmV4cG9ydCBjbGFzcyBVcGxvYWRDb250ZW50UmVzcG9uc2UgZXh0ZW5kcyBNZXNzYWdlPFVwbG9hZENvbnRlbnRSZXNwb25zZT4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgaWQgPSAxO1xuICAgKi9cbiAgaWQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxVcGxvYWRDb250ZW50UmVzcG9uc2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5VcGxvYWRDb250ZW50UmVzcG9uc2VcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImlkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFVwbG9hZENvbnRlbnRSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBVcGxvYWRDb250ZW50UmVzcG9uc2UoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFVwbG9hZENvbnRlbnRSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBVcGxvYWRDb250ZW50UmVzcG9uc2UoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFVwbG9hZENvbnRlbnRSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBVcGxvYWRDb250ZW50UmVzcG9uc2UoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogVXBsb2FkQ29udGVudFJlc3BvbnNlIHwgUGxhaW5NZXNzYWdlPFVwbG9hZENvbnRlbnRSZXNwb25zZT4gfCB1bmRlZmluZWQsIGI6IFVwbG9hZENvbnRlbnRSZXNwb25zZSB8IFBsYWluTWVzc2FnZTxVcGxvYWRDb250ZW50UmVzcG9uc2U+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhVcGxvYWRDb250ZW50UmVzcG9uc2UsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgcHJvdG9mbG93LkdldFNlc3Npb25SZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBHZXRTZXNzaW9uUmVxdWVzdCBleHRlbmRzIE1lc3NhZ2U8R2V0U2Vzc2lvblJlcXVlc3Q+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGlkID0gMTtcbiAgICovXG4gIGlkID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8R2V0U2Vzc2lvblJlcXVlc3Q+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5HZXRTZXNzaW9uUmVxdWVzdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiaWRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogR2V0U2Vzc2lvblJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgR2V0U2Vzc2lvblJlcXVlc3QoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEdldFNlc3Npb25SZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEdldFNlc3Npb25SZXF1ZXN0KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHZXRTZXNzaW9uUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBHZXRTZXNzaW9uUmVxdWVzdCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBHZXRTZXNzaW9uUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxHZXRTZXNzaW9uUmVxdWVzdD4gfCB1bmRlZmluZWQsIGI6IEdldFNlc3Npb25SZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPEdldFNlc3Npb25SZXF1ZXN0PiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoR2V0U2Vzc2lvblJlcXVlc3QsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgcHJvdG9mbG93LkdldFNlc3Npb25SZXNwb25zZVxuICovXG5leHBvcnQgY2xhc3MgR2V0U2Vzc2lvblJlc3BvbnNlIGV4dGVuZHMgTWVzc2FnZTxHZXRTZXNzaW9uUmVzcG9uc2U+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcHJvdG9mbG93LlNlc3Npb24gc2Vzc2lvbiA9IDE7XG4gICAqL1xuICBzZXNzaW9uPzogU2Vzc2lvbjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8R2V0U2Vzc2lvblJlc3BvbnNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJwcm90b2Zsb3cuR2V0U2Vzc2lvblJlc3BvbnNlXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJzZXNzaW9uXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTZXNzaW9uIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBHZXRTZXNzaW9uUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgR2V0U2Vzc2lvblJlc3BvbnNlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHZXRTZXNzaW9uUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgR2V0U2Vzc2lvblJlc3BvbnNlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHZXRTZXNzaW9uUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgR2V0U2Vzc2lvblJlc3BvbnNlKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IEdldFNlc3Npb25SZXNwb25zZSB8IFBsYWluTWVzc2FnZTxHZXRTZXNzaW9uUmVzcG9uc2U+IHwgdW5kZWZpbmVkLCBiOiBHZXRTZXNzaW9uUmVzcG9uc2UgfCBQbGFpbk1lc3NhZ2U8R2V0U2Vzc2lvblJlc3BvbnNlPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoR2V0U2Vzc2lvblJlc3BvbnNlLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHByb3RvZmxvdy5HZXRTZXNzaW9uc1JlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEdldFNlc3Npb25zUmVxdWVzdCBleHRlbmRzIE1lc3NhZ2U8R2V0U2Vzc2lvbnNSZXF1ZXN0PiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHVpbnQ2NCBwYWdlID0gMTtcbiAgICovXG4gIHBhZ2UgPSBwcm90b0ludDY0Lnplcm87XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogdWludDY0IGxpbWl0ID0gMjtcbiAgICovXG4gIGxpbWl0ID0gcHJvdG9JbnQ2NC56ZXJvO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxHZXRTZXNzaW9uc1JlcXVlc3Q+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5HZXRTZXNzaW9uc1JlcXVlc3RcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInBhZ2VcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNCAvKiBTY2FsYXJUeXBlLlVJTlQ2NCAqLyB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwibGltaXRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNCAvKiBTY2FsYXJUeXBlLlVJTlQ2NCAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogR2V0U2Vzc2lvbnNSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEdldFNlc3Npb25zUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR2V0U2Vzc2lvbnNSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEdldFNlc3Npb25zUmVxdWVzdCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR2V0U2Vzc2lvbnNSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEdldFNlc3Npb25zUmVxdWVzdCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBHZXRTZXNzaW9uc1JlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8R2V0U2Vzc2lvbnNSZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogR2V0U2Vzc2lvbnNSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPEdldFNlc3Npb25zUmVxdWVzdD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEdldFNlc3Npb25zUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBwcm90b2Zsb3cuR2V0U2Vzc2lvbnNSZXNwb25zZVxuICovXG5leHBvcnQgY2xhc3MgR2V0U2Vzc2lvbnNSZXNwb25zZSBleHRlbmRzIE1lc3NhZ2U8R2V0U2Vzc2lvbnNSZXNwb25zZT4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBwcm90b2Zsb3cuU2Vzc2lvbiBzZXNzaW9ucyA9IDE7XG4gICAqL1xuICBzZXNzaW9uczogU2Vzc2lvbltdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPEdldFNlc3Npb25zUmVzcG9uc2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5HZXRTZXNzaW9uc1Jlc3BvbnNlXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJzZXNzaW9uc1wiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogU2Vzc2lvbiwgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEdldFNlc3Npb25zUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgR2V0U2Vzc2lvbnNSZXNwb25zZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogR2V0U2Vzc2lvbnNSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBHZXRTZXNzaW9uc1Jlc3BvbnNlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBHZXRTZXNzaW9uc1Jlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IEdldFNlc3Npb25zUmVzcG9uc2UoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogR2V0U2Vzc2lvbnNSZXNwb25zZSB8IFBsYWluTWVzc2FnZTxHZXRTZXNzaW9uc1Jlc3BvbnNlPiB8IHVuZGVmaW5lZCwgYjogR2V0U2Vzc2lvbnNSZXNwb25zZSB8IFBsYWluTWVzc2FnZTxHZXRTZXNzaW9uc1Jlc3BvbnNlPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoR2V0U2Vzc2lvbnNSZXNwb25zZSwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBwcm90b2Zsb3cuVG9rZW5cbiAqL1xuZXhwb3J0IGNsYXNzIFRva2VuIGV4dGVuZHMgTWVzc2FnZTxUb2tlbj4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiB1aW50MzIgaWQgPSAxO1xuICAgKi9cbiAgaWQgPSAwO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHVpbnQ2NCBzdGFydF90aW1lID0gMjtcbiAgICovXG4gIHN0YXJ0VGltZSA9IHByb3RvSW50NjQuemVybztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiB1aW50NjQgZW5kX3RpbWUgPSAzO1xuICAgKi9cbiAgZW5kVGltZSA9IHByb3RvSW50NjQuemVybztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgdGV4dCA9IDQ7XG4gICAqL1xuICB0ZXh0ID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcCA9IDU7XG4gICAqL1xuICBwID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8VG9rZW4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5Ub2tlblwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiaWRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogMTMgLyogU2NhbGFyVHlwZS5VSU5UMzIgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcInN0YXJ0X3RpbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNCAvKiBTY2FsYXJUeXBlLlVJTlQ2NCAqLyB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwiZW5kX3RpbWVcIiwga2luZDogXCJzY2FsYXJcIiwgVDogNCAvKiBTY2FsYXJUeXBlLlVJTlQ2NCAqLyB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwidGV4dFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogNSwgbmFtZTogXCJwXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFRva2VuIHtcbiAgICByZXR1cm4gbmV3IFRva2VuKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBUb2tlbiB7XG4gICAgcmV0dXJuIG5ldyBUb2tlbigpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVG9rZW4ge1xuICAgIHJldHVybiBuZXcgVG9rZW4oKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogVG9rZW4gfCBQbGFpbk1lc3NhZ2U8VG9rZW4+IHwgdW5kZWZpbmVkLCBiOiBUb2tlbiB8IFBsYWluTWVzc2FnZTxUb2tlbj4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFRva2VuLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHByb3RvZmxvdy5TZWdtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBTZWdtZW50IGV4dGVuZHMgTWVzc2FnZTxTZWdtZW50PiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHVpbnQzMiBudW0gPSAxO1xuICAgKi9cbiAgbnVtID0gMDtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBwcm90b2Zsb3cuVG9rZW4gdG9rZW5zID0gMjtcbiAgICovXG4gIHRva2VuczogVG9rZW5bXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0ZXh0ID0gMztcbiAgICovXG4gIHRleHQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHVpbnQ2NCBzdGFydF90aW1lID0gNDtcbiAgICovXG4gIHN0YXJ0VGltZSA9IHByb3RvSW50NjQuemVybztcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiB1aW50NjQgZW5kX3RpbWUgPSA1O1xuICAgKi9cbiAgZW5kVGltZSA9IHByb3RvSW50NjQuemVybztcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8U2VnbWVudD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwicHJvdG9mbG93LlNlZ21lbnRcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcIm51bVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiAxMyAvKiBTY2FsYXJUeXBlLlVJTlQzMiAqLyB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwidG9rZW5zXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBUb2tlbiwgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcInRleHRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwic3RhcnRfdGltZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA0IC8qIFNjYWxhclR5cGUuVUlOVDY0ICovIH0sXG4gICAgeyBubzogNSwgbmFtZTogXCJlbmRfdGltZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA0IC8qIFNjYWxhclR5cGUuVUlOVDY0ICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBTZWdtZW50IHtcbiAgICByZXR1cm4gbmV3IFNlZ21lbnQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFNlZ21lbnQge1xuICAgIHJldHVybiBuZXcgU2VnbWVudCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU2VnbWVudCB7XG4gICAgcmV0dXJuIG5ldyBTZWdtZW50KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFNlZ21lbnQgfCBQbGFpbk1lc3NhZ2U8U2VnbWVudD4gfCB1bmRlZmluZWQsIGI6IFNlZ21lbnQgfCBQbGFpbk1lc3NhZ2U8U2VnbWVudD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFNlZ21lbnQsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgcHJvdG9mbG93LlNlc3Npb25cbiAqL1xuZXhwb3J0IGNsYXNzIFNlc3Npb24gZXh0ZW5kcyBNZXNzYWdlPFNlc3Npb24+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGlkID0gMTtcbiAgICovXG4gIGlkID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgbmFtZSA9IDI7XG4gICAqL1xuICBuYW1lID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiByZXBlYXRlZCBwcm90b2Zsb3cuU2VnbWVudCBzZWdtZW50cyA9IDM7XG4gICAqL1xuICBzZWdtZW50czogU2VnbWVudFtdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFNlc3Npb24+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5TZXNzaW9uXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJpZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJuYW1lXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcInNlZ21lbnRzXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTZWdtZW50LCByZXBlYXRlZDogdHJ1ZSB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogU2Vzc2lvbiB7XG4gICAgcmV0dXJuIG5ldyBTZXNzaW9uKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTZXNzaW9uIHtcbiAgICByZXR1cm4gbmV3IFNlc3Npb24oKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFNlc3Npb24ge1xuICAgIHJldHVybiBuZXcgU2Vzc2lvbigpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBTZXNzaW9uIHwgUGxhaW5NZXNzYWdlPFNlc3Npb24+IHwgdW5kZWZpbmVkLCBiOiBTZXNzaW9uIHwgUGxhaW5NZXNzYWdlPFNlc3Npb24+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhTZXNzaW9uLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHByb3RvZmxvdy5UcmFuc2NyaXB0aW9uUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgVHJhbnNjcmlwdGlvblJlcXVlc3QgZXh0ZW5kcyBNZXNzYWdlPFRyYW5zY3JpcHRpb25SZXF1ZXN0PiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBmaWxlX3BhdGggPSAxNDtcbiAgICovXG4gIGZpbGVQYXRoID0gXCJcIjtcblxuICAvKipcbiAgICogUGF0aCB0byB0aGUgbW9kZWwgZmlsZVxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBtb2RlbCA9IDE7XG4gICAqL1xuICBtb2RlbCA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIFNwb2tlbiBsYW5ndWFnZVxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBsYW5ndWFnZSA9IDI7XG4gICAqL1xuICBsYW5ndWFnZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIFRyYW5zbGF0ZSBmcm9tIHNvdXJjZSBsYW5ndWFnZSB0byBFbmdsaXNoXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCB0cmFuc2xhdGUgPSAzO1xuICAgKi9cbiAgdHJhbnNsYXRlID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIFRpbWUgb2Zmc2V0IGluIG5hbm9zZWNvbmRzIHRvIG1hdGNoIEdvJ3MgdGltZS5EdXJhdGlvblxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGludDY0IG9mZnNldCA9IDQ7XG4gICAqL1xuICBvZmZzZXQgPSBwcm90b0ludDY0Lnplcm87XG5cbiAgLyoqXG4gICAqIER1cmF0aW9uIG9mIGF1ZGlvIHRvIHByb2Nlc3MgaW4gbmFub3NlY29uZHNcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBpbnQ2NCBkdXJhdGlvbiA9IDU7XG4gICAqL1xuICBkdXJhdGlvbiA9IHByb3RvSW50NjQuemVybztcblxuICAvKipcbiAgICogTnVtYmVyIG9mIHRocmVhZHMgdG8gdXNlXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogdWludDMyIHRocmVhZHMgPSA2O1xuICAgKi9cbiAgdGhyZWFkcyA9IDA7XG5cbiAgLyoqXG4gICAqIEVuYWJsZSBzcGVlZHVwXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCBzcGVlZHVwID0gNztcbiAgICovXG4gIHNwZWVkdXAgPSBmYWxzZTtcblxuICAvKipcbiAgICogTWF4aW11bSBzZWdtZW50IGxlbmd0aCBpbiBjaGFyYWN0ZXJzXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogdWludDMyIG1heF9sZW4gPSA4O1xuICAgKi9cbiAgbWF4TGVuID0gMDtcblxuICAvKipcbiAgICogTWF4aW11bSB0b2tlbnMgcGVyIHNlZ21lbnRcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiB1aW50MzIgbWF4X3Rva2VucyA9IDk7XG4gICAqL1xuICBtYXhUb2tlbnMgPSAwO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHNlZ21lbnQgc2NvcmVcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBkb3VibGUgd29yZF90aHJlc2hvbGQgPSAxMDtcbiAgICovXG4gIHdvcmRUaHJlc2hvbGQgPSAwO1xuXG4gIC8qKlxuICAgKiBEaXNwbGF5IHRva2Vuc1xuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IGJvb2wgdG9rZW5zID0gMTE7XG4gICAqL1xuICB0b2tlbnMgPSBmYWxzZTtcblxuICAvKipcbiAgICogQ29sb3JpemUgdG9rZW5zXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYm9vbCBjb2xvcml6ZSA9IDEyO1xuICAgKi9cbiAgY29sb3JpemUgPSBmYWxzZTtcblxuICAvKipcbiAgICogT3V0cHV0IGZvcm1hdCAoc3J0LCBub25lIG9yIGxlYXZlIGFzIGVtcHR5IHN0cmluZylcbiAgICpcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgb3V0ID0gMTM7XG4gICAqL1xuICBvdXQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxUcmFuc2NyaXB0aW9uUmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwicHJvdG9mbG93LlRyYW5zY3JpcHRpb25SZXF1ZXN0XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMTQsIG5hbWU6IFwiZmlsZV9wYXRoXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAxLCBuYW1lOiBcIm1vZGVsXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImxhbmd1YWdlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcInRyYW5zbGF0ZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICAgIHsgbm86IDQsIG5hbWU6IFwib2Zmc2V0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDMgLyogU2NhbGFyVHlwZS5JTlQ2NCAqLyB9LFxuICAgIHsgbm86IDUsIG5hbWU6IFwiZHVyYXRpb25cIiwga2luZDogXCJzY2FsYXJcIiwgVDogMyAvKiBTY2FsYXJUeXBlLklOVDY0ICovIH0sXG4gICAgeyBubzogNiwgbmFtZTogXCJ0aHJlYWRzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDEzIC8qIFNjYWxhclR5cGUuVUlOVDMyICovIH0sXG4gICAgeyBubzogNywgbmFtZTogXCJzcGVlZHVwXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovIH0sXG4gICAgeyBubzogOCwgbmFtZTogXCJtYXhfbGVuXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDEzIC8qIFNjYWxhclR5cGUuVUlOVDMyICovIH0sXG4gICAgeyBubzogOSwgbmFtZTogXCJtYXhfdG9rZW5zXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDEzIC8qIFNjYWxhclR5cGUuVUlOVDMyICovIH0sXG4gICAgeyBubzogMTAsIG5hbWU6IFwid29yZF90aHJlc2hvbGRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogMSAvKiBTY2FsYXJUeXBlLkRPVUJMRSAqLyB9LFxuICAgIHsgbm86IDExLCBuYW1lOiBcInRva2Vuc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA4IC8qIFNjYWxhclR5cGUuQk9PTCAqLyB9LFxuICAgIHsgbm86IDEyLCBuYW1lOiBcImNvbG9yaXplXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDggLyogU2NhbGFyVHlwZS5CT09MICovIH0sXG4gICAgeyBubzogMTMsIG5hbWU6IFwib3V0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFRyYW5zY3JpcHRpb25SZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFRyYW5zY3JpcHRpb25SZXF1ZXN0KCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBUcmFuc2NyaXB0aW9uUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBUcmFuc2NyaXB0aW9uUmVxdWVzdCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogVHJhbnNjcmlwdGlvblJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgVHJhbnNjcmlwdGlvblJlcXVlc3QoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogVHJhbnNjcmlwdGlvblJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8VHJhbnNjcmlwdGlvblJlcXVlc3Q+IHwgdW5kZWZpbmVkLCBiOiBUcmFuc2NyaXB0aW9uUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxUcmFuc2NyaXB0aW9uUmVxdWVzdD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFRyYW5zY3JpcHRpb25SZXF1ZXN0LCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHByb3RvZmxvdy5SZWdpc3RlckZsYWdzXG4gKi9cbmV4cG9ydCBjbGFzcyBSZWdpc3RlckZsYWdzIGV4dGVuZHMgTWVzc2FnZTxSZWdpc3RlckZsYWdzPiB7XG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxSZWdpc3RlckZsYWdzPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJwcm90b2Zsb3cuUmVnaXN0ZXJGbGFnc1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogUmVnaXN0ZXJGbGFncyB7XG4gICAgcmV0dXJuIG5ldyBSZWdpc3RlckZsYWdzKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBSZWdpc3RlckZsYWdzIHtcbiAgICByZXR1cm4gbmV3IFJlZ2lzdGVyRmxhZ3MoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFJlZ2lzdGVyRmxhZ3Mge1xuICAgIHJldHVybiBuZXcgUmVnaXN0ZXJGbGFncygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBSZWdpc3RlckZsYWdzIHwgUGxhaW5NZXNzYWdlPFJlZ2lzdGVyRmxhZ3M+IHwgdW5kZWZpbmVkLCBiOiBSZWdpc3RlckZsYWdzIHwgUGxhaW5NZXNzYWdlPFJlZ2lzdGVyRmxhZ3M+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhSZWdpc3RlckZsYWdzLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHByb3RvZmxvdy5PQ1JUZXh0XG4gKi9cbmV4cG9ydCBjbGFzcyBPQ1JUZXh0IGV4dGVuZHMgTWVzc2FnZTxPQ1JUZXh0PiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0ZXh0ID0gMTtcbiAgICovXG4gIHRleHQgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxPQ1JUZXh0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJwcm90b2Zsb3cuT0NSVGV4dFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwidGV4dFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBPQ1JUZXh0IHtcbiAgICByZXR1cm4gbmV3IE9DUlRleHQoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IE9DUlRleHQge1xuICAgIHJldHVybiBuZXcgT0NSVGV4dCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogT0NSVGV4dCB7XG4gICAgcmV0dXJuIG5ldyBPQ1JUZXh0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IE9DUlRleHQgfCBQbGFpbk1lc3NhZ2U8T0NSVGV4dD4gfCB1bmRlZmluZWQsIGI6IE9DUlRleHQgfCBQbGFpbk1lc3NhZ2U8T0NSVGV4dD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKE9DUlRleHQsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgcHJvdG9mbG93LkltYWdlXG4gKi9cbmV4cG9ydCBjbGFzcyBJbWFnZSBleHRlbmRzIE1lc3NhZ2U8SW1hZ2U+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogYnl0ZXMgaW1hZ2UgPSAxO1xuICAgKi9cbiAgaW1hZ2UgPSBuZXcgVWludDhBcnJheSgwKTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8SW1hZ2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcInByb3RvZmxvdy5JbWFnZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiaW1hZ2VcIiwga2luZDogXCJzY2FsYXJcIiwgVDogMTIgLyogU2NhbGFyVHlwZS5CWVRFUyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogSW1hZ2Uge1xuICAgIHJldHVybiBuZXcgSW1hZ2UoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEltYWdlIHtcbiAgICByZXR1cm4gbmV3IEltYWdlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBJbWFnZSB7XG4gICAgcmV0dXJuIG5ldyBJbWFnZSgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBJbWFnZSB8IFBsYWluTWVzc2FnZTxJbWFnZT4gfCB1bmRlZmluZWQsIGI6IEltYWdlIHwgUGxhaW5NZXNzYWdlPEltYWdlPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoSW1hZ2UsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgcHJvdG9mbG93LkNvbnZlcnRGaWxlUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgQ29udmVydEZpbGVSZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZTxDb252ZXJ0RmlsZVJlcXVlc3Q+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGZyb20gPSAxO1xuICAgKi9cbiAgZnJvbSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHRvID0gMjtcbiAgICovXG4gIHRvID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8Q29udmVydEZpbGVSZXF1ZXN0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJwcm90b2Zsb3cuQ29udmVydEZpbGVSZXF1ZXN0XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJmcm9tXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcInRvXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IENvbnZlcnRGaWxlUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBDb252ZXJ0RmlsZVJlcXVlc3QoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IENvbnZlcnRGaWxlUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBDb252ZXJ0RmlsZVJlcXVlc3QoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IENvbnZlcnRGaWxlUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBDb252ZXJ0RmlsZVJlcXVlc3QoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogQ29udmVydEZpbGVSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPENvbnZlcnRGaWxlUmVxdWVzdD4gfCB1bmRlZmluZWQsIGI6IENvbnZlcnRGaWxlUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxDb252ZXJ0RmlsZVJlcXVlc3Q+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhDb252ZXJ0RmlsZVJlcXVlc3QsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgcHJvdG9mbG93LkNoYXRSZXF1ZXN0XG4gKi9cbmV4cG9ydCBjbGFzcyBDaGF0UmVxdWVzdCBleHRlbmRzIE1lc3NhZ2U8Q2hhdFJlcXVlc3Q+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogaW50MzIgY2FwdHVyZV9kZXZpY2UgPSAxO1xuICAgKi9cbiAgY2FwdHVyZURldmljZSA9IDA7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPENoYXRSZXF1ZXN0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJwcm90b2Zsb3cuQ2hhdFJlcXVlc3RcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImNhcHR1cmVfZGV2aWNlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDUgLyogU2NhbGFyVHlwZS5JTlQzMiAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogQ2hhdFJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgQ2hhdFJlcXVlc3QoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IENoYXRSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IENoYXRSZXF1ZXN0KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBDaGF0UmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBDaGF0UmVxdWVzdCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBDaGF0UmVxdWVzdCB8IFBsYWluTWVzc2FnZTxDaGF0UmVxdWVzdD4gfCB1bmRlZmluZWQsIGI6IENoYXRSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPENoYXRSZXF1ZXN0PiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoQ2hhdFJlcXVlc3QsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgcHJvdG9mbG93LkNoYXRSZXNwb25zZVxuICovXG5leHBvcnQgY2xhc3MgQ2hhdFJlc3BvbnNlIGV4dGVuZHMgTWVzc2FnZTxDaGF0UmVzcG9uc2U+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcHJvdG9mbG93LlNlZ21lbnQgc2VnbWVudCA9IDE7XG4gICAqL1xuICBzZWdtZW50PzogU2VnbWVudDtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8Q2hhdFJlc3BvbnNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJwcm90b2Zsb3cuQ2hhdFJlc3BvbnNlXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJzZWdtZW50XCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBTZWdtZW50IH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBDaGF0UmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgQ2hhdFJlc3BvbnNlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBDaGF0UmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgQ2hhdFJlc3BvbnNlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBDaGF0UmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgQ2hhdFJlc3BvbnNlKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IENoYXRSZXNwb25zZSB8IFBsYWluTWVzc2FnZTxDaGF0UmVzcG9uc2U+IHwgdW5kZWZpbmVkLCBiOiBDaGF0UmVzcG9uc2UgfCBQbGFpbk1lc3NhZ2U8Q2hhdFJlc3BvbnNlPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoQ2hhdFJlc3BvbnNlLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHByb3RvZmxvdy5Zb3VUdWJlVmlkZW9cbiAqL1xuZXhwb3J0IGNsYXNzIFlvdVR1YmVWaWRlbyBleHRlbmRzIE1lc3NhZ2U8WW91VHViZVZpZGVvPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBpZCA9IDE7XG4gICAqL1xuICBpZCA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGZpbGUgPSAyO1xuICAgKi9cbiAgZmlsZSA9IFwiXCI7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFlvdVR1YmVWaWRlbz4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwicHJvdG9mbG93LllvdVR1YmVWaWRlb1wiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiaWRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwiZmlsZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBZb3VUdWJlVmlkZW8ge1xuICAgIHJldHVybiBuZXcgWW91VHViZVZpZGVvKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBZb3VUdWJlVmlkZW8ge1xuICAgIHJldHVybiBuZXcgWW91VHViZVZpZGVvKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBZb3VUdWJlVmlkZW8ge1xuICAgIHJldHVybiBuZXcgWW91VHViZVZpZGVvKCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFlvdVR1YmVWaWRlbyB8IFBsYWluTWVzc2FnZTxZb3VUdWJlVmlkZW8+IHwgdW5kZWZpbmVkLCBiOiBZb3VUdWJlVmlkZW8gfCBQbGFpbk1lc3NhZ2U8WW91VHViZVZpZGVvPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoWW91VHViZVZpZGVvLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHByb3RvZmxvdy5GaWxlUGF0aFxuICovXG5leHBvcnQgY2xhc3MgRmlsZVBhdGggZXh0ZW5kcyBNZXNzYWdlPEZpbGVQYXRoPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBmaWxlID0gMTtcbiAgICovXG4gIGZpbGUgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxGaWxlUGF0aD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwicHJvdG9mbG93LkZpbGVQYXRoXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJmaWxlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEZpbGVQYXRoIHtcbiAgICByZXR1cm4gbmV3IEZpbGVQYXRoKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBGaWxlUGF0aCB7XG4gICAgcmV0dXJuIG5ldyBGaWxlUGF0aCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogRmlsZVBhdGgge1xuICAgIHJldHVybiBuZXcgRmlsZVBhdGgoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogRmlsZVBhdGggfCBQbGFpbk1lc3NhZ2U8RmlsZVBhdGg+IHwgdW5kZWZpbmVkLCBiOiBGaWxlUGF0aCB8IFBsYWluTWVzc2FnZTxGaWxlUGF0aD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEZpbGVQYXRoLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIHByb3RvZmxvdy5Zb3VUdWJlVmlkZW9SZXNwb25zZVxuICovXG5leHBvcnQgY2xhc3MgWW91VHViZVZpZGVvUmVzcG9uc2UgZXh0ZW5kcyBNZXNzYWdlPFlvdVR1YmVWaWRlb1Jlc3BvbnNlPiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB0aXRsZSA9IDE7XG4gICAqL1xuICB0aXRsZSA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcHJvdG9mbG93LkZpbGVQYXRoIGZpbGVfcGF0aCA9IDI7XG4gICAqL1xuICBmaWxlUGF0aD86IEZpbGVQYXRoO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIGNvbnRlbnQuU2VnbWVudCB0cmFuc2NyaXB0ID0gMztcbiAgICovXG4gIHRyYW5zY3JpcHQ6IFNlZ21lbnQkMVtdID0gW107XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFlvdVR1YmVWaWRlb1Jlc3BvbnNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJwcm90b2Zsb3cuWW91VHViZVZpZGVvUmVzcG9uc2VcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcInRpdGxlXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcImZpbGVfcGF0aFwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogRmlsZVBhdGggfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcInRyYW5zY3JpcHRcIiwga2luZDogXCJtZXNzYWdlXCIsIFQ6IFNlZ21lbnQkMSwgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFlvdVR1YmVWaWRlb1Jlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IFlvdVR1YmVWaWRlb1Jlc3BvbnNlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBZb3VUdWJlVmlkZW9SZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBZb3VUdWJlVmlkZW9SZXNwb25zZSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogWW91VHViZVZpZGVvUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgWW91VHViZVZpZGVvUmVzcG9uc2UoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogWW91VHViZVZpZGVvUmVzcG9uc2UgfCBQbGFpbk1lc3NhZ2U8WW91VHViZVZpZGVvUmVzcG9uc2U+IHwgdW5kZWZpbmVkLCBiOiBZb3VUdWJlVmlkZW9SZXNwb25zZSB8IFBsYWluTWVzc2FnZTxZb3VUdWJlVmlkZW9SZXNwb25zZT4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFlvdVR1YmVWaWRlb1Jlc3BvbnNlLCBhLCBiKTtcbiAgfVxufVxuXG4iLCAiLy8gQGdlbmVyYXRlZCBieSBwcm90b2MtZ2VuLWVzIHYxLjYuMCB3aXRoIHBhcmFtZXRlciBcInRhcmdldD10c1wiXG4vLyBAZ2VuZXJhdGVkIGZyb20gZmlsZSBhaS5wcm90byAocGFja2FnZSBhaSwgc3ludGF4IHByb3RvMylcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG5pbXBvcnQgdHlwZSB7IEJpbmFyeVJlYWRPcHRpb25zLCBGaWVsZExpc3QsIEpzb25SZWFkT3B0aW9ucywgSnNvblZhbHVlLCBQYXJ0aWFsTWVzc2FnZSwgUGxhaW5NZXNzYWdlIH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuaW1wb3J0IHsgTWVzc2FnZSwgcHJvdG8zIH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGFpLkFuYWx5emVDb252ZXJzYXRpb25SZXNwb25zZVxuICovXG5leHBvcnQgY2xhc3MgQW5hbHl6ZUNvbnZlcnNhdGlvblJlc3BvbnNlIGV4dGVuZHMgTWVzc2FnZTxBbmFseXplQ29udmVyc2F0aW9uUmVzcG9uc2U+IHtcbiAgLyoqXG4gICAqIFBob25lIG51bWJlcnMgb2YgdGhlIHBhcnRpY2lwYW50c1xuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIHN0cmluZyBwaG9uZV9udW1iZXJzID0gMTtcbiAgICovXG4gIHBob25lTnVtYmVyczogc3RyaW5nW10gPSBbXTtcblxuICAvKipcbiAgICogVGhlIHN1bW1hcnkgb2YgdGhlIGNvbnZlcnNhdGlvblxuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBzdW1tYXJ5ID0gMjtcbiAgICovXG4gIHN1bW1hcnkgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBCYXNlZCBvbiB0aGUgY29udGVudCBvZiB0aGUgY29udmVyc2F0aW9uLCB0aGUgc3lzdGVtIHdpbGwgZ2VuZXJhdGUgYSBsaXN0IG9mIHF1ZXN0aW9uc1xuICAgKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHJlcGVhdGVkIHN0cmluZyBxdWVzdGlvbnMgPSAzO1xuICAgKi9cbiAgcXVlc3Rpb25zOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxBbmFseXplQ29udmVyc2F0aW9uUmVzcG9uc2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImFpLkFuYWx5emVDb252ZXJzYXRpb25SZXNwb25zZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwicGhvbmVfbnVtYmVyc1wiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovLCByZXBlYXRlZDogdHJ1ZSB9LFxuICAgIHsgbm86IDIsIG5hbWU6IFwic3VtbWFyeVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMywgbmFtZTogXCJxdWVzdGlvbnNcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgcmVwZWF0ZWQ6IHRydWUgfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IEFuYWx5emVDb252ZXJzYXRpb25SZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBBbmFseXplQ29udmVyc2F0aW9uUmVzcG9uc2UoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEFuYWx5emVDb252ZXJzYXRpb25SZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBBbmFseXplQ29udmVyc2F0aW9uUmVzcG9uc2UoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEFuYWx5emVDb252ZXJzYXRpb25SZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBBbmFseXplQ29udmVyc2F0aW9uUmVzcG9uc2UoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogQW5hbHl6ZUNvbnZlcnNhdGlvblJlc3BvbnNlIHwgUGxhaW5NZXNzYWdlPEFuYWx5emVDb252ZXJzYXRpb25SZXNwb25zZT4gfCB1bmRlZmluZWQsIGI6IEFuYWx5emVDb252ZXJzYXRpb25SZXNwb25zZSB8IFBsYWluTWVzc2FnZTxBbmFseXplQ29udmVyc2F0aW9uUmVzcG9uc2U+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhBbmFseXplQ29udmVyc2F0aW9uUmVzcG9uc2UsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgYWkuQW5hbHl6ZUNvbnRlbnRcbiAqL1xuZXhwb3J0IGNsYXNzIEFuYWx5emVDb250ZW50IGV4dGVuZHMgTWVzc2FnZTxBbmFseXplQ29udGVudD4ge1xuICAvKipcbiAgICogUG90ZW50aWFsIGNhdGVnb3JpZXMgZm9yIHRoZSBjb250ZW50IGluIHRoZSBmb3JtOiBjYXRlZ29yeS9zdWJjYXRlZ29yeS9vdGhlci1jYXRlZ29yeS4gVGhlIGNhdGVnb3J5IGlzIGFsbCBsb3dlcmNhc2UgYW5kIHNwYWNlcyBhcmUgcmVwbGFjZWQgd2l0aCBkYXNoZXMuXG4gICAqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogcmVwZWF0ZWQgc3RyaW5nIGNhdGVnb3JpZXMgPSAxO1xuICAgKi9cbiAgY2F0ZWdvcmllczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8QW5hbHl6ZUNvbnRlbnQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICBwcm90bzMudXRpbC5pbml0UGFydGlhbChkYXRhLCB0aGlzKTtcbiAgfVxuXG4gIHN0YXRpYyByZWFkb25seSBydW50aW1lOiB0eXBlb2YgcHJvdG8zID0gcHJvdG8zO1xuICBzdGF0aWMgcmVhZG9ubHkgdHlwZU5hbWUgPSBcImFpLkFuYWx5emVDb250ZW50XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJjYXRlZ29yaWVzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8sIHJlcGVhdGVkOiB0cnVlIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBBbmFseXplQ29udGVudCB7XG4gICAgcmV0dXJuIG5ldyBBbmFseXplQ29udGVudCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQW5hbHl6ZUNvbnRlbnQge1xuICAgIHJldHVybiBuZXcgQW5hbHl6ZUNvbnRlbnQoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEFuYWx5emVDb250ZW50IHtcbiAgICByZXR1cm4gbmV3IEFuYWx5emVDb250ZW50KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IEFuYWx5emVDb250ZW50IHwgUGxhaW5NZXNzYWdlPEFuYWx5emVDb250ZW50PiB8IHVuZGVmaW5lZCwgYjogQW5hbHl6ZUNvbnRlbnQgfCBQbGFpbk1lc3NhZ2U8QW5hbHl6ZUNvbnRlbnQ+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhBbmFseXplQ29udGVudCwgYSwgYik7XG4gIH1cbn1cblxuIiwgIi8vIEBnZW5lcmF0ZWQgYnkgcHJvdG9jLWdlbi1jb25uZWN0LWVzIHYxLjMuMCB3aXRoIHBhcmFtZXRlciBcInRhcmdldD10c1wiXG4vLyBAZ2VuZXJhdGVkIGZyb20gZmlsZSBwcm90b2Zsb3cucHJvdG8gKHBhY2thZ2UgcHJvdG9mbG93LCBzeW50YXggcHJvdG8zKVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbmltcG9ydCB7IEFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0LCBDaGF0UmVxdWVzdCwgQ2hhdFJlc3BvbnNlLCBDb252ZXJ0RmlsZVJlcXVlc3QsIERlbGV0ZVNlc3Npb25SZXF1ZXN0LCBGaWxlUGF0aCwgR2VuZXJhdGVJbWFnZXNSZXF1ZXN0LCBHZW5lcmF0ZUltYWdlc1Jlc3BvbnNlLCBHZXRQcm9tcHRzUmVxdWVzdCwgR2V0UHJvbXB0c1Jlc3BvbnNlLCBHZXRTZXNzaW9uUmVxdWVzdCwgR2V0U2Vzc2lvblJlc3BvbnNlLCBHZXRTZXNzaW9uc1JlcXVlc3QsIEdldFNlc3Npb25zUmVzcG9uc2UsIEluZmVyUmVxdWVzdCwgSW5mZXJSZXNwb25zZSwgUHJvbXB0LCBVcGxvYWRDb250ZW50UmVxdWVzdCwgWW91VHViZVZpZGVvLCBZb3VUdWJlVmlkZW9SZXNwb25zZSB9IGZyb20gXCIuL3Byb3RvZmxvd19wYi5qc1wiO1xuaW1wb3J0IHsgRW1wdHksIE1ldGhvZEtpbmQgfSBmcm9tIFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmXCI7XG5pbXBvcnQgeyBBbmFseXplQ29udmVyc2F0aW9uUmVzcG9uc2UgfSBmcm9tIFwiLi9haV9wYi5qc1wiO1xuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBzZXJ2aWNlIHByb3RvZmxvdy5Qcm90b2Zsb3dTZXJ2aWNlXG4gKi9cbmV4cG9ydCBjb25zdCBQcm90b2Zsb3dTZXJ2aWNlID0ge1xuICB0eXBlTmFtZTogXCJwcm90b2Zsb3cuUHJvdG9mbG93U2VydmljZVwiLFxuICBtZXRob2RzOiB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyBwcm90b2Zsb3cuUHJvdG9mbG93U2VydmljZS5Eb3dubG9hZFlvdVR1YmVWaWRlb1xuICAgICAqL1xuICAgIGRvd25sb2FkWW91VHViZVZpZGVvOiB7XG4gICAgICBuYW1lOiBcIkRvd25sb2FkWW91VHViZVZpZGVvXCIsXG4gICAgICBJOiBZb3VUdWJlVmlkZW8sXG4gICAgICBPOiBZb3VUdWJlVmlkZW9SZXNwb25zZSxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHByb3RvZmxvdy5Qcm90b2Zsb3dTZXJ2aWNlLkdldFNlc3Npb25zXG4gICAgICovXG4gICAgZ2V0U2Vzc2lvbnM6IHtcbiAgICAgIG5hbWU6IFwiR2V0U2Vzc2lvbnNcIixcbiAgICAgIEk6IEdldFNlc3Npb25zUmVxdWVzdCxcbiAgICAgIE86IEdldFNlc3Npb25zUmVzcG9uc2UsXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyBwcm90b2Zsb3cuUHJvdG9mbG93U2VydmljZS5HZXRTZXNzaW9uXG4gICAgICovXG4gICAgZ2V0U2Vzc2lvbjoge1xuICAgICAgbmFtZTogXCJHZXRTZXNzaW9uXCIsXG4gICAgICBJOiBHZXRTZXNzaW9uUmVxdWVzdCxcbiAgICAgIE86IEdldFNlc3Npb25SZXNwb25zZSxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHByb3RvZmxvdy5Qcm90b2Zsb3dTZXJ2aWNlLkRlbGV0ZVNlc3Npb25cbiAgICAgKi9cbiAgICBkZWxldGVTZXNzaW9uOiB7XG4gICAgICBuYW1lOiBcIkRlbGV0ZVNlc3Npb25cIixcbiAgICAgIEk6IERlbGV0ZVNlc3Npb25SZXF1ZXN0LFxuICAgICAgTzogRW1wdHksXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyBwcm90b2Zsb3cuUHJvdG9mbG93U2VydmljZS5HZXRQcm9tcHRzXG4gICAgICovXG4gICAgZ2V0UHJvbXB0czoge1xuICAgICAgbmFtZTogXCJHZXRQcm9tcHRzXCIsXG4gICAgICBJOiBHZXRQcm9tcHRzUmVxdWVzdCxcbiAgICAgIE86IEdldFByb21wdHNSZXNwb25zZSxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHByb3RvZmxvdy5Qcm90b2Zsb3dTZXJ2aWNlLk5ld1Byb21wdFxuICAgICAqL1xuICAgIG5ld1Byb21wdDoge1xuICAgICAgbmFtZTogXCJOZXdQcm9tcHRcIixcbiAgICAgIEk6IFByb21wdCxcbiAgICAgIE86IFByb21wdCxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHByb3RvZmxvdy5Qcm90b2Zsb3dTZXJ2aWNlLlVwbG9hZENvbnRlbnRcbiAgICAgKi9cbiAgICB1cGxvYWRDb250ZW50OiB7XG4gICAgICBuYW1lOiBcIlVwbG9hZENvbnRlbnRcIixcbiAgICAgIEk6IFVwbG9hZENvbnRlbnRSZXF1ZXN0LFxuICAgICAgTzogQ2hhdFJlc3BvbnNlLFxuICAgICAga2luZDogTWV0aG9kS2luZC5TZXJ2ZXJTdHJlYW1pbmcsXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHByb3RvZmxvdy5Qcm90b2Zsb3dTZXJ2aWNlLkluZmVyXG4gICAgICovXG4gICAgaW5mZXI6IHtcbiAgICAgIG5hbWU6IFwiSW5mZXJcIixcbiAgICAgIEk6IEluZmVyUmVxdWVzdCxcbiAgICAgIE86IEluZmVyUmVzcG9uc2UsXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlNlcnZlclN0cmVhbWluZyxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgcHJvdG9mbG93LlByb3RvZmxvd1NlcnZpY2UuQ2hhdFxuICAgICAqL1xuICAgIGNoYXQ6IHtcbiAgICAgIG5hbWU6IFwiQ2hhdFwiLFxuICAgICAgSTogQ2hhdFJlcXVlc3QsXG4gICAgICBPOiBDaGF0UmVzcG9uc2UsXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlNlcnZlclN0cmVhbWluZyxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgcHJvdG9mbG93LlByb3RvZmxvd1NlcnZpY2UuQ29udmVydEZpbGVcbiAgICAgKi9cbiAgICBjb252ZXJ0RmlsZToge1xuICAgICAgbmFtZTogXCJDb252ZXJ0RmlsZVwiLFxuICAgICAgSTogQ29udmVydEZpbGVSZXF1ZXN0LFxuICAgICAgTzogRmlsZVBhdGgsXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyBwcm90b2Zsb3cuUHJvdG9mbG93U2VydmljZS5HZW5lcmF0ZUltYWdlc1xuICAgICAqL1xuICAgIGdlbmVyYXRlSW1hZ2VzOiB7XG4gICAgICBuYW1lOiBcIkdlbmVyYXRlSW1hZ2VzXCIsXG4gICAgICBJOiBHZW5lcmF0ZUltYWdlc1JlcXVlc3QsXG4gICAgICBPOiBHZW5lcmF0ZUltYWdlc1Jlc3BvbnNlLFxuICAgICAga2luZDogTWV0aG9kS2luZC5VbmFyeSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgcHJvdG9mbG93LlByb3RvZmxvd1NlcnZpY2UuQW5hbHl6ZUNvbnZlcnNhdGlvblxuICAgICAqL1xuICAgIGFuYWx5emVDb252ZXJzYXRpb246IHtcbiAgICAgIG5hbWU6IFwiQW5hbHl6ZUNvbnZlcnNhdGlvblwiLFxuICAgICAgSTogQW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3QsXG4gICAgICBPOiBBbmFseXplQ29udmVyc2F0aW9uUmVzcG9uc2UsXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gIH1cbn0gYXMgY29uc3Q7XG5cbiIsICIvLyBAZ2VuZXJhdGVkIGJ5IHByb3RvYy1nZW4tY29ubmVjdC1lcyB2MS4zLjAgd2l0aCBwYXJhbWV0ZXIgXCJ0YXJnZXQ9dHNcIlxuLy8gQGdlbmVyYXRlZCBmcm9tIGZpbGUgY29udGVudC9jb250ZW50LnByb3RvIChwYWNrYWdlIGNvbnRlbnQsIHN5bnRheCBwcm90bzMpXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxuaW1wb3J0IHsgQ29udGVudCwgQ29udGVudElEcywgQ29udGVudHMsIEdldFNvdXJjZXNSZXF1ZXN0LCBRdWVyeSwgUmVsYXRlUmVxdWVzdCwgUmVzdWx0cywgU2V0VGFnc1JlcXVlc3QsIFNvdXJjZXMsIFRhZ1JlcXVlc3QsIFRhZ3MsIFR5cGVzUmVzcG9uc2UsIFZvaWNlSW5wdXRSZXF1ZXN0LCBWb2ljZUlucHV0UmVzcG9uc2UgfSBmcm9tIFwiLi9jb250ZW50X3BiLmpzXCI7XG5pbXBvcnQgeyBFbXB0eSwgTWV0aG9kS2luZCB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gc2VydmljZSBjb250ZW50LkNvbnRlbnRTZXJ2aWNlXG4gKi9cbmV4cG9ydCBjb25zdCBDb250ZW50U2VydmljZSA9IHtcbiAgdHlwZU5hbWU6IFwiY29udGVudC5Db250ZW50U2VydmljZVwiLFxuICBtZXRob2RzOiB7XG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyBjb250ZW50LkNvbnRlbnRTZXJ2aWNlLlNhdmVcbiAgICAgKi9cbiAgICBzYXZlOiB7XG4gICAgICBuYW1lOiBcIlNhdmVcIixcbiAgICAgIEk6IENvbnRlbnRzLFxuICAgICAgTzogQ29udGVudElEcyxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIGNvbnRlbnQuQ29udGVudFNlcnZpY2UuU2VhcmNoXG4gICAgICovXG4gICAgc2VhcmNoOiB7XG4gICAgICBuYW1lOiBcIlNlYXJjaFwiLFxuICAgICAgSTogUXVlcnksXG4gICAgICBPOiBSZXN1bHRzLFxuICAgICAga2luZDogTWV0aG9kS2luZC5VbmFyeSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgY29udGVudC5Db250ZW50U2VydmljZS5SZWxhdGVcbiAgICAgKi9cbiAgICByZWxhdGU6IHtcbiAgICAgIG5hbWU6IFwiUmVsYXRlXCIsXG4gICAgICBJOiBSZWxhdGVSZXF1ZXN0LFxuICAgICAgTzogRW1wdHksXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyBjb250ZW50LkNvbnRlbnRTZXJ2aWNlLkFuYWx5emVcbiAgICAgKi9cbiAgICBhbmFseXplOiB7XG4gICAgICBuYW1lOiBcIkFuYWx5emVcIixcbiAgICAgIEk6IENvbnRlbnQsXG4gICAgICBPOiBDb250ZW50cyxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIGNvbnRlbnQuQ29udGVudFNlcnZpY2UuRGVsZXRlXG4gICAgICovXG4gICAgZGVsZXRlOiB7XG4gICAgICBuYW1lOiBcIkRlbGV0ZVwiLFxuICAgICAgSTogQ29udGVudElEcyxcbiAgICAgIE86IENvbnRlbnRJRHMsXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyBjb250ZW50LkNvbnRlbnRTZXJ2aWNlLkdldFRhZ3NcbiAgICAgKi9cbiAgICBnZXRUYWdzOiB7XG4gICAgICBuYW1lOiBcIkdldFRhZ3NcIixcbiAgICAgIEk6IFRhZ1JlcXVlc3QsXG4gICAgICBPOiBUYWdzLFxuICAgICAga2luZDogTWV0aG9kS2luZC5VbmFyeSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgY29udGVudC5Db250ZW50U2VydmljZS5TZXRUYWdzXG4gICAgICovXG4gICAgc2V0VGFnczoge1xuICAgICAgbmFtZTogXCJTZXRUYWdzXCIsXG4gICAgICBJOiBTZXRUYWdzUmVxdWVzdCxcbiAgICAgIE86IEVtcHR5LFxuICAgICAga2luZDogTWV0aG9kS2luZC5VbmFyeSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgY29udGVudC5Db250ZW50U2VydmljZS5QdWJsaXNoXG4gICAgICovXG4gICAgcHVibGlzaDoge1xuICAgICAgbmFtZTogXCJQdWJsaXNoXCIsXG4gICAgICBJOiBDb250ZW50SURzLFxuICAgICAgTzogQ29udGVudElEcyxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIGNvbnRlbnQuQ29udGVudFNlcnZpY2UuR2V0U291cmNlc1xuICAgICAqL1xuICAgIGdldFNvdXJjZXM6IHtcbiAgICAgIG5hbWU6IFwiR2V0U291cmNlc1wiLFxuICAgICAgSTogR2V0U291cmNlc1JlcXVlc3QsXG4gICAgICBPOiBTb3VyY2VzLFxuICAgICAga2luZDogTWV0aG9kS2luZC5VbmFyeSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgY29udGVudC5Db250ZW50U2VydmljZS5UeXBlc1xuICAgICAqL1xuICAgIHR5cGVzOiB7XG4gICAgICBuYW1lOiBcIlR5cGVzXCIsXG4gICAgICBJOiBFbXB0eSxcbiAgICAgIE86IFR5cGVzUmVzcG9uc2UsXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyBjb250ZW50LkNvbnRlbnRTZXJ2aWNlLlZvaWNlSW5wdXRcbiAgICAgKi9cbiAgICB2b2ljZUlucHV0OiB7XG4gICAgICBuYW1lOiBcIlZvaWNlSW5wdXRcIixcbiAgICAgIEk6IFZvaWNlSW5wdXRSZXF1ZXN0LFxuICAgICAgTzogVm9pY2VJbnB1dFJlc3BvbnNlLFxuICAgICAga2luZDogTWV0aG9kS2luZC5TZXJ2ZXJTdHJlYW1pbmcsXG4gICAgfSxcbiAgfVxufSBhcyBjb25zdDtcblxuIiwgIi8vIEBnZW5lcmF0ZWQgYnkgcHJvdG9jLWdlbi1jb25uZWN0LWVzIHYxLjMuMCB3aXRoIHBhcmFtZXRlciBcInRhcmdldD10c1wiXG4vLyBAZ2VuZXJhdGVkIGZyb20gZmlsZSB1c2VyL3VzZXIucHJvdG8gKHBhY2thZ2UgdXNlciwgc3ludGF4IHByb3RvMylcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG5pbXBvcnQgeyBDb25maWcsIEdyb3VwLCBHcm91cElELCBHcm91cEluZm9SZXF1ZXN0LCBHcm91cEludml0ZSwgR3JvdXBzLCBTaGFyZVJlcXVlc3QsIFVzZXIsIFZlcmlmeVVzZXJSZXF1ZXN0IH0gZnJvbSBcIi4vdXNlcl9wYi5qc1wiO1xuaW1wb3J0IHsgRW1wdHksIE1ldGhvZEtpbmQgfSBmcm9tIFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmXCI7XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIHNlcnZpY2UgdXNlci5Vc2VyU2VydmljZVxuICovXG5leHBvcnQgY29uc3QgVXNlclNlcnZpY2UgPSB7XG4gIHR5cGVOYW1lOiBcInVzZXIuVXNlclNlcnZpY2VcIixcbiAgbWV0aG9kczoge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgdXNlci5Vc2VyU2VydmljZS5SZWdpc3RlclxuICAgICAqL1xuICAgIHJlZ2lzdGVyOiB7XG4gICAgICBuYW1lOiBcIlJlZ2lzdGVyXCIsXG4gICAgICBJOiBVc2VyLFxuICAgICAgTzogVXNlcixcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHVzZXIuVXNlclNlcnZpY2UuTG9naW5cbiAgICAgKi9cbiAgICBsb2dpbjoge1xuICAgICAgbmFtZTogXCJMb2dpblwiLFxuICAgICAgSTogVXNlcixcbiAgICAgIE86IFVzZXIsXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyB1c2VyLlVzZXJTZXJ2aWNlLkxvZ291dFxuICAgICAqL1xuICAgIGxvZ291dDoge1xuICAgICAgbmFtZTogXCJMb2dvdXRcIixcbiAgICAgIEk6IEVtcHR5LFxuICAgICAgTzogRW1wdHksXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyB1c2VyLlVzZXJTZXJ2aWNlLlJlc2V0UGFzc3dvcmRcbiAgICAgKi9cbiAgICByZXNldFBhc3N3b3JkOiB7XG4gICAgICBuYW1lOiBcIlJlc2V0UGFzc3dvcmRcIixcbiAgICAgIEk6IFVzZXIsXG4gICAgICBPOiBFbXB0eSxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHVzZXIuVXNlclNlcnZpY2UuVmVyaWZ5VXNlclxuICAgICAqL1xuICAgIHZlcmlmeVVzZXI6IHtcbiAgICAgIG5hbWU6IFwiVmVyaWZ5VXNlclwiLFxuICAgICAgSTogVmVyaWZ5VXNlclJlcXVlc3QsXG4gICAgICBPOiBFbXB0eSxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHVzZXIuVXNlclNlcnZpY2UuVXBkYXRlQ29uZmlnXG4gICAgICovXG4gICAgdXBkYXRlQ29uZmlnOiB7XG4gICAgICBuYW1lOiBcIlVwZGF0ZUNvbmZpZ1wiLFxuICAgICAgSTogQ29uZmlnLFxuICAgICAgTzogRW1wdHksXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyB1c2VyLlVzZXJTZXJ2aWNlLkNyZWF0ZUdyb3VwSW52aXRlXG4gICAgICovXG4gICAgY3JlYXRlR3JvdXBJbnZpdGU6IHtcbiAgICAgIG5hbWU6IFwiQ3JlYXRlR3JvdXBJbnZpdGVcIixcbiAgICAgIEk6IEdyb3VwSUQsXG4gICAgICBPOiBHcm91cEludml0ZSxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHVzZXIuVXNlclNlcnZpY2UuSm9pbkdyb3VwXG4gICAgICovXG4gICAgam9pbkdyb3VwOiB7XG4gICAgICBuYW1lOiBcIkpvaW5Hcm91cFwiLFxuICAgICAgSTogR3JvdXBJbnZpdGUsXG4gICAgICBPOiBHcm91cCxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHVzZXIuVXNlclNlcnZpY2UuR3JvdXBJbmZvXG4gICAgICovXG4gICAgZ3JvdXBJbmZvOiB7XG4gICAgICBuYW1lOiBcIkdyb3VwSW5mb1wiLFxuICAgICAgSTogR3JvdXBJbmZvUmVxdWVzdCxcbiAgICAgIE86IEdyb3VwLFxuICAgICAga2luZDogTWV0aG9kS2luZC5VbmFyeSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgdXNlci5Vc2VyU2VydmljZS5DcmVhdGVHcm91cFxuICAgICAqL1xuICAgIGNyZWF0ZUdyb3VwOiB7XG4gICAgICBuYW1lOiBcIkNyZWF0ZUdyb3VwXCIsXG4gICAgICBJOiBHcm91cCxcbiAgICAgIE86IEdyb3VwLFxuICAgICAga2luZDogTWV0aG9kS2luZC5VbmFyeSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgdXNlci5Vc2VyU2VydmljZS5HZXRHcm91cHNcbiAgICAgKi9cbiAgICBnZXRHcm91cHM6IHtcbiAgICAgIG5hbWU6IFwiR2V0R3JvdXBzXCIsXG4gICAgICBJOiBFbXB0eSxcbiAgICAgIE86IEdyb3VwcyxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHVzZXIuVXNlclNlcnZpY2UuRGVsZXRlR3JvdXBcbiAgICAgKi9cbiAgICBkZWxldGVHcm91cDoge1xuICAgICAgbmFtZTogXCJEZWxldGVHcm91cFwiLFxuICAgICAgSTogR3JvdXAsXG4gICAgICBPOiBFbXB0eSxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuVW5hcnksXG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIHVzZXIuVXNlclNlcnZpY2UuU2hhcmVcbiAgICAgKi9cbiAgICBzaGFyZToge1xuICAgICAgbmFtZTogXCJTaGFyZVwiLFxuICAgICAgSTogU2hhcmVSZXF1ZXN0LFxuICAgICAgTzogRW1wdHksXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gIH1cbn0gYXMgY29uc3Q7XG5cbiIsICIvLyBAZ2VuZXJhdGVkIGJ5IHByb3RvYy1nZW4tZXMgdjEuNi4wIHdpdGggcGFyYW1ldGVyIFwidGFyZ2V0PXRzXCJcbi8vIEBnZW5lcmF0ZWQgZnJvbSBmaWxlIGNoYXQvY2hhdC5wcm90byAocGFja2FnZSBjaGF0LCBzeW50YXggcHJvdG8zKVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbmltcG9ydCB0eXBlIHsgQmluYXJ5UmVhZE9wdGlvbnMsIEZpZWxkTGlzdCwgSnNvblJlYWRPcHRpb25zLCBKc29uVmFsdWUsIFBhcnRpYWxNZXNzYWdlLCBQbGFpbk1lc3NhZ2UgfSBmcm9tIFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmXCI7XG5pbXBvcnQgeyBNZXNzYWdlIGFzIE1lc3NhZ2UkMSwgcHJvdG8zLCBwcm90b0ludDY0IH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNoYXQuQmFuVXNlclJlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIEJhblVzZXJSZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZSQxPEJhblVzZXJSZXF1ZXN0PiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyB1c2VyID0gMTtcbiAgICovXG4gIHVzZXIgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxCYW5Vc2VyUmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY2hhdC5CYW5Vc2VyUmVxdWVzdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwidXNlclwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBCYW5Vc2VyUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBCYW5Vc2VyUmVxdWVzdCgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQmFuVXNlclJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgQmFuVXNlclJlcXVlc3QoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEJhblVzZXJSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEJhblVzZXJSZXF1ZXN0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IEJhblVzZXJSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPEJhblVzZXJSZXF1ZXN0PiB8IHVuZGVmaW5lZCwgYjogQmFuVXNlclJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8QmFuVXNlclJlcXVlc3Q+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhCYW5Vc2VyUmVxdWVzdCwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjaGF0LkJhblVzZXJSZXNwb25zZVxuICovXG5leHBvcnQgY2xhc3MgQmFuVXNlclJlc3BvbnNlIGV4dGVuZHMgTWVzc2FnZSQxPEJhblVzZXJSZXNwb25zZT4ge1xuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8QmFuVXNlclJlc3BvbnNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjaGF0LkJhblVzZXJSZXNwb25zZVwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogQmFuVXNlclJlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IEJhblVzZXJSZXNwb25zZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQmFuVXNlclJlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IEJhblVzZXJSZXNwb25zZSgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogQmFuVXNlclJlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IEJhblVzZXJSZXNwb25zZSgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBCYW5Vc2VyUmVzcG9uc2UgfCBQbGFpbk1lc3NhZ2U8QmFuVXNlclJlc3BvbnNlPiB8IHVuZGVmaW5lZCwgYjogQmFuVXNlclJlc3BvbnNlIHwgUGxhaW5NZXNzYWdlPEJhblVzZXJSZXNwb25zZT4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKEJhblVzZXJSZXNwb25zZSwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjaGF0LlNlbmRNZXNzYWdlUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgU2VuZE1lc3NhZ2VSZXF1ZXN0IGV4dGVuZHMgTWVzc2FnZSQxPFNlbmRNZXNzYWdlUmVxdWVzdD4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgbWVzc2FnZSA9IDI7XG4gICAqL1xuICBtZXNzYWdlID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8U2VuZE1lc3NhZ2VSZXF1ZXN0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjaGF0LlNlbmRNZXNzYWdlUmVxdWVzdFwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDIsIG5hbWU6IFwibWVzc2FnZVwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBTZW5kTWVzc2FnZVJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgU2VuZE1lc3NhZ2VSZXF1ZXN0KCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTZW5kTWVzc2FnZVJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgU2VuZE1lc3NhZ2VSZXF1ZXN0KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTZW5kTWVzc2FnZVJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgU2VuZE1lc3NhZ2VSZXF1ZXN0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFNlbmRNZXNzYWdlUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxTZW5kTWVzc2FnZVJlcXVlc3Q+IHwgdW5kZWZpbmVkLCBiOiBTZW5kTWVzc2FnZVJlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8U2VuZE1lc3NhZ2VSZXF1ZXN0PiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoU2VuZE1lc3NhZ2VSZXF1ZXN0LCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGNoYXQuU2VuZE1lc3NhZ2VSZXNwb25zZVxuICovXG5leHBvcnQgY2xhc3MgU2VuZE1lc3NhZ2VSZXNwb25zZSBleHRlbmRzIE1lc3NhZ2UkMTxTZW5kTWVzc2FnZVJlc3BvbnNlPiB7XG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxTZW5kTWVzc2FnZVJlc3BvbnNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJjaGF0LlNlbmRNZXNzYWdlUmVzcG9uc2VcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFNlbmRNZXNzYWdlUmVzcG9uc2Uge1xuICAgIHJldHVybiBuZXcgU2VuZE1lc3NhZ2VSZXNwb25zZSgpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogU2VuZE1lc3NhZ2VSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBTZW5kTWVzc2FnZVJlc3BvbnNlKCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBTZW5kTWVzc2FnZVJlc3BvbnNlIHtcbiAgICByZXR1cm4gbmV3IFNlbmRNZXNzYWdlUmVzcG9uc2UoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogU2VuZE1lc3NhZ2VSZXNwb25zZSB8IFBsYWluTWVzc2FnZTxTZW5kTWVzc2FnZVJlc3BvbnNlPiB8IHVuZGVmaW5lZCwgYjogU2VuZE1lc3NhZ2VSZXNwb25zZSB8IFBsYWluTWVzc2FnZTxTZW5kTWVzc2FnZVJlc3BvbnNlPiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoU2VuZE1lc3NhZ2VSZXNwb25zZSwgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBjaGF0LlJlY2VpdmVNZXNzYWdlc1JlcXVlc3RcbiAqL1xuZXhwb3J0IGNsYXNzIFJlY2VpdmVNZXNzYWdlc1JlcXVlc3QgZXh0ZW5kcyBNZXNzYWdlJDE8UmVjZWl2ZU1lc3NhZ2VzUmVxdWVzdD4ge1xuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8UmVjZWl2ZU1lc3NhZ2VzUmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY2hhdC5SZWNlaXZlTWVzc2FnZXNSZXF1ZXN0XCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gIF0pO1xuXG4gIHN0YXRpYyBmcm9tQmluYXJ5KGJ5dGVzOiBVaW50OEFycmF5LCBvcHRpb25zPzogUGFydGlhbDxCaW5hcnlSZWFkT3B0aW9ucz4pOiBSZWNlaXZlTWVzc2FnZXNSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IFJlY2VpdmVNZXNzYWdlc1JlcXVlc3QoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFJlY2VpdmVNZXNzYWdlc1JlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgUmVjZWl2ZU1lc3NhZ2VzUmVxdWVzdCgpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogUmVjZWl2ZU1lc3NhZ2VzUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBSZWNlaXZlTWVzc2FnZXNSZXF1ZXN0KCkuZnJvbUpzb25TdHJpbmcoanNvblN0cmluZywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZXF1YWxzKGE6IFJlY2VpdmVNZXNzYWdlc1JlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8UmVjZWl2ZU1lc3NhZ2VzUmVxdWVzdD4gfCB1bmRlZmluZWQsIGI6IFJlY2VpdmVNZXNzYWdlc1JlcXVlc3QgfCBQbGFpbk1lc3NhZ2U8UmVjZWl2ZU1lc3NhZ2VzUmVxdWVzdD4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFJlY2VpdmVNZXNzYWdlc1JlcXVlc3QsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgY2hhdC5NZXNzYWdlXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNzYWdlIGV4dGVuZHMgTWVzc2FnZSQxPE1lc3NhZ2U+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHVzZXIgPSAxO1xuICAgKi9cbiAgdXNlciA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHRleHQgPSAyO1xuICAgKi9cbiAgdGV4dCA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogaW50NjQgdGltZXN0YW1wID0gMztcbiAgICovXG4gIHRpbWVzdGFtcCA9IHByb3RvSW50NjQuemVybztcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8TWVzc2FnZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiY2hhdC5NZXNzYWdlXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJ1c2VyXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAyLCBuYW1lOiBcInRleHRcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDMsIG5hbWU6IFwidGltZXN0YW1wXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDMgLyogU2NhbGFyVHlwZS5JTlQ2NCAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogTWVzc2FnZSB7XG4gICAgcmV0dXJuIG5ldyBNZXNzYWdlKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBNZXNzYWdlIHtcbiAgICByZXR1cm4gbmV3IE1lc3NhZ2UoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IE1lc3NhZ2Uge1xuICAgIHJldHVybiBuZXcgTWVzc2FnZSgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBNZXNzYWdlIHwgUGxhaW5NZXNzYWdlPE1lc3NhZ2U+IHwgdW5kZWZpbmVkLCBiOiBNZXNzYWdlIHwgUGxhaW5NZXNzYWdlPE1lc3NhZ2U+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhNZXNzYWdlLCBhLCBiKTtcbiAgfVxufVxuXG4iLCAiLy8gQGdlbmVyYXRlZCBieSBwcm90b2MtZ2VuLWNvbm5lY3QtZXMgdjEuMy4wIHdpdGggcGFyYW1ldGVyIFwidGFyZ2V0PXRzXCJcbi8vIEBnZW5lcmF0ZWQgZnJvbSBmaWxlIGNoYXQvY2hhdC5wcm90byAocGFja2FnZSBjaGF0LCBzeW50YXggcHJvdG8zKVxuLyogZXNsaW50LWRpc2FibGUgKi9cbi8vIEB0cy1ub2NoZWNrXG5cbmltcG9ydCB7IEJhblVzZXJSZXF1ZXN0LCBCYW5Vc2VyUmVzcG9uc2UsIE1lc3NhZ2UsIFJlY2VpdmVNZXNzYWdlc1JlcXVlc3QsIFNlbmRNZXNzYWdlUmVxdWVzdCwgU2VuZE1lc3NhZ2VSZXNwb25zZSB9IGZyb20gXCIuL2NoYXRfcGIuanNcIjtcbmltcG9ydCB7IE1ldGhvZEtpbmQgfSBmcm9tIFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmXCI7XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIHNlcnZpY2UgY2hhdC5DaGF0U2VydmljZVxuICovXG5leHBvcnQgY29uc3QgQ2hhdFNlcnZpY2UgPSB7XG4gIHR5cGVOYW1lOiBcImNoYXQuQ2hhdFNlcnZpY2VcIixcbiAgbWV0aG9kczoge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgY2hhdC5DaGF0U2VydmljZS5TZW5kTWVzc2FnZVxuICAgICAqL1xuICAgIHNlbmRNZXNzYWdlOiB7XG4gICAgICBuYW1lOiBcIlNlbmRNZXNzYWdlXCIsXG4gICAgICBJOiBTZW5kTWVzc2FnZVJlcXVlc3QsXG4gICAgICBPOiBTZW5kTWVzc2FnZVJlc3BvbnNlLFxuICAgICAga2luZDogTWV0aG9kS2luZC5VbmFyeSxcbiAgICB9LFxuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBycGMgY2hhdC5DaGF0U2VydmljZS5SZWNlaXZlTWVzc2FnZXNcbiAgICAgKi9cbiAgICByZWNlaXZlTWVzc2FnZXM6IHtcbiAgICAgIG5hbWU6IFwiUmVjZWl2ZU1lc3NhZ2VzXCIsXG4gICAgICBJOiBSZWNlaXZlTWVzc2FnZXNSZXF1ZXN0LFxuICAgICAgTzogTWVzc2FnZSxcbiAgICAgIGtpbmQ6IE1ldGhvZEtpbmQuU2VydmVyU3RyZWFtaW5nLFxuICAgIH0sXG4gICAgLyoqXG4gICAgICogQGdlbmVyYXRlZCBmcm9tIHJwYyBjaGF0LkNoYXRTZXJ2aWNlLkJhblVzZXJcbiAgICAgKi9cbiAgICBiYW5Vc2VyOiB7XG4gICAgICBuYW1lOiBcIkJhblVzZXJcIixcbiAgICAgIEk6IEJhblVzZXJSZXF1ZXN0LFxuICAgICAgTzogQmFuVXNlclJlc3BvbnNlLFxuICAgICAga2luZDogTWV0aG9kS2luZC5VbmFyeSxcbiAgICB9LFxuICB9XG59IGFzIGNvbnN0O1xuXG4iLCAiLy8gQGdlbmVyYXRlZCBieSBwcm90b2MtZ2VuLWVzIHYxLjYuMCB3aXRoIHBhcmFtZXRlciBcInRhcmdldD10c1wiXG4vLyBAZ2VuZXJhdGVkIGZyb20gZmlsZSBldmVudC9ldmVudC5wcm90byAocGFja2FnZSBldmVudCwgc3ludGF4IHByb3RvMylcbi8qIGVzbGludC1kaXNhYmxlICovXG4vLyBAdHMtbm9jaGVja1xuXG5pbXBvcnQgdHlwZSB7IEJpbmFyeVJlYWRPcHRpb25zLCBGaWVsZExpc3QsIEpzb25SZWFkT3B0aW9ucywgSnNvblZhbHVlLCBQYXJ0aWFsTWVzc2FnZSwgUGxhaW5NZXNzYWdlIH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuaW1wb3J0IHsgTWVzc2FnZSwgcHJvdG8zIH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGV2ZW50Lk1ldHJpY1xuICovXG5leHBvcnQgY2xhc3MgTWV0cmljIGV4dGVuZHMgTWVzc2FnZTxNZXRyaWM+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBvbmVvZiBldmVudC5NZXRyaWMudHlwZVxuICAgKi9cbiAgdHlwZToge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZXZlbnQuSFRUUFJlcXVlc3QgaHR0cCA9IDE7XG4gICAgICovXG4gICAgdmFsdWU6IEhUVFBSZXF1ZXN0O1xuICAgIGNhc2U6IFwiaHR0cFwiO1xuICB9IHwge1xuICAgIC8qKlxuICAgICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogZXZlbnQuUlJXZWIgcnJ3ZWIgPSAyO1xuICAgICAqL1xuICAgIHZhbHVlOiBSUldlYjtcbiAgICBjYXNlOiBcInJyd2ViXCI7XG4gIH0gfCB7IGNhc2U6IHVuZGVmaW5lZDsgdmFsdWU/OiB1bmRlZmluZWQgfSA9IHsgY2FzZTogdW5kZWZpbmVkIH07XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPE1ldHJpYz4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiZXZlbnQuTWV0cmljXCI7XG4gIHN0YXRpYyByZWFkb25seSBmaWVsZHM6IEZpZWxkTGlzdCA9IHByb3RvMy51dGlsLm5ld0ZpZWxkTGlzdCgoKSA9PiBbXG4gICAgeyBubzogMSwgbmFtZTogXCJodHRwXCIsIGtpbmQ6IFwibWVzc2FnZVwiLCBUOiBIVFRQUmVxdWVzdCwgb25lb2Y6IFwidHlwZVwiIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJycndlYlwiLCBraW5kOiBcIm1lc3NhZ2VcIiwgVDogUlJXZWIsIG9uZW9mOiBcInR5cGVcIiB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogTWV0cmljIHtcbiAgICByZXR1cm4gbmV3IE1ldHJpYygpLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uKGpzb25WYWx1ZTogSnNvblZhbHVlLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogTWV0cmljIHtcbiAgICByZXR1cm4gbmV3IE1ldHJpYygpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogTWV0cmljIHtcbiAgICByZXR1cm4gbmV3IE1ldHJpYygpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBNZXRyaWMgfCBQbGFpbk1lc3NhZ2U8TWV0cmljPiB8IHVuZGVmaW5lZCwgYjogTWV0cmljIHwgUGxhaW5NZXNzYWdlPE1ldHJpYz4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKE1ldHJpYywgYSwgYik7XG4gIH1cbn1cblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gbWVzc2FnZSBldmVudC5IVFRQUmVxdWVzdFxuICovXG5leHBvcnQgY2xhc3MgSFRUUFJlcXVlc3QgZXh0ZW5kcyBNZXNzYWdlPEhUVFBSZXF1ZXN0PiB7XG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyBtZXRob2QgPSAxO1xuICAgKi9cbiAgbWV0aG9kID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcGF0aCA9IDI7XG4gICAqL1xuICBwYXRoID0gXCJcIjtcblxuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgcXVlcnkgPSAzO1xuICAgKi9cbiAgcXVlcnkgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IG1hcDxzdHJpbmcsIHN0cmluZz4gaGVhZGVycyA9IDQ7XG4gICAqL1xuICBoZWFkZXJzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGhvc3QgPSA1O1xuICAgKi9cbiAgaG9zdCA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHJlbW90ZUFkZHIgPSA2O1xuICAgKi9cbiAgcmVtb3RlQWRkciA9IFwiXCI7XG5cbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIHVzZXJBZ2VudCA9IDc7XG4gICAqL1xuICB1c2VyQWdlbnQgPSBcIlwiO1xuXG4gIC8qKlxuICAgKiBAZ2VuZXJhdGVkIGZyb20gZmllbGQ6IHN0cmluZyByZWZlcmVyID0gODtcbiAgICovXG4gIHJlZmVyZXIgPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE/OiBQYXJ0aWFsTWVzc2FnZTxIVFRQUmVxdWVzdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHByb3RvMy51dGlsLmluaXRQYXJ0aWFsKGRhdGEsIHRoaXMpO1xuICB9XG5cbiAgc3RhdGljIHJlYWRvbmx5IHJ1bnRpbWU6IHR5cGVvZiBwcm90bzMgPSBwcm90bzM7XG4gIHN0YXRpYyByZWFkb25seSB0eXBlTmFtZSA9IFwiZXZlbnQuSFRUUFJlcXVlc3RcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcIm1ldGhvZFwiLCBraW5kOiBcInNjYWxhclwiLCBUOiA5IC8qIFNjYWxhclR5cGUuU1RSSU5HICovIH0sXG4gICAgeyBubzogMiwgbmFtZTogXCJwYXRoXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiAzLCBuYW1lOiBcInF1ZXJ5XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA0LCBuYW1lOiBcImhlYWRlcnNcIiwga2luZDogXCJtYXBcIiwgSzogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLywgVjoge2tpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi99IH0sXG4gICAgeyBubzogNSwgbmFtZTogXCJob3N0XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA2LCBuYW1lOiBcInJlbW90ZUFkZHJcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICAgIHsgbm86IDcsIG5hbWU6IFwidXNlckFnZW50XCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgICB7IG5vOiA4LCBuYW1lOiBcInJlZmVyZXJcIiwga2luZDogXCJzY2FsYXJcIiwgVDogOSAvKiBTY2FsYXJUeXBlLlNUUklORyAqLyB9LFxuICBdKTtcblxuICBzdGF0aWMgZnJvbUJpbmFyeShieXRlczogVWludDhBcnJheSwgb3B0aW9ucz86IFBhcnRpYWw8QmluYXJ5UmVhZE9wdGlvbnM+KTogSFRUUFJlcXVlc3Qge1xuICAgIHJldHVybiBuZXcgSFRUUFJlcXVlc3QoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IEhUVFBSZXF1ZXN0IHtcbiAgICByZXR1cm4gbmV3IEhUVFBSZXF1ZXN0KCkuZnJvbUpzb24oanNvblZhbHVlLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvblN0cmluZyhqc29uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBIVFRQUmVxdWVzdCB7XG4gICAgcmV0dXJuIG5ldyBIVFRQUmVxdWVzdCgpLmZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmcsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGVxdWFscyhhOiBIVFRQUmVxdWVzdCB8IFBsYWluTWVzc2FnZTxIVFRQUmVxdWVzdD4gfCB1bmRlZmluZWQsIGI6IEhUVFBSZXF1ZXN0IHwgUGxhaW5NZXNzYWdlPEhUVFBSZXF1ZXN0PiB8IHVuZGVmaW5lZCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwcm90bzMudXRpbC5lcXVhbHMoSFRUUFJlcXVlc3QsIGEsIGIpO1xuICB9XG59XG5cbi8qKlxuICogQGdlbmVyYXRlZCBmcm9tIG1lc3NhZ2UgZXZlbnQuUlJXZWJcbiAqL1xuZXhwb3J0IGNsYXNzIFJSV2ViIGV4dGVuZHMgTWVzc2FnZTxSUldlYj4ge1xuICAvKipcbiAgICogQGdlbmVyYXRlZCBmcm9tIGZpZWxkOiBzdHJpbmcgZXZlbnRzID0gMTtcbiAgICovXG4gIGV2ZW50cyA9IFwiXCI7XG5cbiAgY29uc3RydWN0b3IoZGF0YT86IFBhcnRpYWxNZXNzYWdlPFJSV2ViPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJldmVudC5SUldlYlwiO1xuICBzdGF0aWMgcmVhZG9ubHkgZmllbGRzOiBGaWVsZExpc3QgPSBwcm90bzMudXRpbC5uZXdGaWVsZExpc3QoKCkgPT4gW1xuICAgIHsgbm86IDEsIG5hbWU6IFwiZXZlbnRzXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFJSV2ViIHtcbiAgICByZXR1cm4gbmV3IFJSV2ViKCkuZnJvbUJpbmFyeShieXRlcywgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb24oanNvblZhbHVlOiBKc29uVmFsdWUsIG9wdGlvbnM/OiBQYXJ0aWFsPEpzb25SZWFkT3B0aW9ucz4pOiBSUldlYiB7XG4gICAgcmV0dXJuIG5ldyBSUldlYigpLmZyb21Kc29uKGpzb25WYWx1ZSwgb3B0aW9ucyk7XG4gIH1cblxuICBzdGF0aWMgZnJvbUpzb25TdHJpbmcoanNvblN0cmluZzogc3RyaW5nLCBvcHRpb25zPzogUGFydGlhbDxKc29uUmVhZE9wdGlvbnM+KTogUlJXZWIge1xuICAgIHJldHVybiBuZXcgUlJXZWIoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogUlJXZWIgfCBQbGFpbk1lc3NhZ2U8UlJXZWI+IHwgdW5kZWZpbmVkLCBiOiBSUldlYiB8IFBsYWluTWVzc2FnZTxSUldlYj4gfCB1bmRlZmluZWQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcHJvdG8zLnV0aWwuZXF1YWxzKFJSV2ViLCBhLCBiKTtcbiAgfVxufVxuXG4vKipcbiAqIEBnZW5lcmF0ZWQgZnJvbSBtZXNzYWdlIGV2ZW50LlNlbmRSZXNwb25zZVxuICovXG5leHBvcnQgY2xhc3MgU2VuZFJlc3BvbnNlIGV4dGVuZHMgTWVzc2FnZTxTZW5kUmVzcG9uc2U+IHtcbiAgLyoqXG4gICAqIEBnZW5lcmF0ZWQgZnJvbSBmaWVsZDogc3RyaW5nIGlkID0gMTtcbiAgICovXG4gIGlkID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcihkYXRhPzogUGFydGlhbE1lc3NhZ2U8U2VuZFJlc3BvbnNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgcHJvdG8zLnV0aWwuaW5pdFBhcnRpYWwoZGF0YSwgdGhpcyk7XG4gIH1cblxuICBzdGF0aWMgcmVhZG9ubHkgcnVudGltZTogdHlwZW9mIHByb3RvMyA9IHByb3RvMztcbiAgc3RhdGljIHJlYWRvbmx5IHR5cGVOYW1lID0gXCJldmVudC5TZW5kUmVzcG9uc2VcIjtcbiAgc3RhdGljIHJlYWRvbmx5IGZpZWxkczogRmllbGRMaXN0ID0gcHJvdG8zLnV0aWwubmV3RmllbGRMaXN0KCgpID0+IFtcbiAgICB7IG5vOiAxLCBuYW1lOiBcImlkXCIsIGtpbmQ6IFwic2NhbGFyXCIsIFQ6IDkgLyogU2NhbGFyVHlwZS5TVFJJTkcgKi8gfSxcbiAgXSk7XG5cbiAgc3RhdGljIGZyb21CaW5hcnkoYnl0ZXM6IFVpbnQ4QXJyYXksIG9wdGlvbnM/OiBQYXJ0aWFsPEJpbmFyeVJlYWRPcHRpb25zPik6IFNlbmRSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBTZW5kUmVzcG9uc2UoKS5mcm9tQmluYXJ5KGJ5dGVzLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBmcm9tSnNvbihqc29uVmFsdWU6IEpzb25WYWx1ZSwgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFNlbmRSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBTZW5kUmVzcG9uc2UoKS5mcm9tSnNvbihqc29uVmFsdWUsIG9wdGlvbnMpO1xuICB9XG5cbiAgc3RhdGljIGZyb21Kc29uU3RyaW5nKGpzb25TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IFBhcnRpYWw8SnNvblJlYWRPcHRpb25zPik6IFNlbmRSZXNwb25zZSB7XG4gICAgcmV0dXJuIG5ldyBTZW5kUmVzcG9uc2UoKS5mcm9tSnNvblN0cmluZyhqc29uU3RyaW5nLCBvcHRpb25zKTtcbiAgfVxuXG4gIHN0YXRpYyBlcXVhbHMoYTogU2VuZFJlc3BvbnNlIHwgUGxhaW5NZXNzYWdlPFNlbmRSZXNwb25zZT4gfCB1bmRlZmluZWQsIGI6IFNlbmRSZXNwb25zZSB8IFBsYWluTWVzc2FnZTxTZW5kUmVzcG9uc2U+IHwgdW5kZWZpbmVkKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHByb3RvMy51dGlsLmVxdWFscyhTZW5kUmVzcG9uc2UsIGEsIGIpO1xuICB9XG59XG5cbiIsICIvLyBAZ2VuZXJhdGVkIGJ5IHByb3RvYy1nZW4tY29ubmVjdC1lcyB2MS4zLjAgd2l0aCBwYXJhbWV0ZXIgXCJ0YXJnZXQ9dHNcIlxuLy8gQGdlbmVyYXRlZCBmcm9tIGZpbGUgZXZlbnQvZXZlbnQucHJvdG8gKHBhY2thZ2UgZXZlbnQsIHN5bnRheCBwcm90bzMpXG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLy8gQHRzLW5vY2hlY2tcblxuaW1wb3J0IHsgTWV0cmljLCBTZW5kUmVzcG9uc2UgfSBmcm9tIFwiLi9ldmVudF9wYi5qc1wiO1xuaW1wb3J0IHsgTWV0aG9kS2luZCB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcblxuLyoqXG4gKiBAZ2VuZXJhdGVkIGZyb20gc2VydmljZSBldmVudC5FdmVudFNlcnZpY2VcbiAqL1xuZXhwb3J0IGNvbnN0IEV2ZW50U2VydmljZSA9IHtcbiAgdHlwZU5hbWU6IFwiZXZlbnQuRXZlbnRTZXJ2aWNlXCIsXG4gIG1ldGhvZHM6IHtcbiAgICAvKipcbiAgICAgKiBAZ2VuZXJhdGVkIGZyb20gcnBjIGV2ZW50LkV2ZW50U2VydmljZS5TZW5kXG4gICAgICovXG4gICAgc2VuZDoge1xuICAgICAgbmFtZTogXCJTZW5kXCIsXG4gICAgICBJOiBNZXRyaWMsXG4gICAgICBPOiBTZW5kUmVzcG9uc2UsXG4gICAgICBraW5kOiBNZXRob2RLaW5kLlVuYXJ5LFxuICAgIH0sXG4gIH1cbn0gYXMgY29uc3Q7XG5cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBDb25uZWN0IHJlcHJlc2VudHMgY2F0ZWdvcmllcyBvZiBlcnJvcnMgYXMgY29kZXMsIGFuZCBlYWNoIGNvZGUgbWFwcyB0byBhXG4gKiBzcGVjaWZpYyBIVFRQIHN0YXR1cyBjb2RlLiBUaGUgY29kZXMgYW5kIHRoZWlyIHNlbWFudGljcyB3ZXJlIGNob3NlbiB0b1xuICogbWF0Y2ggZ1JQQy4gT25seSB0aGUgY29kZXMgYmVsb3cgYXJlIHZhbGlkIFx1MjAxNCB0aGVyZSBhcmUgbm8gdXNlci1kZWZpbmVkXG4gKiBjb2Rlcy5cbiAqXG4gKiBTZWUgdGhlIHNwZWNpZmljYXRpb24gYXQgaHR0cHM6Ly9jb25uZWN0cnBjLmNvbS9kb2NzL3Byb3RvY29sI2Vycm9yLWNvZGVzXG4gKiBmb3IgZGV0YWlscy5cbiAqL1xuZXhwb3J0IHZhciBDb2RlO1xuKGZ1bmN0aW9uIChDb2RlKSB7XG4gICAgLyoqXG4gICAgICogQ2FuY2VsZWQsIHVzdWFsbHkgYmUgdGhlIHVzZXJcbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJDYW5jZWxlZFwiXSA9IDFdID0gXCJDYW5jZWxlZFwiO1xuICAgIC8qKlxuICAgICAqIFVua25vd24gZXJyb3JcbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJVbmtub3duXCJdID0gMl0gPSBcIlVua25vd25cIjtcbiAgICAvKipcbiAgICAgKiBBcmd1bWVudCBpbnZhbGlkIHJlZ2FyZGxlc3Mgb2Ygc3lzdGVtIHN0YXRlXG4gICAgICovXG4gICAgQ29kZVtDb2RlW1wiSW52YWxpZEFyZ3VtZW50XCJdID0gM10gPSBcIkludmFsaWRBcmd1bWVudFwiO1xuICAgIC8qKlxuICAgICAqIE9wZXJhdGlvbiBleHBpcmVkLCBtYXkgb3IgbWF5IG5vdCBoYXZlIGNvbXBsZXRlZC5cbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJEZWFkbGluZUV4Y2VlZGVkXCJdID0gNF0gPSBcIkRlYWRsaW5lRXhjZWVkZWRcIjtcbiAgICAvKipcbiAgICAgKiBFbnRpdHkgbm90IGZvdW5kLlxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIk5vdEZvdW5kXCJdID0gNV0gPSBcIk5vdEZvdW5kXCI7XG4gICAgLyoqXG4gICAgICogRW50aXR5IGFscmVhZHkgZXhpc3RzLlxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIkFscmVhZHlFeGlzdHNcIl0gPSA2XSA9IFwiQWxyZWFkeUV4aXN0c1wiO1xuICAgIC8qKlxuICAgICAqIE9wZXJhdGlvbiBub3QgYXV0aG9yaXplZC5cbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJQZXJtaXNzaW9uRGVuaWVkXCJdID0gN10gPSBcIlBlcm1pc3Npb25EZW5pZWRcIjtcbiAgICAvKipcbiAgICAgKiBRdW90YSBleGhhdXN0ZWQuXG4gICAgICovXG4gICAgQ29kZVtDb2RlW1wiUmVzb3VyY2VFeGhhdXN0ZWRcIl0gPSA4XSA9IFwiUmVzb3VyY2VFeGhhdXN0ZWRcIjtcbiAgICAvKipcbiAgICAgKiBBcmd1bWVudCBpbnZhbGlkIGluIGN1cnJlbnQgc3lzdGVtIHN0YXRlLlxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIkZhaWxlZFByZWNvbmRpdGlvblwiXSA9IDldID0gXCJGYWlsZWRQcmVjb25kaXRpb25cIjtcbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb24gYWJvcnRlZC5cbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJBYm9ydGVkXCJdID0gMTBdID0gXCJBYm9ydGVkXCI7XG4gICAgLyoqXG4gICAgICogT3V0IG9mIGJvdW5kcywgdXNlIGluc3RlYWQgb2YgRmFpbGVkUHJlY29uZGl0aW9uLlxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIk91dE9mUmFuZ2VcIl0gPSAxMV0gPSBcIk91dE9mUmFuZ2VcIjtcbiAgICAvKipcbiAgICAgKiBPcGVyYXRpb24gbm90IGltcGxlbWVudGVkIG9yIGRpc2FibGVkLlxuICAgICAqL1xuICAgIENvZGVbQ29kZVtcIlVuaW1wbGVtZW50ZWRcIl0gPSAxMl0gPSBcIlVuaW1wbGVtZW50ZWRcIjtcbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBlcnJvciwgcmVzZXJ2ZWQgZm9yIFwic2VyaW91cyBlcnJvcnNcIi5cbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJJbnRlcm5hbFwiXSA9IDEzXSA9IFwiSW50ZXJuYWxcIjtcbiAgICAvKipcbiAgICAgKiBVbmF2YWlsYWJsZSwgY2xpZW50IHNob3VsZCBiYWNrIG9mZiBhbmQgcmV0cnkuXG4gICAgICovXG4gICAgQ29kZVtDb2RlW1wiVW5hdmFpbGFibGVcIl0gPSAxNF0gPSBcIlVuYXZhaWxhYmxlXCI7XG4gICAgLyoqXG4gICAgICogVW5yZWNvdmVyYWJsZSBkYXRhIGxvc3Mgb3IgY29ycnVwdGlvbi5cbiAgICAgKi9cbiAgICBDb2RlW0NvZGVbXCJEYXRhTG9zc1wiXSA9IDE1XSA9IFwiRGF0YUxvc3NcIjtcbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0IGlzbid0IGF1dGhlbnRpY2F0ZWQuXG4gICAgICovXG4gICAgQ29kZVtDb2RlW1wiVW5hdXRoZW50aWNhdGVkXCJdID0gMTZdID0gXCJVbmF1dGhlbnRpY2F0ZWRcIjtcbn0pKENvZGUgfHwgKENvZGUgPSB7fSkpO1xuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBDb2RlIH0gZnJvbSBcIi4uL2NvZGUuanNcIjtcbi8qKlxuICogY29kZVRvU3RyaW5nIHJldHVybnMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIENvZGUuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2RlVG9TdHJpbmcodmFsdWUpIHtcbiAgICBjb25zdCBuYW1lID0gQ29kZVt2YWx1ZV07XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIHJldHVybiAobmFtZVswXS50b0xvd2VyQ2FzZSgpICtcbiAgICAgICAgbmFtZS5zdWJzdHJpbmcoMSkucmVwbGFjZSgvW0EtWl0vZywgKGMpID0+IFwiX1wiICsgYy50b0xvd2VyQ2FzZSgpKSk7XG59XG5sZXQgc3RyaW5nVG9Db2RlO1xuLyoqXG4gKiBjb2RlRnJvbVN0cmluZyBwYXJzZXMgdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiBhIENvZGUgaW4gc25ha2VfY2FzZS5cbiAqIEZvciBleGFtcGxlLCB0aGUgc3RyaW5nIFwicGVybWlzc2lvbl9kZW5pZWRcIiBwYXJzZXMgaW50byBDb2RlLlBlcm1pc3Npb25EZW5pZWQuXG4gKlxuICogSWYgdGhlIGdpdmVuIHN0cmluZyBjYW5ub3QgYmUgcGFyc2VkLCB0aGUgZnVuY3Rpb24gcmV0dXJucyB1bmRlZmluZWQuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2RlRnJvbVN0cmluZyh2YWx1ZSkge1xuICAgIGlmICghc3RyaW5nVG9Db2RlKSB7XG4gICAgICAgIHN0cmluZ1RvQ29kZSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIE9iamVjdC52YWx1ZXMoQ29kZSkpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyaW5nVG9Db2RlW2NvZGVUb1N0cmluZyh2YWx1ZSldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0cmluZ1RvQ29kZVt2YWx1ZV07XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IENvZGUgfSBmcm9tIFwiLi9jb2RlLmpzXCI7XG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuaW1wb3J0IHsgY29kZVRvU3RyaW5nIH0gZnJvbSBcIi4vcHJvdG9jb2wtY29ubmVjdC9jb2RlLXN0cmluZy5qc1wiO1xuLyoqXG4gKiBDb25uZWN0RXJyb3IgY2FwdHVyZXMgZm91ciBwaWVjZXMgb2YgaW5mb3JtYXRpb246IGEgQ29kZSwgYW4gZXJyb3JcbiAqIG1lc3NhZ2UsIGFuIG9wdGlvbmFsIGNhdXNlIG9mIHRoZSBlcnJvciwgYW5kIGFuIG9wdGlvbmFsIGNvbGxlY3Rpb24gb2ZcbiAqIGFyYml0cmFyeSBQcm90b2J1ZiBtZXNzYWdlcyBjYWxsZWQgIFwiZGV0YWlsc1wiLlxuICpcbiAqIEJlY2F1c2UgZGV2ZWxvcGVyIHRvb2xzIHR5cGljYWxseSBzaG93IGp1c3QgdGhlIGVycm9yIG1lc3NhZ2UsIHdlIHByZWZpeFxuICogaXQgd2l0aCB0aGUgc3RhdHVzIGNvZGUsIHNvIHRoYXQgdGhlIG1vc3QgaW1wb3J0YW50IGluZm9ybWF0aW9uIGlzIGFsd2F5c1xuICogdmlzaWJsZSBpbW1lZGlhdGVseS5cbiAqXG4gKiBFcnJvciBkZXRhaWxzIGFyZSB3cmFwcGVkIHdpdGggZ29vZ2xlLnByb3RvYnVmLkFueSBvbiB0aGUgd2lyZSwgc28gdGhhdFxuICogYSBzZXJ2ZXIgb3IgbWlkZGxld2FyZSBjYW4gYXR0YWNoIGFyYml0cmFyeSBkYXRhIHRvIGFuIGVycm9yLiBVc2UgdGhlXG4gKiBtZXRob2QgZmluZERldGFpbHMoKSB0byByZXRyaWV2ZSB0aGUgZGV0YWlscy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbm5lY3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgQ29ubmVjdEVycm9yLlxuICAgICAqIElmIG5vIGNvZGUgaXMgcHJvdmlkZWQsIGNvZGUgXCJ1bmtub3duXCIgaXMgdXNlZC5cbiAgICAgKiBPdXRnb2luZyBkZXRhaWxzIGFyZSBvbmx5IHJlbGV2YW50IGZvciB0aGUgc2VydmVyIHNpZGUgLSBhIHNlcnZpY2UgbWF5XG4gICAgICogcmFpc2UgYW4gZXJyb3Igd2l0aCBkZXRhaWxzLCBhbmQgaXQgaXMgdXAgdG8gdGhlIHByb3RvY29sIGltcGxlbWVudGF0aW9uXG4gICAgICogdG8gZW5jb2RlIGFuZCBzZW5kIHRoZSBkZXRhaWxzIGFsb25nIHdpdGggZXJyb3IuXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgY29kZSA9IENvZGUuVW5rbm93biwgbWV0YWRhdGEsIG91dGdvaW5nRGV0YWlscywgY2F1c2UpIHtcbiAgICAgICAgc3VwZXIoY3JlYXRlTWVzc2FnZShtZXNzYWdlLCBjb2RlKSk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwiQ29ubmVjdEVycm9yXCI7XG4gICAgICAgIC8vIHNlZSBodHRwczovL3d3dy50eXBlc2NyaXB0bGFuZy5vcmcvZG9jcy9oYW5kYm9vay9yZWxlYXNlLW5vdGVzL3R5cGVzY3JpcHQtMi0yLmh0bWwjZXhhbXBsZVxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgbmV3LnRhcmdldC5wcm90b3R5cGUpO1xuICAgICAgICB0aGlzLnJhd01lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gbmV3IEhlYWRlcnMobWV0YWRhdGEgIT09IG51bGwgJiYgbWV0YWRhdGEgIT09IHZvaWQgMCA/IG1ldGFkYXRhIDoge30pO1xuICAgICAgICB0aGlzLmRldGFpbHMgPSBvdXRnb2luZ0RldGFpbHMgIT09IG51bGwgJiYgb3V0Z29pbmdEZXRhaWxzICE9PSB2b2lkIDAgPyBvdXRnb2luZ0RldGFpbHMgOiBbXTtcbiAgICAgICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGFueSB2YWx1ZSAtIHR5cGljYWxseSBhIGNhdWdodCBlcnJvciBpbnRvIGEgQ29ubmVjdEVycm9yLFxuICAgICAqIGZvbGxvd2luZyB0aGVzZSBydWxlczpcbiAgICAgKiAtIElmIHRoZSB2YWx1ZSBpcyBhbHJlYWR5IGEgQ29ubmVjdEVycm9yLCByZXR1cm4gaXQgYXMgaXMuXG4gICAgICogLSBJZiB0aGUgdmFsdWUgaXMgYW4gQWJvcnRFcnJvciBmcm9tIHRoZSBmZXRjaCBBUEksIHJldHVybiB0aGUgbWVzc2FnZVxuICAgICAqICAgb2YgdGhlIEFib3J0RXJyb3Igd2l0aCBjb2RlIENhbmNlbGVkLlxuICAgICAqIC0gRm9yIG90aGVyIEVycm9ycywgcmV0dXJuIHRoZSBlcnJvciBtZXNzYWdlIHdpdGggY29kZSBVbmtub3duIGJ5IGRlZmF1bHQuXG4gICAgICogLSBGb3Igb3RoZXIgdmFsdWVzLCByZXR1cm4gdGhlIHZhbHVlcyBTdHJpbmcgcmVwcmVzZW50YXRpb24gYXMgYSBtZXNzYWdlLFxuICAgICAqICAgd2l0aCB0aGUgY29kZSBVbmtub3duIGJ5IGRlZmF1bHQuXG4gICAgICogVGhlIG9yaWdpbmFsIHZhbHVlIHdpbGwgYmUgdXNlZCBmb3IgdGhlIFwiY2F1c2VcIiBwcm9wZXJ0eSBmb3IgdGhlIG5ld1xuICAgICAqIENvbm5lY3RFcnJvci5cbiAgICAgKi9cbiAgICBzdGF0aWMgZnJvbShyZWFzb24sIGNvZGUgPSBDb2RlLlVua25vd24pIHtcbiAgICAgICAgaWYgKHJlYXNvbiBpbnN0YW5jZW9mIENvbm5lY3RFcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHJlYXNvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIGlmIChyZWFzb24ubmFtZSA9PSBcIkFib3J0RXJyb3JcIikge1xuICAgICAgICAgICAgICAgIC8vIEZldGNoIHJlcXVlc3RzIGNhbiBvbmx5IGJlIGNhbmNlbGVkIHdpdGggYW4gQWJvcnRDb250cm9sbGVyLlxuICAgICAgICAgICAgICAgIC8vIFdlIGRldGVjdCB0aGF0IGNvbmRpdGlvbiBieSBsb29raW5nIGF0IHRoZSBuYW1lIG9mIHRoZSByYWlzZWRcbiAgICAgICAgICAgICAgICAvLyBlcnJvciBvYmplY3QsIGFuZCB0cmFuc2xhdGUgdG8gdGhlIGFwcHJvcHJpYXRlIHN0YXR1cyBjb2RlLlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQ29ubmVjdEVycm9yKHJlYXNvbi5tZXNzYWdlLCBDb2RlLkNhbmNlbGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29ubmVjdEVycm9yKHJlYXNvbi5tZXNzYWdlLCBjb2RlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgcmVhc29uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IENvbm5lY3RFcnJvcihTdHJpbmcocmVhc29uKSwgY29kZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHJlYXNvbik7XG4gICAgfVxuICAgIHN0YXRpYyBbU3ltYm9sLmhhc0luc3RhbmNlXSh2KSB7XG4gICAgICAgIGlmICghKHYgaW5zdGFuY2VvZiBFcnJvcikpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHYpID09PSBDb25uZWN0RXJyb3IucHJvdG90eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHYubmFtZSA9PT0gXCJDb25uZWN0RXJyb3JcIiAmJlxuICAgICAgICAgICAgXCJjb2RlXCIgaW4gdiAmJlxuICAgICAgICAgICAgdHlwZW9mIHYuY29kZSA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgICAgICAgXCJtZXRhZGF0YVwiIGluIHYgJiZcbiAgICAgICAgICAgIFwiZGV0YWlsc1wiIGluIHYgJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodi5kZXRhaWxzKSAmJlxuICAgICAgICAgICAgXCJyYXdNZXNzYWdlXCIgaW4gdiAmJlxuICAgICAgICAgICAgdHlwZW9mIHYucmF3TWVzc2FnZSA9PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICBcImNhdXNlXCIgaW4gdik7XG4gICAgfVxuICAgIGZpbmREZXRhaWxzKHR5cGVPclJlZ2lzdHJ5KSB7XG4gICAgICAgIGNvbnN0IHJlZ2lzdHJ5ID0gXCJ0eXBlTmFtZVwiIGluIHR5cGVPclJlZ2lzdHJ5XG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBmaW5kTWVzc2FnZTogKHR5cGVOYW1lKSA9PiB0eXBlTmFtZSA9PT0gdHlwZU9yUmVnaXN0cnkudHlwZU5hbWUgPyB0eXBlT3JSZWdpc3RyeSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdHlwZU9yUmVnaXN0cnk7XG4gICAgICAgIGNvbnN0IGRldGFpbHMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHRoaXMuZGV0YWlscykge1xuICAgICAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlZ2lzdHJ5LmZpbmRNZXNzYWdlKGRhdGEuZ2V0VHlwZSgpLnR5cGVOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHlwZSA9IHJlZ2lzdHJ5LmZpbmRNZXNzYWdlKGRhdGEudHlwZSk7XG4gICAgICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbHMucHVzaCh0eXBlLmZyb21CaW5hcnkoZGF0YS52YWx1ZSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoXykge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBzaWxlbnRseSBnaXZlIHVwIGlmIHdlIGFyZSB1bmFibGUgdG8gcGFyc2UgdGhlIGRldGFpbCwgYmVjYXVzZVxuICAgICAgICAgICAgICAgICAgICAvLyB0aGF0IGFwcGVhcnMgdG8gYmUgdGhlIGxlYXN0IHdvcnN0IGJlaGF2aW9yLlxuICAgICAgICAgICAgICAgICAgICAvLyBJdCBpcyB2ZXJ5IHVubGlrZWx5IHRoYXQgYSB1c2VyIHN1cnJvdW5kcyBhIGNhdGNoIGJvZHkgaGFuZGxpbmcgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVycm9yIHdpdGggYW5vdGhlciB0cnktY2F0Y2ggc3RhdGVtZW50LCBhbmQgd2UgZG8gbm90IHdhbnQgdG9cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVjb21tZW5kIGRvaW5nIHNvLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGV0YWlscztcbiAgICB9XG59XG4vKipcbiAqIENyZWF0ZSBhbiBlcnJvciBtZXNzYWdlLCBwcmVmaXhpbmcgdGhlIGdpdmVuIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZU1lc3NhZ2UobWVzc2FnZSwgY29kZSkge1xuICAgIHJldHVybiBtZXNzYWdlLmxlbmd0aFxuICAgICAgICA/IGBbJHtjb2RlVG9TdHJpbmcoY29kZSl9XSAke21lc3NhZ2V9YFxuICAgICAgICA6IGBbJHtjb2RlVG9TdHJpbmcoY29kZSl9XWA7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IE1lc3NhZ2UsIHByb3RvQmFzZTY0IH0gZnJvbSBcIkBidWZidWlsZC9wcm90b2J1ZlwiO1xuaW1wb3J0IHsgQ29ubmVjdEVycm9yIH0gZnJvbSBcIi4vY29ubmVjdC1lcnJvci5qc1wiO1xuaW1wb3J0IHsgQ29kZSB9IGZyb20gXCIuL2NvZGUuanNcIjtcbi8qKlxuICogRW5jb2RlIGEgc2luZ2xlIGJpbmFyeSBoZWFkZXIgdmFsdWUgYWNjb3JkaW5nIHRvIHRoZSBDb25uZWN0XG4gKiBhbmQgZ1JQQyBzcGVjaWZpY2F0aW9ucy5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGFjY2VwdHMgcmF3IGJpbmFyeSBkYXRhIGZyb20gYSBidWZmZXIsIGEgc3RyaW5nXG4gKiB3aXRoIFVURi04IHRleHQsIG9yIGEgcHJvdG9idWYgbWVzc2FnZS4gSXQgZW5jb2RlcyB0aGUgaW5wdXRcbiAqIHdpdGggdW5wYWRkZWQgYmFzZTY0IGFuZCByZXR1cm5zIGEgc3RyaW5nIHRoYXQgY2FuIGJlIHVzZWQgZm9yXG4gKiBhIGhlYWRlciB3aG9zZSBuYW1lIGVuZHMgd2l0aCBgLWJpbmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVCaW5hcnlIZWFkZXIodmFsdWUpIHtcbiAgICBsZXQgYnl0ZXM7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTWVzc2FnZSkge1xuICAgICAgICBieXRlcyA9IHZhbHVlLnRvQmluYXJ5KCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGJ5dGVzID0gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGJ5dGVzID0gdmFsdWUgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gdmFsdWUgOiBuZXcgVWludDhBcnJheSh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBwcm90b0Jhc2U2NC5lbmMoYnl0ZXMpLnJlcGxhY2UoLz0rJC8sIFwiXCIpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRlY29kZUJpbmFyeUhlYWRlcih2YWx1ZSwgdHlwZSwgb3B0aW9ucykge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gcHJvdG9CYXNlNjQuZGVjKHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0eXBlLmZyb21CaW5hcnkoYnl0ZXMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBieXRlcztcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgQ29ubmVjdEVycm9yLmZyb20oZSwgQ29kZS5EYXRhTG9zcyk7XG4gICAgfVxufVxuLyoqXG4gKiBNZXJnZSB0d28gb3IgbW9yZSBIZWFkZXJzIG9iamVjdHMgYnkgYXBwZW5kaW5nIGFsbCBmaWVsZHMgZnJvbVxuICogYWxsIGlucHV0cyB0byBhIG5ldyBIZWFkZXJzIG9iamVjdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZEhlYWRlcnMoLi4uaGVhZGVycykge1xuICAgIGNvbnN0IGggPSBuZXcgSGVhZGVycygpO1xuICAgIGZvciAoY29uc3QgZSBvZiBoZWFkZXJzKSB7XG4gICAgICAgIGUuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgaC5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gaDtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBDcmVhdGUgYW55IGNsaWVudCBmb3IgdGhlIGdpdmVuIHNlcnZpY2UuXG4gKlxuICogVGhlIGdpdmVuIGNyZWF0ZU1ldGhvZCBmdW5jdGlvbiBpcyBjYWxsZWQgZm9yIGVhY2ggbWV0aG9kIGRlZmluaXRpb25cbiAqIG9mIHRoZSBzZXJ2aWNlLiBUaGUgZnVuY3Rpb24gaXQgcmV0dXJucyBpcyBhZGRlZCB0byB0aGUgY2xpZW50IG9iamVjdFxuICogYXMgYSBtZXRob2QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQW55Q2xpZW50KHNlcnZpY2UsIGNyZWF0ZU1ldGhvZCkge1xuICAgIGNvbnN0IGNsaWVudCA9IHt9O1xuICAgIGZvciAoY29uc3QgW2xvY2FsTmFtZSwgbWV0aG9kSW5mb10gb2YgT2JqZWN0LmVudHJpZXMoc2VydmljZS5tZXRob2RzKSkge1xuICAgICAgICBjb25zdCBtZXRob2QgPSBjcmVhdGVNZXRob2QoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBtZXRob2RJbmZvKSwgeyBsb2NhbE5hbWUsXG4gICAgICAgICAgICBzZXJ2aWNlIH0pKTtcbiAgICAgICAgaWYgKG1ldGhvZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjbGllbnRbbG9jYWxOYW1lXSA9IG1ldGhvZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2xpZW50O1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBDb25uZWN0RXJyb3IgfSBmcm9tIFwiLi4vY29ubmVjdC1lcnJvci5qc1wiO1xuaW1wb3J0IHsgQ29kZSB9IGZyb20gXCIuLi9jb2RlLmpzXCI7XG5pbXBvcnQgeyBjb21wcmVzc2VkRmxhZyB9IGZyb20gXCIuL2NvbXByZXNzaW9uLmpzXCI7XG4vKipcbiAqIENyZWF0ZSBhIFdIQVRXRyBSZWFkYWJsZVN0cmVhbSBvZiBlbnZlbG9wZWQgbWVzc2FnZXMgZnJvbSBhIFJlYWRhYmxlU3RyZWFtXG4gKiBvZiBieXRlcy5cbiAqXG4gKiBJZGVhbGx5LCB0aGlzIHdvdWxkIHNpbXBseSBiZSBhIFRyYW5zZm9ybVN0cmVhbSwgYnV0IFJlYWRhYmxlU3RyZWFtLnBpcGVUaHJvdWdoXG4gKiBkb2VzIG5vdCBoYXZlIHRoZSBuZWNlc3NhcnkgYXZhaWxhYmlsaXR5IGF0IHRoaXMgdGltZS5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVudmVsb3BlUmVhZGFibGVTdHJlYW0oc3RyZWFtKSB7XG4gICAgbGV0IHJlYWRlcjtcbiAgICBsZXQgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgZnVuY3Rpb24gYXBwZW5kKGNodW5rKSB7XG4gICAgICAgIGNvbnN0IG4gPSBuZXcgVWludDhBcnJheShidWZmZXIubGVuZ3RoICsgY2h1bmsubGVuZ3RoKTtcbiAgICAgICAgbi5zZXQoYnVmZmVyKTtcbiAgICAgICAgbi5zZXQoY2h1bmssIGJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICBidWZmZXIgPSBuO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFJlYWRhYmxlU3RyZWFtKHtcbiAgICAgICAgc3RhcnQoKSB7XG4gICAgICAgICAgICByZWFkZXIgPSBzdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHB1bGwoY29udHJvbGxlcikge1xuICAgICAgICAgICAgbGV0IGhlYWRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyID09PSB1bmRlZmluZWQgJiYgYnVmZmVyLmJ5dGVMZW5ndGggPj0gNSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCA1OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aCA9IChsZW5ndGggPDwgOCkgKyBidWZmZXJbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyID0geyBmbGFnczogYnVmZmVyWzBdLCBsZW5ndGggfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGhlYWRlciAhPT0gdW5kZWZpbmVkICYmIGJ1ZmZlci5ieXRlTGVuZ3RoID49IGhlYWRlci5sZW5ndGggKyA1KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXBwZW5kKHJlc3VsdC52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGVhZGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmJ5dGVMZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29udHJvbGxlci5lcnJvcihuZXcgQ29ubmVjdEVycm9yKFwicHJlbWF0dXJlIGVuZCBvZiBzdHJlYW1cIiwgQ29kZS5EYXRhTG9zcykpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBidWZmZXIuc3ViYXJyYXkoNSwgNSArIGhlYWRlci5sZW5ndGgpO1xuICAgICAgICAgICAgYnVmZmVyID0gYnVmZmVyLnN1YmFycmF5KDUgKyBoZWFkZXIubGVuZ3RoKTtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZSh7XG4gICAgICAgICAgICAgICAgZmxhZ3M6IGhlYWRlci5mbGFncyxcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4vKipcbiAqIENvbXByZXNzIGFuIEVudmVsb3BlZE1lc3NhZ2UuXG4gKlxuICogUmFpc2VzIEludGVybmFsIGlmIGFuIGVudmVsb3BlZCBtZXNzYWdlIGlzIGFscmVhZHkgY29tcHJlc3NlZC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVudmVsb3BlQ29tcHJlc3MoZW52ZWxvcGUsIGNvbXByZXNzaW9uLCBjb21wcmVzc01pbkJ5dGVzKSB7XG4gICAgbGV0IHsgZmxhZ3MsIGRhdGEgfSA9IGVudmVsb3BlO1xuICAgIGlmICgoZmxhZ3MgJiBjb21wcmVzc2VkRmxhZykgPT09IGNvbXByZXNzZWRGbGFnKSB7XG4gICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoXCJpbnZhbGlkIGVudmVsb3BlLCBhbHJlYWR5IGNvbXByZXNzZWRcIiwgQ29kZS5JbnRlcm5hbCk7XG4gICAgfVxuICAgIGlmIChjb21wcmVzc2lvbiAmJiBkYXRhLmJ5dGVMZW5ndGggPj0gY29tcHJlc3NNaW5CeXRlcykge1xuICAgICAgICBkYXRhID0gYXdhaXQgY29tcHJlc3Npb24uY29tcHJlc3MoZGF0YSk7XG4gICAgICAgIGZsYWdzID0gZmxhZ3MgfCBjb21wcmVzc2VkRmxhZztcbiAgICB9XG4gICAgcmV0dXJuIHsgZGF0YSwgZmxhZ3MgfTtcbn1cbi8qKlxuICogRGVjb21wcmVzcyBhbiBFbnZlbG9wZWRNZXNzYWdlLlxuICpcbiAqIFJhaXNlcyBJbnZhbGlkQXJndW1lbnQgaWYgYW4gZW52ZWxvcGUgaXMgY29tcHJlc3NlZCwgYnV0IGNvbXByZXNzaW9uIGlzIG51bGwuXG4gKlxuICogUmVsaWVzIG9uIHRoZSBwcm92aWRlZCBDb21wcmVzc2lvbiB0byByYWlzZSBSZXNvdXJjZUV4aGF1c3RlZCBpZiB0aGVcbiAqICpkZWNvbXByZXNzZWQqIG1lc3NhZ2Ugc2l6ZSBpcyBsYXJnZXIgdGhhbiByZWFkTWF4Qnl0ZXMuIElmIHRoZSBlbnZlbG9wZSBpc1xuICogbm90IGNvbXByZXNzZWQsIHJlYWRNYXhCeXRlcyBpcyBub3QgaG9ub3JlZC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGVudmVsb3BlRGVjb21wcmVzcyhlbnZlbG9wZSwgY29tcHJlc3Npb24sIHJlYWRNYXhCeXRlcykge1xuICAgIGxldCB7IGZsYWdzLCBkYXRhIH0gPSBlbnZlbG9wZTtcbiAgICBpZiAoKGZsYWdzICYgY29tcHJlc3NlZEZsYWcpID09PSBjb21wcmVzc2VkRmxhZykge1xuICAgICAgICBpZiAoIWNvbXByZXNzaW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKFwicmVjZWl2ZWQgY29tcHJlc3NlZCBlbnZlbG9wZSwgYnV0IGRvIG5vdCBrbm93IGhvdyB0byBkZWNvbXByZXNzXCIsIENvZGUuSW52YWxpZEFyZ3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gYXdhaXQgY29tcHJlc3Npb24uZGVjb21wcmVzcyhkYXRhLCByZWFkTWF4Qnl0ZXMpO1xuICAgICAgICBmbGFncyA9IGZsYWdzIF4gY29tcHJlc3NlZEZsYWc7XG4gICAgfVxuICAgIHJldHVybiB7IGRhdGEsIGZsYWdzIH07XG59XG4vKipcbiAqIEVuY29kZSBhIHNpbmdsZSBlbnZlbG9wZWQgbWVzc2FnZS5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZUVudmVsb3BlKGZsYWdzLCBkYXRhKSB7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShkYXRhLmxlbmd0aCArIDUpO1xuICAgIGJ5dGVzLnNldChkYXRhLCA1KTtcbiAgICBjb25zdCB2ID0gbmV3IERhdGFWaWV3KGJ5dGVzLmJ1ZmZlciwgYnl0ZXMuYnl0ZU9mZnNldCwgYnl0ZXMuYnl0ZUxlbmd0aCk7XG4gICAgdi5zZXRVaW50OCgwLCBmbGFncyk7IC8vIGZpcnN0IGJ5dGUgaXMgZmxhZ3NcbiAgICB2LnNldFVpbnQzMigxLCBkYXRhLmxlbmd0aCk7IC8vIDQgYnl0ZXMgbWVzc2FnZSBsZW5ndGhcbiAgICByZXR1cm4gYnl0ZXM7XG59XG4vKipcbiAqIEVuY29kZSBhIHNldCBvZiBlbnZlbG9wZWQgbWVzc2FnZXMuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGVFbnZlbG9wZXMoLi4uZW52ZWxvcGVzKSB7XG4gICAgY29uc3QgbGVuID0gZW52ZWxvcGVzLnJlZHVjZSgocHJldmlvdXNWYWx1ZSwgY3VycmVudFZhbHVlKSA9PiBwcmV2aW91c1ZhbHVlICsgY3VycmVudFZhbHVlLmRhdGEubGVuZ3RoICsgNSwgMCk7XG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW4pO1xuICAgIGNvbnN0IHYgPSBuZXcgRGF0YVZpZXcoYnl0ZXMuYnVmZmVyKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBmb3IgKGNvbnN0IGUgb2YgZW52ZWxvcGVzKSB7XG4gICAgICAgIHYuc2V0VWludDgob2Zmc2V0LCBlLmZsYWdzKTsgLy8gZmlyc3QgYnl0ZSBpcyBmbGFnc1xuICAgICAgICB2LnNldFVpbnQzMihvZmZzZXQgKyAxLCBlLmRhdGEubGVuZ3RoKTsgLy8gNCBieXRlcyBtZXNzYWdlIGxlbmd0aFxuICAgICAgICBieXRlcy5zZXQoZS5kYXRhLCBvZmZzZXQgKyA1KTtcbiAgICAgICAgb2Zmc2V0ICs9IGUuZGF0YS5sZW5ndGggKyA1O1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZXM7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2FzeW5jVmFsdWVzID0gKHRoaXMgJiYgdGhpcy5fX2FzeW5jVmFsdWVzKSB8fCBmdW5jdGlvbiAobykge1xuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn07XG52YXIgX19hd2FpdCA9ICh0aGlzICYmIHRoaXMuX19hd2FpdCkgfHwgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7IH1cbnZhciBfX2FzeW5jR2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2FzeW5jR2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiwgYXdhaXRSZXR1cm4pLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gICAgZnVuY3Rpb24gYXdhaXRSZXR1cm4oZikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGYsIHJlamVjdCk7IH07IH1cbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59O1xudmFyIF9fYXN5bmNEZWxlZ2F0b3IgPSAodGhpcyAmJiB0aGlzLl9fYXN5bmNEZWxlZ2F0b3IpIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgdmFyIGksIHA7XG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufTtcbmltcG9ydCB7IENvZGUgfSBmcm9tIFwiLi4vY29kZS5qc1wiO1xuaW1wb3J0IHsgQ29ubmVjdEVycm9yIH0gZnJvbSBcIi4uL2Nvbm5lY3QtZXJyb3IuanNcIjtcbmltcG9ydCB7IGVuY29kZUVudmVsb3BlLCBlbnZlbG9wZUNvbXByZXNzLCBlbnZlbG9wZURlY29tcHJlc3MsIH0gZnJvbSBcIi4vZW52ZWxvcGUuanNcIjtcbmltcG9ydCB7IGFzc2VydFJlYWRNYXhCeXRlcyB9IGZyb20gXCIuL2xpbWl0LWlvLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gcGlwZVRvKHNvdXJjZSwgLi4ucmVzdCkge1xuICAgIGNvbnN0IFt0cmFuc2Zvcm1zLCBzaW5rLCBvcHRdID0gcGlja1RyYW5zZm9ybXNBbmRTaW5rKHJlc3QpO1xuICAgIGxldCBpdGVyYWJsZSA9IHNvdXJjZTtcbiAgICBsZXQgYWJvcnRhYmxlO1xuICAgIGlmICgob3B0ID09PSBudWxsIHx8IG9wdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0LnByb3BhZ2F0ZURvd25TdHJlYW1FcnJvcikgPT09IHRydWUpIHtcbiAgICAgICAgaXRlcmFibGUgPSBhYm9ydGFibGUgPSBtYWtlSXRlcmFibGVBYm9ydGFibGUoaXRlcmFibGUpO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGl0ZXJhYmxlID0gcGlwZShpdGVyYWJsZSwgLi4udHJhbnNmb3JtcywgeyBwcm9wYWdhdGVEb3duU3RyZWFtRXJyb3I6IGZhbHNlIH0pO1xuICAgIHJldHVybiBzaW5rKGl0ZXJhYmxlKS5jYXRjaCgocmVhc29uKSA9PiB7XG4gICAgICAgIGlmIChhYm9ydGFibGUpIHtcbiAgICAgICAgICAgIHJldHVybiBhYm9ydGFibGUuYWJvcnQocmVhc29uKS50aGVuKCgpID0+IFByb21pc2UucmVqZWN0KHJlYXNvbikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICAgIH0pO1xufVxuLy8gcGljayB0cmFuc2Zvcm1zLCB0aGUgc2luaywgYW5kIG9wdGlvbnMgZnJvbSB0aGUgcGlwZVRvKCkgcmVzdCBwYXJhbWV0ZXJcbmZ1bmN0aW9uIHBpY2tUcmFuc2Zvcm1zQW5kU2luayhyZXN0KSB7XG4gICAgbGV0IG9wdDtcbiAgICBpZiAodHlwZW9mIHJlc3RbcmVzdC5sZW5ndGggLSAxXSAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgb3B0ID0gcmVzdC5wb3AoKTtcbiAgICB9XG4gICAgY29uc3Qgc2luayA9IHJlc3QucG9wKCk7XG4gICAgcmV0dXJuIFtyZXN0LCBzaW5rLCBvcHRdO1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIEFzeW5jSXRlcmFibGVTaW5rIHRoYXQgY29uY2F0ZW5hdGVzIGFsbCBlbGVtZW50cyBmcm9tIHRoZSBpbnB1dC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNpbmtBbGwoKSB7XG4gICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgICAgICB2YXIgX2EsIGVfMSwgX2IsIF9jO1xuICAgICAgICBjb25zdCBhbGwgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgaXRlcmFibGVfMSA9IF9fYXN5bmNWYWx1ZXMoaXRlcmFibGUpLCBpdGVyYWJsZV8xXzE7IGl0ZXJhYmxlXzFfMSA9IGF3YWl0IGl0ZXJhYmxlXzEubmV4dCgpLCBfYSA9IGl0ZXJhYmxlXzFfMS5kb25lLCAhX2E7IF9kID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF9jID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIF9kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBfYztcbiAgICAgICAgICAgICAgICBhbGwucHVzaChjaHVuayk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghX2QgJiYgIV9hICYmIChfYiA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgYXdhaXQgX2IuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWxsO1xuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gQXN5bmNJdGVyYWJsZVNpbmsgdGhhdCBjb25jYXRlbmF0ZXMgYWxsIGNodW5rcyBmcm9tIHRoZSBpbnB1dCBpbnRvXG4gKiBhIHNpbmdsZSBVaW50OEFycmF5LlxuICpcbiAqIFRoZSBpdGVyYWJsZSByYWlzZXMgYW4gZXJyb3IgaWYgdGhlIG1vcmUgdGhhbiByZWFkTWF4Qnl0ZXMgYXJlIHJlYWQuXG4gKlxuICogQW4gb3B0aW9uYWwgbGVuZ3RoIGhpbnQgY2FuIGJlIHByb3ZpZGVkIHRvIG9wdGltaXplIGFsbG9jYXRpb24gYW5kIHZhbGlkYXRpb24uXG4gKiBJZiBtb3JlIG9yIGxlc3MgYnl0ZXMgYXJlIHByZXNlbnQgaW4gdGhlIHNvdXJjZSB0aGF0IHRoZSBsZW5ndGggaGludCBpbmRpY2F0ZXMsXG4gKiBhbmQgZXJyb3IgaXMgcmFpc2VkLlxuICogSWYgdGhlIGxlbmd0aCBoaW50IGlzIGxhcmdlciB0aGFuIHJlYWRNYXhCeXRlcywgYW4gZXJyb3IgaXMgcmFpc2VkLlxuICogSWYgdGhlIGxlbmd0aCBoaW50IGlzIG5vdCBhIHBvc2l0aXZlIGludGVnZXIsIGl0IGlzIGlnbm9yZWQuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaW5rQWxsQnl0ZXMocmVhZE1heEJ5dGVzLCBsZW5ndGhIaW50KSB7XG4gICAgcmV0dXJuIGFzeW5jIGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgcmVhZEFsbEJ5dGVzKGl0ZXJhYmxlLCByZWFkTWF4Qnl0ZXMsIGxlbmd0aEhpbnQpO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gcGlwZShzb3VyY2UsIC4uLnJlc3QpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogcGlwZV8xKCkge1xuICAgICAgICBjb25zdCBbdHJhbnNmb3Jtcywgb3B0XSA9IHBpY2tUcmFuc2Zvcm1zKHJlc3QpO1xuICAgICAgICBsZXQgYWJvcnRhYmxlO1xuICAgICAgICBjb25zdCBzb3VyY2VJdCA9IHNvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgY29uc3QgY2FjaGVkU291cmNlID0ge1xuICAgICAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc291cmNlSXQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICBsZXQgaXRlcmFibGUgPSBjYWNoZWRTb3VyY2U7XG4gICAgICAgIGlmICgob3B0ID09PSBudWxsIHx8IG9wdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0LnByb3BhZ2F0ZURvd25TdHJlYW1FcnJvcikgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGl0ZXJhYmxlID0gYWJvcnRhYmxlID0gbWFrZUl0ZXJhYmxlQWJvcnRhYmxlKGl0ZXJhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdHJhbnNmb3Jtcykge1xuICAgICAgICAgICAgaXRlcmFibGUgPSB0KGl0ZXJhYmxlKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdCA9IGl0ZXJhYmxlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB5aWVsZCBfX2F3YWl0KGl0Lm5leHQoKSk7XG4gICAgICAgICAgICAgICAgaWYgKHIuZG9uZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFhYm9ydGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgeWllbGQgX19hd2FpdChyLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIF9fYXdhaXQoYWJvcnRhYmxlLmFib3J0KGUpKTsgLy8gcHJvcGFnYXRlIGRvd25zdHJlYW0gZXJyb3IgdG8gdGhlIHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmICgob3B0ID09PSBudWxsIHx8IG9wdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0LnByb3BhZ2F0ZURvd25TdHJlYW1FcnJvcikgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDYWxsIHJldHVybiBvbiB0aGUgc291cmNlIGl0ZXJhYmxlIHRvIGluZGljYXRlXG4gICAgICAgICAgICAgICAgLy8gdGhhdCB3ZSB3aWxsIG5vIGxvbmdlciBjb25zdW1lIGl0IGFuZCBpdCBzaG91bGRcbiAgICAgICAgICAgICAgICAvLyBjbGVhbnVwIGFueSBhbGxvY2F0ZWQgcmVzb3VyY2VzLlxuICAgICAgICAgICAgICAgIChfYSA9IHNvdXJjZUl0LnJldHVybikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwoc291cmNlSXQpLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuIHJldHVybnMgYSBwcm9taXNlLCB3aGljaCB3ZSBkb24ndCBjYXJlIGFib3V0LlxuICAgICAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgICAgICAvLyBVbmNhdWdodCBwcm9taXNlcyBhcmUgdGhyb3duIGF0IHNvbWV0aW1lL3NvbWV3aGVyZSBieSB0aGUgZXZlbnQgbG9vcCxcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyB0byBlbnN1cmUgZXJyb3IgaXMgY2F1Z2h0IGFuZCBpZ25vcmVkLlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBwaWNrVHJhbnNmb3JtcyhyZXN0KSB7XG4gICAgbGV0IG9wdDtcbiAgICBpZiAodHlwZW9mIHJlc3RbcmVzdC5sZW5ndGggLSAxXSAhPSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgb3B0ID0gcmVzdC5wb3AoKTtcbiAgICB9XG4gICAgcmV0dXJuIFtyZXN0LCBvcHRdO1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIEFzeW5jSXRlcmFibGVUcmFuc2Zvcm0gdGhhdCBjYXRjaGVzIGFueSBlcnJvciBmcm9tIHRoZSBpbnB1dCwgYW5kXG4gKiBwYXNzZXMgaXQgdG8gdGhlIGdpdmVuIGNhdGNoRXJyb3IgZnVuY3Rpb24uXG4gKlxuICogVGhlIGNhdGNoRXJyb3IgZnVuY3Rpb24gbWF5IHJldHVybiBhIGZpbmFsIHZhbHVlLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtQ2F0Y2goY2F0Y2hFcnJvcikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgLy8gd2UgZGVsaWJlcmF0ZSBhdm9pZCBhIGZvci1hd2FpdCBsb29wIGJlY2F1c2Ugd2Ugb25seSB3YW50IHRvIGNhdGNoIHVwc3RyZWFtXG4gICAgICAgICAgICAvLyBlcnJvcnMsIG5vdCBkb3duc3RyZWFtIGVycm9ycyAoeWllbGQpLlxuICAgICAgICAgICAgY29uc3QgaXQgPSBpdGVyYWJsZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICBsZXQgcjtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByID0geWllbGQgX19hd2FpdChpdC5uZXh0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXVnaHQgPSB5aWVsZCBfX2F3YWl0KGNhdGNoRXJyb3IoZSkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2F1Z2h0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoY2F1Z2h0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHIuZG9uZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeWllbGQgeWllbGQgX19hd2FpdChyLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBBc3luY0l0ZXJhYmxlVHJhbnNmb3JtIHRoYXQgY2F0Y2hlcyBhbnkgZXJyb3IgZnJvbSB0aGUgaW5wdXQsIGFuZFxuICogcGFzc2VzIGl0IHRvIHRoZSBnaXZlbiBmdW5jdGlvbi4gVW5saWtlIHRyYW5zZm9ybUNhdGNoKCksIHRoZSBnaXZlbiBmdW5jdGlvblxuICogaXMgYWxzbyBjYWxsZWQgd2hlbiBubyBlcnJvciBpcyByYWlzZWQuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1DYXRjaEZpbmFsbHkoY2F0Y2hGaW5hbGx5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAvLyB3ZSBkZWxpYmVyYXRlIGF2b2lkIGEgZm9yLWF3YWl0IGxvb3AgYmVjYXVzZSB3ZSBvbmx5IHdhbnQgdG8gY2F0Y2ggdXBzdHJlYW1cbiAgICAgICAgICAgIC8vIGVycm9ycywgbm90IGRvd25zdHJlYW0gZXJyb3JzICh5aWVsZCkuXG4gICAgICAgICAgICBsZXQgZXJyO1xuICAgICAgICAgICAgY29uc3QgaXQgPSBpdGVyYWJsZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgICAgICBsZXQgcjtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICByID0geWllbGQgX19hd2FpdChpdC5uZXh0KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnIgPSBlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHIuZG9uZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeWllbGQgeWllbGQgX19hd2FpdChyLnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNhdWdodCA9IHlpZWxkIF9fYXdhaXQoY2F0Y2hGaW5hbGx5KGVycikpO1xuICAgICAgICAgICAgaWYgKGNhdWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgeWllbGQgX19hd2FpdChjYXVnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIEFzeW5jSXRlcmFibGVUcmFuc2Zvcm0gdGhhdCBhcHBlbmRzIGEgdmFsdWUuXG4gKlxuICogVGhlIGVsZW1lbnQgdG8gYXBwZW5kIGlzIHByb3ZpZGVkIGJ5IGEgZnVuY3Rpb24uIElmIHRoZSBmdW5jdGlvbiByZXR1cm5zXG4gKiB1bmRlZmluZWQsIG5vIGVsZW1lbnQgaXMgYXBwZW5kZWQuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1BcHBlbmQocHJvdmlkZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBlXzIsIF9iLCBfYztcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2QgPSB0cnVlLCBpdGVyYWJsZV8yID0gX19hc3luY1ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzJfMTsgaXRlcmFibGVfMl8xID0geWllbGQgX19hd2FpdChpdGVyYWJsZV8yLm5leHQoKSksIF9hID0gaXRlcmFibGVfMl8xLmRvbmUsICFfYTsgX2QgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF9jID0gaXRlcmFibGVfMl8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBfZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVuayA9IF9jO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCBfX2F3YWl0KGNodW5rKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gaXRlcmFibGVfMi5yZXR1cm4pKSB5aWVsZCBfX2F3YWl0KF9iLmNhbGwoaXRlcmFibGVfMikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhcHBlbmQgPSB5aWVsZCBfX2F3YWl0KHByb3ZpZGUoKSk7XG4gICAgICAgICAgICBpZiAoYXBwZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCBfX2F3YWl0KGFwcGVuZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYW4gQXN5bmNJdGVyYWJsZVRyYW5zZm9ybSB0aGF0IHByZXBlbmRzIGFuIGVsZW1lbnQuXG4gKlxuICogVGhlIGVsZW1lbnQgdG8gcHJlcGVuZCBpcyBwcm92aWRlZCBieSBhIGZ1bmN0aW9uLiBJZiB0aGUgZnVuY3Rpb24gcmV0dXJuc1xuICogdW5kZWZpbmVkLCBubyBlbGVtZW50IGlzIGFwcGVuZGVkLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUHJlcGVuZChwcm92aWRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIGVfMywgX2IsIF9jO1xuICAgICAgICAgICAgY29uc3QgcHJlcGVuZCA9IHlpZWxkIF9fYXdhaXQocHJvdmlkZSgpKTtcbiAgICAgICAgICAgIGlmIChwcmVwZW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCBfX2F3YWl0KHByZXBlbmQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IHRydWUsIGl0ZXJhYmxlXzMgPSBfX2FzeW5jVmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfM18xOyBpdGVyYWJsZV8zXzEgPSB5aWVsZCBfX2F3YWl0KGl0ZXJhYmxlXzMubmV4dCgpKSwgX2EgPSBpdGVyYWJsZV8zXzEuZG9uZSwgIV9hOyBfZCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2MgPSBpdGVyYWJsZV8zXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIF9kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rID0gX2M7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoY2h1bmspO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzNfMSkgeyBlXzMgPSB7IGVycm9yOiBlXzNfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9kICYmICFfYSAmJiAoX2IgPSBpdGVyYWJsZV8zLnJldHVybikpIHlpZWxkIF9fYXdhaXQoX2IuY2FsbChpdGVyYWJsZV8zKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBBc3luY0l0ZXJhYmxlVHJhbnNmb3JtIHRoYXQgcmVhZHMgYWxsIGJ5dGVzIGZyb20gdGhlIGlucHV0LCBhbmRcbiAqIGNvbmNhdGVuYXRlcyB0aGVtIHRvIGEgc2luZ2xlIFVpbnQ4QXJyYXkuXG4gKlxuICogVGhlIGl0ZXJhYmxlIHJhaXNlcyBhbiBlcnJvciBpZiB0aGUgbW9yZSB0aGFuIHJlYWRNYXhCeXRlcyBhcmUgcmVhZC5cbiAqXG4gKiBBbiBvcHRpb25hbCBsZW5ndGggaGludCBjYW4gYmUgcHJvdmlkZWQgdG8gb3B0aW1pemUgYWxsb2NhdGlvbiBhbmQgdmFsaWRhdGlvbi5cbiAqIElmIG1vcmUgb3IgbGVzcyBieXRlcyBhcmUgcHJlc2VudCBpbiB0aGUgc291cmNlIHRoYXQgdGhlIGxlbmd0aCBoaW50IGluZGljYXRlcyxcbiAqIGFuZCBlcnJvciBpcyByYWlzZWQuXG4gKiBJZiB0aGUgbGVuZ3RoIGhpbnQgaXMgbGFyZ2VyIHRoYW4gcmVhZE1heEJ5dGVzLCBhbiBlcnJvciBpcyByYWlzZWQuXG4gKiBJZiB0aGUgbGVuZ3RoIGhpbnQgaXMgbm90IGEgcG9zaXRpdmUgaW50ZWdlciwgaXQgaXMgaWdub3JlZC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVJlYWRBbGxCeXRlcyhyZWFkTWF4Qnl0ZXMsIGxlbmd0aEhpbnQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gICAgICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoeWllbGQgX19hd2FpdChyZWFkQWxsQnl0ZXMoaXRlcmFibGUsIHJlYWRNYXhCeXRlcywgbGVuZ3RoSGludCkpKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1TZXJpYWxpemVFbnZlbG9wZShzZXJpYWxpemF0aW9uLCBlbmRTdHJlYW1GbGFnLCBlbmRTZXJpYWxpemF0aW9uKSB7XG4gICAgaWYgKGVuZFN0cmVhbUZsYWcgPT09IHVuZGVmaW5lZCB8fCBlbmRTZXJpYWxpemF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIHZhciBfYSwgZV80LCBfYiwgX2M7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2QgPSB0cnVlLCBpdGVyYWJsZV80ID0gX19hc3luY1ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzRfMTsgaXRlcmFibGVfNF8xID0geWllbGQgX19hd2FpdChpdGVyYWJsZV80Lm5leHQoKSksIF9hID0gaXRlcmFibGVfNF8xLmRvbmUsICFfYTsgX2QgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfYyA9IGl0ZXJhYmxlXzRfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaHVuayA9IF9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHNlcmlhbGl6YXRpb24uc2VyaWFsaXplKGNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoeyBmbGFnczogMCwgZGF0YSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV80XzEpIHsgZV80ID0geyBlcnJvcjogZV80XzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gaXRlcmFibGVfNC5yZXR1cm4pKSB5aWVsZCBfX2F3YWl0KF9iLmNhbGwoaXRlcmFibGVfNCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV80KSB0aHJvdyBlXzQuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIGVfNSwgX2IsIF9jO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IHRydWUsIGl0ZXJhYmxlXzUgPSBfX2FzeW5jVmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfNV8xOyBpdGVyYWJsZV81XzEgPSB5aWVsZCBfX2F3YWl0KGl0ZXJhYmxlXzUubmV4dCgpKSwgX2EgPSBpdGVyYWJsZV81XzEuZG9uZSwgIV9hOyBfZCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2MgPSBpdGVyYWJsZV81XzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIF9kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rID0gX2M7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkYXRhO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZmxhZ3MgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2h1bmsuZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFncyA9IGZsYWdzIHwgZW5kU3RyZWFtRmxhZztcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBlbmRTZXJpYWxpemF0aW9uLnNlcmlhbGl6ZShjaHVuay52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gc2VyaWFsaXphdGlvbi5zZXJpYWxpemUoY2h1bmsudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoeyBmbGFncywgZGF0YSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV81XzEpIHsgZV81ID0geyBlcnJvcjogZV81XzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gaXRlcmFibGVfNS5yZXR1cm4pKSB5aWVsZCBfX2F3YWl0KF9iLmNhbGwoaXRlcmFibGVfNSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfNSkgdGhyb3cgZV81LmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtUGFyc2VFbnZlbG9wZShzZXJpYWxpemF0aW9uLCBlbmRTdHJlYW1GbGFnLCBlbmRTZXJpYWxpemF0aW9uKSB7XG4gICAgLy8gY29kZSBwYXRoIGFsd2F5cyB5aWVsZHMgUGFyc2VkRW52ZWxvcGVkTWVzc2FnZTxULCBFPlxuICAgIGlmIChlbmRTZXJpYWxpemF0aW9uICYmIGVuZFN0cmVhbUZsYWcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hLCBlXzYsIF9iLCBfYztcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IHRydWUsIGl0ZXJhYmxlXzYgPSBfX2FzeW5jVmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfNl8xOyBpdGVyYWJsZV82XzEgPSB5aWVsZCBfX2F3YWl0KGl0ZXJhYmxlXzYubmV4dCgpKSwgX2EgPSBpdGVyYWJsZV82XzEuZG9uZSwgIV9hOyBfZCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9jID0gaXRlcmFibGVfNl8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgZmxhZ3MsIGRhdGEgfSA9IF9jO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChmbGFncyAmIGVuZFN0cmVhbUZsYWcpID09PSBlbmRTdHJlYW1GbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgeWllbGQgX19hd2FpdCh7IHZhbHVlOiBlbmRTZXJpYWxpemF0aW9uLnBhcnNlKGRhdGEpLCBlbmQ6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCBfX2F3YWl0KHsgdmFsdWU6IHNlcmlhbGl6YXRpb24ucGFyc2UoZGF0YSksIGVuZDogZmFsc2UgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfNl8xKSB7IGVfNiA9IHsgZXJyb3I6IGVfNl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2QgJiYgIV9hICYmIChfYiA9IGl0ZXJhYmxlXzYucmV0dXJuKSkgeWllbGQgX19hd2FpdChfYi5jYWxsKGl0ZXJhYmxlXzYpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfNikgdGhyb3cgZV82LmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIGNvZGUgcGF0aCBhbHdheXMgeWllbGRzIFRcbiAgICByZXR1cm4gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gICAgICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgZV83LCBfYiwgX2M7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgaXRlcmFibGVfNyA9IF9fYXN5bmNWYWx1ZXMoaXRlcmFibGUpLCBpdGVyYWJsZV83XzE7IGl0ZXJhYmxlXzdfMSA9IHlpZWxkIF9fYXdhaXQoaXRlcmFibGVfNy5uZXh0KCkpLCBfYSA9IGl0ZXJhYmxlXzdfMS5kb25lLCAhX2E7IF9kID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfYyA9IGl0ZXJhYmxlXzdfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBmbGFncywgZGF0YSB9ID0gX2M7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbmRTdHJlYW1GbGFnICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChmbGFncyAmIGVuZFN0cmVhbUZsYWcpID09PSBlbmRTdHJlYW1GbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW5kU2VyaWFsaXphdGlvbiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoXCJ1bmV4cGVjdGVkIGVuZCBmbGFnXCIsIENvZGUuSW52YWxpZEFyZ3VtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNraXBzIGVuZC1vZi1zdHJlYW0gZW52ZWxvcGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoc2VyaWFsaXphdGlvbi5wYXJzZShkYXRhKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfN18xKSB7IGVfNyA9IHsgZXJyb3I6IGVfN18xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2QgJiYgIV9hICYmIChfYiA9IGl0ZXJhYmxlXzcucmV0dXJuKSkgeWllbGQgX19hd2FpdChfYi5jYWxsKGl0ZXJhYmxlXzcpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzcpIHRocm93IGVfNy5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGFuIEFzeW5jSXRlcmFibGVUcmFuc2Zvcm0gdGhhdCB0YWtlcyBlbnZlbG9wZWQgbWVzc2FnZXMgYXMgYSBzb3VyY2UsXG4gKiBhbmQgY29tcHJlc3NlcyB0aGVtIGlmIHRoZXkgYXJlIGxhcmdlciB0aGFuIGNvbXByZXNzTWluQnl0ZXMuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1Db21wcmVzc0VudmVsb3BlKGNvbXByZXNzaW9uLCBjb21wcmVzc01pbkJ5dGVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIGVfOCwgX2IsIF9jO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IHRydWUsIGl0ZXJhYmxlXzggPSBfX2FzeW5jVmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfOF8xOyBpdGVyYWJsZV84XzEgPSB5aWVsZCBfX2F3YWl0KGl0ZXJhYmxlXzgubmV4dCgpKSwgX2EgPSBpdGVyYWJsZV84XzEuZG9uZSwgIV9hOyBfZCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2MgPSBpdGVyYWJsZV84XzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIF9kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudiA9IF9jO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCBfX2F3YWl0KHlpZWxkIF9fYXdhaXQoZW52ZWxvcGVDb21wcmVzcyhlbnYsIGNvbXByZXNzaW9uLCBjb21wcmVzc01pbkJ5dGVzKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzhfMSkgeyBlXzggPSB7IGVycm9yOiBlXzhfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9kICYmICFfYSAmJiAoX2IgPSBpdGVyYWJsZV84LnJldHVybikpIHlpZWxkIF9fYXdhaXQoX2IuY2FsbChpdGVyYWJsZV84KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV84KSB0aHJvdyBlXzguZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBBc3luY0l0ZXJhYmxlVHJhbnNmb3JtIHRoYXQgdGFrZXMgZW52ZWxvcGVkIG1lc3NhZ2VzIGFzIGEgc291cmNlLFxuICogYW5kIGRlY29tcHJlc3NlcyB0aGVtIHVzaW5nIHRoZSBnaXZlbiBjb21wcmVzc2lvbi5cbiAqXG4gKiBUaGUgaXRlcmFibGUgcmFpc2VzIGFuIGVycm9yIGlmIHRoZSBkZWNvbXByZXNzZWQgcGF5bG9hZCBvZiBhbiBlbnZlbG9wZWRcbiAqIG1lc3NhZ2UgaXMgbGFyZ2VyIHRoYW4gcmVhZE1heEJ5dGVzLCBvciBpZiBubyBjb21wcmVzc2lvbiBpcyBwcm92aWRlZC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybURlY29tcHJlc3NFbnZlbG9wZShjb21wcmVzc2lvbiwgcmVhZE1heEJ5dGVzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpdGVyYWJsZSkge1xuICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2EsIGVfOSwgX2IsIF9jO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IHRydWUsIGl0ZXJhYmxlXzkgPSBfX2FzeW5jVmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfOV8xOyBpdGVyYWJsZV85XzEgPSB5aWVsZCBfX2F3YWl0KGl0ZXJhYmxlXzkubmV4dCgpKSwgX2EgPSBpdGVyYWJsZV85XzEuZG9uZSwgIV9hOyBfZCA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgX2MgPSBpdGVyYWJsZV85XzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIF9kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudiA9IF9jO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCBfX2F3YWl0KHlpZWxkIF9fYXdhaXQoZW52ZWxvcGVEZWNvbXByZXNzKGVudiwgY29tcHJlc3Npb24sIHJlYWRNYXhCeXRlcykpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV85XzEpIHsgZV85ID0geyBlcnJvcjogZV85XzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gaXRlcmFibGVfOS5yZXR1cm4pKSB5aWVsZCBfX2F3YWl0KF9iLmNhbGwoaXRlcmFibGVfOSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfOSkgdGhyb3cgZV85LmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBhbiBBc3luY0l0ZXJhYmxlVHJhbnNmb3JtIHRoYXQgdGFrZXMgZW52ZWxvcGVkIG1lc3NhZ2VzIGFzIGEgc291cmNlLFxuICogYW5kIGpvaW5zIHRoZW0gaW50byBhIHN0cmVhbSBvZiByYXcgYnl0ZXMuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1Kb2luRW52ZWxvcGVzKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgICAgICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBlXzEwLCBfYiwgX2M7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9kID0gdHJ1ZSwgaXRlcmFibGVfMTAgPSBfX2FzeW5jVmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMTBfMTsgaXRlcmFibGVfMTBfMSA9IHlpZWxkIF9fYXdhaXQoaXRlcmFibGVfMTAubmV4dCgpKSwgX2EgPSBpdGVyYWJsZV8xMF8xLmRvbmUsICFfYTsgX2QgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF9jID0gaXRlcmFibGVfMTBfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgX2QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBmbGFncywgZGF0YSB9ID0gX2M7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQoZW5jb2RlRW52ZWxvcGUoZmxhZ3MsIGRhdGEpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xMF8xKSB7IGVfMTAgPSB7IGVycm9yOiBlXzEwXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gaXRlcmFibGVfMTAucmV0dXJuKSkgeWllbGQgX19hd2FpdChfYi5jYWxsKGl0ZXJhYmxlXzEwKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xMCkgdGhyb3cgZV8xMC5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYW4gQXN5bmNJdGVyYWJsZVRyYW5zZm9ybSB0aGF0IHRha2VzIHJhdyBieXRlcyBhcyBhIHNvdXJjZSwgYW5kIHNwbGl0c1xuICogdGhlbSBpbnRvIGVudmVsb3BlZCBtZXNzYWdlcy5cbiAqXG4gKiBUaGUgaXRlcmFibGUgcmFpc2VzIGFuIGVycm9yXG4gKiAtIGlmIHRoZSBwYXlsb2FkIG9mIGFuIGVudmVsb3BlZCBtZXNzYWdlIGlzIGxhcmdlciB0aGFuIHJlYWRNYXhCeXRlcyxcbiAqIC0gaWYgdGhlIHN0cmVhbSBlbmRlZCBiZWZvcmUgYW4gZW52ZWxvcGVkIG1lc3NhZ2UgZnVsbHkgYXJyaXZlZCxcbiAqIC0gb3IgaWYgdGhlIHN0cmVhbSBlbmRlZCB3aXRoIGV4dHJhbmVvdXMgZGF0YS5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVNwbGl0RW52ZWxvcGUocmVhZE1heEJ5dGVzKSB7XG4gICAgLy8gYXBwZW5kIGNodW5rIHRvIGJ1ZmZlciwgcmV0dXJuaW5nIHVwZGF0ZWQgYnVmZmVyXG4gICAgZnVuY3Rpb24gYXBwZW5kKGJ1ZmZlciwgY2h1bmspIHtcbiAgICAgICAgY29uc3QgbiA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlci5ieXRlTGVuZ3RoICsgY2h1bmsuYnl0ZUxlbmd0aCk7XG4gICAgICAgIG4uc2V0KGJ1ZmZlcik7XG4gICAgICAgIG4uc2V0KGNodW5rLCBidWZmZXIubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIG47XG4gICAgfVxuICAgIC8vIHR1cGxlIDA6IGVudmVsb3BlLCBvciB1bmRlZmluZWQgaWYgaW5jb21wbGV0ZVxuICAgIC8vIHR1cGxlIDE6IHJlbWFpbmRlciBvZiB0aGUgYnVmZmVyXG4gICAgZnVuY3Rpb24gc2hpZnRFbnZlbG9wZShidWZmZXIsIGhlYWRlcikge1xuICAgICAgICBpZiAoYnVmZmVyLmJ5dGVMZW5ndGggPCA1ICsgaGVhZGVyLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIFt1bmRlZmluZWQsIGJ1ZmZlcl07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIHsgZmxhZ3M6IGhlYWRlci5mbGFncywgZGF0YTogYnVmZmVyLnN1YmFycmF5KDUsIDUgKyBoZWFkZXIubGVuZ3RoKSB9LFxuICAgICAgICAgICAgYnVmZmVyLnN1YmFycmF5KDUgKyBoZWFkZXIubGVuZ3RoKSxcbiAgICAgICAgXTtcbiAgICB9XG4gICAgLy8gdW5kZWZpbmVkOiBoZWFkZXIgaXMgaW5jb21wbGV0ZVxuICAgIGZ1bmN0aW9uIHBlZWtIZWFkZXIoYnVmZmVyKSB7XG4gICAgICAgIGlmIChidWZmZXIuYnl0ZUxlbmd0aCA8IDUpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIuYnVmZmVyLCBidWZmZXIuYnl0ZU9mZnNldCwgYnVmZmVyLmJ5dGVMZW5ndGgpO1xuICAgICAgICBjb25zdCBsZW5ndGggPSB2aWV3LmdldFVpbnQzMigxKTsgLy8gNCBieXRlcyBtZXNzYWdlIGxlbmd0aFxuICAgICAgICBjb25zdCBmbGFncyA9IHZpZXcuZ2V0VWludDgoMCk7IC8vIGZpcnN0IGJ5dGUgaXMgZmxhZ3NcbiAgICAgICAgcmV0dXJuIHsgbGVuZ3RoLCBmbGFncyB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gICAgICAgIHJldHVybiBfX2FzeW5jR2VuZXJhdG9yKHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgZV8xMSwgX2IsIF9jO1xuICAgICAgICAgICAgbGV0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDApO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IHRydWUsIGl0ZXJhYmxlXzExID0gX19hc3luY1ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzExXzE7IGl0ZXJhYmxlXzExXzEgPSB5aWVsZCBfX2F3YWl0KGl0ZXJhYmxlXzExLm5leHQoKSksIF9hID0gaXRlcmFibGVfMTFfMS5kb25lLCAhX2E7IF9kID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfYyA9IGl0ZXJhYmxlXzExXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIF9kID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNodW5rID0gX2M7XG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGFwcGVuZChidWZmZXIsIGNodW5rKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gcGVla0hlYWRlcihidWZmZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFzc2VydFJlYWRNYXhCeXRlcyhyZWFkTWF4Qnl0ZXMsIGhlYWRlci5sZW5ndGgsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGVudjtcbiAgICAgICAgICAgICAgICAgICAgICAgIFtlbnYsIGJ1ZmZlcl0gPSBzaGlmdEVudmVsb3BlKGJ1ZmZlciwgaGVhZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZW52KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCB5aWVsZCBfX2F3YWl0KGVudik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8xMV8xKSB7IGVfMTEgPSB7IGVycm9yOiBlXzExXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfZCAmJiAhX2EgJiYgKF9iID0gaXRlcmFibGVfMTEucmV0dXJuKSkgeWllbGQgX19hd2FpdChfYi5jYWxsKGl0ZXJhYmxlXzExKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xMSkgdGhyb3cgZV8xMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1ZmZlci5ieXRlTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IHBlZWtIZWFkZXIoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9IFwicHJvdG9jb2wgZXJyb3I6IGluY29tcGxldGUgZW52ZWxvcGVcIjtcbiAgICAgICAgICAgICAgICBpZiAoaGVhZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgcHJvdG9jb2wgZXJyb3I6IHByb21pc2VkICR7aGVhZGVyLmxlbmd0aH0gYnl0ZXMgaW4gZW52ZWxvcGVkIG1lc3NhZ2UsIGdvdCAke2J1ZmZlci5ieXRlTGVuZ3RoIC0gNX0gYnl0ZXNgO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKG1lc3NhZ2UsIENvZGUuSW52YWxpZEFyZ3VtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbn1cbi8qKlxuICogUmVhZHMgYWxsIGJ5dGVzIGZyb20gdGhlIHNvdXJjZSwgYW5kIGNvbmNhdGVuYXRlcyB0aGVtIHRvIGEgc2luZ2xlIFVpbnQ4QXJyYXkuXG4gKlxuICogUmFpc2VzIGFuIGVycm9yIGlmOlxuICogLSBtb3JlIHRoYW4gcmVhZE1heEJ5dGVzIGFyZSByZWFkXG4gKiAtIGxlbmd0aEhpbnQgaXMgYSBwb3NpdGl2ZSBpbnRlZ2VyLCBidXQgbGFyZ2VyIHRoYW4gcmVhZE1heEJ5dGVzXG4gKiAtIGxlbmd0aEhpbnQgaXMgYSBwb3NpdGl2ZSBpbnRlZ2VyLCBhbmQgdGhlIHNvdXJjZSBjb250YWlucyBtb3JlIG9yIGxlc3MgYnl0ZXNcbiAqICAgdGhhbiBwcm9taXNlZFxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVhZEFsbEJ5dGVzKGl0ZXJhYmxlLCByZWFkTWF4Qnl0ZXMsIGxlbmd0aEhpbnQpIHtcbiAgICB2YXIgX2EsIGVfMTIsIF9iLCBfYywgX2QsIGVfMTMsIF9lLCBfZjtcbiAgICBjb25zdCBbb2ssIGhpbnRdID0gcGFyc2VMZW5ndGhIaW50KGxlbmd0aEhpbnQpO1xuICAgIGlmIChvaykge1xuICAgICAgICBpZiAoaGludCA+IHJlYWRNYXhCeXRlcykge1xuICAgICAgICAgICAgYXNzZXJ0UmVhZE1heEJ5dGVzKHJlYWRNYXhCeXRlcywgaGludCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoaGludCk7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2cgPSB0cnVlLCBpdGVyYWJsZV8xMiA9IF9fYXN5bmNWYWx1ZXMoaXRlcmFibGUpLCBpdGVyYWJsZV8xMl8xOyBpdGVyYWJsZV8xMl8xID0gYXdhaXQgaXRlcmFibGVfMTIubmV4dCgpLCBfYSA9IGl0ZXJhYmxlXzEyXzEuZG9uZSwgIV9hOyBfZyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfYyA9IGl0ZXJhYmxlXzEyXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgX2cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBjaHVuayA9IF9jO1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgKyBjaHVuay5ieXRlTGVuZ3RoID4gaGludCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKGBwcm90b2NvbCBlcnJvcjogcHJvbWlzZWQgJHtoaW50fSBieXRlcywgcmVjZWl2ZWQgJHtvZmZzZXQgKyBjaHVuay5ieXRlTGVuZ3RofWAsIENvZGUuSW52YWxpZEFyZ3VtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnVmZmVyLnNldChjaHVuaywgb2Zmc2V0KTtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xMl8xKSB7IGVfMTIgPSB7IGVycm9yOiBlXzEyXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfZyAmJiAhX2EgJiYgKF9iID0gaXRlcmFibGVfMTIucmV0dXJuKSkgYXdhaXQgX2IuY2FsbChpdGVyYWJsZV8xMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMTIpIHRocm93IGVfMTIuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAob2Zmc2V0IDwgaGludCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENvbm5lY3RFcnJvcihgcHJvdG9jb2wgZXJyb3I6IHByb21pc2VkICR7aGludH0gYnl0ZXMsIHJlY2VpdmVkICR7b2Zmc2V0fWAsIENvZGUuSW52YWxpZEFyZ3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgIH1cbiAgICBjb25zdCBjaHVua3MgPSBbXTtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9oID0gdHJ1ZSwgaXRlcmFibGVfMTMgPSBfX2FzeW5jVmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMTNfMTsgaXRlcmFibGVfMTNfMSA9IGF3YWl0IGl0ZXJhYmxlXzEzLm5leHQoKSwgX2QgPSBpdGVyYWJsZV8xM18xLmRvbmUsICFfZDsgX2ggPSB0cnVlKSB7XG4gICAgICAgICAgICBfZiA9IGl0ZXJhYmxlXzEzXzEudmFsdWU7XG4gICAgICAgICAgICBfaCA9IGZhbHNlO1xuICAgICAgICAgICAgY29uc3QgY2h1bmsgPSBfZjtcbiAgICAgICAgICAgIGNvdW50ICs9IGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgICAgICAgICBhc3NlcnRSZWFkTWF4Qnl0ZXMocmVhZE1heEJ5dGVzLCBjb3VudCk7XG4gICAgICAgICAgICBjaHVua3MucHVzaChjaHVuayk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY2F0Y2ggKGVfMTNfMSkgeyBlXzEzID0geyBlcnJvcjogZV8xM18xIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghX2ggJiYgIV9kICYmIChfZSA9IGl0ZXJhYmxlXzEzLnJldHVybikpIGF3YWl0IF9lLmNhbGwoaXRlcmFibGVfMTMpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xMykgdGhyb3cgZV8xMy5lcnJvcjsgfVxuICAgIH1cbiAgICBjb25zdCBhbGwgPSBuZXcgVWludDhBcnJheShjb3VudCk7XG4gICAgbGV0IG9mZnNldCA9IDA7XG4gICAgZm9yIChsZXQgY2h1bmsgPSBjaHVua3Muc2hpZnQoKTsgY2h1bms7IGNodW5rID0gY2h1bmtzLnNoaWZ0KCkpIHtcbiAgICAgICAgYWxsLnNldChjaHVuaywgb2Zmc2V0KTtcbiAgICAgICAgb2Zmc2V0ICs9IGNodW5rLmJ5dGVMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBhbGw7XG59XG4vLyBwYXJzZSB0aGUgbGVuZ3RoSGludCBhcmd1bWVudCBvZiByZWFkQWxsQnl0ZXMoKVxuZnVuY3Rpb24gcGFyc2VMZW5ndGhIaW50KGxlbmd0aEhpbnQpIHtcbiAgICBpZiAobGVuZ3RoSGludCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aEhpbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtmYWxzZSwgMF07XG4gICAgfVxuICAgIGNvbnN0IG4gPSB0eXBlb2YgbGVuZ3RoSGludCA9PSBcInN0cmluZ1wiID8gcGFyc2VJbnQobGVuZ3RoSGludCwgMTApIDogbGVuZ3RoSGludDtcbiAgICBpZiAoIU51bWJlci5pc1NhZmVJbnRlZ2VyKG4pIHx8IG4gPCAwKSB7XG4gICAgICAgIHJldHVybiBbZmFsc2UsIG5dO1xuICAgIH1cbiAgICByZXR1cm4gW3RydWUsIG5dO1xufVxuLyoqXG4gKiBXYWl0IGZvciB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBpdGVyYWJsZSB3aXRob3V0IG1vZGlmeWluZyB0aGUgaXRlcmFibGUuXG4gKiBUaGlzIGNvbnN1bWVzIHRoZSBmaXJzdCBlbGVtZW50LCBidXQgcHVzaGVzIGl0IGJhY2sgb24gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gdW50aWxGaXJzdChpdGVyYWJsZSkge1xuICAgIGNvbnN0IGl0ID0gaXRlcmFibGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgbGV0IGZpcnN0ID0gYXdhaXQgaXQubmV4dCgpO1xuICAgIHJldHVybiB7XG4gICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgICAgICBjb25zdCB3ID0ge1xuICAgICAgICAgICAgICAgIGFzeW5jIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGZpcnN0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGl0Lm5leHQoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmIChpdC50aHJvdyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb24gLS0gY2FuJ3QgaGFuZGxlIG11dGF0ZWQgb2JqZWN0IHNlbnNpYmx5XG4gICAgICAgICAgICAgICAgdy50aHJvdyA9IChlKSA9PiBpdC50aHJvdyhlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdC5yZXR1cm4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uLEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgLS0gY2FuJ3QgaGFuZGxlIG11dGF0ZWQgb2JqZWN0IHNlbnNpYmx5XG4gICAgICAgICAgICAgICAgdy5yZXR1cm4gPSAodmFsdWUpID0+IGl0LnJldHVybih2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBXcmFwIHRoZSBnaXZlbiBpdGVyYWJsZSBhbmQgcmV0dXJuIGFuIGl0ZXJhYmxlIHdpdGggYW4gYWJvcnQoKSBtZXRob2QuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBleGlzdHMgcHVyZWx5IGZvciBjb252ZW5pZW5jZS4gV2hlcmUgb25lIHdvdWxkIHR5cGljYWxseSBoYXZlXG4gKiB0byBhY2Nlc3MgdGhlIGl0ZXJhdG9yIGRpcmVjdGx5LCBhZHZhbmNlIHRocm91Z2ggYWxsIGVsZW1lbnRzLCBhbmQgY2FsbFxuICogQXN5bmNJdGVyYXRvci50aHJvdygpIHRvIG5vdGlmeSB0aGUgdXBzdHJlYW0gaXRlcmFibGUsIHRoaXMgZnVuY3Rpb24gYWxsb3dzXG4gKiB0byB1c2UgY29udmVuaWVudCBmb3ItYXdhaXQgbG9vcHMgYW5kIHN0aWxsIG5vdGlmeSB0aGUgdXBzdHJlYW0gaXRlcmFibGU6XG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IGFib3J0YWJsZSA9IG1ha2VJdGVyYWJsZUFib3J0YWJsZShpdGVyYWJsZSk7XG4gKiBmb3IgYXdhaXQgKGNvbnN0IGVsZSBvZiBhYm9ydGFibGUpIHtcbiAqICAgYXdhaXQgYWJvcnRhYmxlLmFib3J0KFwiRVJSXCIpO1xuICogfVxuICogYGBgXG4gKiBUaGVyZSBhcmUgYSBjb3VwbGUgb2YgbGltaXRhdGlvbnMgb2YgdGhpcyBmdW5jdGlvbjpcbiAqIC0gdGhlIGdpdmVuIGFzeW5jIGl0ZXJhYmxlIG11c3QgaW1wbGVtZW50IHRocm93XG4gKiAtIHRoZSBhc3luYyBpdGVyYWJsZSBjYW5ub3QgYmUgcmUtdXNlXG4gKiAtIGlmIHNvdXJjZSBjYXRjaGVzIGVycm9ycyBhbmQgeWllbGRzIHZhbHVlcyBmb3IgdGhlbSwgdGhleSBhcmUgaWdub3JlZCwgYW5kXG4gKiAgIHRoZSBzb3VyY2UgbWF5IHN0aWxsIGRhbmdsZVxuICpcbiAqIFRoZXJlIGFyZSBmb3VyIHBvc3NpYmxlIHdheXMgYW4gYXN5bmMgZnVuY3Rpb24qIGNhbiBoYW5kbGUgeWllbGQgZXJyb3JzOlxuICogMS4gZG9uJ3QgY2F0Y2ggZXJyb3JzIGF0IGFsbCAtIEFib3J0YWJsZS5hYm9ydCgpIHdpbGwgcmVzb2x2ZSBcInJldGhyb3duXCJcbiAqIDIuIGNhdGNoIGVycm9ycyBhbmQgcmV0aHJvdyAtIEFib3J0YWJsZS5hYm9ydCgpIHdpbGwgcmVzb2x2ZSBcInJldGhyb3duXCJcbiAqIDMuIGNhdGNoIGVycm9ycyBhbmQgcmV0dXJuIC0gQWJvcnRhYmxlLmFib3J0KCkgd2lsbCByZXNvbHZlIFwiY29tcGxldGVkXCJcbiAqIDQuIGNhdGNoIGVycm9ycyBhbmQgeWllbGQgYSB2YWx1ZSAtIEFib3J0YWJsZS5hYm9ydCgpIHdpbGwgcmVzb2x2ZSBcImNhdWdodFwiXG4gKlxuICogTm90ZSB0aGF0IGNhdGNoaW5nIGVycm9ycyBhbmQgeWllbGRpbmcgYSB2YWx1ZSBpcyBwcm9ibGVtYXRpYywgYW5kIGl0IHNob3VsZFxuICogYmUgZG9jdW1lbnRlZCB0aGF0IHRoaXMgbWF5IGxlYXZlIHRoZSBzb3VyY2UgaW4gYSBkYW5nbGluZyBzdGF0ZS5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VJdGVyYWJsZUFib3J0YWJsZShpdGVyYWJsZSkge1xuICAgIGNvbnN0IGlubmVyQ2FuZGlkYXRlID0gaXRlcmFibGVbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgaWYgKGlubmVyQ2FuZGlkYXRlLnRocm93ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXN5bmNJdGVyYWJsZSBkb2VzIG5vdCBpbXBsZW1lbnQgdGhyb3dcIik7XG4gICAgfVxuICAgIGNvbnN0IGlubmVyID0gaW5uZXJDYW5kaWRhdGU7XG4gICAgbGV0IGFib3J0ZWQ7XG4gICAgbGV0IHJlc3VsdFByb21pc2U7XG4gICAgbGV0IGl0ID0ge1xuICAgICAgICBuZXh0KCkge1xuICAgICAgICAgICAgcmVzdWx0UHJvbWlzZSA9IGlubmVyLm5leHQoKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHRQcm9taXNlID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0UHJvbWlzZTtcbiAgICAgICAgfSxcbiAgICAgICAgdGhyb3coZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlubmVyLnRocm93KGUpO1xuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKGlubmVyQ2FuZGlkYXRlLnJldHVybiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGl0ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpdCksIHsgcmV0dXJuKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyLnJldHVybih2YWx1ZSk7XG4gICAgICAgICAgICB9IH0pO1xuICAgIH1cbiAgICBsZXQgdXNlZCA9IGZhbHNlO1xuICAgIHJldHVybiB7XG4gICAgICAgIGFib3J0KHJlYXNvbikge1xuICAgICAgICAgICAgaWYgKGFib3J0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWJvcnRlZC5zdGF0ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGYgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlubmVyLnRocm93KHJlYXNvbikudGhlbigocikgPT4gKHIuZG9uZSA9PT0gdHJ1ZSA/IFwiY29tcGxldGVkXCIgOiBcImNhdWdodFwiKSwgKCkgPT4gXCJyZXRocm93blwiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAocmVzdWx0UHJvbWlzZSkge1xuICAgICAgICAgICAgICAgIGFib3J0ZWQgPSB7IHJlYXNvbiwgc3RhdGU6IHJlc3VsdFByb21pc2UudGhlbihmLCBmKSB9O1xuICAgICAgICAgICAgICAgIHJldHVybiBhYm9ydGVkLnN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYWJvcnRlZCA9IHsgcmVhc29uLCBzdGF0ZTogZigpIH07XG4gICAgICAgICAgICByZXR1cm4gYWJvcnRlZC5zdGF0ZTtcbiAgICAgICAgfSxcbiAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgIGlmICh1c2VkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQXN5bmNJdGVyYWJsZSBjYW5ub3QgYmUgcmUtdXNlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGl0O1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIENyZWF0ZSBhIG5ldyBXcml0YWJsZUl0ZXJhYmxlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlV3JpdGFibGVJdGVyYWJsZSgpIHtcbiAgICAvLyBXZSBzdGFydCB3aXRoIHR3byBxdWV1ZXMgdG8gY2FwdHVyZSB0aGUgcmVhZCBhbmQgd3JpdGUgYXR0ZW1wdHMuXG4gICAgLy9cbiAgICAvLyBUaGUgd3JpdGVzIGFuZCByZWFkcyBlYWNoIGNoZWNrIG9mIHRoZWlyIGNvdW50ZXJwYXJ0IGlzXG4gICAgLy8gYWxyZWFkeSBhdmFpbGFibGUgYW5kIGVpdGhlciBpbnRlcmFjdC9hZGQgdGhlbXNlbHZlcyB0byB0aGUgcXVldWUuXG4gICAgY29uc3QgcmVhZFF1ZXVlID0gW107XG4gICAgY29uc3Qgd3JpdGVRdWV1ZSA9IFtdO1xuICAgIGxldCBlcnIgPSB1bmRlZmluZWQ7XG4gICAgbGV0IG5leHRSZXNvbHZlO1xuICAgIGxldCBuZXh0UmVqZWN0O1xuICAgIGxldCBuZXh0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgbmV4dFJlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICBuZXh0UmVqZWN0ID0gcmVqZWN0O1xuICAgIH0pO1xuICAgIGxldCBjbG9zZWQgPSBmYWxzZTtcbiAgICAvLyBkcmFpbiB0aGUgcmVhZFF1ZXVlIGluIGNhc2Ugb2YgZXJyb3Ivd3JpdGVyIGlzIGNsb3NlZCBieSBzZW5kaW5nIGFcbiAgICAvLyBkb25lIHJlc3VsdC5cbiAgICBmdW5jdGlvbiBkcmFpbigpIHtcbiAgICAgICAgZm9yIChjb25zdCBuZXh0IG9mIHJlYWRRdWV1ZS5zcGxpY2UoMCwgcmVhZFF1ZXVlLmxlbmd0aCkpIHtcbiAgICAgICAgICAgIG5leHQoeyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGNsb3NlKCkge1xuICAgICAgICAgICAgY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIGRyYWluKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHdyaXRlKHBheWxvYWQpIHtcbiAgICAgICAgICAgIGlmIChjbG9zZWQpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnIgIT09IG51bGwgJiYgZXJyICE9PSB2b2lkIDAgPyBlcnIgOiBuZXcgRXJyb3IoXCJjYW5ub3Qgd3JpdGUsIFdyaXRhYmxlSXRlcmFibGUgYWxyZWFkeSBjbG9zZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZWFkID0gcmVhZFF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAocmVhZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gV2UgZGlkbid0IGZpbmQgYSBwZW5kaW5nIHJlYWQgc28gd2UgYWRkIHRoZSBwYXlsb2FkIHRvIHRoZSB3cml0ZSBxdWV1ZS5cbiAgICAgICAgICAgICAgICB3cml0ZVF1ZXVlLnB1c2gocGF5bG9hZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBmb3VuZCBhIHBlbmRpbmcgcmVhZCBzbyB3ZSByZXNwb25kIHdpdGggdGhlIHBheWxvYWQuXG4gICAgICAgICAgICAgICAgcmVhZCh7IGRvbmU6IGZhbHNlLCB2YWx1ZTogcGF5bG9hZCB9KTtcbiAgICAgICAgICAgICAgICBpZiAocmVhZFF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgaW4gdGhlIHJlYWQgcXVldWUgd2UgY2FuIG1hcmsgdGhlIHdyaXRlIGFzIGNvbXBsZXRlLlxuICAgICAgICAgICAgICAgICAgICAvLyBhcyB0aGUgZXJyb3IgcmVwb3J0aW5nIGlzIG5vdCBndWFyYW50ZWVkIHRvIGJlIHNlcXVlbnRpYWwgYW5kIHRoZXJlZm9yZSBjYW5ub3RcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gbGlua2VkIHRvIGEgc3BlY2lmaWMgd3JpdGUuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBhd2FpdCB0aGUgbmV4dCBjYWxsIGZvciBhcyBtYW55IHRpbWVzIGFzIHRoZXJlIGFyZSBpdGVtcyBpbiB0aGUgcXVldWUgKyAxXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIGl0ZW1zIGluIHRoZSB3cml0ZSBxdWV1ZSB0aGF0IG1lYW5zIHdyaXRlIGhhcHBlbmVkIGFuZCB3ZSBqdXN0IGhhdmVcbiAgICAgICAgICAgIC8vIHRvIHdhaXQgZm9yIG9uZSBtb3JlIGNhbGwgbGlrZXdpc2UgaWYgd2UgYXJlIHRoZSBudGggd3JpdGUgaW4gdGhlIHF1ZXVlIHdlXG4gICAgICAgICAgICAvLyBoYXZlIHRvIHdhaXQgZm9yIG4gd3JpdGVzIHRvIGNvbXBsZXRlIGFuZCBvbmUgbW9yZS5cbiAgICAgICAgICAgIGNvbnN0IGxpbWl0ID0gd3JpdGVRdWV1ZS5sZW5ndGggKyAxO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW1pdDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgbmV4dFByb21pc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc29sdmUgdGhlIG5leHRQcm9taXNlIHRvIGluZGljYXRlXG4gICAgICAgICAgICAgICAgICAgIC8vIHBlbmRpbmcgd3JpdGVzIHRoYXQgYSByZWFkIGF0dGVtcHQgaGFzIGJlZW4gbWFkZVxuICAgICAgICAgICAgICAgICAgICAvLyBhZnRlciB0aGVpciB3cml0ZS5cbiAgICAgICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgYWxzbyBuZWVkIHRvIHJlc2V0IHRoZSBwcm9taXNlIGZvciBmdXR1cmUgd3JpdGVzLlxuICAgICAgICAgICAgICAgICAgICBuZXh0UmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICBuZXh0UHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRSZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHRSZWplY3QgPSByZWplY3Q7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3cml0ZSA9IHdyaXRlUXVldWUuc2hpZnQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdyaXRlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGZvdW5kIGEgcGVuZGluZyB3cml0ZSBzbyByZXNwb25zZSB3aXRoIHRoZSBwYXlsb2FkLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IGRvbmU6IGZhbHNlLCB2YWx1ZTogd3JpdGUgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IGRvbmU6IHRydWUsIHZhbHVlOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgcmV0dXJuIGEgcHJvbWlzZSBpbW1lZGlhdGVseSB0aGF0IGlzIGVpdGhlciByZXNvbHZlZC9yZWplY3RlZFxuICAgICAgICAgICAgICAgICAgICAvLyBhcyB3cml0ZXMgaGFwcGVuLlxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVhZFJlc29sdmU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IChyZWFkUmVzb2x2ZSA9IHJlc29sdmUpKTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZFF1ZXVlLnB1c2gocmVhZFJlc29sdmUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlYWRQcm9taXNlO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGhyb3codGhyb3dFcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyID0gdGhyb3dFcnI7XG4gICAgICAgICAgICAgICAgICAgIGNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlUXVldWUuc3BsaWNlKDAsIHdyaXRlUXVldWUubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFByb21pc2UuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVG8gbWFrZSBzdXJlIHRoYXQgdGhlIG5leHRQcm9taXNlIGlzIGFsd2F5cyByZXNvbHZlZC5cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgd2lsbCByZWplY3QgYWxsIHBlbmRpbmcgd3JpdGVzLlxuICAgICAgICAgICAgICAgICAgICBuZXh0UmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIGRyYWluKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBkb25lOiB0cnVlLCB2YWx1ZTogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcmV0dXJuKCkge1xuICAgICAgICAgICAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB3cml0ZVF1ZXVlLnNwbGljZSgwLCB3cml0ZVF1ZXVlLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc29sdmUgb25jZSBmb3IgdGhlIHdyaXRlIGF3YWl0aW5nIGNvbmZpcm1hdGlvbi5cbiAgICAgICAgICAgICAgICAgICAgbmV4dFJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVqZWN0IGFsbCBmdXR1cmUgd3JpdGVzLlxuICAgICAgICAgICAgICAgICAgICBuZXh0UHJvbWlzZSA9IFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImNhbm5vdCB3cml0ZSwgY29uc3VtZXIgY2FsbGVkIHJldHVyblwiKSk7XG4gICAgICAgICAgICAgICAgICAgIG5leHRQcm9taXNlLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRvIG1ha2Ugc3VyZSB0aGF0IHRoZSBuZXh0UHJvbWlzZSBpcyBhbHdheXMgcmVzb2x2ZWQuXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBkcmFpbigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYW4gYXN5bmNocm9ub3VzIGl0ZXJhYmxlIGZyb20gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVxdWlyZS1hd2FpdFxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFzeW5jSXRlcmFibGUoaXRlbXMpIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiBjcmVhdGVBc3luY0l0ZXJhYmxlXzEoKSB7XG4gICAgICAgIHlpZWxkIF9fYXdhaXQoeWllbGQqIF9fYXN5bmNEZWxlZ2F0b3IoX19hc3luY1ZhbHVlcyhpdGVtcykpKTtcbiAgICB9KTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxudmFyIF9fYXN5bmNWYWx1ZXMgPSAodGhpcyAmJiB0aGlzLl9fYXN5bmNWYWx1ZXMpIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgbSA9IG9bU3ltYm9sLmFzeW5jSXRlcmF0b3JdLCBpO1xuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgZCwgdikgeyBQcm9taXNlLnJlc29sdmUodikudGhlbihmdW5jdGlvbih2KSB7IHJlc29sdmUoeyB2YWx1ZTogdiwgZG9uZTogZCB9KTsgfSwgcmVqZWN0KTsgfVxufTtcbnZhciBfX2F3YWl0ID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0KSB8fCBmdW5jdGlvbiAodikgeyByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTsgfVxudmFyIF9fYXN5bmNEZWxlZ2F0b3IgPSAodGhpcyAmJiB0aGlzLl9fYXN5bmNEZWxlZ2F0b3IpIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgdmFyIGksIHA7XG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufTtcbnZhciBfX2FzeW5jR2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2FzeW5jR2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiwgYXdhaXRSZXR1cm4pLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gICAgZnVuY3Rpb24gYXdhaXRSZXR1cm4oZikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGYsIHJlamVjdCk7IH07IH1cbiAgICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaWYgKGdbbl0pIHsgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgaWYgKGYpIGlbbl0gPSBmKGlbbl0pOyB9IH1cbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gICAgZnVuY3Rpb24gZnVsZmlsbCh2YWx1ZSkgeyByZXN1bWUoXCJuZXh0XCIsIHZhbHVlKTsgfVxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59O1xuaW1wb3J0IHsgTWVzc2FnZSwgTWV0aG9kS2luZCB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbmltcG9ydCB7IG1ha2VBbnlDbGllbnQgfSBmcm9tIFwiLi9hbnktY2xpZW50LmpzXCI7XG5pbXBvcnQgeyBDb25uZWN0RXJyb3IgfSBmcm9tIFwiLi9jb25uZWN0LWVycm9yLmpzXCI7XG5pbXBvcnQgeyBDb2RlIH0gZnJvbSBcIi4vY29kZS5qc1wiO1xuaW1wb3J0IHsgY3JlYXRlQXN5bmNJdGVyYWJsZSB9IGZyb20gXCIuL3Byb3RvY29sL2FzeW5jLWl0ZXJhYmxlLmpzXCI7XG4vKipcbiAqIENyZWF0ZSBhIFByb21pc2VDbGllbnQgZm9yIHRoZSBnaXZlbiBzZXJ2aWNlLCBpbnZva2luZyBSUENzIHRocm91Z2ggdGhlXG4gKiBnaXZlbiB0cmFuc3BvcnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9taXNlQ2xpZW50KHNlcnZpY2UsIHRyYW5zcG9ydCkge1xuICAgIHJldHVybiBtYWtlQW55Q2xpZW50KHNlcnZpY2UsIChtZXRob2QpID0+IHtcbiAgICAgICAgc3dpdGNoIChtZXRob2Qua2luZCkge1xuICAgICAgICAgICAgY2FzZSBNZXRob2RLaW5kLlVuYXJ5OlxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVVbmFyeUZuKHRyYW5zcG9ydCwgc2VydmljZSwgbWV0aG9kKTtcbiAgICAgICAgICAgIGNhc2UgTWV0aG9kS2luZC5TZXJ2ZXJTdHJlYW1pbmc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVNlcnZlclN0cmVhbWluZ0ZuKHRyYW5zcG9ydCwgc2VydmljZSwgbWV0aG9kKTtcbiAgICAgICAgICAgIGNhc2UgTWV0aG9kS2luZC5DbGllbnRTdHJlYW1pbmc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUNsaWVudFN0cmVhbWluZ0ZuKHRyYW5zcG9ydCwgc2VydmljZSwgbWV0aG9kKTtcbiAgICAgICAgICAgIGNhc2UgTWV0aG9kS2luZC5CaURpU3RyZWFtaW5nOlxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVCaURpU3RyZWFtaW5nRm4odHJhbnNwb3J0LCBzZXJ2aWNlLCBtZXRob2QpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVVuYXJ5Rm4odHJhbnNwb3J0LCBzZXJ2aWNlLCBtZXRob2QpIHtcbiAgICByZXR1cm4gYXN5bmMgZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdHJhbnNwb3J0LnVuYXJ5KHNlcnZpY2UsIG1ldGhvZCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25hbCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXRNcywgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMsIGlucHV0LCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY29udGV4dFZhbHVlcyk7XG4gICAgICAgIChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vbkhlYWRlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwob3B0aW9ucywgcmVzcG9uc2UuaGVhZGVyKTtcbiAgICAgICAgKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uVHJhaWxlcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwob3B0aW9ucywgcmVzcG9uc2UudHJhaWxlcik7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5tZXNzYWdlO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VydmVyU3RyZWFtaW5nRm4odHJhbnNwb3J0LCBzZXJ2aWNlLCBtZXRob2QpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJlYW1SZXNwb25zZSh0cmFuc3BvcnQuc3RyZWFtKHNlcnZpY2UsIG1ldGhvZCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25hbCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXRNcywgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMsIGNyZWF0ZUFzeW5jSXRlcmFibGUoW2lucHV0XSksIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb250ZXh0VmFsdWVzKSwgb3B0aW9ucyk7XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDbGllbnRTdHJlYW1pbmdGbih0cmFuc3BvcnQsIHNlcnZpY2UsIG1ldGhvZCkge1xuICAgIHJldHVybiBhc3luYyBmdW5jdGlvbiAocmVxdWVzdCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgX2EsIGVfMSwgX2IsIF9jO1xuICAgICAgICB2YXIgX2QsIF9lO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRyYW5zcG9ydC5zdHJlYW0oc2VydmljZSwgbWV0aG9kLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuc2lnbmFsLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudGltZW91dE1zLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaGVhZGVycywgcmVxdWVzdCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbnRleHRWYWx1ZXMpO1xuICAgICAgICAoX2QgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25IZWFkZXIpID09PSBudWxsIHx8IF9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZC5jYWxsKG9wdGlvbnMsIHJlc3BvbnNlLmhlYWRlcik7XG4gICAgICAgIGxldCBzaW5nbGVNZXNzYWdlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2YgPSB0cnVlLCBfZyA9IF9fYXN5bmNWYWx1ZXMocmVzcG9uc2UubWVzc2FnZSksIF9oOyBfaCA9IGF3YWl0IF9nLm5leHQoKSwgX2EgPSBfaC5kb25lLCAhX2E7IF9mID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF9jID0gX2gudmFsdWU7XG4gICAgICAgICAgICAgICAgX2YgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gX2M7XG4gICAgICAgICAgICAgICAgc2luZ2xlTWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghX2YgJiYgIV9hICYmIChfYiA9IF9nLnJldHVybikpIGF3YWl0IF9iLmNhbGwoX2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghc2luZ2xlTWVzc2FnZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IENvbm5lY3RFcnJvcihcInByb3RvY29sIGVycm9yOiBtaXNzaW5nIHJlc3BvbnNlIG1lc3NhZ2VcIiwgQ29kZS5JbnRlcm5hbCk7XG4gICAgICAgIH1cbiAgICAgICAgKF9lID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9uVHJhaWxlcikgPT09IG51bGwgfHwgX2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9lLmNhbGwob3B0aW9ucywgcmVzcG9uc2UudHJhaWxlcik7XG4gICAgICAgIHJldHVybiBzaW5nbGVNZXNzYWdlO1xuICAgIH07XG59XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmlEaVN0cmVhbWluZ0ZuKHRyYW5zcG9ydCwgc2VydmljZSwgbWV0aG9kKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZXF1ZXN0LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVTdHJlYW1SZXNwb25zZSh0cmFuc3BvcnQuc3RyZWFtKHNlcnZpY2UsIG1ldGhvZCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNpZ25hbCwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRpbWVvdXRNcywgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmhlYWRlcnMsIHJlcXVlc3QsIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb250ZXh0VmFsdWVzKSwgb3B0aW9ucyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGhhbmRsZVN0cmVhbVJlc3BvbnNlKHN0cmVhbSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGl0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSB5aWVsZCBfX2F3YWl0KHN0cmVhbSk7XG4gICAgICAgICAgICAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub25IZWFkZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMsIHJlc3BvbnNlLmhlYWRlcik7XG4gICAgICAgICAgICB5aWVsZCBfX2F3YWl0KHlpZWxkKiBfX2FzeW5jRGVsZWdhdG9yKF9fYXN5bmNWYWx1ZXMocmVzcG9uc2UubWVzc2FnZSkpKTtcbiAgICAgICAgICAgIChfYiA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5vblRyYWlsZXIpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKG9wdGlvbnMsIHJlc3BvbnNlLnRyYWlsZXIpO1xuICAgICAgICB9KTtcbiAgICB9KSgpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIC8vIENyZWF0ZSBhIG5ldyBpdGVyYWJsZSB0byBvbWl0IHRocm93L3JldHVybi5cbiAgICByZXR1cm4ge1xuICAgICAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdOiAoKSA9PiAoe1xuICAgICAgICAgICAgbmV4dDogKCkgPT4gaXQubmV4dCgpLFxuICAgICAgICB9KSxcbiAgICB9O1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBDb25uZWN0RXJyb3IgfSBmcm9tIFwiLi4vY29ubmVjdC1lcnJvci5qc1wiO1xuaW1wb3J0IHsgQ29kZSB9IGZyb20gXCIuLi9jb2RlLmpzXCI7XG4vKipcbiAqIENyZWF0ZSBhbiBBYm9ydENvbnRyb2xsZXIgdGhhdCBpcyBhdXRvbWF0aWNhbGx5IGFib3J0ZWQgaWYgb25lIG9mIHRoZSBnaXZlblxuICogc2lnbmFscyBpcyBhYm9ydGVkLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgdGhlIGxpbmtlZCBBYm9ydFNpZ25hbHMgY2FuIGJlIHVuZGVmaW5lZC5cbiAqXG4gKiBJZiB0aGUgY29udHJvbGxlciBvciBhbnkgb2YgdGhlIHNpZ25hbHMgaXMgYWJvcnRlZCwgYWxsIGV2ZW50IGxpc3RlbmVycyBhcmVcbiAqIHJlbW92ZWQuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMaW5rZWRBYm9ydENvbnRyb2xsZXIoLi4uc2lnbmFscykge1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgY29uc3Qgc2EgPSBzaWduYWxzXG4gICAgICAgIC5maWx0ZXIoKHMpID0+IHMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgLmNvbmNhdChjb250cm9sbGVyLnNpZ25hbCk7XG4gICAgZm9yIChjb25zdCBzaWduYWwgb2Ygc2EpIHtcbiAgICAgICAgaWYgKHNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgICAgICBvbkFib3J0LmFwcGx5KHNpZ25hbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbkFib3J0KCkge1xuICAgICAgICBpZiAoIWNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuYWJvcnQoZ2V0QWJvcnRTaWduYWxSZWFzb24odGhpcykpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoY29uc3Qgc2lnbmFsIG9mIHNhKSB7XG4gICAgICAgICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb250cm9sbGVyO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBkZWFkbGluZSBzaWduYWwuIFRoZSByZXR1cm5lZCBvYmplY3QgY29udGFpbnMgYW4gQWJvcnRTaWduYWwsIGJ1dFxuICogYWxzbyBhIGNsZWFudXAgZnVuY3Rpb24gdG8gc3RvcCB0aGUgdGltZXIsIHdoaWNoIG11c3QgYmUgY2FsbGVkIG9uY2UgdGhlXG4gKiBjYWxsaW5nIGNvZGUgaXMgbm8gbG9uZ2VyIGludGVyZXN0ZWQgaW4gdGhlIHNpZ25hbC5cbiAqXG4gKiBJZGVhbGx5LCB3ZSB3b3VsZCBzaW1wbHkgdXNlIEFib3J0U2lnbmFsLnRpbWVvdXQoKSwgYnV0IGl0IGlzIG5vdCB3aWRlbHlcbiAqIGF2YWlsYWJsZSB5ZXQuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEZWFkbGluZVNpZ25hbCh0aW1lb3V0TXMpIHtcbiAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgICBjb250cm9sbGVyLmFib3J0KG5ldyBDb25uZWN0RXJyb3IoXCJ0aGUgb3BlcmF0aW9uIHRpbWVkIG91dFwiLCBDb2RlLkRlYWRsaW5lRXhjZWVkZWQpKTtcbiAgICB9O1xuICAgIGxldCB0aW1lb3V0SWQ7XG4gICAgaWYgKHRpbWVvdXRNcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0aW1lb3V0TXMgPD0gMClcbiAgICAgICAgICAgIGxpc3RlbmVyKCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQobGlzdGVuZXIsIHRpbWVvdXRNcyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHNpZ25hbDogY29udHJvbGxlci5zaWduYWwsXG4gICAgICAgIGNsZWFudXA6ICgpID0+IGNsZWFyVGltZW91dCh0aW1lb3V0SWQpLFxuICAgIH07XG59XG4vKipcbiAqIFJldHVybnMgdGhlIHJlYXNvbiB3aHkgYW4gQWJvcnRTaWduYWwgd2FzIGFib3J0ZWQuIFJldHVybnMgdW5kZWZpbmVkIGlmIHRoZVxuICogc2lnbmFsIGhhcyBub3QgYmVlbiBhYm9ydGVkLlxuICpcbiAqIFRoZSBwcm9wZXJ0eSBBYm9ydFNpZ25hbC5yZWFzb24gaXMgbm90IHdpZGVseSBhdmFpbGFibGUuIFRoaXMgZnVuY3Rpb25cbiAqIHJldHVybnMgYW4gQWJvcnRFcnJvciBpZiB0aGUgc2lnbmFsIGlzIGFib3J0ZWQsIGJ1dCByZWFzb24gaXMgdW5kZWZpbmVkLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWJvcnRTaWduYWxSZWFzb24oc2lnbmFsKSB7XG4gICAgaWYgKCFzaWduYWwuYWJvcnRlZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoc2lnbmFsLnJlYXNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBzaWduYWwucmVhc29uO1xuICAgIH1cbiAgICAvLyBBYm9ydFNpZ25hbC5yZWFzb24gaXMgYXZhaWxhYmxlIGluIE5vZGUuanMgdjE2LCB2MTgsIGFuZCBsYXRlcixcbiAgICAvLyBhbmQgaW4gYWxsIGJyb3dzZXJzIHNpbmNlIGVhcmx5IDIwMjIuXG4gICAgY29uc3QgZSA9IG5ldyBFcnJvcihcIlRoaXMgb3BlcmF0aW9uIHdhcyBhYm9ydGVkXCIpO1xuICAgIGUubmFtZSA9IFwiQWJvcnRFcnJvclwiO1xuICAgIHJldHVybiBlO1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIGNyZWF0ZUNvbnRleHRWYWx1ZXMgY3JlYXRlcyBhIG5ldyBDb250ZXh0VmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dFZhbHVlcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZXQoa2V5KSB7XG4gICAgICAgICAgICByZXR1cm4ga2V5LmlkIGluIHRoaXMgPyB0aGlzW2tleS5pZF0gOiBrZXkuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpc1trZXkuaWRdID0gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcbiAgICAgICAgZGVsZXRlKGtleSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXNba2V5LmlkXTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgIH07XG59XG4vKipcbiAqIGNyZWF0ZUNvbnRleHRLZXkgY3JlYXRlcyBhIG5ldyBDb250ZXh0S2V5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dEtleShkZWZhdWx0VmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4geyBpZDogU3ltYm9sKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kZXNjcmlwdGlvbiksIGRlZmF1bHRWYWx1ZSB9O1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4vKipcbiAqIENyZWF0ZSBhIFVSTCBmb3IgdGhlIGdpdmVuIFJQQy4gVGhpcyBzaW1wbHkgYWRkcyB0aGUgcXVhbGlmaWVkXG4gKiBzZXJ2aWNlIG5hbWUsIGEgc2xhc2gsIGFuZCB0aGUgbWV0aG9kIG5hbWUgdG8gdGhlIHBhdGggb2YgdGhlIGdpdmVuXG4gKiBiYXNlVXJsLlxuICpcbiAqIEZvciBleGFtcGxlLCB0aGUgYmFzZVVyaSBodHRwczovL2V4YW1wbGUuY29tIGFuZCBtZXRob2QgXCJTYXlcIiBmcm9tXG4gKiB0aGUgc2VydmljZSBleGFtcGxlLkVsaXphU2VydmljZSByZXN1bHRzIGluOlxuICogaHR0cHM6Ly9leGFtcGxlLmNvbS9leGFtcGxlLkVsaXphU2VydmljZS9TYXlcbiAqXG4gKiBUaGlzIGZvcm1hdCBpcyB1c2VkIGJ5IHRoZSBwcm90b2NvbHMgQ29ubmVjdCwgZ1JQQyBhbmQgVHdpcnAuXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gYWxzbyBhY2NlcHRzIGEgcHJvdG9jb2wtcmVsYXRpdmUgYmFzZVVybC5cbiAqIElmIGdpdmVuIGFuIGVtcHR5IHN0cmluZyBvciBcIi9cIiBhcyBhIGJhc2VVcmwsIGl0IHJldHVybnMganVzdCB0aGVcbiAqIHBhdGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVNZXRob2RVcmwoYmFzZVVybCwgc2VydmljZSwgbWV0aG9kKSB7XG4gICAgY29uc3QgcyA9IHR5cGVvZiBzZXJ2aWNlID09IFwic3RyaW5nXCIgPyBzZXJ2aWNlIDogc2VydmljZS50eXBlTmFtZTtcbiAgICBjb25zdCBtID0gdHlwZW9mIG1ldGhvZCA9PSBcInN0cmluZ1wiID8gbWV0aG9kIDogbWV0aG9kLm5hbWU7XG4gICAgcmV0dXJuIGJhc2VVcmwudG9TdHJpbmcoKS5yZXBsYWNlKC9cXC8/JC8sIGAvJHtzfS8ke219YCk7XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tIFwiQGJ1ZmJ1aWxkL3Byb3RvYnVmXCI7XG4vKipcbiAqICBUYWtlcyBhIHBhcnRpYWwgcHJvdG9idWYgbWVzc2FnZXMgb2YgdGhlXG4gKiAgc3BlY2lmaWVkIG1lc3NhZ2UgdHlwZSBhcyBpbnB1dCwgYW5kIHJldHVybnMgZnVsbCBpbnN0YW5jZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUodHlwZSwgbWVzc2FnZSkge1xuICAgIHJldHVybiBtZXNzYWdlIGluc3RhbmNlb2YgdHlwZVxuICAgICAgICA/IG1lc3NhZ2VcbiAgICAgICAgOiBuZXcgdHlwZShtZXNzYWdlKTtcbn1cbi8qKlxuICogVGFrZXMgYW4gQXN5bmNJdGVyYWJsZSBvZiBwYXJ0aWFsIHByb3RvYnVmIG1lc3NhZ2VzIG9mIHRoZVxuICogc3BlY2lmaWVkIG1lc3NhZ2UgdHlwZSBhcyBpbnB1dCwgYW5kIHlpZWxkcyBmdWxsIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUl0ZXJhYmxlKG1lc3NhZ2VUeXBlLCBpbnB1dCkge1xuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybShyZXN1bHQpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5kb25lID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiByZXN1bHQuZG9uZSxcbiAgICAgICAgICAgIHZhbHVlOiBub3JtYWxpemUobWVzc2FnZVR5cGUsIHJlc3VsdC52YWx1ZSksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgICAgICAgICBjb25zdCBpdCA9IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgICAgICAgY29uc3QgcmVzID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6ICgpID0+IGl0Lm5leHQoKS50aGVuKHRyYW5zZm9ybSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGl0LnRocm93ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXMudGhyb3cgPSAoZSkgPT4gaXQudGhyb3coZSkudGhlbih0cmFuc2Zvcm0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdC5yZXR1cm4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJlcy5yZXR1cm4gPSAodikgPT4gaXQucmV0dXJuKHYpLnRoZW4odHJhbnNmb3JtKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9LFxuICAgIH07XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IENvbm5lY3RFcnJvciB9IGZyb20gXCIuLi9jb25uZWN0LWVycm9yLmpzXCI7XG5pbXBvcnQgeyBDb2RlIH0gZnJvbSBcIi4uL2NvZGUuanNcIjtcbmltcG9ydCB7IGFzc2VydFJlYWRNYXhCeXRlcywgYXNzZXJ0V3JpdGVNYXhCeXRlcyB9IGZyb20gXCIuL2xpbWl0LWlvLmpzXCI7XG4vKipcbiAqIFNldHMgZGVmYXVsdCBKU09OIHNlcmlhbGl6YXRpb24gb3B0aW9ucyBmb3IgY29ubmVjdC1lcy5cbiAqXG4gKiBXaXRoIHN0YW5kYXJkIHByb3RvYnVmIEpTT04gc2VyaWFsaXphdGlvbiwgdW5rbm93biBKU09OIGZpZWxkcyBhcmVcbiAqIHJlamVjdGVkIGJ5IGRlZmF1bHQuIEluIGNvbm5lY3QtZXMsIHVua25vd24gSlNPTiBmaWVsZHMgYXJlIGlnbm9yZWRcbiAqIGJ5IGRlZmF1bHQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRKc29uT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IG8gPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcbiAgICAoX2EgPSBvLmlnbm9yZVVua25vd25GaWVsZHMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IChvLmlnbm9yZVVua25vd25GaWVsZHMgPSB0cnVlKTtcbiAgICByZXR1cm4gbztcbn1cbi8qKlxuICogQ3JlYXRlIGFuIG9iamVjdCB0aGF0IHByb3ZpZGVzIGNvbnZlbmllbnQgYWNjZXNzIHRvIHJlcXVlc3QgYW5kIHJlc3BvbnNlXG4gKiBtZXNzYWdlIHNlcmlhbGl6YXRpb24gZm9yIGEgZ2l2ZW4gbWV0aG9kLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWV0aG9kU2VyaWFsaXphdGlvbkxvb2t1cChtZXRob2QsIGJpbmFyeU9wdGlvbnMsIGpzb25PcHRpb25zLCBsaW1pdE9wdGlvbnMpIHtcbiAgICBjb25zdCBpbnB1dEJpbmFyeSA9IGxpbWl0U2VyaWFsaXphdGlvbihjcmVhdGVCaW5hcnlTZXJpYWxpemF0aW9uKG1ldGhvZC5JLCBiaW5hcnlPcHRpb25zKSwgbGltaXRPcHRpb25zKTtcbiAgICBjb25zdCBpbnB1dEpzb24gPSBsaW1pdFNlcmlhbGl6YXRpb24oY3JlYXRlSnNvblNlcmlhbGl6YXRpb24obWV0aG9kLkksIGpzb25PcHRpb25zKSwgbGltaXRPcHRpb25zKTtcbiAgICBjb25zdCBvdXRwdXRCaW5hcnkgPSBsaW1pdFNlcmlhbGl6YXRpb24oY3JlYXRlQmluYXJ5U2VyaWFsaXphdGlvbihtZXRob2QuTywgYmluYXJ5T3B0aW9ucyksIGxpbWl0T3B0aW9ucyk7XG4gICAgY29uc3Qgb3V0cHV0SnNvbiA9IGxpbWl0U2VyaWFsaXphdGlvbihjcmVhdGVKc29uU2VyaWFsaXphdGlvbihtZXRob2QuTywganNvbk9wdGlvbnMpLCBsaW1pdE9wdGlvbnMpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGdldEkodXNlQmluYXJ5Rm9ybWF0KSB7XG4gICAgICAgICAgICByZXR1cm4gdXNlQmluYXJ5Rm9ybWF0ID8gaW5wdXRCaW5hcnkgOiBpbnB1dEpzb247XG4gICAgICAgIH0sXG4gICAgICAgIGdldE8odXNlQmluYXJ5Rm9ybWF0KSB7XG4gICAgICAgICAgICByZXR1cm4gdXNlQmluYXJ5Rm9ybWF0ID8gb3V0cHV0QmluYXJ5IDogb3V0cHV0SnNvbjtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIGZ1bmN0aW9ucyB0byBub3JtYWxpemUgYW5kIHNlcmlhbGl6ZSB0aGUgaW5wdXQgbWVzc2FnZVxuICogb2YgYW4gUlBDLCBhbmQgdG8gcGFyc2UgdGhlIG91dHB1dCBtZXNzYWdlIG9mIGFuIFJQQy5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNsaWVudE1ldGhvZFNlcmlhbGl6ZXJzKG1ldGhvZCwgdXNlQmluYXJ5Rm9ybWF0LCBqc29uT3B0aW9ucywgYmluYXJ5T3B0aW9ucykge1xuICAgIGNvbnN0IGlucHV0ID0gdXNlQmluYXJ5Rm9ybWF0XG4gICAgICAgID8gY3JlYXRlQmluYXJ5U2VyaWFsaXphdGlvbihtZXRob2QuSSwgYmluYXJ5T3B0aW9ucylcbiAgICAgICAgOiBjcmVhdGVKc29uU2VyaWFsaXphdGlvbihtZXRob2QuSSwganNvbk9wdGlvbnMpO1xuICAgIGNvbnN0IG91dHB1dCA9IHVzZUJpbmFyeUZvcm1hdFxuICAgICAgICA/IGNyZWF0ZUJpbmFyeVNlcmlhbGl6YXRpb24obWV0aG9kLk8sIGJpbmFyeU9wdGlvbnMpXG4gICAgICAgIDogY3JlYXRlSnNvblNlcmlhbGl6YXRpb24obWV0aG9kLk8sIGpzb25PcHRpb25zKTtcbiAgICByZXR1cm4geyBwYXJzZTogb3V0cHV0LnBhcnNlLCBzZXJpYWxpemU6IGlucHV0LnNlcmlhbGl6ZSB9O1xufVxuLyoqXG4gKiBBcHBseSBJL08gbGltaXRzIHRvIGEgU2VyaWFsaXphdGlvbiBvYmplY3QsIHJldHVybmluZyBhIG5ldyBvYmplY3QuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsaW1pdFNlcmlhbGl6YXRpb24oc2VyaWFsaXphdGlvbiwgbGltaXRPcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2VyaWFsaXplKGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IGJ5dGVzID0gc2VyaWFsaXphdGlvbi5zZXJpYWxpemUoZGF0YSk7XG4gICAgICAgICAgICBhc3NlcnRXcml0ZU1heEJ5dGVzKGxpbWl0T3B0aW9ucy53cml0ZU1heEJ5dGVzLCBieXRlcy5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBieXRlcztcbiAgICAgICAgfSxcbiAgICAgICAgcGFyc2UoZGF0YSkge1xuICAgICAgICAgICAgYXNzZXJ0UmVhZE1heEJ5dGVzKGxpbWl0T3B0aW9ucy5yZWFkTWF4Qnl0ZXMsIGRhdGEuYnl0ZUxlbmd0aCwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gc2VyaWFsaXphdGlvbi5wYXJzZShkYXRhKTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgU2VyaWFsaXphdGlvbiBvYmplY3QgZm9yIHNlcmlhbGl6aW5nIHRoZSBnaXZlbiBwcm90b2J1ZiBtZXNzYWdlXG4gKiB3aXRoIHRoZSBwcm90b2J1ZiBiaW5hcnkgZm9ybWF0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQmluYXJ5U2VyaWFsaXphdGlvbihtZXNzYWdlVHlwZSwgb3B0aW9ucykge1xuICAgIHJldHVybiB7XG4gICAgICAgIHBhcnNlKGRhdGEpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2VUeXBlLmZyb21CaW5hcnkoZGF0YSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG0gPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBTdHJpbmcoZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbm5lY3RFcnJvcihgcGFyc2UgYmluYXJ5OiAke219YCwgQ29kZS5JbnZhbGlkQXJndW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXJpYWxpemUoZGF0YSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0YS50b0JpbmFyeShvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbSA9IGUgaW5zdGFuY2VvZiBFcnJvciA/IGUubWVzc2FnZSA6IFN0cmluZyhlKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKGBzZXJpYWxpemUgYmluYXJ5OiAke219YCwgQ29kZS5JbnRlcm5hbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIFNlcmlhbGl6YXRpb24gb2JqZWN0IGZvciBzZXJpYWxpemluZyB0aGUgZ2l2ZW4gcHJvdG9idWYgbWVzc2FnZVxuICogd2l0aCB0aGUgcHJvdG9idWYgY2Fub25pY2FsIEpTT04gZW5jb2RpbmcuXG4gKlxuICogQnkgZGVmYXVsdCwgdW5rbm93biBmaWVsZHMgYXJlIGlnbm9yZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVKc29uU2VyaWFsaXphdGlvbihtZXNzYWdlVHlwZSwgb3B0aW9ucykge1xuICAgIHZhciBfYSwgX2I7XG4gICAgY29uc3QgdGV4dEVuY29kZXIgPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudGV4dEVuY29kZXIpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBUZXh0RW5jb2RlcigpO1xuICAgIGNvbnN0IHRleHREZWNvZGVyID0gKF9iID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnRleHREZWNvZGVyKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBuZXcgVGV4dERlY29kZXIoKTtcbiAgICBjb25zdCBvID0gZ2V0SnNvbk9wdGlvbnMob3B0aW9ucyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcGFyc2UoZGF0YSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBqc29uID0gdGV4dERlY29kZXIuZGVjb2RlKGRhdGEpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlVHlwZS5mcm9tSnNvblN0cmluZyhqc29uLCBvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgQ29ubmVjdEVycm9yLmZyb20oZSwgQ29kZS5JbnZhbGlkQXJndW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBzZXJpYWxpemUoZGF0YSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBqc29uID0gZGF0YS50b0pzb25TdHJpbmcobyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRleHRFbmNvZGVyLmVuY29kZShqc29uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgQ29ubmVjdEVycm9yLmZyb20oZSwgQ29kZS5JbnRlcm5hbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBSZWd1bGFyIEV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIGFueSB2YWxpZCBDb25uZWN0IENvbnRlbnQtVHlwZSBoZWFkZXIgdmFsdWUuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBjb250ZW50VHlwZVJlZ0V4cCA9IC9eYXBwbGljYXRpb25cXC8oY29ubmVjdFxcKyk/KD86KGpzb24pKD86OyA/Y2hhcnNldD11dGYtPzgpP3wocHJvdG8pKSQvaTtcbi8qKlxuICogUmVndWxhciBFeHByZXNzaW9uIHRoYXQgbWF0Y2hlcyBhIENvbm5lY3QgdW5hcnkgQ29udGVudC1UeXBlIGhlYWRlciB2YWx1ZS5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRUeXBlVW5hcnlSZWdFeHAgPSAvXmFwcGxpY2F0aW9uXFwvKD86anNvbig/OjsgP2NoYXJzZXQ9dXRmLT84KT98cHJvdG8pJC9pO1xuLyoqXG4gKiBSZWd1bGFyIEV4cHJlc3Npb24gdGhhdCBtYXRjaGVzIGEgQ29ubmVjdCBzdHJlYW1pbmcgQ29udGVudC1UeXBlIGhlYWRlciB2YWx1ZS5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRUeXBlU3RyZWFtUmVnRXhwID0gL15hcHBsaWNhdGlvblxcL2Nvbm5lY3RcXCs/KD86anNvbig/OjsgP2NoYXJzZXQ9dXRmLT84KT98cHJvdG8pJC9pO1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRUeXBlVW5hcnlQcm90byA9IFwiYXBwbGljYXRpb24vcHJvdG9cIjtcbmV4cG9ydCBjb25zdCBjb250ZW50VHlwZVVuYXJ5SnNvbiA9IFwiYXBwbGljYXRpb24vanNvblwiO1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRUeXBlU3RyZWFtUHJvdG8gPSBcImFwcGxpY2F0aW9uL2Nvbm5lY3QrcHJvdG9cIjtcbmV4cG9ydCBjb25zdCBjb250ZW50VHlwZVN0cmVhbUpzb24gPSBcImFwcGxpY2F0aW9uL2Nvbm5lY3QranNvblwiO1xuY29uc3QgZW5jb2RpbmdQcm90byA9IFwicHJvdG9cIjtcbmNvbnN0IGVuY29kaW5nSnNvbiA9IFwianNvblwiO1xuLyoqXG4gKiBQYXJzZSBhIENvbm5lY3QgQ29udGVudC1UeXBlIGhlYWRlci5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29udGVudFR5cGUoY29udGVudFR5cGUpIHtcbiAgICBjb25zdCBtYXRjaCA9IGNvbnRlbnRUeXBlID09PSBudWxsIHx8IGNvbnRlbnRUeXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb250ZW50VHlwZS5tYXRjaChjb250ZW50VHlwZVJlZ0V4cCk7XG4gICAgaWYgKCFtYXRjaCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCBzdHJlYW0gPSAhIW1hdGNoWzFdO1xuICAgIGNvbnN0IGJpbmFyeSA9ICEhbWF0Y2hbM107XG4gICAgcmV0dXJuIHsgc3RyZWFtLCBiaW5hcnkgfTtcbn1cbi8qKlxuICogUGFyc2UgYSBDb25uZWN0IEdldCBlbmNvZGluZyBxdWVyeSBwYXJhbWV0ZXIuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUVuY29kaW5nUXVlcnkoZW5jb2RpbmcpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICAgIGNhc2UgZW5jb2RpbmdQcm90bzpcbiAgICAgICAgICAgIHJldHVybiB7IHN0cmVhbTogZmFsc2UsIGJpbmFyeTogdHJ1ZSB9O1xuICAgICAgICBjYXNlIGVuY29kaW5nSnNvbjpcbiAgICAgICAgICAgIHJldHVybiB7IHN0cmVhbTogZmFsc2UsIGJpbmFyeTogZmFsc2UgfTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG52YXIgX19yZXN0ID0gKHRoaXMgJiYgdGhpcy5fX3Jlc3QpIHx8IGZ1bmN0aW9uIChzLCBlKSB7XG4gICAgdmFyIHQgPSB7fTtcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICAgIH1cbiAgICByZXR1cm4gdDtcbn07XG5pbXBvcnQgeyBNZXNzYWdlLCBwcm90b0Jhc2U2NCB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbmltcG9ydCB7IENvZGUgfSBmcm9tIFwiLi4vY29kZS5qc1wiO1xuaW1wb3J0IHsgQ29ubmVjdEVycm9yIH0gZnJvbSBcIi4uL2Nvbm5lY3QtZXJyb3IuanNcIjtcbmltcG9ydCB7IGNvZGVGcm9tU3RyaW5nLCBjb2RlVG9TdHJpbmcgfSBmcm9tIFwiLi9jb2RlLXN0cmluZy5qc1wiO1xuLyoqXG4gKiBQYXJzZSBhIENvbm5lY3QgZXJyb3IgZnJvbSBhIEpTT04gdmFsdWUuXG4gKiBXaWxsIHJldHVybiBhIENvbm5lY3RFcnJvciwgYW5kIHRocm93IHRoZSBwcm92aWRlZCBmYWxsYmFjayBpZiBwYXJzaW5nIGZhaWxlZC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yRnJvbUpzb24oanNvblZhbHVlLCBtZXRhZGF0YSwgZmFsbGJhY2spIHtcbiAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgbmV3IEhlYWRlcnMobWV0YWRhdGEpLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IGZhbGxiYWNrLm1ldGFkYXRhLmFwcGVuZChrZXksIHZhbHVlKSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YganNvblZhbHVlICE9PSBcIm9iamVjdFwiIHx8XG4gICAgICAgIGpzb25WYWx1ZSA9PSBudWxsIHx8XG4gICAgICAgIEFycmF5LmlzQXJyYXkoanNvblZhbHVlKSB8fFxuICAgICAgICAhKFwiY29kZVwiIGluIGpzb25WYWx1ZSkgfHxcbiAgICAgICAgdHlwZW9mIGpzb25WYWx1ZS5jb2RlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IGZhbGxiYWNrO1xuICAgIH1cbiAgICBjb25zdCBjb2RlID0gY29kZUZyb21TdHJpbmcoanNvblZhbHVlLmNvZGUpO1xuICAgIGlmIChjb2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgZmFsbGJhY2s7XG4gICAgfVxuICAgIGNvbnN0IG1lc3NhZ2UgPSBqc29uVmFsdWUubWVzc2FnZTtcbiAgICBpZiAobWVzc2FnZSAhPSBudWxsICYmIHR5cGVvZiBtZXNzYWdlICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IGZhbGxiYWNrO1xuICAgIH1cbiAgICBjb25zdCBlcnJvciA9IG5ldyBDb25uZWN0RXJyb3IobWVzc2FnZSAhPT0gbnVsbCAmJiBtZXNzYWdlICE9PSB2b2lkIDAgPyBtZXNzYWdlIDogXCJcIiwgY29kZSwgbWV0YWRhdGEpO1xuICAgIGlmIChcImRldGFpbHNcIiBpbiBqc29uVmFsdWUgJiYgQXJyYXkuaXNBcnJheShqc29uVmFsdWUuZGV0YWlscykpIHtcbiAgICAgICAgZm9yIChjb25zdCBkZXRhaWwgb2YganNvblZhbHVlLmRldGFpbHMpIHtcbiAgICAgICAgICAgIGlmIChkZXRhaWwgPT09IG51bGwgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgZGV0YWlsICE9IFwib2JqZWN0XCIgfHxcbiAgICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KGRldGFpbCkgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgZGV0YWlsLnR5cGUgIT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAgICAgICAgIHR5cGVvZiBkZXRhaWwudmFsdWUgIT0gXCJzdHJpbmdcIiB8fFxuICAgICAgICAgICAgICAgIChcImRlYnVnXCIgaW4gZGV0YWlsICYmIHR5cGVvZiBkZXRhaWwuZGVidWcgIT0gXCJvYmplY3RcIikpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBmYWxsYmFjaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZXJyb3IuZGV0YWlscy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZGV0YWlsLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm90b0Jhc2U2NC5kZWMoZGV0YWlsLnZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgZGVidWc6IGRldGFpbC5kZWJ1ZyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZmFsbGJhY2s7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVycm9yO1xufVxuLyoqXG4gKiBQYXJzZSBhIENvbm5lY3QgZXJyb3IgZnJvbSBhIHNlcmlhbGl6ZWQgSlNPTiB2YWx1ZS5cbiAqIFdpbGwgcmV0dXJuIGEgQ29ubmVjdEVycm9yLCBhbmQgdGhyb3cgdGhlIHByb3ZpZGVkIGZhbGxiYWNrIGlmIHBhcnNpbmcgZmFpbGVkLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JGcm9tSnNvbkJ5dGVzKGJ5dGVzLCBtZXRhZGF0YSwgZmFsbGJhY2spIHtcbiAgICBsZXQganNvblZhbHVlO1xuICAgIHRyeSB7XG4gICAgICAgIGpzb25WYWx1ZSA9IEpTT04ucGFyc2UobmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKGJ5dGVzKSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIHRocm93IGZhbGxiYWNrO1xuICAgIH1cbiAgICByZXR1cm4gZXJyb3JGcm9tSnNvbihqc29uVmFsdWUsIG1ldGFkYXRhLCBmYWxsYmFjayk7XG59XG4vKipcbiAqIFNlcmlhbGl6ZSB0aGUgZ2l2ZW4gZXJyb3IgdG8gSlNPTi5cbiAqXG4gKiBUaGUgSlNPTiBzZXJpYWxpemF0aW9uIG9wdGlvbnMgYXJlIHJlcXVpcmVkIHRvIHByb2R1Y2UgdGhlIG9wdGlvbmFsXG4gKiBodW1hbi1yZWFkYWJsZSByZXByZXNlbnRhdGlvbiBpbiB0aGUgXCJkZWJ1Z1wiIGtleSBpZiB0aGUgZGV0YWlsIHVzZXNcbiAqIGdvb2dsZS5wcm90b2J1Zi5BbnkuIElmIHNlcmlhbGl6YXRpb24gb2YgdGhlIFwiZGVidWdcIiB2YWx1ZSBmYWlscywgaXRcbiAqIGlzIHNpbGVudGx5IGRpc3JlZ2FyZGVkLlxuICpcbiAqIFNlZSBodHRwczovL2Nvbm5lY3RycGMuY29tL2RvY3MvcHJvdG9jb2wjZXJyb3ItZW5kLXN0cmVhbVxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JUb0pzb24oZXJyb3IsIGpzb25Xcml0ZU9wdGlvbnMpIHtcbiAgICBjb25zdCBvID0ge1xuICAgICAgICBjb2RlOiBjb2RlVG9TdHJpbmcoZXJyb3IuY29kZSksXG4gICAgfTtcbiAgICBpZiAoZXJyb3IucmF3TWVzc2FnZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIG8ubWVzc2FnZSA9IGVycm9yLnJhd01lc3NhZ2U7XG4gICAgfVxuICAgIGlmIChlcnJvci5kZXRhaWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgby5kZXRhaWxzID0gZXJyb3IuZGV0YWlsc1xuICAgICAgICAgICAgLm1hcCgodmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIE1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiB2YWx1ZS5nZXRUeXBlKCkudHlwZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZS50b0JpbmFyeSgpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaS5kZWJ1ZyA9IHZhbHVlLnRvSnNvbihqc29uV3JpdGVPcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gV2UgZGVsaWJlcmF0ZWx5IGlnbm9yZSBlcnJvcnMgdGhhdCBtYXkgb2NjdXIgd2hlbiBzZXJpYWxpemluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBhIG1lc3NhZ2UgdG8gSlNPTiAodGhlIG1lc3NhZ2UgY29udGFpbnMgYW4gQW55KS5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJhdGlvbmFsZSBpcyB0aGF0IHdlIGFyZSBvbmx5IHRyeWluZyB0byBwcm92aWRlIG9wdGlvbmFsXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlYnVnIGluZm9ybWF0aW9uLlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5tYXAoKF9hKSA9PiB7XG4gICAgICAgICAgICB2YXIgeyB2YWx1ZSB9ID0gX2EsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcInZhbHVlXCJdKTtcbiAgICAgICAgICAgIHJldHVybiAoT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXN0KSwgeyB2YWx1ZTogcHJvdG9CYXNlNjQuZW5jKHZhbHVlKSB9KSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbztcbn1cbi8qKlxuICogU2VyaWFsaXplIHRoZSBnaXZlbiBlcnJvciB0byBKU09OLiBUaGlzIGNhbGxzIGVycm9yVG9Kc29uKCksIGJ1dCBzdHJpbmdpZmllc1xuICogdGhlIHJlc3VsdCwgYW5kIGNvbnZlcnRzIGl0IGludG8gYSBVSW50OEFycmF5LlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXJyb3JUb0pzb25CeXRlcyhlcnJvciwganNvbldyaXRlT3B0aW9ucykge1xuICAgIGNvbnN0IHRleHRFbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QganNvbk9iamVjdCA9IGVycm9yVG9Kc29uKGVycm9yLCBqc29uV3JpdGVPcHRpb25zKTtcbiAgICAgICAgY29uc3QganNvblN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGpzb25PYmplY3QpO1xuICAgICAgICByZXR1cm4gdGV4dEVuY29kZXIuZW5jb2RlKGpzb25TdHJpbmcpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBtID0gZSBpbnN0YW5jZW9mIEVycm9yID8gZS5tZXNzYWdlIDogU3RyaW5nKGUpO1xuICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKGBmYWlsZWQgdG8gc2VyaWFsaXplIENvbm5lY3QgRXJyb3I6ICR7bX1gLCBDb2RlLkludGVybmFsKTtcbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbmltcG9ydCB7IGVycm9yRnJvbUpzb24sIGVycm9yVG9Kc29uIH0gZnJvbSBcIi4vZXJyb3ItanNvbi5qc1wiO1xuaW1wb3J0IHsgYXBwZW5kSGVhZGVycyB9IGZyb20gXCIuLi9odHRwLWhlYWRlcnMuanNcIjtcbmltcG9ydCB7IENvbm5lY3RFcnJvciB9IGZyb20gXCIuLi9jb25uZWN0LWVycm9yLmpzXCI7XG5pbXBvcnQgeyBDb2RlIH0gZnJvbSBcIi4uL2NvZGUuanNcIjtcbi8qKlxuICogZW5kU3RyZWFtRmxhZyBpbmRpY2F0ZXMgdGhhdCB0aGUgZGF0YSBpbiBhIEVudmVsb3BlZE1lc3NhZ2VcbiAqIGlzIGEgRW5kU3RyZWFtUmVzcG9uc2Ugb2YgdGhlIENvbm5lY3QgcHJvdG9jb2wuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBlbmRTdHJlYW1GbGFnID0gMGIwMDAwMDAxMDtcbi8qKlxuICogUGFyc2UgYW4gRW5kU3RyZWFtUmVzcG9uc2Ugb2YgdGhlIENvbm5lY3QgcHJvdG9jb2wuXG4gKiBUaHJvd3MgYSBDb25uZWN0RXJyb3Igb24gbWFsZm9ybWVkIGlucHV0LlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5kU3RyZWFtRnJvbUpzb24oZGF0YSkge1xuICAgIGNvbnN0IHBhcnNlRXJyID0gbmV3IENvbm5lY3RFcnJvcihcImludmFsaWQgZW5kIHN0cmVhbVwiLCBDb2RlLkludmFsaWRBcmd1bWVudCk7XG4gICAgbGV0IGpzb25WYWx1ZTtcbiAgICB0cnkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hc3NpZ25tZW50XG4gICAgICAgIGpzb25WYWx1ZSA9IEpTT04ucGFyc2UodHlwZW9mIGRhdGEgPT0gXCJzdHJpbmdcIiA/IGRhdGEgOiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoZGF0YSkpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBwYXJzZUVycjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBqc29uVmFsdWUgIT0gXCJvYmplY3RcIiB8fFxuICAgICAgICBqc29uVmFsdWUgPT0gbnVsbCB8fFxuICAgICAgICBBcnJheS5pc0FycmF5KGpzb25WYWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgcGFyc2VFcnI7XG4gICAgfVxuICAgIGNvbnN0IG1ldGFkYXRhID0gbmV3IEhlYWRlcnMoKTtcbiAgICBpZiAoXCJtZXRhZGF0YVwiIGluIGpzb25WYWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIGpzb25WYWx1ZS5tZXRhZGF0YSAhPSBcIm9iamVjdFwiIHx8XG4gICAgICAgICAgICBqc29uVmFsdWUubWV0YWRhdGEgPT0gbnVsbCB8fFxuICAgICAgICAgICAgQXJyYXkuaXNBcnJheShqc29uVmFsdWUubWV0YWRhdGEpKSB7XG4gICAgICAgICAgICB0aHJvdyBwYXJzZUVycjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlc10gb2YgT2JqZWN0LmVudHJpZXMoanNvblZhbHVlLm1ldGFkYXRhKSkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykgfHxcbiAgICAgICAgICAgICAgICB2YWx1ZXMuc29tZSgodmFsdWUpID0+IHR5cGVvZiB2YWx1ZSAhPSBcInN0cmluZ1wiKSkge1xuICAgICAgICAgICAgICAgIHRocm93IHBhcnNlRXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXJyb3IgPSBcImVycm9yXCIgaW4ganNvblZhbHVlXG4gICAgICAgID8gZXJyb3JGcm9tSnNvbihqc29uVmFsdWUuZXJyb3IsIG1ldGFkYXRhLCBwYXJzZUVycilcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgbWV0YWRhdGEsIGVycm9yIH07XG59XG4vKipcbiAqIFNlcmlhbGl6ZSB0aGUgZ2l2ZW4gRW5kU3RyZWFtUmVzcG9uc2UgdG8gSlNPTi5cbiAqXG4gKiBUaGUgSlNPTiBzZXJpYWxpemF0aW9uIG9wdGlvbnMgYXJlIHJlcXVpcmVkIHRvIHByb2R1Y2UgdGhlIG9wdGlvbmFsXG4gKiBodW1hbi1yZWFkYWJsZSByZXByZXNlbnRhdGlvbiBvZiBlcnJvciBkZXRhaWxzIGlmIHRoZSBkZXRhaWwgdXNlc1xuICogZ29vZ2xlLnByb3RvYnVmLkFueS5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9jb25uZWN0cnBjLmNvbS9kb2NzL3Byb3RvY29sI2Vycm9yLWVuZC1zdHJlYW1cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuZFN0cmVhbVRvSnNvbihtZXRhZGF0YSwgZXJyb3IsIGpzb25Xcml0ZU9wdGlvbnMpIHtcbiAgICBjb25zdCBlcyA9IHt9O1xuICAgIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVzLmVycm9yID0gZXJyb3JUb0pzb24oZXJyb3IsIGpzb25Xcml0ZU9wdGlvbnMpO1xuICAgICAgICBtZXRhZGF0YSA9IGFwcGVuZEhlYWRlcnMobWV0YWRhdGEsIGVycm9yLm1ldGFkYXRhKTtcbiAgICB9XG4gICAgbGV0IGhhc01ldGFkYXRhID0gZmFsc2U7XG4gICAgY29uc3QgbWQgPSB7fTtcbiAgICBtZXRhZGF0YS5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgIGhhc01ldGFkYXRhID0gdHJ1ZTtcbiAgICAgICAgbWRba2V5XSA9IFt2YWx1ZV07XG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bm5lY2Vzc2FyeS1jb25kaXRpb25cbiAgICBpZiAoaGFzTWV0YWRhdGEpIHtcbiAgICAgICAgZXMubWV0YWRhdGEgPSBtZDtcbiAgICB9XG4gICAgcmV0dXJuIGVzO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBTZXJpYWxpemF0aW9uIG9iamVjdCB0aGF0IHNlcmlhbGl6ZXMgYSBDb25uZWN0IEVuZFN0cmVhbVJlc3BvbnNlLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRW5kU3RyZWFtU2VyaWFsaXphdGlvbihvcHRpb25zKSB7XG4gICAgY29uc3QgdGV4dEVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXJpYWxpemUoZGF0YSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBqc29uT2JqZWN0ID0gZW5kU3RyZWFtVG9Kc29uKGRhdGEubWV0YWRhdGEsIGRhdGEuZXJyb3IsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGpzb25TdHJpbmcgPSBKU09OLnN0cmluZ2lmeShqc29uT2JqZWN0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dEVuY29kZXIuZW5jb2RlKGpzb25TdHJpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtID0gZSBpbnN0YW5jZW9mIEVycm9yID8gZS5tZXNzYWdlIDogU3RyaW5nKGUpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoYGZhaWxlZCB0byBzZXJpYWxpemUgRW5kU3RyZWFtUmVzcG9uc2U6ICR7bX1gLCBDb2RlLkludGVybmFsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcGFyc2UoZGF0YSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW5kU3RyZWFtRnJvbUpzb24oZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG0gPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBTdHJpbmcoZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IENvbm5lY3RFcnJvcihgZmFpbGVkIHRvIHBhcnNlIEVuZFN0cmVhbVJlc3BvbnNlOiAke219YCwgQ29kZS5JbnZhbGlkQXJndW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgIH07XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBjb25zdCBoZWFkZXJDb250ZW50VHlwZSA9IFwiQ29udGVudC1UeXBlXCI7XG5leHBvcnQgY29uc3QgaGVhZGVyVW5hcnlDb250ZW50TGVuZ3RoID0gXCJDb250ZW50LUxlbmd0aFwiO1xuZXhwb3J0IGNvbnN0IGhlYWRlclVuYXJ5RW5jb2RpbmcgPSBcIkNvbnRlbnQtRW5jb2RpbmdcIjtcbmV4cG9ydCBjb25zdCBoZWFkZXJTdHJlYW1FbmNvZGluZyA9IFwiQ29ubmVjdC1Db250ZW50LUVuY29kaW5nXCI7XG5leHBvcnQgY29uc3QgaGVhZGVyVW5hcnlBY2NlcHRFbmNvZGluZyA9IFwiQWNjZXB0LUVuY29kaW5nXCI7XG5leHBvcnQgY29uc3QgaGVhZGVyU3RyZWFtQWNjZXB0RW5jb2RpbmcgPSBcIkNvbm5lY3QtQWNjZXB0LUVuY29kaW5nXCI7XG5leHBvcnQgY29uc3QgaGVhZGVyVGltZW91dCA9IFwiQ29ubmVjdC1UaW1lb3V0LU1zXCI7XG5leHBvcnQgY29uc3QgaGVhZGVyUHJvdG9jb2xWZXJzaW9uID0gXCJDb25uZWN0LVByb3RvY29sLVZlcnNpb25cIjtcbmV4cG9ydCBjb25zdCBoZWFkZXJVc2VyQWdlbnQgPSBcIlVzZXItQWdlbnRcIjtcbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgQ29kZSB9IGZyb20gXCIuLi9jb2RlLmpzXCI7XG4vKipcbiAqIERldGVybWluZSB0aGUgQ29ubmVjdCBlcnJvciBjb2RlIGZvciB0aGUgZ2l2ZW4gSFRUUCBzdGF0dXMgY29kZS5cbiAqIFNlZSBodHRwczovL2Nvbm5lY3RycGMuY29tL2RvY3MvcHJvdG9jb2wjZXJyb3ItY29kZXNcbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZGVGcm9tSHR0cFN0YXR1cyhodHRwU3RhdHVzKSB7XG4gICAgc3dpdGNoIChodHRwU3RhdHVzKSB7XG4gICAgICAgIGNhc2UgNDAwOiAvLyBCYWQgUmVxdWVzdFxuICAgICAgICAgICAgcmV0dXJuIENvZGUuSW52YWxpZEFyZ3VtZW50O1xuICAgICAgICBjYXNlIDQwMTogLy8gVW5hdXRob3JpemVkXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5VbmF1dGhlbnRpY2F0ZWQ7XG4gICAgICAgIGNhc2UgNDAzOiAvLyBGb3JiaWRkZW5cbiAgICAgICAgICAgIHJldHVybiBDb2RlLlBlcm1pc3Npb25EZW5pZWQ7XG4gICAgICAgIGNhc2UgNDA0OiAvLyBOb3QgRm91bmRcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlVuaW1wbGVtZW50ZWQ7XG4gICAgICAgIGNhc2UgNDA4OiAvLyBSZXF1ZXN0IFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBDb2RlLkRlYWRsaW5lRXhjZWVkZWQ7XG4gICAgICAgIGNhc2UgNDA5OiAvLyBDb25mbGljdFxuICAgICAgICAgICAgcmV0dXJuIENvZGUuQWJvcnRlZDtcbiAgICAgICAgY2FzZSA0MTI6IC8vIFByZWNvbmRpdGlvbiBGYWlsZWRcbiAgICAgICAgICAgIHJldHVybiBDb2RlLkZhaWxlZFByZWNvbmRpdGlvbjtcbiAgICAgICAgY2FzZSA0MTM6IC8vIFBheWxvYWQgVG9vIExhcmdlXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5SZXNvdXJjZUV4aGF1c3RlZDtcbiAgICAgICAgY2FzZSA0MTU6IC8vIFVuc3VwcG9ydGVkIE1lZGlhIFR5cGVcbiAgICAgICAgICAgIHJldHVybiBDb2RlLkludGVybmFsO1xuICAgICAgICBjYXNlIDQyOTogLy8gVG9vIE1hbnkgUmVxdWVzdHNcbiAgICAgICAgICAgIHJldHVybiBDb2RlLlVuYXZhaWxhYmxlO1xuICAgICAgICBjYXNlIDQzMTogLy8gUmVxdWVzdCBIZWFkZXIgRmllbGRzIFRvbyBMYXJnZVxuICAgICAgICAgICAgcmV0dXJuIENvZGUuUmVzb3VyY2VFeGhhdXN0ZWQ7XG4gICAgICAgIGNhc2UgNTAyOiAvLyBCYWQgR2F0ZXdheVxuICAgICAgICAgICAgcmV0dXJuIENvZGUuVW5hdmFpbGFibGU7XG4gICAgICAgIGNhc2UgNTAzOiAvLyBTZXJ2aWNlIFVuYXZhaWxhYmxlXG4gICAgICAgICAgICByZXR1cm4gQ29kZS5VbmF2YWlsYWJsZTtcbiAgICAgICAgY2FzZSA1MDQ6IC8vIEdhdGV3YXkgVGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIENvZGUuVW5hdmFpbGFibGU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gQ29kZS5Vbmtub3duO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIEhUVFAgc3RhdHVzIGNvZGUgZm9yIHRoZSBnaXZlbiBDb25uZWN0IGNvZGUuXG4gKiBTZWUgaHR0cHM6Ly9jb25uZWN0cnBjLmNvbS9kb2NzL3Byb3RvY29sI2Vycm9yLWNvZGVzXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2RlVG9IdHRwU3RhdHVzKGNvZGUpIHtcbiAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgY2FzZSBDb2RlLkNhbmNlbGVkOlxuICAgICAgICAgICAgcmV0dXJuIDQwODsgLy8gUmVxdWVzdCBUaW1lb3V0XG4gICAgICAgIGNhc2UgQ29kZS5Vbmtub3duOlxuICAgICAgICAgICAgcmV0dXJuIDUwMDsgLy8gSW50ZXJuYWwgU2VydmVyIEVycm9yXG4gICAgICAgIGNhc2UgQ29kZS5JbnZhbGlkQXJndW1lbnQ6XG4gICAgICAgICAgICByZXR1cm4gNDAwOyAvLyBCYWQgUmVxdWVzdFxuICAgICAgICBjYXNlIENvZGUuRGVhZGxpbmVFeGNlZWRlZDpcbiAgICAgICAgICAgIHJldHVybiA0MDg7IC8vIFJlcXVlc3QgVGltZW91dFxuICAgICAgICBjYXNlIENvZGUuTm90Rm91bmQ6XG4gICAgICAgICAgICByZXR1cm4gNDA0OyAvLyBOb3QgRm91bmRcbiAgICAgICAgY2FzZSBDb2RlLkFscmVhZHlFeGlzdHM6XG4gICAgICAgICAgICByZXR1cm4gNDA5OyAvLyBDb25mbGljdFxuICAgICAgICBjYXNlIENvZGUuUGVybWlzc2lvbkRlbmllZDpcbiAgICAgICAgICAgIHJldHVybiA0MDM7IC8vIEZvcmJpZGRlblxuICAgICAgICBjYXNlIENvZGUuUmVzb3VyY2VFeGhhdXN0ZWQ6XG4gICAgICAgICAgICByZXR1cm4gNDI5OyAvLyBUb28gTWFueSBSZXF1ZXN0c1xuICAgICAgICBjYXNlIENvZGUuRmFpbGVkUHJlY29uZGl0aW9uOlxuICAgICAgICAgICAgcmV0dXJuIDQxMjsgLy8gUHJlY29uZGl0aW9uIEZhaWxlZFxuICAgICAgICBjYXNlIENvZGUuQWJvcnRlZDpcbiAgICAgICAgICAgIHJldHVybiA0MDk7IC8vIENvbmZsaWN0XG4gICAgICAgIGNhc2UgQ29kZS5PdXRPZlJhbmdlOlxuICAgICAgICAgICAgcmV0dXJuIDQwMDsgLy8gQmFkIFJlcXVlc3RcbiAgICAgICAgY2FzZSBDb2RlLlVuaW1wbGVtZW50ZWQ6XG4gICAgICAgICAgICByZXR1cm4gNDA0OyAvLyBOb3QgRm91bmRcbiAgICAgICAgY2FzZSBDb2RlLkludGVybmFsOlxuICAgICAgICAgICAgcmV0dXJuIDUwMDsgLy8gSW50ZXJuYWwgU2VydmVyIEVycm9yXG4gICAgICAgIGNhc2UgQ29kZS5VbmF2YWlsYWJsZTpcbiAgICAgICAgICAgIHJldHVybiA1MDM7IC8vIFNlcnZpY2UgVW5hdmFpbGFibGVcbiAgICAgICAgY2FzZSBDb2RlLkRhdGFMb3NzOlxuICAgICAgICAgICAgcmV0dXJuIDUwMDsgLy8gSW50ZXJuYWwgU2VydmVyIEVycm9yXG4gICAgICAgIGNhc2UgQ29kZS5VbmF1dGhlbnRpY2F0ZWQ6XG4gICAgICAgICAgICByZXR1cm4gNDAxOyAvLyBVbmF1dGhvcml6ZWRcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiA1MDA7IC8vIHNhbWUgYXMgQ29kZVVua25vd25cbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbi8qKlxuICogSW4gdW5hcnkgUlBDcywgQ29ubmVjdCB0cmFuc3BvcnRzIHRyYWlsaW5nIG1ldGFkYXRhIGFzIHJlc3BvbnNlIGhlYWRlclxuICogZmllbGRzLCBwcmVmaXhlZCB3aXRoIFwidHJhaWxlci1cIi5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIGRlbXV4ZXMgaGVhZGVycyBhbmQgdHJhaWxlcnMgaW50byB0d28gc2VwYXJhdGUgSGVhZGVyc1xuICogb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyYWlsZXJEZW11eChoZWFkZXIpIHtcbiAgICBjb25zdCBoID0gbmV3IEhlYWRlcnMoKSwgdCA9IG5ldyBIZWFkZXJzKCk7XG4gICAgaGVhZGVyLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoXCJ0cmFpbGVyLVwiKSkge1xuICAgICAgICAgICAgdC5zZXQoa2V5LnN1YnN0cmluZyg4KSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gW2gsIHRdO1xufVxuLyoqXG4gKiBJbiB1bmFyeSBSUENzLCBDb25uZWN0IHRyYW5zcG9ydHMgdHJhaWxpbmcgbWV0YWRhdGEgYXMgcmVzcG9uc2UgaGVhZGVyXG4gKiBmaWVsZHMsIHByZWZpeGVkIHdpdGggXCJ0cmFpbGVyLVwiLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gbXV4ZXMgYSBoZWFkZXIgYW5kIGEgdHJhaWxlciBpbnRvIGEgc2luZ2xlIEhlYWRlcnMgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhaWxlck11eChoZWFkZXIsIHRyYWlsZXIpIHtcbiAgICBjb25zdCBoID0gbmV3IEhlYWRlcnMoaGVhZGVyKTtcbiAgICB0cmFpbGVyLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgaC5zZXQoYHRyYWlsZXItJHtrZXl9YCwgdmFsdWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBoO1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBoZWFkZXJQcm90b2NvbFZlcnNpb24gfSBmcm9tIFwiLi9oZWFkZXJzLmpzXCI7XG5pbXBvcnQgeyBwYXJhbUNvbm5lY3RWZXJzaW9uIH0gZnJvbSBcIi4vcXVlcnktcGFyYW1zLmpzXCI7XG5pbXBvcnQgeyBDb25uZWN0RXJyb3IgfSBmcm9tIFwiLi4vY29ubmVjdC1lcnJvci5qc1wiO1xuaW1wb3J0IHsgQ29kZSB9IGZyb20gXCIuLi9jb2RlLmpzXCI7XG4vKipcbiAqIFRoZSBvbmx5IGtub3cgdmFsdWUgZm9yIHRoZSBoZWFkZXIgQ29ubmVjdC1Qcm90b2NvbC1WZXJzaW9uLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgY29uc3QgcHJvdG9jb2xWZXJzaW9uID0gXCIxXCI7XG4vKipcbiAqIFJlcXVpcmVzIHRoZSBDb25uZWN0LVByb3RvY29sLVZlcnNpb24gaGVhZGVyIHRvIGJlIHByZXNlbnQgd2l0aCB0aGUgZXhwZWN0ZWRcbiAqIHZhbHVlLiBSYWlzZXMgYSBDb25uZWN0RXJyb3Igd2l0aCBDb2RlLkludmFsaWRBcmd1bWVudCBvdGhlcndpc2UuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlUHJvdG9jb2xWZXJzaW9uSGVhZGVyKHJlcXVlc3RIZWFkZXIpIHtcbiAgICBjb25zdCB2ID0gcmVxdWVzdEhlYWRlci5nZXQoaGVhZGVyUHJvdG9jb2xWZXJzaW9uKTtcbiAgICBpZiAodiA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKGBtaXNzaW5nIHJlcXVpcmVkIGhlYWRlcjogc2V0ICR7aGVhZGVyUHJvdG9jb2xWZXJzaW9ufSB0byBcIiR7cHJvdG9jb2xWZXJzaW9ufVwiYCwgQ29kZS5JbnZhbGlkQXJndW1lbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2ICE9PSBwcm90b2NvbFZlcnNpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IENvbm5lY3RFcnJvcihgJHtoZWFkZXJQcm90b2NvbFZlcnNpb259IG11c3QgYmUgXCIke3Byb3RvY29sVmVyc2lvbn1cIjogZ290IFwiJHt2fVwiYCwgQ29kZS5JbnZhbGlkQXJndW1lbnQpO1xuICAgIH1cbn1cbi8qKlxuICogUmVxdWlyZXMgdGhlIGNvbm5lY3QgcXVlcnkgcGFyYW1ldGVyIHRvIGJlIHByZXNlbnQgd2l0aCB0aGUgZXhwZWN0ZWQgdmFsdWUuXG4gKiBSYWlzZXMgYSBDb25uZWN0RXJyb3Igd2l0aCBDb2RlLkludmFsaWRBcmd1bWVudCBvdGhlcndpc2UuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlUHJvdG9jb2xWZXJzaW9uUGFyYW0ocXVlcnlQYXJhbXMpIHtcbiAgICBjb25zdCB2ID0gcXVlcnlQYXJhbXMuZ2V0KHBhcmFtQ29ubmVjdFZlcnNpb24pO1xuICAgIGlmICh2ID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoYG1pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBzZXQgJHtwYXJhbUNvbm5lY3RWZXJzaW9ufSB0byBcInYke3Byb3RvY29sVmVyc2lvbn1cImAsIENvZGUuSW52YWxpZEFyZ3VtZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodiAhPT0gYHYke3Byb3RvY29sVmVyc2lvbn1gKSB7XG4gICAgICAgIHRocm93IG5ldyBDb25uZWN0RXJyb3IoYCR7cGFyYW1Db25uZWN0VmVyc2lvbn0gbXVzdCBiZSBcInYke3Byb3RvY29sVmVyc2lvbn1cIjogZ290IFwiJHt2fVwiYCwgQ29kZS5JbnZhbGlkQXJndW1lbnQpO1xuICAgIH1cbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgTWV0aG9kS2luZCB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbmltcG9ydCB7IGhlYWRlckNvbnRlbnRUeXBlLCBoZWFkZXJTdHJlYW1BY2NlcHRFbmNvZGluZywgaGVhZGVyU3RyZWFtRW5jb2RpbmcsIGhlYWRlclVuYXJ5QWNjZXB0RW5jb2RpbmcsIGhlYWRlclVuYXJ5RW5jb2RpbmcsIGhlYWRlclRpbWVvdXQsIGhlYWRlclByb3RvY29sVmVyc2lvbiwgaGVhZGVyVXNlckFnZW50LCB9IGZyb20gXCIuL2hlYWRlcnMuanNcIjtcbmltcG9ydCB7IHByb3RvY29sVmVyc2lvbiB9IGZyb20gXCIuL3ZlcnNpb24uanNcIjtcbmltcG9ydCB7IGNvbnRlbnRUeXBlU3RyZWFtSnNvbiwgY29udGVudFR5cGVTdHJlYW1Qcm90bywgY29udGVudFR5cGVVbmFyeUpzb24sIGNvbnRlbnRUeXBlVW5hcnlQcm90bywgfSBmcm9tIFwiLi9jb250ZW50LXR5cGUuanNcIjtcbi8qKlxuICogQ3JlYXRlcyBoZWFkZXJzIGZvciBhIENvbm5lY3QgcmVxdWVzdC5cbiAqXG4gKiBAcHJpdmF0ZSBJbnRlcm5hbCBjb2RlLCBkb2VzIG5vdCBmb2xsb3cgc2VtYW50aWMgdmVyc2lvbmluZy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RIZWFkZXIobWV0aG9kS2luZCwgdXNlQmluYXJ5Rm9ybWF0LCB0aW1lb3V0TXMsIHVzZXJQcm92aWRlZEhlYWRlcnMsIHNldFVzZXJBZ2VudCkge1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBIZWFkZXJzKHVzZXJQcm92aWRlZEhlYWRlcnMgIT09IG51bGwgJiYgdXNlclByb3ZpZGVkSGVhZGVycyAhPT0gdm9pZCAwID8gdXNlclByb3ZpZGVkSGVhZGVycyA6IHt9KTtcbiAgICBpZiAodGltZW91dE1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVzdWx0LnNldChoZWFkZXJUaW1lb3V0LCBgJHt0aW1lb3V0TXN9YCk7XG4gICAgfVxuICAgIHJlc3VsdC5zZXQoaGVhZGVyQ29udGVudFR5cGUsIG1ldGhvZEtpbmQgPT0gTWV0aG9kS2luZC5VbmFyeVxuICAgICAgICA/IHVzZUJpbmFyeUZvcm1hdFxuICAgICAgICAgICAgPyBjb250ZW50VHlwZVVuYXJ5UHJvdG9cbiAgICAgICAgICAgIDogY29udGVudFR5cGVVbmFyeUpzb25cbiAgICAgICAgOiB1c2VCaW5hcnlGb3JtYXRcbiAgICAgICAgICAgID8gY29udGVudFR5cGVTdHJlYW1Qcm90b1xuICAgICAgICAgICAgOiBjb250ZW50VHlwZVN0cmVhbUpzb24pO1xuICAgIHJlc3VsdC5zZXQoaGVhZGVyUHJvdG9jb2xWZXJzaW9uLCBwcm90b2NvbFZlcnNpb24pO1xuICAgIGlmIChzZXRVc2VyQWdlbnQpIHtcbiAgICAgICAgcmVzdWx0LnNldChoZWFkZXJVc2VyQWdlbnQsIFwiY29ubmVjdC1lcy8xLjMuMFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxuICogQ3JlYXRlcyBoZWFkZXJzIGZvciBhIENvbm5lY3QgcmVxdWVzdCB3aXRoIGNvbXByZXNzaW9uLlxuICpcbiAqIE5vdGUgdGhhdCB3ZSBhbHdheXMgc2V0IHRoZSBDb250ZW50LUVuY29kaW5nIGhlYWRlciBmb3IgdW5hcnkgbWV0aG9kcy5cbiAqIEl0IGlzIHVwIHRvIHRoZSBjYWxsZXIgdG8gZGVjaWRlIHdoZXRoZXIgdG8gYXBwbHkgY29tcHJlc3Npb24gLSBhbmQgcmVtb3ZlXG4gKiB0aGUgaGVhZGVyIGlmIGNvbXByZXNzaW9uIGlzIG5vdCB1c2VkLCBmb3IgZXhhbXBsZSBiZWNhdXNlIHRoZSBwYXlsb2FkIGlzXG4gKiB0b28gc21hbGwgdG8gbWFrZSBjb21wcmVzc2lvbiBlZmZlY3RpdmUuXG4gKlxuICogQHByaXZhdGUgSW50ZXJuYWwgY29kZSwgZG9lcyBub3QgZm9sbG93IHNlbWFudGljIHZlcnNpb25pbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXF1ZXN0SGVhZGVyV2l0aENvbXByZXNzaW9uKG1ldGhvZEtpbmQsIHVzZUJpbmFyeUZvcm1hdCwgdGltZW91dE1zLCB1c2VyUHJvdmlkZWRIZWFkZXJzLCBhY2NlcHRDb21wcmVzc2lvbiwgc2VuZENvbXByZXNzaW9uLCBzZXRVc2VyQWdlbnQpIHtcbiAgICBjb25zdCByZXN1bHQgPSByZXF1ZXN0SGVhZGVyKG1ldGhvZEtpbmQsIHVzZUJpbmFyeUZvcm1hdCwgdGltZW91dE1zLCB1c2VyUHJvdmlkZWRIZWFkZXJzLCBzZXRVc2VyQWdlbnQpO1xuICAgIGlmIChzZW5kQ29tcHJlc3Npb24gIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBuYW1lID0gbWV0aG9kS2luZCA9PSBNZXRob2RLaW5kLlVuYXJ5XG4gICAgICAgICAgICA/IGhlYWRlclVuYXJ5RW5jb2RpbmdcbiAgICAgICAgICAgIDogaGVhZGVyU3RyZWFtRW5jb2Rpbmc7XG4gICAgICAgIHJlc3VsdC5zZXQobmFtZSwgc2VuZENvbXByZXNzaW9uLm5hbWUpO1xuICAgIH1cbiAgICBpZiAoYWNjZXB0Q29tcHJlc3Npb24ubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBuYW1lID0gbWV0aG9kS2luZCA9PSBNZXRob2RLaW5kLlVuYXJ5XG4gICAgICAgICAgICA/IGhlYWRlclVuYXJ5QWNjZXB0RW5jb2RpbmdcbiAgICAgICAgICAgIDogaGVhZGVyU3RyZWFtQWNjZXB0RW5jb2Rpbmc7XG4gICAgICAgIHJlc3VsdC5zZXQobmFtZSwgYWNjZXB0Q29tcHJlc3Npb24ubWFwKChjKSA9PiBjLm5hbWUpLmpvaW4oXCIsXCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgTWV0aG9kS2luZCB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbmltcG9ydCB7IENvZGUgfSBmcm9tIFwiLi4vY29kZS5qc1wiO1xuaW1wb3J0IHsgY29kZUZyb21IdHRwU3RhdHVzIH0gZnJvbSBcIi4vaHR0cC1zdGF0dXMuanNcIjtcbmltcG9ydCB7IENvbm5lY3RFcnJvciB9IGZyb20gXCIuLi9jb25uZWN0LWVycm9yLmpzXCI7XG5pbXBvcnQgeyBwYXJzZUNvbnRlbnRUeXBlIH0gZnJvbSBcIi4vY29udGVudC10eXBlLmpzXCI7XG5pbXBvcnQgeyBoZWFkZXJTdHJlYW1FbmNvZGluZywgaGVhZGVyVW5hcnlFbmNvZGluZyB9IGZyb20gXCIuL2hlYWRlcnMuanNcIjtcbi8qKlxuICogVmFsaWRhdGVzIHJlc3BvbnNlIHN0YXR1cyBhbmQgaGVhZGVyIGZvciB0aGUgQ29ubmVjdCBwcm90b2NvbC5cbiAqIFRocm93cyBhIENvbm5lY3RFcnJvciBpZiB0aGUgaGVhZGVyIGluZGljYXRlcyBhbiBlcnJvciwgb3IgaWZcbiAqIHRoZSBjb250ZW50IHR5cGUgaXMgdW5leHBlY3RlZCwgd2l0aCB0aGUgZm9sbG93aW5nIGV4Y2VwdGlvbjpcbiAqIEZvciB1bmFyeSBSUENzIHdpdGggYW4gSFRUUCBlcnJvciBzdGF0dXMsIHRoaXMgcmV0dXJucyBhbiBlcnJvclxuICogZGVyaXZlZCBmcm9tIHRoZSBIVFRQIHN0YXR1cyBpbnN0ZWFkIG9mIHRocm93aW5nIGl0LCBnaXZpbmcgYW5cbiAqIGltcGxlbWVudGF0aW9uIGEgY2hhbmNlIHRvIHBhcnNlIGEgQ29ubmVjdCBlcnJvciBmcm9tIHRoZSB3aXJlLlxuICpcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVSZXNwb25zZShtZXRob2RLaW5kLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICBjb25zdCBtaW1lVHlwZSA9IGhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuICAgIGNvbnN0IHBhcnNlZFR5cGUgPSBwYXJzZUNvbnRlbnRUeXBlKG1pbWVUeXBlKTtcbiAgICBpZiAoc3RhdHVzICE9PSAyMDApIHtcbiAgICAgICAgY29uc3QgZXJyb3JGcm9tU3RhdHVzID0gbmV3IENvbm5lY3RFcnJvcihgSFRUUCAke3N0YXR1c31gLCBjb2RlRnJvbUh0dHBTdGF0dXMoc3RhdHVzKSwgaGVhZGVycyk7XG4gICAgICAgIC8vIElmIHBhcnNlZFR5cGUgaXMgZGVmaW5lZCBhbmQgaXQgaXMgbm90IGJpbmFyeSwgdGhlbiB0aGlzIGlzIGEgdW5hcnkgSlNPTiByZXNwb25zZVxuICAgICAgICBpZiAobWV0aG9kS2luZCA9PSBNZXRob2RLaW5kLlVuYXJ5ICYmIHBhcnNlZFR5cGUgJiYgIXBhcnNlZFR5cGUuYmluYXJ5KSB7XG4gICAgICAgICAgICByZXR1cm4geyBpc1VuYXJ5RXJyb3I6IHRydWUsIHVuYXJ5RXJyb3I6IGVycm9yRnJvbVN0YXR1cyB9O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IGVycm9yRnJvbVN0YXR1cztcbiAgICB9XG4gICAgcmV0dXJuIHsgaXNVbmFyeUVycm9yOiBmYWxzZSB9O1xufVxuLyoqXG4gKiBWYWxpZGF0ZXMgcmVzcG9uc2Ugc3RhdHVzIGFuZCBoZWFkZXIgZm9yIHRoZSBDb25uZWN0IHByb3RvY29sLlxuICogVGhpcyBmdW5jdGlvbiBpcyBpZGVudGljYWwgdG8gdmFsaWRhdGVSZXNwb25zZSgpLCBidXQgYWxzbyB2ZXJpZmllc1xuICogdGhhdCBhIGdpdmVuIGVuY29kaW5nIGhlYWRlciBpcyBhY2NlcHRhYmxlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVJlc3BvbnNlV2l0aENvbXByZXNzaW9uKG1ldGhvZEtpbmQsIGFjY2VwdENvbXByZXNzaW9uLCBzdGF0dXMsIGhlYWRlcnMpIHtcbiAgICBsZXQgY29tcHJlc3Npb247XG4gICAgY29uc3QgZW5jb2RpbmcgPSBoZWFkZXJzLmdldChtZXRob2RLaW5kID09IE1ldGhvZEtpbmQuVW5hcnkgPyBoZWFkZXJVbmFyeUVuY29kaW5nIDogaGVhZGVyU3RyZWFtRW5jb2RpbmcpO1xuICAgIGlmIChlbmNvZGluZyAhPSBudWxsICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkgIT09IFwiaWRlbnRpdHlcIikge1xuICAgICAgICBjb21wcmVzc2lvbiA9IGFjY2VwdENvbXByZXNzaW9uLmZpbmQoKGMpID0+IGMubmFtZSA9PT0gZW5jb2RpbmcpO1xuICAgICAgICBpZiAoIWNvbXByZXNzaW9uKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgQ29ubmVjdEVycm9yKGB1bnN1cHBvcnRlZCByZXNwb25zZSBlbmNvZGluZyBcIiR7ZW5jb2Rpbmd9XCJgLCBDb2RlLkludmFsaWRBcmd1bWVudCwgaGVhZGVycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyBjb21wcmVzc2lvbiB9LCB2YWxpZGF0ZVJlc3BvbnNlKG1ldGhvZEtpbmQsIHN0YXR1cywgaGVhZGVycykpO1xufVxuIiwgIi8vIENvcHlyaWdodCAyMDIxLTIwMjQgVGhlIENvbm5lY3QgQXV0aG9yc1xuLy9cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4vLyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4vLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbi8vIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbi8vIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuLy8gbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5pbXBvcnQgeyBNZXNzYWdlLCBwcm90b0Jhc2U2NCB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbmltcG9ydCB7IGhlYWRlckNvbnRlbnRUeXBlLCBoZWFkZXJQcm90b2NvbFZlcnNpb24sIGhlYWRlclVuYXJ5QWNjZXB0RW5jb2RpbmcsIGhlYWRlclVuYXJ5Q29udGVudExlbmd0aCwgaGVhZGVyVW5hcnlFbmNvZGluZywgfSBmcm9tIFwiLi9oZWFkZXJzLmpzXCI7XG5pbXBvcnQgeyBwcm90b2NvbFZlcnNpb24gfSBmcm9tIFwiLi92ZXJzaW9uLmpzXCI7XG5jb25zdCBjb250ZW50VHlwZVByZWZpeCA9IFwiYXBwbGljYXRpb24vXCI7XG5mdW5jdGlvbiBlbmNvZGVNZXNzYWdlRm9yVXJsKG1lc3NhZ2UsIHVzZUJhc2U2NCkge1xuICAgIGlmICh1c2VCYXNlNjQpIHtcbiAgICAgICAgLy8gVE9ETyhqY2hhZHdpY2stYnVmKTogVGhyZWUgcmVnZXggcmVwbGFjZXMgc2VlbXMgZXhjZXNzaXZlLlxuICAgICAgICAvLyBDYW4gd2UgbWFrZSBwcm90b0Jhc2U2NC5lbmMgbW9yZSBmbGV4aWJsZT9cbiAgICAgICAgcmV0dXJuIHByb3RvQmFzZTY0XG4gICAgICAgICAgICAuZW5jKG1lc3NhZ2UpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFwrL2csIFwiLVwiKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCBcIl9cIilcbiAgICAgICAgICAgIC5yZXBsYWNlKC89KyQvLCBcIlwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQobmV3IFRleHREZWNvZGVyKCkuZGVjb2RlKG1lc3NhZ2UpKTtcbiAgICB9XG59XG4vKipcbiAqIEBwcml2YXRlIEludGVybmFsIGNvZGUsIGRvZXMgbm90IGZvbGxvdyBzZW1hbnRpYyB2ZXJzaW9uaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtQ29ubmVjdFBvc3RUb0dldFJlcXVlc3QocmVxdWVzdCwgbWVzc2FnZSwgdXNlQmFzZTY0KSB7XG4gICAgbGV0IHF1ZXJ5ID0gYD9jb25uZWN0PXYke3Byb3RvY29sVmVyc2lvbn1gO1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gcmVxdWVzdC5oZWFkZXIuZ2V0KGhlYWRlckNvbnRlbnRUeXBlKTtcbiAgICBpZiAoKGNvbnRlbnRUeXBlID09PSBudWxsIHx8IGNvbnRlbnRUeXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb250ZW50VHlwZS5pbmRleE9mKGNvbnRlbnRUeXBlUHJlZml4KSkgPT09IDApIHtcbiAgICAgICAgcXVlcnkgKz1cbiAgICAgICAgICAgIFwiJmVuY29kaW5nPVwiICtcbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoY29udGVudFR5cGUuc2xpY2UoY29udGVudFR5cGVQcmVmaXgubGVuZ3RoKSk7XG4gICAgfVxuICAgIGNvbnN0IGNvbXByZXNzaW9uID0gcmVxdWVzdC5oZWFkZXIuZ2V0KGhlYWRlclVuYXJ5RW5jb2RpbmcpO1xuICAgIGlmIChjb21wcmVzc2lvbiAhPT0gbnVsbCAmJiBjb21wcmVzc2lvbiAhPT0gXCJpZGVudGl0eVwiKSB7XG4gICAgICAgIHF1ZXJ5ICs9IFwiJmNvbXByZXNzaW9uPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNvbXByZXNzaW9uKTtcbiAgICAgICAgLy8gRm9yY2UgYmFzZTY0IGZvciBjb21wcmVzc2VkIHBheWxvYWRzLlxuICAgICAgICB1c2VCYXNlNjQgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodXNlQmFzZTY0KSB7XG4gICAgICAgIHF1ZXJ5ICs9IFwiJmJhc2U2ND0xXCI7XG4gICAgfVxuICAgIHF1ZXJ5ICs9IFwiJm1lc3NhZ2U9XCIgKyBlbmNvZGVNZXNzYWdlRm9yVXJsKG1lc3NhZ2UsIHVzZUJhc2U2NCk7XG4gICAgY29uc3QgdXJsID0gcmVxdWVzdC51cmwgKyBxdWVyeTtcbiAgICAvLyBPbWl0IGhlYWRlcnMgdGhhdCBhcmUgbm90IHVzZWQgZm9yIHVuYXJ5IEdFVCByZXF1ZXN0cy5cbiAgICBjb25zdCBoZWFkZXIgPSBuZXcgSGVhZGVycyhyZXF1ZXN0LmhlYWRlcik7XG4gICAgW1xuICAgICAgICBoZWFkZXJQcm90b2NvbFZlcnNpb24sXG4gICAgICAgIGhlYWRlckNvbnRlbnRUeXBlLFxuICAgICAgICBoZWFkZXJVbmFyeUNvbnRlbnRMZW5ndGgsXG4gICAgICAgIGhlYWRlclVuYXJ5RW5jb2RpbmcsXG4gICAgICAgIGhlYWRlclVuYXJ5QWNjZXB0RW5jb2RpbmcsXG4gICAgXS5mb3JFYWNoKChoKSA9PiBoZWFkZXIuZGVsZXRlKGgpKTtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCByZXF1ZXN0KSwgeyBpbml0OiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3QuaW5pdCksIHsgbWV0aG9kOiBcIkdFVFwiIH0pLCB1cmwsXG4gICAgICAgIGhlYWRlciB9KTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuaW1wb3J0IHsgQ29ubmVjdEVycm9yIH0gZnJvbSBcIi4uL2Nvbm5lY3QtZXJyb3IuanNcIjtcbmltcG9ydCB7IGNyZWF0ZURlYWRsaW5lU2lnbmFsLCBjcmVhdGVMaW5rZWRBYm9ydENvbnRyb2xsZXIsIGdldEFib3J0U2lnbmFsUmVhc29uLCB9IGZyb20gXCIuL3NpZ25hbHMuanNcIjtcbmltcG9ydCB7IG5vcm1hbGl6ZSwgbm9ybWFsaXplSXRlcmFibGUgfSBmcm9tIFwiLi9ub3JtYWxpemUuanNcIjtcbi8qKlxuICogUnVucyBhIHVuYXJ5IG1ldGhvZCB3aXRoIHRoZSBnaXZlbiBpbnRlcmNlcHRvcnMuIE5vdGUgdGhhdCB0aGlzIGZ1bmN0aW9uXG4gKiBpcyBvbmx5IHVzZWQgd2hlbiBpbXBsZW1lbnRpbmcgYSBUcmFuc3BvcnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydW5VbmFyeUNhbGwob3B0KSB7XG4gICAgY29uc3QgbmV4dCA9IGFwcGx5SW50ZXJjZXB0b3JzKG9wdC5uZXh0LCBvcHQuaW50ZXJjZXB0b3JzKTtcbiAgICBjb25zdCBbc2lnbmFsLCBhYm9ydCwgZG9uZV0gPSBzZXR1cFNpZ25hbChvcHQpO1xuICAgIGNvbnN0IHJlcSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0LnJlcSksIHsgbWVzc2FnZTogbm9ybWFsaXplKG9wdC5yZXEubWV0aG9kLkksIG9wdC5yZXEubWVzc2FnZSksIHNpZ25hbCB9KTtcbiAgICByZXR1cm4gbmV4dChyZXEpLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBkb25lKCk7XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfSwgYWJvcnQpO1xufVxuLyoqXG4gKiBSdW5zIGEgc2VydmVyLXN0cmVhbWluZyBtZXRob2Qgd2l0aCB0aGUgZ2l2ZW4gaW50ZXJjZXB0b3JzLiBOb3RlIHRoYXQgdGhpc1xuICogZnVuY3Rpb24gaXMgb25seSB1c2VkIHdoZW4gaW1wbGVtZW50aW5nIGEgVHJhbnNwb3J0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcnVuU3RyZWFtaW5nQ2FsbChvcHQpIHtcbiAgICBjb25zdCBuZXh0ID0gYXBwbHlJbnRlcmNlcHRvcnMob3B0Lm5leHQsIG9wdC5pbnRlcmNlcHRvcnMpO1xuICAgIGNvbnN0IFtzaWduYWwsIGFib3J0LCBkb25lXSA9IHNldHVwU2lnbmFsKG9wdCk7XG4gICAgY29uc3QgcmVxID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvcHQucmVxKSwgeyBtZXNzYWdlOiBub3JtYWxpemVJdGVyYWJsZShvcHQucmVxLm1ldGhvZC5JLCBvcHQucmVxLm1lc3NhZ2UpLCBzaWduYWwgfSk7XG4gICAgbGV0IGRvbmVDYWxsZWQgPSBmYWxzZTtcbiAgICAvLyBDYWxsIHJldHVybiBvbiB0aGUgcmVxdWVzdCBpdGVyYWJsZSB0byBpbmRpY2F0ZVxuICAgIC8vIHRoYXQgd2Ugd2lsbCBubyBsb25nZXIgY29uc3VtZSBpdCBhbmQgaXQgc2hvdWxkXG4gICAgLy8gY2xlYW51cCBhbnkgYWxsb2NhdGVkIHJlc291cmNlcy5cbiAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgaXQgPSBvcHQucmVxLm1lc3NhZ2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgIC8vIElmIHRoZSBzaWduYWwgaXMgYWJvcnRlZCBkdWUgdG8gYW4gZXJyb3IsIHdlIHdhbnQgdG8gdGhyb3dcbiAgICAgICAgLy8gdGhlIGVycm9yIHRvIHRoZSByZXF1ZXN0IGl0ZXJhdG9yLlxuICAgICAgICBpZiAoIWRvbmVDYWxsZWQpIHtcbiAgICAgICAgICAgIChfYSA9IGl0LnRocm93KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbChpdCwgdGhpcy5yZWFzb24pLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyB0aHJvdyByZXR1cm5zIGEgcHJvbWlzZSwgd2hpY2ggd2UgZG9uJ3QgY2FyZSBhYm91dC5cbiAgICAgICAgICAgICAgICAvL1xuICAgICAgICAgICAgICAgIC8vIFVuY2F1Z2h0IHByb21pc2VzIGFyZSB0aHJvd24gYXQgc29tZXRpbWUvc29tZXdoZXJlIGJ5IHRoZSBldmVudCBsb29wLFxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgdG8gZW5zdXJlIGVycm9yIGlzIGNhdWdodCBhbmQgaWdub3JlZC5cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIChfYiA9IGl0LnJldHVybikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoaXQpLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgIC8vIHJldHVybiByZXR1cm5zIGEgcHJvbWlzZSwgd2hpY2ggd2UgZG9uJ3QgY2FyZSBhYm91dC5cbiAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAvLyBVbmNhdWdodCBwcm9taXNlcyBhcmUgdGhyb3duIGF0IHNvbWV0aW1lL3NvbWV3aGVyZSBieSB0aGUgZXZlbnQgbG9vcCxcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdG8gZW5zdXJlIGVycm9yIGlzIGNhdWdodCBhbmQgaWdub3JlZC5cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5leHQocmVxKS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVzKSwgeyBtZXNzYWdlOiB7XG4gICAgICAgICAgICAgICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXQgPSByZXMubWVzc2FnZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGl0Lm5leHQoKS50aGVuKChyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyLmRvbmUgPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9uZUNhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgYWJvcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGRlbGliZXJhdGVseSBvbWl0IHRocm93L3JldHVybi5cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSB9KTtcbiAgICB9LCBhYm9ydCk7XG59XG4vKipcbiAqIENyZWF0ZSBhbiBBYm9ydFNpZ25hbCBmb3IgVHJhbnNwb3J0IGltcGxlbWVudGF0aW9ucy4gVGhlIHNpZ25hbCBpcyBhdmFpbGFibGVcbiAqIGluIFVuYXJ5UmVxdWVzdCBhbmQgU3RyZWFtaW5nUmVxdWVzdCwgYW5kIGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBjYWxsIGlzXG4gKiBhYm9ydGVkICh2aWEgYSB0aW1lb3V0IG9yIGV4cGxpY2l0IGNhbmNlbGxhdGlvbiksIGVycm9yZWQgKGUuZy4gd2hlbiByZWFkaW5nXG4gKiBhbiBlcnJvciBmcm9tIHRoZSBzZXJ2ZXIgZnJvbSB0aGUgd2lyZSksIG9yIGZpbmlzaGVkIHN1Y2Nlc3NmdWxseS5cbiAqXG4gKiBUcmFuc3BvcnQgaW1wbGVtZW50YXRpb25zIGNhbiBwYXNzIHRoZSBzaWduYWwgdG8gSFRUUCBjbGllbnRzIHRvIGVuc3VyZSB0aGF0XG4gKiB0aGVyZSBhcmUgbm8gdW51c2VkIGNvbm5lY3Rpb25zIGxlYWsuXG4gKlxuICogUmV0dXJucyBhIHR1cGxlOlxuICogWzBdOiBUaGUgc2lnbmFsLCB3aGljaCBpcyBhbHNvIGFib3J0ZWQgaWYgdGhlIG9wdGlvbmFsIGRlYWRsaW5lIGlzIHJlYWNoZWQuXG4gKiBbMV06IEZ1bmN0aW9uIHRvIGNhbGwgaWYgdGhlIFRyYW5zcG9ydCBlbmNvdW50ZXJlZCBhbiBlcnJvci5cbiAqIFsyXTogRnVuY3Rpb24gdG8gY2FsbCBpZiB0aGUgVHJhbnNwb3J0IGZpbmlzaGVkIHdpdGhvdXQgYW4gZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIHNldHVwU2lnbmFsKG9wdCkge1xuICAgIGNvbnN0IHsgc2lnbmFsLCBjbGVhbnVwIH0gPSBjcmVhdGVEZWFkbGluZVNpZ25hbChvcHQudGltZW91dE1zKTtcbiAgICBjb25zdCBjb250cm9sbGVyID0gY3JlYXRlTGlua2VkQWJvcnRDb250cm9sbGVyKG9wdC5zaWduYWwsIHNpZ25hbCk7XG4gICAgcmV0dXJuIFtcbiAgICAgICAgY29udHJvbGxlci5zaWduYWwsXG4gICAgICAgIGZ1bmN0aW9uIGFib3J0KHJlYXNvbikge1xuICAgICAgICAgICAgLy8gV2UgcGVlayBhdCB0aGUgZGVhZGxpbmUgc2lnbmFsIGJlY2F1c2UgZmV0Y2goKSB3aWxsIHRocm93IGFuIGVycm9yIG9uXG4gICAgICAgICAgICAvLyBhYm9ydCB0aGF0IGRpc2NhcmRzIHRoZSBzaWduYWwgcmVhc29uLlxuICAgICAgICAgICAgY29uc3QgZSA9IENvbm5lY3RFcnJvci5mcm9tKHNpZ25hbC5hYm9ydGVkID8gZ2V0QWJvcnRTaWduYWxSZWFzb24oc2lnbmFsKSA6IHJlYXNvbik7XG4gICAgICAgICAgICBjb250cm9sbGVyLmFib3J0KGUpO1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiBkb25lKCkge1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgICAgICB9LFxuICAgIF07XG59XG4vKipcbiAqIGFwcGx5SW50ZXJjZXB0b3JzIHRha2VzIHRoZSBnaXZlbiBVbmFyeUZuIG9yIFNlcnZlclN0cmVhbWluZ0ZuLCBhbmQgd3JhcHNcbiAqIGl0IHdpdGggZWFjaCBvZiB0aGUgZ2l2ZW4gaW50ZXJjZXB0b3JzLCByZXR1cm5pbmcgYSBuZXcgVW5hcnlGbiBvclxuICogU2VydmVyU3RyZWFtaW5nRm4uXG4gKi9cbmZ1bmN0aW9uIGFwcGx5SW50ZXJjZXB0b3JzKG5leHQsIGludGVyY2VwdG9ycykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKChfYSA9IGludGVyY2VwdG9ycyA9PT0gbnVsbCB8fCBpbnRlcmNlcHRvcnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGludGVyY2VwdG9ycy5jb25jYXQoKS5yZXZlcnNlKCkucmVkdWNlKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgKG4sIGkpID0+IGkobiksIG5leHQpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXh0KTtcbn1cbiIsICIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0IFRoZSBDb25uZWN0IEF1dGhvcnNcbi8vXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4vLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbi8vIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbi8vIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgdGhlIGZldGNoIEFQSSBpcyBhdmFpbGFibGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRGZXRjaEFwaSgpIHtcbiAgICB0cnkge1xuICAgICAgICBuZXcgSGVhZGVycygpO1xuICAgIH1cbiAgICBjYXRjaCAoXykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjb25uZWN0LXdlYiByZXF1aXJlcyB0aGUgZmV0Y2ggQVBJLiBBcmUgeW91IHJ1bm5pbmcgb24gYW4gb2xkIHZlcnNpb24gb2YgTm9kZS5qcz8gTm9kZS5qcyBpcyBub3Qgc3VwcG9ydGVkIGluIENvbm5lY3QgZm9yIFdlYiAtIHBsZWFzZSBzdGF5IHR1bmVkIGZvciBDb25uZWN0IGZvciBOb2RlLlwiKTtcbiAgICB9XG59XG4iLCAiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCBUaGUgQ29ubmVjdCBBdXRob3JzXG4vL1xuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbi8vIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuLy8gV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4vLyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbnZhciBfX2F3YWl0ID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0KSB8fCBmdW5jdGlvbiAodikgeyByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTsgfVxudmFyIF9fYXN5bmNHZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fYXN5bmNHZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiLCBhd2FpdFJldHVybiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgICBmdW5jdGlvbiBhd2FpdFJldHVybihmKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZiwgcmVqZWN0KTsgfTsgfVxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpZiAoZ1tuXSkgeyBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyBpZiAoZikgaVtuXSA9IGYoaVtuXSk7IH0gfVxuICAgIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XG4gICAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cbn07XG5pbXBvcnQgeyBNZXNzYWdlLCBNZXRob2RJZGVtcG90ZW5jeSwgTWV0aG9kS2luZCB9IGZyb20gXCJAYnVmYnVpbGQvcHJvdG9idWZcIjtcbmltcG9ydCB7IGFwcGVuZEhlYWRlcnMsIGNyZWF0ZUNvbnRleHRWYWx1ZXMgfSBmcm9tIFwiQGNvbm5lY3RycGMvY29ubmVjdFwiO1xuaW1wb3J0IHsgY3JlYXRlQ2xpZW50TWV0aG9kU2VyaWFsaXplcnMsIGNyZWF0ZUVudmVsb3BlUmVhZGFibGVTdHJlYW0sIGNyZWF0ZU1ldGhvZFVybCwgZ2V0SnNvbk9wdGlvbnMsIGVuY29kZUVudmVsb3BlLCBydW5TdHJlYW1pbmdDYWxsLCBydW5VbmFyeUNhbGwsIH0gZnJvbSBcIkBjb25uZWN0cnBjL2Nvbm5lY3QvcHJvdG9jb2xcIjtcbmltcG9ydCB7IGVuZFN0cmVhbUZsYWcsIGVuZFN0cmVhbUZyb21Kc29uLCBlcnJvckZyb21Kc29uLCByZXF1ZXN0SGVhZGVyLCB0cmFpbGVyRGVtdXgsIHRyYW5zZm9ybUNvbm5lY3RQb3N0VG9HZXRSZXF1ZXN0LCB2YWxpZGF0ZVJlc3BvbnNlLCB9IGZyb20gXCJAY29ubmVjdHJwYy9jb25uZWN0L3Byb3RvY29sLWNvbm5lY3RcIjtcbmltcG9ydCB7IGFzc2VydEZldGNoQXBpIH0gZnJvbSBcIi4vYXNzZXJ0LWZldGNoLWFwaS5qc1wiO1xuLyoqXG4gKiBDcmVhdGUgYSBUcmFuc3BvcnQgZm9yIHRoZSBDb25uZWN0IHByb3RvY29sLCB3aGljaCBtYWtlcyB1bmFyeSBhbmRcbiAqIHNlcnZlci1zdHJlYW1pbmcgbWV0aG9kcyBhdmFpbGFibGUgdG8gd2ViIGJyb3dzZXJzLiBJdCB1c2VzIHRoZSBmZXRjaFxuICogQVBJIHRvIG1ha2UgSFRUUCByZXF1ZXN0cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbm5lY3RUcmFuc3BvcnQob3B0aW9ucykge1xuICAgIHZhciBfYTtcbiAgICBhc3NlcnRGZXRjaEFwaSgpO1xuICAgIGNvbnN0IHVzZUJpbmFyeUZvcm1hdCA9IChfYSA9IG9wdGlvbnMudXNlQmluYXJ5Rm9ybWF0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBhc3luYyB1bmFyeShzZXJ2aWNlLCBtZXRob2QsIHNpZ25hbCwgdGltZW91dE1zLCBoZWFkZXIsIG1lc3NhZ2UsIGNvbnRleHRWYWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHsgc2VyaWFsaXplLCBwYXJzZSB9ID0gY3JlYXRlQ2xpZW50TWV0aG9kU2VyaWFsaXplcnMobWV0aG9kLCB1c2VCaW5hcnlGb3JtYXQsIG9wdGlvbnMuanNvbk9wdGlvbnMsIG9wdGlvbnMuYmluYXJ5T3B0aW9ucyk7XG4gICAgICAgICAgICB0aW1lb3V0TXMgPVxuICAgICAgICAgICAgICAgIHRpbWVvdXRNcyA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgID8gb3B0aW9ucy5kZWZhdWx0VGltZW91dE1zXG4gICAgICAgICAgICAgICAgICAgIDogdGltZW91dE1zIDw9IDBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRpbWVvdXRNcztcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCBydW5VbmFyeUNhbGwoe1xuICAgICAgICAgICAgICAgIGludGVyY2VwdG9yczogb3B0aW9ucy5pbnRlcmNlcHRvcnMsXG4gICAgICAgICAgICAgICAgc2lnbmFsLFxuICAgICAgICAgICAgICAgIHRpbWVvdXRNcyxcbiAgICAgICAgICAgICAgICByZXE6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGNyZWF0ZU1ldGhvZFVybChvcHRpb25zLmJhc2VVcmwsIHNlcnZpY2UsIG1ldGhvZCksXG4gICAgICAgICAgICAgICAgICAgIGluaXQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogKF9hID0gb3B0aW9ucy5jcmVkZW50aWFscykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJzYW1lLW9yaWdpblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVkaXJlY3Q6IFwiZXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IFwiY29yc1wiLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IHJlcXVlc3RIZWFkZXIobWV0aG9kLmtpbmQsIHVzZUJpbmFyeUZvcm1hdCwgdGltZW91dE1zLCBoZWFkZXIsIGZhbHNlKSxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFZhbHVlczogY29udGV4dFZhbHVlcyAhPT0gbnVsbCAmJiBjb250ZXh0VmFsdWVzICE9PSB2b2lkIDAgPyBjb250ZXh0VmFsdWVzIDogY3JlYXRlQ29udGV4dFZhbHVlcygpLFxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbmV4dDogYXN5bmMgKHJlcSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVzZUdldCA9IG9wdGlvbnMudXNlSHR0cEdldCA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kLmlkZW1wb3RlbmN5ID09PSBNZXRob2RJZGVtcG90ZW5jeS5Ob1NpZGVFZmZlY3RzO1xuICAgICAgICAgICAgICAgICAgICBsZXQgYm9keSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VHZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IHRyYW5zZm9ybUNvbm5lY3RQb3N0VG9HZXRSZXF1ZXN0KHJlcSwgc2VyaWFsaXplKHJlcS5tZXNzYWdlKSwgdXNlQmluYXJ5Rm9ybWF0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSBzZXJpYWxpemUocmVxLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZldGNoID0gKF9hID0gb3B0aW9ucy5mZXRjaCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZ2xvYmFsVGhpcy5mZXRjaDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChyZXEudXJsLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHJlcS5pbml0KSwgeyBoZWFkZXJzOiByZXEuaGVhZGVyLCBzaWduYWw6IHJlcS5zaWduYWwsIGJvZHkgfSkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGlzVW5hcnlFcnJvciwgdW5hcnlFcnJvciB9ID0gdmFsaWRhdGVSZXNwb25zZShtZXRob2Qua2luZCwgcmVzcG9uc2Uuc3RhdHVzLCByZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzVW5hcnlFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyb3JGcm9tSnNvbigoYXdhaXQgcmVzcG9uc2UuanNvbigpKSwgYXBwZW5kSGVhZGVycyguLi50cmFpbGVyRGVtdXgocmVzcG9uc2UuaGVhZGVycykpLCB1bmFyeUVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBbZGVtdXhlZEhlYWRlciwgZGVtdXhlZFRyYWlsZXJdID0gdHJhaWxlckRlbXV4KHJlc3BvbnNlLmhlYWRlcnMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IGRlbXV4ZWRIZWFkZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB1c2VCaW5hcnlGb3JtYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHBhcnNlKG5ldyBVaW50OEFycmF5KGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbWV0aG9kLk8uZnJvbUpzb24oKGF3YWl0IHJlc3BvbnNlLmpzb24oKSksIGdldEpzb25PcHRpb25zKG9wdGlvbnMuanNvbk9wdGlvbnMpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWlsZXI6IGRlbXV4ZWRUcmFpbGVyLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgc3RyZWFtKHNlcnZpY2UsIG1ldGhvZCwgc2lnbmFsLCB0aW1lb3V0TXMsIGhlYWRlciwgaW5wdXQsIGNvbnRleHRWYWx1ZXMpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIGNvbnN0IHsgc2VyaWFsaXplLCBwYXJzZSB9ID0gY3JlYXRlQ2xpZW50TWV0aG9kU2VyaWFsaXplcnMobWV0aG9kLCB1c2VCaW5hcnlGb3JtYXQsIG9wdGlvbnMuanNvbk9wdGlvbnMsIG9wdGlvbnMuYmluYXJ5T3B0aW9ucyk7XG4gICAgICAgICAgICBmdW5jdGlvbiBwYXJzZVJlc3BvbnNlQm9keShib2R5LCB0cmFpbGVyVGFyZ2V0LCBoZWFkZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKiBwYXJzZVJlc3BvbnNlQm9keV8xKCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWFkZXIgPSBjcmVhdGVFbnZlbG9wZVJlYWRhYmxlU3RyZWFtKGJvZHkpLmdldFJlYWRlcigpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgZW5kU3RyZWFtUmVjZWl2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geWllbGQgX19hd2FpdChyZWFkZXIucmVhZCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBmbGFncywgZGF0YSB9ID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChmbGFncyAmIGVuZFN0cmVhbUZsYWcpID09PSBlbmRTdHJlYW1GbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kU3RyZWFtUmVjZWl2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFN0cmVhbSA9IGVuZFN0cmVhbUZyb21Kc29uKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbmRTdHJlYW0uZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBlbmRTdHJlYW0uZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5tZXRhZGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kU3RyZWFtLm1ldGFkYXRhLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHRyYWlsZXJUYXJnZXQuc2V0KGtleSwgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHlpZWxkIF9fYXdhaXQocGFyc2UoZGF0YSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghZW5kU3RyZWFtUmVjZWl2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwibWlzc2luZyBFbmRTdHJlYW1SZXNwb25zZVwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhc3luYyBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0Qm9keShpbnB1dCkge1xuICAgICAgICAgICAgICAgIGlmIChtZXRob2Qua2luZCAhPSBNZXRob2RLaW5kLlNlcnZlclN0cmVhbWluZykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBcIlRoZSBmZXRjaCBBUEkgZG9lcyBub3Qgc3VwcG9ydCBzdHJlYW1pbmcgcmVxdWVzdCBib2RpZXNcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgciA9IGF3YWl0IGlucHV0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpLm5leHQoKTtcbiAgICAgICAgICAgICAgICBpZiAoci5kb25lID09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgXCJtaXNzaW5nIHJlcXVlc3QgbWVzc2FnZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlRW52ZWxvcGUoMCwgc2VyaWFsaXplKHIudmFsdWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbWVvdXRNcyA9XG4gICAgICAgICAgICAgICAgdGltZW91dE1zID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyBvcHRpb25zLmRlZmF1bHRUaW1lb3V0TXNcbiAgICAgICAgICAgICAgICAgICAgOiB0aW1lb3V0TXMgPD0gMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdGltZW91dE1zO1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJ1blN0cmVhbWluZ0NhbGwoe1xuICAgICAgICAgICAgICAgIGludGVyY2VwdG9yczogb3B0aW9ucy5pbnRlcmNlcHRvcnMsXG4gICAgICAgICAgICAgICAgdGltZW91dE1zLFxuICAgICAgICAgICAgICAgIHNpZ25hbCxcbiAgICAgICAgICAgICAgICByZXE6IHtcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICAgICAgICAgIHVybDogY3JlYXRlTWV0aG9kVXJsKG9wdGlvbnMuYmFzZVVybCwgc2VydmljZSwgbWV0aG9kKSxcbiAgICAgICAgICAgICAgICAgICAgaW5pdDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWRlbnRpYWxzOiAoX2EgPSBvcHRpb25zLmNyZWRlbnRpYWxzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBcInNhbWUtb3JpZ2luXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWRpcmVjdDogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogXCJjb3JzXCIsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcjogcmVxdWVzdEhlYWRlcihtZXRob2Qua2luZCwgdXNlQmluYXJ5Rm9ybWF0LCB0aW1lb3V0TXMsIGhlYWRlciwgZmFsc2UpLFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0VmFsdWVzOiBjb250ZXh0VmFsdWVzICE9PSBudWxsICYmIGNvbnRleHRWYWx1ZXMgIT09IHZvaWQgMCA/IGNvbnRleHRWYWx1ZXMgOiBjcmVhdGVDb250ZXh0VmFsdWVzKCksXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGlucHV0LFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbmV4dDogYXN5bmMgKHJlcSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZldGNoID0gKF9hID0gb3B0aW9ucy5mZXRjaCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZ2xvYmFsVGhpcy5mZXRjaDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZlJlcyA9IGF3YWl0IGZldGNoKHJlcS51cmwsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVxLmluaXQpLCB7IGhlYWRlcnM6IHJlcS5oZWFkZXIsIHNpZ25hbDogcmVxLnNpZ25hbCwgYm9keTogYXdhaXQgY3JlYXRlUmVxdWVzdEJvZHkocmVxLm1lc3NhZ2UpIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGVSZXNwb25zZShtZXRob2Qua2luZCwgZlJlcy5zdGF0dXMsIGZSZXMuaGVhZGVycyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChmUmVzLmJvZHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwibWlzc2luZyByZXNwb25zZSBib2R5XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhaWxlciA9IG5ldyBIZWFkZXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcyA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgcmVxKSwgeyBoZWFkZXI6IGZSZXMuaGVhZGVycywgdHJhaWxlciwgbWVzc2FnZTogcGFyc2VSZXNwb25zZUJvZHkoZlJlcy5ib2R5LCB0cmFpbGVyLCBmUmVzLmhlYWRlcnMpIH0pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIiwgImltcG9ydCB7IFByb3RvZmxvd1NlcnZpY2UgfSBmcm9tIFwiQC9ycGMvcHJvdG9mbG93X2Nvbm5lY3RcIjtcbmltcG9ydCB7IENvbnRlbnRTZXJ2aWNlIH0gZnJvbSBcIkAvcnBjL2NvbnRlbnQvY29udGVudF9jb25uZWN0XCI7XG5pbXBvcnQgeyBVc2VyU2VydmljZSB9IGZyb20gXCJAL3JwYy91c2VyL3VzZXJfY29ubmVjdFwiO1xuaW1wb3J0IHtDaGF0U2VydmljZX0gZnJvbSBcIkAvcnBjL2NoYXQvY2hhdF9jb25uZWN0XCI7XG5pbXBvcnQge0V2ZW50U2VydmljZX0gZnJvbSBcIkAvcnBjL2V2ZW50L2V2ZW50X2Nvbm5lY3RcIjtcbmltcG9ydCB7Y3JlYXRlQ29ubmVjdFRyYW5zcG9ydH0gZnJvbSBcIkBjb25uZWN0cnBjL2Nvbm5lY3Qtd2ViXCI7XG5pbXBvcnQge2NyZWF0ZVByb21pc2VDbGllbnR9IGZyb20gXCJAY29ubmVjdHJwYy9jb25uZWN0XCI7XG5cbmV4cG9ydCBjb25zdCBiYXNlVVJMID0gcHJvY2Vzcy5lbnYuQkFTRV9VUkw7XG5cbmV4cG9ydCBjb25zdCB0cmFuc3BvcnQgPSBjcmVhdGVDb25uZWN0VHJhbnNwb3J0KHtcbiAgYmFzZVVybDogYCR7YmFzZVVSTH0vYXBpYCB8fCAnZXJyb3InLFxuICAvLyBjcmVkZW50aWFsczogXCJpbmNsdWRlXCIsXG59KTtcblxuZXhwb3J0IGNvbnN0IHByb2plY3RTZXJ2aWNlID0gY3JlYXRlUHJvbWlzZUNsaWVudChQcm90b2Zsb3dTZXJ2aWNlLCB0cmFuc3BvcnQpO1xuZXhwb3J0IGNvbnN0IGNvbnRlbnRTZXJ2aWNlID0gY3JlYXRlUHJvbWlzZUNsaWVudChDb250ZW50U2VydmljZSwgdHJhbnNwb3J0KTtcbmV4cG9ydCBjb25zdCB1c2VyU2VydmljZSA9IGNyZWF0ZVByb21pc2VDbGllbnQoVXNlclNlcnZpY2UsIHRyYW5zcG9ydCk7XG5leHBvcnQgY29uc3QgY2hhdFNlcnZpY2UgPSBjcmVhdGVQcm9taXNlQ2xpZW50KENoYXRTZXJ2aWNlLCB0cmFuc3BvcnQpO1xuZXhwb3J0IGNvbnN0IGV2ZW50U2VydmljZSA9IGNyZWF0ZVByb21pc2VDbGllbnQoRXZlbnRTZXJ2aWNlLCB0cmFuc3BvcnQpOyIsICJpbXBvcnQgeyBDU1NQcm9wZXJ0aWVzIH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgdHlwZSBUb2FzdFR5cGUgPSAnc3VjY2VzcycgfCAnZXJyb3InIHwgJ2xvYWRpbmcnIHwgJ2JsYW5rJyB8ICdjdXN0b20nO1xuZXhwb3J0IHR5cGUgVG9hc3RQb3NpdGlvbiA9XG4gIHwgJ3RvcC1sZWZ0J1xuICB8ICd0b3AtY2VudGVyJ1xuICB8ICd0b3AtcmlnaHQnXG4gIHwgJ2JvdHRvbS1sZWZ0J1xuICB8ICdib3R0b20tY2VudGVyJ1xuICB8ICdib3R0b20tcmlnaHQnO1xuXG5leHBvcnQgdHlwZSBSZW5kZXJhYmxlID0gSlNYLkVsZW1lbnQgfCBzdHJpbmcgfCBudWxsO1xuXG5leHBvcnQgaW50ZXJmYWNlIEljb25UaGVtZSB7XG4gIHByaW1hcnk6IHN0cmluZztcbiAgc2Vjb25kYXJ5OiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIFZhbHVlRnVuY3Rpb248VFZhbHVlLCBUQXJnPiA9IChhcmc6IFRBcmcpID0+IFRWYWx1ZTtcbmV4cG9ydCB0eXBlIFZhbHVlT3JGdW5jdGlvbjxUVmFsdWUsIFRBcmc+ID1cbiAgfCBUVmFsdWVcbiAgfCBWYWx1ZUZ1bmN0aW9uPFRWYWx1ZSwgVEFyZz47XG5cbmNvbnN0IGlzRnVuY3Rpb24gPSA8VFZhbHVlLCBUQXJnPihcbiAgdmFsT3JGdW5jdGlvbjogVmFsdWVPckZ1bmN0aW9uPFRWYWx1ZSwgVEFyZz5cbik6IHZhbE9yRnVuY3Rpb24gaXMgVmFsdWVGdW5jdGlvbjxUVmFsdWUsIFRBcmc+ID0+XG4gIHR5cGVvZiB2YWxPckZ1bmN0aW9uID09PSAnZnVuY3Rpb24nO1xuXG5leHBvcnQgY29uc3QgcmVzb2x2ZVZhbHVlID0gPFRWYWx1ZSwgVEFyZz4oXG4gIHZhbE9yRnVuY3Rpb246IFZhbHVlT3JGdW5jdGlvbjxUVmFsdWUsIFRBcmc+LFxuICBhcmc6IFRBcmdcbik6IFRWYWx1ZSA9PiAoaXNGdW5jdGlvbih2YWxPckZ1bmN0aW9uKSA/IHZhbE9yRnVuY3Rpb24oYXJnKSA6IHZhbE9yRnVuY3Rpb24pO1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvYXN0IHtcbiAgdHlwZTogVG9hc3RUeXBlO1xuICBpZDogc3RyaW5nO1xuICBtZXNzYWdlOiBWYWx1ZU9yRnVuY3Rpb248UmVuZGVyYWJsZSwgVG9hc3Q+O1xuICBpY29uPzogUmVuZGVyYWJsZTtcbiAgZHVyYXRpb24/OiBudW1iZXI7XG4gIHBhdXNlRHVyYXRpb246IG51bWJlcjtcbiAgcG9zaXRpb24/OiBUb2FzdFBvc2l0aW9uO1xuXG4gIGFyaWFQcm9wczoge1xuICAgIHJvbGU6ICdzdGF0dXMnIHwgJ2FsZXJ0JztcbiAgICAnYXJpYS1saXZlJzogJ2Fzc2VydGl2ZScgfCAnb2ZmJyB8ICdwb2xpdGUnO1xuICB9O1xuXG4gIHN0eWxlPzogQ1NTUHJvcGVydGllcztcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBpY29uVGhlbWU/OiBJY29uVGhlbWU7XG5cbiAgY3JlYXRlZEF0OiBudW1iZXI7XG4gIHZpc2libGU6IGJvb2xlYW47XG4gIGhlaWdodD86IG51bWJlcjtcbn1cblxuZXhwb3J0IHR5cGUgVG9hc3RPcHRpb25zID0gUGFydGlhbDxcbiAgUGljazxcbiAgICBUb2FzdCxcbiAgICB8ICdpZCdcbiAgICB8ICdpY29uJ1xuICAgIHwgJ2R1cmF0aW9uJ1xuICAgIHwgJ2FyaWFQcm9wcydcbiAgICB8ICdjbGFzc05hbWUnXG4gICAgfCAnc3R5bGUnXG4gICAgfCAncG9zaXRpb24nXG4gICAgfCAnaWNvblRoZW1lJ1xuICA+XG4+O1xuXG5leHBvcnQgdHlwZSBEZWZhdWx0VG9hc3RPcHRpb25zID0gVG9hc3RPcHRpb25zICYge1xuICBba2V5IGluIFRvYXN0VHlwZV0/OiBUb2FzdE9wdGlvbnM7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFRvYXN0ZXJQcm9wcyB7XG4gIHBvc2l0aW9uPzogVG9hc3RQb3NpdGlvbjtcbiAgdG9hc3RPcHRpb25zPzogRGVmYXVsdFRvYXN0T3B0aW9ucztcbiAgcmV2ZXJzZU9yZGVyPzogYm9vbGVhbjtcbiAgZ3V0dGVyPzogbnVtYmVyO1xuICBjb250YWluZXJTdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXM7XG4gIGNvbnRhaW5lckNsYXNzTmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiAodG9hc3Q6IFRvYXN0KSA9PiBKU1guRWxlbWVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb2FzdFdyYXBwZXJQcm9wcyB7XG4gIGlkOiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgc3R5bGU/OiBSZWFjdC5DU1NQcm9wZXJ0aWVzO1xuICBvbkhlaWdodFVwZGF0ZTogKGlkOiBzdHJpbmcsIGhlaWdodDogbnVtYmVyKSA9PiB2b2lkO1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbn1cbiIsICJleHBvcnQgY29uc3QgZ2VuSWQgPSAoKCkgPT4ge1xuICBsZXQgY291bnQgPSAwO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJldHVybiAoKytjb3VudCkudG9TdHJpbmcoKTtcbiAgfTtcbn0pKCk7XG5cbmV4cG9ydCBjb25zdCBwcmVmZXJzUmVkdWNlZE1vdGlvbiA9ICgoKSA9PiB7XG4gIC8vIENhY2hlIHJlc3VsdFxuICBsZXQgc2hvdWxkUmVkdWNlTW90aW9uOiBib29sZWFuIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgaWYgKHNob3VsZFJlZHVjZU1vdGlvbiA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBtZWRpYVF1ZXJ5ID0gbWF0Y2hNZWRpYSgnKHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSknKTtcbiAgICAgIHNob3VsZFJlZHVjZU1vdGlvbiA9ICFtZWRpYVF1ZXJ5IHx8IG1lZGlhUXVlcnkubWF0Y2hlcztcbiAgICB9XG4gICAgcmV0dXJuIHNob3VsZFJlZHVjZU1vdGlvbjtcbiAgfTtcbn0pKCk7XG4iLCAiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERlZmF1bHRUb2FzdE9wdGlvbnMsIFRvYXN0LCBUb2FzdFR5cGUgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgVE9BU1RfTElNSVQgPSAyMDtcblxuZXhwb3J0IGVudW0gQWN0aW9uVHlwZSB7XG4gIEFERF9UT0FTVCxcbiAgVVBEQVRFX1RPQVNULFxuICBVUFNFUlRfVE9BU1QsXG4gIERJU01JU1NfVE9BU1QsXG4gIFJFTU9WRV9UT0FTVCxcbiAgU1RBUlRfUEFVU0UsXG4gIEVORF9QQVVTRSxcbn1cblxudHlwZSBBY3Rpb24gPVxuICB8IHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGUuQUREX1RPQVNUO1xuICAgICAgdG9hc3Q6IFRvYXN0O1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlLlVQU0VSVF9UT0FTVDtcbiAgICAgIHRvYXN0OiBUb2FzdDtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZS5VUERBVEVfVE9BU1Q7XG4gICAgICB0b2FzdDogUGFydGlhbDxUb2FzdD47XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGUuRElTTUlTU19UT0FTVDtcbiAgICAgIHRvYXN0SWQ/OiBzdHJpbmc7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGUuUkVNT1ZFX1RPQVNUO1xuICAgICAgdG9hc3RJZD86IHN0cmluZztcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZS5TVEFSVF9QQVVTRTtcbiAgICAgIHRpbWU6IG51bWJlcjtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZS5FTkRfUEFVU0U7XG4gICAgICB0aW1lOiBudW1iZXI7XG4gICAgfTtcblxuaW50ZXJmYWNlIFN0YXRlIHtcbiAgdG9hc3RzOiBUb2FzdFtdO1xuICBwYXVzZWRBdDogbnVtYmVyIHwgdW5kZWZpbmVkO1xufVxuXG5jb25zdCB0b2FzdFRpbWVvdXRzID0gbmV3IE1hcDxUb2FzdFsnaWQnXSwgUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4+KCk7XG5cbmV4cG9ydCBjb25zdCBUT0FTVF9FWFBJUkVfRElTTUlTU19ERUxBWSA9IDEwMDA7XG5cbmNvbnN0IGFkZFRvUmVtb3ZlUXVldWUgPSAodG9hc3RJZDogc3RyaW5nKSA9PiB7XG4gIGlmICh0b2FzdFRpbWVvdXRzLmhhcyh0b2FzdElkKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICB0b2FzdFRpbWVvdXRzLmRlbGV0ZSh0b2FzdElkKTtcbiAgICBkaXNwYXRjaCh7XG4gICAgICB0eXBlOiBBY3Rpb25UeXBlLlJFTU9WRV9UT0FTVCxcbiAgICAgIHRvYXN0SWQ6IHRvYXN0SWQsXG4gICAgfSk7XG4gIH0sIFRPQVNUX0VYUElSRV9ESVNNSVNTX0RFTEFZKTtcblxuICB0b2FzdFRpbWVvdXRzLnNldCh0b2FzdElkLCB0aW1lb3V0KTtcbn07XG5cbmNvbnN0IGNsZWFyRnJvbVJlbW92ZVF1ZXVlID0gKHRvYXN0SWQ6IHN0cmluZykgPT4ge1xuICBjb25zdCB0aW1lb3V0ID0gdG9hc3RUaW1lb3V0cy5nZXQodG9hc3RJZCk7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB9XG59O1xuXG5leHBvcnQgY29uc3QgcmVkdWNlciA9IChzdGF0ZTogU3RhdGUsIGFjdGlvbjogQWN0aW9uKTogU3RhdGUgPT4ge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBBY3Rpb25UeXBlLkFERF9UT0FTVDpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB0b2FzdHM6IFthY3Rpb24udG9hc3QsIC4uLnN0YXRlLnRvYXN0c10uc2xpY2UoMCwgVE9BU1RfTElNSVQpLFxuICAgICAgfTtcblxuICAgIGNhc2UgQWN0aW9uVHlwZS5VUERBVEVfVE9BU1Q6XG4gICAgICAvLyAgISBTaWRlIGVmZmVjdHMgIVxuICAgICAgaWYgKGFjdGlvbi50b2FzdC5pZCkge1xuICAgICAgICBjbGVhckZyb21SZW1vdmVRdWV1ZShhY3Rpb24udG9hc3QuaWQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdG9hc3RzOiBzdGF0ZS50b2FzdHMubWFwKCh0KSA9PlxuICAgICAgICAgIHQuaWQgPT09IGFjdGlvbi50b2FzdC5pZCA/IHsgLi4udCwgLi4uYWN0aW9uLnRvYXN0IH0gOiB0XG4gICAgICAgICksXG4gICAgICB9O1xuXG4gICAgY2FzZSBBY3Rpb25UeXBlLlVQU0VSVF9UT0FTVDpcbiAgICAgIGNvbnN0IHsgdG9hc3QgfSA9IGFjdGlvbjtcbiAgICAgIHJldHVybiBzdGF0ZS50b2FzdHMuZmluZCgodCkgPT4gdC5pZCA9PT0gdG9hc3QuaWQpXG4gICAgICAgID8gcmVkdWNlcihzdGF0ZSwgeyB0eXBlOiBBY3Rpb25UeXBlLlVQREFURV9UT0FTVCwgdG9hc3QgfSlcbiAgICAgICAgOiByZWR1Y2VyKHN0YXRlLCB7IHR5cGU6IEFjdGlvblR5cGUuQUREX1RPQVNULCB0b2FzdCB9KTtcblxuICAgIGNhc2UgQWN0aW9uVHlwZS5ESVNNSVNTX1RPQVNUOlxuICAgICAgY29uc3QgeyB0b2FzdElkIH0gPSBhY3Rpb247XG5cbiAgICAgIC8vICEgU2lkZSBlZmZlY3RzICEgLSBUaGlzIGNvdWxkIGJlIGV4ZWNyYXRlZCBpbnRvIGEgZGlzbWlzc1RvYXN0KCkgYWN0aW9uLCBidXQgSSdsbCBrZWVwIGl0IGhlcmUgZm9yIHNpbXBsaWNpdHlcbiAgICAgIGlmICh0b2FzdElkKSB7XG4gICAgICAgIGFkZFRvUmVtb3ZlUXVldWUodG9hc3RJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0ZS50b2FzdHMuZm9yRWFjaCgodG9hc3QpID0+IHtcbiAgICAgICAgICBhZGRUb1JlbW92ZVF1ZXVlKHRvYXN0LmlkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB0b2FzdHM6IHN0YXRlLnRvYXN0cy5tYXAoKHQpID0+XG4gICAgICAgICAgdC5pZCA9PT0gdG9hc3RJZCB8fCB0b2FzdElkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIC4uLnQsXG4gICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdFxuICAgICAgICApLFxuICAgICAgfTtcbiAgICBjYXNlIEFjdGlvblR5cGUuUkVNT1ZFX1RPQVNUOlxuICAgICAgaWYgKGFjdGlvbi50b2FzdElkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICB0b2FzdHM6IFtdLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRvYXN0czogc3RhdGUudG9hc3RzLmZpbHRlcigodCkgPT4gdC5pZCAhPT0gYWN0aW9uLnRvYXN0SWQpLFxuICAgICAgfTtcblxuICAgIGNhc2UgQWN0aW9uVHlwZS5TVEFSVF9QQVVTRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBwYXVzZWRBdDogYWN0aW9uLnRpbWUsXG4gICAgICB9O1xuXG4gICAgY2FzZSBBY3Rpb25UeXBlLkVORF9QQVVTRTpcbiAgICAgIGNvbnN0IGRpZmYgPSBhY3Rpb24udGltZSAtIChzdGF0ZS5wYXVzZWRBdCB8fCAwKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHBhdXNlZEF0OiB1bmRlZmluZWQsXG4gICAgICAgIHRvYXN0czogc3RhdGUudG9hc3RzLm1hcCgodCkgPT4gKHtcbiAgICAgICAgICAuLi50LFxuICAgICAgICAgIHBhdXNlRHVyYXRpb246IHQucGF1c2VEdXJhdGlvbiArIGRpZmYsXG4gICAgICAgIH0pKSxcbiAgICAgIH07XG4gIH1cbn07XG5cbmNvbnN0IGxpc3RlbmVyczogQXJyYXk8KHN0YXRlOiBTdGF0ZSkgPT4gdm9pZD4gPSBbXTtcblxubGV0IG1lbW9yeVN0YXRlOiBTdGF0ZSA9IHsgdG9hc3RzOiBbXSwgcGF1c2VkQXQ6IHVuZGVmaW5lZCB9O1xuXG5leHBvcnQgY29uc3QgZGlzcGF0Y2ggPSAoYWN0aW9uOiBBY3Rpb24pID0+IHtcbiAgbWVtb3J5U3RhdGUgPSByZWR1Y2VyKG1lbW9yeVN0YXRlLCBhY3Rpb24pO1xuICBsaXN0ZW5lcnMuZm9yRWFjaCgobGlzdGVuZXIpID0+IHtcbiAgICBsaXN0ZW5lcihtZW1vcnlTdGF0ZSk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUaW1lb3V0czoge1xuICBba2V5IGluIFRvYXN0VHlwZV06IG51bWJlcjtcbn0gPSB7XG4gIGJsYW5rOiA0MDAwLFxuICBlcnJvcjogNDAwMCxcbiAgc3VjY2VzczogMjAwMCxcbiAgbG9hZGluZzogSW5maW5pdHksXG4gIGN1c3RvbTogNDAwMCxcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VTdG9yZSA9ICh0b2FzdE9wdGlvbnM6IERlZmF1bHRUb2FzdE9wdGlvbnMgPSB7fSk6IFN0YXRlID0+IHtcbiAgY29uc3QgW3N0YXRlLCBzZXRTdGF0ZV0gPSB1c2VTdGF0ZTxTdGF0ZT4obWVtb3J5U3RhdGUpO1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxpc3RlbmVycy5wdXNoKHNldFN0YXRlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgY29uc3QgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihzZXRTdGF0ZSk7XG4gICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICBsaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbc3RhdGVdKTtcblxuICBjb25zdCBtZXJnZWRUb2FzdHMgPSBzdGF0ZS50b2FzdHMubWFwKCh0KSA9PiAoe1xuICAgIC4uLnRvYXN0T3B0aW9ucyxcbiAgICAuLi50b2FzdE9wdGlvbnNbdC50eXBlXSxcbiAgICAuLi50LFxuICAgIGR1cmF0aW9uOlxuICAgICAgdC5kdXJhdGlvbiB8fFxuICAgICAgdG9hc3RPcHRpb25zW3QudHlwZV0/LmR1cmF0aW9uIHx8XG4gICAgICB0b2FzdE9wdGlvbnM/LmR1cmF0aW9uIHx8XG4gICAgICBkZWZhdWx0VGltZW91dHNbdC50eXBlXSxcbiAgICBzdHlsZToge1xuICAgICAgLi4udG9hc3RPcHRpb25zLnN0eWxlLFxuICAgICAgLi4udG9hc3RPcHRpb25zW3QudHlwZV0/LnN0eWxlLFxuICAgICAgLi4udC5zdHlsZSxcbiAgICB9LFxuICB9KSk7XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZSxcbiAgICB0b2FzdHM6IG1lcmdlZFRvYXN0cyxcbiAgfTtcbn07XG4iLCAiaW1wb3J0IHtcbiAgUmVuZGVyYWJsZSxcbiAgVG9hc3QsXG4gIFRvYXN0T3B0aW9ucyxcbiAgVG9hc3RUeXBlLFxuICBEZWZhdWx0VG9hc3RPcHRpb25zLFxuICBWYWx1ZU9yRnVuY3Rpb24sXG4gIHJlc29sdmVWYWx1ZSxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBnZW5JZCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZGlzcGF0Y2gsIEFjdGlvblR5cGUgfSBmcm9tICcuL3N0b3JlJztcblxudHlwZSBNZXNzYWdlID0gVmFsdWVPckZ1bmN0aW9uPFJlbmRlcmFibGUsIFRvYXN0PjtcblxudHlwZSBUb2FzdEhhbmRsZXIgPSAobWVzc2FnZTogTWVzc2FnZSwgb3B0aW9ucz86IFRvYXN0T3B0aW9ucykgPT4gc3RyaW5nO1xuXG5jb25zdCBjcmVhdGVUb2FzdCA9IChcbiAgbWVzc2FnZTogTWVzc2FnZSxcbiAgdHlwZTogVG9hc3RUeXBlID0gJ2JsYW5rJyxcbiAgb3B0cz86IFRvYXN0T3B0aW9uc1xuKTogVG9hc3QgPT4gKHtcbiAgY3JlYXRlZEF0OiBEYXRlLm5vdygpLFxuICB2aXNpYmxlOiB0cnVlLFxuICB0eXBlLFxuICBhcmlhUHJvcHM6IHtcbiAgICByb2xlOiAnc3RhdHVzJyxcbiAgICAnYXJpYS1saXZlJzogJ3BvbGl0ZScsXG4gIH0sXG4gIG1lc3NhZ2UsXG4gIHBhdXNlRHVyYXRpb246IDAsXG4gIC4uLm9wdHMsXG4gIGlkOiBvcHRzPy5pZCB8fCBnZW5JZCgpLFxufSk7XG5cbmNvbnN0IGNyZWF0ZUhhbmRsZXIgPVxuICAodHlwZT86IFRvYXN0VHlwZSk6IFRvYXN0SGFuZGxlciA9PlxuICAobWVzc2FnZSwgb3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IHRvYXN0ID0gY3JlYXRlVG9hc3QobWVzc2FnZSwgdHlwZSwgb3B0aW9ucyk7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBBY3Rpb25UeXBlLlVQU0VSVF9UT0FTVCwgdG9hc3QgfSk7XG4gICAgcmV0dXJuIHRvYXN0LmlkO1xuICB9O1xuXG5jb25zdCB0b2FzdCA9IChtZXNzYWdlOiBNZXNzYWdlLCBvcHRzPzogVG9hc3RPcHRpb25zKSA9PlxuICBjcmVhdGVIYW5kbGVyKCdibGFuaycpKG1lc3NhZ2UsIG9wdHMpO1xuXG50b2FzdC5lcnJvciA9IGNyZWF0ZUhhbmRsZXIoJ2Vycm9yJyk7XG50b2FzdC5zdWNjZXNzID0gY3JlYXRlSGFuZGxlcignc3VjY2VzcycpO1xudG9hc3QubG9hZGluZyA9IGNyZWF0ZUhhbmRsZXIoJ2xvYWRpbmcnKTtcbnRvYXN0LmN1c3RvbSA9IGNyZWF0ZUhhbmRsZXIoJ2N1c3RvbScpO1xuXG50b2FzdC5kaXNtaXNzID0gKHRvYXN0SWQ/OiBzdHJpbmcpID0+IHtcbiAgZGlzcGF0Y2goe1xuICAgIHR5cGU6IEFjdGlvblR5cGUuRElTTUlTU19UT0FTVCxcbiAgICB0b2FzdElkLFxuICB9KTtcbn07XG5cbnRvYXN0LnJlbW92ZSA9ICh0b2FzdElkPzogc3RyaW5nKSA9PlxuICBkaXNwYXRjaCh7IHR5cGU6IEFjdGlvblR5cGUuUkVNT1ZFX1RPQVNULCB0b2FzdElkIH0pO1xuXG50b2FzdC5wcm9taXNlID0gPFQ+KFxuICBwcm9taXNlOiBQcm9taXNlPFQ+LFxuICBtc2dzOiB7XG4gICAgbG9hZGluZzogUmVuZGVyYWJsZTtcbiAgICBzdWNjZXNzOiBWYWx1ZU9yRnVuY3Rpb248UmVuZGVyYWJsZSwgVD47XG4gICAgZXJyb3I6IFZhbHVlT3JGdW5jdGlvbjxSZW5kZXJhYmxlLCBhbnk+O1xuICB9LFxuICBvcHRzPzogRGVmYXVsdFRvYXN0T3B0aW9uc1xuKSA9PiB7XG4gIGNvbnN0IGlkID0gdG9hc3QubG9hZGluZyhtc2dzLmxvYWRpbmcsIHsgLi4ub3B0cywgLi4ub3B0cz8ubG9hZGluZyB9KTtcblxuICBwcm9taXNlXG4gICAgLnRoZW4oKHApID0+IHtcbiAgICAgIHRvYXN0LnN1Y2Nlc3MocmVzb2x2ZVZhbHVlKG1zZ3Muc3VjY2VzcywgcCksIHtcbiAgICAgICAgaWQsXG4gICAgICAgIC4uLm9wdHMsXG4gICAgICAgIC4uLm9wdHM/LnN1Y2Nlc3MsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBwO1xuICAgIH0pXG4gICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICB0b2FzdC5lcnJvcihyZXNvbHZlVmFsdWUobXNncy5lcnJvciwgZSksIHtcbiAgICAgICAgaWQsXG4gICAgICAgIC4uLm9wdHMsXG4gICAgICAgIC4uLm9wdHM/LmVycm9yLFxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5leHBvcnQgeyB0b2FzdCB9O1xuIiwgImltcG9ydCB7IHVzZUVmZmVjdCwgdXNlQ2FsbGJhY2sgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBkaXNwYXRjaCwgQWN0aW9uVHlwZSwgdXNlU3RvcmUgfSBmcm9tICcuL3N0b3JlJztcbmltcG9ydCB7IHRvYXN0IH0gZnJvbSAnLi90b2FzdCc7XG5pbXBvcnQgeyBEZWZhdWx0VG9hc3RPcHRpb25zLCBUb2FzdCwgVG9hc3RQb3NpdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCB1cGRhdGVIZWlnaHQgPSAodG9hc3RJZDogc3RyaW5nLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZS5VUERBVEVfVE9BU1QsXG4gICAgdG9hc3Q6IHsgaWQ6IHRvYXN0SWQsIGhlaWdodCB9LFxuICB9KTtcbn07XG5jb25zdCBzdGFydFBhdXNlID0gKCkgPT4ge1xuICBkaXNwYXRjaCh7XG4gICAgdHlwZTogQWN0aW9uVHlwZS5TVEFSVF9QQVVTRSxcbiAgICB0aW1lOiBEYXRlLm5vdygpLFxuICB9KTtcbn07XG5cbmV4cG9ydCBjb25zdCB1c2VUb2FzdGVyID0gKHRvYXN0T3B0aW9ucz86IERlZmF1bHRUb2FzdE9wdGlvbnMpID0+IHtcbiAgY29uc3QgeyB0b2FzdHMsIHBhdXNlZEF0IH0gPSB1c2VTdG9yZSh0b2FzdE9wdGlvbnMpO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHBhdXNlZEF0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCB0aW1lb3V0cyA9IHRvYXN0cy5tYXAoKHQpID0+IHtcbiAgICAgIGlmICh0LmR1cmF0aW9uID09PSBJbmZpbml0eSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGR1cmF0aW9uTGVmdCA9XG4gICAgICAgICh0LmR1cmF0aW9uIHx8IDApICsgdC5wYXVzZUR1cmF0aW9uIC0gKG5vdyAtIHQuY3JlYXRlZEF0KTtcblxuICAgICAgaWYgKGR1cmF0aW9uTGVmdCA8IDApIHtcbiAgICAgICAgaWYgKHQudmlzaWJsZSkge1xuICAgICAgICAgIHRvYXN0LmRpc21pc3ModC5pZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4gdG9hc3QuZGlzbWlzcyh0LmlkKSwgZHVyYXRpb25MZWZ0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aW1lb3V0cy5mb3JFYWNoKCh0aW1lb3V0KSA9PiB0aW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aW1lb3V0KSk7XG4gICAgfTtcbiAgfSwgW3RvYXN0cywgcGF1c2VkQXRdKTtcblxuICBjb25zdCBlbmRQYXVzZSA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAocGF1c2VkQXQpIHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogQWN0aW9uVHlwZS5FTkRfUEFVU0UsIHRpbWU6IERhdGUubm93KCkgfSk7XG4gICAgfVxuICB9LCBbcGF1c2VkQXRdKTtcblxuICBjb25zdCBjYWxjdWxhdGVPZmZzZXQgPSB1c2VDYWxsYmFjayhcbiAgICAoXG4gICAgICB0b2FzdDogVG9hc3QsXG4gICAgICBvcHRzPzoge1xuICAgICAgICByZXZlcnNlT3JkZXI/OiBib29sZWFuO1xuICAgICAgICBndXR0ZXI/OiBudW1iZXI7XG4gICAgICAgIGRlZmF1bHRQb3NpdGlvbj86IFRvYXN0UG9zaXRpb247XG4gICAgICB9XG4gICAgKSA9PiB7XG4gICAgICBjb25zdCB7IHJldmVyc2VPcmRlciA9IGZhbHNlLCBndXR0ZXIgPSA4LCBkZWZhdWx0UG9zaXRpb24gfSA9IG9wdHMgfHwge307XG5cbiAgICAgIGNvbnN0IHJlbGV2YW50VG9hc3RzID0gdG9hc3RzLmZpbHRlcihcbiAgICAgICAgKHQpID0+XG4gICAgICAgICAgKHQucG9zaXRpb24gfHwgZGVmYXVsdFBvc2l0aW9uKSA9PT1cbiAgICAgICAgICAgICh0b2FzdC5wb3NpdGlvbiB8fCBkZWZhdWx0UG9zaXRpb24pICYmIHQuaGVpZ2h0XG4gICAgICApO1xuICAgICAgY29uc3QgdG9hc3RJbmRleCA9IHJlbGV2YW50VG9hc3RzLmZpbmRJbmRleCgodCkgPT4gdC5pZCA9PT0gdG9hc3QuaWQpO1xuICAgICAgY29uc3QgdG9hc3RzQmVmb3JlID0gcmVsZXZhbnRUb2FzdHMuZmlsdGVyKFxuICAgICAgICAodG9hc3QsIGkpID0+IGkgPCB0b2FzdEluZGV4ICYmIHRvYXN0LnZpc2libGVcbiAgICAgICkubGVuZ3RoO1xuXG4gICAgICBjb25zdCBvZmZzZXQgPSByZWxldmFudFRvYXN0c1xuICAgICAgICAuZmlsdGVyKCh0KSA9PiB0LnZpc2libGUpXG4gICAgICAgIC5zbGljZSguLi4ocmV2ZXJzZU9yZGVyID8gW3RvYXN0c0JlZm9yZSArIDFdIDogWzAsIHRvYXN0c0JlZm9yZV0pKVxuICAgICAgICAucmVkdWNlKChhY2MsIHQpID0+IGFjYyArICh0LmhlaWdodCB8fCAwKSArIGd1dHRlciwgMCk7XG5cbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfSxcbiAgICBbdG9hc3RzXVxuICApO1xuXG4gIHJldHVybiB7XG4gICAgdG9hc3RzLFxuICAgIGhhbmRsZXJzOiB7XG4gICAgICB1cGRhdGVIZWlnaHQsXG4gICAgICBzdGFydFBhdXNlLFxuICAgICAgZW5kUGF1c2UsXG4gICAgICBjYWxjdWxhdGVPZmZzZXQsXG4gICAgfSxcbiAgfTtcbn07XG4iLCAiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc3R5bGVkLCBrZXlmcmFtZXMgfSBmcm9tICdnb29iZXInO1xuXG5pbXBvcnQgeyBUb2FzdCwgVG9hc3RQb3NpdGlvbiwgcmVzb2x2ZVZhbHVlLCBSZW5kZXJhYmxlIH0gZnJvbSAnLi4vY29yZS90eXBlcyc7XG5pbXBvcnQgeyBUb2FzdEljb24gfSBmcm9tICcuL3RvYXN0LWljb24nO1xuaW1wb3J0IHsgcHJlZmVyc1JlZHVjZWRNb3Rpb24gfSBmcm9tICcuLi9jb3JlL3V0aWxzJztcblxuY29uc3QgZW50ZXJBbmltYXRpb24gPSAoZmFjdG9yOiBudW1iZXIpID0+IGBcbjAlIHt0cmFuc2Zvcm06IHRyYW5zbGF0ZTNkKDAsJHtmYWN0b3IgKiAtMjAwfSUsMCkgc2NhbGUoLjYpOyBvcGFjaXR5Oi41O31cbjEwMCUge3RyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpOyBvcGFjaXR5OjE7fVxuYDtcblxuY29uc3QgZXhpdEFuaW1hdGlvbiA9IChmYWN0b3I6IG51bWJlcikgPT4gYFxuMCUge3RyYW5zZm9ybTogdHJhbnNsYXRlM2QoMCwwLC0xcHgpIHNjYWxlKDEpOyBvcGFjaXR5OjE7fVxuMTAwJSB7dHJhbnNmb3JtOiB0cmFuc2xhdGUzZCgwLCR7ZmFjdG9yICogLTE1MH0lLC0xcHgpIHNjYWxlKC42KTsgb3BhY2l0eTowO31cbmA7XG5cbmNvbnN0IGZhZGVJbkFuaW1hdGlvbiA9IGAwJXtvcGFjaXR5OjA7fSAxMDAle29wYWNpdHk6MTt9YDtcbmNvbnN0IGZhZGVPdXRBbmltYXRpb24gPSBgMCV7b3BhY2l0eToxO30gMTAwJXtvcGFjaXR5OjA7fWA7XG5cbmNvbnN0IFRvYXN0QmFyQmFzZSA9IHN0eWxlZCgnZGl2JylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG4gIGNvbG9yOiAjMzYzNjM2O1xuICBsaW5lLWhlaWdodDogMS4zO1xuICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xuICBib3gtc2hhZG93OiAwIDNweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4xKSwgMCAzcHggM3B4IHJnYmEoMCwgMCwgMCwgMC4wNSk7XG4gIG1heC13aWR0aDogMzUwcHg7XG4gIHBvaW50ZXItZXZlbnRzOiBhdXRvO1xuICBwYWRkaW5nOiA4cHggMTBweDtcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xuYDtcblxuY29uc3QgTWVzc2FnZSA9IHN0eWxlZCgnZGl2JylgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBtYXJnaW46IDRweCAxMHB4O1xuICBjb2xvcjogaW5oZXJpdDtcbiAgZmxleDogMSAxIGF1dG87XG4gIHdoaXRlLXNwYWNlOiBwcmUtbGluZTtcbmA7XG5cbmludGVyZmFjZSBUb2FzdEJhclByb3BzIHtcbiAgdG9hc3Q6IFRvYXN0O1xuICBwb3NpdGlvbj86IFRvYXN0UG9zaXRpb247XG4gIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllcztcbiAgY2hpbGRyZW4/OiAoY29tcG9uZW50czoge1xuICAgIGljb246IFJlbmRlcmFibGU7XG4gICAgbWVzc2FnZTogUmVuZGVyYWJsZTtcbiAgfSkgPT4gUmVuZGVyYWJsZTtcbn1cblxuY29uc3QgZ2V0QW5pbWF0aW9uU3R5bGUgPSAoXG4gIHBvc2l0aW9uOiBUb2FzdFBvc2l0aW9uLFxuICB2aXNpYmxlOiBib29sZWFuXG4pOiBSZWFjdC5DU1NQcm9wZXJ0aWVzID0+IHtcbiAgY29uc3QgdG9wID0gcG9zaXRpb24uaW5jbHVkZXMoJ3RvcCcpO1xuICBjb25zdCBmYWN0b3IgPSB0b3AgPyAxIDogLTE7XG5cbiAgY29uc3QgW2VudGVyLCBleGl0XSA9IHByZWZlcnNSZWR1Y2VkTW90aW9uKClcbiAgICA/IFtmYWRlSW5BbmltYXRpb24sIGZhZGVPdXRBbmltYXRpb25dXG4gICAgOiBbZW50ZXJBbmltYXRpb24oZmFjdG9yKSwgZXhpdEFuaW1hdGlvbihmYWN0b3IpXTtcblxuICByZXR1cm4ge1xuICAgIGFuaW1hdGlvbjogdmlzaWJsZVxuICAgICAgPyBgJHtrZXlmcmFtZXMoZW50ZXIpfSAwLjM1cyBjdWJpYy1iZXppZXIoLjIxLDEuMDIsLjczLDEpIGZvcndhcmRzYFxuICAgICAgOiBgJHtrZXlmcmFtZXMoZXhpdCl9IDAuNHMgZm9yd2FyZHMgY3ViaWMtYmV6aWVyKC4wNiwuNzEsLjU1LDEpYCxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBUb2FzdEJhcjogUmVhY3QuRkM8VG9hc3RCYXJQcm9wcz4gPSBSZWFjdC5tZW1vKFxuICAoeyB0b2FzdCwgcG9zaXRpb24sIHN0eWxlLCBjaGlsZHJlbiB9KSA9PiB7XG4gICAgY29uc3QgYW5pbWF0aW9uU3R5bGU6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB0b2FzdC5oZWlnaHRcbiAgICAgID8gZ2V0QW5pbWF0aW9uU3R5bGUoXG4gICAgICAgICAgdG9hc3QucG9zaXRpb24gfHwgcG9zaXRpb24gfHwgJ3RvcC1jZW50ZXInLFxuICAgICAgICAgIHRvYXN0LnZpc2libGVcbiAgICAgICAgKVxuICAgICAgOiB7IG9wYWNpdHk6IDAgfTtcblxuICAgIGNvbnN0IGljb24gPSA8VG9hc3RJY29uIHRvYXN0PXt0b2FzdH0gLz47XG4gICAgY29uc3QgbWVzc2FnZSA9IChcbiAgICAgIDxNZXNzYWdlIHsuLi50b2FzdC5hcmlhUHJvcHN9PlxuICAgICAgICB7cmVzb2x2ZVZhbHVlKHRvYXN0Lm1lc3NhZ2UsIHRvYXN0KX1cbiAgICAgIDwvTWVzc2FnZT5cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUb2FzdEJhckJhc2VcbiAgICAgICAgY2xhc3NOYW1lPXt0b2FzdC5jbGFzc05hbWV9XG4gICAgICAgIHN0eWxlPXt7XG4gICAgICAgICAgLi4uYW5pbWF0aW9uU3R5bGUsXG4gICAgICAgICAgLi4uc3R5bGUsXG4gICAgICAgICAgLi4udG9hc3Quc3R5bGUsXG4gICAgICAgIH19XG4gICAgICA+XG4gICAgICAgIHt0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyAoXG4gICAgICAgICAgY2hpbGRyZW4oe1xuICAgICAgICAgICAgaWNvbixcbiAgICAgICAgICAgIG1lc3NhZ2UsXG4gICAgICAgICAgfSlcbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8PlxuICAgICAgICAgICAge2ljb259XG4gICAgICAgICAgICB7bWVzc2FnZX1cbiAgICAgICAgICA8Lz5cbiAgICAgICAgKX1cbiAgICAgIDwvVG9hc3RCYXJCYXNlPlxuICAgICk7XG4gIH1cbik7XG4iLCAiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgc3R5bGVkLCBrZXlmcmFtZXMgfSBmcm9tICdnb29iZXInO1xuXG5pbXBvcnQgeyBUb2FzdCB9IGZyb20gJy4uL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgRXJyb3JJY29uLCBFcnJvclRoZW1lIH0gZnJvbSAnLi9lcnJvcic7XG5pbXBvcnQgeyBMb2FkZXJJY29uLCBMb2FkZXJUaGVtZSB9IGZyb20gJy4vbG9hZGVyJztcbmltcG9ydCB7IENoZWNrbWFya0ljb24sIENoZWNrbWFya1RoZW1lIH0gZnJvbSAnLi9jaGVja21hcmsnO1xuXG5jb25zdCBTdGF0dXNXcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuYDtcblxuY29uc3QgSW5kaWNhdG9yV3JhcHBlciA9IHN0eWxlZCgnZGl2JylgXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1pbi13aWR0aDogMjBweDtcbiAgbWluLWhlaWdodDogMjBweDtcbmA7XG5cbmNvbnN0IGVudGVyID0ga2V5ZnJhbWVzYFxuZnJvbSB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMC42KTtcbiAgb3BhY2l0eTogMC40O1xufVxudG8ge1xuICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xuICBvcGFjaXR5OiAxO1xufWA7XG5cbmV4cG9ydCBjb25zdCBBbmltYXRlZEljb25XcmFwcGVyID0gc3R5bGVkKCdkaXYnKWBcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB0cmFuc2Zvcm06IHNjYWxlKDAuNik7XG4gIG9wYWNpdHk6IDAuNDtcbiAgbWluLXdpZHRoOiAyMHB4O1xuICBhbmltYXRpb246ICR7ZW50ZXJ9IDAuM3MgMC4xMnMgY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMS4yNzUpXG4gICAgZm9yd2FyZHM7XG5gO1xuXG5leHBvcnQgdHlwZSBJY29uVGhlbWVzID0gUGFydGlhbDx7XG4gIHN1Y2Nlc3M6IENoZWNrbWFya1RoZW1lO1xuICBlcnJvcjogRXJyb3JUaGVtZTtcbiAgbG9hZGluZzogTG9hZGVyVGhlbWU7XG59PjtcblxuZXhwb3J0IGNvbnN0IFRvYXN0SWNvbjogUmVhY3QuRkM8e1xuICB0b2FzdDogVG9hc3Q7XG59PiA9ICh7IHRvYXN0IH0pID0+IHtcbiAgY29uc3QgeyBpY29uLCB0eXBlLCBpY29uVGhlbWUgfSA9IHRvYXN0O1xuICBpZiAoaWNvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHR5cGVvZiBpY29uID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIDxBbmltYXRlZEljb25XcmFwcGVyPntpY29ufTwvQW5pbWF0ZWRJY29uV3JhcHBlcj47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBpY29uO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlID09PSAnYmxhbmsnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxJbmRpY2F0b3JXcmFwcGVyPlxuICAgICAgPExvYWRlckljb24gey4uLmljb25UaGVtZX0gLz5cbiAgICAgIHt0eXBlICE9PSAnbG9hZGluZycgJiYgKFxuICAgICAgICA8U3RhdHVzV3JhcHBlcj5cbiAgICAgICAgICB7dHlwZSA9PT0gJ2Vycm9yJyA/IChcbiAgICAgICAgICAgIDxFcnJvckljb24gey4uLmljb25UaGVtZX0gLz5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPENoZWNrbWFya0ljb24gey4uLmljb25UaGVtZX0gLz5cbiAgICAgICAgICApfVxuICAgICAgICA8L1N0YXR1c1dyYXBwZXI+XG4gICAgICApfVxuICAgIDwvSW5kaWNhdG9yV3JhcHBlcj5cbiAgKTtcbn07XG4iLCAiaW1wb3J0IHsgc3R5bGVkLCBrZXlmcmFtZXMgfSBmcm9tICdnb29iZXInO1xuXG5jb25zdCBjaXJjbGVBbmltYXRpb24gPSBrZXlmcmFtZXNgXG5mcm9tIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgwKSByb3RhdGUoNDVkZWcpO1xuXHRvcGFjaXR5OiAwO1xufVxudG8ge1xuIHRyYW5zZm9ybTogc2NhbGUoMSkgcm90YXRlKDQ1ZGVnKTtcbiAgb3BhY2l0eTogMTtcbn1gO1xuXG5jb25zdCBmaXJzdExpbmVBbmltYXRpb24gPSBrZXlmcmFtZXNgXG5mcm9tIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcbiAgb3BhY2l0eTogMDtcbn1cbnRvIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgb3BhY2l0eTogMTtcbn1gO1xuXG5jb25zdCBzZWNvbmRMaW5lQW5pbWF0aW9uID0ga2V5ZnJhbWVzYFxuZnJvbSB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMCkgcm90YXRlKDkwZGVnKTtcblx0b3BhY2l0eTogMDtcbn1cbnRvIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKSByb3RhdGUoOTBkZWcpO1xuXHRvcGFjaXR5OiAxO1xufWA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JUaGVtZSB7XG4gIHByaW1hcnk/OiBzdHJpbmc7XG4gIHNlY29uZGFyeT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IEVycm9ySWNvbiA9IHN0eWxlZCgnZGl2Jyk8RXJyb3JUaGVtZT5gXG4gIHdpZHRoOiAyMHB4O1xuICBvcGFjaXR5OiAwO1xuICBoZWlnaHQ6IDIwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDEwcHg7XG4gIGJhY2tncm91bmQ6ICR7KHApID0+IHAucHJpbWFyeSB8fCAnI2ZmNGI0Yid9O1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcblxuICBhbmltYXRpb246ICR7Y2lyY2xlQW5pbWF0aW9ufSAwLjNzIGN1YmljLWJlemllcigwLjE3NSwgMC44ODUsIDAuMzIsIDEuMjc1KVxuICAgIGZvcndhcmRzO1xuICBhbmltYXRpb24tZGVsYXk6IDEwMG1zO1xuXG4gICY6YWZ0ZXIsXG4gICY6YmVmb3JlIHtcbiAgICBjb250ZW50OiAnJztcbiAgICBhbmltYXRpb246ICR7Zmlyc3RMaW5lQW5pbWF0aW9ufSAwLjE1cyBlYXNlLW91dCBmb3J3YXJkcztcbiAgICBhbmltYXRpb24tZGVsYXk6IDE1MG1zO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgb3BhY2l0eTogMDtcbiAgICBiYWNrZ3JvdW5kOiAkeyhwKSA9PiBwLnNlY29uZGFyeSB8fCAnI2ZmZid9O1xuICAgIGJvdHRvbTogOXB4O1xuICAgIGxlZnQ6IDRweDtcbiAgICBoZWlnaHQ6IDJweDtcbiAgICB3aWR0aDogMTJweDtcbiAgfVxuXG4gICY6YmVmb3JlIHtcbiAgICBhbmltYXRpb246ICR7c2Vjb25kTGluZUFuaW1hdGlvbn0gMC4xNXMgZWFzZS1vdXQgZm9yd2FyZHM7XG4gICAgYW5pbWF0aW9uLWRlbGF5OiAxODBtcztcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSg5MGRlZyk7XG4gIH1cbmA7XG4iLCAiaW1wb3J0IHsgc3R5bGVkLCBrZXlmcmFtZXMgfSBmcm9tICdnb29iZXInO1xuXG5jb25zdCByb3RhdGUgPSBrZXlmcmFtZXNgXG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICB9XG4gIHRvIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICB9XG5gO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvYWRlclRoZW1lIHtcbiAgcHJpbWFyeT86IHN0cmluZztcbiAgc2Vjb25kYXJ5Pzogc3RyaW5nO1xufVxuXG5leHBvcnQgY29uc3QgTG9hZGVySWNvbiA9IHN0eWxlZCgnZGl2Jyk8TG9hZGVyVGhlbWU+YFxuICB3aWR0aDogMTJweDtcbiAgaGVpZ2h0OiAxMnB4O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBib3JkZXI6IDJweCBzb2xpZDtcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgYm9yZGVyLWNvbG9yOiAkeyhwKSA9PiBwLnNlY29uZGFyeSB8fCAnI2UwZTBlMCd9O1xuICBib3JkZXItcmlnaHQtY29sb3I6ICR7KHApID0+IHAucHJpbWFyeSB8fCAnIzYxNjE2MSd9O1xuICBhbmltYXRpb246ICR7cm90YXRlfSAxcyBsaW5lYXIgaW5maW5pdGU7XG5gO1xuIiwgImltcG9ydCB7IHN0eWxlZCwga2V5ZnJhbWVzIH0gZnJvbSAnZ29vYmVyJztcblxuY29uc3QgY2lyY2xlQW5pbWF0aW9uID0ga2V5ZnJhbWVzYFxuZnJvbSB7XG4gIHRyYW5zZm9ybTogc2NhbGUoMCkgcm90YXRlKDQ1ZGVnKTtcblx0b3BhY2l0eTogMDtcbn1cbnRvIHtcbiAgdHJhbnNmb3JtOiBzY2FsZSgxKSByb3RhdGUoNDVkZWcpO1xuXHRvcGFjaXR5OiAxO1xufWA7XG5cbmNvbnN0IGNoZWNrbWFya0FuaW1hdGlvbiA9IGtleWZyYW1lc2BcbjAlIHtcblx0aGVpZ2h0OiAwO1xuXHR3aWR0aDogMDtcblx0b3BhY2l0eTogMDtcbn1cbjQwJSB7XG4gIGhlaWdodDogMDtcblx0d2lkdGg6IDZweDtcblx0b3BhY2l0eTogMTtcbn1cbjEwMCUge1xuICBvcGFjaXR5OiAxO1xuICBoZWlnaHQ6IDEwcHg7XG59YDtcblxuZXhwb3J0IGludGVyZmFjZSBDaGVja21hcmtUaGVtZSB7XG4gIHByaW1hcnk/OiBzdHJpbmc7XG4gIHNlY29uZGFyeT86IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IENoZWNrbWFya0ljb24gPSBzdHlsZWQoJ2RpdicpPENoZWNrbWFya1RoZW1lPmBcbiAgd2lkdGg6IDIwcHg7XG4gIG9wYWNpdHk6IDA7XG4gIGhlaWdodDogMjBweDtcbiAgYm9yZGVyLXJhZGl1czogMTBweDtcbiAgYmFja2dyb3VuZDogJHsocCkgPT4gcC5wcmltYXJ5IHx8ICcjNjFkMzQ1J307XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpO1xuXG4gIGFuaW1hdGlvbjogJHtjaXJjbGVBbmltYXRpb259IDAuM3MgY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMS4yNzUpXG4gICAgZm9yd2FyZHM7XG4gIGFuaW1hdGlvbi1kZWxheTogMTAwbXM7XG4gICY6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgYW5pbWF0aW9uOiAke2NoZWNrbWFya0FuaW1hdGlvbn0gMC4ycyBlYXNlLW91dCBmb3J3YXJkcztcbiAgICBvcGFjaXR5OiAwO1xuICAgIGFuaW1hdGlvbi1kZWxheTogMjAwbXM7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIGJvcmRlci1yaWdodDogMnB4IHNvbGlkO1xuICAgIGJvcmRlci1ib3R0b206IDJweCBzb2xpZDtcbiAgICBib3JkZXItY29sb3I6ICR7KHApID0+IHAuc2Vjb25kYXJ5IHx8ICcjZmZmJ307XG4gICAgYm90dG9tOiA2cHg7XG4gICAgbGVmdDogNnB4O1xuICAgIGhlaWdodDogMTBweDtcbiAgICB3aWR0aDogNnB4O1xuICB9XG5gO1xuIiwgImltcG9ydCB7IGNzcywgc2V0dXAgfSBmcm9tICdnb29iZXInO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgcmVzb2x2ZVZhbHVlLFxuICBUb2FzdGVyUHJvcHMsXG4gIFRvYXN0UG9zaXRpb24sXG4gIFRvYXN0V3JhcHBlclByb3BzLFxufSBmcm9tICcuLi9jb3JlL3R5cGVzJztcbmltcG9ydCB7IHVzZVRvYXN0ZXIgfSBmcm9tICcuLi9jb3JlL3VzZS10b2FzdGVyJztcbmltcG9ydCB7IHByZWZlcnNSZWR1Y2VkTW90aW9uIH0gZnJvbSAnLi4vY29yZS91dGlscyc7XG5pbXBvcnQgeyBUb2FzdEJhciB9IGZyb20gJy4vdG9hc3QtYmFyJztcblxuc2V0dXAoUmVhY3QuY3JlYXRlRWxlbWVudCk7XG5cbmNvbnN0IFRvYXN0V3JhcHBlciA9ICh7XG4gIGlkLFxuICBjbGFzc05hbWUsXG4gIHN0eWxlLFxuICBvbkhlaWdodFVwZGF0ZSxcbiAgY2hpbGRyZW4sXG59OiBUb2FzdFdyYXBwZXJQcm9wcykgPT4ge1xuICBjb25zdCByZWYgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZWw6IEhUTUxFbGVtZW50IHwgbnVsbCkgPT4ge1xuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZUhlaWdodCA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBoZWlnaHQgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHQ7XG4gICAgICAgICAgb25IZWlnaHRVcGRhdGUoaWQsIGhlaWdodCk7XG4gICAgICAgIH07XG4gICAgICAgIHVwZGF0ZUhlaWdodCgpO1xuICAgICAgICBuZXcgTXV0YXRpb25PYnNlcnZlcih1cGRhdGVIZWlnaHQpLm9ic2VydmUoZWwsIHtcbiAgICAgICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgICAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtpZCwgb25IZWlnaHRVcGRhdGVdXG4gICk7XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHJlZj17cmVmfSBjbGFzc05hbWU9e2NsYXNzTmFtZX0gc3R5bGU9e3N0eWxlfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmNvbnN0IGdldFBvc2l0aW9uU3R5bGUgPSAoXG4gIHBvc2l0aW9uOiBUb2FzdFBvc2l0aW9uLFxuICBvZmZzZXQ6IG51bWJlclxuKTogUmVhY3QuQ1NTUHJvcGVydGllcyA9PiB7XG4gIGNvbnN0IHRvcCA9IHBvc2l0aW9uLmluY2x1ZGVzKCd0b3AnKTtcbiAgY29uc3QgdmVydGljYWxTdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllcyA9IHRvcCA/IHsgdG9wOiAwIH0gOiB7IGJvdHRvbTogMCB9O1xuICBjb25zdCBob3Jpem9udGFsU3R5bGU6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSBwb3NpdGlvbi5pbmNsdWRlcygnY2VudGVyJylcbiAgICA/IHtcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgICAgfVxuICAgIDogcG9zaXRpb24uaW5jbHVkZXMoJ3JpZ2h0JylcbiAgICA/IHtcbiAgICAgICAganVzdGlmeUNvbnRlbnQ6ICdmbGV4LWVuZCcsXG4gICAgICB9XG4gICAgOiB7fTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0cmFuc2l0aW9uOiBwcmVmZXJzUmVkdWNlZE1vdGlvbigpXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiBgYWxsIDIzMG1zIGN1YmljLWJlemllciguMjEsMS4wMiwuNzMsMSlgLFxuICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoJHtvZmZzZXQgKiAodG9wID8gMSA6IC0xKX1weClgLFxuICAgIC4uLnZlcnRpY2FsU3R5bGUsXG4gICAgLi4uaG9yaXpvbnRhbFN0eWxlLFxuICB9O1xufTtcblxuY29uc3QgYWN0aXZlQ2xhc3MgPSBjc3NgXG4gIHotaW5kZXg6IDk5OTk7XG4gID4gKiB7XG4gICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gIH1cbmA7XG5cbmNvbnN0IERFRkFVTFRfT0ZGU0VUID0gMTY7XG5cbmV4cG9ydCBjb25zdCBUb2FzdGVyOiBSZWFjdC5GQzxUb2FzdGVyUHJvcHM+ID0gKHtcbiAgcmV2ZXJzZU9yZGVyLFxuICBwb3NpdGlvbiA9ICd0b3AtY2VudGVyJyxcbiAgdG9hc3RPcHRpb25zLFxuICBndXR0ZXIsXG4gIGNoaWxkcmVuLFxuICBjb250YWluZXJTdHlsZSxcbiAgY29udGFpbmVyQ2xhc3NOYW1lLFxufSkgPT4ge1xuICBjb25zdCB7IHRvYXN0cywgaGFuZGxlcnMgfSA9IHVzZVRvYXN0ZXIodG9hc3RPcHRpb25zKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgICAgICB6SW5kZXg6IDk5OTksXG4gICAgICAgIHRvcDogREVGQVVMVF9PRkZTRVQsXG4gICAgICAgIGxlZnQ6IERFRkFVTFRfT0ZGU0VULFxuICAgICAgICByaWdodDogREVGQVVMVF9PRkZTRVQsXG4gICAgICAgIGJvdHRvbTogREVGQVVMVF9PRkZTRVQsXG4gICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgICAgLi4uY29udGFpbmVyU3R5bGUsXG4gICAgICB9fVxuICAgICAgY2xhc3NOYW1lPXtjb250YWluZXJDbGFzc05hbWV9XG4gICAgICBvbk1vdXNlRW50ZXI9e2hhbmRsZXJzLnN0YXJ0UGF1c2V9XG4gICAgICBvbk1vdXNlTGVhdmU9e2hhbmRsZXJzLmVuZFBhdXNlfVxuICAgID5cbiAgICAgIHt0b2FzdHMubWFwKCh0KSA9PiB7XG4gICAgICAgIGNvbnN0IHRvYXN0UG9zaXRpb24gPSB0LnBvc2l0aW9uIHx8IHBvc2l0aW9uO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBoYW5kbGVycy5jYWxjdWxhdGVPZmZzZXQodCwge1xuICAgICAgICAgIHJldmVyc2VPcmRlcixcbiAgICAgICAgICBndXR0ZXIsXG4gICAgICAgICAgZGVmYXVsdFBvc2l0aW9uOiBwb3NpdGlvbixcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uU3R5bGUgPSBnZXRQb3NpdGlvblN0eWxlKHRvYXN0UG9zaXRpb24sIG9mZnNldCk7XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8VG9hc3RXcmFwcGVyXG4gICAgICAgICAgICBpZD17dC5pZH1cbiAgICAgICAgICAgIGtleT17dC5pZH1cbiAgICAgICAgICAgIG9uSGVpZ2h0VXBkYXRlPXtoYW5kbGVycy51cGRhdGVIZWlnaHR9XG4gICAgICAgICAgICBjbGFzc05hbWU9e3QudmlzaWJsZSA/IGFjdGl2ZUNsYXNzIDogJyd9XG4gICAgICAgICAgICBzdHlsZT17cG9zaXRpb25TdHlsZX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7dC50eXBlID09PSAnY3VzdG9tJyA/IChcbiAgICAgICAgICAgICAgcmVzb2x2ZVZhbHVlKHQubWVzc2FnZSwgdClcbiAgICAgICAgICAgICkgOiBjaGlsZHJlbiA/IChcbiAgICAgICAgICAgICAgY2hpbGRyZW4odClcbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgIDxUb2FzdEJhciB0b2FzdD17dH0gcG9zaXRpb249e3RvYXN0UG9zaXRpb259IC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvVG9hc3RXcmFwcGVyPlxuICAgICAgICApO1xuICAgICAgfSl9XG4gICAgPC9kaXY+XG4gICk7XG59O1xuIiwgImltcG9ydCB7IHRvYXN0IH0gZnJvbSAnLi9jb3JlL3RvYXN0JztcblxuZXhwb3J0ICogZnJvbSAnLi9oZWFkbGVzcyc7XG5cbmV4cG9ydCB7IFRvYXN0QmFyIH0gZnJvbSAnLi9jb21wb25lbnRzL3RvYXN0LWJhcic7XG5leHBvcnQgeyBUb2FzdEljb24gfSBmcm9tICcuL2NvbXBvbmVudHMvdG9hc3QtaWNvbic7XG5leHBvcnQgeyBUb2FzdGVyIH0gZnJvbSAnLi9jb21wb25lbnRzL3RvYXN0ZXInO1xuZXhwb3J0IHsgQ2hlY2ttYXJrSWNvbiB9IGZyb20gJy4vY29tcG9uZW50cy9jaGVja21hcmsnO1xuZXhwb3J0IHsgRXJyb3JJY29uIH0gZnJvbSAnLi9jb21wb25lbnRzL2Vycm9yJztcbmV4cG9ydCB7IExvYWRlckljb24gfSBmcm9tICcuL2NvbXBvbmVudHMvbG9hZGVyJztcblxuZXhwb3J0IHsgdG9hc3QgfTtcbmV4cG9ydCBkZWZhdWx0IHRvYXN0O1xuIiwgImxldCBlPXtkYXRhOlwiXCJ9LHQ9dD0+XCJvYmplY3RcIj09dHlwZW9mIHdpbmRvdz8oKHQ/dC5xdWVyeVNlbGVjdG9yKFwiI19nb29iZXJcIik6d2luZG93Ll9nb29iZXIpfHxPYmplY3QuYXNzaWduKCh0fHxkb2N1bWVudC5oZWFkKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIikpLHtpbm5lckhUTUw6XCIgXCIsaWQ6XCJfZ29vYmVyXCJ9KSkuZmlyc3RDaGlsZDp0fHxlLHI9ZT0+e2xldCByPXQoZSksbD1yLmRhdGE7cmV0dXJuIHIuZGF0YT1cIlwiLGx9LGw9Lyg/OihbXFx1MDA4MC1cXHVGRkZGXFx3LSVAXSspICo6PyAqKFteeztdKz8pO3woW147fXtdKj8pICp7KXwofVxccyopL2csYT0vXFwvXFwqW15dKj9cXCpcXC98ICArL2csbj0vXFxuKy9nLG89KGUsdCk9PntsZXQgcj1cIlwiLGw9XCJcIixhPVwiXCI7Zm9yKGxldCBuIGluIGUpe2xldCBjPWVbbl07XCJAXCI9PW5bMF0/XCJpXCI9PW5bMV0/cj1uK1wiIFwiK2MrXCI7XCI6bCs9XCJmXCI9PW5bMV0/byhjLG4pOm4rXCJ7XCIrbyhjLFwia1wiPT1uWzFdP1wiXCI6dCkrXCJ9XCI6XCJvYmplY3RcIj09dHlwZW9mIGM/bCs9byhjLHQ/dC5yZXBsYWNlKC8oW14sXSkrL2csZT0+bi5yZXBsYWNlKC8oXjouKil8KFteLF0pKy9nLHQ9Pi8mLy50ZXN0KHQpP3QucmVwbGFjZSgvJi9nLGUpOmU/ZStcIiBcIit0OnQpKTpuKTpudWxsIT1jJiYobj0vXi0tLy50ZXN0KG4pP246bi5yZXBsYWNlKC9bQS1aXS9nLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCksYSs9by5wP28ucChuLGMpOm4rXCI6XCIrYytcIjtcIil9cmV0dXJuIHIrKHQmJmE/dCtcIntcIithK1wifVwiOmEpK2x9LGM9e30scz1lPT57aWYoXCJvYmplY3RcIj09dHlwZW9mIGUpe2xldCB0PVwiXCI7Zm9yKGxldCByIGluIGUpdCs9citzKGVbcl0pO3JldHVybiB0fXJldHVybiBlfSxpPShlLHQscixpLHApPT57bGV0IHU9cyhlKSxkPWNbdV18fChjW3VdPShlPT57bGV0IHQ9MCxyPTExO2Zvcig7dDxlLmxlbmd0aDspcj0xMDEqcitlLmNoYXJDb2RlQXQodCsrKT4+PjA7cmV0dXJuXCJnb1wiK3J9KSh1KSk7aWYoIWNbZF0pe2xldCB0PXUhPT1lP2U6KGU9PntsZXQgdCxyLG89W3t9XTtmb3IoO3Q9bC5leGVjKGUucmVwbGFjZShhLFwiXCIpKTspdFs0XT9vLnNoaWZ0KCk6dFszXT8ocj10WzNdLnJlcGxhY2UobixcIiBcIikudHJpbSgpLG8udW5zaGlmdChvWzBdW3JdPW9bMF1bcl18fHt9KSk6b1swXVt0WzFdXT10WzJdLnJlcGxhY2UobixcIiBcIikudHJpbSgpO3JldHVybiBvWzBdfSkoZSk7Y1tkXT1vKHA/e1tcIkBrZXlmcmFtZXMgXCIrZF06dH06dCxyP1wiXCI6XCIuXCIrZCl9bGV0IGY9ciYmYy5nP2MuZzpudWxsO3JldHVybiByJiYoYy5nPWNbZF0pLCgoZSx0LHIsbCk9PntsP3QuZGF0YT10LmRhdGEucmVwbGFjZShsLGUpOi0xPT09dC5kYXRhLmluZGV4T2YoZSkmJih0LmRhdGE9cj9lK3QuZGF0YTp0LmRhdGErZSl9KShjW2RdLHQsaSxmKSxkfSxwPShlLHQscik9PmUucmVkdWNlKChlLGwsYSk9PntsZXQgbj10W2FdO2lmKG4mJm4uY2FsbCl7bGV0IGU9bihyKSx0PWUmJmUucHJvcHMmJmUucHJvcHMuY2xhc3NOYW1lfHwvXmdvLy50ZXN0KGUpJiZlO249dD9cIi5cIit0OmUmJlwib2JqZWN0XCI9PXR5cGVvZiBlP2UucHJvcHM/XCJcIjpvKGUsXCJcIik6ITE9PT1lP1wiXCI6ZX1yZXR1cm4gZStsKyhudWxsPT1uP1wiXCI6bil9LFwiXCIpO2Z1bmN0aW9uIHUoZSl7bGV0IHI9dGhpc3x8e30sbD1lLmNhbGw/ZShyLnApOmU7cmV0dXJuIGkobC51bnNoaWZ0P2wucmF3P3AobCxbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKSxyLnApOmwucmVkdWNlKChlLHQpPT5PYmplY3QuYXNzaWduKGUsdCYmdC5jYWxsP3Qoci5wKTp0KSx7fSk6bCx0KHIudGFyZ2V0KSxyLmcsci5vLHIuayl9bGV0IGQsZixnLGI9dS5iaW5kKHtnOjF9KSxoPXUuYmluZCh7azoxfSk7ZnVuY3Rpb24gbShlLHQscixsKXtvLnA9dCxkPWUsZj1yLGc9bH1mdW5jdGlvbiBqKGUsdCl7bGV0IHI9dGhpc3x8e307cmV0dXJuIGZ1bmN0aW9uKCl7bGV0IGw9YXJndW1lbnRzO2Z1bmN0aW9uIGEobixvKXtsZXQgYz1PYmplY3QuYXNzaWduKHt9LG4pLHM9Yy5jbGFzc05hbWV8fGEuY2xhc3NOYW1lO3IucD1PYmplY3QuYXNzaWduKHt0aGVtZTpmJiZmKCl9LGMpLHIubz0vICpnb1xcZCsvLnRlc3QocyksYy5jbGFzc05hbWU9dS5hcHBseShyLGwpKyhzP1wiIFwiK3M6XCJcIiksdCYmKGMucmVmPW8pO2xldCBpPWU7cmV0dXJuIGVbMF0mJihpPWMuYXN8fGUsZGVsZXRlIGMuYXMpLGcmJmlbMF0mJmcoYyksZChpLGMpfXJldHVybiB0P3QoYSk6YX19ZXhwb3J0e3UgYXMgY3NzLHIgYXMgZXh0cmFjdENzcyxiIGFzIGdsb2IsaCBhcyBrZXlmcmFtZXMsbSBhcyBzZXR1cCxqIGFzIHN0eWxlZH07XG4iXSwKICAibWFwcGluZ3MiOiAiNmlCQUFBLElBQUFBLEdBQUFDLEdBQUFDLEdBQUEsY0FTYSxJQUFJQyxHQUFFLE9BQU8sSUFBSSxlQUFlLEVBQUVDLEdBQUUsT0FBTyxJQUFJLGNBQWMsRUFBRUMsR0FBRSxPQUFPLElBQUksZ0JBQWdCLEVBQUVDLEdBQUUsT0FBTyxJQUFJLG1CQUFtQixFQUFFQyxHQUFFLE9BQU8sSUFBSSxnQkFB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RyxDQUFDTixHQUFFTyxDQUFDLEVBQUUsQ0FBQyxJQUFJTCxFQUFFSSxJQUFJLEVBQUUsR0FBR0wsR0FBRyxDQUFDLElBQUlDLEVBQUVILEVBQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLSSxFQUFFUCxHQUFFLEtBQUtNLEVBQUUsUUFBUUwsR0FBRSxFQUFFLENBQUMsR0FBR00sRUFBRSxDQUFDLEVBQUVKLEVBQUUsTUFBTSxFQUFFSSxFQUFFLENBQUMsR0FBR0gsRUFBRUcsRUFBRSxDQUFDLEVBQUUsUUFBUUwsR0FBRSxHQUFHLEVBQUUsS0FBSyxFQUFFQyxFQUFFLFFBQVFBLEVBQUUsQ0FBQyxFQUFFQyxDQUFDLEVBQUVELEVBQUUsQ0FBQyxFQUFFQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUdELEVBQUUsQ0FBQyxFQUFFSSxFQUFFLENBQUMsQ0FBQyxFQUFFQSxFQUFFLENBQUMsRUFBRSxRQUFRTCxHQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsT0FBT0MsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUVFLEdBQUVPLENBQUMsRUFBRVQsR0FBRU8sRUFBRSxDQUFDLENBQUMsY0FBY0UsQ0FBQyxFQUFFTCxDQUFDLEVBQUVBLEVBQUVILEVBQUUsR0FBRyxJQUFJUSxDQUFDLENBQUMsQ0FBQyxJQUFJQyxFQUFFVCxHQUFHQyxHQUFFLEVBQUVBLEdBQUUsRUFBRSxLQUFLLE9BQU9ELElBQUlDLEdBQUUsRUFBRUEsR0FBRU8sQ0FBQyxJQUFJLENBQUNOLEVBQUVDLEVBQUVILEVBQUVKLElBQUksQ0FBQ0EsRUFBRU8sRUFBRSxLQUFLQSxFQUFFLEtBQUssUUFBUVAsRUFBRU0sQ0FBQyxFQUFPQyxFQUFFLEtBQUssUUFBUUQsQ0FBQyxJQUFyQixLQUF5QkMsRUFBRSxLQUFLSCxFQUFFRSxFQUFFQyxFQUFFLEtBQUtBLEVBQUUsS0FBS0QsRUFBRSxHQUFHRCxHQUFFTyxDQUFDLEVBQUUsRUFBRUgsRUFBRUksQ0FBQyxFQUFFRCxDQUFDLEVBQUVGLEdBQUUsQ0FBQyxFQUFFLEVBQUVOLElBQUksRUFBRSxPQUFPLENBQUNFLEVBQUVOLEVBQUVDLElBQUksQ0FBQyxJQUFJQyxFQUFFLEVBQUVELENBQUMsRUFBRSxHQUFHQyxHQUFHQSxFQUFFLEtBQUssQ0FBQyxJQUFJSSxFQUFFSixFQUFFRSxDQUFDLEVBQUVHLEVBQUVELEdBQUdBLEVBQUUsT0FBT0EsRUFBRSxNQUFNLFdBQVcsTUFBTSxLQUFLQSxDQUFDLEdBQUdBLEVBQUVKLEVBQUVLLEVBQUUsSUFBSUEsRUFBRUQsR0FBYSxPQUFPQSxHQUFqQixTQUFtQkEsRUFBRSxNQUFNLEdBQUdILEdBQUVHLEVBQUUsRUFBRSxFQUFPQSxJQUFMLEdBQU8sR0FBR0EsQ0FBQyxDQUFDLE9BQU9BLEVBQUVOLEdBQVNFLEdBQUUsR0FBSyxFQUFFLEVBQUUsRUFBRSxTQUFTUyxHQUFFLEVBQUUsQ0FBQyxJQUFJUCxFQUFFLE1BQU0sQ0FBQyxFQUFFSixFQUFFLEVBQUUsS0FBSyxFQUFFSSxFQUFFLENBQUMsRUFBRSxFQUFFLE9BQU9LLEdBQUVULEVBQUUsUUFBUUEsRUFBRSxJQUFJVSxHQUFFVixFQUFFLENBQUMsRUFBRSxNQUFNLEtBQUssVUFBVSxDQUFDLEVBQUVJLEVBQUUsQ0FBQyxFQUFFSixFQUFFLE9BQU8sQ0FBQ00sRUFBRUMsSUFBSSxPQUFPLE9BQU9ELEVBQUVDLEdBQUdBLEVBQUUsS0FBS0EsRUFBRUgsRUFBRSxDQUFDLEVBQUVHLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRVAsRUFBRU8sR0FBRUgsRUFBRSxNQUFNLEVBQUVBLEVBQUUsRUFBRUEsRUFBRSxFQUFFQSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUlRLEdBQUVDLEdBQUVDLEdBQUVDLEdBQUVKLEdBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUVLLEdBQUVMLEdBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsU0FBU00sR0FBRSxFQUFFLEVBQUViLEVBQUVKLEVBQUUsQ0FBQ0csR0FBRSxFQUFFLEVBQUVTLEdBQUUsRUFBRUMsR0FBRVQsRUFBRVUsR0FBRWQs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ZV9yZWFjdF9wcm9kdWN0aW9uX21pbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibCIsICJuIiwgInAiLCAicSIsICJyIiwgInQiLCAidSIsICJ2IiwgInciLCAieCIsICJ5IiwgInoiLCAiQSIsICJhIiwgIkIiLCAiQyIsICJEIiwgIkUiLCAiYiIsICJlIiwgIkYiLCAiRyIsICJIIiwgIkkiLCAiSiIsICJLIiwgIkwiLCAiTSIsICJkIiwgImMiLCAiayIsICJoIiwgImciLCAiZiIsICJtIiwgIk4iLCAiTyIsICJlc2NhcGUiLCAiUCIsICJRIiwgIlIiLCAiUyIsICJUIiwgIlUiLCAiViIsICJXIiwgInJlcXVpcmVfcmVhY3QiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJyZXF1aXJlX3NjaGVkdWxlcl9wcm9kdWN0aW9uX21pbiIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAiZiIsICJhIiwgImIiLCAiYyIsICJkIiwgImUiLCAiZyIsICJoIiwgImsiLCAidyIsICJtIiwgIkMiLCAibiIsICJ4IiwgImwiLCAicCIsICJxIiwgInIiLCAidCIsICJ1IiwgInYiLCAieSIsICJ6IiwgIkEiLCAiQiIsICJEIiwgIkUiLCAiRiIsICJHIiwgIkgiLCAiSSIsICJKIiwgIksiLCAiTCIsICJNIiwgIk4iLCAiTyIsICJQIiwgIlEiLCAiUiIsICJTIiwgIlQiLCAiVSIsICJyZXF1aXJlX3NjaGVkdWxlciIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgInJlcXVpcmVfcmVhY3RfZG9tX3Byb2R1Y3Rpb25fbWluIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJhYSIsICJjYSIsICJwIiwgImEiLCAiYiIsICJjIiwgImRhIiwgImVhIiwgImZhIiwgImhhIiwgImlhIiwgImphIiwgImthIiwgImxhIiwgIm1hIiwgIm9hIiwgInBhIiwgImQiLCAicWEiLCAidiIsICJlIiwgImYiLCAiZyIsICJ6IiwgInJhIiwgInNhIiwgInRhIiwgInVhIiwgInZhIiwgIndhIiwgInlhIiwgInphIiwgIkFhIiwgIkJhIiwgIkNhIiwgIkRhIiwgIkVhIiwgIkZhIiwgIkdhIiwgIkhhIiwgIklhIiwgIkphIiwgIkthIiwgIkEiLCAiTGEiLCAiTWEiLCAiTmEiLCAiT2EiLCAibCIsICJoIiwgImsiLCAiUGEiLCAiUWEiLCAiUmEiLCAiU2EiLCAiVGEiLCAiVWEiLCAiVmEiLCAiV2EiLCAiWGEiLCAiWWEiLCAiWmEiLCAiYWIiLCAiYmIiLCAiY2IiLCAiZGIiLCAiZWIiLCAiZmIiLCAiZ2IiLCAiaGIiLCAiaWIiLCAiamIiLCAia2IiLCAibGIiLCAibWIiLCAibmIiLCAib2IiLCAicGIiLCAicWIiLCAicmIiLCAic2IiLCAidGIiLCAidWIiLCAidmIiLCAid2IiLCAieGIiLCAieWIiLCAiemIiLCAiQWIiLCAiQmIiLCAiQ2IiLCAiRGIiLCAiRWIiLCAiRmIiLCAiR2IiLCAiSGIiLCAiSWIiLCAiSmIiLCAiS2IiLCAiTGIiLCAiTWIiLCAiTmIiLCAibSIsICJPYiIsICJQYiIsICJRYiIsICJSYiIsICJTYiIsICJUYiIsICJVYiIsICJWYiIsICJXYiIsICJYYiIsICJZYiIsICJaYiIsICIkYiIsICJhYyIsICJiYyIsICJjYyIsICJkYyIsICJCIiwgImVjIiwgImZjIiwgImdjIiwgImhjIiwgImljIiwgImpjIiwgImtjIiwgImxjIiwgIm1jIiwgIm9jIiwgIm5jIiwgInBjIiwgInFjIiwgInJjIiwgInNjIiwgInRjIiwgInVjIiwgInZjIiwgIndjIiwgInhjIiwgInljIiwgInpjIiwgIkFjIiwgIkJjIiwgIkNjIiwgIkMiLCAiRGMiLCAiRWMiLCAiRmMiLCAiR2MiLCAiSGMiLCAiSWMiLCAiSmMiLCAiS2MiLCAiTGMiLCAiTWMiLCAiTmMiLCAiT2MiLCAiUGMiLCAiUWMiLCAiUmMiLCAiU2MiLCAiVGMiLCAiVWMiLCAiVmMiLCAiV2MiLCAiWGMiLCAiWWMiLCAiWmMiLCAiJGMiLCAiYWQiLCAiYmQiLCAiY2QiLCAiZGQiLCAiZWQiLCAiZmQiLCAiZ2QiLCAiaGQiLCAiaWQiLCAiamQiLCAia2QiLCAibGQiLCAibWQiLCAibmQiLCAib2QiLCAicGQiLCAicWQiLCAicmQiLCAic2QiLCAidGQiLCAidWQiLCAidmQiLCAid2QiLCAieGQiLCAieWQiLCAiQWQiLCAiemQiLCAiQmQiLCAiQ2QiLCAiRGQiLCAiRWQiLCAiRmQiLCAiR2QiLCAiSGQiLCAiSWQiLCAiSmQiLCAiS2QiLCAiTGQiLCAiTWQiLCAiTmQiLCAiT2QiLCAiUGQiLCAiUWQiLCAiUmQiLCAiU2QiLCAiVGQiLCAiVWQiLCAiVmQiLCAiV2QiLCAiWGQiLCAiWWQiLCAiWmQiLCAiJGQiLCAiYWUiLCAiYmUiLCAiY2UiLCAiZGUiLCAiZWUiLCAiZmUiLCAiZ2UiLCAiaGUiLCAiaWUiLCAiamUiLCAia2UiLCAibGUiLCAibWUiLCAibmUiLCAib2UiLCAicGUiLCAicWUiLCAicmUiLCAic2UiLCAidGUiLCAidWUiLCAidmUiLCAid2UiLCAieWUiLCAiemUiLCAieGUiLCAiQWUiLCAiQmUiLCAiQ2UiLCAiRGUiLCAiRWUiLCAiRmUiLCAiR2UiLCAiSGUiLCAiSWUiLCAiSmUiLCAiS2UiLCAiTGUiLCAiTWUiLCAiTmUiLCAiT2UiLCAiUGUiLCAiUWUiLCAiUmUiLCAiU2UiLCAiVGUiLCAiVWUiLCAiVmUiLCAiV2UiLCAiWGUiLCAiWWUiLCAiWmUiLCAiJGUiLCAiYWYiLCAiYmYiLCAiY2YiLCAiZGYiLCAiZWYiLCAiZmYiLCAiZ2YiLCAiaGYiLCAiamYiLCAia2YiLCAibGYiLCAibWYiLCAibmYiLCAiRCIsICJvZiIsICJwZiIsICJxZiIsICJyZiIsICJzZiIsICJuIiwgInQiLCAiSiIsICJ4IiwgInciLCAidSIsICJGIiwgInRmIiwgInVmIiwgInZmIiwgIndmIiwgIm5hIiwgInhhIiwgIiRhIiwgImJhIiwgInhmIiwgInlmIiwgInpmIiwgIkFmIiwgIkJmIiwgIkNmIiwgIkRmIiwgIkVmIiwgIkZmIiwgIkdmIiwgIkhmIiwgIkpmIiwgIklmIiwgIktmIiwgIkxmIiwgIk1mIiwgIk5mIiwgIk9mIiwgIlBmIiwgIlFmIiwgIlJmIiwgIlNmIiwgIlRmIiwgIlVmIiwgIkUiLCAiRyIsICJWZiIsICJIIiwgIldmIiwgIlhmIiwgIllmIiwgIlpmIiwgIiRmIiwgImFnIiwgImJnIiwgImNnIiwgImRnIiwgImVnIiwgImZnIiwgImdnIiwgImhnIiwgImlnIiwgImpnIiwgImtnIiwgImxnIiwgIm1nIiwgIm5nIiwgIm9nIiwgInBnIiwgInFnIiwgInJnIiwgInNnIiwgInRnIiwgInVnIiwgInZnIiwgIndnIiwgInhnIiwgInlnIiwgIkkiLCAiemciLCAiQWciLCAiQmciLCAiQ2ciLCAiRGciLCAiRWciLCAiRmciLCAiR2ciLCAiSGciLCAiSWciLCAiSmciLCAiS2ciLCAiTGciLCAiTWciLCAiTmciLCAiT2ciLCAiUGciLCAiUWciLCAiUmciLCAiU2ciLCAiVGciLCAiVWciLCAiVmciLCAiV2ciLCAiWGciLCAiWWciLCAiWmciLCAiJGciLCAiYWgiLCAiYmgiLCAiY2giLCAiZGgiLCAiSyIsICJlaCIsICJmaCIsICJnaCIsICJxIiwgInIiLCAieSIsICJoaCIsICJpaCIsICJqaCIsICJraCIsICJuaCIsICJMIiwgImxoIiwgIm1oIiwgIm9oIiwgInBoIiwgInFoIiwgInJoIiwgInNoIiwgInRoIiwgInVoIiwgInZoIiwgIndoIiwgInhoIiwgInloIiwgInpoIiwgIkFoIiwgIkJoIiwgIkNoIiwgIkRoIiwgIkVoIiwgIkZoIiwgIkdoIiwgIkhoIiwgIkloIiwgIkpoIiwgIktoIiwgIkxoIiwgIk0iLCAiTWgiLCAiTmgiLCAiT2giLCAiUGgiLCAiUWgiLCAiUmgiLCAiTiIsICJPIiwgIlAiLCAiU2giLCAiVGgiLCAiVWgiLCAiVmgiLCAiUSIsICJXaCIsICJYaCIsICJZaCIsICJaaCIsICIkaCIsICJhaSIsICJiaSIsICJjaSIsICJkaSIsICJlaSIsICJmaSIsICJnaSIsICJoaSIsICJpaSIsICJqaSIsICJraSIsICJsaSIsICJtaSIsICJSIiwgIm5pIiwgIm9pIiwgInBpIiwgInFpIiwgInJpIiwgInNpIiwgInRpIiwgInVpIiwgInZpIiwgIndpIiwgInhpIiwgInlpIiwgInppIiwgIkFpIiwgIkJpIiwgIkNpIiwgIkRpIiwgIkVpIiwgIkZpIiwgIkdpIiwgIkhpIiwgIklpIiwgIkppIiwgIktpIiwgIkxpIiwgIk1pIiwgIk5pIiwgIk9pIiwgIlBpIiwgIlFpIiwgIlJpIiwgIlNpIiwgIlRpIiwgIlVpIiwgIlZpIiwgIldpIiwgIlhpIiwgIllpIiwgIlppIiwgIiRpIiwgImFqIiwgImJqIiwgImNqIiwgImRqIiwgImVqIiwgImZqIiwgImdqIiwgImhqIiwgImlqIiwgImpqIiwgImtqIiwgImxqIiwgIm1qIiwgIm5qIiwgIm9qIiwgInBqIiwgInFqIiwgInJqIiwgInNqIiwgInRqIiwgInVqIiwgInZqIiwgIndqIiwgInhqIiwgInlqIiwgInpqIiwgIkFqIiwgIkJqIiwgIkNqIiwgIkRqIiwgIkVqIiwgIlMiLCAiRmoiLCAiR2oiLCAiVCIsICJIaiIsICJJaiIsICJKaiIsICJLaiIsICJVIiwgIkxqIiwgIlYiLCAiTWoiLCAiTmoiLCAiT2oiLCAiUGoiLCAiUWoiLCAiUmoiLCAiU2oiLCAiVGoiLCAiVWoiLCAiVmoiLCAiV2oiLCAiWGoiLCAiWCIsICJZaiIsICJaaiIsICJhayIsICJiayIsICJjayIsICJkayIsICJlayIsICJmayIsICJnayIsICJoayIsICJpayIsICJqayIsICJrayIsICJsayIsICJtayIsICJuayIsICJvayIsICJwayIsICJZIiwgIloiLCAicWsiLCAicmsiLCAic2siLCAidGsiLCAidWsiLCAidmsiLCAid2siLCAieGsiLCAieWsiLCAiemsiLCAiQWsiLCAiQmsiLCAiQ2siLCAiRGsiLCAiRWsiLCAiRmsiLCAiR2siLCAiSGsiLCAiSWsiLCAiSmsiLCAiS2siLCAiTGsiLCAiTWsiLCAiTmsiLCAiT2siLCAiUGsiLCAiUWsiLCAiUmsiLCAiU2siLCAiVGsiLCAiVWsiLCAiVmsiLCAiV2siLCAiWGsiLCAiWWsiLCAiWmsiLCAiJGsiLCAiYWwiLCAiYmwiLCAiY2wiLCAiZGwiLCAiZWwiLCAiZmwiLCAiZ2wiLCAiaGwiLCAiaWwiLCAiamwiLCAia2wiLCAibGwiLCAibWwiLCAibmwiLCAib2wiLCAicGwiLCAicWwiLCAicmwiLCAic2wiLCAidGwiLCAidWwiLCAidmwiLCAid2wiLCAicmVxdWlyZV9yZWFjdF9kb20iLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm1vZHVsZSIsICJjaGVja0RDRSIsICJlcnIiLCAicmVxdWlyZV9jbGllbnQiLCAiX19jb21tb25KU01pbiIsICJleHBvcnRzIiwgIm0iLCAiaSIsICJyZXF1aXJlX3JlYWN0X2pzeF9ydW50aW1lX3Byb2R1Y3Rpb25fbWluIiwgIl9fY29tbW9uSlNNaW4iLCAiZXhwb3J0cyIsICJmIiwgImsiLCAibCIsICJtIiwgIm4iLCAicCIsICJxIiwgImMiLCAiYSIsICJnIiwgImIiLCAiZCIsICJlIiwgImgiLCAicmVxdWlyZV9qc3hfcnVudGltZSIsICJfX2NvbW1vbkpTTWluIiwgImV4cG9ydHMiLCAibW9kdWxlIiwgImltcG9ydF9yZWFjdCIsICJpbXBvcnRfY2xpZW50IiwgImFzc2VydCIsICJjb25kaXRpb24iLCAibXNnIiwgIkZMT0FUMzJfTUFYIiwgIkZMT0FUMzJfTUlOIiwgIlVJTlQzMl9NQVgiLCAiSU5UMzJfTUFYIiwgIklOVDMyX01JTiIsICJhc3NlcnRJbnQzMiIsICJhcmciLCAiYXNzZXJ0VUludDMyIiwgImFzc2VydEZsb2F0MzIiLCAiZW51bVR5cGVTeW1ib2wiLCAiZ2V0RW51bVR5cGUiLCAiZW51bU9iamVjdCIsICJhc3NlcnQiLCAic2V0RW51bVR5cGUiLCAidHlwZU5hbWUiLCAidmFsdWVzIiwgIm9wdCIsICJtYWtlRW51bVR5cGUiLCAidiIsICJfb3B0IiwgIm5hbWVzIiwgIm51bWJlcnMiLCAibm9ybWFsVmFsdWVzIiwgInZhbHVlIiwgIm4iLCAibm9ybWFsaXplRW51bVZhbHVlIiwgIm5hbWUiLCAibm8iLCAibWFrZUVudW0iLCAiTWVzc2FnZSIsICJvdGhlciIsICJieXRlcyIsICJvcHRpb25zIiwgInR5cGUiLCAiZm9ybWF0IiwgIm9wdCIsICJqc29uVmFsdWUiLCAianNvblN0cmluZyIsICJqc29uIiwgImUiLCAiYmluIiwgIndyaXRlciIsICJfYSIsICJ2YWx1ZSIsICJtYWtlTWVzc2FnZVR5cGUiLCAicnVudGltZSIsICJ0eXBlTmFtZSIsICJmaWVsZHMiLCAib3B0IiwgIl9hIiwgImxvY2FsTmFtZSIsICJ0eXBlIiwgImRhdGEiLCAiTWVzc2FnZSIsICJieXRlcyIsICJvcHRpb25zIiwgImpzb25WYWx1ZSIsICJqc29uU3RyaW5nIiwgImEiLCAiYiIsICJtYWtlUHJvdG9SdW50aW1lIiwgInN5bnRheCIsICJqc29uIiwgImJpbiIsICJ1dGlsIiwgInR5cGVOYW1lIiwgImZpZWxkcyIsICJvcHQiLCAibWFrZU1lc3NhZ2VUeXBlIiwgIm1ha2VFbnVtIiwgIm1ha2VFbnVtVHlwZSIsICJnZXRFbnVtVHlwZSIsICJTY2FsYXJUeXBlIiwgIkxvbmdUeXBlIiwgInZhcmludDY0cmVhZCIsICJsb3dCaXRzIiwgImhpZ2hCaXRzIiwgInNoaWZ0IiwgImIiLCAibWlkZGxlQnl0ZSIsICJ2YXJpbnQ2NHdyaXRlIiwgImxvIiwgImhpIiwgImJ5dGVzIiwgImhhc05leHQiLCAiYnl0ZSIsICJzcGxpdEJpdHMiLCAiaGFzTW9yZUJpdHMiLCAiVFdPX1BXUl8zMl9EQkwiLCAiaW50NjRGcm9tU3RyaW5nIiwgImRlYyIsICJtaW51cyIsICJiYXNlIiwgImFkZDFlNmRpZ2l0IiwgImJlZ2luIiwgImVuZCIsICJkaWdpdDFlNiIsICJuZWdhdGUiLCAibmV3Qml0cyIsICJpbnQ2NFRvU3RyaW5nIiwgImJpdHMiLCAibmVnYXRpdmUiLCAicmVzdWx0IiwgInVJbnQ2NFRvU3RyaW5nIiwgInRvVW5zaWduZWQiLCAibG93IiwgIm1pZCIsICJoaWdoIiwgImRpZ2l0QSIsICJkaWdpdEIiLCAiZGlnaXRDIiwgImRlY2ltYWxGcm9tMWU3V2l0aExlYWRpbmdaZXJvcyIsICJkaWdpdDFlNyIsICJwYXJ0aWFsIiwgInZhcmludDMyd3JpdGUiLCAidmFsdWUiLCAiaSIsICJ2YXJpbnQzMnJlYWQiLCAicmVhZEJ5dGVzIiwgIm1ha2VJbnQ2NFN1cHBvcnQiLCAiZHYiLCAiTUlOIiwgIk1BWCIsICJVTUlOIiwgIlVNQVgiLCAidmFsdWUiLCAiYmkiLCAibG8iLCAiaGkiLCAiYXNzZXJ0SW50NjRTdHJpbmciLCAiYXNzZXJ0IiwgImFzc2VydFVJbnQ2NFN0cmluZyIsICJpbnQ2NEZyb21TdHJpbmciLCAiaW50NjRUb1N0cmluZyIsICJ1SW50NjRUb1N0cmluZyIsICJwcm90b0ludDY0IiwgIldpcmVUeXBlIiwgIkJpbmFyeVdyaXRlciIsICJ0ZXh0RW5jb2RlciIsICJsZW4iLCAiaSIsICJieXRlcyIsICJvZmZzZXQiLCAiY2h1bmsiLCAicHJldiIsICJmaWVsZE5vIiwgInR5cGUiLCAidmFsdWUiLCAiYXNzZXJ0VUludDMyIiwgImFzc2VydEludDMyIiwgInZhcmludDMyd3JpdGUiLCAiYXNzZXJ0RmxvYXQzMiIsICJ2aWV3IiwgInRjIiwgInByb3RvSW50NjQiLCAidmFyaW50NjR3cml0ZSIsICJzaWduIiwgImxvIiwgImhpIiwgIkJpbmFyeVJlYWRlciIsICJidWYiLCAidGV4dERlY29kZXIiLCAidmFyaW50NjRyZWFkIiwgInZhcmludDMycmVhZCIsICJ0YWciLCAid2lyZVR5cGUiLCAic3RhcnQiLCAidCIsICJ6emUiLCAicyIsICJ3cmFwRmllbGQiLCAidHlwZSIsICJ2YWx1ZSIsICJNZXNzYWdlIiwgIndrdFdyYXBwZXJUb1NjYWxhclR5cGUiLCAiU2NhbGFyVHlwZSIsICJzY2FsYXJFcXVhbHMiLCAidHlwZSIsICJhIiwgImIiLCAiU2NhbGFyVHlwZSIsICJpIiwgInNjYWxhckRlZmF1bHRWYWx1ZSIsICJsb25nVHlwZSIsICJwcm90b0ludDY0IiwgInNjYWxhclR5cGVJbmZvIiwgInZhbHVlIiwgImlzVW5kZWZpbmVkIiwgIndpcmVUeXBlIiwgIldpcmVUeXBlIiwgImlzSW50cmluc2ljRGVmYXVsdCIsICJtZXRob2QiLCAidW5rbm93bkZpZWxkc1N5bWJvbCIsICJyZWFkRGVmYXVsdHMiLCAiYnl0ZXMiLCAiQmluYXJ5UmVhZGVyIiwgIndyaXRlRGVmYXVsdHMiLCAiQmluYXJ5V3JpdGVyIiwgIm1ha2VSZWFkT3B0aW9ucyIsICJvcHRpb25zIiwgIm1ha2VXcml0ZU9wdGlvbnMiLCAibWFrZUJpbmFyeUZvcm1hdENvbW1vbiIsICJtZXNzYWdlIiwgIl9hIiwgIndyaXRlciIsICJjIiwgImYiLCAibm8iLCAid2lyZVR5cGUiLCAiZGF0YSIsICJtIiwgInJlYWRlciIsICJsZW5ndGhPckVuZFRhZ0ZpZWxkTm8iLCAiZGVsaW1pdGVkTWVzc2FnZUVuY29kaW5nIiwgInR5cGUiLCAiZW5kIiwgImZpZWxkTm8iLCAiV2lyZVR5cGUiLCAiZmllbGQiLCAidGFyZ2V0IiwgInJlcGVhdGVkIiwgImxvY2FsTmFtZSIsICJzY2FsYXJUeXBlIiwgIlNjYWxhclR5cGUiLCAicmVhZCIsICJyZWFkU2NhbGFyIiwgInJlYWRTY2FsYXJMVFN0cmluZyIsICJhcnIiLCAiZSIsICJtZXNzYWdlVHlwZSIsICJyZWFkTWVzc2FnZUZpZWxkIiwgIk1lc3NhZ2UiLCAibWFwS2V5IiwgIm1hcFZhbCIsICJyZWFkTWFwRW50cnkiLCAiZm9ybWF0IiwgImRlbGltaXRlZCIsICJsZW5ndGgiLCAia2V5IiwgInZhbCIsICJrZXlSYXciLCAic2NhbGFyRGVmYXVsdFZhbHVlIiwgIkxvbmdUeXBlIiwgInYiLCAid3JpdGVNYXBFbnRyeSIsICJ2YWx1ZSIsICJrZXlWYWx1ZSIsICJhc3NlcnQiLCAid3JpdGVTY2FsYXIiLCAid3JpdGVNZXNzYWdlRmllbGQiLCAid3JhcEZpZWxkIiwgImVtaXRJbnRyaW5zaWNEZWZhdWx0IiwgIm1ldGhvZCIsICJpc0ludHJpbnNpY0RlZmF1bHQiLCAic2NhbGFyVHlwZUluZm8iLCAid3JpdGVQYWNrZWQiLCAibWFrZUJpbmFyeUZvcm1hdFByb3RvMyIsICJtYWtlQmluYXJ5Rm9ybWF0Q29tbW9uIiwgIm1lc3NhZ2UiLCAid3JpdGVyIiwgIm9wdGlvbnMiLCAidHlwZSIsICJmaWVsZCIsICJ2YWx1ZSIsICJyZXBlYXRlZCIsICJsb2NhbE5hbWUiLCAib25lb2YiLCAic2NhbGFyVHlwZSIsICJTY2FsYXJUeXBlIiwgIndyaXRlUGFja2VkIiwgIml0ZW0iLCAid3JpdGVTY2FsYXIiLCAid3JpdGVNZXNzYWdlRmllbGQiLCAia2V5IiwgInZhbCIsICJ3cml0ZU1hcEVudHJ5IiwgImVuY1RhYmxlIiwgImRlY1RhYmxlIiwgImkiLCAicHJvdG9CYXNlNjQiLCAiYmFzZTY0U3RyIiwgImVzIiwgImJ5dGVzIiwgImJ5dGVQb3MiLCAiZ3JvdXBQb3MiLCAiYiIsICJwIiwgImJhc2U2NCIsICJqc29uUmVhZERlZmF1bHRzIiwgImpzb25Xcml0ZURlZmF1bHRzIiwgIm1ha2VSZWFkT3B0aW9ucyIsICJvcHRpb25zIiwgIm1ha2VXcml0ZU9wdGlvbnMiLCAibWFrZUpzb25Gb3JtYXRDb21tb24iLCAibWFrZVdyaXRlRmllbGQiLCAid3JpdGVGaWVsZCIsICJ3cml0ZUVudW0iLCAid3JpdGVTY2FsYXIiLCAidHlwZSIsICJqc29uIiwgIm1lc3NhZ2UiLCAib25lb2ZTZWVuIiwgImpzb25LZXkiLCAianNvblZhbHVlIiwgImZpZWxkIiwgImxvY2FsTmFtZSIsICJ0YXJnZXQiLCAic2VlbiIsICJ0YXJnZXRBcnJheSIsICJqc29uSXRlbSIsICJ2YWwiLCAicmVhZEVudW0iLCAicmVhZFNjYWxhciIsICJlIiwgIm0iLCAidGFyZ2V0TWFwIiwgImpzb25NYXBLZXkiLCAianNvbk1hcFZhbHVlIiwgIkxvbmdUeXBlIiwgIlNjYWxhclR5cGUiLCAibWVzc2FnZVR5cGUiLCAiTWVzc2FnZSIsICJlbnVtVmFsdWUiLCAibWVtYmVyIiwgIm9uZW9mIiwgInIiLCAiZGVidWdKc29uVmFsdWUiLCAibG9uZ1R5cGUiLCAiZmxvYXQiLCAiYXNzZXJ0RmxvYXQzMiIsICJpbnQzMiIsICJhc3NlcnRVSW50MzIiLCAiYXNzZXJ0SW50MzIiLCAicHJvdG9JbnQ2NCIsICJsb25nIiwgInVMb25nIiwgInByb3RvQmFzZTY0IiwgImlnbm9yZVVua25vd25GaWVsZHMiLCAidmFsdWUiLCAiZW1pdEludHJpbnNpY0RlZmF1bHQiLCAiZW51bUFzSW50ZWdlciIsICJfYSIsICJhc3NlcnQiLCAibWFrZUpzb25Gb3JtYXRQcm90bzMiLCAibWFrZUpzb25Gb3JtYXRDb21tb24iLCAid3JpdGVFbnVtIiwgIndyaXRlU2NhbGFyIiwgImZpZWxkIiwgInZhbHVlIiwgIm9wdGlvbnMiLCAianNvbk9iaiIsICJlbnRyeUtleSIsICJlbnRyeVZhbHVlIiwgInZhbCIsICJhc3NlcnQiLCAiZW51bVR5cGUiLCAianNvbkFyciIsICJpIiwgIndyYXBGaWVsZCIsICJtYWtlVXRpbENvbW1vbiIsICJzZXRFbnVtVHlwZSIsICJzb3VyY2UiLCAidGFyZ2V0IiwgInR5cGUiLCAibWVtYmVyIiwgImxvY2FsTmFtZSIsICJ0IiwgInMiLCAic2siLCAic291cmNlRmllbGQiLCAidmFsIiwgIlNjYWxhclR5cGUiLCAidG9VOEFyciIsICJjb3B5IiwgImsiLCAidiIsICJtZXNzYWdlVHlwZSIsICJtdCIsICJhIiwgImIiLCAibSIsICJ2YSIsICJ2YiIsICJpIiwgInNjYWxhckVxdWFscyIsICJrZXlzIiwgInNjYWxhclR5cGUiLCAibWVzc2FnZSIsICJhbnkiLCAiY2xvbmVTaW5ndWxhckZpZWxkIiwgImtleSIsICJ2YWx1ZSIsICJNZXNzYWdlIiwgImMiLCAiaW5wdXQiLCAiSW50ZXJuYWxGaWVsZExpc3QiLCAiZmllbGRzIiwgIm5vcm1hbGl6ZXIiLCAianNvbk5hbWUiLCAidCIsICJmIiwgImZpZWxkTm8iLCAiYSIsICJiIiwgIm8iLCAibG9jYWxGaWVsZE5hbWUiLCAicHJvdG9OYW1lIiwgImluT25lb2YiLCAibmFtZSIsICJwcm90b0NhbWVsQ2FzZSIsICJzYWZlT2JqZWN0UHJvcGVydHkiLCAic2FmZU1lc3NhZ2VQcm9wZXJ0eSIsICJsb2NhbE9uZW9mTmFtZSIsICJmaWVsZEpzb25OYW1lIiwgInByb3RvQ2FtZWxDYXNlIiwgInNuYWtlQ2FzZSIsICJjYXBOZXh0IiwgImIiLCAiaSIsICJjIiwgInJlc2VydmVkT2JqZWN0UHJvcGVydGllcyIsICJyZXNlcnZlZE1lc3NhZ2VQcm9wZXJ0aWVzIiwgImZhbGxiYWNrIiwgIm5hbWUiLCAic2FmZU1lc3NhZ2VQcm9wZXJ0eSIsICJzYWZlT2JqZWN0UHJvcGVydHkiLCAiSW50ZXJuYWxPbmVvZkluZm8iLCAibmFtZSIsICJsb2NhbE9uZW9mTmFtZSIsICJmaWVsZCIsICJhc3NlcnQiLCAibG9jYWxOYW1lIiwgImkiLCAicHJvdG8zIiwgIm1ha2VQcm90b1J1bnRpbWUiLCAibWFrZUpzb25Gb3JtYXRQcm90bzMiLCAibWFrZUJpbmFyeUZvcm1hdFByb3RvMyIsICJtYWtlVXRpbENvbW1vbiIsICJmaWVsZHMiLCAiSW50ZXJuYWxGaWVsZExpc3QiLCAibm9ybWFsaXplRmllbGRJbmZvc1Byb3RvMyIsICJ0YXJnZXQiLCAibWVtYmVyIiwgIm5hbWUiLCAidCIsICJzY2FsYXJEZWZhdWx0VmFsdWUiLCAiZmllbGRJbmZvcyIsICJfYSIsICJfYiIsICJfYyIsICJfZCIsICJyIiwgIm8iLCAiZmllbGQiLCAiZiIsICJsb2NhbEZpZWxkTmFtZSIsICJmaWVsZEpzb25OYW1lIiwgIkxvbmdUeXBlIiwgIm9vbmFtZSIsICJJbnRlcm5hbE9uZW9mSW5mbyIsICJTY2FsYXJUeXBlIiwgIm1ha2VCaW5hcnlGb3JtYXRQcm90bzIiLCAibWFrZUJpbmFyeUZvcm1hdENvbW1vbiIsICJtZXNzYWdlIiwgIndyaXRlciIsICJvcHRpb25zIiwgInR5cGUiLCAiZmllbGQiLCAidmFsdWUiLCAicmVwZWF0ZWQiLCAibG9jYWxOYW1lIiwgIm9uZW9mIiwgInNjYWxhclR5cGUiLCAiU2NhbGFyVHlwZSIsICJ3cml0ZVBhY2tlZCIsICJpdGVtIiwgIndyaXRlU2NhbGFyIiwgIndyaXRlTWVzc2FnZUZpZWxkIiwgImtleSIsICJ2YWwiLCAid3JpdGVNYXBFbnRyeSIsICJlIiwgIm0iLCAiciIsICJtYWtlSnNvbkZvcm1hdFByb3RvMiIsICJtYWtlSnNvbkZvcm1hdENvbW1vbiIsICJ3cml0ZUVudW0iLCAid3JpdGVTY2FsYXIiLCAiZmllbGQiLCAidmFsdWUiLCAib3B0aW9ucyIsICJqc29uT2JqIiwgImVudHJ5S2V5IiwgImVudHJ5VmFsdWUiLCAidmFsIiwgImFzc2VydCIsICJlbnVtVHlwZSIsICJqc29uQXJyIiwgImkiLCAid3JhcEZpZWxkIiwgInByb3RvMiIsICJtYWtlUHJvdG9SdW50aW1lIiwgIm1ha2VKc29uRm9ybWF0UHJvdG8yIiwgIm1ha2VCaW5hcnlGb3JtYXRQcm90bzIiLCAibWFrZVV0aWxDb21tb24iLCAiZmllbGRzIiwgIkludGVybmFsRmllbGRMaXN0IiwgIm5vcm1hbGl6ZUZpZWxkSW5mb3NQcm90bzIiLCAidGFyZ2V0IiwgIm1lbWJlciIsICJuYW1lIiwgInQiLCAiZmllbGRJbmZvcyIsICJfYSIsICJfYiIsICJfYyIsICJfZCIsICJfZSIsICJyIiwgIm8iLCAiZmllbGQiLCAiZiIsICJsb2NhbEZpZWxkTmFtZSIsICJmaWVsZEpzb25OYW1lIiwgIkxvbmdUeXBlIiwgIm9vbmFtZSIsICJJbnRlcm5hbE9uZW9mSW5mbyIsICJNZXRob2RLaW5kIiwgIk1ldGhvZElkZW1wb3RlbmN5IiwgIkVkaXRpb24iLCAicHJvdG8yIiwgIkZpbGVEZXNjcmlwdG9yU2V0IiwgIl9GaWxlRGVzY3JpcHRvclNldCIsICJNZXNzYWdlIiwgImRhdGEiLCAiYnl0ZXMiLCAib3B0aW9ucyIsICJqc29uVmFsdWUiLCAianNvblN0cmluZyIsICJhIiwgImIiLCAiRmlsZURlc2NyaXB0b3JQcm90byIsICJfRmlsZURlc2NyaXB0b3JQcm90byIsICJEZXNjcmlwdG9yUHJvdG8iLCAiRW51bURlc2NyaXB0b3JQcm90byIsICJTZXJ2aWNlRGVzY3JpcHRvclByb3RvIiwgIkZpZWxkRGVzY3JpcHRvclByb3RvIiwgIkZpbGVPcHRpb25zIiwgIlNvdXJjZUNvZGVJbmZvIiwgIl9EZXNjcmlwdG9yUHJvdG8iLCAiRGVzY3JpcHRvclByb3RvX0V4dGVuc2lvblJhbmdlIiwgIk9uZW9mRGVzY3JpcHRvclByb3RvIiwgIk1lc3NhZ2VPcHRpb25zIiwgIkRlc2NyaXB0b3JQcm90b19SZXNlcnZlZFJhbmdlIiwgIl9EZXNjcmlwdG9yUHJvdG9fRXh0ZW5zaW9uUmFuZ2UiLCAiRXh0ZW5zaW9uUmFuZ2VPcHRpb25zIiwgIl9EZXNjcmlwdG9yUHJvdG9fUmVzZXJ2ZWRSYW5nZSIsICJfRXh0ZW5zaW9uUmFuZ2VPcHRpb25zIiwgIlVuaW50ZXJwcmV0ZWRPcHRpb24iLCAiRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX0RlY2xhcmF0aW9uIiwgIkZlYXR1cmVTZXQiLCAiRXh0ZW5zaW9uUmFuZ2VPcHRpb25zX1ZlcmlmaWNhdGlvblN0YXRlIiwgIl9FeHRlbnNpb25SYW5nZU9wdGlvbnNfRGVjbGFyYXRpb24iLCAiX0ZpZWxkRGVzY3JpcHRvclByb3RvIiwgIkZpZWxkRGVzY3JpcHRvclByb3RvX0xhYmVsIiwgIkZpZWxkRGVzY3JpcHRvclByb3RvX1R5cGUiLCAiRmllbGRPcHRpb25zIiwgIl9PbmVvZkRlc2NyaXB0b3JQcm90byIsICJPbmVvZk9wdGlvbnMiLCAiX0VudW1EZXNjcmlwdG9yUHJvdG8iLCAiRW51bVZhbHVlRGVzY3JpcHRvclByb3RvIiwgIkVudW1PcHRpb25zIiwgIkVudW1EZXNjcmlwdG9yUHJvdG9fRW51bVJlc2VydmVkUmFuZ2UiLCAiX0VudW1EZXNjcmlwdG9yUHJvdG9fRW51bVJlc2VydmVkUmFuZ2UiLCAiX0VudW1WYWx1ZURlc2NyaXB0b3JQcm90byIsICJFbnVtVmFsdWVPcHRpb25zIiwgIl9TZXJ2aWNlRGVzY3JpcHRvclByb3RvIiwgIk1ldGhvZERlc2NyaXB0b3JQcm90byIsICJTZXJ2aWNlT3B0aW9ucyIsICJfTWV0aG9kRGVzY3JpcHRvclByb3RvIiwgIk1ldGhvZE9wdGlvbnMiLCAiX0ZpbGVPcHRpb25zIiwgIkZpbGVPcHRpb25zX09wdGltaXplTW9kZSIsICJfTWVzc2FnZU9wdGlvbnMiLCAiX0ZpZWxkT3B0aW9ucyIsICJGaWVsZE9wdGlvbnNfQ1R5cGUiLCAiRmllbGRPcHRpb25zX0pTVHlwZSIsICJGaWVsZE9wdGlvbnNfT3B0aW9uUmV0ZW50aW9uIiwgIkZpZWxkT3B0aW9uc19PcHRpb25UYXJnZXRUeXBlIiwgIkZpZWxkT3B0aW9uc19FZGl0aW9uRGVmYXVsdCIsICJfRmllbGRPcHRpb25zX0VkaXRpb25EZWZhdWx0IiwgIl9PbmVvZk9wdGlvbnMiLCAiX0VudW1PcHRpb25zIiwgIl9FbnVtVmFsdWVPcHRpb25zIiwgIl9TZXJ2aWNlT3B0aW9ucyIsICJfTWV0aG9kT3B0aW9ucyIsICJNZXRob2RPcHRpb25zX0lkZW1wb3RlbmN5TGV2ZWwiLCAiX1VuaW50ZXJwcmV0ZWRPcHRpb24iLCAiVW5pbnRlcnByZXRlZE9wdGlvbl9OYW1lUGFydCIsICJfVW5pbnRlcnByZXRlZE9wdGlvbl9OYW1lUGFydCIsICJfRmVhdHVyZVNldCIsICJGZWF0dXJlU2V0X0ZpZWxkUHJlc2VuY2UiLCAiRmVhdHVyZVNldF9FbnVtVHlwZSIsICJGZWF0dXJlU2V0X1JlcGVhdGVkRmllbGRFbmNvZGluZyIsICJGZWF0dXJlU2V0X1V0ZjhWYWxpZGF0aW9uIiwgIkZlYXR1cmVTZXRfTWVzc2FnZUVuY29kaW5nIiwgIkZlYXR1cmVTZXRfSnNvbkZvcm1hdCIsICJGZWF0dXJlU2V0RGVmYXVsdHMiLCAiX0ZlYXR1cmVTZXREZWZhdWx0cyIsICJGZWF0dXJlU2V0RGVmYXVsdHNfRmVhdHVyZVNldEVkaXRpb25EZWZhdWx0IiwgIl9GZWF0dXJlU2V0RGVmYXVsdHNfRmVhdHVyZVNldEVkaXRpb25EZWZhdWx0IiwgIl9Tb3VyY2VDb2RlSW5mbyIsICJTb3VyY2VDb2RlSW5mb19Mb2NhdGlvbiIsICJfU291cmNlQ29kZUluZm9fTG9jYXRpb24iLCAiR2VuZXJhdGVkQ29kZUluZm8iLCAiX0dlbmVyYXRlZENvZGVJbmZvIiwgIkdlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb24iLCAiX0dlbmVyYXRlZENvZGVJbmZvX0Fubm90YXRpb24iLCAiR2VuZXJhdGVkQ29kZUluZm9fQW5ub3RhdGlvbl9TZW1hbnRpYyIsICJFbXB0eSIsICJfRW1wdHkiLCAiTWVzc2FnZSIsICJkYXRhIiwgInByb3RvMyIsICJieXRlcyIsICJvcHRpb25zIiwgImpzb25WYWx1ZSIsICJqc29uU3RyaW5nIiwgImEiLCAiYiIsICJWZXJpZnlVc2VyUmVxdWVzdCIsICJfVmVyaWZ5VXNlclJlcXVlc3QiLCAiTWVzc2FnZSIsICJkYXRhIiwgInByb3RvMyIsICJieXRlcyIsICJvcHRpb25zIiwgImpzb25WYWx1ZSIsICJqc29uU3RyaW5nIiwgImEiLCAiYiIsICJHcm91cEluZm9SZXF1ZXN0IiwgIl9Hcm91cEluZm9SZXF1ZXN0IiwgIkdyb3VwSUQiLCAiX0dyb3VwSUQiLCAiU2hhcmVSZXF1ZXN0IiwgIl9TaGFyZVJlcXVlc3QiLCAiR3JvdXBJbnZpdGUiLCAiX0dyb3VwSW52aXRlIiwgIkdyb3VwcyIsICJfR3JvdXBzIiwgIkdyb3VwIiwgIkFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0IiwgIl9BbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdCIsICJVc2VyIiwgIl9Vc2VyIiwgIkNvbmZpZyIsICJfR3JvdXAiLCAiX0NvbmZpZyIsICJMb2dpblJlc3BvbnNlIiwgIl9Mb2dpblJlc3BvbnNlIiwgIlR5cGVzUmVzcG9uc2UiLCAiX1R5cGVzUmVzcG9uc2UiLCAiTWVzc2FnZSIsICJkYXRhIiwgInByb3RvMyIsICJHUlBDVHlwZUluZm8iLCAiYnl0ZXMiLCAib3B0aW9ucyIsICJqc29uVmFsdWUiLCAianNvblN0cmluZyIsICJhIiwgImIiLCAiR2V0U291cmNlc1JlcXVlc3QiLCAiX0dldFNvdXJjZXNSZXF1ZXN0IiwgIlZvaWNlSW5wdXRSZXF1ZXN0IiwgIl9Wb2ljZUlucHV0UmVxdWVzdCIsICJWb2ljZUlucHV0UmVzcG9uc2UiLCAiX1ZvaWNlSW5wdXRSZXNwb25zZSIsICJTZWdtZW50IiwgIlJlbGF0ZVJlcXVlc3QiLCAiX1JlbGF0ZVJlcXVlc3QiLCAiU291cmNlcyIsICJfU291cmNlcyIsICJFbnVtZXJhdGVkU291cmNlIiwgIl9FbnVtZXJhdGVkU291cmNlIiwgIlNvdXJjZSIsICJEaXNwbGF5Q29udGVudCIsICJfRGlzcGxheUNvbnRlbnQiLCAiQ29udGVudCIsICJfU291cmNlIiwgIlNlcnZlciIsICJGb2xkZXIiLCAiX1NlcnZlciIsICJfRm9sZGVyIiwgIlNldFRhZ3NSZXF1ZXN0IiwgIl9TZXRUYWdzUmVxdWVzdCIsICJUYWdSZXF1ZXN0IiwgIl9UYWdSZXF1ZXN0IiwgIlRhZ3MiLCAiX1RhZ3MiLCAiVGFnIiwgIl9UYWciLCAiQ29udGVudElEcyIsICJfQ29udGVudElEcyIsICJDb250ZW50cyIsICJfQ29udGVudHMiLCAiUXVlcnkiLCAiX1F1ZXJ5IiwgIlJlc3VsdHMiLCAiX1Jlc3VsdHMiLCAiU3RvcmVkQ29udGVudCIsICJfU3RvcmVkQ29udGVudCIsICJVc2VyIiwgIkVkZ2UiLCAiX0VkZ2UiLCAiX0NvbnRlbnQiLCAiRGF0YSIsICJOb3JtYWxpemVkIiwgIlRyYW5zZm9ybWVkIiwgIlBvc3QiLCAiU2l0ZSIsICJfUG9zdCIsICJHaXRSZXBvIiwgIl9HaXRSZXBvIiwgIl9EYXRhIiwgIlRleHQiLCAiRmlsZSIsICJVUkwiLCAiX05vcm1hbGl6ZWQiLCAiQXJ0aWNsZSIsICJIVE1MIiwgIlRyYW5zY3JpcHQiLCAiUmVhZE1lIiwgIl9UcmFuc2Zvcm1lZCIsICJTdW1tYXJ5IiwgIkNhdGVnb3JpZXMiLCAiX0FydGljbGUiLCAiX0hUTUwiLCAiX1JlYWRNZSIsICJfU3VtbWFyeSIsICJfQ2F0ZWdvcmllcyIsICJfRmlsZSIsICJfVGV4dCIsICJfVVJMIiwgIlRva2VuIiwgIl9Ub2tlbiIsICJwcm90b0ludDY0IiwgIl9TZWdtZW50IiwgIl9UcmFuc2NyaXB0IiwgIl9HUlBDVHlwZUluZm8iLCAiRGVzY3JpcHRvclByb3RvIiwgIkVudW1EZXNjcmlwdG9yUHJvdG8iLCAiX1NpdGUiLCAiSHVnb0NvbmZpZyIsICJfSHVnb0NvbmZpZyIsICJNaW5pZnlDb25maWciLCAiTGFuZ3VhZ2VDb25maWciLCAicmVwZWF0ZWRfc3RyaW5nIiwgIlBhcmFtc0NvbmZpZyIsICJNYXJrdXBDb25maWciLCAiU2VydmljZXNDb25maWciLCAiX01pbmlmeUNvbmZpZyIsICJfTGFuZ3VhZ2VDb25maWciLCAicmVwZWF0ZWRfbWVudV9pdGVtIiwgIk1lbnVJdGVtIiwgIl9NZW51SXRlbSIsICJFZGl0UG9zdENvbmZpZyIsICJfRWRpdFBvc3RDb25maWciLCAiQXNzZXRzQ29uZmlnIiwgIl9Bc3NldHNDb25maWciLCAiX01hcmt1cENvbmZpZyIsICJHb2xkbWFya0NvbmZpZyIsICJIaWdobGlnaHRDb25maWciLCAiX0dvbGRtYXJrQ29uZmlnIiwgIlJlbmRlcmVyQ29uZmlnIiwgIl9SZW5kZXJlckNvbmZpZyIsICJfSGlnaGxpZ2h0Q29uZmlnIiwgIl9TZXJ2aWNlc0NvbmZpZyIsICJTZXJ2aWNlQ29uZmlnIiwgIl9TZXJ2aWNlQ29uZmlnIiwgIl9yZXBlYXRlZF9zdHJpbmciLCAiX3JlcGVhdGVkX21lbnVfaXRlbSIsICJfUGFyYW1zQ29uZmlnIiwgIlByb2ZpbGVNb2RlQ29uZmlnIiwgIkhvbWVJbmZvUGFyYW1zQ29uZmlnIiwgIlNvY2lhbEljb25Db25maWciLCAiX1Byb2ZpbGVNb2RlQ29uZmlnIiwgIkJ1dHRvbkNvbmZpZyIsICJfQnV0dG9uQ29uZmlnIiwgIl9Ib21lSW5mb1BhcmFtc0NvbmZpZyIsICJfU29jaWFsSWNvbkNvbmZpZyIsICJBbmFseXplQ29udmVyc2F0aW9uUmVxdWVzdCIsICJfQW5hbHl6ZUNvbnZlcnNhdGlvblJlcXVlc3QiLCAiTWVzc2FnZSIsICJkYXRhIiwgInByb3RvMyIsICJieXRlcyIsICJvcHRpb25zIiwgImpzb25WYWx1ZSIsICJqc29uU3RyaW5nIiwgImEiLCAiYiIsICJHZW5lcmF0ZUltYWdlc1JlcXVlc3QiLCAiX0dlbmVyYXRlSW1hZ2VzUmVxdWVzdCIsICJHZW5lcmF0ZUltYWdlc1Jlc3BvbnNlIiwgIl9HZW5lcmF0ZUltYWdlc1Jlc3BvbnNlIiwgIkRlbGV0ZVNlc3Npb25SZXF1ZXN0IiwgIl9EZWxldGVTZXNzaW9uUmVxdWVzdCIsICJQcm9tcHQiLCAiX1Byb21wdCIsICJHZXRQcm9tcHRzUmVxdWVzdCIsICJfR2V0UHJvbXB0c1JlcXVlc3QiLCAiR2V0UHJvbXB0c1Jlc3BvbnNlIiwgIl9HZXRQcm9tcHRzUmVzcG9uc2UiLCAiSW5mZXJSZXF1ZXN0IiwgIl9JbmZlclJlcXVlc3QiLCAiSW5mZXJSZXNwb25zZSIsICJfSW5mZXJSZXNwb25zZSIsICJVcGxvYWRDb250ZW50UmVxdWVzdCIsICJfVXBsb2FkQ29udGVudFJlcXVlc3QiLCAiQ29udGVudCIsICJVcGxvYWRDb250ZW50UmVzcG9uc2UiLCAiX1VwbG9hZENvbnRlbnRSZXNwb25zZSIsICJHZXRTZXNzaW9uUmVxdWVzdCIsICJfR2V0U2Vzc2lvblJlcXVlc3QiLCAiR2V0U2Vzc2lvblJlc3BvbnNlIiwgIl9HZXRTZXNzaW9uUmVzcG9uc2UiLCAiU2Vzc2lvbiIsICJHZXRTZXNzaW9uc1JlcXVlc3QiLCAiX0dldFNlc3Npb25zUmVxdWVzdCIsICJwcm90b0ludDY0IiwgIkdldFNlc3Npb25zUmVzcG9uc2UiLCAiX0dldFNlc3Npb25zUmVzcG9uc2UiLCAiVG9rZW4iLCAiX1Rva2VuIiwgIlNlZ21lbnQiLCAiX1NlZ21lbnQiLCAiX1Nlc3Npb24iLCAiVHJhbnNjcmlwdGlvblJlcXVlc3QiLCAiX1RyYW5zY3JpcHRpb25SZXF1ZXN0IiwgIlJlZ2lzdGVyRmxhZ3MiLCAiX1JlZ2lzdGVyRmxhZ3MiLCAiT0NSVGV4dCIsICJfT0NSVGV4dCIsICJJbWFnZSIsICJfSW1hZ2UiLCAiQ29udmVydEZpbGVSZXF1ZXN0IiwgIl9Db252ZXJ0RmlsZVJlcXVlc3QiLCAiQ2hhdFJlcXVlc3QiLCAiX0NoYXRSZXF1ZXN0IiwgIkNoYXRSZXNwb25zZSIsICJfQ2hhdFJlc3BvbnNlIiwgIllvdVR1YmVWaWRlbyIsICJfWW91VHViZVZpZGVvIiwgIkZpbGVQYXRoIiwgIl9GaWxlUGF0aCIsICJZb3VUdWJlVmlkZW9SZXNwb25zZSIsICJfWW91VHViZVZpZGVvUmVzcG9uc2UiLCAiQW5hbHl6ZUNvbnZlcnNhdGlvblJlc3BvbnNlIiwgIl9BbmFseXplQ29udmVyc2F0aW9uUmVzcG9uc2UiLCAiTWVzc2FnZSIsICJkYXRhIiwgInByb3RvMyIsICJieXRlcyIsICJvcHRpb25zIiwgImpzb25WYWx1ZSIsICJqc29uU3RyaW5nIiwgImEiLCAiYiIsICJBbmFseXplQ29udGVudCIsICJfQW5hbHl6ZUNvbnRlbnQiLCAiUHJvdG9mbG93U2VydmljZSIsICJZb3VUdWJlVmlkZW8iLCAiWW91VHViZVZpZGVvUmVzcG9uc2UiLCAiTWV0aG9kS2luZCIsICJHZXRTZXNzaW9uc1JlcXVlc3QiLCAiR2V0U2Vzc2lvbnNSZXNwb25zZSIsICJHZXRTZXNzaW9uUmVxdWVzdCIsICJHZXRTZXNzaW9uUmVzcG9uc2UiLCAiRGVsZXRlU2Vzc2lvblJlcXVlc3QiLCAiRW1wdHkiLCAiR2V0UHJvbXB0c1JlcXVlc3QiLCAiR2V0UHJvbXB0c1Jlc3BvbnNlIiwgIlByb21wdCIsICJVcGxvYWRDb250ZW50UmVxdWVzdCIsICJDaGF0UmVzcG9uc2UiLCAiSW5mZXJSZXF1ZXN0IiwgIkluZmVyUmVzcG9uc2UiLCAiQ2hhdFJlcXVlc3QiLCAiQ29udmVydEZpbGVSZXF1ZXN0IiwgIkZpbGVQYXRoIiwgIkdlbmVyYXRlSW1hZ2VzUmVxdWVzdCIsICJHZW5lcmF0ZUltYWdlc1Jlc3BvbnNlIiwgIkFuYWx5emVDb252ZXJzYXRpb25SZXF1ZXN0IiwgIkFuYWx5emVDb252ZXJzYXRpb25SZXNwb25zZSIsICJDb250ZW50U2VydmljZSIsICJDb250ZW50cyIsICJDb250ZW50SURzIiwgIk1ldGhvZEtpbmQiLCAiUXVlcnkiLCAiUmVzdWx0cyIsICJSZWxhdGVSZXF1ZXN0IiwgIkVtcHR5IiwgIkNvbnRlbnQiLCAiVGFnUmVxdWVzdCIsICJUYWdzIiwgIlNldFRhZ3NSZXF1ZXN0IiwgIkdldFNvdXJjZXNSZXF1ZXN0IiwgIlNvdXJjZXMiLCAiVHlwZXNSZXNwb25zZSIsICJWb2ljZUlucHV0UmVxdWVzdCIsICJWb2ljZUlucHV0UmVzcG9uc2UiLCAiVXNlclNlcnZpY2UiLCAiVXNlciIsICJNZXRob2RLaW5kIiwgIkVtcHR5IiwgIlZlcmlmeVVzZXJSZXF1ZXN0IiwgIkNvbmZpZyIsICJHcm91cElEIiwgIkdyb3VwSW52aXRlIiwgIkdyb3VwIiwgIkdyb3VwSW5mb1JlcXVlc3QiLCAiR3JvdXBzIiwgIlNoYXJlUmVxdWVzdCIsICJCYW5Vc2VyUmVxdWVzdCIsICJfQmFuVXNlclJlcXVlc3QiLCAiTWVzc2FnZSIsICJkYXRhIiwgInByb3RvMyIsICJieXRlcyIsICJvcHRpb25zIiwgImpzb25WYWx1ZSIsICJqc29uU3RyaW5nIiwgImEiLCAiYiIsICJCYW5Vc2VyUmVzcG9uc2UiLCAiX0JhblVzZXJSZXNwb25zZSIsICJTZW5kTWVzc2FnZVJlcXVlc3QiLCAiX1NlbmRNZXNzYWdlUmVxdWVzdCIsICJTZW5kTWVzc2FnZVJlc3BvbnNlIiwgIl9TZW5kTWVzc2FnZVJlc3BvbnNlIiwgIlJlY2VpdmVNZXNzYWdlc1JlcXVlc3QiLCAiX1JlY2VpdmVNZXNzYWdlc1JlcXVlc3QiLCAiX01lc3NhZ2UiLCAicHJvdG9JbnQ2NCIsICJDaGF0U2VydmljZSIsICJTZW5kTWVzc2FnZVJlcXVlc3QiLCAiU2VuZE1lc3NhZ2VSZXNwb25zZSIsICJNZXRob2RLaW5kIiwgIlJlY2VpdmVNZXNzYWdlc1JlcXVlc3QiLCAiTWVzc2FnZSIsICJCYW5Vc2VyUmVxdWVzdCIsICJCYW5Vc2VyUmVzcG9uc2UiLCAiTWV0cmljIiwgIl9NZXRyaWMiLCAiTWVzc2FnZSIsICJkYXRhIiwgInByb3RvMyIsICJIVFRQUmVxdWVzdCIsICJSUldlYiIsICJieXRlcyIsICJvcHRpb25zIiwgImpzb25WYWx1ZSIsICJqc29uU3RyaW5nIiwgImEiLCAiYiIsICJfSFRUUFJlcXVlc3QiLCAiX1JSV2ViIiwgIlNlbmRSZXNwb25zZSIsICJfU2VuZFJlc3BvbnNlIiwgIkV2ZW50U2VydmljZSIsICJNZXRyaWMiLCAiU2VuZFJlc3BvbnNlIiwgIk1ldGhvZEtpbmQiLCAiQ29kZSIsICJjb2RlVG9TdHJpbmciLCAidmFsdWUiLCAibmFtZSIsICJDb2RlIiwgImMiLCAic3RyaW5nVG9Db2RlIiwgImNvZGVGcm9tU3RyaW5nIiwgIkNvbm5lY3RFcnJvciIsICJfQ29ubmVjdEVycm9yIiwgIm1lc3NhZ2UiLCAiY29kZSIsICJDb2RlIiwgIm1ldGFkYXRhIiwgIm91dGdvaW5nRGV0YWlscyIsICJjYXVzZSIsICJjcmVhdGVNZXNzYWdlIiwgInJlYXNvbiIsICJ2IiwgInR5cGVPclJlZ2lzdHJ5IiwgInJlZ2lzdHJ5IiwgInR5cGVOYW1lIiwgImRldGFpbHMiLCAiZGF0YSIsICJNZXNzYWdlIiwgInR5cGUiLCAiY29kZVRvU3RyaW5nIiwgImFwcGVuZEhlYWRlcnMiLCAiaGVhZGVycyIsICJoIiwgImUiLCAidmFsdWUiLCAia2V5IiwgIm1ha2VBbnlDbGllbnQiLCAic2VydmljZSIsICJjcmVhdGVNZXRob2QiLCAiY2xpZW50IiwgImxvY2FsTmFtZSIsICJtZXRob2RJbmZvIiwgIm1ldGhvZCIsICJjcmVhdGVFbnZlbG9wZVJlYWRhYmxlU3RyZWFtIiwgInN0cmVhbSIsICJyZWFkZXIiLCAiYnVmZmVyIiwgImFwcGVuZCIsICJjaHVuayIsICJuIiwgImNvbnRyb2xsZXIiLCAiaGVhZGVyIiwgImxlbmd0aCIsICJpIiwgInJlc3VsdCIsICJDb25uZWN0RXJyb3IiLCAiQ29kZSIsICJkYXRhIiwgImVuY29kZUVudmVsb3BlIiwgImZsYWdzIiwgImRhdGEiLCAiYnl0ZXMiLCAidiIsICJfX2FzeW5jVmFsdWVzIiwgIm8iLCAibSIsICJpIiwgInZlcmIiLCAibiIsICJ2IiwgInJlc29sdmUiLCAicmVqZWN0IiwgInNldHRsZSIsICJkIiwgIl9fYXdhaXQiLCAiX19hc3luY0dlbmVyYXRvciIsICJ0aGlzQXJnIiwgIl9hcmd1bWVudHMiLCAiZ2VuZXJhdG9yIiwgImciLCAicSIsICJhd2FpdFJldHVybiIsICJmIiwgImEiLCAiYiIsICJyZXN1bWUiLCAic3RlcCIsICJlIiwgInIiLCAiZnVsZmlsbCIsICJ2YWx1ZSIsICJfX2FzeW5jRGVsZWdhdG9yIiwgInAiLCAiY3JlYXRlQXN5bmNJdGVyYWJsZSIsICJpdGVtcyIsICJfX2FzeW5jR2VuZXJhdG9yIiwgIl9fYXdhaXQiLCAiX19hc3luY0RlbGVnYXRvciIsICJfX2FzeW5jVmFsdWVzIiwgIl9fYXN5bmNWYWx1ZXMiLCAibyIsICJtIiwgImkiLCAidmVyYiIsICJuIiwgInYiLCAicmVzb2x2ZSIsICJyZWplY3QiLCAic2V0dGxlIiwgImQiLCAiX19hd2FpdCIsICJfX2FzeW5jRGVsZWdhdG9yIiwgInAiLCAiZSIsICJmIiwgIl9fYXN5bmNHZW5lcmF0b3IiLCAidGhpc0FyZyIsICJfYXJndW1lbnRzIiwgImdlbmVyYXRvciIsICJnIiwgInEiLCAiYXdhaXRSZXR1cm4iLCAiYSIsICJiIiwgInJlc3VtZSIsICJzdGVwIiwgInIiLCAiZnVsZmlsbCIsICJ2YWx1ZSIsICJjcmVhdGVQcm9taXNlQ2xpZW50IiwgInNlcnZpY2UiLCAidHJhbnNwb3J0IiwgIm1ha2VBbnlDbGllbnQiLCAibWV0aG9kIiwgIk1ldGhvZEtpbmQiLCAiY3JlYXRlVW5hcnlGbiIsICJjcmVhdGVTZXJ2ZXJTdHJlYW1pbmdGbiIsICJjcmVhdGVDbGllbnRTdHJlYW1pbmdGbiIsICJjcmVhdGVCaURpU3RyZWFtaW5nRm4iLCAiaW5wdXQiLCAib3B0aW9ucyIsICJfYSIsICJfYiIsICJyZXNwb25zZSIsICJoYW5kbGVTdHJlYW1SZXNwb25zZSIsICJjcmVhdGVBc3luY0l0ZXJhYmxlIiwgInJlcXVlc3QiLCAiZV8xIiwgIl9jIiwgIl9kIiwgIl9lIiwgInNpbmdsZU1lc3NhZ2UiLCAiX2YiLCAiX2ciLCAiX2giLCAiZV8xXzEiLCAiQ29ubmVjdEVycm9yIiwgIkNvZGUiLCAic3RyZWFtIiwgIml0IiwgImNyZWF0ZUxpbmtlZEFib3J0Q29udHJvbGxlciIsICJzaWduYWxzIiwgImNvbnRyb2xsZXIiLCAic2EiLCAicyIsICJzaWduYWwiLCAib25BYm9ydCIsICJnZXRBYm9ydFNpZ25hbFJlYXNvbiIsICJjcmVhdGVEZWFkbGluZVNpZ25hbCIsICJ0aW1lb3V0TXMiLCAibGlzdGVuZXIiLCAiQ29ubmVjdEVycm9yIiwgIkNvZGUiLCAidGltZW91dElkIiwgImUiLCAiY3JlYXRlQ29udGV4dFZhbHVlcyIsICJrZXkiLCAidmFsdWUiLCAiY3JlYXRlTWV0aG9kVXJsIiwgImJhc2VVcmwiLCAic2VydmljZSIsICJtZXRob2QiLCAicyIsICJtIiwgIm5vcm1hbGl6ZSIsICJ0eXBlIiwgIm1lc3NhZ2UiLCAibm9ybWFsaXplSXRlcmFibGUiLCAibWVzc2FnZVR5cGUiLCAiaW5wdXQiLCAidHJhbnNmb3JtIiwgInJlc3VsdCIsICJpdCIsICJyZXMiLCAiZSIsICJ2IiwgImdldEpzb25PcHRpb25zIiwgIm9wdGlvbnMiLCAiX2EiLCAibyIsICJjcmVhdGVDbGllbnRNZXRob2RTZXJpYWxpemVycyIsICJtZXRob2QiLCAidXNlQmluYXJ5Rm9ybWF0IiwgImpzb25PcHRpb25zIiwgImJpbmFyeU9wdGlvbnMiLCAiaW5wdXQiLCAiY3JlYXRlQmluYXJ5U2VyaWFsaXphdGlvbiIsICJjcmVhdGVKc29uU2VyaWFsaXphdGlvbiIsICJjcmVhdGVCaW5hcnlTZXJpYWxpemF0aW9uIiwgIm1lc3NhZ2VUeXBlIiwgIm9wdGlvbnMiLCAiZGF0YSIsICJlIiwgIm0iLCAiQ29ubmVjdEVycm9yIiwgIkNvZGUiLCAiY3JlYXRlSnNvblNlcmlhbGl6YXRpb24iLCAiX2EiLCAiX2IiLCAidGV4dEVuY29kZXIiLCAidGV4dERlY29kZXIiLCAibyIsICJnZXRKc29uT3B0aW9ucyIsICJqc29uIiwgImNvbnRlbnRUeXBlUmVnRXhwIiwgImNvbnRlbnRUeXBlVW5hcnlQcm90byIsICJjb250ZW50VHlwZVVuYXJ5SnNvbiIsICJjb250ZW50VHlwZVN0cmVhbVByb3RvIiwgImNvbnRlbnRUeXBlU3RyZWFtSnNvbiIsICJwYXJzZUNvbnRlbnRUeXBlIiwgImNvbnRlbnRUeXBlIiwgIm1hdGNoIiwgImNvbnRlbnRUeXBlUmVnRXhwIiwgInN0cmVhbSIsICJiaW5hcnkiLCAiZXJyb3JGcm9tSnNvbiIsICJqc29uVmFsdWUiLCAibWV0YWRhdGEiLCAiZmFsbGJhY2siLCAidmFsdWUiLCAia2V5IiwgImNvZGUiLCAiY29kZUZyb21TdHJpbmciLCAibWVzc2FnZSIsICJlcnJvciIsICJDb25uZWN0RXJyb3IiLCAiZGV0YWlsIiwgInByb3RvQmFzZTY0IiwgImVuZFN0cmVhbUZsYWciLCAiZW5kU3RyZWFtRnJvbUpzb24iLCAiZGF0YSIsICJwYXJzZUVyciIsICJDb25uZWN0RXJyb3IiLCAiQ29kZSIsICJqc29uVmFsdWUiLCAibWV0YWRhdGEiLCAia2V5IiwgInZhbHVlcyIsICJ2YWx1ZSIsICJlcnJvciIsICJlcnJvckZyb21Kc29uIiwgImhlYWRlckNvbnRlbnRUeXBlIiwgImhlYWRlclVuYXJ5Q29udGVudExlbmd0aCIsICJoZWFkZXJVbmFyeUVuY29kaW5nIiwgImhlYWRlclVuYXJ5QWNjZXB0RW5jb2RpbmciLCAiaGVhZGVyVGltZW91dCIsICJoZWFkZXJQcm90b2NvbFZlcnNpb24iLCAiaGVhZGVyVXNlckFnZW50IiwgImNvZGVGcm9tSHR0cFN0YXR1cyIsICJodHRwU3RhdHVzIiwgIkNvZGUiLCAidHJhaWxlckRlbXV4IiwgImhlYWRlciIsICJoIiwgInQiLCAidmFsdWUiLCAia2V5IiwgInByb3RvY29sVmVyc2lvbiIsICJyZXF1ZXN0SGVhZGVyIiwgIm1ldGhvZEtpbmQiLCAidXNlQmluYXJ5Rm9ybWF0IiwgInRpbWVvdXRNcyIsICJ1c2VyUHJvdmlkZWRIZWFkZXJzIiwgInNldFVzZXJBZ2VudCIsICJyZXN1bHQiLCAiaGVhZGVyVGltZW91dCIsICJoZWFkZXJDb250ZW50VHlwZSIsICJNZXRob2RLaW5kIiwgImNvbnRlbnRUeXBlVW5hcnlQcm90byIsICJjb250ZW50VHlwZVVuYXJ5SnNvbiIsICJjb250ZW50VHlwZVN0cmVhbVByb3RvIiwgImNvbnRlbnRUeXBlU3RyZWFtSnNvbiIsICJoZWFkZXJQcm90b2NvbFZlcnNpb24iLCAicHJvdG9jb2xWZXJzaW9uIiwgImhlYWRlclVzZXJBZ2VudCIsICJ2YWxpZGF0ZVJlc3BvbnNlIiwgIm1ldGhvZEtpbmQiLCAic3RhdHVzIiwgImhlYWRlcnMiLCAibWltZVR5cGUiLCAicGFyc2VkVHlwZSIsICJwYXJzZUNvbnRlbnRUeXBlIiwgImVycm9yRnJvbVN0YXR1cyIsICJDb25uZWN0RXJyb3IiLCAiY29kZUZyb21IdHRwU3RhdHVzIiwgIk1ldGhvZEtpbmQiLCAiY29udGVudFR5cGVQcmVmaXgiLCAiZW5jb2RlTWVzc2FnZUZvclVybCIsICJtZXNzYWdlIiwgInVzZUJhc2U2NCIsICJwcm90b0Jhc2U2NCIsICJ0cmFuc2Zvcm1Db25uZWN0UG9zdFRvR2V0UmVxdWVzdCIsICJyZXF1ZXN0IiwgInF1ZXJ5IiwgInByb3RvY29sVmVyc2lvbiIsICJjb250ZW50VHlwZSIsICJoZWFkZXJDb250ZW50VHlwZSIsICJjb21wcmVzc2lvbiIsICJoZWFkZXJVbmFyeUVuY29kaW5nIiwgInVybCIsICJoZWFkZXIiLCAiaGVhZGVyUHJvdG9jb2xWZXJzaW9uIiwgImhlYWRlclVuYXJ5Q29udGVudExlbmd0aCIsICJoZWFkZXJVbmFyeUFjY2VwdEVuY29kaW5nIiwgImgiLCAicnVuVW5hcnlDYWxsIiwgIm9wdCIsICJuZXh0IiwgImFwcGx5SW50ZXJjZXB0b3JzIiwgInNpZ25hbCIsICJhYm9ydCIsICJkb25lIiwgInNldHVwU2lnbmFsIiwgInJlcSIsICJub3JtYWxpemUiLCAicmVzIiwgInJ1blN0cmVhbWluZ0NhbGwiLCAibm9ybWFsaXplSXRlcmFibGUiLCAiZG9uZUNhbGxlZCIsICJfYSIsICJfYiIsICJpdCIsICJyIiwgImNsZWFudXAiLCAiY3JlYXRlRGVhZGxpbmVTaWduYWwiLCAiY29udHJvbGxlciIsICJjcmVhdGVMaW5rZWRBYm9ydENvbnRyb2xsZXIiLCAicmVhc29uIiwgImUiLCAiQ29ubmVjdEVycm9yIiwgImdldEFib3J0U2lnbmFsUmVhc29uIiwgImludGVyY2VwdG9ycyIsICJuIiwgImkiLCAiYXNzZXJ0RmV0Y2hBcGkiLCAiX19hd2FpdCIsICJ2IiwgIl9fYXN5bmNHZW5lcmF0b3IiLCAidGhpc0FyZyIsICJfYXJndW1lbnRzIiwgImdlbmVyYXRvciIsICJnIiwgImkiLCAicSIsICJ2ZXJiIiwgImF3YWl0UmV0dXJuIiwgImYiLCAicmVqZWN0IiwgIm4iLCAiYSIsICJiIiwgInJlc3VtZSIsICJzdGVwIiwgImUiLCAic2V0dGxlIiwgInIiLCAiZnVsZmlsbCIsICJ2YWx1ZSIsICJjcmVhdGVDb25uZWN0VHJhbnNwb3J0IiwgIm9wdGlvbnMiLCAiX2EiLCAiYXNzZXJ0RmV0Y2hBcGkiLCAidXNlQmluYXJ5Rm9ybWF0IiwgInNlcnZpY2UiLCAibWV0aG9kIiwgInNpZ25hbCIsICJ0aW1lb3V0TXMiLCAiaGVhZGVyIiwgIm1lc3NhZ2UiLCAiY29udGV4dFZhbHVlcyIsICJzZXJpYWxpemUiLCAicGFyc2UiLCAiY3JlYXRlQ2xpZW50TWV0aG9kU2VyaWFsaXplcnMiLCAicnVuVW5hcnlDYWxsIiwgImNyZWF0ZU1ldGhvZFVybCIsICJyZXF1ZXN0SGVhZGVyIiwgImNyZWF0ZUNvbnRleHRWYWx1ZXMiLCAicmVxIiwgInVzZUdldCIsICJNZXRob2RJZGVtcG90ZW5jeSIsICJib2R5IiwgInRyYW5zZm9ybUNvbm5lY3RQb3N0VG9HZXRSZXF1ZXN0IiwgInJlc3BvbnNlIiwgImlzVW5hcnlFcnJvciIsICJ1bmFyeUVycm9yIiwgInZhbGlkYXRlUmVzcG9uc2UiLCAiZXJyb3JGcm9tSnNvbiIsICJhcHBlbmRIZWFkZXJzIiwgInRyYWlsZXJEZW11eCIsICJkZW11eGVkSGVhZGVyIiwgImRlbXV4ZWRUcmFpbGVyIiwgImdldEpzb25PcHRpb25zIiwgImlucHV0IiwgInBhcnNlUmVzcG9uc2VCb2R5IiwgInRyYWlsZXJUYXJnZXQiLCAicmVhZGVyIiwgImNyZWF0ZUVudmVsb3BlUmVhZGFibGVTdHJlYW0iLCAiZW5kU3RyZWFtUmVjZWl2ZWQiLCAicmVzdWx0IiwgImZsYWdzIiwgImRhdGEiLCAiZW5kU3RyZWFtRmxhZyIsICJlbmRTdHJlYW0iLCAiZW5kU3RyZWFtRnJvbUpzb24iLCAiZXJyb3IiLCAia2V5IiwgImNyZWF0ZVJlcXVlc3RCb2R5IiwgIk1ldGhvZEtpbmQiLCAiZW5jb2RlRW52ZWxvcGUiLCAicnVuU3RyZWFtaW5nQ2FsbCIsICJmUmVzIiwgInRyYWlsZXIiLCAiYmFzZVVSTCIsICJ0cmFuc3BvcnQiLCAiY3JlYXRlQ29ubmVjdFRyYW5zcG9ydCIsICJwcm9qZWN0U2VydmljZSIsICJjcmVhdGVQcm9taXNlQ2xpZW50IiwgIlByb3RvZmxvd1NlcnZpY2UiLCAiY29udGVudFNlcnZpY2UiLCAiQ29udGVudFNlcnZpY2UiLCAidXNlclNlcnZpY2UiLCAiVXNlclNlcnZpY2UiLCAiY2hhdFNlcnZpY2UiLCAiQ2hhdFNlcnZpY2UiLCAiZXZlbnRTZXJ2aWNlIiwgIkV2ZW50U2VydmljZSIsICJpbXBvcnRfcmVhY3QiLCAibCIsICJlIiwgInQiLCAibCIsICJhIiwgIm4iLCAibyIsICJyIiwgImMiLCAiZSIsICJ0IiwgInMiLCAiaSIsICJwIiwgInUiLCAiZCIsICJmIiwgImciLCAiYiIsICJoIiwgIm0iLCAiaiIsICJ5IiwgImYiLCAiaXNGdW5jdGlvbiIsICJ2YWxPckZ1bmN0aW9uIiwgInJlc29sdmVWYWx1ZSIsICJhcmciLCAiZ2VuSWQiLCAiY291bnQiLCAicHJlZmVyc1JlZHVjZWRNb3Rpb24iLCAic2hvdWxkUmVkdWNlTW90aW9uIiwgIm1lZGlhUXVlcnkiLCAiVE9BU1RfTElNSVQiLCAidG9hc3RUaW1lb3V0cyIsICJUT0FTVF9FWFBJUkVfRElTTUlTU19ERUxBWSIsICJhZGRUb1JlbW92ZVF1ZXVlIiwgInRvYXN0SWQiLCAidGltZW91dCIsICJkaXNwYXRjaCIsICJjbGVhckZyb21SZW1vdmVRdWV1ZSIsICJyZWR1Y2VyIiwgInN0YXRlIiwgImFjdGlvbiIsICJ0IiwgInRvYXN0IiwgImRpZmYiLCAibGlzdGVuZXJzIiwgIm1lbW9yeVN0YXRlIiwgImxpc3RlbmVyIiwgImRlZmF1bHRUaW1lb3V0cyIsICJ1c2VTdG9yZSIsICJ0b2FzdE9wdGlvbnMiLCAic2V0U3RhdGUiLCAidXNlU3RhdGUiLCAidXNlRWZmZWN0IiwgImluZGV4IiwgIm1lcmdlZFRvYXN0cyIsICJfYSIsICJfYiIsICJjcmVhdGVUb2FzdCIsICJtZXNzYWdlIiwgInR5cGUiLCAib3B0cyIsICJjcmVhdGVIYW5kbGVyIiwgIm9wdGlvbnMiLCAicHJvbWlzZSIsICJtc2dzIiwgImlkIiwgInAiLCAiZSIsICJ1cGRhdGVIZWlnaHQiLCAiaGVpZ2h0IiwgInN0YXJ0UGF1c2UiLCAidXNlVG9hc3RlciIsICJ0b2FzdHMiLCAicGF1c2VkQXQiLCAibm93IiwgInRpbWVvdXRzIiwgImR1cmF0aW9uTGVmdCIsICJlbmRQYXVzZSIsICJ1c2VDYWxsYmFjayIsICJjYWxjdWxhdGVPZmZzZXQiLCAicmV2ZXJzZU9yZGVyIiwgImd1dHRlciIsICJkZWZhdWx0UG9zaXRpb24iLCAicmVsZXZhbnRUb2FzdHMiLCAidG9hc3RJbmRleCIsICJ0b2FzdHNCZWZvcmUiLCAiaSIsICJhY2MiLCAiY2lyY2xlQW5pbWF0aW9uIiwgImtleWZyYW1lcyIsICJmaXJzdExpbmVBbmltYXRpb24iLCAic2Vjb25kTGluZUFuaW1hdGlvbiIsICJFcnJvckljb24iLCAic3R5bGVkIiwgInJvdGF0ZSIsICJMb2FkZXJJY29uIiwgImNoZWNrbWFya0FuaW1hdGlvbiIsICJDaGVja21hcmtJY29uIiwgIlN0YXR1c1dyYXBwZXIiLCAiSW5kaWNhdG9yV3JhcHBlciIsICJlbnRlciIsICJBbmltYXRlZEljb25XcmFwcGVyIiwgIlRvYXN0SWNvbiIsICJpY29uIiwgImljb25UaGVtZSIsICJlbnRlckFuaW1hdGlvbiIsICJmYWN0b3IiLCAiZXhpdEFuaW1hdGlvbiIsICJmYWRlSW5BbmltYXRpb24iLCAiZmFkZU91dEFuaW1hdGlvbiIsICJUb2FzdEJhckJhc2UiLCAiTWVzc2FnZSIsICJnZXRBbmltYXRpb25TdHlsZSIsICJwb3NpdGlvbiIsICJ2aXNpYmxlIiwgImV4aXQiLCAiVG9hc3RCYXIiLCAic3R5bGUiLCAiY2hpbGRyZW4iLCAiYW5pbWF0aW9uU3R5bGUiLCAic2V0dXAiLCAiVG9hc3RXcmFwcGVyIiwgImNsYXNzTmFtZSIsICJvbkhlaWdodFVwZGF0ZSIsICJyZWYiLCAiZWwiLCAiZ2V0UG9zaXRpb25TdHlsZSIsICJvZmZzZXQiLCAidG9wIiwgInZlcnRpY2FsU3R5bGUiLCAiaG9yaXpvbnRhbFN0eWxlIiwgImFjdGl2ZUNsYXNzIiwgImNzcyIsICJERUZBVUxUX09GRlNFVCIsICJUb2FzdGVyIiwgImNvbnRhaW5lclN0eWxlIiwgImNvbnRhaW5lckNsYXNzTmFtZSIsICJoYW5kbGVycyIsICJ0b2FzdFBvc2l0aW9uIiwgInBvc2l0aW9uU3R5bGUiLCAic3JjX2RlZmF1bHQiLCAiaW1wb3J0X2pzeF9ydW50aW1lIiwgIk9wdGlvbnMiLCAid2hpdGVsaXN0IiwgInNldFdoaXRlbGlzdCIsICJjdXJyZW50RG9tYWluIiwgInNldEN1cnJlbnREb21haW4iLCAiYXZhaWxhYmxlRG9tYWlucyIsICJzZXRBdmFpbGFibGVEb21haW5zIiwgInJlcyIsICJ1c2VyU2VydmljZSIsICJ0YWJzIiwgImRvbWFpblNldCIsICJ0YWIiLCAidXJsIiwgImFkZERvbWFpbiIsICJyZW1vdmVEb21haW4iLCAiZG9tYWluIiwgInByZXZXaGl0ZWxpc3QiLCAiZCIsICJzYXZlV2hpdGVsaXN0IiwgIl90IiwgImUiLCAicm9vdEVsZW0iLCAicm9vdCIsICJSZWFjdERPTSIsICJSZWFjdCIsICJJZSJdCn0K

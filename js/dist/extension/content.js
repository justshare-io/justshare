"use strict";(()=>{var kv=Object.create;var yi=Object.defineProperty;var Rv=Object.getOwnPropertyDescriptor;var Ev=Object.getOwnPropertyNames;var xv=Object.getPrototypeOf,Cv=Object.prototype.hasOwnProperty;var Nd=(t,e)=>()=>(t&&(e=t(t=0)),e);var H=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),Jd=(t,e)=>{for(var n in e)yi(t,n,{get:e[n],enumerable:!0})},Od=(t,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of Ev(e))!Cv.call(t,o)&&o!==n&&yi(t,o,{get:()=>e[o],enumerable:!(r=Rv(e,o))||r.enumerable});return t};var it=(t,e,n)=>(n=t!=null?kv(xv(t)):{},Od(e||!t||!t.__esModule?yi(n,"default",{value:t,enumerable:!0}):n,t)),Id=t=>Od(yi({},"__esModule",{value:!0}),t);var Vd=H(A=>{"use strict";var jr=Symbol.for("react.element"),Nv=Symbol.for("react.portal"),Jv=Symbol.for("react.fragment"),Ov=Symbol.for("react.strict_mode"),Iv=Symbol.for("react.profiler"),Mv=Symbol.for("react.provider"),Lv=Symbol.for("react.context"),Bv=Symbol.for("react.forward_ref"),Fv=Symbol.for("react.suspense"),Av=Symbol.for("react.memo"),Uv=Symbol.for("react.lazy"),Md=Symbol.iterator;function qv(t){return t===null||typeof t!="object"?null:(t=Md&&t[Md]||t["@@iterator"],typeof t=="function"?t:null)}var Fd={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Ad=Object.assign,Ud={};function On(t,e,n){this.props=t,this.context=e,this.refs=Ud,this.updater=n||Fd}On.prototype.isReactComponent={};On.prototype.setState=function(t,e){if(typeof t!="object"&&typeof t!="function"&&t!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,t,e,"setState")};On.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")};function qd(){}qd.prototype=On.prototype;function Il(t,e,n){this.props=t,this.context=e,this.refs=Ud,this.updater=n||Fd}var Ml=Il.prototype=new qd;Ml.constructor=Il;Ad(Ml,On.prototype);Ml.isPureReactComponent=!0;var Ld=Array.isArray,_d=Object.prototype.hasOwnProperty,Ll={current:null},Dd={key:!0,ref:!0,__self:!0,__source:!0};function bd(t,e,n){var r,o={},i=null,s=null;if(e!=null)for(r in e.ref!==void 0&&(s=e.ref),e.key!==void 0&&(i=""+e.key),e)_d.call(e,r)&&!Dd.hasOwnProperty(r)&&(o[r]=e[r]);var a=arguments.length-2;if(a===1)o.children=n;else if(1<a){for(var l=Array(a),c=0;c<a;c++)l[c]=arguments[c+2];o.children=l}if(t&&t.defaultProps)for(r in a=t.defaultProps,a)o[r]===void 0&&(o[r]=a[r]);return{$$typeof:jr,type:t,key:i,ref:s,props:o,_owner:Ll.current}}function _v(t,e){return{$$typeof:jr,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}function Bl(t){return typeof t=="object"&&t!==null&&t.$$typeof===jr}function Dv(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,function(n){return e[n]})}var Bd=/\/+/g;function Ol(t,e){return typeof t=="object"&&t!==null&&t.key!=null?Dv(""+t.key):e.toString(36)}function vi(t,e,n,r,o){var i=typeof t;(i==="undefined"||i==="boolean")&&(t=null);var s=!1;if(t===null)s=!0;else switch(i){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case jr:case Nv:s=!0}}if(s)return s=t,o=o(s),t=r===""?"."+Ol(s,0):r,Ld(o)?(n="",t!=null&&(n=t.replace(Bd,"$&/")+"/"),vi(o,e,n,"",function(c){return c})):o!=null&&(Bl(o)&&(o=_v(o,n+(!o.key||s&&s.key===o.key?"":(""+o.key).replace(Bd,"$&/")+"/")+t)),e.push(o)),1;if(s=0,r=r===""?".":r+":",Ld(t))for(var a=0;a<t.length;a++){i=t[a];var l=r+Ol(i,a);s+=vi(i,e,n,l,o)}else if(l=qv(t),typeof l=="function")for(t=l.call(t),a=0;!(i=t.next()).done;)i=i.value,l=r+Ol(i,a++),s+=vi(i,e,n,l,o);else if(i==="object")throw e=String(t),Error("Objects are not valid as a React child (found: "+(e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e)+"). If you meant to render a collection of children, use an array instead.");return s}function hi(t,e,n){if(t==null)return t;var r=[],o=0;return vi(t,r,"","",function(i){return e.call(n,i,o++)}),r}function bv(t){if(t._status===-1){var e=t._result;e=e(),e.then(function(n){(t._status===0||t._status===-1)&&(t._status=1,t._result=n)},function(n){(t._status===0||t._status===-1)&&(t._status=2,t._result=n)}),t._status===-1&&(t._status=0,t._result=e)}if(t._status===1)return t._result.default;throw t._result}var Se={current:null},wi={transition:null},Vv={ReactCurrentDispatcher:Se,ReactCurrentBatchConfig:wi,ReactCurrentOwner:Ll};A.Children={map:hi,forEach:function(t,e,n){hi(t,function(){e.apply(this,arguments)},n)},count:function(t){var e=0;return hi(t,function(){e++}),e},toArray:function(t){return hi(t,function(e){return e})||[]},only:function(t){if(!Bl(t))throw Error("React.Children.only expected to receive a single React element child.");return t}};A.Component=On;A.Fragment=Jv;A.Profiler=Iv;A.PureComponent=Il;A.StrictMode=Ov;A.Suspense=Fv;A.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Vv;A.cloneElement=function(t,e,n){if(t==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+t+".");var r=Ad({},t.props),o=t.key,i=t.ref,s=t._owner;if(e!=null){if(e.ref!==void 0&&(i=e.ref,s=Ll.current),e.key!==void 0&&(o=""+e.key),t.type&&t.type.defaultProps)var a=t.type.defaultProps;for(l in e)_d.call(e,l)&&!Dd.hasOwnProperty(l)&&(r[l]=e[l]===void 0&&a!==void 0?a[l]:e[l])}var l=arguments.length-2;if(l===1)r.children=n;else if(1<l){a=Array(l);for(var c=0;c<l;c++)a[c]=arguments[c+2];r.children=a}return{$$typeof:jr,type:t.type,key:o,ref:i,props:r,_owner:s}};A.createContext=function(t){return t={$$typeof:Lv,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},t.Provider={$$typeof:Mv,_context:t},t.Consumer=t};A.createElement=bd;A.createFactory=function(t){var e=bd.bind(null,t);return e.type=t,e};A.createRef=function(){return{current:null}};A.forwardRef=function(t){return{$$typeof:Bv,render:t}};A.isValidElement=Bl;A.lazy=function(t){return{$$typeof:Uv,_payload:{_status:-1,_result:t},_init:bv}};A.memo=function(t,e){return{$$typeof:Av,type:t,compare:e===void 0?null:e}};A.startTransition=function(t){var e=wi.transition;wi.transition={};try{t()}finally{wi.transition=e}};A.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")};A.useCallback=function(t,e){return Se.current.useCallback(t,e)};A.useContext=function(t){return Se.current.useContext(t)};A.useDebugValue=function(){};A.useDeferredValue=function(t){return Se.current.useDeferredValue(t)};A.useEffect=function(t,e){return Se.current.useEffect(t,e)};A.useId=function(){return Se.current.useId()};A.useImperativeHandle=function(t,e,n){return Se.current.useImperativeHandle(t,e,n)};A.useInsertionEffect=function(t,e){return Se.current.useInsertionEffect(t,e)};A.useLayoutEffect=function(t,e){return Se.current.useLayoutEffect(t,e)};A.useMemo=function(t,e){return Se.current.useMemo(t,e)};A.useReducer=function(t,e,n){return Se.current.useReducer(t,e,n)};A.useRef=function(t){return Se.current.useRef(t)};A.useState=function(t){return Se.current.useState(t)};A.useSyncExternalStore=function(t,e,n){return Se.current.useSyncExternalStore(t,e,n)};A.useTransition=function(){return Se.current.useTransition()};A.version="18.2.0"});var In=H((kT,Gd)=>{"use strict";Gd.exports=Vd()});var Zd=H(V=>{"use strict";function ql(t,e){var n=t.length;t.push(e);e:for(;0<n;){var r=n-1>>>1,o=t[r];if(0<Si(o,e))t[r]=e,t[n]=o,n=r;else break e}}function Ye(t){return t.length===0?null:t[0]}function Pi(t){if(t.length===0)return null;var e=t[0],n=t.pop();if(n!==e){t[0]=n;e:for(var r=0,o=t.length,i=o>>>1;r<i;){var s=2*(r+1)-1,a=t[s],l=s+1,c=t[l];if(0>Si(a,n))l<o&&0>Si(c,a)?(t[r]=c,t[l]=n,r=l):(t[r]=a,t[s]=n,r=s);else if(l<o&&0>Si(c,n))t[r]=c,t[l]=n,r=l;else break e}}return e}function Si(t,e){var n=t.sortIndex-e.sortIndex;return n!==0?n:t.id-e.id}typeof performance=="object"&&typeof performance.now=="function"?(zd=performance,V.unstable_now=function(){return zd.now()}):(Fl=Date,jd=Fl.now(),V.unstable_now=function(){return Fl.now()-jd});var zd,Fl,jd,st=[],It=[],Gv=1,_e=null,pe=3,ki=!1,on=!1,Hr=!1,Wd=typeof setTimeout=="function"?setTimeout:null,Yd=typeof clearTimeout=="function"?clearTimeout:null,$d=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function _l(t){for(var e=Ye(It);e!==null;){if(e.callback===null)Pi(It);else if(e.startTime<=t)Pi(It),e.sortIndex=e.expirationTime,ql(st,e);else break;e=Ye(It)}}function Dl(t){if(Hr=!1,_l(t),!on)if(Ye(st)!==null)on=!0,Vl(bl);else{var e=Ye(It);e!==null&&Gl(Dl,e.startTime-t)}}function bl(t,e){on=!1,Hr&&(Hr=!1,Yd(Wr),Wr=-1),ki=!0;var n=pe;try{for(_l(e),_e=Ye(st);_e!==null&&(!(_e.expirationTime>e)||t&&!Xd());){var r=_e.callback;if(typeof r=="function"){_e.callback=null,pe=_e.priorityLevel;var o=r(_e.expirationTime<=e);e=V.unstable_now(),typeof o=="function"?_e.callback=o:_e===Ye(st)&&Pi(st),_l(e)}else Pi(st);_e=Ye(st)}if(_e!==null)var i=!0;else{var s=Ye(It);s!==null&&Gl(Dl,s.startTime-e),i=!1}return i}finally{_e=null,pe=n,ki=!1}}var Ri=!1,Ti=null,Wr=-1,Kd=5,Qd=-1;function Xd(){return!(V.unstable_now()-Qd<Kd)}function Al(){if(Ti!==null){var t=V.unstable_now();Qd=t;var e=!0;try{e=Ti(!0,t)}finally{e?$r():(Ri=!1,Ti=null)}}else Ri=!1}var $r;typeof $d=="function"?$r=function(){$d(Al)}:typeof MessageChannel<"u"?(Ul=new MessageChannel,Hd=Ul.port2,Ul.port1.onmessage=Al,$r=function(){Hd.postMessage(null)}):$r=function(){Wd(Al,0)};var Ul,Hd;function Vl(t){Ti=t,Ri||(Ri=!0,$r())}function Gl(t,e){Wr=Wd(function(){t(V.unstable_now())},e)}V.unstable_IdlePriority=5;V.unstable_ImmediatePriority=1;V.unstable_LowPriority=4;V.unstable_NormalPriority=3;V.unstable_Profiling=null;V.unstable_UserBlockingPriority=2;V.unstable_cancelCallback=function(t){t.callback=null};V.unstable_continueExecution=function(){on||ki||(on=!0,Vl(bl))};V.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):Kd=0<t?Math.floor(1e3/t):5};V.unstable_getCurrentPriorityLevel=function(){return pe};V.unstable_getFirstCallbackNode=function(){return Ye(st)};V.unstable_next=function(t){switch(pe){case 1:case 2:case 3:var e=3;break;default:e=pe}var n=pe;pe=e;try{return t()}finally{pe=n}};V.unstable_pauseExecution=function(){};V.unstable_requestPaint=function(){};V.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var n=pe;pe=t;try{return e()}finally{pe=n}};V.unstable_scheduleCallback=function(t,e,n){var r=V.unstable_now();switch(typeof n=="object"&&n!==null?(n=n.delay,n=typeof n=="number"&&0<n?r+n:r):n=r,t){case 1:var o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;default:o=5e3}return o=n+o,t={id:Gv++,callback:e,priorityLevel:t,startTime:n,expirationTime:o,sortIndex:-1},n>r?(t.sortIndex=n,ql(It,t),Ye(st)===null&&t===Ye(It)&&(Hr?(Yd(Wr),Wr=-1):Hr=!0,Gl(Dl,n-r))):(t.sortIndex=o,ql(st,t),on||ki||(on=!0,Vl(bl))),t};V.unstable_shouldYield=Xd;V.unstable_wrapCallback=function(t){var e=pe;return function(){var n=pe;pe=e;try{return t.apply(this,arguments)}finally{pe=n}}}});var tm=H((ET,em)=>{"use strict";em.exports=Zd()});var ay=H(Ae=>{"use strict";var lp=In(),Be=tm();function R(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var up=new Set,ho={};function vn(t,e){Xn(t,e),Xn(t+"Capture",e)}function Xn(t,e){for(ho[t]=e,t=0;t<e.length;t++)up.add(e[t])}var St=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),du=Object.prototype.hasOwnProperty,zv=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,nm={},rm={};function jv(t){return du.call(rm,t)?!0:du.call(nm,t)?!1:zv.test(t)?rm[t]=!0:(nm[t]=!0,!1)}function $v(t,e,n,r){if(n!==null&&n.type===0)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(t=t.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-");default:return!1}}function Hv(t,e,n,r){if(e===null||typeof e>"u"||$v(t,e,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!e;case 4:return e===!1;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}function ke(t,e,n,r,o,i,s){this.acceptsBooleans=e===2||e===3||e===4,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=i,this.removeEmptyString=s}var de={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(t){de[t]=new ke(t,0,!1,t,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(t){var e=t[0];de[e]=new ke(e,1,!1,t[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(t){de[t]=new ke(t,2,!1,t.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(t){de[t]=new ke(t,2,!1,t,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(t){de[t]=new ke(t,3,!1,t.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(t){de[t]=new ke(t,3,!0,t,null,!1,!1)});["capture","download"].forEach(function(t){de[t]=new ke(t,4,!1,t,null,!1,!1)});["cols","rows","size","span"].forEach(function(t){de[t]=new ke(t,6,!1,t,null,!1,!1)});["rowSpan","start"].forEach(function(t){de[t]=new ke(t,5,!1,t.toLowerCase(),null,!1,!1)});var oc=/[\-:]([a-z])/g;function ic(t){return t[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(t){var e=t.replace(oc,ic);de[e]=new ke(e,1,!1,t,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(t){var e=t.replace(oc,ic);de[e]=new ke(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(t){var e=t.replace(oc,ic);de[e]=new ke(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(t){de[t]=new ke(t,1,!1,t.toLowerCase(),null,!1,!1)});de.xlinkHref=new ke("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(t){de[t]=new ke(t,1,!1,t.toLowerCase(),null,!0,!0)});function sc(t,e,n,r){var o=de.hasOwnProperty(e)?de[e]:null;(o!==null?o.type!==0:r||!(2<e.length)||e[0]!=="o"&&e[0]!=="O"||e[1]!=="n"&&e[1]!=="N")&&(Hv(e,n,o,r)&&(n=null),r||o===null?jv(e)&&(n===null?t.removeAttribute(e):t.setAttribute(e,""+n)):o.mustUseProperty?t[o.propertyName]=n===null?o.type===3?!1:"":n:(e=o.attributeName,r=o.attributeNamespace,n===null?t.removeAttribute(e):(o=o.type,n=o===3||o===4&&n===!0?"":""+n,r?t.setAttributeNS(r,e,n):t.setAttribute(e,n))))}var Rt=lp.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ei=Symbol.for("react.element"),Bn=Symbol.for("react.portal"),Fn=Symbol.for("react.fragment"),ac=Symbol.for("react.strict_mode"),mu=Symbol.for("react.profiler"),cp=Symbol.for("react.provider"),fp=Symbol.for("react.context"),lc=Symbol.for("react.forward_ref"),pu=Symbol.for("react.suspense"),gu=Symbol.for("react.suspense_list"),uc=Symbol.for("react.memo"),Lt=Symbol.for("react.lazy");Symbol.for("react.scope");Symbol.for("react.debug_trace_mode");var dp=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden");Symbol.for("react.cache");Symbol.for("react.tracing_marker");var om=Symbol.iterator;function Yr(t){return t===null||typeof t!="object"?null:(t=om&&t[om]||t["@@iterator"],typeof t=="function"?t:null)}var X=Object.assign,zl;function ro(t){if(zl===void 0)try{throw Error()}catch(n){var e=n.stack.trim().match(/\n( *(at )?)/);zl=e&&e[1]||""}return`
`+zl+t}var jl=!1;function $l(t,e){if(!t||jl)return"";jl=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(e,[])}catch(c){var r=c}Reflect.construct(t,[],e)}else{try{e.call()}catch(c){r=c}t.call(e.prototype)}else{try{throw Error()}catch(c){r=c}t()}}catch(c){if(c&&r&&typeof c.stack=="string"){for(var o=c.stack.split(`
`),i=r.stack.split(`
`),s=o.length-1,a=i.length-1;1<=s&&0<=a&&o[s]!==i[a];)a--;for(;1<=s&&0<=a;s--,a--)if(o[s]!==i[a]){if(s!==1||a!==1)do if(s--,a--,0>a||o[s]!==i[a]){var l=`
`+o[s].replace(" at new "," at ");return t.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",t.displayName)),l}while(1<=s&&0<=a);break}}}finally{jl=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?ro(t):""}function Wv(t){switch(t.tag){case 5:return ro(t.type);case 16:return ro("Lazy");case 13:return ro("Suspense");case 19:return ro("SuspenseList");case 0:case 2:case 15:return t=$l(t.type,!1),t;case 11:return t=$l(t.type.render,!1),t;case 1:return t=$l(t.type,!0),t;default:return""}}function yu(t){if(t==null)return null;if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t;switch(t){case Fn:return"Fragment";case Bn:return"Portal";case mu:return"Profiler";case ac:return"StrictMode";case pu:return"Suspense";case gu:return"SuspenseList"}if(typeof t=="object")switch(t.$$typeof){case fp:return(t.displayName||"Context")+".Consumer";case cp:return(t._context.displayName||"Context")+".Provider";case lc:var e=t.render;return t=t.displayName,t||(t=e.displayName||e.name||"",t=t!==""?"ForwardRef("+t+")":"ForwardRef"),t;case uc:return e=t.displayName||null,e!==null?e:yu(t.type)||"Memo";case Lt:e=t._payload,t=t._init;try{return yu(t(e))}catch{}}return null}function Yv(t){var e=t.type;switch(t.tag){case 24:return"Cache";case 9:return(e.displayName||"Context")+".Consumer";case 10:return(e._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return t=e.render,t=t.displayName||t.name||"",e.displayName||(t!==""?"ForwardRef("+t+")":"ForwardRef");case 7:return"Fragment";case 5:return e;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return yu(e);case 8:return e===ac?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e}return null}function Ht(t){switch(typeof t){case"boolean":case"number":case"string":case"undefined":return t;case"object":return t;default:return""}}function mp(t){var e=t.type;return(t=t.nodeName)&&t.toLowerCase()==="input"&&(e==="checkbox"||e==="radio")}function Kv(t){var e=mp(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),r=""+t[e];if(!t.hasOwnProperty(e)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var o=n.get,i=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return o.call(this)},set:function(s){r=""+s,i.call(this,s)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(s){r=""+s},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}function xi(t){t._valueTracker||(t._valueTracker=Kv(t))}function pp(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),r="";return t&&(r=mp(t)?t.checked?"true":"false":t.value),t=r,t!==n?(e.setValue(t),!0):!1}function es(t){if(t=t||(typeof document<"u"?document:void 0),typeof t>"u")return null;try{return t.activeElement||t.body}catch{return t.body}}function hu(t,e){var n=e.checked;return X({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??t._wrapperState.initialChecked})}function im(t,e){var n=e.defaultValue==null?"":e.defaultValue,r=e.checked!=null?e.checked:e.defaultChecked;n=Ht(e.value!=null?e.value:n),t._wrapperState={initialChecked:r,initialValue:n,controlled:e.type==="checkbox"||e.type==="radio"?e.checked!=null:e.value!=null}}function gp(t,e){e=e.checked,e!=null&&sc(t,"checked",e,!1)}function vu(t,e){gp(t,e);var n=Ht(e.value),r=e.type;if(n!=null)r==="number"?(n===0&&t.value===""||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if(r==="submit"||r==="reset"){t.removeAttribute("value");return}e.hasOwnProperty("value")?wu(t,e.type,n):e.hasOwnProperty("defaultValue")&&wu(t,e.type,Ht(e.defaultValue)),e.checked==null&&e.defaultChecked!=null&&(t.defaultChecked=!!e.defaultChecked)}function sm(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var r=e.type;if(!(r!=="submit"&&r!=="reset"||e.value!==void 0&&e.value!==null))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}n=t.name,n!==""&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,n!==""&&(t.name=n)}function wu(t,e,n){(e!=="number"||es(t.ownerDocument)!==t)&&(n==null?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}var oo=Array.isArray;function $n(t,e,n,r){if(t=t.options,e){e={};for(var o=0;o<n.length;o++)e["$"+n[o]]=!0;for(n=0;n<t.length;n++)o=e.hasOwnProperty("$"+t[n].value),t[n].selected!==o&&(t[n].selected=o),o&&r&&(t[n].defaultSelected=!0)}else{for(n=""+Ht(n),e=null,o=0;o<t.length;o++){if(t[o].value===n){t[o].selected=!0,r&&(t[o].defaultSelected=!0);return}e!==null||t[o].disabled||(e=t[o])}e!==null&&(e.selected=!0)}}function Su(t,e){if(e.dangerouslySetInnerHTML!=null)throw Error(R(91));return X({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function am(t,e){var n=e.value;if(n==null){if(n=e.children,e=e.defaultValue,n!=null){if(e!=null)throw Error(R(92));if(oo(n)){if(1<n.length)throw Error(R(93));n=n[0]}e=n}e==null&&(e=""),n=e}t._wrapperState={initialValue:Ht(n)}}function yp(t,e){var n=Ht(e.value),r=Ht(e.defaultValue);n!=null&&(n=""+n,n!==t.value&&(t.value=n),e.defaultValue==null&&t.defaultValue!==n&&(t.defaultValue=n)),r!=null&&(t.defaultValue=""+r)}function lm(t){var e=t.textContent;e===t._wrapperState.initialValue&&e!==""&&e!==null&&(t.value=e)}function hp(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Tu(t,e){return t==null||t==="http://www.w3.org/1999/xhtml"?hp(e):t==="http://www.w3.org/2000/svg"&&e==="foreignObject"?"http://www.w3.org/1999/xhtml":t}var Ci,vp=function(t){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(e,n,r,o){MSApp.execUnsafeLocalFunction(function(){return t(e,n,r,o)})}:t}(function(t,e){if(t.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in t)t.innerHTML=e;else{for(Ci=Ci||document.createElement("div"),Ci.innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=Ci.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}});function vo(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&n.nodeType===3){n.nodeValue=e;return}}t.textContent=e}var ao={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Qv=["Webkit","ms","Moz","O"];Object.keys(ao).forEach(function(t){Qv.forEach(function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),ao[e]=ao[t]})});function wp(t,e,n){return e==null||typeof e=="boolean"||e===""?"":n||typeof e!="number"||e===0||ao.hasOwnProperty(t)&&ao[t]?(""+e).trim():e+"px"}function Sp(t,e){t=t.style;for(var n in e)if(e.hasOwnProperty(n)){var r=n.indexOf("--")===0,o=wp(n,e[n],r);n==="float"&&(n="cssFloat"),r?t.setProperty(n,o):t[n]=o}}var Xv=X({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Pu(t,e){if(e){if(Xv[t]&&(e.children!=null||e.dangerouslySetInnerHTML!=null))throw Error(R(137,t));if(e.dangerouslySetInnerHTML!=null){if(e.children!=null)throw Error(R(60));if(typeof e.dangerouslySetInnerHTML!="object"||!("__html"in e.dangerouslySetInnerHTML))throw Error(R(61))}if(e.style!=null&&typeof e.style!="object")throw Error(R(62))}}function ku(t,e){if(t.indexOf("-")===-1)return typeof e.is=="string";switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ru=null;function cc(t){return t=t.target||t.srcElement||window,t.correspondingUseElement&&(t=t.correspondingUseElement),t.nodeType===3?t.parentNode:t}var Eu=null,Hn=null,Wn=null;function um(t){if(t=Ao(t)){if(typeof Eu!="function")throw Error(R(280));var e=t.stateNode;e&&(e=Ns(e),Eu(t.stateNode,t.type,e))}}function Tp(t){Hn?Wn?Wn.push(t):Wn=[t]:Hn=t}function Pp(){if(Hn){var t=Hn,e=Wn;if(Wn=Hn=null,um(t),e)for(t=0;t<e.length;t++)um(e[t])}}function kp(t,e){return t(e)}function Rp(){}var Hl=!1;function Ep(t,e,n){if(Hl)return t(e,n);Hl=!0;try{return kp(t,e,n)}finally{Hl=!1,(Hn!==null||Wn!==null)&&(Rp(),Pp())}}function wo(t,e){var n=t.stateNode;if(n===null)return null;var r=Ns(n);if(r===null)return null;n=r[e];e:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(t=t.type,r=!(t==="button"||t==="input"||t==="select"||t==="textarea")),t=!r;break e;default:t=!1}if(t)return null;if(n&&typeof n!="function")throw Error(R(231,e,typeof n));return n}var xu=!1;if(St)try{Mn={},Object.defineProperty(Mn,"passive",{get:function(){xu=!0}}),window.addEventListener("test",Mn,Mn),window.removeEventListener("test",Mn,Mn)}catch{xu=!1}var Mn;function Zv(t,e,n,r,o,i,s,a,l){var c=Array.prototype.slice.call(arguments,3);try{e.apply(n,c)}catch(f){this.onError(f)}}var lo=!1,ts=null,ns=!1,Cu=null,ew={onError:function(t){lo=!0,ts=t}};function tw(t,e,n,r,o,i,s,a,l){lo=!1,ts=null,Zv.apply(ew,arguments)}function nw(t,e,n,r,o,i,s,a,l){if(tw.apply(this,arguments),lo){if(lo){var c=ts;lo=!1,ts=null}else throw Error(R(198));ns||(ns=!0,Cu=c)}}function wn(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do e=t,e.flags&4098&&(n=e.return),t=e.return;while(t)}return e.tag===3?n:null}function xp(t){if(t.tag===13){var e=t.memoizedState;if(e===null&&(t=t.alternate,t!==null&&(e=t.memoizedState)),e!==null)return e.dehydrated}return null}function cm(t){if(wn(t)!==t)throw Error(R(188))}function rw(t){var e=t.alternate;if(!e){if(e=wn(t),e===null)throw Error(R(188));return e!==t?null:t}for(var n=t,r=e;;){var o=n.return;if(o===null)break;var i=o.alternate;if(i===null){if(r=o.return,r!==null){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return cm(o),t;if(i===r)return cm(o),e;i=i.sibling}throw Error(R(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,a=o.child;a;){if(a===n){s=!0,n=o,r=i;break}if(a===r){s=!0,r=o,n=i;break}a=a.sibling}if(!s){for(a=i.child;a;){if(a===n){s=!0,n=i,r=o;break}if(a===r){s=!0,r=i,n=o;break}a=a.sibling}if(!s)throw Error(R(189))}}if(n.alternate!==r)throw Error(R(190))}if(n.tag!==3)throw Error(R(188));return n.stateNode.current===n?t:e}function Cp(t){return t=rw(t),t!==null?Np(t):null}function Np(t){if(t.tag===5||t.tag===6)return t;for(t=t.child;t!==null;){var e=Np(t);if(e!==null)return e;t=t.sibling}return null}var Jp=Be.unstable_scheduleCallback,fm=Be.unstable_cancelCallback,ow=Be.unstable_shouldYield,iw=Be.unstable_requestPaint,ee=Be.unstable_now,sw=Be.unstable_getCurrentPriorityLevel,fc=Be.unstable_ImmediatePriority,Op=Be.unstable_UserBlockingPriority,rs=Be.unstable_NormalPriority,aw=Be.unstable_LowPriority,Ip=Be.unstable_IdlePriority,Rs=null,ct=null;function lw(t){if(ct&&typeof ct.onCommitFiberRoot=="function")try{ct.onCommitFiberRoot(Rs,t,void 0,(t.current.flags&128)===128)}catch{}}var et=Math.clz32?Math.clz32:fw,uw=Math.log,cw=Math.LN2;function fw(t){return t>>>=0,t===0?32:31-(uw(t)/cw|0)|0}var Ni=64,Ji=4194304;function io(t){switch(t&-t){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return t&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return t}}function os(t,e){var n=t.pendingLanes;if(n===0)return 0;var r=0,o=t.suspendedLanes,i=t.pingedLanes,s=n&268435455;if(s!==0){var a=s&~o;a!==0?r=io(a):(i&=s,i!==0&&(r=io(i)))}else s=n&~o,s!==0?r=io(s):i!==0&&(r=io(i));if(r===0)return 0;if(e!==0&&e!==r&&!(e&o)&&(o=r&-r,i=e&-e,o>=i||o===16&&(i&4194240)!==0))return e;if(r&4&&(r|=n&16),e=t.entangledLanes,e!==0)for(t=t.entanglements,e&=r;0<e;)n=31-et(e),o=1<<n,r|=t[n],e&=~o;return r}function dw(t,e){switch(t){case 1:case 2:case 4:return e+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function mw(t,e){for(var n=t.suspendedLanes,r=t.pingedLanes,o=t.expirationTimes,i=t.pendingLanes;0<i;){var s=31-et(i),a=1<<s,l=o[s];l===-1?(!(a&n)||a&r)&&(o[s]=dw(a,e)):l<=e&&(t.expiredLanes|=a),i&=~a}}function Nu(t){return t=t.pendingLanes&-1073741825,t!==0?t:t&1073741824?1073741824:0}function Mp(){var t=Ni;return Ni<<=1,!(Ni&4194240)&&(Ni=64),t}function Wl(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function Bo(t,e,n){t.pendingLanes|=e,e!==536870912&&(t.suspendedLanes=0,t.pingedLanes=0),t=t.eventTimes,e=31-et(e),t[e]=n}function pw(t,e){var n=t.pendingLanes&~e;t.pendingLanes=e,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=e,t.mutableReadLanes&=e,t.entangledLanes&=e,e=t.entanglements;var r=t.eventTimes;for(t=t.expirationTimes;0<n;){var o=31-et(n),i=1<<o;e[o]=0,r[o]=-1,t[o]=-1,n&=~i}}function dc(t,e){var n=t.entangledLanes|=e;for(t=t.entanglements;n;){var r=31-et(n),o=1<<r;o&e|t[r]&e&&(t[r]|=e),n&=~o}}var D=0;function Lp(t){return t&=-t,1<t?4<t?t&268435455?16:536870912:4:1}var Bp,mc,Fp,Ap,Up,Ju=!1,Oi=[],_t=null,Dt=null,bt=null,So=new Map,To=new Map,Ft=[],gw="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function dm(t,e){switch(t){case"focusin":case"focusout":_t=null;break;case"dragenter":case"dragleave":Dt=null;break;case"mouseover":case"mouseout":bt=null;break;case"pointerover":case"pointerout":So.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":To.delete(e.pointerId)}}function Kr(t,e,n,r,o,i){return t===null||t.nativeEvent!==i?(t={blockedOn:e,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},e!==null&&(e=Ao(e),e!==null&&mc(e)),t):(t.eventSystemFlags|=r,e=t.targetContainers,o!==null&&e.indexOf(o)===-1&&e.push(o),t)}function yw(t,e,n,r,o){switch(e){case"focusin":return _t=Kr(_t,t,e,n,r,o),!0;case"dragenter":return Dt=Kr(Dt,t,e,n,r,o),!0;case"mouseover":return bt=Kr(bt,t,e,n,r,o),!0;case"pointerover":var i=o.pointerId;return So.set(i,Kr(So.get(i)||null,t,e,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,To.set(i,Kr(To.get(i)||null,t,e,n,r,o)),!0}return!1}function qp(t){var e=ln(t.target);if(e!==null){var n=wn(e);if(n!==null){if(e=n.tag,e===13){if(e=xp(n),e!==null){t.blockedOn=e,Up(t.priority,function(){Fp(n)});return}}else if(e===3&&n.stateNode.current.memoizedState.isDehydrated){t.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}t.blockedOn=null}function zi(t){if(t.blockedOn!==null)return!1;for(var e=t.targetContainers;0<e.length;){var n=Ou(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(n===null){n=t.nativeEvent;var r=new n.constructor(n.type,n);Ru=r,n.target.dispatchEvent(r),Ru=null}else return e=Ao(n),e!==null&&mc(e),t.blockedOn=n,!1;e.shift()}return!0}function mm(t,e,n){zi(t)&&n.delete(e)}function hw(){Ju=!1,_t!==null&&zi(_t)&&(_t=null),Dt!==null&&zi(Dt)&&(Dt=null),bt!==null&&zi(bt)&&(bt=null),So.forEach(mm),To.forEach(mm)}function Qr(t,e){t.blockedOn===e&&(t.blockedOn=null,Ju||(Ju=!0,Be.unstable_scheduleCallback(Be.unstable_NormalPriority,hw)))}function Po(t){function e(o){return Qr(o,t)}if(0<Oi.length){Qr(Oi[0],t);for(var n=1;n<Oi.length;n++){var r=Oi[n];r.blockedOn===t&&(r.blockedOn=null)}}for(_t!==null&&Qr(_t,t),Dt!==null&&Qr(Dt,t),bt!==null&&Qr(bt,t),So.forEach(e),To.forEach(e),n=0;n<Ft.length;n++)r=Ft[n],r.blockedOn===t&&(r.blockedOn=null);for(;0<Ft.length&&(n=Ft[0],n.blockedOn===null);)qp(n),n.blockedOn===null&&Ft.shift()}var Yn=Rt.ReactCurrentBatchConfig,is=!0;function vw(t,e,n,r){var o=D,i=Yn.transition;Yn.transition=null;try{D=1,pc(t,e,n,r)}finally{D=o,Yn.transition=i}}function ww(t,e,n,r){var o=D,i=Yn.transition;Yn.transition=null;try{D=4,pc(t,e,n,r)}finally{D=o,Yn.transition=i}}function pc(t,e,n,r){if(is){var o=Ou(t,e,n,r);if(o===null)tu(t,e,r,ss,n),dm(t,r);else if(yw(o,t,e,n,r))r.stopPropagation();else if(dm(t,r),e&4&&-1<gw.indexOf(t)){for(;o!==null;){var i=Ao(o);if(i!==null&&Bp(i),i=Ou(t,e,n,r),i===null&&tu(t,e,r,ss,n),i===o)break;o=i}o!==null&&r.stopPropagation()}else tu(t,e,r,null,n)}}var ss=null;function Ou(t,e,n,r){if(ss=null,t=cc(r),t=ln(t),t!==null)if(e=wn(t),e===null)t=null;else if(n=e.tag,n===13){if(t=xp(e),t!==null)return t;t=null}else if(n===3){if(e.stateNode.current.memoizedState.isDehydrated)return e.tag===3?e.stateNode.containerInfo:null;t=null}else e!==t&&(t=null);return ss=t,null}function _p(t){switch(t){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(sw()){case fc:return 1;case Op:return 4;case rs:case aw:return 16;case Ip:return 536870912;default:return 16}default:return 16}}var Ut=null,gc=null,ji=null;function Dp(){if(ji)return ji;var t,e=gc,n=e.length,r,o="value"in Ut?Ut.value:Ut.textContent,i=o.length;for(t=0;t<n&&e[t]===o[t];t++);var s=n-t;for(r=1;r<=s&&e[n-r]===o[i-r];r++);return ji=o.slice(t,1<r?1-r:void 0)}function $i(t){var e=t.keyCode;return"charCode"in t?(t=t.charCode,t===0&&e===13&&(t=13)):t=e,t===10&&(t=13),32<=t||t===13?t:0}function Ii(){return!0}function pm(){return!1}function Fe(t){function e(n,r,o,i,s){this._reactName=n,this._targetInst=o,this.type=r,this.nativeEvent=i,this.target=s,this.currentTarget=null;for(var a in t)t.hasOwnProperty(a)&&(n=t[a],this[a]=n?n(i):i[a]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?Ii:pm,this.isPropagationStopped=pm,this}return X(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=Ii)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=Ii)},persist:function(){},isPersistent:Ii}),e}var ir={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},yc=Fe(ir),Fo=X({},ir,{view:0,detail:0}),Sw=Fe(Fo),Yl,Kl,Xr,Es=X({},Fo,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:hc,button:0,buttons:0,relatedTarget:function(t){return t.relatedTarget===void 0?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==Xr&&(Xr&&t.type==="mousemove"?(Yl=t.screenX-Xr.screenX,Kl=t.screenY-Xr.screenY):Kl=Yl=0,Xr=t),Yl)},movementY:function(t){return"movementY"in t?t.movementY:Kl}}),gm=Fe(Es),Tw=X({},Es,{dataTransfer:0}),Pw=Fe(Tw),kw=X({},Fo,{relatedTarget:0}),Ql=Fe(kw),Rw=X({},ir,{animationName:0,elapsedTime:0,pseudoElement:0}),Ew=Fe(Rw),xw=X({},ir,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),Cw=Fe(xw),Nw=X({},ir,{data:0}),ym=Fe(Nw),Jw={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Ow={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Iw={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Mw(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):(t=Iw[t])?!!e[t]:!1}function hc(){return Mw}var Lw=X({},Fo,{key:function(t){if(t.key){var e=Jw[t.key]||t.key;if(e!=="Unidentified")return e}return t.type==="keypress"?(t=$i(t),t===13?"Enter":String.fromCharCode(t)):t.type==="keydown"||t.type==="keyup"?Ow[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:hc,charCode:function(t){return t.type==="keypress"?$i(t):0},keyCode:function(t){return t.type==="keydown"||t.type==="keyup"?t.keyCode:0},which:function(t){return t.type==="keypress"?$i(t):t.type==="keydown"||t.type==="keyup"?t.keyCode:0}}),Bw=Fe(Lw),Fw=X({},Es,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),hm=Fe(Fw),Aw=X({},Fo,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:hc}),Uw=Fe(Aw),qw=X({},ir,{propertyName:0,elapsedTime:0,pseudoElement:0}),_w=Fe(qw),Dw=X({},Es,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),bw=Fe(Dw),Vw=[9,13,27,32],vc=St&&"CompositionEvent"in window,uo=null;St&&"documentMode"in document&&(uo=document.documentMode);var Gw=St&&"TextEvent"in window&&!uo,bp=St&&(!vc||uo&&8<uo&&11>=uo),vm=String.fromCharCode(32),wm=!1;function Vp(t,e){switch(t){case"keyup":return Vw.indexOf(e.keyCode)!==-1;case"keydown":return e.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Gp(t){return t=t.detail,typeof t=="object"&&"data"in t?t.data:null}var An=!1;function zw(t,e){switch(t){case"compositionend":return Gp(e);case"keypress":return e.which!==32?null:(wm=!0,vm);case"textInput":return t=e.data,t===vm&&wm?null:t;default:return null}}function jw(t,e){if(An)return t==="compositionend"||!vc&&Vp(t,e)?(t=Dp(),ji=gc=Ut=null,An=!1,t):null;switch(t){case"paste":return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return bp&&e.locale!=="ko"?null:e.data;default:return null}}var $w={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Sm(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e==="input"?!!$w[t.type]:e==="textarea"}function zp(t,e,n,r){Tp(r),e=as(e,"onChange"),0<e.length&&(n=new yc("onChange","change",null,n,r),t.push({event:n,listeners:e}))}var co=null,ko=null;function Hw(t){tg(t,0)}function xs(t){var e=_n(t);if(pp(e))return t}function Ww(t,e){if(t==="change")return e}var jp=!1;St&&(St?(Li="oninput"in document,Li||(Xl=document.createElement("div"),Xl.setAttribute("oninput","return;"),Li=typeof Xl.oninput=="function"),Mi=Li):Mi=!1,jp=Mi&&(!document.documentMode||9<document.documentMode));var Mi,Li,Xl;function Tm(){co&&(co.detachEvent("onpropertychange",$p),ko=co=null)}function $p(t){if(t.propertyName==="value"&&xs(ko)){var e=[];zp(e,ko,t,cc(t)),Ep(Hw,e)}}function Yw(t,e,n){t==="focusin"?(Tm(),co=e,ko=n,co.attachEvent("onpropertychange",$p)):t==="focusout"&&Tm()}function Kw(t){if(t==="selectionchange"||t==="keyup"||t==="keydown")return xs(ko)}function Qw(t,e){if(t==="click")return xs(e)}function Xw(t,e){if(t==="input"||t==="change")return xs(e)}function Zw(t,e){return t===e&&(t!==0||1/t===1/e)||t!==t&&e!==e}var nt=typeof Object.is=="function"?Object.is:Zw;function Ro(t,e){if(nt(t,e))return!0;if(typeof t!="object"||t===null||typeof e!="object"||e===null)return!1;var n=Object.keys(t),r=Object.keys(e);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!du.call(e,o)||!nt(t[o],e[o]))return!1}return!0}function Pm(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function km(t,e){var n=Pm(t);t=0;for(var r;n;){if(n.nodeType===3){if(r=t+n.textContent.length,t<=e&&r>=e)return{node:n,offset:e-t};t=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Pm(n)}}function Hp(t,e){return t&&e?t===e?!0:t&&t.nodeType===3?!1:e&&e.nodeType===3?Hp(t,e.parentNode):"contains"in t?t.contains(e):t.compareDocumentPosition?!!(t.compareDocumentPosition(e)&16):!1:!1}function Wp(){for(var t=window,e=es();e instanceof t.HTMLIFrameElement;){try{var n=typeof e.contentWindow.location.href=="string"}catch{n=!1}if(n)t=e.contentWindow;else break;e=es(t.document)}return e}function wc(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&(e==="input"&&(t.type==="text"||t.type==="search"||t.type==="tel"||t.type==="url"||t.type==="password")||e==="textarea"||t.contentEditable==="true")}function e0(t){var e=Wp(),n=t.focusedElem,r=t.selectionRange;if(e!==n&&n&&n.ownerDocument&&Hp(n.ownerDocument.documentElement,n)){if(r!==null&&wc(n)){if(e=r.start,t=r.end,t===void 0&&(t=e),"selectionStart"in n)n.selectionStart=e,n.selectionEnd=Math.min(t,n.value.length);else if(t=(e=n.ownerDocument||document)&&e.defaultView||window,t.getSelection){t=t.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=r.end===void 0?i:Math.min(r.end,o),!t.extend&&i>r&&(o=r,r=i,i=o),o=km(n,i);var s=km(n,r);o&&s&&(t.rangeCount!==1||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==s.node||t.focusOffset!==s.offset)&&(e=e.createRange(),e.setStart(o.node,o.offset),t.removeAllRanges(),i>r?(t.addRange(e),t.extend(s.node,s.offset)):(e.setEnd(s.node,s.offset),t.addRange(e)))}}for(e=[],t=n;t=t.parentNode;)t.nodeType===1&&e.push({element:t,left:t.scrollLeft,top:t.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<e.length;n++)t=e[n],t.element.scrollLeft=t.left,t.element.scrollTop=t.top}}var t0=St&&"documentMode"in document&&11>=document.documentMode,Un=null,Iu=null,fo=null,Mu=!1;function Rm(t,e,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;Mu||Un==null||Un!==es(r)||(r=Un,"selectionStart"in r&&wc(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),fo&&Ro(fo,r)||(fo=r,r=as(Iu,"onSelect"),0<r.length&&(e=new yc("onSelect","select",null,e,n),t.push({event:e,listeners:r}),e.target=Un)))}function Bi(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var qn={animationend:Bi("Animation","AnimationEnd"),animationiteration:Bi("Animation","AnimationIteration"),animationstart:Bi("Animation","AnimationStart"),transitionend:Bi("Transition","TransitionEnd")},Zl={},Yp={};St&&(Yp=document.createElement("div").style,"AnimationEvent"in window||(delete qn.animationend.animation,delete qn.animationiteration.animation,delete qn.animationstart.animation),"TransitionEvent"in window||delete qn.transitionend.transition);function Cs(t){if(Zl[t])return Zl[t];if(!qn[t])return t;var e=qn[t],n;for(n in e)if(e.hasOwnProperty(n)&&n in Yp)return Zl[t]=e[n];return t}var Kp=Cs("animationend"),Qp=Cs("animationiteration"),Xp=Cs("animationstart"),Zp=Cs("transitionend"),eg=new Map,Em="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Yt(t,e){eg.set(t,e),vn(e,[t])}for(Fi=0;Fi<Em.length;Fi++)Ai=Em[Fi],xm=Ai.toLowerCase(),Cm=Ai[0].toUpperCase()+Ai.slice(1),Yt(xm,"on"+Cm);var Ai,xm,Cm,Fi;Yt(Kp,"onAnimationEnd");Yt(Qp,"onAnimationIteration");Yt(Xp,"onAnimationStart");Yt("dblclick","onDoubleClick");Yt("focusin","onFocus");Yt("focusout","onBlur");Yt(Zp,"onTransitionEnd");Xn("onMouseEnter",["mouseout","mouseover"]);Xn("onMouseLeave",["mouseout","mouseover"]);Xn("onPointerEnter",["pointerout","pointerover"]);Xn("onPointerLeave",["pointerout","pointerover"]);vn("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));vn("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));vn("onBeforeInput",["compositionend","keypress","textInput","paste"]);vn("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));vn("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));vn("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var so="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),n0=new Set("cancel close invalid load scroll toggle".split(" ").concat(so));function Nm(t,e,n){var r=t.type||"unknown-event";t.currentTarget=n,nw(r,e,void 0,t),t.currentTarget=null}function tg(t,e){e=(e&4)!==0;for(var n=0;n<t.length;n++){var r=t[n],o=r.event;r=r.listeners;e:{var i=void 0;if(e)for(var s=r.length-1;0<=s;s--){var a=r[s],l=a.instance,c=a.currentTarget;if(a=a.listener,l!==i&&o.isPropagationStopped())break e;Nm(o,a,c),i=l}else for(s=0;s<r.length;s++){if(a=r[s],l=a.instance,c=a.currentTarget,a=a.listener,l!==i&&o.isPropagationStopped())break e;Nm(o,a,c),i=l}}}if(ns)throw t=Cu,ns=!1,Cu=null,t}function z(t,e){var n=e[Uu];n===void 0&&(n=e[Uu]=new Set);var r=t+"__bubble";n.has(r)||(ng(e,t,2,!1),n.add(r))}function eu(t,e,n){var r=0;e&&(r|=4),ng(n,t,r,e)}var Ui="_reactListening"+Math.random().toString(36).slice(2);function Eo(t){if(!t[Ui]){t[Ui]=!0,up.forEach(function(n){n!=="selectionchange"&&(n0.has(n)||eu(n,!1,t),eu(n,!0,t))});var e=t.nodeType===9?t:t.ownerDocument;e===null||e[Ui]||(e[Ui]=!0,eu("selectionchange",!1,e))}}function ng(t,e,n,r){switch(_p(e)){case 1:var o=vw;break;case 4:o=ww;break;default:o=pc}n=o.bind(null,e,n,t),o=void 0,!xu||e!=="touchstart"&&e!=="touchmove"&&e!=="wheel"||(o=!0),r?o!==void 0?t.addEventListener(e,n,{capture:!0,passive:o}):t.addEventListener(e,n,!0):o!==void 0?t.addEventListener(e,n,{passive:o}):t.addEventListener(e,n,!1)}function tu(t,e,n,r,o){var i=r;if(!(e&1)&&!(e&2)&&r!==null)e:for(;;){if(r===null)return;var s=r.tag;if(s===3||s===4){var a=r.stateNode.containerInfo;if(a===o||a.nodeType===8&&a.parentNode===o)break;if(s===4)for(s=r.return;s!==null;){var l=s.tag;if((l===3||l===4)&&(l=s.stateNode.containerInfo,l===o||l.nodeType===8&&l.parentNode===o))return;s=s.return}for(;a!==null;){if(s=ln(a),s===null)return;if(l=s.tag,l===5||l===6){r=i=s;continue e}a=a.parentNode}}r=r.return}Ep(function(){var c=i,f=cc(n),y=[];e:{var m=eg.get(t);if(m!==void 0){var p=yc,S=t;switch(t){case"keypress":if($i(n)===0)break e;case"keydown":case"keyup":p=Bw;break;case"focusin":S="focus",p=Ql;break;case"focusout":S="blur",p=Ql;break;case"beforeblur":case"afterblur":p=Ql;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":p=gm;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":p=Pw;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":p=Uw;break;case Kp:case Qp:case Xp:p=Ew;break;case Zp:p=_w;break;case"scroll":p=Sw;break;case"wheel":p=bw;break;case"copy":case"cut":case"paste":p=Cw;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":p=hm}var T=(e&4)!==0,C=!T&&t==="scroll",g=T?m!==null?m+"Capture":null:m;T=[];for(var d=c,h;d!==null;){h=d;var k=h.stateNode;if(h.tag===5&&k!==null&&(h=k,g!==null&&(k=wo(d,g),k!=null&&T.push(xo(d,k,h)))),C)break;d=d.return}0<T.length&&(m=new p(m,S,null,n,f),y.push({event:m,listeners:T}))}}if(!(e&7)){e:{if(m=t==="mouseover"||t==="pointerover",p=t==="mouseout"||t==="pointerout",m&&n!==Ru&&(S=n.relatedTarget||n.fromElement)&&(ln(S)||S[Tt]))break e;if((p||m)&&(m=f.window===f?f:(m=f.ownerDocument)?m.defaultView||m.parentWindow:window,p?(S=n.relatedTarget||n.toElement,p=c,S=S?ln(S):null,S!==null&&(C=wn(S),S!==C||S.tag!==5&&S.tag!==6)&&(S=null)):(p=null,S=c),p!==S)){if(T=gm,k="onMouseLeave",g="onMouseEnter",d="mouse",(t==="pointerout"||t==="pointerover")&&(T=hm,k="onPointerLeave",g="onPointerEnter",d="pointer"),C=p==null?m:_n(p),h=S==null?m:_n(S),m=new T(k,d+"leave",p,n,f),m.target=C,m.relatedTarget=h,k=null,ln(f)===c&&(T=new T(g,d+"enter",S,n,f),T.target=h,T.relatedTarget=C,k=T),C=k,p&&S)t:{for(T=p,g=S,d=0,h=T;h;h=Ln(h))d++;for(h=0,k=g;k;k=Ln(k))h++;for(;0<d-h;)T=Ln(T),d--;for(;0<h-d;)g=Ln(g),h--;for(;d--;){if(T===g||g!==null&&T===g.alternate)break t;T=Ln(T),g=Ln(g)}T=null}else T=null;p!==null&&Jm(y,m,p,T,!1),S!==null&&C!==null&&Jm(y,C,S,T,!0)}}e:{if(m=c?_n(c):window,p=m.nodeName&&m.nodeName.toLowerCase(),p==="select"||p==="input"&&m.type==="file")var E=Ww;else if(Sm(m))if(jp)E=Xw;else{E=Kw;var O=Yw}else(p=m.nodeName)&&p.toLowerCase()==="input"&&(m.type==="checkbox"||m.type==="radio")&&(E=Qw);if(E&&(E=E(t,c))){zp(y,E,n,f);break e}O&&O(t,m,c),t==="focusout"&&(O=m._wrapperState)&&O.controlled&&m.type==="number"&&wu(m,"number",m.value)}switch(O=c?_n(c):window,t){case"focusin":(Sm(O)||O.contentEditable==="true")&&(Un=O,Iu=c,fo=null);break;case"focusout":fo=Iu=Un=null;break;case"mousedown":Mu=!0;break;case"contextmenu":case"mouseup":case"dragend":Mu=!1,Rm(y,n,f);break;case"selectionchange":if(t0)break;case"keydown":case"keyup":Rm(y,n,f)}var I;if(vc)e:{switch(t){case"compositionstart":var M="onCompositionStart";break e;case"compositionend":M="onCompositionEnd";break e;case"compositionupdate":M="onCompositionUpdate";break e}M=void 0}else An?Vp(t,n)&&(M="onCompositionEnd"):t==="keydown"&&n.keyCode===229&&(M="onCompositionStart");M&&(bp&&n.locale!=="ko"&&(An||M!=="onCompositionStart"?M==="onCompositionEnd"&&An&&(I=Dp()):(Ut=f,gc="value"in Ut?Ut.value:Ut.textContent,An=!0)),O=as(c,M),0<O.length&&(M=new ym(M,t,null,n,f),y.push({event:M,listeners:O}),I?M.data=I:(I=Gp(n),I!==null&&(M.data=I)))),(I=Gw?zw(t,n):jw(t,n))&&(c=as(c,"onBeforeInput"),0<c.length&&(f=new ym("onBeforeInput","beforeinput",null,n,f),y.push({event:f,listeners:c}),f.data=I))}tg(y,e)})}function xo(t,e,n){return{instance:t,listener:e,currentTarget:n}}function as(t,e){for(var n=e+"Capture",r=[];t!==null;){var o=t,i=o.stateNode;o.tag===5&&i!==null&&(o=i,i=wo(t,n),i!=null&&r.unshift(xo(t,i,o)),i=wo(t,e),i!=null&&r.push(xo(t,i,o))),t=t.return}return r}function Ln(t){if(t===null)return null;do t=t.return;while(t&&t.tag!==5);return t||null}function Jm(t,e,n,r,o){for(var i=e._reactName,s=[];n!==null&&n!==r;){var a=n,l=a.alternate,c=a.stateNode;if(l!==null&&l===r)break;a.tag===5&&c!==null&&(a=c,o?(l=wo(n,i),l!=null&&s.unshift(xo(n,l,a))):o||(l=wo(n,i),l!=null&&s.push(xo(n,l,a)))),n=n.return}s.length!==0&&t.push({event:e,listeners:s})}var r0=/\r\n?/g,o0=/\u0000|\uFFFD/g;function Om(t){return(typeof t=="string"?t:""+t).replace(r0,`
`).replace(o0,"")}function qi(t,e,n){if(e=Om(e),Om(t)!==e&&n)throw Error(R(425))}function ls(){}var Lu=null,Bu=null;function Fu(t,e){return t==="textarea"||t==="noscript"||typeof e.children=="string"||typeof e.children=="number"||typeof e.dangerouslySetInnerHTML=="object"&&e.dangerouslySetInnerHTML!==null&&e.dangerouslySetInnerHTML.__html!=null}var Au=typeof setTimeout=="function"?setTimeout:void 0,i0=typeof clearTimeout=="function"?clearTimeout:void 0,Im=typeof Promise=="function"?Promise:void 0,s0=typeof queueMicrotask=="function"?queueMicrotask:typeof Im<"u"?function(t){return Im.resolve(null).then(t).catch(a0)}:Au;function a0(t){setTimeout(function(){throw t})}function nu(t,e){var n=e,r=0;do{var o=n.nextSibling;if(t.removeChild(n),o&&o.nodeType===8)if(n=o.data,n==="/$"){if(r===0){t.removeChild(o),Po(e);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=o}while(n);Po(e)}function Vt(t){for(;t!=null;t=t.nextSibling){var e=t.nodeType;if(e===1||e===3)break;if(e===8){if(e=t.data,e==="$"||e==="$!"||e==="$?")break;if(e==="/$")return null}}return t}function Mm(t){t=t.previousSibling;for(var e=0;t;){if(t.nodeType===8){var n=t.data;if(n==="$"||n==="$!"||n==="$?"){if(e===0)return t;e--}else n==="/$"&&e++}t=t.previousSibling}return null}var sr=Math.random().toString(36).slice(2),ut="__reactFiber$"+sr,Co="__reactProps$"+sr,Tt="__reactContainer$"+sr,Uu="__reactEvents$"+sr,l0="__reactListeners$"+sr,u0="__reactHandles$"+sr;function ln(t){var e=t[ut];if(e)return e;for(var n=t.parentNode;n;){if(e=n[Tt]||n[ut]){if(n=e.alternate,e.child!==null||n!==null&&n.child!==null)for(t=Mm(t);t!==null;){if(n=t[ut])return n;t=Mm(t)}return e}t=n,n=t.parentNode}return null}function Ao(t){return t=t[ut]||t[Tt],!t||t.tag!==5&&t.tag!==6&&t.tag!==13&&t.tag!==3?null:t}function _n(t){if(t.tag===5||t.tag===6)return t.stateNode;throw Error(R(33))}function Ns(t){return t[Co]||null}var qu=[],Dn=-1;function Kt(t){return{current:t}}function j(t){0>Dn||(t.current=qu[Dn],qu[Dn]=null,Dn--)}function G(t,e){Dn++,qu[Dn]=t.current,t.current=e}var Wt={},ve=Kt(Wt),Ce=Kt(!1),mn=Wt;function Zn(t,e){var n=t.type.contextTypes;if(!n)return Wt;var r=t.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===e)return r.__reactInternalMemoizedMaskedChildContext;var o={},i;for(i in n)o[i]=e[i];return r&&(t=t.stateNode,t.__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function Ne(t){return t=t.childContextTypes,t!=null}function us(){j(Ce),j(ve)}function Lm(t,e,n){if(ve.current!==Wt)throw Error(R(168));G(ve,e),G(Ce,n)}function rg(t,e,n){var r=t.stateNode;if(e=e.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var o in r)if(!(o in e))throw Error(R(108,Yv(t)||"Unknown",o));return X({},n,r)}function cs(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||Wt,mn=ve.current,G(ve,t),G(Ce,Ce.current),!0}function Bm(t,e,n){var r=t.stateNode;if(!r)throw Error(R(169));n?(t=rg(t,e,mn),r.__reactInternalMemoizedMergedChildContext=t,j(Ce),j(ve),G(ve,t)):j(Ce),G(Ce,n)}var yt=null,Js=!1,ru=!1;function og(t){yt===null?yt=[t]:yt.push(t)}function c0(t){Js=!0,og(t)}function Qt(){if(!ru&&yt!==null){ru=!0;var t=0,e=D;try{var n=yt;for(D=1;t<n.length;t++){var r=n[t];do r=r(!0);while(r!==null)}yt=null,Js=!1}catch(o){throw yt!==null&&(yt=yt.slice(t+1)),Jp(fc,Qt),o}finally{D=e,ru=!1}}return null}var bn=[],Vn=0,fs=null,ds=0,De=[],be=0,pn=null,ht=1,vt="";function sn(t,e){bn[Vn++]=ds,bn[Vn++]=fs,fs=t,ds=e}function ig(t,e,n){De[be++]=ht,De[be++]=vt,De[be++]=pn,pn=t;var r=ht;t=vt;var o=32-et(r)-1;r&=~(1<<o),n+=1;var i=32-et(e)+o;if(30<i){var s=o-o%5;i=(r&(1<<s)-1).toString(32),r>>=s,o-=s,ht=1<<32-et(e)+o|n<<o|r,vt=i+t}else ht=1<<i|n<<o|r,vt=t}function Sc(t){t.return!==null&&(sn(t,1),ig(t,1,0))}function Tc(t){for(;t===fs;)fs=bn[--Vn],bn[Vn]=null,ds=bn[--Vn],bn[Vn]=null;for(;t===pn;)pn=De[--be],De[be]=null,vt=De[--be],De[be]=null,ht=De[--be],De[be]=null}var Le=null,Me=null,W=!1,Ze=null;function sg(t,e){var n=Ve(5,null,null,0);n.elementType="DELETED",n.stateNode=e,n.return=t,e=t.deletions,e===null?(t.deletions=[n],t.flags|=16):e.push(n)}function Fm(t,e){switch(t.tag){case 5:var n=t.type;return e=e.nodeType!==1||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e,e!==null?(t.stateNode=e,Le=t,Me=Vt(e.firstChild),!0):!1;case 6:return e=t.pendingProps===""||e.nodeType!==3?null:e,e!==null?(t.stateNode=e,Le=t,Me=null,!0):!1;case 13:return e=e.nodeType!==8?null:e,e!==null?(n=pn!==null?{id:ht,overflow:vt}:null,t.memoizedState={dehydrated:e,treeContext:n,retryLane:1073741824},n=Ve(18,null,null,0),n.stateNode=e,n.return=t,t.child=n,Le=t,Me=null,!0):!1;default:return!1}}function _u(t){return(t.mode&1)!==0&&(t.flags&128)===0}function Du(t){if(W){var e=Me;if(e){var n=e;if(!Fm(t,e)){if(_u(t))throw Error(R(418));e=Vt(n.nextSibling);var r=Le;e&&Fm(t,e)?sg(r,n):(t.flags=t.flags&-4097|2,W=!1,Le=t)}}else{if(_u(t))throw Error(R(418));t.flags=t.flags&-4097|2,W=!1,Le=t}}}function Am(t){for(t=t.return;t!==null&&t.tag!==5&&t.tag!==3&&t.tag!==13;)t=t.return;Le=t}function _i(t){if(t!==Le)return!1;if(!W)return Am(t),W=!0,!1;var e;if((e=t.tag!==3)&&!(e=t.tag!==5)&&(e=t.type,e=e!=="head"&&e!=="body"&&!Fu(t.type,t.memoizedProps)),e&&(e=Me)){if(_u(t))throw ag(),Error(R(418));for(;e;)sg(t,e),e=Vt(e.nextSibling)}if(Am(t),t.tag===13){if(t=t.memoizedState,t=t!==null?t.dehydrated:null,!t)throw Error(R(317));e:{for(t=t.nextSibling,e=0;t;){if(t.nodeType===8){var n=t.data;if(n==="/$"){if(e===0){Me=Vt(t.nextSibling);break e}e--}else n!=="$"&&n!=="$!"&&n!=="$?"||e++}t=t.nextSibling}Me=null}}else Me=Le?Vt(t.stateNode.nextSibling):null;return!0}function ag(){for(var t=Me;t;)t=Vt(t.nextSibling)}function er(){Me=Le=null,W=!1}function Pc(t){Ze===null?Ze=[t]:Ze.push(t)}var f0=Rt.ReactCurrentBatchConfig;function Qe(t,e){if(t&&t.defaultProps){e=X({},e),t=t.defaultProps;for(var n in t)e[n]===void 0&&(e[n]=t[n]);return e}return e}var ms=Kt(null),ps=null,Gn=null,kc=null;function Rc(){kc=Gn=ps=null}function Ec(t){var e=ms.current;j(ms),t._currentValue=e}function bu(t,e,n){for(;t!==null;){var r=t.alternate;if((t.childLanes&e)!==e?(t.childLanes|=e,r!==null&&(r.childLanes|=e)):r!==null&&(r.childLanes&e)!==e&&(r.childLanes|=e),t===n)break;t=t.return}}function Kn(t,e){ps=t,kc=Gn=null,t=t.dependencies,t!==null&&t.firstContext!==null&&(t.lanes&e&&(xe=!0),t.firstContext=null)}function ze(t){var e=t._currentValue;if(kc!==t)if(t={context:t,memoizedValue:e,next:null},Gn===null){if(ps===null)throw Error(R(308));Gn=t,ps.dependencies={lanes:0,firstContext:t}}else Gn=Gn.next=t;return e}var un=null;function xc(t){un===null?un=[t]:un.push(t)}function lg(t,e,n,r){var o=e.interleaved;return o===null?(n.next=n,xc(e)):(n.next=o.next,o.next=n),e.interleaved=n,Pt(t,r)}function Pt(t,e){t.lanes|=e;var n=t.alternate;for(n!==null&&(n.lanes|=e),n=t,t=t.return;t!==null;)t.childLanes|=e,n=t.alternate,n!==null&&(n.childLanes|=e),n=t,t=t.return;return n.tag===3?n.stateNode:null}var Bt=!1;function Cc(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function ug(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function wt(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function Gt(t,e,n){var r=t.updateQueue;if(r===null)return null;if(r=r.shared,q&2){var o=r.pending;return o===null?e.next=e:(e.next=o.next,o.next=e),r.pending=e,Pt(t,n)}return o=r.interleaved,o===null?(e.next=e,xc(r)):(e.next=o.next,o.next=e),r.interleaved=e,Pt(t,n)}function Hi(t,e,n){if(e=e.updateQueue,e!==null&&(e=e.shared,(n&4194240)!==0)){var r=e.lanes;r&=t.pendingLanes,n|=r,e.lanes=n,dc(t,n)}}function Um(t,e){var n=t.updateQueue,r=t.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var o=null,i=null;if(n=n.firstBaseUpdate,n!==null){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};i===null?o=i=s:i=i.next=s,n=n.next}while(n!==null);i===null?o=i=e:i=i.next=e}else o=i=e;n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},t.updateQueue=n;return}t=n.lastBaseUpdate,t===null?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function gs(t,e,n,r){var o=t.updateQueue;Bt=!1;var i=o.firstBaseUpdate,s=o.lastBaseUpdate,a=o.shared.pending;if(a!==null){o.shared.pending=null;var l=a,c=l.next;l.next=null,s===null?i=c:s.next=c,s=l;var f=t.alternate;f!==null&&(f=f.updateQueue,a=f.lastBaseUpdate,a!==s&&(a===null?f.firstBaseUpdate=c:a.next=c,f.lastBaseUpdate=l))}if(i!==null){var y=o.baseState;s=0,f=c=l=null,a=i;do{var m=a.lane,p=a.eventTime;if((r&m)===m){f!==null&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var S=t,T=a;switch(m=e,p=n,T.tag){case 1:if(S=T.payload,typeof S=="function"){y=S.call(p,y,m);break e}y=S;break e;case 3:S.flags=S.flags&-65537|128;case 0:if(S=T.payload,m=typeof S=="function"?S.call(p,y,m):S,m==null)break e;y=X({},y,m);break e;case 2:Bt=!0}}a.callback!==null&&a.lane!==0&&(t.flags|=64,m=o.effects,m===null?o.effects=[a]:m.push(a))}else p={eventTime:p,lane:m,tag:a.tag,payload:a.payload,callback:a.callback,next:null},f===null?(c=f=p,l=y):f=f.next=p,s|=m;if(a=a.next,a===null){if(a=o.shared.pending,a===null)break;m=a,a=m.next,m.next=null,o.lastBaseUpdate=m,o.shared.pending=null}}while(1);if(f===null&&(l=y),o.baseState=l,o.firstBaseUpdate=c,o.lastBaseUpdate=f,e=o.shared.interleaved,e!==null){o=e;do s|=o.lane,o=o.next;while(o!==e)}else i===null&&(o.shared.lanes=0);yn|=s,t.lanes=s,t.memoizedState=y}}function qm(t,e,n){if(t=e.effects,e.effects=null,t!==null)for(e=0;e<t.length;e++){var r=t[e],o=r.callback;if(o!==null){if(r.callback=null,r=n,typeof o!="function")throw Error(R(191,o));o.call(r)}}}var cg=new lp.Component().refs;function Vu(t,e,n,r){e=t.memoizedState,n=n(r,e),n=n==null?e:X({},e,n),t.memoizedState=n,t.lanes===0&&(t.updateQueue.baseState=n)}var Os={isMounted:function(t){return(t=t._reactInternals)?wn(t)===t:!1},enqueueSetState:function(t,e,n){t=t._reactInternals;var r=Pe(),o=jt(t),i=wt(r,o);i.payload=e,n!=null&&(i.callback=n),e=Gt(t,i,o),e!==null&&(tt(e,t,o,r),Hi(e,t,o))},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var r=Pe(),o=jt(t),i=wt(r,o);i.tag=1,i.payload=e,n!=null&&(i.callback=n),e=Gt(t,i,o),e!==null&&(tt(e,t,o,r),Hi(e,t,o))},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=Pe(),r=jt(t),o=wt(n,r);o.tag=2,e!=null&&(o.callback=e),e=Gt(t,o,r),e!==null&&(tt(e,t,r,n),Hi(e,t,r))}};function _m(t,e,n,r,o,i,s){return t=t.stateNode,typeof t.shouldComponentUpdate=="function"?t.shouldComponentUpdate(r,i,s):e.prototype&&e.prototype.isPureReactComponent?!Ro(n,r)||!Ro(o,i):!0}function fg(t,e,n){var r=!1,o=Wt,i=e.contextType;return typeof i=="object"&&i!==null?i=ze(i):(o=Ne(e)?mn:ve.current,r=e.contextTypes,i=(r=r!=null)?Zn(t,o):Wt),e=new e(n,i),t.memoizedState=e.state!==null&&e.state!==void 0?e.state:null,e.updater=Os,t.stateNode=e,e._reactInternals=t,r&&(t=t.stateNode,t.__reactInternalMemoizedUnmaskedChildContext=o,t.__reactInternalMemoizedMaskedChildContext=i),e}function Dm(t,e,n,r){t=e.state,typeof e.componentWillReceiveProps=="function"&&e.componentWillReceiveProps(n,r),typeof e.UNSAFE_componentWillReceiveProps=="function"&&e.UNSAFE_componentWillReceiveProps(n,r),e.state!==t&&Os.enqueueReplaceState(e,e.state,null)}function Gu(t,e,n,r){var o=t.stateNode;o.props=n,o.state=t.memoizedState,o.refs=cg,Cc(t);var i=e.contextType;typeof i=="object"&&i!==null?o.context=ze(i):(i=Ne(e)?mn:ve.current,o.context=Zn(t,i)),o.state=t.memoizedState,i=e.getDerivedStateFromProps,typeof i=="function"&&(Vu(t,e,i,n),o.state=t.memoizedState),typeof e.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(e=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),e!==o.state&&Os.enqueueReplaceState(o,o.state,null),gs(t,n,o,r),o.state=t.memoizedState),typeof o.componentDidMount=="function"&&(t.flags|=4194308)}function Zr(t,e,n){if(t=n.ref,t!==null&&typeof t!="function"&&typeof t!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(R(309));var r=n.stateNode}if(!r)throw Error(R(147,t));var o=r,i=""+t;return e!==null&&e.ref!==null&&typeof e.ref=="function"&&e.ref._stringRef===i?e.ref:(e=function(s){var a=o.refs;a===cg&&(a=o.refs={}),s===null?delete a[i]:a[i]=s},e._stringRef=i,e)}if(typeof t!="string")throw Error(R(284));if(!n._owner)throw Error(R(290,t))}return t}function Di(t,e){throw t=Object.prototype.toString.call(e),Error(R(31,t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t))}function bm(t){var e=t._init;return e(t._payload)}function dg(t){function e(g,d){if(t){var h=g.deletions;h===null?(g.deletions=[d],g.flags|=16):h.push(d)}}function n(g,d){if(!t)return null;for(;d!==null;)e(g,d),d=d.sibling;return null}function r(g,d){for(g=new Map;d!==null;)d.key!==null?g.set(d.key,d):g.set(d.index,d),d=d.sibling;return g}function o(g,d){return g=$t(g,d),g.index=0,g.sibling=null,g}function i(g,d,h){return g.index=h,t?(h=g.alternate,h!==null?(h=h.index,h<d?(g.flags|=2,d):h):(g.flags|=2,d)):(g.flags|=1048576,d)}function s(g){return t&&g.alternate===null&&(g.flags|=2),g}function a(g,d,h,k){return d===null||d.tag!==6?(d=cu(h,g.mode,k),d.return=g,d):(d=o(d,h),d.return=g,d)}function l(g,d,h,k){var E=h.type;return E===Fn?f(g,d,h.props.children,k,h.key):d!==null&&(d.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===Lt&&bm(E)===d.type)?(k=o(d,h.props),k.ref=Zr(g,d,h),k.return=g,k):(k=Zi(h.type,h.key,h.props,null,g.mode,k),k.ref=Zr(g,d,h),k.return=g,k)}function c(g,d,h,k){return d===null||d.tag!==4||d.stateNode.containerInfo!==h.containerInfo||d.stateNode.implementation!==h.implementation?(d=fu(h,g.mode,k),d.return=g,d):(d=o(d,h.children||[]),d.return=g,d)}function f(g,d,h,k,E){return d===null||d.tag!==7?(d=dn(h,g.mode,k,E),d.return=g,d):(d=o(d,h),d.return=g,d)}function y(g,d,h){if(typeof d=="string"&&d!==""||typeof d=="number")return d=cu(""+d,g.mode,h),d.return=g,d;if(typeof d=="object"&&d!==null){switch(d.$$typeof){case Ei:return h=Zi(d.type,d.key,d.props,null,g.mode,h),h.ref=Zr(g,null,d),h.return=g,h;case Bn:return d=fu(d,g.mode,h),d.return=g,d;case Lt:var k=d._init;return y(g,k(d._payload),h)}if(oo(d)||Yr(d))return d=dn(d,g.mode,h,null),d.return=g,d;Di(g,d)}return null}function m(g,d,h,k){var E=d!==null?d.key:null;if(typeof h=="string"&&h!==""||typeof h=="number")return E!==null?null:a(g,d,""+h,k);if(typeof h=="object"&&h!==null){switch(h.$$typeof){case Ei:return h.key===E?l(g,d,h,k):null;case Bn:return h.key===E?c(g,d,h,k):null;case Lt:return E=h._init,m(g,d,E(h._payload),k)}if(oo(h)||Yr(h))return E!==null?null:f(g,d,h,k,null);Di(g,h)}return null}function p(g,d,h,k,E){if(typeof k=="string"&&k!==""||typeof k=="number")return g=g.get(h)||null,a(d,g,""+k,E);if(typeof k=="object"&&k!==null){switch(k.$$typeof){case Ei:return g=g.get(k.key===null?h:k.key)||null,l(d,g,k,E);case Bn:return g=g.get(k.key===null?h:k.key)||null,c(d,g,k,E);case Lt:var O=k._init;return p(g,d,h,O(k._payload),E)}if(oo(k)||Yr(k))return g=g.get(h)||null,f(d,g,k,E,null);Di(d,k)}return null}function S(g,d,h,k){for(var E=null,O=null,I=d,M=d=0,L=null;I!==null&&M<h.length;M++){I.index>M?(L=I,I=null):L=I.sibling;var B=m(g,I,h[M],k);if(B===null){I===null&&(I=L);break}t&&I&&B.alternate===null&&e(g,I),d=i(B,d,M),O===null?E=B:O.sibling=B,O=B,I=L}if(M===h.length)return n(g,I),W&&sn(g,M),E;if(I===null){for(;M<h.length;M++)I=y(g,h[M],k),I!==null&&(d=i(I,d,M),O===null?E=I:O.sibling=I,O=I);return W&&sn(g,M),E}for(I=r(g,I);M<h.length;M++)L=p(I,g,M,h[M],k),L!==null&&(t&&L.alternate!==null&&I.delete(L.key===null?M:L.key),d=i(L,d,M),O===null?E=L:O.sibling=L,O=L);return t&&I.forEach(function(ue){return e(g,ue)}),W&&sn(g,M),E}function T(g,d,h,k){var E=Yr(h);if(typeof E!="function")throw Error(R(150));if(h=E.call(h),h==null)throw Error(R(151));for(var O=E=null,I=d,M=d=0,L=null,B=h.next();I!==null&&!B.done;M++,B=h.next()){I.index>M?(L=I,I=null):L=I.sibling;var ue=m(g,I,B.value,k);if(ue===null){I===null&&(I=L);break}t&&I&&ue.alternate===null&&e(g,I),d=i(ue,d,M),O===null?E=ue:O.sibling=ue,O=ue,I=L}if(B.done)return n(g,I),W&&sn(g,M),E;if(I===null){for(;!B.done;M++,B=h.next())B=y(g,B.value,k),B!==null&&(d=i(B,d,M),O===null?E=B:O.sibling=B,O=B);return W&&sn(g,M),E}for(I=r(g,I);!B.done;M++,B=h.next())B=p(I,g,M,B.value,k),B!==null&&(t&&B.alternate!==null&&I.delete(B.key===null?M:B.key),d=i(B,d,M),O===null?E=B:O.sibling=B,O=B);return t&&I.forEach(function(Jl){return e(g,Jl)}),W&&sn(g,M),E}function C(g,d,h,k){if(typeof h=="object"&&h!==null&&h.type===Fn&&h.key===null&&(h=h.props.children),typeof h=="object"&&h!==null){switch(h.$$typeof){case Ei:e:{for(var E=h.key,O=d;O!==null;){if(O.key===E){if(E=h.type,E===Fn){if(O.tag===7){n(g,O.sibling),d=o(O,h.props.children),d.return=g,g=d;break e}}else if(O.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===Lt&&bm(E)===O.type){n(g,O.sibling),d=o(O,h.props),d.ref=Zr(g,O,h),d.return=g,g=d;break e}n(g,O);break}else e(g,O);O=O.sibling}h.type===Fn?(d=dn(h.props.children,g.mode,k,h.key),d.return=g,g=d):(k=Zi(h.type,h.key,h.props,null,g.mode,k),k.ref=Zr(g,d,h),k.return=g,g=k)}return s(g);case Bn:e:{for(O=h.key;d!==null;){if(d.key===O)if(d.tag===4&&d.stateNode.containerInfo===h.containerInfo&&d.stateNode.implementation===h.implementation){n(g,d.sibling),d=o(d,h.children||[]),d.return=g,g=d;break e}else{n(g,d);break}else e(g,d);d=d.sibling}d=fu(h,g.mode,k),d.return=g,g=d}return s(g);case Lt:return O=h._init,C(g,d,O(h._payload),k)}if(oo(h))return S(g,d,h,k);if(Yr(h))return T(g,d,h,k);Di(g,h)}return typeof h=="string"&&h!==""||typeof h=="number"?(h=""+h,d!==null&&d.tag===6?(n(g,d.sibling),d=o(d,h),d.return=g,g=d):(n(g,d),d=cu(h,g.mode,k),d.return=g,g=d),s(g)):n(g,d)}return C}var tr=dg(!0),mg=dg(!1),Uo={},ft=Kt(Uo),No=Kt(Uo),Jo=Kt(Uo);function cn(t){if(t===Uo)throw Error(R(174));return t}function Nc(t,e){switch(G(Jo,e),G(No,t),G(ft,Uo),t=e.nodeType,t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Tu(null,"");break;default:t=t===8?e.parentNode:e,e=t.namespaceURI||null,t=t.tagName,e=Tu(e,t)}j(ft),G(ft,e)}function nr(){j(ft),j(No),j(Jo)}function pg(t){cn(Jo.current);var e=cn(ft.current),n=Tu(e,t.type);e!==n&&(G(No,t),G(ft,n))}function Jc(t){No.current===t&&(j(ft),j(No))}var K=Kt(0);function ys(t){for(var e=t;e!==null;){if(e.tag===13){var n=e.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return e}else if(e.tag===19&&e.memoizedProps.revealOrder!==void 0){if(e.flags&128)return e}else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break;for(;e.sibling===null;){if(e.return===null||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var ou=[];function Oc(){for(var t=0;t<ou.length;t++)ou[t]._workInProgressVersionPrimary=null;ou.length=0}var Wi=Rt.ReactCurrentDispatcher,iu=Rt.ReactCurrentBatchConfig,gn=0,Q=null,ie=null,ae=null,hs=!1,mo=!1,Oo=0,d0=0;function ge(){throw Error(R(321))}function Ic(t,e){if(e===null)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!nt(t[n],e[n]))return!1;return!0}function Mc(t,e,n,r,o,i){if(gn=i,Q=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,Wi.current=t===null||t.memoizedState===null?y0:h0,t=n(r,o),mo){i=0;do{if(mo=!1,Oo=0,25<=i)throw Error(R(301));i+=1,ae=ie=null,e.updateQueue=null,Wi.current=v0,t=n(r,o)}while(mo)}if(Wi.current=vs,e=ie!==null&&ie.next!==null,gn=0,ae=ie=Q=null,hs=!1,e)throw Error(R(300));return t}function Lc(){var t=Oo!==0;return Oo=0,t}function lt(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return ae===null?Q.memoizedState=ae=t:ae=ae.next=t,ae}function je(){if(ie===null){var t=Q.alternate;t=t!==null?t.memoizedState:null}else t=ie.next;var e=ae===null?Q.memoizedState:ae.next;if(e!==null)ae=e,ie=t;else{if(t===null)throw Error(R(310));ie=t,t={memoizedState:ie.memoizedState,baseState:ie.baseState,baseQueue:ie.baseQueue,queue:ie.queue,next:null},ae===null?Q.memoizedState=ae=t:ae=ae.next=t}return ae}function Io(t,e){return typeof e=="function"?e(t):e}function su(t){var e=je(),n=e.queue;if(n===null)throw Error(R(311));n.lastRenderedReducer=t;var r=ie,o=r.baseQueue,i=n.pending;if(i!==null){if(o!==null){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(o!==null){i=o.next,r=r.baseState;var a=s=null,l=null,c=i;do{var f=c.lane;if((gn&f)===f)l!==null&&(l=l.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:t(r,c.action);else{var y={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};l===null?(a=l=y,s=r):l=l.next=y,Q.lanes|=f,yn|=f}c=c.next}while(c!==null&&c!==i);l===null?s=r:l.next=a,nt(r,e.memoizedState)||(xe=!0),e.memoizedState=r,e.baseState=s,e.baseQueue=l,n.lastRenderedState=r}if(t=n.interleaved,t!==null){o=t;do i=o.lane,Q.lanes|=i,yn|=i,o=o.next;while(o!==t)}else o===null&&(n.lanes=0);return[e.memoizedState,n.dispatch]}function au(t){var e=je(),n=e.queue;if(n===null)throw Error(R(311));n.lastRenderedReducer=t;var r=n.dispatch,o=n.pending,i=e.memoizedState;if(o!==null){n.pending=null;var s=o=o.next;do i=t(i,s.action),s=s.next;while(s!==o);nt(i,e.memoizedState)||(xe=!0),e.memoizedState=i,e.baseQueue===null&&(e.baseState=i),n.lastRenderedState=i}return[i,r]}function gg(){}function yg(t,e){var n=Q,r=je(),o=e(),i=!nt(r.memoizedState,o);if(i&&(r.memoizedState=o,xe=!0),r=r.queue,Bc(wg.bind(null,n,r,t),[t]),r.getSnapshot!==e||i||ae!==null&&ae.memoizedState.tag&1){if(n.flags|=2048,Mo(9,vg.bind(null,n,r,o,e),void 0,null),le===null)throw Error(R(349));gn&30||hg(n,e,o)}return o}function hg(t,e,n){t.flags|=16384,t={getSnapshot:e,value:n},e=Q.updateQueue,e===null?(e={lastEffect:null,stores:null},Q.updateQueue=e,e.stores=[t]):(n=e.stores,n===null?e.stores=[t]:n.push(t))}function vg(t,e,n,r){e.value=n,e.getSnapshot=r,Sg(e)&&Tg(t)}function wg(t,e,n){return n(function(){Sg(e)&&Tg(t)})}function Sg(t){var e=t.getSnapshot;t=t.value;try{var n=e();return!nt(t,n)}catch{return!0}}function Tg(t){var e=Pt(t,1);e!==null&&tt(e,t,1,-1)}function Vm(t){var e=lt();return typeof t=="function"&&(t=t()),e.memoizedState=e.baseState=t,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Io,lastRenderedState:t},e.queue=t,t=t.dispatch=g0.bind(null,Q,t),[e.memoizedState,t]}function Mo(t,e,n,r){return t={tag:t,create:e,destroy:n,deps:r,next:null},e=Q.updateQueue,e===null?(e={lastEffect:null,stores:null},Q.updateQueue=e,e.lastEffect=t.next=t):(n=e.lastEffect,n===null?e.lastEffect=t.next=t:(r=n.next,n.next=t,t.next=r,e.lastEffect=t)),t}function Pg(){return je().memoizedState}function Yi(t,e,n,r){var o=lt();Q.flags|=t,o.memoizedState=Mo(1|e,n,void 0,r===void 0?null:r)}function Is(t,e,n,r){var o=je();r=r===void 0?null:r;var i=void 0;if(ie!==null){var s=ie.memoizedState;if(i=s.destroy,r!==null&&Ic(r,s.deps)){o.memoizedState=Mo(e,n,i,r);return}}Q.flags|=t,o.memoizedState=Mo(1|e,n,i,r)}function Gm(t,e){return Yi(8390656,8,t,e)}function Bc(t,e){return Is(2048,8,t,e)}function kg(t,e){return Is(4,2,t,e)}function Rg(t,e){return Is(4,4,t,e)}function Eg(t,e){if(typeof e=="function")return t=t(),e(t),function(){e(null)};if(e!=null)return t=t(),e.current=t,function(){e.current=null}}function xg(t,e,n){return n=n!=null?n.concat([t]):null,Is(4,4,Eg.bind(null,e,t),n)}function Fc(){}function Cg(t,e){var n=je();e=e===void 0?null:e;var r=n.memoizedState;return r!==null&&e!==null&&Ic(e,r[1])?r[0]:(n.memoizedState=[t,e],t)}function Ng(t,e){var n=je();e=e===void 0?null:e;var r=n.memoizedState;return r!==null&&e!==null&&Ic(e,r[1])?r[0]:(t=t(),n.memoizedState=[t,e],t)}function Jg(t,e,n){return gn&21?(nt(n,e)||(n=Mp(),Q.lanes|=n,yn|=n,t.baseState=!0),e):(t.baseState&&(t.baseState=!1,xe=!0),t.memoizedState=n)}function m0(t,e){var n=D;D=n!==0&&4>n?n:4,t(!0);var r=iu.transition;iu.transition={};try{t(!1),e()}finally{D=n,iu.transition=r}}function Og(){return je().memoizedState}function p0(t,e,n){var r=jt(t);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Ig(t))Mg(e,n);else if(n=lg(t,e,n,r),n!==null){var o=Pe();tt(n,t,r,o),Lg(n,e,r)}}function g0(t,e,n){var r=jt(t),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ig(t))Mg(e,o);else{var i=t.alternate;if(t.lanes===0&&(i===null||i.lanes===0)&&(i=e.lastRenderedReducer,i!==null))try{var s=e.lastRenderedState,a=i(s,n);if(o.hasEagerState=!0,o.eagerState=a,nt(a,s)){var l=e.interleaved;l===null?(o.next=o,xc(e)):(o.next=l.next,l.next=o),e.interleaved=o;return}}catch{}finally{}n=lg(t,e,o,r),n!==null&&(o=Pe(),tt(n,t,r,o),Lg(n,e,r))}}function Ig(t){var e=t.alternate;return t===Q||e!==null&&e===Q}function Mg(t,e){mo=hs=!0;var n=t.pending;n===null?e.next=e:(e.next=n.next,n.next=e),t.pending=e}function Lg(t,e,n){if(n&4194240){var r=e.lanes;r&=t.pendingLanes,n|=r,e.lanes=n,dc(t,n)}}var vs={readContext:ze,useCallback:ge,useContext:ge,useEffect:ge,useImperativeHandle:ge,useInsertionEffect:ge,useLayoutEffect:ge,useMemo:ge,useReducer:ge,useRef:ge,useState:ge,useDebugValue:ge,useDeferredValue:ge,useTransition:ge,useMutableSource:ge,useSyncExternalStore:ge,useId:ge,unstable_isNewReconciler:!1},y0={readContext:ze,useCallback:function(t,e){return lt().memoizedState=[t,e===void 0?null:e],t},useContext:ze,useEffect:Gm,useImperativeHandle:function(t,e,n){return n=n!=null?n.concat([t]):null,Yi(4194308,4,Eg.bind(null,e,t),n)},useLayoutEffect:function(t,e){return Yi(4194308,4,t,e)},useInsertionEffect:function(t,e){return Yi(4,2,t,e)},useMemo:function(t,e){var n=lt();return e=e===void 0?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var r=lt();return e=n!==void 0?n(e):e,r.memoizedState=r.baseState=e,t={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:t,lastRenderedState:e},r.queue=t,t=t.dispatch=p0.bind(null,Q,t),[r.memoizedState,t]},useRef:function(t){var e=lt();return t={current:t},e.memoizedState=t},useState:Vm,useDebugValue:Fc,useDeferredValue:function(t){return lt().memoizedState=t},useTransition:function(){var t=Vm(!1),e=t[0];return t=m0.bind(null,t[1]),lt().memoizedState=t,[e,t]},useMutableSource:function(){},useSyncExternalStore:function(t,e,n){var r=Q,o=lt();if(W){if(n===void 0)throw Error(R(407));n=n()}else{if(n=e(),le===null)throw Error(R(349));gn&30||hg(r,e,n)}o.memoizedState=n;var i={value:n,getSnapshot:e};return o.queue=i,Gm(wg.bind(null,r,i,t),[t]),r.flags|=2048,Mo(9,vg.bind(null,r,i,n,e),void 0,null),n},useId:function(){var t=lt(),e=le.identifierPrefix;if(W){var n=vt,r=ht;n=(r&~(1<<32-et(r)-1)).toString(32)+n,e=":"+e+"R"+n,n=Oo++,0<n&&(e+="H"+n.toString(32)),e+=":"}else n=d0++,e=":"+e+"r"+n.toString(32)+":";return t.memoizedState=e},unstable_isNewReconciler:!1},h0={readContext:ze,useCallback:Cg,useContext:ze,useEffect:Bc,useImperativeHandle:xg,useInsertionEffect:kg,useLayoutEffect:Rg,useMemo:Ng,useReducer:su,useRef:Pg,useState:function(){return su(Io)},useDebugValue:Fc,useDeferredValue:function(t){var e=je();return Jg(e,ie.memoizedState,t)},useTransition:function(){var t=su(Io)[0],e=je().memoizedState;return[t,e]},useMutableSource:gg,useSyncExternalStore:yg,useId:Og,unstable_isNewReconciler:!1},v0={readContext:ze,useCallback:Cg,useContext:ze,useEffect:Bc,useImperativeHandle:xg,useInsertionEffect:kg,useLayoutEffect:Rg,useMemo:Ng,useReducer:au,useRef:Pg,useState:function(){return au(Io)},useDebugValue:Fc,useDeferredValue:function(t){var e=je();return ie===null?e.memoizedState=t:Jg(e,ie.memoizedState,t)},useTransition:function(){var t=au(Io)[0],e=je().memoizedState;return[t,e]},useMutableSource:gg,useSyncExternalStore:yg,useId:Og,unstable_isNewReconciler:!1};function rr(t,e){try{var n="",r=e;do n+=Wv(r),r=r.return;while(r);var o=n}catch(i){o=`
Error generating stack: `+i.message+`
`+i.stack}return{value:t,source:e,stack:o,digest:null}}function lu(t,e,n){return{value:t,source:null,stack:n??null,digest:e??null}}function zu(t,e){try{console.error(e.value)}catch(n){setTimeout(function(){throw n})}}var w0=typeof WeakMap=="function"?WeakMap:Map;function Bg(t,e,n){n=wt(-1,n),n.tag=3,n.payload={element:null};var r=e.value;return n.callback=function(){Ss||(Ss=!0,ec=r),zu(t,e)},n}function Fg(t,e,n){n=wt(-1,n),n.tag=3;var r=t.type.getDerivedStateFromError;if(typeof r=="function"){var o=e.value;n.payload=function(){return r(o)},n.callback=function(){zu(t,e)}}var i=t.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(n.callback=function(){zu(t,e),typeof r!="function"&&(zt===null?zt=new Set([this]):zt.add(this));var s=e.stack;this.componentDidCatch(e.value,{componentStack:s!==null?s:""})}),n}function zm(t,e,n){var r=t.pingCache;if(r===null){r=t.pingCache=new w0;var o=new Set;r.set(e,o)}else o=r.get(e),o===void 0&&(o=new Set,r.set(e,o));o.has(n)||(o.add(n),t=L0.bind(null,t,e,n),e.then(t,t))}function jm(t){do{var e;if((e=t.tag===13)&&(e=t.memoizedState,e=e!==null?e.dehydrated!==null:!0),e)return t;t=t.return}while(t!==null);return null}function $m(t,e,n,r,o){return t.mode&1?(t.flags|=65536,t.lanes=o,t):(t===e?t.flags|=65536:(t.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(e=wt(-1,1),e.tag=2,Gt(n,e,1))),n.lanes|=1),t)}var S0=Rt.ReactCurrentOwner,xe=!1;function Te(t,e,n,r){e.child=t===null?mg(e,null,n,r):tr(e,t.child,n,r)}function Hm(t,e,n,r,o){n=n.render;var i=e.ref;return Kn(e,o),r=Mc(t,e,n,r,i,o),n=Lc(),t!==null&&!xe?(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~o,kt(t,e,o)):(W&&n&&Sc(e),e.flags|=1,Te(t,e,r,o),e.child)}function Wm(t,e,n,r,o){if(t===null){var i=n.type;return typeof i=="function"&&!Gc(i)&&i.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(e.tag=15,e.type=i,Ag(t,e,i,r,o)):(t=Zi(n.type,null,r,e,e.mode,o),t.ref=e.ref,t.return=e,e.child=t)}if(i=t.child,!(t.lanes&o)){var s=i.memoizedProps;if(n=n.compare,n=n!==null?n:Ro,n(s,r)&&t.ref===e.ref)return kt(t,e,o)}return e.flags|=1,t=$t(i,r),t.ref=e.ref,t.return=e,e.child=t}function Ag(t,e,n,r,o){if(t!==null){var i=t.memoizedProps;if(Ro(i,r)&&t.ref===e.ref)if(xe=!1,e.pendingProps=r=i,(t.lanes&o)!==0)t.flags&131072&&(xe=!0);else return e.lanes=t.lanes,kt(t,e,o)}return ju(t,e,n,r,o)}function Ug(t,e,n){var r=e.pendingProps,o=r.children,i=t!==null?t.memoizedState:null;if(r.mode==="hidden")if(!(e.mode&1))e.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(jn,Ie),Ie|=n;else{if(!(n&1073741824))return t=i!==null?i.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t,cachePool:null,transitions:null},e.updateQueue=null,G(jn,Ie),Ie|=t,null;e.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=i!==null?i.baseLanes:n,G(jn,Ie),Ie|=r}else i!==null?(r=i.baseLanes|n,e.memoizedState=null):r=n,G(jn,Ie),Ie|=r;return Te(t,e,o,n),e.child}function qg(t,e){var n=e.ref;(t===null&&n!==null||t!==null&&t.ref!==n)&&(e.flags|=512,e.flags|=2097152)}function ju(t,e,n,r,o){var i=Ne(n)?mn:ve.current;return i=Zn(e,i),Kn(e,o),n=Mc(t,e,n,r,i,o),r=Lc(),t!==null&&!xe?(e.updateQueue=t.updateQueue,e.flags&=-2053,t.lanes&=~o,kt(t,e,o)):(W&&r&&Sc(e),e.flags|=1,Te(t,e,n,o),e.child)}function Ym(t,e,n,r,o){if(Ne(n)){var i=!0;cs(e)}else i=!1;if(Kn(e,o),e.stateNode===null)Ki(t,e),fg(e,n,r),Gu(e,n,r,o),r=!0;else if(t===null){var s=e.stateNode,a=e.memoizedProps;s.props=a;var l=s.context,c=n.contextType;typeof c=="object"&&c!==null?c=ze(c):(c=Ne(n)?mn:ve.current,c=Zn(e,c));var f=n.getDerivedStateFromProps,y=typeof f=="function"||typeof s.getSnapshotBeforeUpdate=="function";y||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(a!==r||l!==c)&&Dm(e,s,r,c),Bt=!1;var m=e.memoizedState;s.state=m,gs(e,r,s,o),l=e.memoizedState,a!==r||m!==l||Ce.current||Bt?(typeof f=="function"&&(Vu(e,n,f,r),l=e.memoizedState),(a=Bt||_m(e,n,a,r,m,l,c))?(y||typeof s.UNSAFE_componentWillMount!="function"&&typeof s.componentWillMount!="function"||(typeof s.componentWillMount=="function"&&s.componentWillMount(),typeof s.UNSAFE_componentWillMount=="function"&&s.UNSAFE_componentWillMount()),typeof s.componentDidMount=="function"&&(e.flags|=4194308)):(typeof s.componentDidMount=="function"&&(e.flags|=4194308),e.memoizedProps=r,e.memoizedState=l),s.props=r,s.state=l,s.context=c,r=a):(typeof s.componentDidMount=="function"&&(e.flags|=4194308),r=!1)}else{s=e.stateNode,ug(t,e),a=e.memoizedProps,c=e.type===e.elementType?a:Qe(e.type,a),s.props=c,y=e.pendingProps,m=s.context,l=n.contextType,typeof l=="object"&&l!==null?l=ze(l):(l=Ne(n)?mn:ve.current,l=Zn(e,l));var p=n.getDerivedStateFromProps;(f=typeof p=="function"||typeof s.getSnapshotBeforeUpdate=="function")||typeof s.UNSAFE_componentWillReceiveProps!="function"&&typeof s.componentWillReceiveProps!="function"||(a!==y||m!==l)&&Dm(e,s,r,l),Bt=!1,m=e.memoizedState,s.state=m,gs(e,r,s,o);var S=e.memoizedState;a!==y||m!==S||Ce.current||Bt?(typeof p=="function"&&(Vu(e,n,p,r),S=e.memoizedState),(c=Bt||_m(e,n,c,r,m,S,l)||!1)?(f||typeof s.UNSAFE_componentWillUpdate!="function"&&typeof s.componentWillUpdate!="function"||(typeof s.componentWillUpdate=="function"&&s.componentWillUpdate(r,S,l),typeof s.UNSAFE_componentWillUpdate=="function"&&s.UNSAFE_componentWillUpdate(r,S,l)),typeof s.componentDidUpdate=="function"&&(e.flags|=4),typeof s.getSnapshotBeforeUpdate=="function"&&(e.flags|=1024)):(typeof s.componentDidUpdate!="function"||a===t.memoizedProps&&m===t.memoizedState||(e.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||a===t.memoizedProps&&m===t.memoizedState||(e.flags|=1024),e.memoizedProps=r,e.memoizedState=S),s.props=r,s.state=S,s.context=l,r=c):(typeof s.componentDidUpdate!="function"||a===t.memoizedProps&&m===t.memoizedState||(e.flags|=4),typeof s.getSnapshotBeforeUpdate!="function"||a===t.memoizedProps&&m===t.memoizedState||(e.flags|=1024),r=!1)}return $u(t,e,n,r,i,o)}function $u(t,e,n,r,o,i){qg(t,e);var s=(e.flags&128)!==0;if(!r&&!s)return o&&Bm(e,n,!1),kt(t,e,i);r=e.stateNode,S0.current=e;var a=s&&typeof n.getDerivedStateFromError!="function"?null:r.render();return e.flags|=1,t!==null&&s?(e.child=tr(e,t.child,null,i),e.child=tr(e,null,a,i)):Te(t,e,a,i),e.memoizedState=r.state,o&&Bm(e,n,!0),e.child}function _g(t){var e=t.stateNode;e.pendingContext?Lm(t,e.pendingContext,e.pendingContext!==e.context):e.context&&Lm(t,e.context,!1),Nc(t,e.containerInfo)}function Km(t,e,n,r,o){return er(),Pc(o),e.flags|=256,Te(t,e,n,r),e.child}var Hu={dehydrated:null,treeContext:null,retryLane:0};function Wu(t){return{baseLanes:t,cachePool:null,transitions:null}}function Dg(t,e,n){var r=e.pendingProps,o=K.current,i=!1,s=(e.flags&128)!==0,a;if((a=s)||(a=t!==null&&t.memoizedState===null?!1:(o&2)!==0),a?(i=!0,e.flags&=-129):(t===null||t.memoizedState!==null)&&(o|=1),G(K,o&1),t===null)return Du(e),t=e.memoizedState,t!==null&&(t=t.dehydrated,t!==null)?(e.mode&1?t.data==="$!"?e.lanes=8:e.lanes=1073741824:e.lanes=1,null):(s=r.children,t=r.fallback,i?(r=e.mode,i=e.child,s={mode:"hidden",children:s},!(r&1)&&i!==null?(i.childLanes=0,i.pendingProps=s):i=Bs(s,r,0,null),t=dn(t,r,n,null),i.return=e,t.return=e,i.sibling=t,e.child=i,e.child.memoizedState=Wu(n),e.memoizedState=Hu,t):Ac(e,s));if(o=t.memoizedState,o!==null&&(a=o.dehydrated,a!==null))return T0(t,e,s,r,a,o,n);if(i){i=r.fallback,s=e.mode,o=t.child,a=o.sibling;var l={mode:"hidden",children:r.children};return!(s&1)&&e.child!==o?(r=e.child,r.childLanes=0,r.pendingProps=l,e.deletions=null):(r=$t(o,l),r.subtreeFlags=o.subtreeFlags&14680064),a!==null?i=$t(a,i):(i=dn(i,s,n,null),i.flags|=2),i.return=e,r.return=e,r.sibling=i,e.child=r,r=i,i=e.child,s=t.child.memoizedState,s=s===null?Wu(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},i.memoizedState=s,i.childLanes=t.childLanes&~n,e.memoizedState=Hu,r}return i=t.child,t=i.sibling,r=$t(i,{mode:"visible",children:r.children}),!(e.mode&1)&&(r.lanes=n),r.return=e,r.sibling=null,t!==null&&(n=e.deletions,n===null?(e.deletions=[t],e.flags|=16):n.push(t)),e.child=r,e.memoizedState=null,r}function Ac(t,e){return e=Bs({mode:"visible",children:e},t.mode,0,null),e.return=t,t.child=e}function bi(t,e,n,r){return r!==null&&Pc(r),tr(e,t.child,null,n),t=Ac(e,e.pendingProps.children),t.flags|=2,e.memoizedState=null,t}function T0(t,e,n,r,o,i,s){if(n)return e.flags&256?(e.flags&=-257,r=lu(Error(R(422))),bi(t,e,s,r)):e.memoizedState!==null?(e.child=t.child,e.flags|=128,null):(i=r.fallback,o=e.mode,r=Bs({mode:"visible",children:r.children},o,0,null),i=dn(i,o,s,null),i.flags|=2,r.return=e,i.return=e,r.sibling=i,e.child=r,e.mode&1&&tr(e,t.child,null,s),e.child.memoizedState=Wu(s),e.memoizedState=Hu,i);if(!(e.mode&1))return bi(t,e,s,null);if(o.data==="$!"){if(r=o.nextSibling&&o.nextSibling.dataset,r)var a=r.dgst;return r=a,i=Error(R(419)),r=lu(i,r,void 0),bi(t,e,s,r)}if(a=(s&t.childLanes)!==0,xe||a){if(r=le,r!==null){switch(s&-s){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}o=o&(r.suspendedLanes|s)?0:o,o!==0&&o!==i.retryLane&&(i.retryLane=o,Pt(t,o),tt(r,t,o,-1))}return Vc(),r=lu(Error(R(421))),bi(t,e,s,r)}return o.data==="$?"?(e.flags|=128,e.child=t.child,e=B0.bind(null,t),o._reactRetry=e,null):(t=i.treeContext,Me=Vt(o.nextSibling),Le=e,W=!0,Ze=null,t!==null&&(De[be++]=ht,De[be++]=vt,De[be++]=pn,ht=t.id,vt=t.overflow,pn=e),e=Ac(e,r.children),e.flags|=4096,e)}function Qm(t,e,n){t.lanes|=e;var r=t.alternate;r!==null&&(r.lanes|=e),bu(t.return,e,n)}function uu(t,e,n,r,o){var i=t.memoizedState;i===null?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=e,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function bg(t,e,n){var r=e.pendingProps,o=r.revealOrder,i=r.tail;if(Te(t,e,r.children,n),r=K.current,r&2)r=r&1|2,e.flags|=128;else{if(t!==null&&t.flags&128)e:for(t=e.child;t!==null;){if(t.tag===13)t.memoizedState!==null&&Qm(t,n,e);else if(t.tag===19)Qm(t,n,e);else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break e;for(;t.sibling===null;){if(t.return===null||t.return===e)break e;t=t.return}t.sibling.return=t.return,t=t.sibling}r&=1}if(G(K,r),!(e.mode&1))e.memoizedState=null;else switch(o){case"forwards":for(n=e.child,o=null;n!==null;)t=n.alternate,t!==null&&ys(t)===null&&(o=n),n=n.sibling;n=o,n===null?(o=e.child,e.child=null):(o=n.sibling,n.sibling=null),uu(e,!1,o,n,i);break;case"backwards":for(n=null,o=e.child,e.child=null;o!==null;){if(t=o.alternate,t!==null&&ys(t)===null){e.child=o;break}t=o.sibling,o.sibling=n,n=o,o=t}uu(e,!0,n,null,i);break;case"together":uu(e,!1,null,null,void 0);break;default:e.memoizedState=null}return e.child}function Ki(t,e){!(e.mode&1)&&t!==null&&(t.alternate=null,e.alternate=null,e.flags|=2)}function kt(t,e,n){if(t!==null&&(e.dependencies=t.dependencies),yn|=e.lanes,!(n&e.childLanes))return null;if(t!==null&&e.child!==t.child)throw Error(R(153));if(e.child!==null){for(t=e.child,n=$t(t,t.pendingProps),e.child=n,n.return=e;t.sibling!==null;)t=t.sibling,n=n.sibling=$t(t,t.pendingProps),n.return=e;n.sibling=null}return e.child}function P0(t,e,n){switch(e.tag){case 3:_g(e),er();break;case 5:pg(e);break;case 1:Ne(e.type)&&cs(e);break;case 4:Nc(e,e.stateNode.containerInfo);break;case 10:var r=e.type._context,o=e.memoizedProps.value;G(ms,r._currentValue),r._currentValue=o;break;case 13:if(r=e.memoizedState,r!==null)return r.dehydrated!==null?(G(K,K.current&1),e.flags|=128,null):n&e.child.childLanes?Dg(t,e,n):(G(K,K.current&1),t=kt(t,e,n),t!==null?t.sibling:null);G(K,K.current&1);break;case 19:if(r=(n&e.childLanes)!==0,t.flags&128){if(r)return bg(t,e,n);e.flags|=128}if(o=e.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),G(K,K.current),r)break;return null;case 22:case 23:return e.lanes=0,Ug(t,e,n)}return kt(t,e,n)}var Vg,Yu,Gg,zg;Vg=function(t,e){for(var n=e.child;n!==null;){if(n.tag===5||n.tag===6)t.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===e)break;for(;n.sibling===null;){if(n.return===null||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Yu=function(){};Gg=function(t,e,n,r){var o=t.memoizedProps;if(o!==r){t=e.stateNode,cn(ft.current);var i=null;switch(n){case"input":o=hu(t,o),r=hu(t,r),i=[];break;case"select":o=X({},o,{value:void 0}),r=X({},r,{value:void 0}),i=[];break;case"textarea":o=Su(t,o),r=Su(t,r),i=[];break;default:typeof o.onClick!="function"&&typeof r.onClick=="function"&&(t.onclick=ls)}Pu(n,r);var s;n=null;for(c in o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&o[c]!=null)if(c==="style"){var a=o[c];for(s in a)a.hasOwnProperty(s)&&(n||(n={}),n[s]="")}else c!=="dangerouslySetInnerHTML"&&c!=="children"&&c!=="suppressContentEditableWarning"&&c!=="suppressHydrationWarning"&&c!=="autoFocus"&&(ho.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var l=r[c];if(a=o?.[c],r.hasOwnProperty(c)&&l!==a&&(l!=null||a!=null))if(c==="style")if(a){for(s in a)!a.hasOwnProperty(s)||l&&l.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in l)l.hasOwnProperty(s)&&a[s]!==l[s]&&(n||(n={}),n[s]=l[s])}else n||(i||(i=[]),i.push(c,n)),n=l;else c==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,a=a?a.__html:void 0,l!=null&&a!==l&&(i=i||[]).push(c,l)):c==="children"?typeof l!="string"&&typeof l!="number"||(i=i||[]).push(c,""+l):c!=="suppressContentEditableWarning"&&c!=="suppressHydrationWarning"&&(ho.hasOwnProperty(c)?(l!=null&&c==="onScroll"&&z("scroll",t),i||a===l||(i=[])):(i=i||[]).push(c,l))}n&&(i=i||[]).push("style",n);var c=i;(e.updateQueue=c)&&(e.flags|=4)}};zg=function(t,e,n,r){n!==r&&(e.flags|=4)};function eo(t,e){if(!W)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;e!==null;)e.alternate!==null&&(n=e),e=e.sibling;n===null?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?e||t.tail===null?t.tail=null:t.tail.sibling=null:r.sibling=null}}function ye(t){var e=t.alternate!==null&&t.alternate.child===t.child,n=0,r=0;if(e)for(var o=t.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags&14680064,r|=o.flags&14680064,o.return=t,o=o.sibling;else for(o=t.child;o!==null;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=t,o=o.sibling;return t.subtreeFlags|=r,t.childLanes=n,e}function k0(t,e,n){var r=e.pendingProps;switch(Tc(e),e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ye(e),null;case 1:return Ne(e.type)&&us(),ye(e),null;case 3:return r=e.stateNode,nr(),j(Ce),j(ve),Oc(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(t===null||t.child===null)&&(_i(e)?e.flags|=4:t===null||t.memoizedState.isDehydrated&&!(e.flags&256)||(e.flags|=1024,Ze!==null&&(rc(Ze),Ze=null))),Yu(t,e),ye(e),null;case 5:Jc(e);var o=cn(Jo.current);if(n=e.type,t!==null&&e.stateNode!=null)Gg(t,e,n,r,o),t.ref!==e.ref&&(e.flags|=512,e.flags|=2097152);else{if(!r){if(e.stateNode===null)throw Error(R(166));return ye(e),null}if(t=cn(ft.current),_i(e)){r=e.stateNode,n=e.type;var i=e.memoizedProps;switch(r[ut]=e,r[Co]=i,t=(e.mode&1)!==0,n){case"dialog":z("cancel",r),z("close",r);break;case"iframe":case"object":case"embed":z("load",r);break;case"video":case"audio":for(o=0;o<so.length;o++)z(so[o],r);break;case"source":z("error",r);break;case"img":case"image":case"link":z("error",r),z("load",r);break;case"details":z("toggle",r);break;case"input":im(r,i),z("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},z("invalid",r);break;case"textarea":am(r,i),z("invalid",r)}Pu(n,i),o=null;for(var s in i)if(i.hasOwnProperty(s)){var a=i[s];s==="children"?typeof a=="string"?r.textContent!==a&&(i.suppressHydrationWarning!==!0&&qi(r.textContent,a,t),o=["children",a]):typeof a=="number"&&r.textContent!==""+a&&(i.suppressHydrationWarning!==!0&&qi(r.textContent,a,t),o=["children",""+a]):ho.hasOwnProperty(s)&&a!=null&&s==="onScroll"&&z("scroll",r)}switch(n){case"input":xi(r),sm(r,i,!0);break;case"textarea":xi(r),lm(r);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(r.onclick=ls)}r=o,e.updateQueue=r,r!==null&&(e.flags|=4)}else{s=o.nodeType===9?o:o.ownerDocument,t==="http://www.w3.org/1999/xhtml"&&(t=hp(n)),t==="http://www.w3.org/1999/xhtml"?n==="script"?(t=s.createElement("div"),t.innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):typeof r.is=="string"?t=s.createElement(n,{is:r.is}):(t=s.createElement(n),n==="select"&&(s=t,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):t=s.createElementNS(t,n),t[ut]=e,t[Co]=r,Vg(t,e,!1,!1),e.stateNode=t;e:{switch(s=ku(n,r),n){case"dialog":z("cancel",t),z("close",t),o=r;break;case"iframe":case"object":case"embed":z("load",t),o=r;break;case"video":case"audio":for(o=0;o<so.length;o++)z(so[o],t);o=r;break;case"source":z("error",t),o=r;break;case"img":case"image":case"link":z("error",t),z("load",t),o=r;break;case"details":z("toggle",t),o=r;break;case"input":im(t,r),o=hu(t,r),z("invalid",t);break;case"option":o=r;break;case"select":t._wrapperState={wasMultiple:!!r.multiple},o=X({},r,{value:void 0}),z("invalid",t);break;case"textarea":am(t,r),o=Su(t,r),z("invalid",t);break;default:o=r}Pu(n,o),a=o;for(i in a)if(a.hasOwnProperty(i)){var l=a[i];i==="style"?Sp(t,l):i==="dangerouslySetInnerHTML"?(l=l?l.__html:void 0,l!=null&&vp(t,l)):i==="children"?typeof l=="string"?(n!=="textarea"||l!=="")&&vo(t,l):typeof l=="number"&&vo(t,""+l):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(ho.hasOwnProperty(i)?l!=null&&i==="onScroll"&&z("scroll",t):l!=null&&sc(t,i,l,s))}switch(n){case"input":xi(t),sm(t,r,!1);break;case"textarea":xi(t),lm(t);break;case"option":r.value!=null&&t.setAttribute("value",""+Ht(r.value));break;case"select":t.multiple=!!r.multiple,i=r.value,i!=null?$n(t,!!r.multiple,i,!1):r.defaultValue!=null&&$n(t,!!r.multiple,r.defaultValue,!0);break;default:typeof o.onClick=="function"&&(t.onclick=ls)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(e.flags|=4)}e.ref!==null&&(e.flags|=512,e.flags|=2097152)}return ye(e),null;case 6:if(t&&e.stateNode!=null)zg(t,e,t.memoizedProps,r);else{if(typeof r!="string"&&e.stateNode===null)throw Error(R(166));if(n=cn(Jo.current),cn(ft.current),_i(e)){if(r=e.stateNode,n=e.memoizedProps,r[ut]=e,(i=r.nodeValue!==n)&&(t=Le,t!==null))switch(t.tag){case 3:qi(r.nodeValue,n,(t.mode&1)!==0);break;case 5:t.memoizedProps.suppressHydrationWarning!==!0&&qi(r.nodeValue,n,(t.mode&1)!==0)}i&&(e.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[ut]=e,e.stateNode=r}return ye(e),null;case 13:if(j(K),r=e.memoizedState,t===null||t.memoizedState!==null&&t.memoizedState.dehydrated!==null){if(W&&Me!==null&&e.mode&1&&!(e.flags&128))ag(),er(),e.flags|=98560,i=!1;else if(i=_i(e),r!==null&&r.dehydrated!==null){if(t===null){if(!i)throw Error(R(318));if(i=e.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(R(317));i[ut]=e}else er(),!(e.flags&128)&&(e.memoizedState=null),e.flags|=4;ye(e),i=!1}else Ze!==null&&(rc(Ze),Ze=null),i=!0;if(!i)return e.flags&65536?e:null}return e.flags&128?(e.lanes=n,e):(r=r!==null,r!==(t!==null&&t.memoizedState!==null)&&r&&(e.child.flags|=8192,e.mode&1&&(t===null||K.current&1?se===0&&(se=3):Vc())),e.updateQueue!==null&&(e.flags|=4),ye(e),null);case 4:return nr(),Yu(t,e),t===null&&Eo(e.stateNode.containerInfo),ye(e),null;case 10:return Ec(e.type._context),ye(e),null;case 17:return Ne(e.type)&&us(),ye(e),null;case 19:if(j(K),i=e.memoizedState,i===null)return ye(e),null;if(r=(e.flags&128)!==0,s=i.rendering,s===null)if(r)eo(i,!1);else{if(se!==0||t!==null&&t.flags&128)for(t=e.child;t!==null;){if(s=ys(t),s!==null){for(e.flags|=128,eo(i,!1),r=s.updateQueue,r!==null&&(e.updateQueue=r,e.flags|=4),e.subtreeFlags=0,r=n,n=e.child;n!==null;)i=n,t=r,i.flags&=14680066,s=i.alternate,s===null?(i.childLanes=0,i.lanes=t,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,t=s.dependencies,i.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return G(K,K.current&1|2),e.child}t=t.sibling}i.tail!==null&&ee()>or&&(e.flags|=128,r=!0,eo(i,!1),e.lanes=4194304)}else{if(!r)if(t=ys(s),t!==null){if(e.flags|=128,r=!0,n=t.updateQueue,n!==null&&(e.updateQueue=n,e.flags|=4),eo(i,!0),i.tail===null&&i.tailMode==="hidden"&&!s.alternate&&!W)return ye(e),null}else 2*ee()-i.renderingStartTime>or&&n!==1073741824&&(e.flags|=128,r=!0,eo(i,!1),e.lanes=4194304);i.isBackwards?(s.sibling=e.child,e.child=s):(n=i.last,n!==null?n.sibling=s:e.child=s,i.last=s)}return i.tail!==null?(e=i.tail,i.rendering=e,i.tail=e.sibling,i.renderingStartTime=ee(),e.sibling=null,n=K.current,G(K,r?n&1|2:n&1),e):(ye(e),null);case 22:case 23:return bc(),r=e.memoizedState!==null,t!==null&&t.memoizedState!==null!==r&&(e.flags|=8192),r&&e.mode&1?Ie&1073741824&&(ye(e),e.subtreeFlags&6&&(e.flags|=8192)):ye(e),null;case 24:return null;case 25:return null}throw Error(R(156,e.tag))}function R0(t,e){switch(Tc(e),e.tag){case 1:return Ne(e.type)&&us(),t=e.flags,t&65536?(e.flags=t&-65537|128,e):null;case 3:return nr(),j(Ce),j(ve),Oc(),t=e.flags,t&65536&&!(t&128)?(e.flags=t&-65537|128,e):null;case 5:return Jc(e),null;case 13:if(j(K),t=e.memoizedState,t!==null&&t.dehydrated!==null){if(e.alternate===null)throw Error(R(340));er()}return t=e.flags,t&65536?(e.flags=t&-65537|128,e):null;case 19:return j(K),null;case 4:return nr(),null;case 10:return Ec(e.type._context),null;case 22:case 23:return bc(),null;case 24:return null;default:return null}}var Vi=!1,he=!1,E0=typeof WeakSet=="function"?WeakSet:Set,x=null;function zn(t,e){var n=t.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){Z(t,e,r)}else n.current=null}function Ku(t,e,n){try{n()}catch(r){Z(t,e,r)}}var Xm=!1;function x0(t,e){if(Lu=is,t=Wp(),wc(t)){if("selectionStart"in t)var n={start:t.selectionStart,end:t.selectionEnd};else e:{n=(n=t.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch{n=null;break e}var s=0,a=-1,l=-1,c=0,f=0,y=t,m=null;t:for(;;){for(var p;y!==n||o!==0&&y.nodeType!==3||(a=s+o),y!==i||r!==0&&y.nodeType!==3||(l=s+r),y.nodeType===3&&(s+=y.nodeValue.length),(p=y.firstChild)!==null;)m=y,y=p;for(;;){if(y===t)break t;if(m===n&&++c===o&&(a=s),m===i&&++f===r&&(l=s),(p=y.nextSibling)!==null)break;y=m,m=y.parentNode}y=p}n=a===-1||l===-1?null:{start:a,end:l}}else n=null}n=n||{start:0,end:0}}else n=null;for(Bu={focusedElem:t,selectionRange:n},is=!1,x=e;x!==null;)if(e=x,t=e.child,(e.subtreeFlags&1028)!==0&&t!==null)t.return=e,x=t;else for(;x!==null;){e=x;try{var S=e.alternate;if(e.flags&1024)switch(e.tag){case 0:case 11:case 15:break;case 1:if(S!==null){var T=S.memoizedProps,C=S.memoizedState,g=e.stateNode,d=g.getSnapshotBeforeUpdate(e.elementType===e.type?T:Qe(e.type,T),C);g.__reactInternalSnapshotBeforeUpdate=d}break;case 3:var h=e.stateNode.containerInfo;h.nodeType===1?h.textContent="":h.nodeType===9&&h.documentElement&&h.removeChild(h.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(R(163))}}catch(k){Z(e,e.return,k)}if(t=e.sibling,t!==null){t.return=e.return,x=t;break}x=e.return}return S=Xm,Xm=!1,S}function po(t,e,n){var r=e.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var o=r=r.next;do{if((o.tag&t)===t){var i=o.destroy;o.destroy=void 0,i!==void 0&&Ku(e,n,i)}o=o.next}while(o!==r)}}function Ms(t,e){if(e=e.updateQueue,e=e!==null?e.lastEffect:null,e!==null){var n=e=e.next;do{if((n.tag&t)===t){var r=n.create;n.destroy=r()}n=n.next}while(n!==e)}}function Qu(t){var e=t.ref;if(e!==null){var n=t.stateNode;switch(t.tag){case 5:t=n;break;default:t=n}typeof e=="function"?e(t):e.current=t}}function jg(t){var e=t.alternate;e!==null&&(t.alternate=null,jg(e)),t.child=null,t.deletions=null,t.sibling=null,t.tag===5&&(e=t.stateNode,e!==null&&(delete e[ut],delete e[Co],delete e[Uu],delete e[l0],delete e[u0])),t.stateNode=null,t.return=null,t.dependencies=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.stateNode=null,t.updateQueue=null}function $g(t){return t.tag===5||t.tag===3||t.tag===4}function Zm(t){e:for(;;){for(;t.sibling===null;){if(t.return===null||$g(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;t.tag!==5&&t.tag!==6&&t.tag!==18;){if(t.flags&2||t.child===null||t.tag===4)continue e;t.child.return=t,t=t.child}if(!(t.flags&2))return t.stateNode}}function Xu(t,e,n){var r=t.tag;if(r===5||r===6)t=t.stateNode,e?n.nodeType===8?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(n.nodeType===8?(e=n.parentNode,e.insertBefore(t,n)):(e=n,e.appendChild(t)),n=n._reactRootContainer,n!=null||e.onclick!==null||(e.onclick=ls));else if(r!==4&&(t=t.child,t!==null))for(Xu(t,e,n),t=t.sibling;t!==null;)Xu(t,e,n),t=t.sibling}function Zu(t,e,n){var r=t.tag;if(r===5||r===6)t=t.stateNode,e?n.insertBefore(t,e):n.appendChild(t);else if(r!==4&&(t=t.child,t!==null))for(Zu(t,e,n),t=t.sibling;t!==null;)Zu(t,e,n),t=t.sibling}var ce=null,Xe=!1;function Mt(t,e,n){for(n=n.child;n!==null;)Hg(t,e,n),n=n.sibling}function Hg(t,e,n){if(ct&&typeof ct.onCommitFiberUnmount=="function")try{ct.onCommitFiberUnmount(Rs,n)}catch{}switch(n.tag){case 5:he||zn(n,e);case 6:var r=ce,o=Xe;ce=null,Mt(t,e,n),ce=r,Xe=o,ce!==null&&(Xe?(t=ce,n=n.stateNode,t.nodeType===8?t.parentNode.removeChild(n):t.removeChild(n)):ce.removeChild(n.stateNode));break;case 18:ce!==null&&(Xe?(t=ce,n=n.stateNode,t.nodeType===8?nu(t.parentNode,n):t.nodeType===1&&nu(t,n),Po(t)):nu(ce,n.stateNode));break;case 4:r=ce,o=Xe,ce=n.stateNode.containerInfo,Xe=!0,Mt(t,e,n),ce=r,Xe=o;break;case 0:case 11:case 14:case 15:if(!he&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){o=r=r.next;do{var i=o,s=i.destroy;i=i.tag,s!==void 0&&(i&2||i&4)&&Ku(n,e,s),o=o.next}while(o!==r)}Mt(t,e,n);break;case 1:if(!he&&(zn(n,e),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(a){Z(n,e,a)}Mt(t,e,n);break;case 21:Mt(t,e,n);break;case 22:n.mode&1?(he=(r=he)||n.memoizedState!==null,Mt(t,e,n),he=r):Mt(t,e,n);break;default:Mt(t,e,n)}}function ep(t){var e=t.updateQueue;if(e!==null){t.updateQueue=null;var n=t.stateNode;n===null&&(n=t.stateNode=new E0),e.forEach(function(r){var o=F0.bind(null,t,r);n.has(r)||(n.add(r),r.then(o,o))})}}function Ke(t,e){var n=e.deletions;if(n!==null)for(var r=0;r<n.length;r++){var o=n[r];try{var i=t,s=e,a=s;e:for(;a!==null;){switch(a.tag){case 5:ce=a.stateNode,Xe=!1;break e;case 3:ce=a.stateNode.containerInfo,Xe=!0;break e;case 4:ce=a.stateNode.containerInfo,Xe=!0;break e}a=a.return}if(ce===null)throw Error(R(160));Hg(i,s,o),ce=null,Xe=!1;var l=o.alternate;l!==null&&(l.return=null),o.return=null}catch(c){Z(o,e,c)}}if(e.subtreeFlags&12854)for(e=e.child;e!==null;)Wg(e,t),e=e.sibling}function Wg(t,e){var n=t.alternate,r=t.flags;switch(t.tag){case 0:case 11:case 14:case 15:if(Ke(e,t),at(t),r&4){try{po(3,t,t.return),Ms(3,t)}catch(T){Z(t,t.return,T)}try{po(5,t,t.return)}catch(T){Z(t,t.return,T)}}break;case 1:Ke(e,t),at(t),r&512&&n!==null&&zn(n,n.return);break;case 5:if(Ke(e,t),at(t),r&512&&n!==null&&zn(n,n.return),t.flags&32){var o=t.stateNode;try{vo(o,"")}catch(T){Z(t,t.return,T)}}if(r&4&&(o=t.stateNode,o!=null)){var i=t.memoizedProps,s=n!==null?n.memoizedProps:i,a=t.type,l=t.updateQueue;if(t.updateQueue=null,l!==null)try{a==="input"&&i.type==="radio"&&i.name!=null&&gp(o,i),ku(a,s);var c=ku(a,i);for(s=0;s<l.length;s+=2){var f=l[s],y=l[s+1];f==="style"?Sp(o,y):f==="dangerouslySetInnerHTML"?vp(o,y):f==="children"?vo(o,y):sc(o,f,y,c)}switch(a){case"input":vu(o,i);break;case"textarea":yp(o,i);break;case"select":var m=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var p=i.value;p!=null?$n(o,!!i.multiple,p,!1):m!==!!i.multiple&&(i.defaultValue!=null?$n(o,!!i.multiple,i.defaultValue,!0):$n(o,!!i.multiple,i.multiple?[]:"",!1))}o[Co]=i}catch(T){Z(t,t.return,T)}}break;case 6:if(Ke(e,t),at(t),r&4){if(t.stateNode===null)throw Error(R(162));o=t.stateNode,i=t.memoizedProps;try{o.nodeValue=i}catch(T){Z(t,t.return,T)}}break;case 3:if(Ke(e,t),at(t),r&4&&n!==null&&n.memoizedState.isDehydrated)try{Po(e.containerInfo)}catch(T){Z(t,t.return,T)}break;case 4:Ke(e,t),at(t);break;case 13:Ke(e,t),at(t),o=t.child,o.flags&8192&&(i=o.memoizedState!==null,o.stateNode.isHidden=i,!i||o.alternate!==null&&o.alternate.memoizedState!==null||(_c=ee())),r&4&&ep(t);break;case 22:if(f=n!==null&&n.memoizedState!==null,t.mode&1?(he=(c=he)||f,Ke(e,t),he=c):Ke(e,t),at(t),r&8192){if(c=t.memoizedState!==null,(t.stateNode.isHidden=c)&&!f&&t.mode&1)for(x=t,f=t.child;f!==null;){for(y=x=f;x!==null;){switch(m=x,p=m.child,m.tag){case 0:case 11:case 14:case 15:po(4,m,m.return);break;case 1:zn(m,m.return);var S=m.stateNode;if(typeof S.componentWillUnmount=="function"){r=m,n=m.return;try{e=r,S.props=e.memoizedProps,S.state=e.memoizedState,S.componentWillUnmount()}catch(T){Z(r,n,T)}}break;case 5:zn(m,m.return);break;case 22:if(m.memoizedState!==null){np(y);continue}}p!==null?(p.return=m,x=p):np(y)}f=f.sibling}e:for(f=null,y=t;;){if(y.tag===5){if(f===null){f=y;try{o=y.stateNode,c?(i=o.style,typeof i.setProperty=="function"?i.setProperty("display","none","important"):i.display="none"):(a=y.stateNode,l=y.memoizedProps.style,s=l!=null&&l.hasOwnProperty("display")?l.display:null,a.style.display=wp("display",s))}catch(T){Z(t,t.return,T)}}}else if(y.tag===6){if(f===null)try{y.stateNode.nodeValue=c?"":y.memoizedProps}catch(T){Z(t,t.return,T)}}else if((y.tag!==22&&y.tag!==23||y.memoizedState===null||y===t)&&y.child!==null){y.child.return=y,y=y.child;continue}if(y===t)break e;for(;y.sibling===null;){if(y.return===null||y.return===t)break e;f===y&&(f=null),y=y.return}f===y&&(f=null),y.sibling.return=y.return,y=y.sibling}}break;case 19:Ke(e,t),at(t),r&4&&ep(t);break;case 21:break;default:Ke(e,t),at(t)}}function at(t){var e=t.flags;if(e&2){try{e:{for(var n=t.return;n!==null;){if($g(n)){var r=n;break e}n=n.return}throw Error(R(160))}switch(r.tag){case 5:var o=r.stateNode;r.flags&32&&(vo(o,""),r.flags&=-33);var i=Zm(t);Zu(t,i,o);break;case 3:case 4:var s=r.stateNode.containerInfo,a=Zm(t);Xu(t,a,s);break;default:throw Error(R(161))}}catch(l){Z(t,t.return,l)}t.flags&=-3}e&4096&&(t.flags&=-4097)}function C0(t,e,n){x=t,Yg(t,e,n)}function Yg(t,e,n){for(var r=(t.mode&1)!==0;x!==null;){var o=x,i=o.child;if(o.tag===22&&r){var s=o.memoizedState!==null||Vi;if(!s){var a=o.alternate,l=a!==null&&a.memoizedState!==null||he;a=Vi;var c=he;if(Vi=s,(he=l)&&!c)for(x=o;x!==null;)s=x,l=s.child,s.tag===22&&s.memoizedState!==null?rp(o):l!==null?(l.return=s,x=l):rp(o);for(;i!==null;)x=i,Yg(i,e,n),i=i.sibling;x=o,Vi=a,he=c}tp(t,e,n)}else o.subtreeFlags&8772&&i!==null?(i.return=o,x=i):tp(t,e,n)}}function tp(t){for(;x!==null;){var e=x;if(e.flags&8772){var n=e.alternate;try{if(e.flags&8772)switch(e.tag){case 0:case 11:case 15:he||Ms(5,e);break;case 1:var r=e.stateNode;if(e.flags&4&&!he)if(n===null)r.componentDidMount();else{var o=e.elementType===e.type?n.memoizedProps:Qe(e.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=e.updateQueue;i!==null&&qm(e,i,r);break;case 3:var s=e.updateQueue;if(s!==null){if(n=null,e.child!==null)switch(e.child.tag){case 5:n=e.child.stateNode;break;case 1:n=e.child.stateNode}qm(e,s,n)}break;case 5:var a=e.stateNode;if(n===null&&e.flags&4){n=a;var l=e.memoizedProps;switch(e.type){case"button":case"input":case"select":case"textarea":l.autoFocus&&n.focus();break;case"img":l.src&&(n.src=l.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(e.memoizedState===null){var c=e.alternate;if(c!==null){var f=c.memoizedState;if(f!==null){var y=f.dehydrated;y!==null&&Po(y)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(R(163))}he||e.flags&512&&Qu(e)}catch(m){Z(e,e.return,m)}}if(e===t){x=null;break}if(n=e.sibling,n!==null){n.return=e.return,x=n;break}x=e.return}}function np(t){for(;x!==null;){var e=x;if(e===t){x=null;break}var n=e.sibling;if(n!==null){n.return=e.return,x=n;break}x=e.return}}function rp(t){for(;x!==null;){var e=x;try{switch(e.tag){case 0:case 11:case 15:var n=e.return;try{Ms(4,e)}catch(l){Z(e,n,l)}break;case 1:var r=e.stateNode;if(typeof r.componentDidMount=="function"){var o=e.return;try{r.componentDidMount()}catch(l){Z(e,o,l)}}var i=e.return;try{Qu(e)}catch(l){Z(e,i,l)}break;case 5:var s=e.return;try{Qu(e)}catch(l){Z(e,s,l)}}}catch(l){Z(e,e.return,l)}if(e===t){x=null;break}var a=e.sibling;if(a!==null){a.return=e.return,x=a;break}x=e.return}}var N0=Math.ceil,ws=Rt.ReactCurrentDispatcher,Uc=Rt.ReactCurrentOwner,Ge=Rt.ReactCurrentBatchConfig,q=0,le=null,ne=null,fe=0,Ie=0,jn=Kt(0),se=0,Lo=null,yn=0,Ls=0,qc=0,go=null,Ee=null,_c=0,or=1/0,gt=null,Ss=!1,ec=null,zt=null,Gi=!1,qt=null,Ts=0,yo=0,tc=null,Qi=-1,Xi=0;function Pe(){return q&6?ee():Qi!==-1?Qi:Qi=ee()}function jt(t){return t.mode&1?q&2&&fe!==0?fe&-fe:f0.transition!==null?(Xi===0&&(Xi=Mp()),Xi):(t=D,t!==0||(t=window.event,t=t===void 0?16:_p(t.type)),t):1}function tt(t,e,n,r){if(50<yo)throw yo=0,tc=null,Error(R(185));Bo(t,n,r),(!(q&2)||t!==le)&&(t===le&&(!(q&2)&&(Ls|=n),se===4&&At(t,fe)),Je(t,r),n===1&&q===0&&!(e.mode&1)&&(or=ee()+500,Js&&Qt()))}function Je(t,e){var n=t.callbackNode;mw(t,e);var r=os(t,t===le?fe:0);if(r===0)n!==null&&fm(n),t.callbackNode=null,t.callbackPriority=0;else if(e=r&-r,t.callbackPriority!==e){if(n!=null&&fm(n),e===1)t.tag===0?c0(op.bind(null,t)):og(op.bind(null,t)),s0(function(){!(q&6)&&Qt()}),n=null;else{switch(Lp(r)){case 1:n=fc;break;case 4:n=Op;break;case 16:n=rs;break;case 536870912:n=Ip;break;default:n=rs}n=ry(n,Kg.bind(null,t))}t.callbackPriority=e,t.callbackNode=n}}function Kg(t,e){if(Qi=-1,Xi=0,q&6)throw Error(R(327));var n=t.callbackNode;if(Qn()&&t.callbackNode!==n)return null;var r=os(t,t===le?fe:0);if(r===0)return null;if(r&30||r&t.expiredLanes||e)e=Ps(t,r);else{e=r;var o=q;q|=2;var i=Xg();(le!==t||fe!==e)&&(gt=null,or=ee()+500,fn(t,e));do try{I0();break}catch(a){Qg(t,a)}while(1);Rc(),ws.current=i,q=o,ne!==null?e=0:(le=null,fe=0,e=se)}if(e!==0){if(e===2&&(o=Nu(t),o!==0&&(r=o,e=nc(t,o))),e===1)throw n=Lo,fn(t,0),At(t,r),Je(t,ee()),n;if(e===6)At(t,r);else{if(o=t.current.alternate,!(r&30)&&!J0(o)&&(e=Ps(t,r),e===2&&(i=Nu(t),i!==0&&(r=i,e=nc(t,i))),e===1))throw n=Lo,fn(t,0),At(t,r),Je(t,ee()),n;switch(t.finishedWork=o,t.finishedLanes=r,e){case 0:case 1:throw Error(R(345));case 2:an(t,Ee,gt);break;case 3:if(At(t,r),(r&130023424)===r&&(e=_c+500-ee(),10<e)){if(os(t,0)!==0)break;if(o=t.suspendedLanes,(o&r)!==r){Pe(),t.pingedLanes|=t.suspendedLanes&o;break}t.timeoutHandle=Au(an.bind(null,t,Ee,gt),e);break}an(t,Ee,gt);break;case 4:if(At(t,r),(r&4194240)===r)break;for(e=t.eventTimes,o=-1;0<r;){var s=31-et(r);i=1<<s,s=e[s],s>o&&(o=s),r&=~i}if(r=o,r=ee()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*N0(r/1960))-r,10<r){t.timeoutHandle=Au(an.bind(null,t,Ee,gt),r);break}an(t,Ee,gt);break;case 5:an(t,Ee,gt);break;default:throw Error(R(329))}}}return Je(t,ee()),t.callbackNode===n?Kg.bind(null,t):null}function nc(t,e){var n=go;return t.current.memoizedState.isDehydrated&&(fn(t,e).flags|=256),t=Ps(t,e),t!==2&&(e=Ee,Ee=n,e!==null&&rc(e)),t}function rc(t){Ee===null?Ee=t:Ee.push.apply(Ee,t)}function J0(t){for(var e=t;;){if(e.flags&16384){var n=e.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!nt(i(),o))return!1}catch{return!1}}}if(n=e.child,e.subtreeFlags&16384&&n!==null)n.return=e,e=n;else{if(e===t)break;for(;e.sibling===null;){if(e.return===null||e.return===t)return!0;e=e.return}e.sibling.return=e.return,e=e.sibling}}return!0}function At(t,e){for(e&=~qc,e&=~Ls,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-et(e),r=1<<n;t[n]=-1,e&=~r}}function op(t){if(q&6)throw Error(R(327));Qn();var e=os(t,0);if(!(e&1))return Je(t,ee()),null;var n=Ps(t,e);if(t.tag!==0&&n===2){var r=Nu(t);r!==0&&(e=r,n=nc(t,r))}if(n===1)throw n=Lo,fn(t,0),At(t,e),Je(t,ee()),n;if(n===6)throw Error(R(345));return t.finishedWork=t.current.alternate,t.finishedLanes=e,an(t,Ee,gt),Je(t,ee()),null}function Dc(t,e){var n=q;q|=1;try{return t(e)}finally{q=n,q===0&&(or=ee()+500,Js&&Qt())}}function hn(t){qt!==null&&qt.tag===0&&!(q&6)&&Qn();var e=q;q|=1;var n=Ge.transition,r=D;try{if(Ge.transition=null,D=1,t)return t()}finally{D=r,Ge.transition=n,q=e,!(q&6)&&Qt()}}function bc(){Ie=jn.current,j(jn)}function fn(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(n!==-1&&(t.timeoutHandle=-1,i0(n)),ne!==null)for(n=ne.return;n!==null;){var r=n;switch(Tc(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&us();break;case 3:nr(),j(Ce),j(ve),Oc();break;case 5:Jc(r);break;case 4:nr();break;case 13:j(K);break;case 19:j(K);break;case 10:Ec(r.type._context);break;case 22:case 23:bc()}n=n.return}if(le=t,ne=t=$t(t.current,null),fe=Ie=e,se=0,Lo=null,qc=Ls=yn=0,Ee=go=null,un!==null){for(e=0;e<un.length;e++)if(n=un[e],r=n.interleaved,r!==null){n.interleaved=null;var o=r.next,i=n.pending;if(i!==null){var s=i.next;i.next=o,r.next=s}n.pending=r}un=null}return t}function Qg(t,e){do{var n=ne;try{if(Rc(),Wi.current=vs,hs){for(var r=Q.memoizedState;r!==null;){var o=r.queue;o!==null&&(o.pending=null),r=r.next}hs=!1}if(gn=0,ae=ie=Q=null,mo=!1,Oo=0,Uc.current=null,n===null||n.return===null){se=1,Lo=e,ne=null;break}e:{var i=t,s=n.return,a=n,l=e;if(e=fe,a.flags|=32768,l!==null&&typeof l=="object"&&typeof l.then=="function"){var c=l,f=a,y=f.tag;if(!(f.mode&1)&&(y===0||y===11||y===15)){var m=f.alternate;m?(f.updateQueue=m.updateQueue,f.memoizedState=m.memoizedState,f.lanes=m.lanes):(f.updateQueue=null,f.memoizedState=null)}var p=jm(s);if(p!==null){p.flags&=-257,$m(p,s,a,i,e),p.mode&1&&zm(i,c,e),e=p,l=c;var S=e.updateQueue;if(S===null){var T=new Set;T.add(l),e.updateQueue=T}else S.add(l);break e}else{if(!(e&1)){zm(i,c,e),Vc();break e}l=Error(R(426))}}else if(W&&a.mode&1){var C=jm(s);if(C!==null){!(C.flags&65536)&&(C.flags|=256),$m(C,s,a,i,e),Pc(rr(l,a));break e}}i=l=rr(l,a),se!==4&&(se=2),go===null?go=[i]:go.push(i),i=s;do{switch(i.tag){case 3:i.flags|=65536,e&=-e,i.lanes|=e;var g=Bg(i,l,e);Um(i,g);break e;case 1:a=l;var d=i.type,h=i.stateNode;if(!(i.flags&128)&&(typeof d.getDerivedStateFromError=="function"||h!==null&&typeof h.componentDidCatch=="function"&&(zt===null||!zt.has(h)))){i.flags|=65536,e&=-e,i.lanes|=e;var k=Fg(i,a,e);Um(i,k);break e}}i=i.return}while(i!==null)}ey(n)}catch(E){e=E,ne===n&&n!==null&&(ne=n=n.return);continue}break}while(1)}function Xg(){var t=ws.current;return ws.current=vs,t===null?vs:t}function Vc(){(se===0||se===3||se===2)&&(se=4),le===null||!(yn&268435455)&&!(Ls&268435455)||At(le,fe)}function Ps(t,e){var n=q;q|=2;var r=Xg();(le!==t||fe!==e)&&(gt=null,fn(t,e));do try{O0();break}catch(o){Qg(t,o)}while(1);if(Rc(),q=n,ws.current=r,ne!==null)throw Error(R(261));return le=null,fe=0,se}function O0(){for(;ne!==null;)Zg(ne)}function I0(){for(;ne!==null&&!ow();)Zg(ne)}function Zg(t){var e=ny(t.alternate,t,Ie);t.memoizedProps=t.pendingProps,e===null?ey(t):ne=e,Uc.current=null}function ey(t){var e=t;do{var n=e.alternate;if(t=e.return,e.flags&32768){if(n=R0(n,e),n!==null){n.flags&=32767,ne=n;return}if(t!==null)t.flags|=32768,t.subtreeFlags=0,t.deletions=null;else{se=6,ne=null;return}}else if(n=k0(n,e,Ie),n!==null){ne=n;return}if(e=e.sibling,e!==null){ne=e;return}ne=e=t}while(e!==null);se===0&&(se=5)}function an(t,e,n){var r=D,o=Ge.transition;try{Ge.transition=null,D=1,M0(t,e,n,r)}finally{Ge.transition=o,D=r}return null}function M0(t,e,n,r){do Qn();while(qt!==null);if(q&6)throw Error(R(327));n=t.finishedWork;var o=t.finishedLanes;if(n===null)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(R(177));t.callbackNode=null,t.callbackPriority=0;var i=n.lanes|n.childLanes;if(pw(t,i),t===le&&(ne=le=null,fe=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||Gi||(Gi=!0,ry(rs,function(){return Qn(),null})),i=(n.flags&15990)!==0,n.subtreeFlags&15990||i){i=Ge.transition,Ge.transition=null;var s=D;D=1;var a=q;q|=4,Uc.current=null,x0(t,n),Wg(n,t),e0(Bu),is=!!Lu,Bu=Lu=null,t.current=n,C0(n,t,o),iw(),q=a,D=s,Ge.transition=i}else t.current=n;if(Gi&&(Gi=!1,qt=t,Ts=o),i=t.pendingLanes,i===0&&(zt=null),lw(n.stateNode,r),Je(t,ee()),e!==null)for(r=t.onRecoverableError,n=0;n<e.length;n++)o=e[n],r(o.value,{componentStack:o.stack,digest:o.digest});if(Ss)throw Ss=!1,t=ec,ec=null,t;return Ts&1&&t.tag!==0&&Qn(),i=t.pendingLanes,i&1?t===tc?yo++:(yo=0,tc=t):yo=0,Qt(),null}function Qn(){if(qt!==null){var t=Lp(Ts),e=Ge.transition,n=D;try{if(Ge.transition=null,D=16>t?16:t,qt===null)var r=!1;else{if(t=qt,qt=null,Ts=0,q&6)throw Error(R(331));var o=q;for(q|=4,x=t.current;x!==null;){var i=x,s=i.child;if(x.flags&16){var a=i.deletions;if(a!==null){for(var l=0;l<a.length;l++){var c=a[l];for(x=c;x!==null;){var f=x;switch(f.tag){case 0:case 11:case 15:po(8,f,i)}var y=f.child;if(y!==null)y.return=f,x=y;else for(;x!==null;){f=x;var m=f.sibling,p=f.return;if(jg(f),f===c){x=null;break}if(m!==null){m.return=p,x=m;break}x=p}}}var S=i.alternate;if(S!==null){var T=S.child;if(T!==null){S.child=null;do{var C=T.sibling;T.sibling=null,T=C}while(T!==null)}}x=i}}if(i.subtreeFlags&2064&&s!==null)s.return=i,x=s;else e:for(;x!==null;){if(i=x,i.flags&2048)switch(i.tag){case 0:case 11:case 15:po(9,i,i.return)}var g=i.sibling;if(g!==null){g.return=i.return,x=g;break e}x=i.return}}var d=t.current;for(x=d;x!==null;){s=x;var h=s.child;if(s.subtreeFlags&2064&&h!==null)h.return=s,x=h;else e:for(s=d;x!==null;){if(a=x,a.flags&2048)try{switch(a.tag){case 0:case 11:case 15:Ms(9,a)}}catch(E){Z(a,a.return,E)}if(a===s){x=null;break e}var k=a.sibling;if(k!==null){k.return=a.return,x=k;break e}x=a.return}}if(q=o,Qt(),ct&&typeof ct.onPostCommitFiberRoot=="function")try{ct.onPostCommitFiberRoot(Rs,t)}catch{}r=!0}return r}finally{D=n,Ge.transition=e}}return!1}function ip(t,e,n){e=rr(n,e),e=Bg(t,e,1),t=Gt(t,e,1),e=Pe(),t!==null&&(Bo(t,1,e),Je(t,e))}function Z(t,e,n){if(t.tag===3)ip(t,t,n);else for(;e!==null;){if(e.tag===3){ip(e,t,n);break}else if(e.tag===1){var r=e.stateNode;if(typeof e.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(zt===null||!zt.has(r))){t=rr(n,t),t=Fg(e,t,1),e=Gt(e,t,1),t=Pe(),e!==null&&(Bo(e,1,t),Je(e,t));break}}e=e.return}}function L0(t,e,n){var r=t.pingCache;r!==null&&r.delete(e),e=Pe(),t.pingedLanes|=t.suspendedLanes&n,le===t&&(fe&n)===n&&(se===4||se===3&&(fe&130023424)===fe&&500>ee()-_c?fn(t,0):qc|=n),Je(t,e)}function ty(t,e){e===0&&(t.mode&1?(e=Ji,Ji<<=1,!(Ji&130023424)&&(Ji=4194304)):e=1);var n=Pe();t=Pt(t,e),t!==null&&(Bo(t,e,n),Je(t,n))}function B0(t){var e=t.memoizedState,n=0;e!==null&&(n=e.retryLane),ty(t,n)}function F0(t,e){var n=0;switch(t.tag){case 13:var r=t.stateNode,o=t.memoizedState;o!==null&&(n=o.retryLane);break;case 19:r=t.stateNode;break;default:throw Error(R(314))}r!==null&&r.delete(e),ty(t,n)}var ny;ny=function(t,e,n){if(t!==null)if(t.memoizedProps!==e.pendingProps||Ce.current)xe=!0;else{if(!(t.lanes&n)&&!(e.flags&128))return xe=!1,P0(t,e,n);xe=!!(t.flags&131072)}else xe=!1,W&&e.flags&1048576&&ig(e,ds,e.index);switch(e.lanes=0,e.tag){case 2:var r=e.type;Ki(t,e),t=e.pendingProps;var o=Zn(e,ve.current);Kn(e,n),o=Mc(null,e,r,t,o,n);var i=Lc();return e.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0?(e.tag=1,e.memoizedState=null,e.updateQueue=null,Ne(r)?(i=!0,cs(e)):i=!1,e.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,Cc(e),o.updater=Os,e.stateNode=o,o._reactInternals=e,Gu(e,r,t,n),e=$u(null,e,r,!0,i,n)):(e.tag=0,W&&i&&Sc(e),Te(null,e,o,n),e=e.child),e;case 16:r=e.elementType;e:{switch(Ki(t,e),t=e.pendingProps,o=r._init,r=o(r._payload),e.type=r,o=e.tag=U0(r),t=Qe(r,t),o){case 0:e=ju(null,e,r,t,n);break e;case 1:e=Ym(null,e,r,t,n);break e;case 11:e=Hm(null,e,r,t,n);break e;case 14:e=Wm(null,e,r,Qe(r.type,t),n);break e}throw Error(R(306,r,""))}return e;case 0:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:Qe(r,o),ju(t,e,r,o,n);case 1:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:Qe(r,o),Ym(t,e,r,o,n);case 3:e:{if(_g(e),t===null)throw Error(R(387));r=e.pendingProps,i=e.memoizedState,o=i.element,ug(t,e),gs(e,r,null,n);var s=e.memoizedState;if(r=s.element,i.isDehydrated)if(i={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},e.updateQueue.baseState=i,e.memoizedState=i,e.flags&256){o=rr(Error(R(423)),e),e=Km(t,e,r,n,o);break e}else if(r!==o){o=rr(Error(R(424)),e),e=Km(t,e,r,n,o);break e}else for(Me=Vt(e.stateNode.containerInfo.firstChild),Le=e,W=!0,Ze=null,n=mg(e,null,r,n),e.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(er(),r===o){e=kt(t,e,n);break e}Te(t,e,r,n)}e=e.child}return e;case 5:return pg(e),t===null&&Du(e),r=e.type,o=e.pendingProps,i=t!==null?t.memoizedProps:null,s=o.children,Fu(r,o)?s=null:i!==null&&Fu(r,i)&&(e.flags|=32),qg(t,e),Te(t,e,s,n),e.child;case 6:return t===null&&Du(e),null;case 13:return Dg(t,e,n);case 4:return Nc(e,e.stateNode.containerInfo),r=e.pendingProps,t===null?e.child=tr(e,null,r,n):Te(t,e,r,n),e.child;case 11:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:Qe(r,o),Hm(t,e,r,o,n);case 7:return Te(t,e,e.pendingProps,n),e.child;case 8:return Te(t,e,e.pendingProps.children,n),e.child;case 12:return Te(t,e,e.pendingProps.children,n),e.child;case 10:e:{if(r=e.type._context,o=e.pendingProps,i=e.memoizedProps,s=o.value,G(ms,r._currentValue),r._currentValue=s,i!==null)if(nt(i.value,s)){if(i.children===o.children&&!Ce.current){e=kt(t,e,n);break e}}else for(i=e.child,i!==null&&(i.return=e);i!==null;){var a=i.dependencies;if(a!==null){s=i.child;for(var l=a.firstContext;l!==null;){if(l.context===r){if(i.tag===1){l=wt(-1,n&-n),l.tag=2;var c=i.updateQueue;if(c!==null){c=c.shared;var f=c.pending;f===null?l.next=l:(l.next=f.next,f.next=l),c.pending=l}}i.lanes|=n,l=i.alternate,l!==null&&(l.lanes|=n),bu(i.return,n,e),a.lanes|=n;break}l=l.next}}else if(i.tag===10)s=i.type===e.type?null:i.child;else if(i.tag===18){if(s=i.return,s===null)throw Error(R(341));s.lanes|=n,a=s.alternate,a!==null&&(a.lanes|=n),bu(s,n,e),s=i.sibling}else s=i.child;if(s!==null)s.return=i;else for(s=i;s!==null;){if(s===e){s=null;break}if(i=s.sibling,i!==null){i.return=s.return,s=i;break}s=s.return}i=s}Te(t,e,o.children,n),e=e.child}return e;case 9:return o=e.type,r=e.pendingProps.children,Kn(e,n),o=ze(o),r=r(o),e.flags|=1,Te(t,e,r,n),e.child;case 14:return r=e.type,o=Qe(r,e.pendingProps),o=Qe(r.type,o),Wm(t,e,r,o,n);case 15:return Ag(t,e,e.type,e.pendingProps,n);case 17:return r=e.type,o=e.pendingProps,o=e.elementType===r?o:Qe(r,o),Ki(t,e),e.tag=1,Ne(r)?(t=!0,cs(e)):t=!1,Kn(e,n),fg(e,r,o),Gu(e,r,o,n),$u(null,e,r,!0,t,n);case 19:return bg(t,e,n);case 22:return Ug(t,e,n)}throw Error(R(156,e.tag))};function ry(t,e){return Jp(t,e)}function A0(t,e,n,r){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ve(t,e,n,r){return new A0(t,e,n,r)}function Gc(t){return t=t.prototype,!(!t||!t.isReactComponent)}function U0(t){if(typeof t=="function")return Gc(t)?1:0;if(t!=null){if(t=t.$$typeof,t===lc)return 11;if(t===uc)return 14}return 2}function $t(t,e){var n=t.alternate;return n===null?(n=Ve(t.tag,e,t.key,t.mode),n.elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=t.flags&14680064,n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Zi(t,e,n,r,o,i){var s=2;if(r=t,typeof t=="function")Gc(t)&&(s=1);else if(typeof t=="string")s=5;else e:switch(t){case Fn:return dn(n.children,o,i,e);case ac:s=8,o|=8;break;case mu:return t=Ve(12,n,e,o|2),t.elementType=mu,t.lanes=i,t;case pu:return t=Ve(13,n,e,o),t.elementType=pu,t.lanes=i,t;case gu:return t=Ve(19,n,e,o),t.elementType=gu,t.lanes=i,t;case dp:return Bs(n,o,i,e);default:if(typeof t=="object"&&t!==null)switch(t.$$typeof){case cp:s=10;break e;case fp:s=9;break e;case lc:s=11;break e;case uc:s=14;break e;case Lt:s=16,r=null;break e}throw Error(R(130,t==null?t:typeof t,""))}return e=Ve(s,n,e,o),e.elementType=t,e.type=r,e.lanes=i,e}function dn(t,e,n,r){return t=Ve(7,t,r,e),t.lanes=n,t}function Bs(t,e,n,r){return t=Ve(22,t,r,e),t.elementType=dp,t.lanes=n,t.stateNode={isHidden:!1},t}function cu(t,e,n){return t=Ve(6,t,null,e),t.lanes=n,t}function fu(t,e,n){return e=Ve(4,t.children!==null?t.children:[],t.key,e),e.lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function q0(t,e,n,r,o){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Wl(0),this.expirationTimes=Wl(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Wl(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function zc(t,e,n,r,o,i,s,a,l){return t=new q0(t,e,n,a,l),e===1?(e=1,i===!0&&(e|=8)):e=0,i=Ve(3,null,null,e),t.current=i,i.stateNode=t,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Cc(i),t}function _0(t,e,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Bn,key:r==null?null:""+r,children:t,containerInfo:e,implementation:n}}function oy(t){if(!t)return Wt;t=t._reactInternals;e:{if(wn(t)!==t||t.tag!==1)throw Error(R(170));var e=t;do{switch(e.tag){case 3:e=e.stateNode.context;break e;case 1:if(Ne(e.type)){e=e.stateNode.__reactInternalMemoizedMergedChildContext;break e}}e=e.return}while(e!==null);throw Error(R(171))}if(t.tag===1){var n=t.type;if(Ne(n))return rg(t,n,e)}return e}function iy(t,e,n,r,o,i,s,a,l){return t=zc(n,r,!0,t,o,i,s,a,l),t.context=oy(null),n=t.current,r=Pe(),o=jt(n),i=wt(r,o),i.callback=e??null,Gt(n,i,o),t.current.lanes=o,Bo(t,o,r),Je(t,r),t}function Fs(t,e,n,r){var o=e.current,i=Pe(),s=jt(o);return n=oy(n),e.context===null?e.context=n:e.pendingContext=n,e=wt(i,s),e.payload={element:t},r=r===void 0?null:r,r!==null&&(e.callback=r),t=Gt(o,e,s),t!==null&&(tt(t,o,s,i),Hi(t,o,s)),s}function ks(t){if(t=t.current,!t.child)return null;switch(t.child.tag){case 5:return t.child.stateNode;default:return t.child.stateNode}}function sp(t,e){if(t=t.memoizedState,t!==null&&t.dehydrated!==null){var n=t.retryLane;t.retryLane=n!==0&&n<e?n:e}}function jc(t,e){sp(t,e),(t=t.alternate)&&sp(t,e)}function D0(){return null}var sy=typeof reportError=="function"?reportError:function(t){console.error(t)};function $c(t){this._internalRoot=t}As.prototype.render=$c.prototype.render=function(t){var e=this._internalRoot;if(e===null)throw Error(R(409));Fs(t,e,null,null)};As.prototype.unmount=$c.prototype.unmount=function(){var t=this._internalRoot;if(t!==null){this._internalRoot=null;var e=t.containerInfo;hn(function(){Fs(null,t,null,null)}),e[Tt]=null}};function As(t){this._internalRoot=t}As.prototype.unstable_scheduleHydration=function(t){if(t){var e=Ap();t={blockedOn:null,target:t,priority:e};for(var n=0;n<Ft.length&&e!==0&&e<Ft[n].priority;n++);Ft.splice(n,0,t),n===0&&qp(t)}};function Hc(t){return!(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11)}function Us(t){return!(!t||t.nodeType!==1&&t.nodeType!==9&&t.nodeType!==11&&(t.nodeType!==8||t.nodeValue!==" react-mount-point-unstable "))}function ap(){}function b0(t,e,n,r,o){if(o){if(typeof r=="function"){var i=r;r=function(){var c=ks(s);i.call(c)}}var s=iy(e,r,t,0,null,!1,!1,"",ap);return t._reactRootContainer=s,t[Tt]=s.current,Eo(t.nodeType===8?t.parentNode:t),hn(),s}for(;o=t.lastChild;)t.removeChild(o);if(typeof r=="function"){var a=r;r=function(){var c=ks(l);a.call(c)}}var l=zc(t,0,!1,null,null,!1,!1,"",ap);return t._reactRootContainer=l,t[Tt]=l.current,Eo(t.nodeType===8?t.parentNode:t),hn(function(){Fs(e,l,n,r)}),l}function qs(t,e,n,r,o){var i=n._reactRootContainer;if(i){var s=i;if(typeof o=="function"){var a=o;o=function(){var l=ks(s);a.call(l)}}Fs(e,s,t,o)}else s=b0(n,e,t,o,r);return ks(s)}Bp=function(t){switch(t.tag){case 3:var e=t.stateNode;if(e.current.memoizedState.isDehydrated){var n=io(e.pendingLanes);n!==0&&(dc(e,n|1),Je(e,ee()),!(q&6)&&(or=ee()+500,Qt()))}break;case 13:hn(function(){var r=Pt(t,1);if(r!==null){var o=Pe();tt(r,t,1,o)}}),jc(t,1)}};mc=function(t){if(t.tag===13){var e=Pt(t,134217728);if(e!==null){var n=Pe();tt(e,t,134217728,n)}jc(t,134217728)}};Fp=function(t){if(t.tag===13){var e=jt(t),n=Pt(t,e);if(n!==null){var r=Pe();tt(n,t,e,r)}jc(t,e)}};Ap=function(){return D};Up=function(t,e){var n=D;try{return D=t,e()}finally{D=n}};Eu=function(t,e,n){switch(e){case"input":if(vu(t,n),e=n.name,n.type==="radio"&&e!=null){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var r=n[e];if(r!==t&&r.form===t.form){var o=Ns(r);if(!o)throw Error(R(90));pp(r),vu(r,o)}}}break;case"textarea":yp(t,n);break;case"select":e=n.value,e!=null&&$n(t,!!n.multiple,e,!1)}};kp=Dc;Rp=hn;var V0={usingClientEntryPoint:!1,Events:[Ao,_n,Ns,Tp,Pp,Dc]},to={findFiberByHostInstance:ln,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},G0={bundleType:to.bundleType,version:to.version,rendererPackageName:to.rendererPackageName,rendererConfig:to.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Rt.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return t=Cp(t),t===null?null:t.stateNode},findFiberByHostInstance:to.findFiberByHostInstance||D0,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&(no=__REACT_DEVTOOLS_GLOBAL_HOOK__,!no.isDisabled&&no.supportsFiber))try{Rs=no.inject(G0),ct=no}catch{}var no;Ae.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=V0;Ae.createPortal=function(t,e){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Hc(e))throw Error(R(200));return _0(t,e,null,n)};Ae.createRoot=function(t,e){if(!Hc(t))throw Error(R(299));var n=!1,r="",o=sy;return e!=null&&(e.unstable_strictMode===!0&&(n=!0),e.identifierPrefix!==void 0&&(r=e.identifierPrefix),e.onRecoverableError!==void 0&&(o=e.onRecoverableError)),e=zc(t,1,!1,null,null,n,!1,r,o),t[Tt]=e.current,Eo(t.nodeType===8?t.parentNode:t),new $c(e)};Ae.findDOMNode=function(t){if(t==null)return null;if(t.nodeType===1)return t;var e=t._reactInternals;if(e===void 0)throw typeof t.render=="function"?Error(R(188)):(t=Object.keys(t).join(","),Error(R(268,t)));return t=Cp(e),t=t===null?null:t.stateNode,t};Ae.flushSync=function(t){return hn(t)};Ae.hydrate=function(t,e,n){if(!Us(e))throw Error(R(200));return qs(null,t,e,!0,n)};Ae.hydrateRoot=function(t,e,n){if(!Hc(t))throw Error(R(405));var r=n!=null&&n.hydratedSources||null,o=!1,i="",s=sy;if(n!=null&&(n.unstable_strictMode===!0&&(o=!0),n.identifierPrefix!==void 0&&(i=n.identifierPrefix),n.onRecoverableError!==void 0&&(s=n.onRecoverableError)),e=iy(e,null,t,1,n??null,o,!1,i,s),t[Tt]=e.current,Eo(t),r)for(t=0;t<r.length;t++)n=r[t],o=n._getVersion,o=o(n._source),e.mutableSourceEagerHydrationData==null?e.mutableSourceEagerHydrationData=[n,o]:e.mutableSourceEagerHydrationData.push(n,o);return new As(e)};Ae.render=function(t,e,n){if(!Us(e))throw Error(R(200));return qs(null,t,e,!1,n)};Ae.unmountComponentAtNode=function(t){if(!Us(t))throw Error(R(40));return t._reactRootContainer?(hn(function(){qs(null,null,t,!1,function(){t._reactRootContainer=null,t[Tt]=null})}),!0):!1};Ae.unstable_batchedUpdates=Dc;Ae.unstable_renderSubtreeIntoContainer=function(t,e,n,r){if(!Us(n))throw Error(R(200));if(t==null||t._reactInternals===void 0)throw Error(R(38));return qs(t,e,n,!1,r)};Ae.version="18.2.0-next-9e3b772b8-20220608"});var cy=H((CT,uy)=>{"use strict";function ly(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(ly)}catch(t){console.error(t)}}ly(),uy.exports=ay()});var dy=H(Wc=>{"use strict";var fy=cy();Wc.createRoot=fy.createRoot,Wc.hydrateRoot=fy.hydrateRoot;var NT});var py=H(Yc=>{var my="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");Yc.encode=function(t){if(0<=t&&t<my.length)return my[t];throw new TypeError("Must be between 0 and 63: "+t)};Yc.decode=function(t){var e=65,n=90,r=97,o=122,i=48,s=57,a=43,l=47,c=26,f=52;return e<=t&&t<=n?t-e:r<=t&&t<=o?t-r+c:i<=t&&t<=s?t-i+f:t==a?62:t==l?63:-1}});var Xc=H(Qc=>{var gy=py(),Kc=5,yy=1<<Kc,hy=yy-1,vy=yy;function z0(t){return t<0?(-t<<1)+1:(t<<1)+0}function j0(t){var e=(t&1)===1,n=t>>1;return e?-n:n}Qc.encode=function(e){var n="",r,o=z0(e);do r=o&hy,o>>>=Kc,o>0&&(r|=vy),n+=gy.encode(r);while(o>0);return n};Qc.decode=function(e,n,r){var o=e.length,i=0,s=0,a,l;do{if(n>=o)throw new Error("Expected more digits in base 64 VLQ value.");if(l=gy.decode(e.charCodeAt(n++)),l===-1)throw new Error("Invalid base64 digit: "+e.charAt(n-1));a=!!(l&vy),l&=hy,i=i+(l<<s),s+=Kc}while(a);r.value=j0(i),r.rest=n}});var ur=H(we=>{function $0(t,e,n){if(e in t)return t[e];if(arguments.length===3)return n;throw new Error('"'+e+'" is a required argument.')}we.getArg=$0;var wy=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,H0=/^data:.+\,.+$/;function qo(t){var e=t.match(wy);return e?{scheme:e[1],auth:e[2],host:e[3],port:e[4],path:e[5]}:null}we.urlParse=qo;function ar(t){var e="";return t.scheme&&(e+=t.scheme+":"),e+="//",t.auth&&(e+=t.auth+"@"),t.host&&(e+=t.host),t.port&&(e+=":"+t.port),t.path&&(e+=t.path),e}we.urlGenerate=ar;function Zc(t){var e=t,n=qo(t);if(n){if(!n.path)return t;e=n.path}for(var r=we.isAbsolute(e),o=e.split(/\/+/),i,s=0,a=o.length-1;a>=0;a--)i=o[a],i==="."?o.splice(a,1):i===".."?s++:s>0&&(i===""?(o.splice(a+1,s),s=0):(o.splice(a,2),s--));return e=o.join("/"),e===""&&(e=r?"/":"."),n?(n.path=e,ar(n)):e}we.normalize=Zc;function Sy(t,e){t===""&&(t="."),e===""&&(e=".");var n=qo(e),r=qo(t);if(r&&(t=r.path||"/"),n&&!n.scheme)return r&&(n.scheme=r.scheme),ar(n);if(n||e.match(H0))return e;if(r&&!r.host&&!r.path)return r.host=e,ar(r);var o=e.charAt(0)==="/"?e:Zc(t.replace(/\/+$/,"")+"/"+e);return r?(r.path=o,ar(r)):o}we.join=Sy;we.isAbsolute=function(t){return t.charAt(0)==="/"||wy.test(t)};function W0(t,e){t===""&&(t="."),t=t.replace(/\/$/,"");for(var n=0;e.indexOf(t+"/")!==0;){var r=t.lastIndexOf("/");if(r<0||(t=t.slice(0,r),t.match(/^([^\/]+:\/)?\/*$/)))return e;++n}return Array(n+1).join("../")+e.substr(t.length+1)}we.relative=W0;var Ty=function(){var t=Object.create(null);return!("__proto__"in t)}();function Py(t){return t}function Y0(t){return ky(t)?"$"+t:t}we.toSetString=Ty?Py:Y0;function K0(t){return ky(t)?t.slice(1):t}we.fromSetString=Ty?Py:K0;function ky(t){if(!t)return!1;var e=t.length;if(e<9||t.charCodeAt(e-1)!==95||t.charCodeAt(e-2)!==95||t.charCodeAt(e-3)!==111||t.charCodeAt(e-4)!==116||t.charCodeAt(e-5)!==111||t.charCodeAt(e-6)!==114||t.charCodeAt(e-7)!==112||t.charCodeAt(e-8)!==95||t.charCodeAt(e-9)!==95)return!1;for(var n=e-10;n>=0;n--)if(t.charCodeAt(n)!==36)return!1;return!0}function Q0(t,e,n){var r=lr(t.source,e.source);return r!==0||(r=t.originalLine-e.originalLine,r!==0)||(r=t.originalColumn-e.originalColumn,r!==0||n)||(r=t.generatedColumn-e.generatedColumn,r!==0)||(r=t.generatedLine-e.generatedLine,r!==0)?r:lr(t.name,e.name)}we.compareByOriginalPositions=Q0;function X0(t,e,n){var r=t.generatedLine-e.generatedLine;return r!==0||(r=t.generatedColumn-e.generatedColumn,r!==0||n)||(r=lr(t.source,e.source),r!==0)||(r=t.originalLine-e.originalLine,r!==0)||(r=t.originalColumn-e.originalColumn,r!==0)?r:lr(t.name,e.name)}we.compareByGeneratedPositionsDeflated=X0;function lr(t,e){return t===e?0:t===null?1:e===null?-1:t>e?1:-1}function Z0(t,e){var n=t.generatedLine-e.generatedLine;return n!==0||(n=t.generatedColumn-e.generatedColumn,n!==0)||(n=lr(t.source,e.source),n!==0)||(n=t.originalLine-e.originalLine,n!==0)||(n=t.originalColumn-e.originalColumn,n!==0)?n:lr(t.name,e.name)}we.compareByGeneratedPositionsInflated=Z0;function eS(t){return JSON.parse(t.replace(/^\)]}'[^\n]*\n/,""))}we.parseSourceMapInput=eS;function tS(t,e,n){if(e=e||"",t&&(t[t.length-1]!=="/"&&e[0]!=="/"&&(t+="/"),e=t+e),n){var r=qo(n);if(!r)throw new Error("sourceMapURL could not be parsed");if(r.path){var o=r.path.lastIndexOf("/");o>=0&&(r.path=r.path.substring(0,o+1))}e=Sy(ar(r),e)}return Zc(e)}we.computeSourceURL=tS});var nf=H(Ry=>{var ef=ur(),tf=Object.prototype.hasOwnProperty,Sn=typeof Map<"u";function Et(){this._array=[],this._set=Sn?new Map:Object.create(null)}Et.fromArray=function(e,n){for(var r=new Et,o=0,i=e.length;o<i;o++)r.add(e[o],n);return r};Et.prototype.size=function(){return Sn?this._set.size:Object.getOwnPropertyNames(this._set).length};Et.prototype.add=function(e,n){var r=Sn?e:ef.toSetString(e),o=Sn?this.has(e):tf.call(this._set,r),i=this._array.length;(!o||n)&&this._array.push(e),o||(Sn?this._set.set(e,i):this._set[r]=i)};Et.prototype.has=function(e){if(Sn)return this._set.has(e);var n=ef.toSetString(e);return tf.call(this._set,n)};Et.prototype.indexOf=function(e){if(Sn){var n=this._set.get(e);if(n>=0)return n}else{var r=ef.toSetString(e);if(tf.call(this._set,r))return this._set[r]}throw new Error('"'+e+'" is not in the set.')};Et.prototype.at=function(e){if(e>=0&&e<this._array.length)return this._array[e];throw new Error("No element indexed by "+e)};Et.prototype.toArray=function(){return this._array.slice()};Ry.ArraySet=Et});var Cy=H(xy=>{var Ey=ur();function nS(t,e){var n=t.generatedLine,r=e.generatedLine,o=t.generatedColumn,i=e.generatedColumn;return r>n||r==n&&i>=o||Ey.compareByGeneratedPositionsInflated(t,e)<=0}function _s(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}_s.prototype.unsortedForEach=function(e,n){this._array.forEach(e,n)};_s.prototype.add=function(e){nS(this._last,e)?(this._last=e,this._array.push(e)):(this._sorted=!1,this._array.push(e))};_s.prototype.toArray=function(){return this._sorted||(this._array.sort(Ey.compareByGeneratedPositionsInflated),this._sorted=!0),this._array};xy.MappingList=_s});var rf=H(Ny=>{var _o=Xc(),re=ur(),Ds=nf().ArraySet,rS=Cy().MappingList;function $e(t){t||(t={}),this._file=re.getArg(t,"file",null),this._sourceRoot=re.getArg(t,"sourceRoot",null),this._skipValidation=re.getArg(t,"skipValidation",!1),this._sources=new Ds,this._names=new Ds,this._mappings=new rS,this._sourcesContents=null}$e.prototype._version=3;$e.fromSourceMap=function(e){var n=e.sourceRoot,r=new $e({file:e.file,sourceRoot:n});return e.eachMapping(function(o){var i={generated:{line:o.generatedLine,column:o.generatedColumn}};o.source!=null&&(i.source=o.source,n!=null&&(i.source=re.relative(n,i.source)),i.original={line:o.originalLine,column:o.originalColumn},o.name!=null&&(i.name=o.name)),r.addMapping(i)}),e.sources.forEach(function(o){var i=o;n!==null&&(i=re.relative(n,o)),r._sources.has(i)||r._sources.add(i);var s=e.sourceContentFor(o);s!=null&&r.setSourceContent(o,s)}),r};$e.prototype.addMapping=function(e){var n=re.getArg(e,"generated"),r=re.getArg(e,"original",null),o=re.getArg(e,"source",null),i=re.getArg(e,"name",null);this._skipValidation||this._validateMapping(n,r,o,i),o!=null&&(o=String(o),this._sources.has(o)||this._sources.add(o)),i!=null&&(i=String(i),this._names.has(i)||this._names.add(i)),this._mappings.add({generatedLine:n.line,generatedColumn:n.column,originalLine:r!=null&&r.line,originalColumn:r!=null&&r.column,source:o,name:i})};$e.prototype.setSourceContent=function(e,n){var r=e;this._sourceRoot!=null&&(r=re.relative(this._sourceRoot,r)),n!=null?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[re.toSetString(r)]=n):this._sourcesContents&&(delete this._sourcesContents[re.toSetString(r)],Object.keys(this._sourcesContents).length===0&&(this._sourcesContents=null))};$e.prototype.applySourceMap=function(e,n,r){var o=n;if(n==null){if(e.file==null)throw new Error(`SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`);o=e.file}var i=this._sourceRoot;i!=null&&(o=re.relative(i,o));var s=new Ds,a=new Ds;this._mappings.unsortedForEach(function(l){if(l.source===o&&l.originalLine!=null){var c=e.originalPositionFor({line:l.originalLine,column:l.originalColumn});c.source!=null&&(l.source=c.source,r!=null&&(l.source=re.join(r,l.source)),i!=null&&(l.source=re.relative(i,l.source)),l.originalLine=c.line,l.originalColumn=c.column,c.name!=null&&(l.name=c.name))}var f=l.source;f!=null&&!s.has(f)&&s.add(f);var y=l.name;y!=null&&!a.has(y)&&a.add(y)},this),this._sources=s,this._names=a,e.sources.forEach(function(l){var c=e.sourceContentFor(l);c!=null&&(r!=null&&(l=re.join(r,l)),i!=null&&(l=re.relative(i,l)),this.setSourceContent(l,c))},this)};$e.prototype._validateMapping=function(e,n,r,o){if(n&&typeof n.line!="number"&&typeof n.column!="number")throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if(!(e&&"line"in e&&"column"in e&&e.line>0&&e.column>=0&&!n&&!r&&!o)){if(e&&"line"in e&&"column"in e&&n&&"line"in n&&"column"in n&&e.line>0&&e.column>=0&&n.line>0&&n.column>=0&&r)return;throw new Error("Invalid mapping: "+JSON.stringify({generated:e,source:r,original:n,name:o}))}};$e.prototype._serializeMappings=function(){for(var e=0,n=1,r=0,o=0,i=0,s=0,a="",l,c,f,y,m=this._mappings.toArray(),p=0,S=m.length;p<S;p++){if(c=m[p],l="",c.generatedLine!==n)for(e=0;c.generatedLine!==n;)l+=";",n++;else if(p>0){if(!re.compareByGeneratedPositionsInflated(c,m[p-1]))continue;l+=","}l+=_o.encode(c.generatedColumn-e),e=c.generatedColumn,c.source!=null&&(y=this._sources.indexOf(c.source),l+=_o.encode(y-s),s=y,l+=_o.encode(c.originalLine-1-o),o=c.originalLine-1,l+=_o.encode(c.originalColumn-r),r=c.originalColumn,c.name!=null&&(f=this._names.indexOf(c.name),l+=_o.encode(f-i),i=f)),a+=l}return a};$e.prototype._generateSourcesContent=function(e,n){return e.map(function(r){if(!this._sourcesContents)return null;n!=null&&(r=re.relative(n,r));var o=re.toSetString(r);return Object.prototype.hasOwnProperty.call(this._sourcesContents,o)?this._sourcesContents[o]:null},this)};$e.prototype.toJSON=function(){var e={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return this._file!=null&&(e.file=this._file),this._sourceRoot!=null&&(e.sourceRoot=this._sourceRoot),this._sourcesContents&&(e.sourcesContent=this._generateSourcesContent(e.sources,e.sourceRoot)),e};$e.prototype.toString=function(){return JSON.stringify(this.toJSON())};Ny.SourceMapGenerator=$e});var Jy=H(Tn=>{Tn.GREATEST_LOWER_BOUND=1;Tn.LEAST_UPPER_BOUND=2;function of(t,e,n,r,o,i){var s=Math.floor((e-t)/2)+t,a=o(n,r[s],!0);return a===0?s:a>0?e-s>1?of(s,e,n,r,o,i):i==Tn.LEAST_UPPER_BOUND?e<r.length?e:-1:s:s-t>1?of(t,s,n,r,o,i):i==Tn.LEAST_UPPER_BOUND?s:t<0?-1:t}Tn.search=function(e,n,r,o){if(n.length===0)return-1;var i=of(-1,n.length,e,n,r,o||Tn.GREATEST_LOWER_BOUND);if(i<0)return-1;for(;i-1>=0&&r(n[i],n[i-1],!0)===0;)--i;return i}});var Iy=H(Oy=>{function sf(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function oS(t,e){return Math.round(t+Math.random()*(e-t))}function af(t,e,n,r){if(n<r){var o=oS(n,r),i=n-1;sf(t,o,r);for(var s=t[r],a=n;a<r;a++)e(t[a],s)<=0&&(i+=1,sf(t,i,a));sf(t,i+1,a);var l=i+1;af(t,e,n,l-1),af(t,e,l+1,r)}}Oy.quickSort=function(t,e){af(t,e,0,t.length-1)}});var Ly=H(bs=>{var N=ur(),lf=Jy(),cr=nf().ArraySet,iS=Xc(),Do=Iy().quickSort;function $(t,e){var n=t;return typeof t=="string"&&(n=N.parseSourceMapInput(t)),n.sections!=null?new rt(n,e):new me(n,e)}$.fromSourceMap=function(t,e){return me.fromSourceMap(t,e)};$.prototype._version=3;$.prototype.__generatedMappings=null;Object.defineProperty($.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}});$.prototype.__originalMappings=null;Object.defineProperty($.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}});$.prototype._charIsMappingSeparator=function(e,n){var r=e.charAt(n);return r===";"||r===","};$.prototype._parseMappings=function(e,n){throw new Error("Subclasses must implement _parseMappings")};$.GENERATED_ORDER=1;$.ORIGINAL_ORDER=2;$.GREATEST_LOWER_BOUND=1;$.LEAST_UPPER_BOUND=2;$.prototype.eachMapping=function(e,n,r){var o=n||null,i=r||$.GENERATED_ORDER,s;switch(i){case $.GENERATED_ORDER:s=this._generatedMappings;break;case $.ORIGINAL_ORDER:s=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var a=this.sourceRoot;s.map(function(l){var c=l.source===null?null:this._sources.at(l.source);return c=N.computeSourceURL(a,c,this._sourceMapURL),{source:c,generatedLine:l.generatedLine,generatedColumn:l.generatedColumn,originalLine:l.originalLine,originalColumn:l.originalColumn,name:l.name===null?null:this._names.at(l.name)}},this).forEach(e,o)};$.prototype.allGeneratedPositionsFor=function(e){var n=N.getArg(e,"line"),r={source:N.getArg(e,"source"),originalLine:n,originalColumn:N.getArg(e,"column",0)};if(r.source=this._findSourceIndex(r.source),r.source<0)return[];var o=[],i=this._findMapping(r,this._originalMappings,"originalLine","originalColumn",N.compareByOriginalPositions,lf.LEAST_UPPER_BOUND);if(i>=0){var s=this._originalMappings[i];if(e.column===void 0)for(var a=s.originalLine;s&&s.originalLine===a;)o.push({line:N.getArg(s,"generatedLine",null),column:N.getArg(s,"generatedColumn",null),lastColumn:N.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++i];else for(var l=s.originalColumn;s&&s.originalLine===n&&s.originalColumn==l;)o.push({line:N.getArg(s,"generatedLine",null),column:N.getArg(s,"generatedColumn",null),lastColumn:N.getArg(s,"lastGeneratedColumn",null)}),s=this._originalMappings[++i]}return o};bs.SourceMapConsumer=$;function me(t,e){var n=t;typeof t=="string"&&(n=N.parseSourceMapInput(t));var r=N.getArg(n,"version"),o=N.getArg(n,"sources"),i=N.getArg(n,"names",[]),s=N.getArg(n,"sourceRoot",null),a=N.getArg(n,"sourcesContent",null),l=N.getArg(n,"mappings"),c=N.getArg(n,"file",null);if(r!=this._version)throw new Error("Unsupported version: "+r);s&&(s=N.normalize(s)),o=o.map(String).map(N.normalize).map(function(f){return s&&N.isAbsolute(s)&&N.isAbsolute(f)?N.relative(s,f):f}),this._names=cr.fromArray(i.map(String),!0),this._sources=cr.fromArray(o,!0),this._absoluteSources=this._sources.toArray().map(function(f){return N.computeSourceURL(s,f,e)}),this.sourceRoot=s,this.sourcesContent=a,this._mappings=l,this._sourceMapURL=e,this.file=c}me.prototype=Object.create($.prototype);me.prototype.consumer=$;me.prototype._findSourceIndex=function(t){var e=t;if(this.sourceRoot!=null&&(e=N.relative(this.sourceRoot,e)),this._sources.has(e))return this._sources.indexOf(e);var n;for(n=0;n<this._absoluteSources.length;++n)if(this._absoluteSources[n]==t)return n;return-1};me.fromSourceMap=function(e,n){var r=Object.create(me.prototype),o=r._names=cr.fromArray(e._names.toArray(),!0),i=r._sources=cr.fromArray(e._sources.toArray(),!0);r.sourceRoot=e._sourceRoot,r.sourcesContent=e._generateSourcesContent(r._sources.toArray(),r.sourceRoot),r.file=e._file,r._sourceMapURL=n,r._absoluteSources=r._sources.toArray().map(function(p){return N.computeSourceURL(r.sourceRoot,p,n)});for(var s=e._mappings.toArray().slice(),a=r.__generatedMappings=[],l=r.__originalMappings=[],c=0,f=s.length;c<f;c++){var y=s[c],m=new My;m.generatedLine=y.generatedLine,m.generatedColumn=y.generatedColumn,y.source&&(m.source=i.indexOf(y.source),m.originalLine=y.originalLine,m.originalColumn=y.originalColumn,y.name&&(m.name=o.indexOf(y.name)),l.push(m)),a.push(m)}return Do(r.__originalMappings,N.compareByOriginalPositions),r};me.prototype._version=3;Object.defineProperty(me.prototype,"sources",{get:function(){return this._absoluteSources.slice()}});function My(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}me.prototype._parseMappings=function(e,n){for(var r=1,o=0,i=0,s=0,a=0,l=0,c=e.length,f=0,y={},m={},p=[],S=[],T,C,g,d,h;f<c;)if(e.charAt(f)===";")r++,f++,o=0;else if(e.charAt(f)===",")f++;else{for(T=new My,T.generatedLine=r,d=f;d<c&&!this._charIsMappingSeparator(e,d);d++);if(C=e.slice(f,d),g=y[C],g)f+=C.length;else{for(g=[];f<d;)iS.decode(e,f,m),h=m.value,f=m.rest,g.push(h);if(g.length===2)throw new Error("Found a source, but no line and column");if(g.length===3)throw new Error("Found a source and line, but no column");y[C]=g}T.generatedColumn=o+g[0],o=T.generatedColumn,g.length>1&&(T.source=a+g[1],a+=g[1],T.originalLine=i+g[2],i=T.originalLine,T.originalLine+=1,T.originalColumn=s+g[3],s=T.originalColumn,g.length>4&&(T.name=l+g[4],l+=g[4])),S.push(T),typeof T.originalLine=="number"&&p.push(T)}Do(S,N.compareByGeneratedPositionsDeflated),this.__generatedMappings=S,Do(p,N.compareByOriginalPositions),this.__originalMappings=p};me.prototype._findMapping=function(e,n,r,o,i,s){if(e[r]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+e[r]);if(e[o]<0)throw new TypeError("Column must be greater than or equal to 0, got "+e[o]);return lf.search(e,n,i,s)};me.prototype.computeColumnSpans=function(){for(var e=0;e<this._generatedMappings.length;++e){var n=this._generatedMappings[e];if(e+1<this._generatedMappings.length){var r=this._generatedMappings[e+1];if(n.generatedLine===r.generatedLine){n.lastGeneratedColumn=r.generatedColumn-1;continue}}n.lastGeneratedColumn=1/0}};me.prototype.originalPositionFor=function(e){var n={generatedLine:N.getArg(e,"line"),generatedColumn:N.getArg(e,"column")},r=this._findMapping(n,this._generatedMappings,"generatedLine","generatedColumn",N.compareByGeneratedPositionsDeflated,N.getArg(e,"bias",$.GREATEST_LOWER_BOUND));if(r>=0){var o=this._generatedMappings[r];if(o.generatedLine===n.generatedLine){var i=N.getArg(o,"source",null);i!==null&&(i=this._sources.at(i),i=N.computeSourceURL(this.sourceRoot,i,this._sourceMapURL));var s=N.getArg(o,"name",null);return s!==null&&(s=this._names.at(s)),{source:i,line:N.getArg(o,"originalLine",null),column:N.getArg(o,"originalColumn",null),name:s}}}return{source:null,line:null,column:null,name:null}};me.prototype.hasContentsOfAllSources=function(){return this.sourcesContent?this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some(function(e){return e==null}):!1};me.prototype.sourceContentFor=function(e,n){if(!this.sourcesContent)return null;var r=this._findSourceIndex(e);if(r>=0)return this.sourcesContent[r];var o=e;this.sourceRoot!=null&&(o=N.relative(this.sourceRoot,o));var i;if(this.sourceRoot!=null&&(i=N.urlParse(this.sourceRoot))){var s=o.replace(/^file:\/\//,"");if(i.scheme=="file"&&this._sources.has(s))return this.sourcesContent[this._sources.indexOf(s)];if((!i.path||i.path=="/")&&this._sources.has("/"+o))return this.sourcesContent[this._sources.indexOf("/"+o)]}if(n)return null;throw new Error('"'+o+'" is not in the SourceMap.')};me.prototype.generatedPositionFor=function(e){var n=N.getArg(e,"source");if(n=this._findSourceIndex(n),n<0)return{line:null,column:null,lastColumn:null};var r={source:n,originalLine:N.getArg(e,"line"),originalColumn:N.getArg(e,"column")},o=this._findMapping(r,this._originalMappings,"originalLine","originalColumn",N.compareByOriginalPositions,N.getArg(e,"bias",$.GREATEST_LOWER_BOUND));if(o>=0){var i=this._originalMappings[o];if(i.source===r.source)return{line:N.getArg(i,"generatedLine",null),column:N.getArg(i,"generatedColumn",null),lastColumn:N.getArg(i,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}};bs.BasicSourceMapConsumer=me;function rt(t,e){var n=t;typeof t=="string"&&(n=N.parseSourceMapInput(t));var r=N.getArg(n,"version"),o=N.getArg(n,"sections");if(r!=this._version)throw new Error("Unsupported version: "+r);this._sources=new cr,this._names=new cr;var i={line:-1,column:0};this._sections=o.map(function(s){if(s.url)throw new Error("Support for url field in sections not implemented.");var a=N.getArg(s,"offset"),l=N.getArg(a,"line"),c=N.getArg(a,"column");if(l<i.line||l===i.line&&c<i.column)throw new Error("Section offsets must be ordered and non-overlapping.");return i=a,{generatedOffset:{generatedLine:l+1,generatedColumn:c+1},consumer:new $(N.getArg(s,"map"),e)}})}rt.prototype=Object.create($.prototype);rt.prototype.constructor=$;rt.prototype._version=3;Object.defineProperty(rt.prototype,"sources",{get:function(){for(var t=[],e=0;e<this._sections.length;e++)for(var n=0;n<this._sections[e].consumer.sources.length;n++)t.push(this._sections[e].consumer.sources[n]);return t}});rt.prototype.originalPositionFor=function(e){var n={generatedLine:N.getArg(e,"line"),generatedColumn:N.getArg(e,"column")},r=lf.search(n,this._sections,function(i,s){var a=i.generatedLine-s.generatedOffset.generatedLine;return a||i.generatedColumn-s.generatedOffset.generatedColumn}),o=this._sections[r];return o?o.consumer.originalPositionFor({line:n.generatedLine-(o.generatedOffset.generatedLine-1),column:n.generatedColumn-(o.generatedOffset.generatedLine===n.generatedLine?o.generatedOffset.generatedColumn-1:0),bias:e.bias}):{source:null,line:null,column:null,name:null}};rt.prototype.hasContentsOfAllSources=function(){return this._sections.every(function(e){return e.consumer.hasContentsOfAllSources()})};rt.prototype.sourceContentFor=function(e,n){for(var r=0;r<this._sections.length;r++){var o=this._sections[r],i=o.consumer.sourceContentFor(e,!0);if(i)return i}if(n)return null;throw new Error('"'+e+'" is not in the SourceMap.')};rt.prototype.generatedPositionFor=function(e){for(var n=0;n<this._sections.length;n++){var r=this._sections[n];if(r.consumer._findSourceIndex(N.getArg(e,"source"))!==-1){var o=r.consumer.generatedPositionFor(e);if(o){var i={line:o.line+(r.generatedOffset.generatedLine-1),column:o.column+(r.generatedOffset.generatedLine===o.line?r.generatedOffset.generatedColumn-1:0)};return i}}}return{line:null,column:null}};rt.prototype._parseMappings=function(e,n){this.__generatedMappings=[],this.__originalMappings=[];for(var r=0;r<this._sections.length;r++)for(var o=this._sections[r],i=o.consumer._generatedMappings,s=0;s<i.length;s++){var a=i[s],l=o.consumer._sources.at(a.source);l=N.computeSourceURL(o.consumer.sourceRoot,l,this._sourceMapURL),this._sources.add(l),l=this._sources.indexOf(l);var c=null;a.name&&(c=o.consumer._names.at(a.name),this._names.add(c),c=this._names.indexOf(c));var f={source:l,generatedLine:a.generatedLine+(o.generatedOffset.generatedLine-1),generatedColumn:a.generatedColumn+(o.generatedOffset.generatedLine===a.generatedLine?o.generatedOffset.generatedColumn-1:0),originalLine:a.originalLine,originalColumn:a.originalColumn,name:c};this.__generatedMappings.push(f),typeof f.originalLine=="number"&&this.__originalMappings.push(f)}Do(this.__generatedMappings,N.compareByGeneratedPositionsDeflated),Do(this.__originalMappings,N.compareByOriginalPositions)};bs.IndexedSourceMapConsumer=rt});var Fy=H(By=>{var sS=rf().SourceMapGenerator,Vs=ur(),aS=/(\r?\n)/,lS=10,fr="$$$isSourceNode$$$";function Ue(t,e,n,r,o){this.children=[],this.sourceContents={},this.line=t??null,this.column=e??null,this.source=n??null,this.name=o??null,this[fr]=!0,r!=null&&this.add(r)}Ue.fromStringWithSourceMap=function(e,n,r){var o=new Ue,i=e.split(aS),s=0,a=function(){var m=S(),p=S()||"";return m+p;function S(){return s<i.length?i[s++]:void 0}},l=1,c=0,f=null;return n.eachMapping(function(m){if(f!==null)if(l<m.generatedLine)y(f,a()),l++,c=0;else{var p=i[s]||"",S=p.substr(0,m.generatedColumn-c);i[s]=p.substr(m.generatedColumn-c),c=m.generatedColumn,y(f,S),f=m;return}for(;l<m.generatedLine;)o.add(a()),l++;if(c<m.generatedColumn){var p=i[s]||"";o.add(p.substr(0,m.generatedColumn)),i[s]=p.substr(m.generatedColumn),c=m.generatedColumn}f=m},this),s<i.length&&(f&&y(f,a()),o.add(i.splice(s).join(""))),n.sources.forEach(function(m){var p=n.sourceContentFor(m);p!=null&&(r!=null&&(m=Vs.join(r,m)),o.setSourceContent(m,p))}),o;function y(m,p){if(m===null||m.source===void 0)o.add(p);else{var S=r?Vs.join(r,m.source):m.source;o.add(new Ue(m.originalLine,m.originalColumn,S,p,m.name))}}};Ue.prototype.add=function(e){if(Array.isArray(e))e.forEach(function(n){this.add(n)},this);else if(e[fr]||typeof e=="string")e&&this.children.push(e);else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);return this};Ue.prototype.prepend=function(e){if(Array.isArray(e))for(var n=e.length-1;n>=0;n--)this.prepend(e[n]);else if(e[fr]||typeof e=="string")this.children.unshift(e);else throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+e);return this};Ue.prototype.walk=function(e){for(var n,r=0,o=this.children.length;r<o;r++)n=this.children[r],n[fr]?n.walk(e):n!==""&&e(n,{source:this.source,line:this.line,column:this.column,name:this.name})};Ue.prototype.join=function(e){var n,r,o=this.children.length;if(o>0){for(n=[],r=0;r<o-1;r++)n.push(this.children[r]),n.push(e);n.push(this.children[r]),this.children=n}return this};Ue.prototype.replaceRight=function(e,n){var r=this.children[this.children.length-1];return r[fr]?r.replaceRight(e,n):typeof r=="string"?this.children[this.children.length-1]=r.replace(e,n):this.children.push("".replace(e,n)),this};Ue.prototype.setSourceContent=function(e,n){this.sourceContents[Vs.toSetString(e)]=n};Ue.prototype.walkSourceContents=function(e){for(var n=0,r=this.children.length;n<r;n++)this.children[n][fr]&&this.children[n].walkSourceContents(e);for(var o=Object.keys(this.sourceContents),n=0,r=o.length;n<r;n++)e(Vs.fromSetString(o[n]),this.sourceContents[o[n]])};Ue.prototype.toString=function(){var e="";return this.walk(function(n){e+=n}),e};Ue.prototype.toStringWithSourceMap=function(e){var n={code:"",line:1,column:0},r=new sS(e),o=!1,i=null,s=null,a=null,l=null;return this.walk(function(c,f){n.code+=c,f.source!==null&&f.line!==null&&f.column!==null?((i!==f.source||s!==f.line||a!==f.column||l!==f.name)&&r.addMapping({source:f.source,original:{line:f.line,column:f.column},generated:{line:n.line,column:n.column},name:f.name}),i=f.source,s=f.line,a=f.column,l=f.name,o=!0):o&&(r.addMapping({generated:{line:n.line,column:n.column}}),i=null,o=!1);for(var y=0,m=c.length;y<m;y++)c.charCodeAt(y)===lS?(n.line++,n.column=0,y+1===m?(i=null,o=!1):o&&r.addMapping({source:f.source,original:{line:f.line,column:f.column},generated:{line:n.line,column:n.column},name:f.name})):n.column++}),this.walkSourceContents(function(c,f){r.setSourceContent(c,f)}),{code:n.code,map:r}};By.SourceNode=Ue});var Ay=H(Gs=>{Gs.SourceMapGenerator=rf().SourceMapGenerator;Gs.SourceMapConsumer=Ly().SourceMapConsumer;Gs.SourceNode=Fy().SourceNode});var jy={};Jd(jy,{basename:()=>Gy,default:()=>cS,delimiter:()=>by,dirname:()=>Vy,extname:()=>zy,isAbsolute:()=>ff,join:()=>qy,normalize:()=>cf,relative:()=>_y,resolve:()=>zs,sep:()=>Dy});function Uy(t,e){for(var n=0,r=t.length-1;r>=0;r--){var o=t[r];o==="."?t.splice(r,1):o===".."?(t.splice(r,1),n++):n&&(t.splice(r,1),n--)}if(e)for(;n--;n)t.unshift("..");return t}function zs(){for(var t="",e=!1,n=arguments.length-1;n>=-1&&!e;n--){var r=n>=0?arguments[n]:"/";if(typeof r!="string")throw new TypeError("Arguments to path.resolve must be strings");if(!r)continue;t=r+"/"+t,e=r.charAt(0)==="/"}return t=Uy(df(t.split("/"),function(o){return!!o}),!e).join("/"),(e?"/":"")+t||"."}function cf(t){var e=ff(t),n=fS(t,-1)==="/";return t=Uy(df(t.split("/"),function(r){return!!r}),!e).join("/"),!t&&!e&&(t="."),t&&n&&(t+="/"),(e?"/":"")+t}function ff(t){return t.charAt(0)==="/"}function qy(){var t=Array.prototype.slice.call(arguments,0);return cf(df(t,function(e,n){if(typeof e!="string")throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))}function _y(t,e){t=zs(t).substr(1),e=zs(e).substr(1);function n(c){for(var f=0;f<c.length&&c[f]==="";f++);for(var y=c.length-1;y>=0&&c[y]==="";y--);return f>y?[]:c.slice(f,y-f+1)}for(var r=n(t.split("/")),o=n(e.split("/")),i=Math.min(r.length,o.length),s=i,a=0;a<i;a++)if(r[a]!==o[a]){s=a;break}for(var l=[],a=s;a<r.length;a++)l.push("..");return l=l.concat(o.slice(s)),l.join("/")}function Vy(t){var e=uf(t),n=e[0],r=e[1];return!n&&!r?".":(r&&(r=r.substr(0,r.length-1)),n+r)}function Gy(t,e){var n=uf(t)[2];return e&&n.substr(-1*e.length)===e&&(n=n.substr(0,n.length-e.length)),n}function zy(t){return uf(t)[3]}function df(t,e){if(t.filter)return t.filter(e);for(var n=[],r=0;r<t.length;r++)e(t[r],r,t)&&n.push(t[r]);return n}var uS,uf,Dy,by,cS,fS,$y=Nd(()=>{uS=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,uf=function(t){return uS.exec(t).slice(1)};Dy="/",by=":";cS={extname:zy,basename:Gy,dirname:Vy,sep:Dy,delimiter:by,relative:_y,join:qy,isAbsolute:ff,normalize:cf,resolve:zs};fS="ab".substr(-1)==="b"?function(t,e,n){return t.substr(e,n)}:function(t,e,n){return e<0&&(e=t.length+e),t.substr(e,n)}});var Hy=H((bT,js)=>{var Pn=($y(),Id(jy));if(Pn&&Pn.default){js.exports=Pn.default;for(let t in Pn)js.exports[t]=Pn[t]}else Pn&&(js.exports=Pn)});var Wy={};Jd(Wy,{default:()=>dS});var dS,Yy=Nd(()=>{dS={}});var Ky=H((VT,$s)=>{var kn=(Yy(),Id(Wy));if(kn&&kn.default){$s.exports=kn.default;for(let t in kn)$s.exports[t]=kn[t]}else kn&&($s.exports=kn)});var Xy=H((GT,Qy)=>{var mS=Object.prototype.toString,mf=typeof Buffer<"u"&&typeof Buffer.alloc=="function"&&typeof Buffer.allocUnsafe=="function"&&typeof Buffer.from=="function";function pS(t){return mS.call(t).slice(8,-1)==="ArrayBuffer"}function gS(t,e,n){e>>>=0;var r=t.byteLength-e;if(r<0)throw new RangeError("'offset' is out of bounds");if(n===void 0)n=r;else if(n>>>=0,n>r)throw new RangeError("'length' is out of bounds");return mf?Buffer.from(t.slice(e,e+n)):new Buffer(new Uint8Array(t.slice(e,e+n)))}function yS(t,e){if((typeof e!="string"||e==="")&&(e="utf8"),!Buffer.isEncoding(e))throw new TypeError('"encoding" must be a valid string encoding');return mf?Buffer.from(t,e):new Buffer(t,e)}function hS(t,e,n){if(typeof t=="number")throw new TypeError('"value" argument must not be a number');return pS(t)?gS(t,e,n):typeof t=="string"?yS(t,e):mf?Buffer.from(t):new Buffer(t)}Qy.exports=hS});var sh=H((En,hf)=>{var vS=Ay().SourceMapConsumer,pf=Hy(),dt;try{dt=Ky(),(!dt.existsSync||!dt.readFileSync)&&(dt=null)}catch{}var wS=Xy();function Zy(t,e){return t.require(e)}var eh=!1,th=!1,gf=!1,bo="auto",Rn={},Vo={},SS=/^data:application\/json[^,]+base64,/,Xt=[],Zt=[];function vf(){return bo==="browser"?!0:bo==="node"?!1:typeof window<"u"&&typeof XMLHttpRequest=="function"&&!(window.require&&window.module&&window.process&&window.process.type==="renderer")}function TS(){return typeof process=="object"&&process!==null&&typeof process.on=="function"}function PS(){return typeof process=="object"&&process!==null?process.version:""}function kS(){if(typeof process=="object"&&process!==null)return process.stderr}function RS(t){if(typeof process=="object"&&process!==null&&typeof process.exit=="function")return process.exit(t)}function Hs(t){return function(e){for(var n=0;n<t.length;n++){var r=t[n](e);if(r)return r}return null}}var wf=Hs(Xt);Xt.push(function(t){if(t=t.trim(),/^file:/.test(t)&&(t=t.replace(/file:\/\/\/(\w:)?/,function(r,o){return o?"":"/"})),t in Rn)return Rn[t];var e="";try{if(dt)dt.existsSync(t)&&(e=dt.readFileSync(t,"utf8"));else{var n=new XMLHttpRequest;n.open("GET",t,!1),n.send(null),n.readyState===4&&n.status===200&&(e=n.responseText)}}catch{}return Rn[t]=e});function yf(t,e){if(!t)return e;var n=pf.dirname(t),r=/^\w+:\/\/[^\/]*/.exec(n),o=r?r[0]:"",i=n.slice(o.length);return o&&/^\/\w\:/.test(i)?(o+="/",o+pf.resolve(n.slice(o.length),e).replace(/\\/g,"/")):o+pf.resolve(n.slice(o.length),e)}function ES(t){var e;if(vf())try{var n=new XMLHttpRequest;n.open("GET",t,!1),n.send(null),e=n.readyState===4?n.responseText:null;var r=n.getResponseHeader("SourceMap")||n.getResponseHeader("X-SourceMap");if(r)return r}catch{}e=wf(t);for(var o=/(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg,i,s;s=o.exec(e);)i=s;return i?i[1]:null}var Sf=Hs(Zt);Zt.push(function(t){var e=ES(t);if(!e)return null;var n;if(SS.test(e)){var r=e.slice(e.indexOf(",")+1);n=wS(r,"base64").toString(),e=t}else e=yf(t,e),n=wf(e);return n?{url:e,map:n}:null});function Tf(t){var e=Vo[t.source];if(!e){var n=Sf(t.source);n?(e=Vo[t.source]={url:n.url,map:new vS(n.map)},e.map.sourcesContent&&e.map.sources.forEach(function(o,i){var s=e.map.sourcesContent[i];if(s){var a=yf(e.url,o);Rn[a]=s}})):e=Vo[t.source]={url:null,map:null}}if(e&&e.map&&typeof e.map.originalPositionFor=="function"){var r=e.map.originalPositionFor(t);if(r.source!==null)return r.source=yf(e.url,r.source),r}return t}function rh(t){var e=/^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(t);if(e){var n=Tf({source:e[2],line:+e[3],column:e[4]-1});return"eval at "+e[1]+" ("+n.source+":"+n.line+":"+(n.column+1)+")"}return e=/^eval at ([^(]+) \((.+)\)$/.exec(t),e?"eval at "+e[1]+" ("+rh(e[2])+")":t}function xS(){var t,e="";if(this.isNative())e="native";else{t=this.getScriptNameOrSourceURL(),!t&&this.isEval()&&(e=this.getEvalOrigin(),e+=", "),t?e+=t:e+="<anonymous>";var n=this.getLineNumber();if(n!=null){e+=":"+n;var r=this.getColumnNumber();r&&(e+=":"+r)}}var o="",i=this.getFunctionName(),s=!0,a=this.isConstructor(),l=!(this.isToplevel()||a);if(l){var c=this.getTypeName();c==="[object Object]"&&(c="null");var f=this.getMethodName();i?(c&&i.indexOf(c)!=0&&(o+=c+"."),o+=i,f&&i.indexOf("."+f)!=i.length-f.length-1&&(o+=" [as "+f+"]")):o+=c+"."+(f||"<anonymous>")}else a?o+="new "+(i||"<anonymous>"):i?o+=i:(o+=e,s=!1);return s&&(o+=" ("+e+")"),o}function nh(t){var e={};return Object.getOwnPropertyNames(Object.getPrototypeOf(t)).forEach(function(n){e[n]=/^(?:is|get)/.test(n)?function(){return t[n].call(t)}:t[n]}),e.toString=xS,e}function oh(t,e){if(e===void 0&&(e={nextPosition:null,curPosition:null}),t.isNative())return e.curPosition=null,t;var n=t.getFileName()||t.getScriptNameOrSourceURL();if(n){var r=t.getLineNumber(),o=t.getColumnNumber()-1,i=/^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/,s=i.test(PS())?0:62;r===1&&o>s&&!vf()&&!t.isEval()&&(o-=s);var a=Tf({source:n,line:r,column:o});e.curPosition=a,t=nh(t);var l=t.getFunctionName;return t.getFunctionName=function(){return e.nextPosition==null?l():e.nextPosition.name||l()},t.getFileName=function(){return a.source},t.getLineNumber=function(){return a.line},t.getColumnNumber=function(){return a.column+1},t.getScriptNameOrSourceURL=function(){return a.source},t}var c=t.isEval()&&t.getEvalOrigin();return c&&(c=rh(c),t=nh(t),t.getEvalOrigin=function(){return c}),t}function CS(t,e){gf&&(Rn={},Vo={});for(var n=t.name||"Error",r=t.message||"",o=n+": "+r,i={nextPosition:null,curPosition:null},s=[],a=e.length-1;a>=0;a--)s.push(`
    at `+oh(e[a],i)),i.nextPosition=i.curPosition;return i.curPosition=i.nextPosition=null,o+s.reverse().join("")}function ih(t){var e=/\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(t.stack);if(e){var n=e[1],r=+e[2],o=+e[3],i=Rn[n];if(!i&&dt&&dt.existsSync(n))try{i=dt.readFileSync(n,"utf8")}catch{i=""}if(i){var s=i.split(/(?:\r\n|\r|\n)/)[r-1];if(s)return n+":"+r+`
`+s+`
`+new Array(o).join(" ")+"^"}}return null}function NS(t){var e=ih(t),n=kS();n&&n._handle&&n._handle.setBlocking&&n._handle.setBlocking(!0),e&&(console.error(),console.error(e)),console.error(t.stack),RS(1)}function JS(){var t=process.emit;process.emit=function(e){if(e==="uncaughtException"){var n=arguments[1]&&arguments[1].stack,r=this.listeners(e).length>0;if(n&&!r)return NS(arguments[1])}return t.apply(this,arguments)}}var OS=Xt.slice(0),IS=Zt.slice(0);En.wrapCallSite=oh;En.getErrorSource=ih;En.mapSourcePosition=Tf;En.retrieveSourceMap=Sf;En.install=function(t){if(t=t||{},t.environment&&(bo=t.environment,["node","browser","auto"].indexOf(bo)===-1))throw new Error("environment "+bo+" was unknown. Available options are {auto, browser, node}");if(t.retrieveFile&&(t.overrideRetrieveFile&&(Xt.length=0),Xt.unshift(t.retrieveFile)),t.retrieveSourceMap&&(t.overrideRetrieveSourceMap&&(Zt.length=0),Zt.unshift(t.retrieveSourceMap)),t.hookRequire&&!vf()){var e=Zy(hf,"module"),n=e.prototype._compile;n.__sourceMapSupport||(e.prototype._compile=function(i,s){return Rn[s]=i,Vo[s]=void 0,n.call(this,i,s)},e.prototype._compile.__sourceMapSupport=!0)}if(gf||(gf="emptyCacheBetweenOperations"in t?t.emptyCacheBetweenOperations:!1),eh||(eh=!0,Error.prepareStackTrace=CS),!th){var r="handleUncaughtExceptions"in t?t.handleUncaughtExceptions:!0;try{var o=Zy(hf,"worker_threads");o.isMainThread===!1&&(r=!1)}catch{}r&&TS()&&(th=!0,JS())}};En.resetRetrieveHandlers=function(){Xt.length=0,Zt.length=0,Xt=OS.slice(0),Zt=IS.slice(0),Sf=Hs(Zt),wf=Hs(Xt)}});var hv=H(Nl=>{"use strict";var mT=In(),pT=Symbol.for("react.element"),gT=Symbol.for("react.fragment"),yT=Object.prototype.hasOwnProperty,hT=mT.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,vT={key:!0,ref:!0,__self:!0,__source:!0};function yv(t,e,n){var r,o={},i=null,s=null;n!==void 0&&(i=""+n),e.key!==void 0&&(i=""+e.key),e.ref!==void 0&&(s=e.ref);for(r in e)yT.call(e,r)&&!vT.hasOwnProperty(r)&&(o[r]=e[r]);if(t&&t.defaultProps)for(r in e=t.defaultProps,e)o[r]===void 0&&(o[r]=e[r]);return{$$typeof:pT,type:t,key:i,ref:s,props:o,_owner:hT.current}}Nl.Fragment=gT;Nl.jsx=yv;Nl.jsxs=yv});var Nn=H((FE,vv)=>{"use strict";vv.exports=hv()});var Tv=it(In(),1),Pv=it(dy(),1);sh().install();var zr=it(In(),1);var ah="content/get",Ws="content/save";var We=it(In(),1);function Y(t,e){if(!t)throw new Error(e)}var MS=34028234663852886e22,LS=-34028234663852886e22,BS=4294967295,FS=2147483647,AS=-2147483648;function dr(t){if(typeof t!="number")throw new Error("invalid int 32: "+typeof t);if(!Number.isInteger(t)||t>FS||t<AS)throw new Error("invalid int 32: "+t)}function Go(t){if(typeof t!="number")throw new Error("invalid uint 32: "+typeof t);if(!Number.isInteger(t)||t>BS||t<0)throw new Error("invalid uint 32: "+t)}function Ys(t){if(typeof t!="number")throw new Error("invalid float 32: "+typeof t);if(Number.isFinite(t)&&(t>MS||t<LS))throw new Error("invalid float 32: "+t)}var lh=Symbol("@bufbuild/protobuf/enum-type");function uh(t){let e=t[lh];return Y(e,"missing enum type on enum object"),e}function Pf(t,e,n,r){t[lh]=kf(e,n.map(o=>({no:o.no,name:o.name,localName:t[o.no]})),r)}function kf(t,e,n){let r=Object.create(null),o=Object.create(null),i=[];for(let s of e){let a=fh(s);i.push(a),r[s.name]=a,o[s.no]=a}return{typeName:t,values:i,findName(s){return r[s]},findNumber(s){return o[s]}}}function ch(t,e,n){let r={};for(let o of e){let i=fh(o);r[i.localName]=i.no,r[i.no]=i.localName}return Pf(r,t,e,n),r}function fh(t){return"localName"in t?t:Object.assign(Object.assign({},t),{localName:t.name})}var v=class{equals(e){return this.getType().runtime.util.equals(this.getType(),this,e)}clone(){return this.getType().runtime.util.clone(this)}fromBinary(e,n){let r=this.getType(),o=r.runtime.bin,i=o.makeReadOptions(n);return o.readMessage(this,i.readerFactory(e),e.byteLength,i),this}fromJson(e,n){let r=this.getType(),o=r.runtime.json,i=o.makeReadOptions(n);return o.readMessage(r,e,i,this),this}fromJsonString(e,n){let r;try{r=JSON.parse(e)}catch(o){throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${o instanceof Error?o.message:String(o)}`)}return this.fromJson(r,n)}toBinary(e){let n=this.getType(),r=n.runtime.bin,o=r.makeWriteOptions(e),i=o.writerFactory();return r.writeMessage(this,i,o),i.finish()}toJson(e){let n=this.getType(),r=n.runtime.json,o=r.makeWriteOptions(e);return r.writeMessage(this,o)}toJsonString(e){var n;let r=this.toJson(e);return JSON.stringify(r,null,(n=e?.prettySpaces)!==null&&n!==void 0?n:0)}toJSON(){return this.toJson({emitDefaultValues:!0})}getType(){return Object.getPrototypeOf(this).constructor}};function dh(t,e,n,r){var o;let i=(o=r?.localName)!==null&&o!==void 0?o:e.substring(e.lastIndexOf(".")+1),s={[i]:function(a){t.util.initFields(this),t.util.initPartial(a,this)}}[i];return Object.setPrototypeOf(s.prototype,new v),Object.assign(s,{runtime:t,typeName:e,fields:t.util.newFieldList(n),fromBinary(a,l){return new s().fromBinary(a,l)},fromJson(a,l){return new s().fromJson(a,l)},fromJsonString(a,l){return new s().fromJsonString(a,l)},equals(a,l){return t.util.equals(s,a,l)}}),s}function Ks(t,e,n,r){return{syntax:t,json:e,bin:n,util:r,makeMessageType(o,i,s){return dh(this,o,i,s)},makeEnum:ch,makeEnumType:kf,getEnumType:uh}}var P;(function(t){t[t.DOUBLE=1]="DOUBLE",t[t.FLOAT=2]="FLOAT",t[t.INT64=3]="INT64",t[t.UINT64=4]="UINT64",t[t.INT32=5]="INT32",t[t.FIXED64=6]="FIXED64",t[t.FIXED32=7]="FIXED32",t[t.BOOL=8]="BOOL",t[t.STRING=9]="STRING",t[t.BYTES=12]="BYTES",t[t.UINT32=13]="UINT32",t[t.SFIXED32=15]="SFIXED32",t[t.SFIXED64=16]="SFIXED64",t[t.SINT32=17]="SINT32",t[t.SINT64=18]="SINT64"})(P||(P={}));var He;(function(t){t[t.BIGINT=0]="BIGINT",t[t.STRING=1]="STRING"})(He||(He={}));function ph(){let t=0,e=0;for(let r=0;r<28;r+=7){let o=this.buf[this.pos++];if(t|=(o&127)<<r,!(o&128))return this.assertBounds(),[t,e]}let n=this.buf[this.pos++];if(t|=(n&15)<<28,e=(n&112)>>4,!(n&128))return this.assertBounds(),[t,e];for(let r=3;r<=31;r+=7){let o=this.buf[this.pos++];if(e|=(o&127)<<r,!(o&128))return this.assertBounds(),[t,e]}throw new Error("invalid varint")}function Xs(t,e,n){for(let i=0;i<28;i=i+7){let s=t>>>i,a=!(!(s>>>7)&&e==0),l=(a?s|128:s)&255;if(n.push(l),!a)return}let r=t>>>28&15|(e&7)<<4,o=!!(e>>3);if(n.push((o?r|128:r)&255),!!o){for(let i=3;i<31;i=i+7){let s=e>>>i,a=!!(s>>>7),l=(a?s|128:s)&255;if(n.push(l),!a)return}n.push(e>>>31&1)}}var Qs=4294967296;function Rf(t){let e=t[0]==="-";e&&(t=t.slice(1));let n=1e6,r=0,o=0;function i(s,a){let l=Number(t.slice(s,a));o*=n,r=r*n+l,r>=Qs&&(o=o+(r/Qs|0),r=r%Qs)}return i(-24,-18),i(-18,-12),i(-12,-6),i(-6),e?yh(r,o):xf(r,o)}function gh(t,e){let n=xf(t,e),r=n.hi&2147483648;r&&(n=yh(n.lo,n.hi));let o=Ef(n.lo,n.hi);return r?"-"+o:o}function Ef(t,e){if({lo:t,hi:e}=US(t,e),e<=2097151)return String(Qs*e+t);let n=t&16777215,r=(t>>>24|e<<8)&16777215,o=e>>16&65535,i=n+r*6777216+o*6710656,s=r+o*8147497,a=o*2,l=1e7;return i>=l&&(s+=Math.floor(i/l),i%=l),s>=l&&(a+=Math.floor(s/l),s%=l),a.toString()+mh(s)+mh(i)}function US(t,e){return{lo:t>>>0,hi:e>>>0}}function xf(t,e){return{lo:t|0,hi:e|0}}function yh(t,e){return e=~e,t?t=~t+1:e+=1,xf(t,e)}var mh=t=>{let e=String(t);return"0000000".slice(e.length)+e};function Cf(t,e){if(t>=0){for(;t>127;)e.push(t&127|128),t=t>>>7;e.push(t)}else{for(let n=0;n<9;n++)e.push(t&127|128),t=t>>7;e.push(1)}}function hh(){let t=this.buf[this.pos++],e=t&127;if(!(t&128))return this.assertBounds(),e;if(t=this.buf[this.pos++],e|=(t&127)<<7,!(t&128))return this.assertBounds(),e;if(t=this.buf[this.pos++],e|=(t&127)<<14,!(t&128))return this.assertBounds(),e;if(t=this.buf[this.pos++],e|=(t&127)<<21,!(t&128))return this.assertBounds(),e;t=this.buf[this.pos++],e|=(t&15)<<28;for(let n=5;t&128&&n<10;n++)t=this.buf[this.pos++];if(t&128)throw new Error("invalid varint");return this.assertBounds(),e>>>0}function qS(){let t=new DataView(new ArrayBuffer(8));if(typeof BigInt=="function"&&typeof t.getBigInt64=="function"&&typeof t.getBigUint64=="function"&&typeof t.setBigInt64=="function"&&typeof t.setBigUint64=="function"&&(typeof process!="object"||typeof process.env!="object"||process.env.BUF_BIGINT_DISABLE!=="1")){let o=BigInt("-9223372036854775808"),i=BigInt("9223372036854775807"),s=BigInt("0"),a=BigInt("18446744073709551615");return{zero:BigInt(0),supported:!0,parse(l){let c=typeof l=="bigint"?l:BigInt(l);if(c>i||c<o)throw new Error(`int64 invalid: ${l}`);return c},uParse(l){let c=typeof l=="bigint"?l:BigInt(l);if(c>a||c<s)throw new Error(`uint64 invalid: ${l}`);return c},enc(l){return t.setBigInt64(0,this.parse(l),!0),{lo:t.getInt32(0,!0),hi:t.getInt32(4,!0)}},uEnc(l){return t.setBigInt64(0,this.uParse(l),!0),{lo:t.getInt32(0,!0),hi:t.getInt32(4,!0)}},dec(l,c){return t.setInt32(0,l,!0),t.setInt32(4,c,!0),t.getBigInt64(0,!0)},uDec(l,c){return t.setInt32(0,l,!0),t.setInt32(4,c,!0),t.getBigUint64(0,!0)}}}let n=o=>Y(/^-?[0-9]+$/.test(o),`int64 invalid: ${o}`),r=o=>Y(/^[0-9]+$/.test(o),`uint64 invalid: ${o}`);return{zero:"0",supported:!1,parse(o){return typeof o!="string"&&(o=o.toString()),n(o),o},uParse(o){return typeof o!="string"&&(o=o.toString()),r(o),o},enc(o){return typeof o!="string"&&(o=o.toString()),n(o),Rf(o)},uEnc(o){return typeof o!="string"&&(o=o.toString()),r(o),Rf(o)},dec(o,i){return gh(o,i)},uDec(o,i){return Ef(o,i)}}}var U=qS();var b;(function(t){t[t.Varint=0]="Varint",t[t.Bit64=1]="Bit64",t[t.LengthDelimited=2]="LengthDelimited",t[t.StartGroup=3]="StartGroup",t[t.EndGroup=4]="EndGroup",t[t.Bit32=5]="Bit32"})(b||(b={}));var Zs=class{constructor(e){this.stack=[],this.textEncoder=e??new TextEncoder,this.chunks=[],this.buf=[]}finish(){this.chunks.push(new Uint8Array(this.buf));let e=0;for(let o=0;o<this.chunks.length;o++)e+=this.chunks[o].length;let n=new Uint8Array(e),r=0;for(let o=0;o<this.chunks.length;o++)n.set(this.chunks[o],r),r+=this.chunks[o].length;return this.chunks=[],n}fork(){return this.stack.push({chunks:this.chunks,buf:this.buf}),this.chunks=[],this.buf=[],this}join(){let e=this.finish(),n=this.stack.pop();if(!n)throw new Error("invalid state, fork stack empty");return this.chunks=n.chunks,this.buf=n.buf,this.uint32(e.byteLength),this.raw(e)}tag(e,n){return this.uint32((e<<3|n)>>>0)}raw(e){return this.buf.length&&(this.chunks.push(new Uint8Array(this.buf)),this.buf=[]),this.chunks.push(e),this}uint32(e){for(Go(e);e>127;)this.buf.push(e&127|128),e=e>>>7;return this.buf.push(e),this}int32(e){return dr(e),Cf(e,this.buf),this}bool(e){return this.buf.push(e?1:0),this}bytes(e){return this.uint32(e.byteLength),this.raw(e)}string(e){let n=this.textEncoder.encode(e);return this.uint32(n.byteLength),this.raw(n)}float(e){Ys(e);let n=new Uint8Array(4);return new DataView(n.buffer).setFloat32(0,e,!0),this.raw(n)}double(e){let n=new Uint8Array(8);return new DataView(n.buffer).setFloat64(0,e,!0),this.raw(n)}fixed32(e){Go(e);let n=new Uint8Array(4);return new DataView(n.buffer).setUint32(0,e,!0),this.raw(n)}sfixed32(e){dr(e);let n=new Uint8Array(4);return new DataView(n.buffer).setInt32(0,e,!0),this.raw(n)}sint32(e){return dr(e),e=(e<<1^e>>31)>>>0,Cf(e,this.buf),this}sfixed64(e){let n=new Uint8Array(8),r=new DataView(n.buffer),o=U.enc(e);return r.setInt32(0,o.lo,!0),r.setInt32(4,o.hi,!0),this.raw(n)}fixed64(e){let n=new Uint8Array(8),r=new DataView(n.buffer),o=U.uEnc(e);return r.setInt32(0,o.lo,!0),r.setInt32(4,o.hi,!0),this.raw(n)}int64(e){let n=U.enc(e);return Xs(n.lo,n.hi,this.buf),this}sint64(e){let n=U.enc(e),r=n.hi>>31,o=n.lo<<1^r,i=(n.hi<<1|n.lo>>>31)^r;return Xs(o,i,this.buf),this}uint64(e){let n=U.uEnc(e);return Xs(n.lo,n.hi,this.buf),this}},ea=class{constructor(e,n){this.varint64=ph,this.uint32=hh,this.buf=e,this.len=e.length,this.pos=0,this.view=new DataView(e.buffer,e.byteOffset,e.byteLength),this.textDecoder=n??new TextDecoder}tag(){let e=this.uint32(),n=e>>>3,r=e&7;if(n<=0||r<0||r>5)throw new Error("illegal tag: field no "+n+" wire type "+r);return[n,r]}skip(e){let n=this.pos;switch(e){case b.Varint:for(;this.buf[this.pos++]&128;);break;case b.Bit64:this.pos+=4;case b.Bit32:this.pos+=4;break;case b.LengthDelimited:let r=this.uint32();this.pos+=r;break;case b.StartGroup:let o;for(;(o=this.tag()[1])!==b.EndGroup;)this.skip(o);break;default:throw new Error("cant skip wire type "+e)}return this.assertBounds(),this.buf.subarray(n,this.pos)}assertBounds(){if(this.pos>this.len)throw new RangeError("premature EOF")}int32(){return this.uint32()|0}sint32(){let e=this.uint32();return e>>>1^-(e&1)}int64(){return U.dec(...this.varint64())}uint64(){return U.uDec(...this.varint64())}sint64(){let[e,n]=this.varint64(),r=-(e&1);return e=(e>>>1|(n&1)<<31)^r,n=n>>>1^r,U.dec(e,n)}bool(){let[e,n]=this.varint64();return e!==0||n!==0}fixed32(){return this.view.getUint32((this.pos+=4)-4,!0)}sfixed32(){return this.view.getInt32((this.pos+=4)-4,!0)}fixed64(){return U.uDec(this.sfixed32(),this.sfixed32())}sfixed64(){return U.dec(this.sfixed32(),this.sfixed32())}float(){return this.view.getFloat32((this.pos+=4)-4,!0)}double(){return this.view.getFloat64((this.pos+=8)-8,!0)}bytes(){let e=this.uint32(),n=this.pos;return this.pos+=e,this.assertBounds(),this.buf.subarray(n,n+e)}string(){return this.textDecoder.decode(this.bytes())}};function xn(t,e){return e instanceof v||!t.fieldWrapper?e:t.fieldWrapper.wrapField(e)}var f1={"google.protobuf.DoubleValue":P.DOUBLE,"google.protobuf.FloatValue":P.FLOAT,"google.protobuf.Int64Value":P.INT64,"google.protobuf.UInt64Value":P.UINT64,"google.protobuf.Int32Value":P.INT32,"google.protobuf.UInt32Value":P.UINT32,"google.protobuf.BoolValue":P.BOOL,"google.protobuf.StringValue":P.STRING,"google.protobuf.BytesValue":P.BYTES};function xt(t,e,n){if(e===n)return!0;if(t==P.BYTES){if(!(e instanceof Uint8Array)||!(n instanceof Uint8Array)||e.length!==n.length)return!1;for(let r=0;r<e.length;r++)if(e[r]!==n[r])return!1;return!0}switch(t){case P.UINT64:case P.FIXED64:case P.INT64:case P.SFIXED64:case P.SINT64:return e==n}return!1}function zo(t,e){switch(t){case P.BOOL:return!1;case P.UINT64:case P.FIXED64:case P.INT64:case P.SFIXED64:case P.SINT64:return e==0?U.zero:"0";case P.DOUBLE:case P.FLOAT:return 0;case P.BYTES:return new Uint8Array(0);case P.STRING:return"";default:return 0}}function Nf(t,e){let n=e===void 0,r=b.Varint,o=e===0;switch(t){case P.STRING:o=n||!e.length,r=b.LengthDelimited;break;case P.BOOL:o=e===!1;break;case P.DOUBLE:r=b.Bit64;break;case P.FLOAT:r=b.Bit32;break;case P.INT64:o=n||e==0;break;case P.UINT64:o=n||e==0;break;case P.FIXED64:o=n||e==0,r=b.Bit64;break;case P.BYTES:o=n||!e.byteLength,r=b.LengthDelimited;break;case P.FIXED32:r=b.Bit32;break;case P.SFIXED32:r=b.Bit32;break;case P.SFIXED64:o=n||e==0,r=b.Bit64;break;case P.SINT64:o=n||e==0;break}let i=P[t].toLowerCase();return[r,i,n||o]}var mr=Symbol("@bufbuild/protobuf/unknown-fields"),vh={readUnknownFields:!0,readerFactory:t=>new ea(t)},wh={writeUnknownFields:!0,writerFactory:()=>new Zs};function _S(t){return t?Object.assign(Object.assign({},vh),t):vh}function DS(t){return t?Object.assign(Object.assign({},wh),t):wh}function ra(){return{makeReadOptions:_S,makeWriteOptions:DS,listUnknownFields(t){var e;return(e=t[mr])!==null&&e!==void 0?e:[]},discardUnknownFields(t){delete t[mr]},writeUnknownFields(t,e){let r=t[mr];if(r)for(let o of r)e.tag(o.no,o.wireType).raw(o.data)},onUnknownField(t,e,n,r){let o=t;Array.isArray(o[mr])||(o[mr]=[]),o[mr].push({no:e,wireType:n,data:r})},readMessage(t,e,n,r,o){let i=t.getType(),s=o?e.len:e.pos+n,a,l;for(;e.pos<s&&([a,l]=e.tag(),l!=b.EndGroup);){let c=i.fields.find(a);if(!c){let p=e.skip(l);r.readUnknownFields&&this.onUnknownField(t,a,l,p);continue}let f=t,y=c.repeated,m=c.localName;switch(c.oneof&&(f=f[c.oneof.localName],f.case!=m&&delete f.value,f.case=m,m="value"),c.kind){case"scalar":case"enum":let p=c.kind=="enum"?P.INT32:c.T,S=na;if(c.kind=="scalar"&&c.L>0&&(S=VS),y){let d=f[m];if(l==b.LengthDelimited&&p!=P.STRING&&p!=P.BYTES){let h=e.uint32()+e.pos;for(;e.pos<h;)d.push(S(e,p))}else d.push(S(e,p))}else f[m]=S(e,p);break;case"message":let T=c.T;y?f[m].push(ta(e,new T,r,c)):f[m]instanceof v?ta(e,f[m],r,c):(f[m]=ta(e,new T,r,c),T.fieldWrapper&&!c.oneof&&!c.repeated&&(f[m]=T.fieldWrapper.unwrapField(f[m])));break;case"map":let[C,g]=bS(c,e,r);f[m][C]=g;break}}if(o&&(l!=b.EndGroup||a!==n))throw new Error("invalid end group tag")}}}function ta(t,e,n,r){let o=e.getType().runtime.bin,i=r?.delimited;return o.readMessage(e,t,i?r?.no:t.uint32(),n,i),e}function bS(t,e,n){let r=e.uint32(),o=e.pos+r,i,s;for(;e.pos<o;){let[a]=e.tag();switch(a){case 1:i=na(e,t.K);break;case 2:switch(t.V.kind){case"scalar":s=na(e,t.V.T);break;case"enum":s=e.int32();break;case"message":s=ta(e,new t.V.T,n,void 0);break}break}}if(i===void 0){let a=zo(t.K,He.BIGINT);i=t.K==P.BOOL?a.toString():a}if(typeof i!="string"&&typeof i!="number"&&(i=i.toString()),s===void 0)switch(t.V.kind){case"scalar":s=zo(t.V.T,He.BIGINT);break;case"enum":s=0;break;case"message":s=new t.V.T;break}return[i,s]}function VS(t,e){let n=na(t,e);return typeof n=="bigint"?n.toString():n}function na(t,e){switch(e){case P.STRING:return t.string();case P.BOOL:return t.bool();case P.DOUBLE:return t.double();case P.FLOAT:return t.float();case P.INT32:return t.int32();case P.INT64:return t.int64();case P.UINT64:return t.uint64();case P.FIXED64:return t.fixed64();case P.BYTES:return t.bytes();case P.FIXED32:return t.fixed32();case P.SFIXED32:return t.sfixed32();case P.SFIXED64:return t.sfixed64();case P.SINT64:return t.sint64();case P.UINT32:return t.uint32();case P.SINT32:return t.sint32()}}function oa(t,e,n,r,o){t.tag(n.no,b.LengthDelimited),t.fork();let i=r;switch(n.K){case P.INT32:case P.FIXED32:case P.UINT32:case P.SFIXED32:case P.SINT32:i=Number.parseInt(r);break;case P.BOOL:Y(r=="true"||r=="false"),i=r=="true";break}switch(Ct(t,n.K,1,i,!0),n.V.kind){case"scalar":Ct(t,n.V.T,2,o,!0);break;case"enum":Ct(t,P.INT32,2,o,!0);break;case"message":t.tag(2,b.LengthDelimited).bytes(o.toBinary(e));break}t.join()}function pr(t,e,n,r){if(r!==void 0){let o=xn(n.T,r);n?.delimited?t.tag(n.no,b.StartGroup).raw(o.toBinary(e)).tag(n.no,b.EndGroup):t.tag(n.no,b.LengthDelimited).bytes(o.toBinary(e))}}function Ct(t,e,n,r,o){let[i,s,a]=Nf(e,r);(!a||o)&&t.tag(n,i)[s](r)}function ia(t,e,n,r){if(!r.length)return;t.tag(n,b.LengthDelimited).fork();let[,o]=Nf(e);for(let i=0;i<r.length;i++)t[o](r[i]);t.join()}function Sh(){return Object.assign(Object.assign({},ra()),{writeMessage(t,e,n){let r=t.getType();for(let o of r.fields.byNumber()){let i,s=o.repeated,a=o.localName;if(o.oneof){let l=t[o.oneof.localName];if(l.case!==a)continue;i=l.value}else i=t[a];switch(o.kind){case"scalar":case"enum":let l=o.kind=="enum"?P.INT32:o.T;if(s)if(o.packed)ia(e,l,o.no,i);else for(let c of i)Ct(e,l,o.no,c,!0);else i!==void 0&&Ct(e,l,o.no,i,!!o.oneof||o.opt);break;case"message":if(s)for(let c of i)pr(e,n,o,c);else pr(e,n,o,i);break;case"map":for(let[c,f]of Object.entries(i))oa(e,n,o,c,f);break}}return n.writeUnknownFields&&this.writeUnknownFields(t,e),e}})}var Nt="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""),sa=[];for(let t=0;t<Nt.length;t++)sa[Nt[t].charCodeAt(0)]=t;sa["-".charCodeAt(0)]=Nt.indexOf("+");sa["_".charCodeAt(0)]=Nt.indexOf("/");var en={dec(t){let e=t.length*3/4;t[t.length-2]=="="?e-=2:t[t.length-1]=="="&&(e-=1);let n=new Uint8Array(e),r=0,o=0,i,s=0;for(let a=0;a<t.length;a++){if(i=sa[t.charCodeAt(a)],i===void 0)switch(t[a]){case"=":o=0;case`
`:case"\r":case"	":case" ":continue;default:throw Error("invalid base64 string.")}switch(o){case 0:s=i,o=1;break;case 1:n[r++]=s<<2|(i&48)>>4,s=i,o=2;break;case 2:n[r++]=(s&15)<<4|(i&60)>>2,s=i,o=3;break;case 3:n[r++]=(s&3)<<6|i,o=0;break}}if(o==1)throw Error("invalid base64 string.");return n.subarray(0,r)},enc(t){let e="",n=0,r,o=0;for(let i=0;i<t.length;i++)switch(r=t[i],n){case 0:e+=Nt[r>>2],o=(r&3)<<4,n=1;break;case 1:e+=Nt[o|r>>4],o=(r&15)<<2,n=2;break;case 2:e+=Nt[o|r>>6],e+=Nt[r&63],n=0;break}return n&&(e+=Nt[o],e+="=",n==1&&(e+="=")),e}};var Th={ignoreUnknownFields:!1},Ph={emitDefaultValues:!1,enumAsInteger:!1,useProtoFieldName:!1,prettySpaces:0};function GS(t){return t?Object.assign(Object.assign({},Th),t):Th}function zS(t){return t?Object.assign(Object.assign({},Ph),t):Ph}function aa(t){let e=t(jS,kh);return{makeReadOptions:GS,makeWriteOptions:zS,readMessage(n,r,o,i){if(r==null||Array.isArray(r)||typeof r!="object")throw new Error(`cannot decode message ${n.typeName} from JSON: ${this.debug(r)}`);i=i??new n;let s={};for(let[a,l]of Object.entries(r)){let c=n.fields.findJsonName(a);if(!c){if(!o.ignoreUnknownFields)throw new Error(`cannot decode message ${n.typeName} from JSON: key "${a}" is unknown`);continue}let f=c.localName,y=i;if(c.oneof){if(l===null&&c.kind=="scalar")continue;let m=s[c.oneof.localName];if(m)throw new Error(`cannot decode message ${n.typeName} from JSON: multiple keys for oneof "${c.oneof.name}" present: "${m}", "${a}"`);s[c.oneof.localName]=a,y=y[c.oneof.localName]={case:f},f="value"}if(c.repeated){if(l===null)continue;if(!Array.isArray(l))throw new Error(`cannot decode field ${n.typeName}.${c.name} from JSON: ${this.debug(l)}`);let m=y[f];for(let p of l){if(p===null)throw new Error(`cannot decode field ${n.typeName}.${c.name} from JSON: ${this.debug(p)}`);let S;switch(c.kind){case"message":S=c.T.fromJson(p,o);break;case"enum":if(S=Jf(c.T,p,o.ignoreUnknownFields),S===void 0)continue;break;case"scalar":try{S=jo(c.T,p,c.L)}catch(T){let C=`cannot decode field ${n.typeName}.${c.name} from JSON: ${this.debug(p)}`;throw T instanceof Error&&T.message.length>0&&(C+=`: ${T.message}`),new Error(C)}break}m.push(S)}}else if(c.kind=="map"){if(l===null)continue;if(Array.isArray(l)||typeof l!="object")throw new Error(`cannot decode field ${n.typeName}.${c.name} from JSON: ${this.debug(l)}`);let m=y[f];for(let[p,S]of Object.entries(l)){if(S===null)throw new Error(`cannot decode field ${n.typeName}.${c.name} from JSON: map value null`);let T;switch(c.V.kind){case"message":T=c.V.T.fromJson(S,o);break;case"enum":if(T=Jf(c.V.T,S,o.ignoreUnknownFields),T===void 0)continue;break;case"scalar":try{T=jo(c.V.T,S,He.BIGINT)}catch(C){let g=`cannot decode map value for field ${n.typeName}.${c.name} from JSON: ${this.debug(l)}`;throw C instanceof Error&&C.message.length>0&&(g+=`: ${C.message}`),new Error(g)}break}try{m[jo(c.K,c.K==P.BOOL?p=="true"?!0:p=="false"?!1:p:p,He.BIGINT).toString()]=T}catch(C){let g=`cannot decode map key for field ${n.typeName}.${c.name} from JSON: ${this.debug(l)}`;throw C instanceof Error&&C.message.length>0&&(g+=`: ${C.message}`),new Error(g)}}}else switch(c.kind){case"message":let m=c.T;if(l===null&&m.typeName!="google.protobuf.Value"){if(c.oneof)throw new Error(`cannot decode field ${n.typeName}.${c.name} from JSON: null is invalid for oneof field "${a}"`);continue}y[f]instanceof v?y[f].fromJson(l,o):(y[f]=m.fromJson(l,o),m.fieldWrapper&&!c.oneof&&(y[f]=m.fieldWrapper.unwrapField(y[f])));break;case"enum":let p=Jf(c.T,l,o.ignoreUnknownFields);p!==void 0&&(y[f]=p);break;case"scalar":try{y[f]=jo(c.T,l,c.L)}catch(S){let T=`cannot decode field ${n.typeName}.${c.name} from JSON: ${this.debug(l)}`;throw S instanceof Error&&S.message.length>0&&(T+=`: ${S.message}`),new Error(T)}break}}return i},writeMessage(n,r){let o=n.getType(),i={},s;try{for(let a of o.fields.byMember()){let l;if(a.kind=="oneof"){let c=n[a.localName];if(c.value===void 0)continue;if(s=a.findField(c.case),!s)throw"oneof case not found: "+c.case;l=e(s,c.value,r)}else s=a,l=e(s,n[s.localName],r);l!==void 0&&(i[r.useProtoFieldName?s.name:s.jsonName]=l)}}catch(a){let l=s?`cannot encode field ${o.typeName}.${s.name} to JSON`:`cannot encode message ${o.typeName} to JSON`,c=a instanceof Error?a.message:String(a);throw new Error(l+(c.length>0?`: ${c}`:""))}return i},readScalar:jo,writeScalar:kh,debug:Rh}}function Rh(t){if(t===null)return"null";switch(typeof t){case"object":return Array.isArray(t)?"array":"object";case"string":return t.length>100?"string":`"${t.split('"').join('\\"')}"`;default:return String(t)}}function jo(t,e,n){switch(t){case P.DOUBLE:case P.FLOAT:if(e===null)return 0;if(e==="NaN")return Number.NaN;if(e==="Infinity")return Number.POSITIVE_INFINITY;if(e==="-Infinity")return Number.NEGATIVE_INFINITY;if(e===""||typeof e=="string"&&e.trim().length!==e.length||typeof e!="string"&&typeof e!="number")break;let r=Number(e);if(Number.isNaN(r)||!Number.isFinite(r))break;return t==P.FLOAT&&Ys(r),r;case P.INT32:case P.FIXED32:case P.SFIXED32:case P.SINT32:case P.UINT32:if(e===null)return 0;let o;if(typeof e=="number"?o=e:typeof e=="string"&&e.length>0&&e.trim().length===e.length&&(o=Number(e)),o===void 0)break;return t==P.UINT32?Go(o):dr(o),o;case P.INT64:case P.SFIXED64:case P.SINT64:if(e===null)return U.zero;if(typeof e!="number"&&typeof e!="string")break;let i=U.parse(e);return n?i.toString():i;case P.FIXED64:case P.UINT64:if(e===null)return U.zero;if(typeof e!="number"&&typeof e!="string")break;let s=U.uParse(e);return n?s.toString():s;case P.BOOL:if(e===null)return!1;if(typeof e!="boolean")break;return e;case P.STRING:if(e===null)return"";if(typeof e!="string")break;try{encodeURIComponent(e)}catch{throw new Error("invalid UTF8")}return e;case P.BYTES:if(e===null||e==="")return new Uint8Array(0);if(typeof e!="string")break;return en.dec(e)}throw new Error}function Jf(t,e,n){if(e===null)return 0;switch(typeof e){case"number":if(Number.isInteger(e))return e;break;case"string":let r=t.findName(e);if(r||n)return r?.no;break}throw new Error(`cannot decode enum ${t.typeName} from JSON: ${Rh(e)}`)}function jS(t,e,n,r){var o;if(e===void 0)return e;if(e===0&&!n)return;if(r)return e;if(t.typeName=="google.protobuf.NullValue")return null;let i=t.findNumber(e);return(o=i?.name)!==null&&o!==void 0?o:e}function kh(t,e,n){if(e!==void 0)switch(t){case P.INT32:case P.SFIXED32:case P.SINT32:case P.FIXED32:case P.UINT32:return Y(typeof e=="number"),e!=0||n?e:void 0;case P.FLOAT:case P.DOUBLE:return Y(typeof e=="number"),Number.isNaN(e)?"NaN":e===Number.POSITIVE_INFINITY?"Infinity":e===Number.NEGATIVE_INFINITY?"-Infinity":e!==0||n?e:void 0;case P.STRING:return Y(typeof e=="string"),e.length>0||n?e:void 0;case P.BOOL:return Y(typeof e=="boolean"),e||n?e:void 0;case P.UINT64:case P.FIXED64:case P.INT64:case P.SFIXED64:case P.SINT64:return Y(typeof e=="bigint"||typeof e=="string"||typeof e=="number"),n||e!=0?e.toString(10):void 0;case P.BYTES:return Y(e instanceof Uint8Array),n||e.byteLength>0?en.enc(e):void 0}}function Eh(){return aa((t,e)=>function(r,o,i){if(r.kind=="map"){let s={};switch(r.V.kind){case"scalar":for(let[l,c]of Object.entries(o)){let f=e(r.V.T,c,!0);Y(f!==void 0),s[l.toString()]=f}break;case"message":for(let[l,c]of Object.entries(o))s[l.toString()]=c.toJson(i);break;case"enum":let a=r.V.T;for(let[l,c]of Object.entries(o)){Y(c===void 0||typeof c=="number");let f=t(a,c,!0,i.enumAsInteger);Y(f!==void 0),s[l.toString()]=f}break}return i.emitDefaultValues||Object.keys(s).length>0?s:void 0}else if(r.repeated){let s=[];switch(r.kind){case"scalar":for(let a=0;a<o.length;a++)s.push(e(r.T,o[a],!0));break;case"enum":for(let a=0;a<o.length;a++)s.push(t(r.T,o[a],!0,i.enumAsInteger));break;case"message":for(let a=0;a<o.length;a++)s.push(xn(r.T,o[a]).toJson(i));break}return i.emitDefaultValues||s.length>0?s:void 0}else switch(r.kind){case"scalar":return e(r.T,o,!!r.oneof||r.opt||i.emitDefaultValues);case"enum":return t(r.T,o,!!r.oneof||r.opt||i.emitDefaultValues,i.enumAsInteger);case"message":return o!==void 0?xn(r.T,o).toJson(i):void 0}})}function ua(){return{setEnumType:Pf,initPartial(t,e){if(t===void 0)return;let n=e.getType();for(let r of n.fields.byMember()){let o=r.localName,i=e,s=t;if(s[o]!==void 0)switch(r.kind){case"oneof":let a=s[o].case;if(a===void 0)continue;let l=r.findField(a),c=s[o].value;l&&l.kind=="message"&&!(c instanceof l.T)?c=new l.T(c):l&&l.kind==="scalar"&&l.T===P.BYTES&&(c=$o(c)),i[o]={case:a,value:c};break;case"scalar":case"enum":let f=s[o];r.T===P.BYTES&&(f=r.repeated?f.map($o):$o(f)),i[o]=f;break;case"map":switch(r.V.kind){case"scalar":case"enum":if(r.V.T===P.BYTES)for(let[p,S]of Object.entries(s[o]))i[o][p]=$o(S);else Object.assign(i[o],s[o]);break;case"message":let m=r.V.T;for(let p of Object.keys(s[o])){let S=s[o][p];m.fieldWrapper||(S=new m(S)),i[o][p]=S}break}break;case"message":let y=r.T;if(r.repeated)i[o]=s[o].map(m=>m instanceof y?m:new y(m));else if(s[o]!==void 0){let m=s[o];y.fieldWrapper?y.typeName==="google.protobuf.BytesValue"?i[o]=$o(m):i[o]=m:i[o]=m instanceof y?m:new y(m)}break}}},equals(t,e,n){return e===n?!0:!e||!n?!1:t.fields.byMember().every(r=>{let o=e[r.localName],i=n[r.localName];if(r.repeated){if(o.length!==i.length)return!1;switch(r.kind){case"message":return o.every((s,a)=>r.T.equals(s,i[a]));case"scalar":return o.every((s,a)=>xt(r.T,s,i[a]));case"enum":return o.every((s,a)=>xt(P.INT32,s,i[a]))}throw new Error(`repeated cannot contain ${r.kind}`)}switch(r.kind){case"message":return r.T.equals(o,i);case"enum":return xt(P.INT32,o,i);case"scalar":return xt(r.T,o,i);case"oneof":if(o.case!==i.case)return!1;let s=r.findField(o.case);if(s===void 0)return!0;switch(s.kind){case"message":return s.T.equals(o.value,i.value);case"enum":return xt(P.INT32,o.value,i.value);case"scalar":return xt(s.T,o.value,i.value)}throw new Error(`oneof cannot contain ${s.kind}`);case"map":let a=Object.keys(o).concat(Object.keys(i));switch(r.V.kind){case"message":let l=r.V.T;return a.every(f=>l.equals(o[f],i[f]));case"enum":return a.every(f=>xt(P.INT32,o[f],i[f]));case"scalar":let c=r.V.T;return a.every(f=>xt(c,o[f],i[f]))}break}})},clone(t){let e=t.getType(),n=new e,r=n;for(let o of e.fields.byMember()){let i=t[o.localName],s;if(o.repeated)s=i.map(la);else if(o.kind=="map"){s=r[o.localName];for(let[a,l]of Object.entries(i))s[a]=la(l)}else o.kind=="oneof"?s=o.findField(i.case)?{case:i.case,value:la(i.value)}:{case:void 0}:s=la(i);r[o.localName]=s}return n}}}function la(t){if(t===void 0)return t;if(t instanceof v)return t.clone();if(t instanceof Uint8Array){let e=new Uint8Array(t.byteLength);return e.set(t),e}return t}function $o(t){return t instanceof Uint8Array?t:new Uint8Array(t)}var gr=class{constructor(e,n){this._fields=e,this._normalizer=n}findJsonName(e){if(!this.jsonNames){let n={};for(let r of this.list())n[r.jsonName]=n[r.name]=r;this.jsonNames=n}return this.jsonNames[e]}find(e){if(!this.numbers){let n={};for(let r of this.list())n[r.no]=r;this.numbers=n}return this.numbers[e]}list(){return this.all||(this.all=this._normalizer(this._fields)),this.all}byNumber(){return this.numbersAsc||(this.numbersAsc=this.list().concat().sort((e,n)=>e.no-n.no)),this.numbersAsc}byMember(){if(!this.members){this.members=[];let e=this.members,n;for(let r of this.list())r.oneof?r.oneof!==n&&(n=r.oneof,e.push(n)):e.push(r)}return this.members}};function Ho(t,e){let n=Ch(t);return e?n:YS(WS(n))}function xh(t){return Ho(t,!1)}var ca=Ch;function Ch(t){let e=!1,n=[];for(let r=0;r<t.length;r++){let o=t.charAt(r);switch(o){case"_":e=!0;break;case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":n.push(o),e=!1;break;default:e&&(e=!1,o=o.toUpperCase()),n.push(o);break}}return n.join("")}var $S=new Set(["constructor","toString","toJSON","valueOf"]),HS=new Set(["getType","clone","equals","fromBinary","fromJson","fromJsonString","toBinary","toJson","toJsonString","toObject"]),Nh=t=>`${t}$`,WS=t=>HS.has(t)?Nh(t):t,YS=t=>$S.has(t)?Nh(t):t;var yr=class{constructor(e){this.kind="oneof",this.repeated=!1,this.packed=!1,this.opt=!1,this.default=void 0,this.fields=[],this.name=e,this.localName=xh(e)}addField(e){Y(e.oneof===this,`field ${e.name} not one of ${this.name}`),this.fields.push(e)}findField(e){if(!this._lookup){this._lookup=Object.create(null);for(let n=0;n<this.fields.length;n++)this._lookup[this.fields[n].localName]=this.fields[n]}return this._lookup[e]}};var u=Ks("proto3",Eh(),Sh(),Object.assign(Object.assign({},ua()),{newFieldList(t){return new gr(t,KS)},initFields(t){for(let e of t.getType().fields.byMember()){if(e.opt)continue;let n=e.localName,r=t;if(e.repeated){r[n]=[];continue}switch(e.kind){case"oneof":r[n]={case:void 0};break;case"enum":r[n]=0;break;case"map":r[n]={};break;case"scalar":r[n]=zo(e.T,e.L);break;case"message":break}}}}));function KS(t){var e,n,r,o;let i=[],s;for(let a of typeof t=="function"?t():t){let l=a;if(l.localName=Ho(a.name,a.oneof!==void 0),l.jsonName=(e=a.jsonName)!==null&&e!==void 0?e:ca(a.name),l.repeated=(n=a.repeated)!==null&&n!==void 0?n:!1,a.kind=="scalar"&&(l.L=(r=a.L)!==null&&r!==void 0?r:He.BIGINT),a.oneof!==void 0){let c=typeof a.oneof=="string"?a.oneof:a.oneof.name;(!s||s.name!=c)&&(s=new yr(c)),l.oneof=s,s.addField(l)}a.kind=="message"&&(l.delimited=!1),l.packed=(o=a.packed)!==null&&o!==void 0?o:a.kind=="enum"||a.kind=="scalar"&&a.T!=P.BYTES&&a.T!=P.STRING,i.push(l)}return i}function Jh(){return Object.assign(Object.assign({},ra()),{writeMessage(t,e,n){let r=t.getType(),o;try{for(o of r.fields.byNumber()){let i,s=o.repeated,a=o.localName;if(o.oneof){let l=t[o.oneof.localName];if(l.case!==a)continue;i=l.value}else if(i=t[a],i===void 0&&!o.oneof&&!o.opt)throw new Error(`cannot encode field ${r.typeName}.${o.name} to binary: required field not set`);switch(o.kind){case"scalar":case"enum":let l=o.kind=="enum"?P.INT32:o.T;if(s)if(o.packed)ia(e,l,o.no,i);else for(let c of i)Ct(e,l,o.no,c,!0);else i!==void 0&&Ct(e,l,o.no,i,!0);break;case"message":if(s)for(let c of i)pr(e,n,o,c);else pr(e,n,o,i);break;case"map":for(let[c,f]of Object.entries(i))oa(e,n,o,c,f);break}}}catch(i){let s=o?`cannot encode field ${r.typeName}.${o?.name} to binary`:`cannot encode message ${r.typeName} to binary`,a=i instanceof Error?i.message:String(i);throw new Error(s+(a.length>0?`: ${a}`:""))}return n.writeUnknownFields&&this.writeUnknownFields(t,e),e}})}function Oh(){return aa((t,e)=>function(r,o,i){if(r.kind=="map"){let s={};switch(r.V.kind){case"scalar":for(let[l,c]of Object.entries(o)){let f=e(r.V.T,c,!0);Y(f!==void 0),s[l.toString()]=f}break;case"message":for(let[l,c]of Object.entries(o))s[l.toString()]=c.toJson(i);break;case"enum":let a=r.V.T;for(let[l,c]of Object.entries(o)){Y(c===void 0||typeof c=="number");let f=t(a,c,!0,i.enumAsInteger);Y(f!==void 0),s[l.toString()]=f}break}return i.emitDefaultValues||Object.keys(s).length>0?s:void 0}else if(r.repeated){let s=[];switch(r.kind){case"scalar":for(let a=0;a<o.length;a++)s.push(e(r.T,o[a],!0));break;case"enum":for(let a=0;a<o.length;a++)s.push(t(r.T,o[a],!0,i.enumAsInteger));break;case"message":for(let a=0;a<o.length;a++)s.push(o[a].toJson(i));break}return i.emitDefaultValues||s.length>0?s:void 0}else{if(o===void 0){if(!r.oneof&&!r.opt)throw"required field not set";return}switch(r.kind){case"scalar":return e(r.T,o,!0);case"enum":return t(r.T,o,!0,i.enumAsInteger);case"message":return xn(r.T,o).toJson(i)}}})}var w=Ks("proto2",Oh(),Jh(),Object.assign(Object.assign({},ua()),{newFieldList(t){return new gr(t,QS)},initFields(t){for(let e of t.getType().fields.byMember()){let n=e.localName,r=t;if(e.repeated){r[n]=[];continue}switch(e.kind){case"oneof":r[n]={case:void 0};break;case"map":r[n]={};break;case"scalar":case"enum":case"message":break}}}}));function QS(t){var e,n,r,o,i;let s=[],a;for(let l of typeof t=="function"?t():t){let c=l;if(c.localName=Ho(l.name,l.oneof!==void 0),c.jsonName=(e=l.jsonName)!==null&&e!==void 0?e:ca(l.name),c.repeated=(n=l.repeated)!==null&&n!==void 0?n:!1,l.kind=="scalar"&&(c.L=(r=l.L)!==null&&r!==void 0?r:He.BIGINT),l.oneof!==void 0){let f=typeof l.oneof=="string"?l.oneof:l.oneof.name;(!a||a.name!=f)&&(a=new yr(f)),c.oneof=a,a.addField(c)}l.kind=="message"&&(c.delimited=(o=l.delimited)!==null&&o!==void 0?o:!1),c.packed=(i=l.packed)!==null&&i!==void 0?i:!1,s.push(c)}return s}var J;(function(t){t[t.Unary=0]="Unary",t[t.ServerStreaming=1]="ServerStreaming",t[t.ClientStreaming=2]="ClientStreaming",t[t.BiDiStreaming=3]="BiDiStreaming"})(J||(J={}));var Wo;(function(t){t[t.NoSideEffects=1]="NoSideEffects",t[t.Idempotent=2]="Idempotent"})(Wo||(Wo={}));var tn;(function(t){t[t.EDITION_UNKNOWN=0]="EDITION_UNKNOWN",t[t.EDITION_PROTO2=998]="EDITION_PROTO2",t[t.EDITION_PROTO3=999]="EDITION_PROTO3",t[t.EDITION_2023=1e3]="EDITION_2023",t[t.EDITION_1_TEST_ONLY=1]="EDITION_1_TEST_ONLY",t[t.EDITION_2_TEST_ONLY=2]="EDITION_2_TEST_ONLY",t[t.EDITION_99997_TEST_ONLY=99997]="EDITION_99997_TEST_ONLY",t[t.EDITION_99998_TEST_ONLY=99998]="EDITION_99998_TEST_ONLY",t[t.EDITION_99999_TEST_ONLY=99999]="EDITION_99999_TEST_ONLY"})(tn||(tn={}));w.util.setEnumType(tn,"google.protobuf.Edition",[{no:0,name:"EDITION_UNKNOWN"},{no:998,name:"EDITION_PROTO2"},{no:999,name:"EDITION_PROTO3"},{no:1e3,name:"EDITION_2023"},{no:1,name:"EDITION_1_TEST_ONLY"},{no:2,name:"EDITION_2_TEST_ONLY"},{no:99997,name:"EDITION_99997_TEST_ONLY"},{no:99998,name:"EDITION_99998_TEST_ONLY"},{no:99999,name:"EDITION_99999_TEST_ONLY"}]);var Yo=class t extends v{constructor(e){super(),this.file=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Yo.runtime=w;Yo.typeName="google.protobuf.FileDescriptorSet";Yo.fields=w.util.newFieldList(()=>[{no:1,name:"file",kind:"message",T:hr,repeated:!0}]);var hr=class t extends v{constructor(e){super(),this.dependency=[],this.publicDependency=[],this.weakDependency=[],this.messageType=[],this.enumType=[],this.service=[],this.extension=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};hr.runtime=w;hr.typeName="google.protobuf.FileDescriptorProto";hr.fields=w.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"package",kind:"scalar",T:9,opt:!0},{no:3,name:"dependency",kind:"scalar",T:9,repeated:!0},{no:10,name:"public_dependency",kind:"scalar",T:5,repeated:!0},{no:11,name:"weak_dependency",kind:"scalar",T:5,repeated:!0},{no:4,name:"message_type",kind:"message",T:mt,repeated:!0},{no:5,name:"enum_type",kind:"message",T:Jt,repeated:!0},{no:6,name:"service",kind:"message",T:Er,repeated:!0},{no:7,name:"extension",kind:"message",T:nn,repeated:!0},{no:8,name:"options",kind:"message",T:Cr,opt:!0},{no:9,name:"source_code_info",kind:"message",T:qr,opt:!0},{no:12,name:"syntax",kind:"scalar",T:9,opt:!0},{no:14,name:"edition",kind:"enum",T:w.getEnumType(tn),opt:!0}]);var mt=class t extends v{constructor(e){super(),this.field=[],this.extension=[],this.nestedType=[],this.enumType=[],this.extensionRange=[],this.oneofDecl=[],this.reservedRange=[],this.reservedName=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};mt.runtime=w;mt.typeName="google.protobuf.DescriptorProto";mt.fields=w.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"field",kind:"message",T:nn,repeated:!0},{no:6,name:"extension",kind:"message",T:nn,repeated:!0},{no:3,name:"nested_type",kind:"message",T:mt,repeated:!0},{no:4,name:"enum_type",kind:"message",T:Jt,repeated:!0},{no:5,name:"extension_range",kind:"message",T:vr,repeated:!0},{no:8,name:"oneof_decl",kind:"message",T:Pr,repeated:!0},{no:7,name:"options",kind:"message",T:Nr,opt:!0},{no:9,name:"reserved_range",kind:"message",T:wr,repeated:!0},{no:10,name:"reserved_name",kind:"scalar",T:9,repeated:!0}]);var vr=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};vr.runtime=w;vr.typeName="google.protobuf.DescriptorProto.ExtensionRange";vr.fields=w.util.newFieldList(()=>[{no:1,name:"start",kind:"scalar",T:5,opt:!0},{no:2,name:"end",kind:"scalar",T:5,opt:!0},{no:3,name:"options",kind:"message",T:Sr,opt:!0}]);var wr=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};wr.runtime=w;wr.typeName="google.protobuf.DescriptorProto.ReservedRange";wr.fields=w.util.newFieldList(()=>[{no:1,name:"start",kind:"scalar",T:5,opt:!0},{no:2,name:"end",kind:"scalar",T:5,opt:!0}]);var Sr=class t extends v{constructor(e){super(),this.uninterpretedOption=[],this.declaration=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Sr.runtime=w;Sr.typeName="google.protobuf.ExtensionRangeOptions";Sr.fields=w.util.newFieldList(()=>[{no:999,name:"uninterpreted_option",kind:"message",T:Oe,repeated:!0},{no:2,name:"declaration",kind:"message",T:Tr,repeated:!0},{no:50,name:"features",kind:"message",T:Re,opt:!0},{no:3,name:"verification",kind:"enum",T:w.getEnumType(Ko),opt:!0,default:Ko.UNVERIFIED}]);var Ko;(function(t){t[t.DECLARATION=0]="DECLARATION",t[t.UNVERIFIED=1]="UNVERIFIED"})(Ko||(Ko={}));w.util.setEnumType(Ko,"google.protobuf.ExtensionRangeOptions.VerificationState",[{no:0,name:"DECLARATION"},{no:1,name:"UNVERIFIED"}]);var Tr=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Tr.runtime=w;Tr.typeName="google.protobuf.ExtensionRangeOptions.Declaration";Tr.fields=w.util.newFieldList(()=>[{no:1,name:"number",kind:"scalar",T:5,opt:!0},{no:2,name:"full_name",kind:"scalar",T:9,opt:!0},{no:3,name:"type",kind:"scalar",T:9,opt:!0},{no:5,name:"reserved",kind:"scalar",T:8,opt:!0},{no:6,name:"repeated",kind:"scalar",T:8,opt:!0}]);var nn=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};nn.runtime=w;nn.typeName="google.protobuf.FieldDescriptorProto";nn.fields=w.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:3,name:"number",kind:"scalar",T:5,opt:!0},{no:4,name:"label",kind:"enum",T:w.getEnumType(da),opt:!0},{no:5,name:"type",kind:"enum",T:w.getEnumType(fa),opt:!0},{no:6,name:"type_name",kind:"scalar",T:9,opt:!0},{no:2,name:"extendee",kind:"scalar",T:9,opt:!0},{no:7,name:"default_value",kind:"scalar",T:9,opt:!0},{no:9,name:"oneof_index",kind:"scalar",T:5,opt:!0},{no:10,name:"json_name",kind:"scalar",T:9,opt:!0},{no:8,name:"options",kind:"message",T:Jr,opt:!0},{no:17,name:"proto3_optional",kind:"scalar",T:8,opt:!0}]);var fa;(function(t){t[t.DOUBLE=1]="DOUBLE",t[t.FLOAT=2]="FLOAT",t[t.INT64=3]="INT64",t[t.UINT64=4]="UINT64",t[t.INT32=5]="INT32",t[t.FIXED64=6]="FIXED64",t[t.FIXED32=7]="FIXED32",t[t.BOOL=8]="BOOL",t[t.STRING=9]="STRING",t[t.GROUP=10]="GROUP",t[t.MESSAGE=11]="MESSAGE",t[t.BYTES=12]="BYTES",t[t.UINT32=13]="UINT32",t[t.ENUM=14]="ENUM",t[t.SFIXED32=15]="SFIXED32",t[t.SFIXED64=16]="SFIXED64",t[t.SINT32=17]="SINT32",t[t.SINT64=18]="SINT64"})(fa||(fa={}));w.util.setEnumType(fa,"google.protobuf.FieldDescriptorProto.Type",[{no:1,name:"TYPE_DOUBLE"},{no:2,name:"TYPE_FLOAT"},{no:3,name:"TYPE_INT64"},{no:4,name:"TYPE_UINT64"},{no:5,name:"TYPE_INT32"},{no:6,name:"TYPE_FIXED64"},{no:7,name:"TYPE_FIXED32"},{no:8,name:"TYPE_BOOL"},{no:9,name:"TYPE_STRING"},{no:10,name:"TYPE_GROUP"},{no:11,name:"TYPE_MESSAGE"},{no:12,name:"TYPE_BYTES"},{no:13,name:"TYPE_UINT32"},{no:14,name:"TYPE_ENUM"},{no:15,name:"TYPE_SFIXED32"},{no:16,name:"TYPE_SFIXED64"},{no:17,name:"TYPE_SINT32"},{no:18,name:"TYPE_SINT64"}]);var da;(function(t){t[t.OPTIONAL=1]="OPTIONAL",t[t.REPEATED=3]="REPEATED",t[t.REQUIRED=2]="REQUIRED"})(da||(da={}));w.util.setEnumType(da,"google.protobuf.FieldDescriptorProto.Label",[{no:1,name:"LABEL_OPTIONAL"},{no:3,name:"LABEL_REPEATED"},{no:2,name:"LABEL_REQUIRED"}]);var Pr=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Pr.runtime=w;Pr.typeName="google.protobuf.OneofDescriptorProto";Pr.fields=w.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"options",kind:"message",T:Ir,opt:!0}]);var Jt=class t extends v{constructor(e){super(),this.value=[],this.reservedRange=[],this.reservedName=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Jt.runtime=w;Jt.typeName="google.protobuf.EnumDescriptorProto";Jt.fields=w.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"value",kind:"message",T:Rr,repeated:!0},{no:3,name:"options",kind:"message",T:Mr,opt:!0},{no:4,name:"reserved_range",kind:"message",T:kr,repeated:!0},{no:5,name:"reserved_name",kind:"scalar",T:9,repeated:!0}]);var kr=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};kr.runtime=w;kr.typeName="google.protobuf.EnumDescriptorProto.EnumReservedRange";kr.fields=w.util.newFieldList(()=>[{no:1,name:"start",kind:"scalar",T:5,opt:!0},{no:2,name:"end",kind:"scalar",T:5,opt:!0}]);var Rr=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Rr.runtime=w;Rr.typeName="google.protobuf.EnumValueDescriptorProto";Rr.fields=w.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"number",kind:"scalar",T:5,opt:!0},{no:3,name:"options",kind:"message",T:Lr,opt:!0}]);var Er=class t extends v{constructor(e){super(),this.method=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Er.runtime=w;Er.typeName="google.protobuf.ServiceDescriptorProto";Er.fields=w.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"method",kind:"message",T:xr,repeated:!0},{no:3,name:"options",kind:"message",T:Br,opt:!0}]);var xr=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};xr.runtime=w;xr.typeName="google.protobuf.MethodDescriptorProto";xr.fields=w.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9,opt:!0},{no:2,name:"input_type",kind:"scalar",T:9,opt:!0},{no:3,name:"output_type",kind:"scalar",T:9,opt:!0},{no:4,name:"options",kind:"message",T:Fr,opt:!0},{no:5,name:"client_streaming",kind:"scalar",T:8,opt:!0,default:!1},{no:6,name:"server_streaming",kind:"scalar",T:8,opt:!0,default:!1}]);var Cr=class t extends v{constructor(e){super(),this.uninterpretedOption=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Cr.runtime=w;Cr.typeName="google.protobuf.FileOptions";Cr.fields=w.util.newFieldList(()=>[{no:1,name:"java_package",kind:"scalar",T:9,opt:!0},{no:8,name:"java_outer_classname",kind:"scalar",T:9,opt:!0},{no:10,name:"java_multiple_files",kind:"scalar",T:8,opt:!0,default:!1},{no:20,name:"java_generate_equals_and_hash",kind:"scalar",T:8,opt:!0},{no:27,name:"java_string_check_utf8",kind:"scalar",T:8,opt:!0,default:!1},{no:9,name:"optimize_for",kind:"enum",T:w.getEnumType(Qo),opt:!0,default:Qo.SPEED},{no:11,name:"go_package",kind:"scalar",T:9,opt:!0},{no:16,name:"cc_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:17,name:"java_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:18,name:"py_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:42,name:"php_generic_services",kind:"scalar",T:8,opt:!0,default:!1},{no:23,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:31,name:"cc_enable_arenas",kind:"scalar",T:8,opt:!0,default:!0},{no:36,name:"objc_class_prefix",kind:"scalar",T:9,opt:!0},{no:37,name:"csharp_namespace",kind:"scalar",T:9,opt:!0},{no:39,name:"swift_prefix",kind:"scalar",T:9,opt:!0},{no:40,name:"php_class_prefix",kind:"scalar",T:9,opt:!0},{no:41,name:"php_namespace",kind:"scalar",T:9,opt:!0},{no:44,name:"php_metadata_namespace",kind:"scalar",T:9,opt:!0},{no:45,name:"ruby_package",kind:"scalar",T:9,opt:!0},{no:50,name:"features",kind:"message",T:Re,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:Oe,repeated:!0}]);var Qo;(function(t){t[t.SPEED=1]="SPEED",t[t.CODE_SIZE=2]="CODE_SIZE",t[t.LITE_RUNTIME=3]="LITE_RUNTIME"})(Qo||(Qo={}));w.util.setEnumType(Qo,"google.protobuf.FileOptions.OptimizeMode",[{no:1,name:"SPEED"},{no:2,name:"CODE_SIZE"},{no:3,name:"LITE_RUNTIME"}]);var Nr=class t extends v{constructor(e){super(),this.uninterpretedOption=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Nr.runtime=w;Nr.typeName="google.protobuf.MessageOptions";Nr.fields=w.util.newFieldList(()=>[{no:1,name:"message_set_wire_format",kind:"scalar",T:8,opt:!0,default:!1},{no:2,name:"no_standard_descriptor_accessor",kind:"scalar",T:8,opt:!0,default:!1},{no:3,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:7,name:"map_entry",kind:"scalar",T:8,opt:!0},{no:11,name:"deprecated_legacy_json_field_conflicts",kind:"scalar",T:8,opt:!0},{no:12,name:"features",kind:"message",T:Re,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:Oe,repeated:!0}]);var Jr=class t extends v{constructor(e){super(),this.targets=[],this.editionDefaults=[],this.uninterpretedOption=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Jr.runtime=w;Jr.typeName="google.protobuf.FieldOptions";Jr.fields=w.util.newFieldList(()=>[{no:1,name:"ctype",kind:"enum",T:w.getEnumType(Xo),opt:!0,default:Xo.STRING},{no:2,name:"packed",kind:"scalar",T:8,opt:!0},{no:6,name:"jstype",kind:"enum",T:w.getEnumType(Zo),opt:!0,default:Zo.JS_NORMAL},{no:5,name:"lazy",kind:"scalar",T:8,opt:!0,default:!1},{no:15,name:"unverified_lazy",kind:"scalar",T:8,opt:!0,default:!1},{no:3,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:10,name:"weak",kind:"scalar",T:8,opt:!0,default:!1},{no:16,name:"debug_redact",kind:"scalar",T:8,opt:!0,default:!1},{no:17,name:"retention",kind:"enum",T:w.getEnumType(ma),opt:!0},{no:19,name:"targets",kind:"enum",T:w.getEnumType(pa),repeated:!0},{no:20,name:"edition_defaults",kind:"message",T:Or,repeated:!0},{no:21,name:"features",kind:"message",T:Re,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:Oe,repeated:!0}]);var Xo;(function(t){t[t.STRING=0]="STRING",t[t.CORD=1]="CORD",t[t.STRING_PIECE=2]="STRING_PIECE"})(Xo||(Xo={}));w.util.setEnumType(Xo,"google.protobuf.FieldOptions.CType",[{no:0,name:"STRING"},{no:1,name:"CORD"},{no:2,name:"STRING_PIECE"}]);var Zo;(function(t){t[t.JS_NORMAL=0]="JS_NORMAL",t[t.JS_STRING=1]="JS_STRING",t[t.JS_NUMBER=2]="JS_NUMBER"})(Zo||(Zo={}));w.util.setEnumType(Zo,"google.protobuf.FieldOptions.JSType",[{no:0,name:"JS_NORMAL"},{no:1,name:"JS_STRING"},{no:2,name:"JS_NUMBER"}]);var ma;(function(t){t[t.RETENTION_UNKNOWN=0]="RETENTION_UNKNOWN",t[t.RETENTION_RUNTIME=1]="RETENTION_RUNTIME",t[t.RETENTION_SOURCE=2]="RETENTION_SOURCE"})(ma||(ma={}));w.util.setEnumType(ma,"google.protobuf.FieldOptions.OptionRetention",[{no:0,name:"RETENTION_UNKNOWN"},{no:1,name:"RETENTION_RUNTIME"},{no:2,name:"RETENTION_SOURCE"}]);var pa;(function(t){t[t.TARGET_TYPE_UNKNOWN=0]="TARGET_TYPE_UNKNOWN",t[t.TARGET_TYPE_FILE=1]="TARGET_TYPE_FILE",t[t.TARGET_TYPE_EXTENSION_RANGE=2]="TARGET_TYPE_EXTENSION_RANGE",t[t.TARGET_TYPE_MESSAGE=3]="TARGET_TYPE_MESSAGE",t[t.TARGET_TYPE_FIELD=4]="TARGET_TYPE_FIELD",t[t.TARGET_TYPE_ONEOF=5]="TARGET_TYPE_ONEOF",t[t.TARGET_TYPE_ENUM=6]="TARGET_TYPE_ENUM",t[t.TARGET_TYPE_ENUM_ENTRY=7]="TARGET_TYPE_ENUM_ENTRY",t[t.TARGET_TYPE_SERVICE=8]="TARGET_TYPE_SERVICE",t[t.TARGET_TYPE_METHOD=9]="TARGET_TYPE_METHOD"})(pa||(pa={}));w.util.setEnumType(pa,"google.protobuf.FieldOptions.OptionTargetType",[{no:0,name:"TARGET_TYPE_UNKNOWN"},{no:1,name:"TARGET_TYPE_FILE"},{no:2,name:"TARGET_TYPE_EXTENSION_RANGE"},{no:3,name:"TARGET_TYPE_MESSAGE"},{no:4,name:"TARGET_TYPE_FIELD"},{no:5,name:"TARGET_TYPE_ONEOF"},{no:6,name:"TARGET_TYPE_ENUM"},{no:7,name:"TARGET_TYPE_ENUM_ENTRY"},{no:8,name:"TARGET_TYPE_SERVICE"},{no:9,name:"TARGET_TYPE_METHOD"}]);var Or=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Or.runtime=w;Or.typeName="google.protobuf.FieldOptions.EditionDefault";Or.fields=w.util.newFieldList(()=>[{no:3,name:"edition",kind:"enum",T:w.getEnumType(tn),opt:!0},{no:2,name:"value",kind:"scalar",T:9,opt:!0}]);var Ir=class t extends v{constructor(e){super(),this.uninterpretedOption=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Ir.runtime=w;Ir.typeName="google.protobuf.OneofOptions";Ir.fields=w.util.newFieldList(()=>[{no:1,name:"features",kind:"message",T:Re,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:Oe,repeated:!0}]);var Mr=class t extends v{constructor(e){super(),this.uninterpretedOption=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Mr.runtime=w;Mr.typeName="google.protobuf.EnumOptions";Mr.fields=w.util.newFieldList(()=>[{no:2,name:"allow_alias",kind:"scalar",T:8,opt:!0},{no:3,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:6,name:"deprecated_legacy_json_field_conflicts",kind:"scalar",T:8,opt:!0},{no:7,name:"features",kind:"message",T:Re,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:Oe,repeated:!0}]);var Lr=class t extends v{constructor(e){super(),this.uninterpretedOption=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Lr.runtime=w;Lr.typeName="google.protobuf.EnumValueOptions";Lr.fields=w.util.newFieldList(()=>[{no:1,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:2,name:"features",kind:"message",T:Re,opt:!0},{no:3,name:"debug_redact",kind:"scalar",T:8,opt:!0,default:!1},{no:999,name:"uninterpreted_option",kind:"message",T:Oe,repeated:!0}]);var Br=class t extends v{constructor(e){super(),this.uninterpretedOption=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Br.runtime=w;Br.typeName="google.protobuf.ServiceOptions";Br.fields=w.util.newFieldList(()=>[{no:34,name:"features",kind:"message",T:Re,opt:!0},{no:33,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:999,name:"uninterpreted_option",kind:"message",T:Oe,repeated:!0}]);var Fr=class t extends v{constructor(e){super(),this.uninterpretedOption=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Fr.runtime=w;Fr.typeName="google.protobuf.MethodOptions";Fr.fields=w.util.newFieldList(()=>[{no:33,name:"deprecated",kind:"scalar",T:8,opt:!0,default:!1},{no:34,name:"idempotency_level",kind:"enum",T:w.getEnumType(ei),opt:!0,default:ei.IDEMPOTENCY_UNKNOWN},{no:35,name:"features",kind:"message",T:Re,opt:!0},{no:999,name:"uninterpreted_option",kind:"message",T:Oe,repeated:!0}]);var ei;(function(t){t[t.IDEMPOTENCY_UNKNOWN=0]="IDEMPOTENCY_UNKNOWN",t[t.NO_SIDE_EFFECTS=1]="NO_SIDE_EFFECTS",t[t.IDEMPOTENT=2]="IDEMPOTENT"})(ei||(ei={}));w.util.setEnumType(ei,"google.protobuf.MethodOptions.IdempotencyLevel",[{no:0,name:"IDEMPOTENCY_UNKNOWN"},{no:1,name:"NO_SIDE_EFFECTS"},{no:2,name:"IDEMPOTENT"}]);var Oe=class t extends v{constructor(e){super(),this.name=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Oe.runtime=w;Oe.typeName="google.protobuf.UninterpretedOption";Oe.fields=w.util.newFieldList(()=>[{no:2,name:"name",kind:"message",T:Ar,repeated:!0},{no:3,name:"identifier_value",kind:"scalar",T:9,opt:!0},{no:4,name:"positive_int_value",kind:"scalar",T:4,opt:!0},{no:5,name:"negative_int_value",kind:"scalar",T:3,opt:!0},{no:6,name:"double_value",kind:"scalar",T:1,opt:!0},{no:7,name:"string_value",kind:"scalar",T:12,opt:!0},{no:8,name:"aggregate_value",kind:"scalar",T:9,opt:!0}]);var Ar=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Ar.runtime=w;Ar.typeName="google.protobuf.UninterpretedOption.NamePart";Ar.fields=w.util.newFieldList(()=>[{no:1,name:"name_part",kind:"scalar",T:9},{no:2,name:"is_extension",kind:"scalar",T:8}]);var Re=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Re.runtime=w;Re.typeName="google.protobuf.FeatureSet";Re.fields=w.util.newFieldList(()=>[{no:1,name:"field_presence",kind:"enum",T:w.getEnumType(ga),opt:!0},{no:2,name:"enum_type",kind:"enum",T:w.getEnumType(ya),opt:!0},{no:3,name:"repeated_field_encoding",kind:"enum",T:w.getEnumType(ha),opt:!0},{no:4,name:"utf8_validation",kind:"enum",T:w.getEnumType(va),opt:!0},{no:5,name:"message_encoding",kind:"enum",T:w.getEnumType(wa),opt:!0},{no:6,name:"json_format",kind:"enum",T:w.getEnumType(Sa),opt:!0}]);var ga;(function(t){t[t.FIELD_PRESENCE_UNKNOWN=0]="FIELD_PRESENCE_UNKNOWN",t[t.EXPLICIT=1]="EXPLICIT",t[t.IMPLICIT=2]="IMPLICIT",t[t.LEGACY_REQUIRED=3]="LEGACY_REQUIRED"})(ga||(ga={}));w.util.setEnumType(ga,"google.protobuf.FeatureSet.FieldPresence",[{no:0,name:"FIELD_PRESENCE_UNKNOWN"},{no:1,name:"EXPLICIT"},{no:2,name:"IMPLICIT"},{no:3,name:"LEGACY_REQUIRED"}]);var ya;(function(t){t[t.ENUM_TYPE_UNKNOWN=0]="ENUM_TYPE_UNKNOWN",t[t.OPEN=1]="OPEN",t[t.CLOSED=2]="CLOSED"})(ya||(ya={}));w.util.setEnumType(ya,"google.protobuf.FeatureSet.EnumType",[{no:0,name:"ENUM_TYPE_UNKNOWN"},{no:1,name:"OPEN"},{no:2,name:"CLOSED"}]);var ha;(function(t){t[t.REPEATED_FIELD_ENCODING_UNKNOWN=0]="REPEATED_FIELD_ENCODING_UNKNOWN",t[t.PACKED=1]="PACKED",t[t.EXPANDED=2]="EXPANDED"})(ha||(ha={}));w.util.setEnumType(ha,"google.protobuf.FeatureSet.RepeatedFieldEncoding",[{no:0,name:"REPEATED_FIELD_ENCODING_UNKNOWN"},{no:1,name:"PACKED"},{no:2,name:"EXPANDED"}]);var va;(function(t){t[t.UTF8_VALIDATION_UNKNOWN=0]="UTF8_VALIDATION_UNKNOWN",t[t.NONE=1]="NONE",t[t.VERIFY=2]="VERIFY"})(va||(va={}));w.util.setEnumType(va,"google.protobuf.FeatureSet.Utf8Validation",[{no:0,name:"UTF8_VALIDATION_UNKNOWN"},{no:1,name:"NONE"},{no:2,name:"VERIFY"}]);var wa;(function(t){t[t.MESSAGE_ENCODING_UNKNOWN=0]="MESSAGE_ENCODING_UNKNOWN",t[t.LENGTH_PREFIXED=1]="LENGTH_PREFIXED",t[t.DELIMITED=2]="DELIMITED"})(wa||(wa={}));w.util.setEnumType(wa,"google.protobuf.FeatureSet.MessageEncoding",[{no:0,name:"MESSAGE_ENCODING_UNKNOWN"},{no:1,name:"LENGTH_PREFIXED"},{no:2,name:"DELIMITED"}]);var Sa;(function(t){t[t.JSON_FORMAT_UNKNOWN=0]="JSON_FORMAT_UNKNOWN",t[t.ALLOW=1]="ALLOW",t[t.LEGACY_BEST_EFFORT=2]="LEGACY_BEST_EFFORT"})(Sa||(Sa={}));w.util.setEnumType(Sa,"google.protobuf.FeatureSet.JsonFormat",[{no:0,name:"JSON_FORMAT_UNKNOWN"},{no:1,name:"ALLOW"},{no:2,name:"LEGACY_BEST_EFFORT"}]);var ti=class t extends v{constructor(e){super(),this.defaults=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};ti.runtime=w;ti.typeName="google.protobuf.FeatureSetDefaults";ti.fields=w.util.newFieldList(()=>[{no:1,name:"defaults",kind:"message",T:Ur,repeated:!0},{no:4,name:"minimum_edition",kind:"enum",T:w.getEnumType(tn),opt:!0},{no:5,name:"maximum_edition",kind:"enum",T:w.getEnumType(tn),opt:!0}]);var Ur=class t extends v{constructor(e){super(),w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Ur.runtime=w;Ur.typeName="google.protobuf.FeatureSetDefaults.FeatureSetEditionDefault";Ur.fields=w.util.newFieldList(()=>[{no:3,name:"edition",kind:"enum",T:w.getEnumType(tn),opt:!0},{no:2,name:"features",kind:"message",T:Re,opt:!0}]);var qr=class t extends v{constructor(e){super(),this.location=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};qr.runtime=w;qr.typeName="google.protobuf.SourceCodeInfo";qr.fields=w.util.newFieldList(()=>[{no:1,name:"location",kind:"message",T:_r,repeated:!0}]);var _r=class t extends v{constructor(e){super(),this.path=[],this.span=[],this.leadingDetachedComments=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};_r.runtime=w;_r.typeName="google.protobuf.SourceCodeInfo.Location";_r.fields=w.util.newFieldList(()=>[{no:1,name:"path",kind:"scalar",T:5,repeated:!0,packed:!0},{no:2,name:"span",kind:"scalar",T:5,repeated:!0,packed:!0},{no:3,name:"leading_comments",kind:"scalar",T:9,opt:!0},{no:4,name:"trailing_comments",kind:"scalar",T:9,opt:!0},{no:6,name:"leading_detached_comments",kind:"scalar",T:9,repeated:!0}]);var ni=class t extends v{constructor(e){super(),this.annotation=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};ni.runtime=w;ni.typeName="google.protobuf.GeneratedCodeInfo";ni.fields=w.util.newFieldList(()=>[{no:1,name:"annotation",kind:"message",T:Dr,repeated:!0}]);var Dr=class t extends v{constructor(e){super(),this.path=[],w.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return w.util.equals(t,e,n)}};Dr.runtime=w;Dr.typeName="google.protobuf.GeneratedCodeInfo.Annotation";Dr.fields=w.util.newFieldList(()=>[{no:1,name:"path",kind:"scalar",T:5,repeated:!0,packed:!0},{no:2,name:"source_file",kind:"scalar",T:9,opt:!0},{no:3,name:"begin",kind:"scalar",T:5,opt:!0},{no:4,name:"end",kind:"scalar",T:5,opt:!0},{no:5,name:"semantic",kind:"enum",T:w.getEnumType(Ta),opt:!0}]);var Ta;(function(t){t[t.NONE=0]="NONE",t[t.SET=1]="SET",t[t.ALIAS=2]="ALIAS"})(Ta||(Ta={}));w.util.setEnumType(Ta,"google.protobuf.GeneratedCodeInfo.Annotation.Semantic",[{no:0,name:"NONE"},{no:1,name:"SET"},{no:2,name:"ALIAS"}]);var oe=class t extends v{constructor(e){super(),u.util.initPartial(e,this)}static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}};oe.runtime=u;oe.typeName="google.protobuf.Empty";oe.fields=u.util.newFieldList(()=>[]);var Pa=class t extends v{secret="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.VerifyUserRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"secret",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ka=class t extends v{secret="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.GroupInfoRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"secret",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ra=class t extends v{groupId="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.GroupID";static fields=u.util.newFieldList(()=>[{no:1,name:"group_id",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ea=class t extends v{contentId="";groupId="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.ShareRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"content_id",kind:"scalar",T:9},{no:2,name:"group_id",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ri=class t extends v{secret="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.GroupInvite";static fields=u.util.newFieldList(()=>[{no:1,name:"secret",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},xa=class t extends v{groups=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.Groups";static fields=u.util.newFieldList(()=>[{no:1,name:"groups",kind:"message",T:Ot,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ih=class t extends v{text="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.AnalyzeConversationRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},pt=class t extends v{email="";password="";username="";config;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.User";static fields=u.util.newFieldList(()=>[{no:1,name:"email",kind:"scalar",T:9},{no:2,name:"password",kind:"scalar",T:9},{no:3,name:"username",kind:"scalar",T:9},{no:4,name:"config",kind:"message",T:oi}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ot=class t extends v{id="";name="";users=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.Group";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"users",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},oi=class t extends v{domainWhitelist=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.Config";static fields=u.util.newFieldList(()=>[{no:1,name:"domain_whitelist",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Mh=class t extends v{constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="user.LoginResponse";static fields=u.util.newFieldList(()=>[]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}};var Ca=class t extends v{content;site;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.TypesResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:Da},{no:2,name:"site",kind:"message",T:Da}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Na=class t extends v{contentTypes=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.GetSourcesRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"content_types",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ja=class t extends v{captureDevice=0;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.VoiceInputRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"capture_device",kind:"scalar",T:5}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Oa=class t extends v{segment;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.VoiceInputResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"segment",kind:"message",T:br}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ia=class t extends v{parent="";children=[];connect=!1;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.RelateRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"parent",kind:"scalar",T:9},{no:2,name:"children",kind:"scalar",T:9,repeated:!0},{no:3,name:"connect",kind:"scalar",T:8}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ma=class t extends v{sources=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Sources";static fields=u.util.newFieldList(()=>[{no:1,name:"sources",kind:"message",T:Of,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Of=class t extends v{source;displayContent=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.EnumeratedSource";static fields=u.util.newFieldList(()=>[{no:1,name:"source",kind:"message",T:Mf},{no:2,name:"display_content",kind:"message",T:If,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},If=class t extends v{title="";description="";type="";content;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.DisplayContent";static fields=u.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"description",kind:"scalar",T:9},{no:3,name:"type",kind:"scalar",T:9},{no:4,name:"content",kind:"message",T:qe}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Mf=class t extends v{name="";type={case:void 0};constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Source";static fields=u.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"server",kind:"message",T:Lf,oneof:"type"},{no:3,name:"folder",kind:"message",T:Bf,oneof:"type"}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Lf=class t extends v{constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Server";static fields=u.util.newFieldList(()=>[]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Bf=class t extends v{path="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Folder";static fields=u.util.newFieldList(()=>[{no:2,name:"path",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},La=class t extends v{contentId="";tags=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.SetTagsRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"content_id",kind:"scalar",T:9},{no:2,name:"tags",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ba=class t extends v{groupId="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.TagRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"group_id",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Fa=class t extends v{tags=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Tags";static fields=u.util.newFieldList(()=>[{no:1,name:"tags",kind:"message",T:Aa,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Aa=class t extends v{name="";subTags=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Tag";static fields=u.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"sub_tags",kind:"message",T:t,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},rn=class t extends v{contentIds=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.ContentIDs";static fields=u.util.newFieldList(()=>[{no:1,name:"content_ids",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ii=class t extends v{content;tags=[];related=[];parents=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Contents";static fields=u.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:qe},{no:2,name:"tags",kind:"scalar",T:9,repeated:!0},{no:3,name:"related",kind:"message",T:qe,repeated:!0},{no:4,name:"parents",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ua=class t extends v{query="";page=0;contentID="";groupID="";tags=[];contentTypes=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Query";static fields=u.util.newFieldList(()=>[{no:1,name:"query",kind:"scalar",T:9},{no:2,name:"page",kind:"scalar",T:13},{no:3,name:"contentID",kind:"scalar",T:9},{no:4,name:"groupID",kind:"scalar",T:9},{no:5,name:"tags",kind:"scalar",T:9,repeated:!0},{no:6,name:"content_types",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},qa=class t extends v{storedContent=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Results";static fields=u.util.newFieldList(()=>[{no:1,name:"storedContent",kind:"message",T:Ff,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ff=class t extends v{content;id="";related=[];title="";description="";image="";url="";user;tags=[];preview="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.StoredContent";static fields=u.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:qe},{no:2,name:"id",kind:"scalar",T:9},{no:3,name:"related",kind:"message",T:qe,repeated:!0},{no:4,name:"title",kind:"scalar",T:9},{no:5,name:"description",kind:"scalar",T:9},{no:6,name:"image",kind:"scalar",T:9},{no:7,name:"url",kind:"scalar",T:9},{no:9,name:"user",kind:"message",T:pt},{no:10,name:"tags",kind:"message",T:Aa,repeated:!0},{no:11,name:"preview",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Lh=class t extends v{from="";to="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Edge";static fields=u.util.newFieldList(()=>[{no:1,name:"from",kind:"scalar",T:9},{no:2,name:"to",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},qe=class t extends v{tags=[];createdAt="";uri="";id="";type={case:void 0};constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Content";static fields=u.util.newFieldList(()=>[{no:1,name:"tags",kind:"scalar",T:9,repeated:!0},{no:2,name:"created_at",kind:"scalar",T:9},{no:3,name:"uri",kind:"scalar",T:9},{no:4,name:"id",kind:"scalar",T:9},{no:6,name:"data",kind:"message",T:si,oneof:"type"},{no:7,name:"normalized",kind:"message",T:Af,oneof:"type"},{no:8,name:"transformed",kind:"message",T:Uf,oneof:"type"},{no:9,name:"post",kind:"message",T:_a,oneof:"type"},{no:10,name:"site",kind:"message",T:Wf,oneof:"type"}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},_a=class t extends v{title="";summary="";content="";authors=[];draft=!1;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Post";static fields=u.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"summary",kind:"scalar",T:9},{no:3,name:"content",kind:"scalar",T:9},{no:4,name:"authors",kind:"scalar",T:9,repeated:!0},{no:6,name:"draft",kind:"scalar",T:8}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Bh=class t extends v{url="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.GitRepo";static fields=u.util.newFieldList(()=>[{no:1,name:"url",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},si=class t extends v{type={case:void 0};constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Data";static fields=u.util.newFieldList(()=>[{no:4,name:"text",kind:"message",T:zf,oneof:"type"},{no:5,name:"file",kind:"message",T:Gf,oneof:"type"},{no:6,name:"url",kind:"message",T:jf,oneof:"type"}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Af=class t extends v{type={case:void 0};constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Normalized";static fields=u.util.newFieldList(()=>[{no:3,name:"article",kind:"message",T:qf,oneof:"type"},{no:4,name:"html",kind:"message",T:_f,oneof:"type"},{no:6,name:"transcript",kind:"message",T:Hf,oneof:"type"},{no:7,name:"readme",kind:"message",T:Df,oneof:"type"}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Uf=class t extends v{type={case:void 0};constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Transformed";static fields=u.util.newFieldList(()=>[{no:1,name:"summary",kind:"message",T:bf,oneof:"type"},{no:2,name:"categories",kind:"message",T:Vf,oneof:"type"}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},qf=class t extends v{title="";author="";length=0;excerpt="";siteName="";image="";favicon="";text="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Article";static fields=u.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"author",kind:"scalar",T:9},{no:3,name:"length",kind:"scalar",T:5},{no:4,name:"excerpt",kind:"scalar",T:9},{no:5,name:"site_name",kind:"scalar",T:9},{no:6,name:"image",kind:"scalar",T:9},{no:7,name:"favicon",kind:"scalar",T:9},{no:8,name:"text",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},_f=class t extends v{html="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.HTML";static fields=u.util.newFieldList(()=>[{no:1,name:"html",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Df=class t extends v{data="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.ReadMe";static fields=u.util.newFieldList(()=>[{no:1,name:"data",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},bf=class t extends v{summary="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Summary";static fields=u.util.newFieldList(()=>[{no:1,name:"summary",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Vf=class t extends v{categories=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Categories";static fields=u.util.newFieldList(()=>[{no:1,name:"categories",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Gf=class t extends v{file="";data=new Uint8Array(0);url="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.File";static fields=u.util.newFieldList(()=>[{no:1,name:"file",kind:"scalar",T:9},{no:2,name:"data",kind:"scalar",T:12},{no:3,name:"url",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},zf=class t extends v{data="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Text";static fields=u.util.newFieldList(()=>[{no:1,name:"data",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},jf=class t extends v{url="";crawl=!1;title="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.URL";static fields=u.util.newFieldList(()=>[{no:1,name:"url",kind:"scalar",T:9},{no:2,name:"crawl",kind:"scalar",T:8},{no:3,name:"title",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},$f=class t extends v{id=0;startTime=U.zero;endTime=U.zero;text="";p="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Token";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:13},{no:2,name:"start_time",kind:"scalar",T:4},{no:3,name:"end_time",kind:"scalar",T:4},{no:4,name:"text",kind:"scalar",T:9},{no:5,name:"p",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},br=class t extends v{num=0;tokens=[];text="";startTime=U.zero;endTime=U.zero;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Segment";static fields=u.util.newFieldList(()=>[{no:1,name:"num",kind:"scalar",T:13},{no:2,name:"tokens",kind:"message",T:$f,repeated:!0},{no:3,name:"text",kind:"scalar",T:9},{no:4,name:"start_time",kind:"scalar",T:4},{no:5,name:"end_time",kind:"scalar",T:4}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Hf=class t extends v{id="";name="";segments=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Transcript";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"segments",kind:"message",T:br,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Da=class t extends v{msg;descLookup={};enumLookup={};packageName="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.GRPCTypeInfo";static fields=u.util.newFieldList(()=>[{no:1,name:"msg",kind:"message",T:mt},{no:3,name:"desc_lookup",kind:"map",K:9,V:{kind:"message",T:mt}},{no:4,name:"enum_lookup",kind:"map",K:9,V:{kind:"message",T:Jt}},{no:6,name:"package_name",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Wf=class t extends v{hugoConfig;postTags=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.Site";static fields=u.util.newFieldList(()=>[{no:1,name:"hugo_config",kind:"message",T:Yf},{no:2,name:"post_tags",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Yf=class t extends v{publishDir="";baseUrl="";title="";paginate=0;theme=[];enableInlineShortcodes=!1;enableRobotsTxt=!1;buildDrafts=!1;buildFuture=!1;buildExpired=!1;enableEmoji=!1;pygmentsUseClasses=!1;mainSections=[];minify;languages={};outputs={};params;markup;services;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.HugoConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"publish_dir",kind:"scalar",T:9},{no:2,name:"base_url",kind:"scalar",T:9},{no:3,name:"title",kind:"scalar",T:9},{no:4,name:"paginate",kind:"scalar",T:5},{no:5,name:"theme",kind:"scalar",T:9,repeated:!0},{no:6,name:"enable_inline_shortcodes",kind:"scalar",T:8},{no:7,name:"enable_robots_txt",kind:"scalar",T:8},{no:8,name:"build_drafts",kind:"scalar",T:8},{no:9,name:"build_future",kind:"scalar",T:8},{no:10,name:"build_expired",kind:"scalar",T:8},{no:11,name:"enable_emoji",kind:"scalar",T:8},{no:12,name:"pygments_use_classes",kind:"scalar",T:8},{no:13,name:"main_sections",kind:"scalar",T:9,repeated:!0},{no:14,name:"minify",kind:"message",T:Kf},{no:15,name:"languages",kind:"map",K:9,V:{kind:"message",T:Qf}},{no:16,name:"outputs",kind:"map",K:9,V:{kind:"message",T:sd}},{no:17,name:"params",kind:"message",T:ld},{no:18,name:"markup",kind:"message",T:td},{no:19,name:"services",kind:"message",T:id}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Kf=class t extends v{disableXml=!1;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.MinifyConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"disable_xml",kind:"scalar",T:8}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Qf=class t extends v{languageName="";weight=0;title="";taxonomies={};menu={};params={};constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.LanguageConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"language_name",kind:"scalar",T:9},{no:2,name:"weight",kind:"scalar",T:5},{no:3,name:"title",kind:"scalar",T:9},{no:4,name:"taxonomies",kind:"map",K:9,V:{kind:"scalar",T:9}},{no:5,name:"menu",kind:"map",K:9,V:{kind:"message",T:ad}},{no:6,name:"params",kind:"map",K:9,V:{kind:"scalar",T:9}}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Xf=class t extends v{name="";url="";weight=0;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.MenuItem";static fields=u.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"url",kind:"scalar",T:9},{no:3,name:"weight",kind:"scalar",T:5}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Zf=class t extends v{url="";text="";appendFilePath=!1;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.EditPostConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"url",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9},{no:3,name:"append_file_path",kind:"scalar",T:8}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ed=class t extends v{disableHljs=!1;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.AssetsConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"disable_hljs",kind:"scalar",T:8}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},td=class t extends v{goldmark;highlight;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.MarkupConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"goldmark",kind:"message",T:nd},{no:2,name:"highlight",kind:"message",T:od}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},nd=class t extends v{renderer;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.GoldmarkConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"renderer",kind:"message",T:rd}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},rd=class t extends v{unsafe=!1;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.RendererConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"unsafe",kind:"scalar",T:8}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},od=class t extends v{noClasses=!1;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.HighlightConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"no_classes",kind:"scalar",T:8}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},id=class t extends v{instagram;twitter;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.ServicesConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"instagram",kind:"message",T:ba},{no:2,name:"twitter",kind:"message",T:ba}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ba=class t extends v{disableInlineCss=!1;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.ServiceConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"disable_inline_css",kind:"scalar",T:8}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},sd=class t extends v{values=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.repeated_string";static fields=u.util.newFieldList(()=>[{no:1,name:"values",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ad=class t extends v{items=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.repeated_menu_item";static fields=u.util.newFieldList(()=>[{no:1,name:"items",kind:"message",T:Xf,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ld=class t extends v{env="";description="";author="";defaultTheme="";showShareButtons=!1;showReadingTime=!1;displayFullLangName=!1;showPostNavLinks=!1;showBreadCrumbs=!1;showCodeCopyButtons=!1;showRssButtonInSectionTermList=!1;showAllPagesInArchive=!1;showPageNums=!1;showToc=!1;images=[];profileMode;homeInfoParams;socialIcons=[];editPost;assets;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.ParamsConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"env",kind:"scalar",T:9},{no:2,name:"description",kind:"scalar",T:9},{no:3,name:"author",kind:"scalar",T:9},{no:4,name:"default_theme",kind:"scalar",T:9},{no:5,name:"show_share_buttons",kind:"scalar",T:8},{no:6,name:"show_reading_time",kind:"scalar",T:8},{no:7,name:"display_full_lang_name",kind:"scalar",T:8},{no:8,name:"show_post_nav_links",kind:"scalar",T:8},{no:9,name:"show_bread_crumbs",kind:"scalar",T:8},{no:10,name:"show_code_copy_buttons",kind:"scalar",T:8},{no:11,name:"show_rss_button_in_section_term_list",kind:"scalar",T:8},{no:12,name:"show_all_pages_in_archive",kind:"scalar",T:8},{no:13,name:"show_page_nums",kind:"scalar",T:8},{no:14,name:"show_toc",kind:"scalar",T:8},{no:15,name:"images",kind:"scalar",T:9,repeated:!0},{no:16,name:"profile_mode",kind:"message",T:ud},{no:17,name:"home_info_params",kind:"message",T:fd},{no:18,name:"social_icons",kind:"message",T:dd,repeated:!0},{no:19,name:"edit_post",kind:"message",T:Zf},{no:20,name:"assets",kind:"message",T:ed}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ud=class t extends v{enabled=!1;title="";imageUrl="";imageTitle="";buttons=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.ProfileModeConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"enabled",kind:"scalar",T:8},{no:2,name:"title",kind:"scalar",T:9},{no:3,name:"image_url",kind:"scalar",T:9},{no:4,name:"image_title",kind:"scalar",T:9},{no:5,name:"buttons",kind:"message",T:cd,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},cd=class t extends v{name="";url="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.ButtonConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"url",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},fd=class t extends v{title="";content="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.HomeInfoParamsConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"content",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},dd=class t extends v{name="";title="";url="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="content.SocialIconConfig";static fields=u.util.newFieldList(()=>[{no:1,name:"name",kind:"scalar",T:9},{no:2,name:"title",kind:"scalar",T:9},{no:3,name:"url",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}};var Va=class t extends v{text="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.AnalyzeConversationRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ga=class t extends v{prompt="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.GenerateImagesRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"prompt",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},za=class t extends v{images=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.GenerateImagesResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"images",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ja=class t extends v{id="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.DeleteSessionRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Vr=class t extends v{id="";text="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.Prompt";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},$a=class t extends v{constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.GetPromptsRequest";static fields=u.util.newFieldList(()=>[]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ha=class t extends v{prompts=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.GetPromptsResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"prompts",kind:"message",T:Vr,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Wa=class t extends v{prompt="";text=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.InferRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"prompt",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ya=class t extends v{text="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.InferResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ka=class t extends v{content;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.UploadContentRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"content",kind:"message",T:qe}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Fh=class t extends v{id="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.UploadContentResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Qa=class t extends v{id="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.GetSessionRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Xa=class t extends v{session;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.GetSessionResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"session",kind:"message",T:nl}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Za=class t extends v{page=U.zero;limit=U.zero;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.GetSessionsRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"page",kind:"scalar",T:4},{no:2,name:"limit",kind:"scalar",T:4}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},el=class t extends v{sessions=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.GetSessionsResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"sessions",kind:"message",T:nl,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},md=class t extends v{id=0;startTime=U.zero;endTime=U.zero;text="";p="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.Token";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:13},{no:2,name:"start_time",kind:"scalar",T:4},{no:3,name:"end_time",kind:"scalar",T:4},{no:4,name:"text",kind:"scalar",T:9},{no:5,name:"p",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},tl=class t extends v{num=0;tokens=[];text="";startTime=U.zero;endTime=U.zero;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.Segment";static fields=u.util.newFieldList(()=>[{no:1,name:"num",kind:"scalar",T:13},{no:2,name:"tokens",kind:"message",T:md,repeated:!0},{no:3,name:"text",kind:"scalar",T:9},{no:4,name:"start_time",kind:"scalar",T:4},{no:5,name:"end_time",kind:"scalar",T:4}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},nl=class t extends v{id="";name="";segments=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.Session";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"name",kind:"scalar",T:9},{no:3,name:"segments",kind:"message",T:tl,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Ah=class t extends v{filePath="";model="";language="";translate=!1;offset=U.zero;duration=U.zero;threads=0;speedup=!1;maxLen=0;maxTokens=0;wordThreshold=0;tokens=!1;colorize=!1;out="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.TranscriptionRequest";static fields=u.util.newFieldList(()=>[{no:14,name:"file_path",kind:"scalar",T:9},{no:1,name:"model",kind:"scalar",T:9},{no:2,name:"language",kind:"scalar",T:9},{no:3,name:"translate",kind:"scalar",T:8},{no:4,name:"offset",kind:"scalar",T:3},{no:5,name:"duration",kind:"scalar",T:3},{no:6,name:"threads",kind:"scalar",T:13},{no:7,name:"speedup",kind:"scalar",T:8},{no:8,name:"max_len",kind:"scalar",T:13},{no:9,name:"max_tokens",kind:"scalar",T:13},{no:10,name:"word_threshold",kind:"scalar",T:1},{no:11,name:"tokens",kind:"scalar",T:8},{no:12,name:"colorize",kind:"scalar",T:8},{no:13,name:"out",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Uh=class t extends v{constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.RegisterFlags";static fields=u.util.newFieldList(()=>[]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},qh=class t extends v{text="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.OCRText";static fields=u.util.newFieldList(()=>[{no:1,name:"text",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},_h=class t extends v{image=new Uint8Array(0);constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.Image";static fields=u.util.newFieldList(()=>[{no:1,name:"image",kind:"scalar",T:12}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},rl=class t extends v{from="";to="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.ConvertFileRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"from",kind:"scalar",T:9},{no:2,name:"to",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ol=class t extends v{captureDevice=0;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.ChatRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"capture_device",kind:"scalar",T:5}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ai=class t extends v{segment;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.ChatResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"segment",kind:"message",T:tl}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},il=class t extends v{id="";file="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.YouTubeVideo";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9},{no:2,name:"file",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},li=class t extends v{file="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.FilePath";static fields=u.util.newFieldList(()=>[{no:1,name:"file",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},sl=class t extends v{title="";filePath;transcript=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="protoflow.YouTubeVideoResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"title",kind:"scalar",T:9},{no:2,name:"file_path",kind:"message",T:li},{no:3,name:"transcript",kind:"message",T:br,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}};var al=class t extends v{phoneNumbers=[];summary="";questions=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="ai.AnalyzeConversationResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"phone_numbers",kind:"scalar",T:9,repeated:!0},{no:2,name:"summary",kind:"scalar",T:9},{no:3,name:"questions",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},Dh=class t extends v{categories=[];constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="ai.AnalyzeContent";static fields=u.util.newFieldList(()=>[{no:1,name:"categories",kind:"scalar",T:9,repeated:!0}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}};var bh={typeName:"protoflow.ProtoflowService",methods:{downloadYouTubeVideo:{name:"DownloadYouTubeVideo",I:il,O:sl,kind:J.Unary},getSessions:{name:"GetSessions",I:Za,O:el,kind:J.Unary},getSession:{name:"GetSession",I:Qa,O:Xa,kind:J.Unary},deleteSession:{name:"DeleteSession",I:ja,O:oe,kind:J.Unary},getPrompts:{name:"GetPrompts",I:$a,O:Ha,kind:J.Unary},newPrompt:{name:"NewPrompt",I:Vr,O:Vr,kind:J.Unary},uploadContent:{name:"UploadContent",I:Ka,O:ai,kind:J.ServerStreaming},infer:{name:"Infer",I:Wa,O:Ya,kind:J.ServerStreaming},chat:{name:"Chat",I:ol,O:ai,kind:J.ServerStreaming},convertFile:{name:"ConvertFile",I:rl,O:li,kind:J.Unary},generateImages:{name:"GenerateImages",I:Ga,O:za,kind:J.Unary},analyzeConversation:{name:"AnalyzeConversation",I:Va,O:al,kind:J.Unary}}};var Vh={typeName:"content.ContentService",methods:{save:{name:"Save",I:ii,O:rn,kind:J.Unary},search:{name:"Search",I:Ua,O:qa,kind:J.Unary},relate:{name:"Relate",I:Ia,O:oe,kind:J.Unary},analyze:{name:"Analyze",I:qe,O:ii,kind:J.Unary},delete:{name:"Delete",I:rn,O:rn,kind:J.Unary},getTags:{name:"GetTags",I:Ba,O:Fa,kind:J.Unary},setTags:{name:"SetTags",I:La,O:oe,kind:J.Unary},publish:{name:"Publish",I:rn,O:rn,kind:J.Unary},getSources:{name:"GetSources",I:Na,O:Ma,kind:J.Unary},types:{name:"Types",I:oe,O:Ca,kind:J.Unary},voiceInput:{name:"VoiceInput",I:Ja,O:Oa,kind:J.ServerStreaming}}};var Gh={typeName:"user.UserService",methods:{register:{name:"Register",I:pt,O:pt,kind:J.Unary},login:{name:"Login",I:pt,O:pt,kind:J.Unary},logout:{name:"Logout",I:oe,O:oe,kind:J.Unary},resetPassword:{name:"ResetPassword",I:pt,O:oe,kind:J.Unary},verifyUser:{name:"VerifyUser",I:Pa,O:oe,kind:J.Unary},updateConfig:{name:"UpdateConfig",I:oi,O:oe,kind:J.Unary},createGroupInvite:{name:"CreateGroupInvite",I:Ra,O:ri,kind:J.Unary},joinGroup:{name:"JoinGroup",I:ri,O:Ot,kind:J.Unary},groupInfo:{name:"GroupInfo",I:ka,O:Ot,kind:J.Unary},createGroup:{name:"CreateGroup",I:Ot,O:Ot,kind:J.Unary},getGroups:{name:"GetGroups",I:oe,O:xa,kind:J.Unary},deleteGroup:{name:"DeleteGroup",I:Ot,O:oe,kind:J.Unary},share:{name:"Share",I:Ea,O:oe,kind:J.Unary}}};var ll=class t extends v{user="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="chat.BanUserRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"user",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ul=class t extends v{constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="chat.BanUserResponse";static fields=u.util.newFieldList(()=>[]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},cl=class t extends v{message="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="chat.SendMessageRequest";static fields=u.util.newFieldList(()=>[{no:2,name:"message",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},fl=class t extends v{constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="chat.SendMessageResponse";static fields=u.util.newFieldList(()=>[]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},dl=class t extends v{constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="chat.ReceiveMessagesRequest";static fields=u.util.newFieldList(()=>[]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},ml=class t extends v{user="";text="";timestamp=U.zero;constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="chat.Message";static fields=u.util.newFieldList(()=>[{no:1,name:"user",kind:"scalar",T:9},{no:2,name:"text",kind:"scalar",T:9},{no:3,name:"timestamp",kind:"scalar",T:3}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}};var zh={typeName:"chat.ChatService",methods:{sendMessage:{name:"SendMessage",I:cl,O:fl,kind:J.Unary},receiveMessages:{name:"ReceiveMessages",I:dl,O:ml,kind:J.ServerStreaming},banUser:{name:"BanUser",I:ll,O:ul,kind:J.Unary}}};var pl=class t extends v{type={case:void 0};constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="event.Metric";static fields=u.util.newFieldList(()=>[{no:1,name:"http",kind:"message",T:pd,oneof:"type"},{no:2,name:"rrweb",kind:"message",T:gd,oneof:"type"}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},pd=class t extends v{method="";path="";query="";headers={};host="";remoteAddr="";userAgent="";referer="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="event.HTTPRequest";static fields=u.util.newFieldList(()=>[{no:1,name:"method",kind:"scalar",T:9},{no:2,name:"path",kind:"scalar",T:9},{no:3,name:"query",kind:"scalar",T:9},{no:4,name:"headers",kind:"map",K:9,V:{kind:"scalar",T:9}},{no:5,name:"host",kind:"scalar",T:9},{no:6,name:"remoteAddr",kind:"scalar",T:9},{no:7,name:"userAgent",kind:"scalar",T:9},{no:8,name:"referer",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},gd=class t extends v{events="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="event.RRWeb";static fields=u.util.newFieldList(()=>[{no:1,name:"events",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}},gl=class t extends v{id="";constructor(e){super(),u.util.initPartial(e,this)}static runtime=u;static typeName="event.SendResponse";static fields=u.util.newFieldList(()=>[{no:1,name:"id",kind:"scalar",T:9}]);static fromBinary(e,n){return new t().fromBinary(e,n)}static fromJson(e,n){return new t().fromJson(e,n)}static fromJsonString(e,n){return new t().fromJsonString(e,n)}static equals(e,n){return u.util.equals(t,e,n)}};var jh={typeName:"event.EventService",methods:{send:{name:"Send",I:pl,O:gl,kind:J.Unary}}};var F;(function(t){t[t.Canceled=1]="Canceled",t[t.Unknown=2]="Unknown",t[t.InvalidArgument=3]="InvalidArgument",t[t.DeadlineExceeded=4]="DeadlineExceeded",t[t.NotFound=5]="NotFound",t[t.AlreadyExists=6]="AlreadyExists",t[t.PermissionDenied=7]="PermissionDenied",t[t.ResourceExhausted=8]="ResourceExhausted",t[t.FailedPrecondition=9]="FailedPrecondition",t[t.Aborted=10]="Aborted",t[t.OutOfRange=11]="OutOfRange",t[t.Unimplemented=12]="Unimplemented",t[t.Internal=13]="Internal",t[t.Unavailable=14]="Unavailable",t[t.DataLoss=15]="DataLoss",t[t.Unauthenticated=16]="Unauthenticated"})(F||(F={}));function ui(t){let e=F[t];return typeof e!="string"?t.toString():e[0].toLowerCase()+e.substring(1).replace(/[A-Z]/g,n=>"_"+n.toLowerCase())}var yl;function $h(t){if(!yl){yl={};for(let e of Object.values(F))typeof e!="string"&&(yl[ui(e)]=e)}return yl[t]}var te=class t extends Error{constructor(e,n=F.Unknown,r,o,i){super(XS(e,n)),this.name="ConnectError",Object.setPrototypeOf(this,new.target.prototype),this.rawMessage=e,this.code=n,this.metadata=new Headers(r??{}),this.details=o??[],this.cause=i}static from(e,n=F.Unknown){return e instanceof t?e:e instanceof Error?e.name=="AbortError"?new t(e.message,F.Canceled):new t(e.message,n,void 0,void 0,e):new t(String(e),n,void 0,void 0,e)}static[Symbol.hasInstance](e){return e instanceof Error?Object.getPrototypeOf(e)===t.prototype?!0:e.name==="ConnectError"&&"code"in e&&typeof e.code=="number"&&"metadata"in e&&"details"in e&&Array.isArray(e.details)&&"rawMessage"in e&&typeof e.rawMessage=="string"&&"cause"in e:!1}findDetails(e){let n="typeName"in e?{findMessage:o=>o===e.typeName?e:void 0}:e,r=[];for(let o of this.details){if(o instanceof v){n.findMessage(o.getType().typeName)&&r.push(o);continue}let i=n.findMessage(o.type);if(i)try{r.push(i.fromBinary(o.value))}catch{}}return r}};function XS(t,e){return t.length?`[${ui(e)}] ${t}`:`[${ui(e)}]`}function yd(...t){let e=new Headers;for(let n of t)n.forEach((r,o)=>{e.append(o,r)});return e}function Hh(t,e){let n={};for(let[r,o]of Object.entries(t.methods)){let i=e(Object.assign(Object.assign({},o),{localName:r,service:t}));i!=null&&(n[r]=i)}return n}function hd(t){let e,n=new Uint8Array(0);function r(o){let i=new Uint8Array(n.length+o.length);i.set(n),i.set(o,n.length),n=i}return new ReadableStream({start(){e=t.getReader()},async pull(o){let i;for(;;){if(i===void 0&&n.byteLength>=5){let l=0;for(let c=1;c<5;c++)l=(l<<8)+n[c];i={flags:n[0],length:l}}if(i!==void 0&&n.byteLength>=i.length+5)break;let a=await e.read();if(a.done)break;r(a.value)}if(i===void 0){if(n.byteLength==0){o.close();return}o.error(new te("premature end of stream",F.DataLoss));return}let s=n.subarray(5,5+i.length);n=n.subarray(5+i.length),o.enqueue({flags:i.flags,data:s})}})}function vd(t,e){let n=new Uint8Array(e.length+5);n.set(e,5);let r=new DataView(n.buffer,n.byteOffset,n.byteLength);return r.setUint8(0,t),r.setUint32(1,e.length),n}var ZS=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=t[Symbol.asyncIterator],n;return e?e.call(t):(t=typeof __values=="function"?__values(t):t[Symbol.iterator](),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(i){n[i]=t[i]&&function(s){return new Promise(function(a,l){s=t[i](s),o(a,l,s.done,s.value)})}}function o(i,s,a,l){Promise.resolve(l).then(function(c){i({value:c,done:a})},s)}},ci=function(t){return this instanceof ci?(this.v=t,this):new ci(t)},eT=function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=n.apply(t,e||[]),o,i=[];return o={},a("next"),a("throw"),a("return",s),o[Symbol.asyncIterator]=function(){return this},o;function s(p){return function(S){return Promise.resolve(S).then(p,y)}}function a(p,S){r[p]&&(o[p]=function(T){return new Promise(function(C,g){i.push([p,T,C,g])>1||l(p,T)})},S&&(o[p]=S(o[p])))}function l(p,S){try{c(r[p](S))}catch(T){m(i[0][3],T)}}function c(p){p.value instanceof ci?Promise.resolve(p.value.v).then(f,y):m(i[0][2],p)}function f(p){l("next",p)}function y(p){l("throw",p)}function m(p,S){p(S),i.shift(),i.length&&l(i[0][0],i[0][1])}},tT=function(t){var e,n;return e={},r("next"),r("throw",function(o){throw o}),r("return"),e[Symbol.iterator]=function(){return this},e;function r(o,i){e[o]=t[o]?function(s){return(n=!n)?{value:ci(t[o](s)),done:!1}:i?i(s):s}:i}};function Wh(t){return eT(this,arguments,function*(){yield ci(yield*tT(ZS(t)))})}var Yh=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=t[Symbol.asyncIterator],n;return e?e.call(t):(t=typeof __values=="function"?__values(t):t[Symbol.iterator](),n={},r("next"),r("throw"),r("return"),n[Symbol.asyncIterator]=function(){return this},n);function r(i){n[i]=t[i]&&function(s){return new Promise(function(a,l){s=t[i](s),o(a,l,s.done,s.value)})}}function o(i,s,a,l){Promise.resolve(l).then(function(c){i({value:c,done:a})},s)}},Gr=function(t){return this instanceof Gr?(this.v=t,this):new Gr(t)},nT=function(t){var e,n;return e={},r("next"),r("throw",function(o){throw o}),r("return"),e[Symbol.iterator]=function(){return this},e;function r(o,i){e[o]=t[o]?function(s){return(n=!n)?{value:Gr(t[o](s)),done:!1}:i?i(s):s}:i}},rT=function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=n.apply(t,e||[]),o,i=[];return o={},a("next"),a("throw"),a("return",s),o[Symbol.asyncIterator]=function(){return this},o;function s(p){return function(S){return Promise.resolve(S).then(p,y)}}function a(p,S){r[p]&&(o[p]=function(T){return new Promise(function(C,g){i.push([p,T,C,g])>1||l(p,T)})},S&&(o[p]=S(o[p])))}function l(p,S){try{c(r[p](S))}catch(T){m(i[0][3],T)}}function c(p){p.value instanceof Gr?Promise.resolve(p.value.v).then(f,y):m(i[0][2],p)}function f(p){l("next",p)}function y(p){l("throw",p)}function m(p,S){p(S),i.shift(),i.length&&l(i[0][0],i[0][1])}};function Cn(t,e){return Hh(t,n=>{switch(n.kind){case J.Unary:return oT(e,t,n);case J.ServerStreaming:return iT(e,t,n);case J.ClientStreaming:return sT(e,t,n);case J.BiDiStreaming:return aT(e,t,n);default:return null}})}function oT(t,e,n){return async function(r,o){var i,s;let a=await t.unary(e,n,o?.signal,o?.timeoutMs,o?.headers,r,o?.contextValues);return(i=o?.onHeader)===null||i===void 0||i.call(o,a.header),(s=o?.onTrailer)===null||s===void 0||s.call(o,a.trailer),a.message}}function iT(t,e,n){return function(r,o){return Kh(t.stream(e,n,o?.signal,o?.timeoutMs,o?.headers,Wh([r]),o?.contextValues),o)}}function sT(t,e,n){return async function(r,o){var i,s,a,l,c,f;let y=await t.stream(e,n,o?.signal,o?.timeoutMs,o?.headers,r,o?.contextValues);(c=o?.onHeader)===null||c===void 0||c.call(o,y.header);let m;try{for(var p=!0,S=Yh(y.message),T;T=await S.next(),i=T.done,!i;p=!0)l=T.value,p=!1,m=l}catch(C){s={error:C}}finally{try{!p&&!i&&(a=S.return)&&await a.call(S)}finally{if(s)throw s.error}}if(!m)throw new te("protocol error: missing response message",F.Internal);return(f=o?.onTrailer)===null||f===void 0||f.call(o,y.trailer),m}}function aT(t,e,n){return function(r,o){return Kh(t.stream(e,n,o?.signal,o?.timeoutMs,o?.headers,r,o?.contextValues),o)}}function Kh(t,e){let n=function(){var r,o;return rT(this,arguments,function*(){let i=yield Gr(t);(r=e?.onHeader)===null||r===void 0||r.call(e,i.header),yield Gr(yield*nT(Yh(i.message))),(o=e?.onTrailer)===null||o===void 0||o.call(e,i.trailer)})}()[Symbol.asyncIterator]();return{[Symbol.asyncIterator]:()=>({next:()=>n.next()})}}function Qh(...t){let e=new AbortController,n=t.filter(o=>o!==void 0).concat(e.signal);for(let o of n){if(o.aborted){r.apply(o);break}o.addEventListener("abort",r)}function r(){e.signal.aborted||e.abort(wd(this));for(let o of n)o.removeEventListener("abort",r)}return e}function Xh(t){let e=new AbortController,n=()=>{e.abort(new te("the operation timed out",F.DeadlineExceeded))},r;return t!==void 0&&(t<=0?n():r=setTimeout(n,t)),{signal:e.signal,cleanup:()=>clearTimeout(r)}}function wd(t){if(!t.aborted)return;if(t.reason!==void 0)return t.reason;let e=new Error("This operation was aborted");return e.name="AbortError",e}function hl(){return{get(t){return t.id in this?this[t.id]:t.defaultValue},set(t,e){return this[t.id]=e,this},delete(t){return delete this[t.id],this}}}function vl(t,e,n){let r=typeof e=="string"?e:e.typeName,o=typeof n=="string"?n:n.name;return t.toString().replace(/\/?$/,`/${r}/${o}`)}function Sd(t,e){return e instanceof t?e:new t(e)}function Zh(t,e){function n(r){return r.done===!0?r:{done:r.done,value:Sd(t,r.value)}}return{[Symbol.asyncIterator](){let r=e[Symbol.asyncIterator](),o={next:()=>r.next().then(n)};return r.throw!==void 0&&(o.throw=i=>r.throw(i).then(n)),r.return!==void 0&&(o.return=i=>r.return(i).then(n)),o}}}function wl(t){var e;let n=Object.assign({},t);return(e=n.ignoreUnknownFields)!==null&&e!==void 0||(n.ignoreUnknownFields=!0),n}function Sl(t,e,n,r){let o=e?ev(t.I,r):tv(t.I,n);return{parse:(e?ev(t.O,r):tv(t.O,n)).parse,serialize:o.serialize}}function ev(t,e){return{parse(n){try{return t.fromBinary(n,e)}catch(r){let o=r instanceof Error?r.message:String(r);throw new te(`parse binary: ${o}`,F.InvalidArgument)}},serialize(n){try{return n.toBinary(e)}catch(r){let o=r instanceof Error?r.message:String(r);throw new te(`serialize binary: ${o}`,F.Internal)}}}}function tv(t,e){var n,r;let o=(n=e?.textEncoder)!==null&&n!==void 0?n:new TextEncoder,i=(r=e?.textDecoder)!==null&&r!==void 0?r:new TextDecoder,s=wl(e);return{parse(a){try{let l=i.decode(a);return t.fromJsonString(l,s)}catch(l){throw te.from(l,F.InvalidArgument)}},serialize(a){try{let l=a.toJsonString(s);return o.encode(l)}catch(l){throw te.from(l,F.Internal)}}}}var lT=/^application\/(connect\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;var nv="application/proto",rv="application/json",ov="application/connect+proto",iv="application/connect+json";function sv(t){let e=t?.match(lT);if(!e)return;let n=!!e[1],r=!!e[3];return{stream:n,binary:r}}function fi(t,e,n){if(e&&new Headers(e).forEach((s,a)=>n.metadata.append(a,s)),typeof t!="object"||t==null||Array.isArray(t)||!("code"in t)||typeof t.code!="string")throw n;let r=$h(t.code);if(r===void 0)throw n;let o=t.message;if(o!=null&&typeof o!="string")throw n;let i=new te(o??"",r,e);if("details"in t&&Array.isArray(t.details))for(let s of t.details){if(s===null||typeof s!="object"||Array.isArray(s)||typeof s.type!="string"||typeof s.value!="string"||"debug"in s&&typeof s.debug!="object")throw n;try{i.details.push({type:s.type,value:en.dec(s.value),debug:s.debug})}catch{throw n}}return i}var Tl=2;function Td(t){let e=new te("invalid end stream",F.InvalidArgument),n;try{n=JSON.parse(typeof t=="string"?t:new TextDecoder().decode(t))}catch{throw e}if(typeof n!="object"||n==null||Array.isArray(n))throw e;let r=new Headers;if("metadata"in n){if(typeof n.metadata!="object"||n.metadata==null||Array.isArray(n.metadata))throw e;for(let[i,s]of Object.entries(n.metadata)){if(!Array.isArray(s)||s.some(a=>typeof a!="string"))throw e;for(let a of s)r.append(i,a)}}let o="error"in n?fi(n.error,r,e):void 0;return{metadata:r,error:o}}var di="Content-Type",av="Content-Length",Pl="Content-Encoding";var Pd="Accept-Encoding";var lv="Connect-Timeout-Ms",kl="Connect-Protocol-Version",uv="User-Agent";function cv(t){switch(t){case 400:return F.InvalidArgument;case 401:return F.Unauthenticated;case 403:return F.PermissionDenied;case 404:return F.Unimplemented;case 408:return F.DeadlineExceeded;case 409:return F.Aborted;case 412:return F.FailedPrecondition;case 413:return F.ResourceExhausted;case 415:return F.Internal;case 429:return F.Unavailable;case 431:return F.ResourceExhausted;case 502:return F.Unavailable;case 503:return F.Unavailable;case 504:return F.Unavailable;default:return F.Unknown}}function Rl(t){let e=new Headers,n=new Headers;return t.forEach((r,o)=>{o.toLowerCase().startsWith("trailer-")?n.set(o.substring(8),r):e.set(o,r)}),[e,n]}var El="1";function xl(t,e,n,r,o){let i=new Headers(r??{});return n!==void 0&&i.set(lv,`${n}`),i.set(di,t==J.Unary?e?nv:rv:e?ov:iv),i.set(kl,El),o&&i.set(uv,"connect-es/1.3.0"),i}function Cl(t,e,n){let r=n.get("Content-Type"),o=sv(r);if(e!==200){let i=new te(`HTTP ${e}`,cv(e),n);if(t==J.Unary&&o&&!o.binary)return{isUnaryError:!0,unaryError:i};throw i}return{isUnaryError:!1}}var fv="application/";function cT(t,e){return e?en.enc(t).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,""):encodeURIComponent(new TextDecoder().decode(t))}function kd(t,e,n){let r=`?connect=v${El}`,o=t.header.get(di);o?.indexOf(fv)===0&&(r+="&encoding="+encodeURIComponent(o.slice(fv.length)));let i=t.header.get(Pl);i!==null&&i!=="identity"&&(r+="&compression="+encodeURIComponent(i),n=!0),n&&(r+="&base64=1"),r+="&message="+cT(e,n);let s=t.url+r,a=new Headers(t.header);return[kl,di,av,Pl,Pd].forEach(l=>a.delete(l)),Object.assign(Object.assign({},t),{init:Object.assign(Object.assign({},t.init),{method:"GET"}),url:s,header:a})}function Rd(t){let e=mv(t.next,t.interceptors),[n,r,o]=dv(t),i=Object.assign(Object.assign({},t.req),{message:Sd(t.req.method.I,t.req.message),signal:n});return e(i).then(s=>(o(),s),r)}function Ed(t){let e=mv(t.next,t.interceptors),[n,r,o]=dv(t),i=Object.assign(Object.assign({},t.req),{message:Zh(t.req.method.I,t.req.message),signal:n}),s=!1;return n.addEventListener("abort",function(){var a,l;let c=t.req.message[Symbol.asyncIterator]();s||(a=c.throw)===null||a===void 0||a.call(c,this.reason).catch(()=>{}),(l=c.return)===null||l===void 0||l.call(c).catch(()=>{})}),e(i).then(a=>Object.assign(Object.assign({},a),{message:{[Symbol.asyncIterator](){let l=a.message[Symbol.asyncIterator]();return{next(){return l.next().then(c=>(c.done==!0&&(s=!0,o()),c),r)}}}}}),r)}function dv(t){let{signal:e,cleanup:n}=Xh(t.timeoutMs),r=Qh(t.signal,e);return[r.signal,function(i){let s=te.from(e.aborted?wd(e):i);return r.abort(s),n(),Promise.reject(s)},function(){n(),r.abort()}]}function mv(t,e){var n;return(n=e?.concat().reverse().reduce((r,o)=>o(r),t))!==null&&n!==void 0?n:t}function pv(){try{new Headers}catch{throw new Error("connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.")}}var mi=function(t){return this instanceof mi?(this.v=t,this):new mi(t)},fT=function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=n.apply(t,e||[]),o,i=[];return o={},a("next"),a("throw"),a("return",s),o[Symbol.asyncIterator]=function(){return this},o;function s(p){return function(S){return Promise.resolve(S).then(p,y)}}function a(p,S){r[p]&&(o[p]=function(T){return new Promise(function(C,g){i.push([p,T,C,g])>1||l(p,T)})},S&&(o[p]=S(o[p])))}function l(p,S){try{c(r[p](S))}catch(T){m(i[0][3],T)}}function c(p){p.value instanceof mi?Promise.resolve(p.value.v).then(f,y):m(i[0][2],p)}function f(p){l("next",p)}function y(p){l("throw",p)}function m(p,S){p(S),i.shift(),i.length&&l(i[0][0],i[0][1])}};function xd(t){var e;pv();let n=(e=t.useBinaryFormat)!==null&&e!==void 0?e:!1;return{async unary(r,o,i,s,a,l,c){var f;let{serialize:y,parse:m}=Sl(o,n,t.jsonOptions,t.binaryOptions);return s=s===void 0?t.defaultTimeoutMs:s<=0?void 0:s,await Rd({interceptors:t.interceptors,signal:i,timeoutMs:s,req:{stream:!1,service:r,method:o,url:vl(t.baseUrl,r,o),init:{method:"POST",credentials:(f=t.credentials)!==null&&f!==void 0?f:"same-origin",redirect:"error",mode:"cors"},header:xl(o.kind,n,s,a,!1),contextValues:c??hl(),message:l},next:async p=>{var S;let T=t.useHttpGet===!0&&o.idempotency===Wo.NoSideEffects,C=null;T?p=kd(p,y(p.message),n):C=y(p.message);let d=await((S=t.fetch)!==null&&S!==void 0?S:globalThis.fetch)(p.url,Object.assign(Object.assign({},p.init),{headers:p.header,signal:p.signal,body:C})),{isUnaryError:h,unaryError:k}=Cl(o.kind,d.status,d.headers);if(h)throw fi(await d.json(),yd(...Rl(d.headers)),k);let[E,O]=Rl(d.headers);return{stream:!1,service:r,method:o,header:E,message:n?m(new Uint8Array(await d.arrayBuffer())):o.O.fromJson(await d.json(),wl(t.jsonOptions)),trailer:O}}})},async stream(r,o,i,s,a,l,c){var f;let{serialize:y,parse:m}=Sl(o,n,t.jsonOptions,t.binaryOptions);function p(T,C,g){return fT(this,arguments,function*(){let h=hd(T).getReader(),k=!1;for(;;){let E=yield mi(h.read());if(E.done)break;let{flags:O,data:I}=E.value;if((O&Tl)===Tl){k=!0;let M=Td(I);if(M.error){let L=M.error;throw g.forEach((B,ue)=>{L.metadata.append(ue,B)}),L}M.metadata.forEach((L,B)=>C.set(B,L));continue}yield yield mi(m(I))}if(!k)throw"missing EndStreamResponse"})}async function S(T){if(o.kind!=J.ServerStreaming)throw"The fetch API does not support streaming request bodies";let C=await T[Symbol.asyncIterator]().next();if(C.done==!0)throw"missing request message";return vd(0,y(C.value))}return s=s===void 0?t.defaultTimeoutMs:s<=0?void 0:s,await Ed({interceptors:t.interceptors,timeoutMs:s,signal:i,req:{stream:!0,service:r,method:o,url:vl(t.baseUrl,r,o),init:{method:"POST",credentials:(f=t.credentials)!==null&&f!==void 0?f:"same-origin",redirect:"error",mode:"cors"},header:xl(o.kind,n,s,a,!1),contextValues:c??hl(),message:l},next:async T=>{var C;let d=await((C=t.fetch)!==null&&C!==void 0?C:globalThis.fetch)(T.url,Object.assign(Object.assign({},T.init),{headers:T.header,signal:T.signal,body:await S(T.message)}));if(Cl(o.kind,d.status,d.headers),d.body===null)throw"missing response body";let h=new Headers;return Object.assign(Object.assign({},T),{header:d.headers,trailer:h,message:p(d.body,h,d.headers)})}})}}}var dT="https://demo.lunabrain.com",pi=xd({baseUrl:`${dT}/api`||"error"}),CE=Cn(bh,pi),gv=Cn(Vh,pi),NE=Cn(Gh,pi),JE=Cn(zh,pi),OE=Cn(jh,pi);function gi(t,e){return new qe({tags:e,type:{case:"data",value:new si({type:{case:"url",value:{url:t}}})}})}var _=it(Nn(),1);var wv=()=>{let[t,e]=(0,We.useState)(void 0),[n,r]=(0,We.useState)(document.title||window.location.href),[o,i]=(0,We.useState)(void 0),[s,a]=(0,We.useState)(["browser/save"]),[l,c]=(0,We.useState)(window.location.href),[f,y]=(0,We.useState)(""),[m,p]=(0,We.useState)([]),[S,T]=(0,We.useState)("tags"),[C,g]=(0,We.useState)(void 0);(0,We.useEffect)(()=>{let L=B=>{};return document.addEventListener("keydown",L),document.addEventListener("mouseup",d),()=>{document.removeEventListener("keydown",L),document.removeEventListener("mouseup",d)}},[]);let d=()=>{let L=window.getSelection()?.toString();L&&y(L)},h=L=>{a([...s,L]),i("")},k=()=>{f&&(p([...m,f]),y(""))},E=async()=>{g(void 0);try{let L=await gv.analyze(gi(l,s));console.log(L)}catch(L){console.error(L)}},O=async()=>{e(void 0);let L=gi(l,s);chrome.runtime.sendMessage({action:Ws,data:L.toJson()},B=>{console.log("content","save response",B)})},I=L=>{p(m.filter((B,ue)=>ue!==L))},M=L=>{p(s.filter((B,ue)=>ue!==L))};return(0,_.jsxs)("div",{id:"floating-panel",children:[(0,_.jsx)("input",{type:"text",value:n,onChange:L=>r(L.target.value)}),(0,_.jsxs)("div",{className:"tablist",children:[(0,_.jsx)("button",{onClick:()=>T("tags"),children:"Tags"}),(0,_.jsx)("button",{onClick:()=>T("annotations"),children:"Annotations"})]}),(0,_.jsxs)("div",{children:[S==="analyze"&&(0,_.jsxs)("div",{children:[(0,_.jsx)("button",{className:"button-primary",onClick:E,children:"Analyze"}),C&&(0,_.jsx)("ul",{children:C.map((L,B)=>L.tags.map((ue,Jl)=>(0,_.jsx)("button",{onClick:()=>h(ue),children:ue},Jl)))})]}),S==="tags"&&(0,_.jsxs)("div",{children:[(0,_.jsx)("input",{type:"text",value:o,placeholder:"tag",onChange:L=>i(L.target.value)}),(0,_.jsx)("button",{className:"button-primary",onClick:()=>o&&h(o),children:"Add"}),s.length>0&&(0,_.jsx)("table",{className:"table",children:(0,_.jsx)("tbody",{children:s.map((L,B)=>(0,_.jsx)("tr",{className:"table-row",children:(0,_.jsxs)("td",{className:"table-cell",children:[L,(0,_.jsx)("button",{className:"button-primary",onClick:()=>M(B),children:"Remove"})]})},B))})})]}),S==="annotations"&&(0,_.jsxs)("div",{children:[(0,_.jsx)("textarea",{rows:4,value:f,onChange:L=>y(L.target.value)}),(0,_.jsx)("button",{className:"button-primary",onClick:k,children:"Add"}),m.length>0&&(0,_.jsx)("table",{className:"table",children:(0,_.jsx)("tbody",{children:m.map((L,B)=>(0,_.jsx)("tr",{className:"table-row",children:(0,_.jsxs)("td",{className:"table-cell",children:[L,(0,_.jsx)("button",{className:"button-primary",onClick:()=>I(B),children:"Remove"})]})},B))})})]})]}),(0,_.jsx)("div",{style:{display:"flex",gap:"10px"},children:(0,_.jsx)("button",{className:"button-primary",onClick:O,children:"Save"})}),t&&(0,_.jsx)("div",{style:{color:"red"},children:t})]})};var ot=it(Nn(),1),wT={padding:"10px",backgroundColor:"white",border:"1px solid #ccc",color:"black",maxHeight:"300px",overflowY:"auto",zIndex:9999,right:"10px",bottom:"10px",position:"fixed"},Sv=()=>{let[t,e]=(0,zr.useState)(!1),[n,r]=(0,zr.useState)(void 0);(0,zr.useEffect)(()=>{let s=a=>{a.ctrlKey&&a.key==="l"&&(a.preventDefault(),e(!t))};return document.addEventListener("keydown",s),()=>{document.removeEventListener("keydown",s)}},[t]),(0,zr.useEffect)(()=>{chrome.runtime.sendMessage({action:ah,data:"TODO make url?"},s=>{s.data&&(r(s.data),e(!0))})},[]);let o=()=>{if(!n)return;let s=new URL(n.from),a=gi(n.to,["browser/history",s.host]);chrome.runtime.sendMessage({action:Ws,data:a},l=>{e(!1)}),r(void 0)},i=()=>{e(!1),r(void 0)};return t?(0,ot.jsx)("div",{id:"floating-panel",style:wT,children:n?(0,ot.jsxs)(ot.Fragment,{children:[(0,ot.jsx)("h5",{children:"Save this page?"}),(0,ot.jsxs)("div",{className:"flex flex-row",children:[(0,ot.jsx)("button",{className:"btn",onClick:o,children:"Yes"}),(0,ot.jsx)("button",{className:"btn",onClick:i,children:"No"})]})]}):(0,ot.jsx)(wv,{})}):null};var Cd=it(Nn(),1),Jn=document.createElement("div");Jn.setAttribute("id","lunabrain-root");document.body.appendChild(Jn);Jn.style.width="0";Jn.style.height="0";Jn.style.padding="0";Jn.style.margin="0";var ST=Pv.default.createRoot(Jn);ST.render((0,Cd.jsx)(Tv.default.StrictMode,{children:(0,Cd.jsx)(Sv,{})}));})();
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.production.min.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=data:application/json;base64,

// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// SourcePage: chat/chat.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Chat_DiscordServiceClientInterface: Sendable {

    func `readMessages`(headers: Connect.Headers, onResult: @escaping @Sendable (Connect.StreamResult<Chat_ReadMessagesResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Chat_ReadMessagesRequest>

    @available(iOS 13, *)
    func `readMessages`(headers: Connect.Headers) -> any Connect.ServerOnlyAsyncStreamInterface<Chat_ReadMessagesRequest, Chat_ReadMessagesResponse>

    @discardableResult
    func `writeMessage`(request: Chat_WriteMessageRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Chat_WriteMessageResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `writeMessage`(request: Chat_WriteMessageRequest, headers: Connect.Headers) async -> ResponseMessage<Chat_WriteMessageResponse>
}

/// Concrete implementation of `Chat_DiscordServiceClientInterface`.
public final class Chat_DiscordServiceClient: Chat_DiscordServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    public func `readMessages`(headers: Connect.Headers = [:], onResult: @escaping @Sendable (Connect.StreamResult<Chat_ReadMessagesResponse>) -> Void) -> any Connect.ServerOnlyStreamInterface<Chat_ReadMessagesRequest> {
        return self.client.serverOnlyStream(path: "/chat.DiscordService/ReadMessages", headers: headers, onResult: onResult)
    }

    @available(iOS 13, *)
    public func `readMessages`(headers: Connect.Headers = [:]) -> any Connect.ServerOnlyAsyncStreamInterface<Chat_ReadMessagesRequest, Chat_ReadMessagesResponse> {
        return self.client.serverOnlyStream(path: "/chat.DiscordService/ReadMessages", headers: headers)
    }

    @discardableResult
    public func `writeMessage`(request: Chat_WriteMessageRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Chat_WriteMessageResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/chat.DiscordService/WriteMessage", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `writeMessage`(request: Chat_WriteMessageRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Chat_WriteMessageResponse> {
        return await self.client.unary(path: "/chat.DiscordService/WriteMessage", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let readMessages = Connect.MethodSpec(name: "ReadMessages", service: "chat.DiscordService", type: .serverStream)
            public static let writeMessage = Connect.MethodSpec(name: "WriteMessage", service: "chat.DiscordService", type: .unary)
        }
    }
}

// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: bucket/bucket.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Bucket_BucketServiceClientInterface: Sendable {

    @discardableResult
    func `signedURL`(request: Bucket_SignedURLRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Bucket_SignedURLResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `signedURL`(request: Bucket_SignedURLRequest, headers: Connect.Headers) async -> ResponseMessage<Bucket_SignedURLResponse>

    @discardableResult
    func `readdir`(request: Bucket_ReaddirRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Bucket_ReaddirResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `readdir`(request: Bucket_ReaddirRequest, headers: Connect.Headers) async -> ResponseMessage<Bucket_ReaddirResponse>

    @discardableResult
    func `remove`(request: Bucket_RemoveRequest, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Bucket_RemoveResponse>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `remove`(request: Bucket_RemoveRequest, headers: Connect.Headers) async -> ResponseMessage<Bucket_RemoveResponse>
}

/// Concrete implementation of `Bucket_BucketServiceClientInterface`.
public final class Bucket_BucketServiceClient: Bucket_BucketServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `signedURL`(request: Bucket_SignedURLRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Bucket_SignedURLResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/bucket.BucketService/SignedURL", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `signedURL`(request: Bucket_SignedURLRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Bucket_SignedURLResponse> {
        return await self.client.unary(path: "/bucket.BucketService/SignedURL", request: request, headers: headers)
    }

    @discardableResult
    public func `readdir`(request: Bucket_ReaddirRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Bucket_ReaddirResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/bucket.BucketService/Readdir", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `readdir`(request: Bucket_ReaddirRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Bucket_ReaddirResponse> {
        return await self.client.unary(path: "/bucket.BucketService/Readdir", request: request, headers: headers)
    }

    @discardableResult
    public func `remove`(request: Bucket_RemoveRequest, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Bucket_RemoveResponse>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/bucket.BucketService/Remove", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `remove`(request: Bucket_RemoveRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Bucket_RemoveResponse> {
        return await self.client.unary(path: "/bucket.BucketService/Remove", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let signedURL = Connect.MethodSpec(name: "SignedURL", service: "bucket.BucketService", type: .unary)
            public static let readdir = Connect.MethodSpec(name: "Readdir", service: "bucket.BucketService", type: .unary)
            public static let remove = Connect.MethodSpec(name: "Remove", service: "bucket.BucketService", type: .unary)
        }
    }
}

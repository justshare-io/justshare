// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: protoflow.proto

package genconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	gen "github.com/lunabrain-ai/lunabrain/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ProtoflowServiceName is the fully-qualified name of the ProtoflowService service.
	ProtoflowServiceName = "protoflow.ProtoflowService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProtoflowServiceDownloadYouTubeVideoProcedure is the fully-qualified name of the
	// ProtoflowService's DownloadYouTubeVideo RPC.
	ProtoflowServiceDownloadYouTubeVideoProcedure = "/protoflow.ProtoflowService/DownloadYouTubeVideo"
	// ProtoflowServiceChatProcedure is the fully-qualified name of the ProtoflowService's Chat RPC.
	ProtoflowServiceChatProcedure = "/protoflow.ProtoflowService/Chat"
	// ProtoflowServiceConvertFileProcedure is the fully-qualified name of the ProtoflowService's
	// ConvertFile RPC.
	ProtoflowServiceConvertFileProcedure = "/protoflow.ProtoflowService/ConvertFile"
	// ProtoflowServiceOCRProcedure is the fully-qualified name of the ProtoflowService's OCR RPC.
	ProtoflowServiceOCRProcedure = "/protoflow.ProtoflowService/OCR"
	// ProtoflowServiceTranscribeProcedure is the fully-qualified name of the ProtoflowService's
	// Transcribe RPC.
	ProtoflowServiceTranscribeProcedure = "/protoflow.ProtoflowService/Transcribe"
	// ProtoflowServiceLiveTranscribeProcedure is the fully-qualified name of the ProtoflowService's
	// LiveTranscribe RPC.
	ProtoflowServiceLiveTranscribeProcedure = "/protoflow.ProtoflowService/LiveTranscribe"
)

// ProtoflowServiceClient is a client for the protoflow.ProtoflowService service.
type ProtoflowServiceClient interface {
	DownloadYouTubeVideo(context.Context, *connect_go.Request[gen.YouTubeVideo]) (*connect_go.Response[gen.FilePath], error)
	Chat(context.Context, *connect_go.Request[gen.ChatRequest]) (*connect_go.ServerStreamForClient[gen.ChatResponse], error)
	ConvertFile(context.Context, *connect_go.Request[gen.ConvertFileRequest]) (*connect_go.Response[gen.FilePath], error)
	OCR(context.Context, *connect_go.Request[gen.FilePath]) (*connect_go.Response[gen.OCRText], error)
	Transcribe(context.Context, *connect_go.Request[gen.TranscriptionRequest]) (*connect_go.Response[gen.Transcription], error)
	LiveTranscribe(context.Context, *connect_go.Request[gen.TranscriptionRequest]) (*connect_go.ServerStreamForClient[gen.Segment], error)
}

// NewProtoflowServiceClient constructs a client for the protoflow.ProtoflowService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProtoflowServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ProtoflowServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &protoflowServiceClient{
		downloadYouTubeVideo: connect_go.NewClient[gen.YouTubeVideo, gen.FilePath](
			httpClient,
			baseURL+ProtoflowServiceDownloadYouTubeVideoProcedure,
			opts...,
		),
		chat: connect_go.NewClient[gen.ChatRequest, gen.ChatResponse](
			httpClient,
			baseURL+ProtoflowServiceChatProcedure,
			opts...,
		),
		convertFile: connect_go.NewClient[gen.ConvertFileRequest, gen.FilePath](
			httpClient,
			baseURL+ProtoflowServiceConvertFileProcedure,
			opts...,
		),
		oCR: connect_go.NewClient[gen.FilePath, gen.OCRText](
			httpClient,
			baseURL+ProtoflowServiceOCRProcedure,
			opts...,
		),
		transcribe: connect_go.NewClient[gen.TranscriptionRequest, gen.Transcription](
			httpClient,
			baseURL+ProtoflowServiceTranscribeProcedure,
			opts...,
		),
		liveTranscribe: connect_go.NewClient[gen.TranscriptionRequest, gen.Segment](
			httpClient,
			baseURL+ProtoflowServiceLiveTranscribeProcedure,
			opts...,
		),
	}
}

// protoflowServiceClient implements ProtoflowServiceClient.
type protoflowServiceClient struct {
	downloadYouTubeVideo *connect_go.Client[gen.YouTubeVideo, gen.FilePath]
	chat                 *connect_go.Client[gen.ChatRequest, gen.ChatResponse]
	convertFile          *connect_go.Client[gen.ConvertFileRequest, gen.FilePath]
	oCR                  *connect_go.Client[gen.FilePath, gen.OCRText]
	transcribe           *connect_go.Client[gen.TranscriptionRequest, gen.Transcription]
	liveTranscribe       *connect_go.Client[gen.TranscriptionRequest, gen.Segment]
}

// DownloadYouTubeVideo calls protoflow.ProtoflowService.DownloadYouTubeVideo.
func (c *protoflowServiceClient) DownloadYouTubeVideo(ctx context.Context, req *connect_go.Request[gen.YouTubeVideo]) (*connect_go.Response[gen.FilePath], error) {
	return c.downloadYouTubeVideo.CallUnary(ctx, req)
}

// Chat calls protoflow.ProtoflowService.Chat.
func (c *protoflowServiceClient) Chat(ctx context.Context, req *connect_go.Request[gen.ChatRequest]) (*connect_go.ServerStreamForClient[gen.ChatResponse], error) {
	return c.chat.CallServerStream(ctx, req)
}

// ConvertFile calls protoflow.ProtoflowService.ConvertFile.
func (c *protoflowServiceClient) ConvertFile(ctx context.Context, req *connect_go.Request[gen.ConvertFileRequest]) (*connect_go.Response[gen.FilePath], error) {
	return c.convertFile.CallUnary(ctx, req)
}

// OCR calls protoflow.ProtoflowService.OCR.
func (c *protoflowServiceClient) OCR(ctx context.Context, req *connect_go.Request[gen.FilePath]) (*connect_go.Response[gen.OCRText], error) {
	return c.oCR.CallUnary(ctx, req)
}

// Transcribe calls protoflow.ProtoflowService.Transcribe.
func (c *protoflowServiceClient) Transcribe(ctx context.Context, req *connect_go.Request[gen.TranscriptionRequest]) (*connect_go.Response[gen.Transcription], error) {
	return c.transcribe.CallUnary(ctx, req)
}

// LiveTranscribe calls protoflow.ProtoflowService.LiveTranscribe.
func (c *protoflowServiceClient) LiveTranscribe(ctx context.Context, req *connect_go.Request[gen.TranscriptionRequest]) (*connect_go.ServerStreamForClient[gen.Segment], error) {
	return c.liveTranscribe.CallServerStream(ctx, req)
}

// ProtoflowServiceHandler is an implementation of the protoflow.ProtoflowService service.
type ProtoflowServiceHandler interface {
	DownloadYouTubeVideo(context.Context, *connect_go.Request[gen.YouTubeVideo]) (*connect_go.Response[gen.FilePath], error)
	Chat(context.Context, *connect_go.Request[gen.ChatRequest], *connect_go.ServerStream[gen.ChatResponse]) error
	ConvertFile(context.Context, *connect_go.Request[gen.ConvertFileRequest]) (*connect_go.Response[gen.FilePath], error)
	OCR(context.Context, *connect_go.Request[gen.FilePath]) (*connect_go.Response[gen.OCRText], error)
	Transcribe(context.Context, *connect_go.Request[gen.TranscriptionRequest]) (*connect_go.Response[gen.Transcription], error)
	LiveTranscribe(context.Context, *connect_go.Request[gen.TranscriptionRequest], *connect_go.ServerStream[gen.Segment]) error
}

// NewProtoflowServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProtoflowServiceHandler(svc ProtoflowServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	protoflowServiceDownloadYouTubeVideoHandler := connect_go.NewUnaryHandler(
		ProtoflowServiceDownloadYouTubeVideoProcedure,
		svc.DownloadYouTubeVideo,
		opts...,
	)
	protoflowServiceChatHandler := connect_go.NewServerStreamHandler(
		ProtoflowServiceChatProcedure,
		svc.Chat,
		opts...,
	)
	protoflowServiceConvertFileHandler := connect_go.NewUnaryHandler(
		ProtoflowServiceConvertFileProcedure,
		svc.ConvertFile,
		opts...,
	)
	protoflowServiceOCRHandler := connect_go.NewUnaryHandler(
		ProtoflowServiceOCRProcedure,
		svc.OCR,
		opts...,
	)
	protoflowServiceTranscribeHandler := connect_go.NewUnaryHandler(
		ProtoflowServiceTranscribeProcedure,
		svc.Transcribe,
		opts...,
	)
	protoflowServiceLiveTranscribeHandler := connect_go.NewServerStreamHandler(
		ProtoflowServiceLiveTranscribeProcedure,
		svc.LiveTranscribe,
		opts...,
	)
	return "/protoflow.ProtoflowService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProtoflowServiceDownloadYouTubeVideoProcedure:
			protoflowServiceDownloadYouTubeVideoHandler.ServeHTTP(w, r)
		case ProtoflowServiceChatProcedure:
			protoflowServiceChatHandler.ServeHTTP(w, r)
		case ProtoflowServiceConvertFileProcedure:
			protoflowServiceConvertFileHandler.ServeHTTP(w, r)
		case ProtoflowServiceOCRProcedure:
			protoflowServiceOCRHandler.ServeHTTP(w, r)
		case ProtoflowServiceTranscribeProcedure:
			protoflowServiceTranscribeHandler.ServeHTTP(w, r)
		case ProtoflowServiceLiveTranscribeProcedure:
			protoflowServiceLiveTranscribeHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProtoflowServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProtoflowServiceHandler struct{}

func (UnimplementedProtoflowServiceHandler) DownloadYouTubeVideo(context.Context, *connect_go.Request[gen.YouTubeVideo]) (*connect_go.Response[gen.FilePath], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("protoflow.ProtoflowService.DownloadYouTubeVideo is not implemented"))
}

func (UnimplementedProtoflowServiceHandler) Chat(context.Context, *connect_go.Request[gen.ChatRequest], *connect_go.ServerStream[gen.ChatResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("protoflow.ProtoflowService.Chat is not implemented"))
}

func (UnimplementedProtoflowServiceHandler) ConvertFile(context.Context, *connect_go.Request[gen.ConvertFileRequest]) (*connect_go.Response[gen.FilePath], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("protoflow.ProtoflowService.ConvertFile is not implemented"))
}

func (UnimplementedProtoflowServiceHandler) OCR(context.Context, *connect_go.Request[gen.FilePath]) (*connect_go.Response[gen.OCRText], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("protoflow.ProtoflowService.OCR is not implemented"))
}

func (UnimplementedProtoflowServiceHandler) Transcribe(context.Context, *connect_go.Request[gen.TranscriptionRequest]) (*connect_go.Response[gen.Transcription], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("protoflow.ProtoflowService.Transcribe is not implemented"))
}

func (UnimplementedProtoflowServiceHandler) LiveTranscribe(context.Context, *connect_go.Request[gen.TranscriptionRequest], *connect_go.ServerStream[gen.Segment]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("protoflow.ProtoflowService.LiveTranscribe is not implemented"))
}

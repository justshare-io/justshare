// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api.proto

package genconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	gen "github.com/lunabrain-ai/lunabrain/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// APIName is the fully-qualified name of the API service.
	APIName = "lunabrain.API"
	// DiscordServiceName is the fully-qualified name of the DiscordService service.
	DiscordServiceName = "lunabrain.DiscordService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// APISaveProcedure is the fully-qualified name of the API's Save RPC.
	APISaveProcedure = "/lunabrain.API/Save"
	// APISearchProcedure is the fully-qualified name of the API's Search RPC.
	APISearchProcedure = "/lunabrain.API/Search"
	// DiscordServiceReadMessagesProcedure is the fully-qualified name of the DiscordService's
	// ReadMessages RPC.
	DiscordServiceReadMessagesProcedure = "/lunabrain.DiscordService/ReadMessages"
	// DiscordServiceWriteMessageProcedure is the fully-qualified name of the DiscordService's
	// WriteMessage RPC.
	DiscordServiceWriteMessageProcedure = "/lunabrain.DiscordService/WriteMessage"
)

// APIClient is a client for the lunabrain.API service.
type APIClient interface {
	Save(context.Context, *connect_go.Request[gen.Contents]) (*connect_go.Response[gen.ContentIDs], error)
	Search(context.Context, *connect_go.Request[gen.Query]) (*connect_go.Response[gen.Results], error)
}

// NewAPIClient constructs a client for the lunabrain.API service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAPIClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) APIClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aPIClient{
		save: connect_go.NewClient[gen.Contents, gen.ContentIDs](
			httpClient,
			baseURL+APISaveProcedure,
			opts...,
		),
		search: connect_go.NewClient[gen.Query, gen.Results](
			httpClient,
			baseURL+APISearchProcedure,
			opts...,
		),
	}
}

// aPIClient implements APIClient.
type aPIClient struct {
	save   *connect_go.Client[gen.Contents, gen.ContentIDs]
	search *connect_go.Client[gen.Query, gen.Results]
}

// Save calls lunabrain.API.Save.
func (c *aPIClient) Save(ctx context.Context, req *connect_go.Request[gen.Contents]) (*connect_go.Response[gen.ContentIDs], error) {
	return c.save.CallUnary(ctx, req)
}

// Search calls lunabrain.API.Search.
func (c *aPIClient) Search(ctx context.Context, req *connect_go.Request[gen.Query]) (*connect_go.Response[gen.Results], error) {
	return c.search.CallUnary(ctx, req)
}

// APIHandler is an implementation of the lunabrain.API service.
type APIHandler interface {
	Save(context.Context, *connect_go.Request[gen.Contents]) (*connect_go.Response[gen.ContentIDs], error)
	Search(context.Context, *connect_go.Request[gen.Query]) (*connect_go.Response[gen.Results], error)
}

// NewAPIHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAPIHandler(svc APIHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	aPISaveHandler := connect_go.NewUnaryHandler(
		APISaveProcedure,
		svc.Save,
		opts...,
	)
	aPISearchHandler := connect_go.NewUnaryHandler(
		APISearchProcedure,
		svc.Search,
		opts...,
	)
	return "/lunabrain.API/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case APISaveProcedure:
			aPISaveHandler.ServeHTTP(w, r)
		case APISearchProcedure:
			aPISearchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAPIHandler returns CodeUnimplemented from all methods.
type UnimplementedAPIHandler struct{}

func (UnimplementedAPIHandler) Save(context.Context, *connect_go.Request[gen.Contents]) (*connect_go.Response[gen.ContentIDs], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lunabrain.API.Save is not implemented"))
}

func (UnimplementedAPIHandler) Search(context.Context, *connect_go.Request[gen.Query]) (*connect_go.Response[gen.Results], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lunabrain.API.Search is not implemented"))
}

// DiscordServiceClient is a client for the lunabrain.DiscordService service.
type DiscordServiceClient interface {
	ReadMessages(context.Context, *connect_go.Request[gen.ReadMessagesRequest]) (*connect_go.ServerStreamForClient[gen.ReadMessagesResponse], error)
	WriteMessage(context.Context, *connect_go.Request[gen.WriteMessageRequest]) (*connect_go.Response[gen.WriteMessageResponse], error)
}

// NewDiscordServiceClient constructs a client for the lunabrain.DiscordService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDiscordServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DiscordServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &discordServiceClient{
		readMessages: connect_go.NewClient[gen.ReadMessagesRequest, gen.ReadMessagesResponse](
			httpClient,
			baseURL+DiscordServiceReadMessagesProcedure,
			opts...,
		),
		writeMessage: connect_go.NewClient[gen.WriteMessageRequest, gen.WriteMessageResponse](
			httpClient,
			baseURL+DiscordServiceWriteMessageProcedure,
			opts...,
		),
	}
}

// discordServiceClient implements DiscordServiceClient.
type discordServiceClient struct {
	readMessages *connect_go.Client[gen.ReadMessagesRequest, gen.ReadMessagesResponse]
	writeMessage *connect_go.Client[gen.WriteMessageRequest, gen.WriteMessageResponse]
}

// ReadMessages calls lunabrain.DiscordService.ReadMessages.
func (c *discordServiceClient) ReadMessages(ctx context.Context, req *connect_go.Request[gen.ReadMessagesRequest]) (*connect_go.ServerStreamForClient[gen.ReadMessagesResponse], error) {
	return c.readMessages.CallServerStream(ctx, req)
}

// WriteMessage calls lunabrain.DiscordService.WriteMessage.
func (c *discordServiceClient) WriteMessage(ctx context.Context, req *connect_go.Request[gen.WriteMessageRequest]) (*connect_go.Response[gen.WriteMessageResponse], error) {
	return c.writeMessage.CallUnary(ctx, req)
}

// DiscordServiceHandler is an implementation of the lunabrain.DiscordService service.
type DiscordServiceHandler interface {
	ReadMessages(context.Context, *connect_go.Request[gen.ReadMessagesRequest], *connect_go.ServerStream[gen.ReadMessagesResponse]) error
	WriteMessage(context.Context, *connect_go.Request[gen.WriteMessageRequest]) (*connect_go.Response[gen.WriteMessageResponse], error)
}

// NewDiscordServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDiscordServiceHandler(svc DiscordServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	discordServiceReadMessagesHandler := connect_go.NewServerStreamHandler(
		DiscordServiceReadMessagesProcedure,
		svc.ReadMessages,
		opts...,
	)
	discordServiceWriteMessageHandler := connect_go.NewUnaryHandler(
		DiscordServiceWriteMessageProcedure,
		svc.WriteMessage,
		opts...,
	)
	return "/lunabrain.DiscordService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DiscordServiceReadMessagesProcedure:
			discordServiceReadMessagesHandler.ServeHTTP(w, r)
		case DiscordServiceWriteMessageProcedure:
			discordServiceWriteMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDiscordServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDiscordServiceHandler struct{}

func (UnimplementedDiscordServiceHandler) ReadMessages(context.Context, *connect_go.Request[gen.ReadMessagesRequest], *connect_go.ServerStream[gen.ReadMessagesResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lunabrain.DiscordService.ReadMessages is not implemented"))
}

func (UnimplementedDiscordServiceHandler) WriteMessage(context.Context, *connect_go.Request[gen.WriteMessageRequest]) (*connect_go.Response[gen.WriteMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("lunabrain.DiscordService.WriteMessage is not implemented"))
}

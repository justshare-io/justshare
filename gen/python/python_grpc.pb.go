// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package python

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PythonClient is the client API for Python service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PythonClient interface {
	Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (*TranscribeResponse, error)
	Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (*SummarizeResponse, error)
	YoutubeTranscript(ctx context.Context, in *Video, opts ...grpc.CallOption) (*Transcript, error)
	Normalize(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Text, error)
	Categorize(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Categories, error)
	IndexDirectory(ctx context.Context, in *IndexDirectoryRequest, opts ...grpc.CallOption) (*Index, error)
	QueryIndex(ctx context.Context, in *Query, opts ...grpc.CallOption) (*QueryResult, error)
}

type pythonClient struct {
	cc grpc.ClientConnInterface
}

func NewPythonClient(cc grpc.ClientConnInterface) PythonClient {
	return &pythonClient{cc}
}

func (c *pythonClient) Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (*TranscribeResponse, error) {
	out := new(TranscribeResponse)
	err := c.cc.Invoke(ctx, "/python.Python/Transcribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pythonClient) Summarize(ctx context.Context, in *SummarizeRequest, opts ...grpc.CallOption) (*SummarizeResponse, error) {
	out := new(SummarizeResponse)
	err := c.cc.Invoke(ctx, "/python.Python/Summarize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pythonClient) YoutubeTranscript(ctx context.Context, in *Video, opts ...grpc.CallOption) (*Transcript, error) {
	out := new(Transcript)
	err := c.cc.Invoke(ctx, "/python.Python/YoutubeTranscript", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pythonClient) Normalize(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Text, error) {
	out := new(Text)
	err := c.cc.Invoke(ctx, "/python.Python/Normalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pythonClient) Categorize(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Categories, error) {
	out := new(Categories)
	err := c.cc.Invoke(ctx, "/python.Python/Categorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pythonClient) IndexDirectory(ctx context.Context, in *IndexDirectoryRequest, opts ...grpc.CallOption) (*Index, error) {
	out := new(Index)
	err := c.cc.Invoke(ctx, "/python.Python/IndexDirectory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pythonClient) QueryIndex(ctx context.Context, in *Query, opts ...grpc.CallOption) (*QueryResult, error) {
	out := new(QueryResult)
	err := c.cc.Invoke(ctx, "/python.Python/QueryIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PythonServer is the server API for Python service.
// All implementations must embed UnimplementedPythonServer
// for forward compatibility
type PythonServer interface {
	Transcribe(context.Context, *TranscribeRequest) (*TranscribeResponse, error)
	Summarize(context.Context, *SummarizeRequest) (*SummarizeResponse, error)
	YoutubeTranscript(context.Context, *Video) (*Transcript, error)
	Normalize(context.Context, *Text) (*Text, error)
	Categorize(context.Context, *Text) (*Categories, error)
	IndexDirectory(context.Context, *IndexDirectoryRequest) (*Index, error)
	QueryIndex(context.Context, *Query) (*QueryResult, error)
	mustEmbedUnimplementedPythonServer()
}

// UnimplementedPythonServer must be embedded to have forward compatible implementations.
type UnimplementedPythonServer struct {
}

func (UnimplementedPythonServer) Transcribe(context.Context, *TranscribeRequest) (*TranscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transcribe not implemented")
}
func (UnimplementedPythonServer) Summarize(context.Context, *SummarizeRequest) (*SummarizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Summarize not implemented")
}
func (UnimplementedPythonServer) YoutubeTranscript(context.Context, *Video) (*Transcript, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YoutubeTranscript not implemented")
}
func (UnimplementedPythonServer) Normalize(context.Context, *Text) (*Text, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Normalize not implemented")
}
func (UnimplementedPythonServer) Categorize(context.Context, *Text) (*Categories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Categorize not implemented")
}
func (UnimplementedPythonServer) IndexDirectory(context.Context, *IndexDirectoryRequest) (*Index, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexDirectory not implemented")
}
func (UnimplementedPythonServer) QueryIndex(context.Context, *Query) (*QueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIndex not implemented")
}
func (UnimplementedPythonServer) mustEmbedUnimplementedPythonServer() {}

// UnsafePythonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PythonServer will
// result in compilation errors.
type UnsafePythonServer interface {
	mustEmbedUnimplementedPythonServer()
}

func RegisterPythonServer(s grpc.ServiceRegistrar, srv PythonServer) {
	s.RegisterService(&Python_ServiceDesc, srv)
}

func _Python_Transcribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PythonServer).Transcribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/python.Python/Transcribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PythonServer).Transcribe(ctx, req.(*TranscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Python_Summarize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SummarizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PythonServer).Summarize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/python.Python/Summarize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PythonServer).Summarize(ctx, req.(*SummarizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Python_YoutubeTranscript_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Video)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PythonServer).YoutubeTranscript(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/python.Python/YoutubeTranscript",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PythonServer).YoutubeTranscript(ctx, req.(*Video))
	}
	return interceptor(ctx, in, info, handler)
}

func _Python_Normalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PythonServer).Normalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/python.Python/Normalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PythonServer).Normalize(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

func _Python_Categorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PythonServer).Categorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/python.Python/Categorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PythonServer).Categorize(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

func _Python_IndexDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PythonServer).IndexDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/python.Python/IndexDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PythonServer).IndexDirectory(ctx, req.(*IndexDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Python_QueryIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PythonServer).QueryIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/python.Python/QueryIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PythonServer).QueryIndex(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

// Python_ServiceDesc is the grpc.ServiceDesc for Python service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Python_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "python.Python",
	HandlerType: (*PythonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Transcribe",
			Handler:    _Python_Transcribe_Handler,
		},
		{
			MethodName: "Summarize",
			Handler:    _Python_Summarize_Handler,
		},
		{
			MethodName: "YoutubeTranscript",
			Handler:    _Python_YoutubeTranscript_Handler,
		},
		{
			MethodName: "Normalize",
			Handler:    _Python_Normalize_Handler,
		},
		{
			MethodName: "Categorize",
			Handler:    _Python_Categorize_Handler,
		},
		{
			MethodName: "IndexDirectory",
			Handler:    _Python_IndexDirectory_Handler,
		},
		{
			MethodName: "QueryIndex",
			Handler:    _Python_QueryIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "python.proto",
}

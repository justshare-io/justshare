// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiscordServiceClient is the client API for DiscordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiscordServiceClient interface {
	ReadMessages(ctx context.Context, in *ReadMessagesRequest, opts ...grpc.CallOption) (DiscordService_ReadMessagesClient, error)
	WriteMessage(ctx context.Context, in *WriteMessageRequest, opts ...grpc.CallOption) (*WriteMessageResponse, error)
}

type discordServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscordServiceClient(cc grpc.ClientConnInterface) DiscordServiceClient {
	return &discordServiceClient{cc}
}

func (c *discordServiceClient) ReadMessages(ctx context.Context, in *ReadMessagesRequest, opts ...grpc.CallOption) (DiscordService_ReadMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &DiscordService_ServiceDesc.Streams[0], "/chat.DiscordService/ReadMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &discordServiceReadMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DiscordService_ReadMessagesClient interface {
	Recv() (*ReadMessagesResponse, error)
	grpc.ClientStream
}

type discordServiceReadMessagesClient struct {
	grpc.ClientStream
}

func (x *discordServiceReadMessagesClient) Recv() (*ReadMessagesResponse, error) {
	m := new(ReadMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *discordServiceClient) WriteMessage(ctx context.Context, in *WriteMessageRequest, opts ...grpc.CallOption) (*WriteMessageResponse, error) {
	out := new(WriteMessageResponse)
	err := c.cc.Invoke(ctx, "/chat.DiscordService/WriteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiscordServiceServer is the server API for DiscordService service.
// All implementations should embed UnimplementedDiscordServiceServer
// for forward compatibility
type DiscordServiceServer interface {
	ReadMessages(*ReadMessagesRequest, DiscordService_ReadMessagesServer) error
	WriteMessage(context.Context, *WriteMessageRequest) (*WriteMessageResponse, error)
}

// UnimplementedDiscordServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDiscordServiceServer struct {
}

func (UnimplementedDiscordServiceServer) ReadMessages(*ReadMessagesRequest, DiscordService_ReadMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadMessages not implemented")
}
func (UnimplementedDiscordServiceServer) WriteMessage(context.Context, *WriteMessageRequest) (*WriteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteMessage not implemented")
}

// UnsafeDiscordServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiscordServiceServer will
// result in compilation errors.
type UnsafeDiscordServiceServer interface {
	mustEmbedUnimplementedDiscordServiceServer()
}

func RegisterDiscordServiceServer(s grpc.ServiceRegistrar, srv DiscordServiceServer) {
	s.RegisterService(&DiscordService_ServiceDesc, srv)
}

func _DiscordService_ReadMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DiscordServiceServer).ReadMessages(m, &discordServiceReadMessagesServer{stream})
}

type DiscordService_ReadMessagesServer interface {
	Send(*ReadMessagesResponse) error
	grpc.ServerStream
}

type discordServiceReadMessagesServer struct {
	grpc.ServerStream
}

func (x *discordServiceReadMessagesServer) Send(m *ReadMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DiscordService_WriteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiscordServiceServer).WriteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.DiscordService/WriteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiscordServiceServer).WriteMessage(ctx, req.(*WriteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiscordService_ServiceDesc is the grpc.ServiceDesc for DiscordService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiscordService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.DiscordService",
	HandlerType: (*DiscordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteMessage",
			Handler:    _DiscordService_WriteMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadMessages",
			Handler:       _DiscordService_ReadMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat/chat.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: protoflow.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtoflowServiceClient is the client API for ProtoflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoflowServiceClient interface {
	DownloadYouTubeVideo(ctx context.Context, in *YouTubeVideo, opts ...grpc.CallOption) (*FilePath, error)
	GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsResponse, error)
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (ProtoflowService_ChatClient, error)
	ConvertFile(ctx context.Context, in *ConvertFileRequest, opts ...grpc.CallOption) (*FilePath, error)
	OCR(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*OCRText, error)
	Transcribe(ctx context.Context, in *TranscriptionRequest, opts ...grpc.CallOption) (*Transcription, error)
	LiveTranscribe(ctx context.Context, in *TranscriptionRequest, opts ...grpc.CallOption) (ProtoflowService_LiveTranscribeClient, error)
}

type protoflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoflowServiceClient(cc grpc.ClientConnInterface) ProtoflowServiceClient {
	return &protoflowServiceClient{cc}
}

func (c *protoflowServiceClient) DownloadYouTubeVideo(ctx context.Context, in *YouTubeVideo, opts ...grpc.CallOption) (*FilePath, error) {
	out := new(FilePath)
	err := c.cc.Invoke(ctx, "/protoflow.ProtoflowService/DownloadYouTubeVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoflowServiceClient) GetSessions(ctx context.Context, in *GetSessionsRequest, opts ...grpc.CallOption) (*GetSessionsResponse, error) {
	out := new(GetSessionsResponse)
	err := c.cc.Invoke(ctx, "/protoflow.ProtoflowService/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoflowServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, "/protoflow.ProtoflowService/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoflowServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (ProtoflowService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtoflowService_ServiceDesc.Streams[0], "/protoflow.ProtoflowService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoflowServiceChatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtoflowService_ChatClient interface {
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type protoflowServiceChatClient struct {
	grpc.ClientStream
}

func (x *protoflowServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *protoflowServiceClient) ConvertFile(ctx context.Context, in *ConvertFileRequest, opts ...grpc.CallOption) (*FilePath, error) {
	out := new(FilePath)
	err := c.cc.Invoke(ctx, "/protoflow.ProtoflowService/ConvertFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoflowServiceClient) OCR(ctx context.Context, in *FilePath, opts ...grpc.CallOption) (*OCRText, error) {
	out := new(OCRText)
	err := c.cc.Invoke(ctx, "/protoflow.ProtoflowService/OCR", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoflowServiceClient) Transcribe(ctx context.Context, in *TranscriptionRequest, opts ...grpc.CallOption) (*Transcription, error) {
	out := new(Transcription)
	err := c.cc.Invoke(ctx, "/protoflow.ProtoflowService/Transcribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoflowServiceClient) LiveTranscribe(ctx context.Context, in *TranscriptionRequest, opts ...grpc.CallOption) (ProtoflowService_LiveTranscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProtoflowService_ServiceDesc.Streams[1], "/protoflow.ProtoflowService/LiveTranscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &protoflowServiceLiveTranscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProtoflowService_LiveTranscribeClient interface {
	Recv() (*Segment, error)
	grpc.ClientStream
}

type protoflowServiceLiveTranscribeClient struct {
	grpc.ClientStream
}

func (x *protoflowServiceLiveTranscribeClient) Recv() (*Segment, error) {
	m := new(Segment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProtoflowServiceServer is the server API for ProtoflowService service.
// All implementations should embed UnimplementedProtoflowServiceServer
// for forward compatibility
type ProtoflowServiceServer interface {
	DownloadYouTubeVideo(context.Context, *YouTubeVideo) (*FilePath, error)
	GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsResponse, error)
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	Chat(*ChatRequest, ProtoflowService_ChatServer) error
	ConvertFile(context.Context, *ConvertFileRequest) (*FilePath, error)
	OCR(context.Context, *FilePath) (*OCRText, error)
	Transcribe(context.Context, *TranscriptionRequest) (*Transcription, error)
	LiveTranscribe(*TranscriptionRequest, ProtoflowService_LiveTranscribeServer) error
}

// UnimplementedProtoflowServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProtoflowServiceServer struct {
}

func (UnimplementedProtoflowServiceServer) DownloadYouTubeVideo(context.Context, *YouTubeVideo) (*FilePath, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadYouTubeVideo not implemented")
}
func (UnimplementedProtoflowServiceServer) GetSessions(context.Context, *GetSessionsRequest) (*GetSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedProtoflowServiceServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedProtoflowServiceServer) Chat(*ChatRequest, ProtoflowService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedProtoflowServiceServer) ConvertFile(context.Context, *ConvertFileRequest) (*FilePath, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertFile not implemented")
}
func (UnimplementedProtoflowServiceServer) OCR(context.Context, *FilePath) (*OCRText, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OCR not implemented")
}
func (UnimplementedProtoflowServiceServer) Transcribe(context.Context, *TranscriptionRequest) (*Transcription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transcribe not implemented")
}
func (UnimplementedProtoflowServiceServer) LiveTranscribe(*TranscriptionRequest, ProtoflowService_LiveTranscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method LiveTranscribe not implemented")
}

// UnsafeProtoflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoflowServiceServer will
// result in compilation errors.
type UnsafeProtoflowServiceServer interface {
	mustEmbedUnimplementedProtoflowServiceServer()
}

func RegisterProtoflowServiceServer(s grpc.ServiceRegistrar, srv ProtoflowServiceServer) {
	s.RegisterService(&ProtoflowService_ServiceDesc, srv)
}

func _ProtoflowService_DownloadYouTubeVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YouTubeVideo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoflowServiceServer).DownloadYouTubeVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoflow.ProtoflowService/DownloadYouTubeVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoflowServiceServer).DownloadYouTubeVideo(ctx, req.(*YouTubeVideo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoflowService_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoflowServiceServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoflow.ProtoflowService/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoflowServiceServer).GetSessions(ctx, req.(*GetSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoflowService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoflowServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoflow.ProtoflowService/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoflowServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoflowService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtoflowServiceServer).Chat(m, &protoflowServiceChatServer{stream})
}

type ProtoflowService_ChatServer interface {
	Send(*ChatResponse) error
	grpc.ServerStream
}

type protoflowServiceChatServer struct {
	grpc.ServerStream
}

func (x *protoflowServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ProtoflowService_ConvertFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConvertFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoflowServiceServer).ConvertFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoflow.ProtoflowService/ConvertFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoflowServiceServer).ConvertFile(ctx, req.(*ConvertFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoflowService_OCR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilePath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoflowServiceServer).OCR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoflow.ProtoflowService/OCR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoflowServiceServer).OCR(ctx, req.(*FilePath))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoflowService_Transcribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoflowServiceServer).Transcribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoflow.ProtoflowService/Transcribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoflowServiceServer).Transcribe(ctx, req.(*TranscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoflowService_LiveTranscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TranscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProtoflowServiceServer).LiveTranscribe(m, &protoflowServiceLiveTranscribeServer{stream})
}

type ProtoflowService_LiveTranscribeServer interface {
	Send(*Segment) error
	grpc.ServerStream
}

type protoflowServiceLiveTranscribeServer struct {
	grpc.ServerStream
}

func (x *protoflowServiceLiveTranscribeServer) Send(m *Segment) error {
	return x.ServerStream.SendMsg(m)
}

// ProtoflowService_ServiceDesc is the grpc.ServiceDesc for ProtoflowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoflowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoflow.ProtoflowService",
	HandlerType: (*ProtoflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DownloadYouTubeVideo",
			Handler:    _ProtoflowService_DownloadYouTubeVideo_Handler,
		},
		{
			MethodName: "GetSessions",
			Handler:    _ProtoflowService_GetSessions_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _ProtoflowService_GetSession_Handler,
		},
		{
			MethodName: "ConvertFile",
			Handler:    _ProtoflowService_ConvertFile_Handler,
		},
		{
			MethodName: "OCR",
			Handler:    _ProtoflowService_OCR_Handler,
		},
		{
			MethodName: "Transcribe",
			Handler:    _ProtoflowService_Transcribe_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ProtoflowService_Chat_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LiveTranscribe",
			Handler:       _ProtoflowService_LiveTranscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protoflow.proto",
}

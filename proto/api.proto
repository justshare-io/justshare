syntax = "proto3";

package lunabrain;
import "google/protobuf/any.proto";
option go_package = "./gen";

service API {
  rpc Save(Contents) returns (ContentIDs);
  rpc Search(Query) returns (Results);
}

service DiscordService {
  rpc ReadMessages(ReadMessagesRequest) returns (stream ReadMessagesResponse);
  rpc WriteMessage(WriteMessageRequest) returns (WriteMessageResponse);
}

message ReadMessagesRequest {
  string channelID = 1;
  string lastMessageID = 2;
}

message ReadMessagesResponse {
  string messageID = 1;
  string content = 2;
  string authorID = 3;
  string authorUsername = 4;
  string authorAvatar = 5;
  string createdAt = 6;
  string channelID = 7;
}

message WriteMessageRequest {
  string channelID = 1;
  string content = 2;
}

message WriteMessageResponse {
  string messageID = 1;
}

message Contents {
  repeated Content contents = 1;
}

message Query {
  string query = 1;
  uint32 page = 2;
  string contentID = 3;
}

message Results {
  repeated StoredContent storedContent = 1;
}

message StoredContent {
  Content content = 1;
  repeated NormalizedContent normalized = 2;
}

// Content has data and metadata
message Content {
  bytes data = 1;
  ContentType type = 2;
  oneof options {
    TextOptions textOptions = 3;
    FileOptions fileOptions = 4;
    URLOptions urlOptions = 5;
  };
  map<string, string> metadata = 6;
  string createdAt = 7;
  string id = 8;
}

message NormalizedContent {
  string data = 1;
  NormalizerID normalizerID = 2;
  string contentID = 3;
  repeated TransformedContent transformed = 4;
}

message TransformedContent {
  string data = 1;
  TransformerID transformerID = 2;
  string normalizedContentID = 3;
}

message File {
  bytes data = 1;
}

message ContentIDs {
  repeated ContentID contentIDs = 1;
}

message ContentID {
  string id = 1;
}

enum ContentType {
  TEXT = 0;
  AUDIO = 1;
  URL = 2;
}

message TextOptions {
  string data = 1;
}

message FileOptions {
  string file = 1;
  bytes data = 2;
}

message URLOptions {
  string url = 1;
  bool crawl = 2;
}

// Should be in its own file
enum NormalizerID {
  URL_YOUTUBE_TRANSCRIPT = 0;
  URL_ARTICLE = 1;
  URL_HTML = 2;
  URL_CLEAN = 3;
  TEXT_CLEAN = 4;
  AUDIO_TRANSCRIPT = 5;
  GITHUB_README = 7;
}

// Should be in its own file
enum TransformerID {
  SUMMARY = 0;
  CATEGORIES = 1;
}

// Should be in its own file
enum EntityType {
  URL_ENTITY = 0;
}

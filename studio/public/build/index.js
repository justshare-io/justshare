"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all3) => {
    for (var name in all3)
      __defProp(target, name, { get: all3[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
  var __publicField = (obj, key, value) => {
    __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
    return value;
  };

  // ../node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "../node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn2(format2) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign4 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component17(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component17.prototype.isReactComponent = {};
          Component17.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component17.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component17.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component17.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign4(pureComponentPrototype, Component17.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef7() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element2 = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element2._store = {};
              Object.defineProperty(element2._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element2, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element2, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element2.props);
                Object.freeze(element2);
              }
            }
            return element2;
          };
          function createElement77(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement6(element2, config, children) {
            if (element2 === null || element2 === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element2 + ".");
            }
            var propName;
            var props = assign4({}, element2.props);
            var key = element2.key;
            var ref = element2.ref;
            var self2 = element2._self;
            var source = element2._source;
            var owner = element2._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element2.type && element2.type.defaultProps) {
                defaultProps = element2.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i2 = 0; i2 < childrenLength; i2++) {
                childArray[i2] = arguments[i2 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element2.type, key, ref, self2, source, owner, props);
          }
          function isValidElement11(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text4) {
            return text4.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element2, index2) {
            if (typeof element2 === "object" && element2 !== null && element2.key != null) {
              {
                checkKeyStringCoercion(element2.key);
              }
              return escape2("" + element2.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array2, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array2, escapedChildKey, "", function(c2) {
                  return c2;
                });
              } else if (mappedChild != null) {
                if (isValidElement11(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array2.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i2 = 0; i2 < children.length; i2++) {
                child = children[i2];
                nextName = nextNamePrefix + getElementKey(child, i2);
                subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array2, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func3, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func3.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n3 = 0;
            mapChildren(children, function() {
              n3++;
            });
            return n3;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement11(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext35(defaultValue2) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue2,
              _currentValue2: defaultValue2,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef55(render2) {
            {
              if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render2 !== "function") {
                error("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
              } else {
                if (render2.length !== 0 && render2.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render2 != null) {
                if (render2.defaultProps != null || render2.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType2 = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render2
            };
            {
              var ownName;
              Object.defineProperty(elementType2, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render2.name && !render2.displayName) {
                    render2.displayName = name;
                  }
                }
              });
            }
            return elementType2;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo6(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType2 = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType2, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType2;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext40(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState38(initialState2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState2);
          }
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef46(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect46(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create2, deps);
          }
          function useInsertionEffect7(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create2, deps);
          }
          function useLayoutEffect7(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create2, deps);
          }
          function useCallback26(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo23(create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create2, deps);
          }
          function useImperativeHandle(ref, create2, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create2, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId4() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign4({}, props, {
                    value: prevLog
                  }),
                  info: assign4({}, props, {
                    value: prevInfo
                  }),
                  warn: assign4({}, props, {
                    value: prevWarn
                  }),
                  error: assign4({}, props, {
                    value: prevError
                  }),
                  group: assign4({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign4({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign4({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control3;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control3 = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control3 = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control3 = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control3 && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control3.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component18) {
            var prototype = Component18.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element2) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element2, parentType) {
            if (!element2._store || element2._store.validated || element2.key != null) {
              return;
            }
            element2._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element2 && element2._owner && element2._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element2._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element2);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node4, parentType) {
            if (typeof node4 !== "object") {
              return;
            }
            if (isArray(node4)) {
              for (var i2 = 0; i2 < node4.length; i2++) {
                var child = node4[i2];
                if (isValidElement11(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement11(node4)) {
              if (node4._store) {
                node4._store.validated = true;
              }
            } else if (node4) {
              var iteratorFn = getIteratorFn(node4);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node4.entries) {
                  var iterator = iteratorFn.call(node4);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement11(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element2) {
            {
              var type = element2.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element2.props, "prop", name, element2);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys2.length; i2++) {
                var key = keys2[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element2 = createElement77.apply(this, arguments);
            if (element2 == null) {
              return element2;
            }
            if (validType) {
              for (var i2 = 2; i2 < arguments.length; i2++) {
                validateChildKeys(arguments[i2], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element2);
            } else {
              validatePropTypes(element2);
            }
            return element2;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element2, props, children) {
            var newElement = cloneElement6.apply(this, arguments);
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve2, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve2, reject);
                      } else {
                        resolve2(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve2, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve2, reject);
                      } else {
                        resolve2(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve2, reject) {
                      resolve2(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve2, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve2(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve2, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve2(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i2 = 0;
                try {
                  for (; i2 < queue.length; i2++) {
                    var callback = queue[i2];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i2 + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory2 = createFactoryWithValidation;
          var Children8 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children8;
          exports.Component = Component17;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE2;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext35;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory2;
          exports.createRef = createRef7;
          exports.forwardRef = forwardRef55;
          exports.isValidElement = isValidElement11;
          exports.lazy = lazy;
          exports.memo = memo6;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback26;
          exports.useContext = useContext40;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect46;
          exports.useId = useId4;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect7;
          exports.useLayoutEffect = useLayoutEffect7;
          exports.useMemo = useMemo23;
          exports.useReducer = useReducer2;
          exports.useRef = useRef46;
          exports.useState = useState38;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react/index.js
  var require_react = __commonJS({
    "../node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // ../node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "../node_modules/react-dom/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push2(heap, node4) {
            var index2 = heap.length;
            heap.push(node4);
            siftUp(heap, node4, index2);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node4, i2) {
            var index2 = i2;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node4) > 0) {
                heap[parentIndex] = node4;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node4, i2) {
            var index2 = i2;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node4) < 0) {
                if (rightIndex < length2 && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node4;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node4;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right, node4) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node4;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b3) {
            var diff = a2.sortIndex - b3.sortIndex;
            return diff !== 0 ? diff : a2.id - b3.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority2 = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority2;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority2;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
                priorityLevel = NormalPriority2;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority2:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push2(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority2;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react-dom/node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "../node_modules/react-dom/node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // ../node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "../node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React215 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React215.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn2(format2) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format2, args);
              }
            }
          }
          function error(format2) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment32 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i2 = 0; i2 < dependencies.length; i2++) {
              allNativeEvents.add(dependencies[i2]);
            }
          }
          var canUseDOM4 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node4, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node4[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node4.hasAttribute(attributeName)) {
                    var value = node4.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node4.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node4.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node4.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node4, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node4.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node4.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node4, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node4.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node4.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node4[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node4[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node4.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node4.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node4.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign4 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign4({}, props, {
                    value: prevLog
                  }),
                  info: assign4({}, props, {
                    value: prevInfo
                  }),
                  warn: assign4({}, props, {
                    value: prevWarn
                  }),
                  error: assign4({}, props, {
                    value: prevError
                  }),
                  group: assign4({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign4({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign4({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control3;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control3 = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control3 = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control3 = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control3 && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control3.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component17) {
            var prototype = Component17.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node4 = workInProgress2;
              do {
                info += describeFiber(node4);
                node4 = node4.return;
              } while (node4);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment32:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE2) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString2(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node4) {
            return node4._valueTracker;
          }
          function detachTracker(node4) {
            node4._valueTracker = null;
          }
          function getValueFromNode(node4) {
            var value = "";
            if (!node4) {
              return value;
            }
            if (isCheckable(node4)) {
              value = node4.checked ? "true" : "false";
            } else {
              value = node4.value;
            }
            return value;
          }
          function trackValueOnNode(node4) {
            var valueField = isCheckable(node4) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node4.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node4[valueField]);
            }
            var currentValue = "" + node4[valueField];
            if (node4.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node4, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node4, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node4);
                delete node4[valueField];
              }
            };
            return tracker;
          }
          function track2(node4) {
            if (getTracker(node4)) {
              return;
            }
            node4._valueTracker = trackValueOnNode(node4);
          }
          function updateValueIfChanged(node4) {
            if (!node4) {
              return false;
            }
            var tracker = getTracker(node4);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node4);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e2) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled2(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element2, props) {
            var node4 = element2;
            var checked = props.checked;
            var hostProps = assign4({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node4._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element2, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node4 = element2;
            var defaultValue2 = props.defaultValue == null ? "" : props.defaultValue;
            node4._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue2),
              controlled: isControlled2(props)
            };
          }
          function updateChecked(element2, props) {
            var node4 = element2;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node4, "checked", checked, false);
            }
          }
          function updateWrapper(element2, props) {
            var node4 = element2;
            {
              var controlled = isControlled2(props);
              if (!node4._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node4._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element2, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node4.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node4.value != value) {
                  node4.value = toString2(value);
                }
              } else if (node4.value !== toString2(value)) {
                node4.value = toString2(value);
              }
            } else if (type === "submit" || type === "reset") {
              node4.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node4, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node4, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node4.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element2, props, isHydrating2) {
            var node4 = element2;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString2(node4._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node4.value) {
                    node4.value = initialValue;
                  }
                }
              }
              {
                node4.defaultValue = initialValue;
              }
            }
            var name = node4.name;
            if (name !== "") {
              node4.name = "";
            }
            {
              node4.defaultChecked = !node4.defaultChecked;
              node4.defaultChecked = !!node4._wrapperState.initialChecked;
            }
            if (name !== "") {
              node4.name = name;
            }
          }
          function restoreControlledState(element2, props) {
            var node4 = element2;
            updateWrapper(node4, props);
            updateNamedCousins(node4, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i2 = 0; i2 < group.length; i2++) {
                var otherNode = group[i2];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node4, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node4.ownerDocument) !== node4
            ) {
              if (value == null) {
                node4.defaultValue = toString2(node4._wrapperState.initialValue);
              } else if (node4.defaultValue !== toString2(value)) {
                node4.defaultValue = toString2(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element2, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React215.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element2, props) {
            if (props.value != null) {
              element2.setAttribute("value", toString2(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i2 = 0; i2 < valuePropNames.length; i2++) {
                var propName = valuePropNames[i2];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node4, multiple, propValue, setDefaultSelected) {
            var options2 = node4.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i2 = 0; i2 < selectedValues.length; i2++) {
                selectedValue["$" + selectedValues[i2]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString2(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element2, props) {
            return assign4({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element2, props) {
            var node4 = element2;
            {
              checkSelectPropTypes(props);
            }
            node4._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element2, props) {
            var node4 = element2;
            node4.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node4, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node4, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element2, props) {
            var node4 = element2;
            var wasMultiple = node4._wrapperState.wasMultiple;
            node4._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node4, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node4, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node4, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element2, props) {
            var node4 = element2;
            var value = props.value;
            if (value != null) {
              updateOptions(node4, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element2, props) {
            var node4 = element2;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign4({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString2(node4._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element2, props) {
            var node4 = element2;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue2 = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue2 != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue2 = children;
                }
              }
              if (defaultValue2 == null) {
                defaultValue2 = "";
              }
              initialValue = defaultValue2;
            }
            node4._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element2, props) {
            var node4 = element2;
            var value = getToStringValue(props.value);
            var defaultValue2 = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString2(value);
              if (newValue !== node4.value) {
                node4.value = newValue;
              }
              if (props.defaultValue == null && node4.defaultValue !== newValue) {
                node4.defaultValue = newValue;
              }
            }
            if (defaultValue2 != null) {
              node4.defaultValue = toString2(defaultValue2);
            }
          }
          function postMountWrapper$3(element2, props) {
            var node4 = element2;
            var textContent = node4.textContent;
            if (textContent === node4._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node4.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element2, props) {
            updateWrapper$1(element2, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func3) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func3(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func3;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node4, html4) {
            if (node4.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node4)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html4.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node4.firstChild) {
                  node4.removeChild(node4.firstChild);
                }
                while (svgNode.firstChild) {
                  node4.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node4.innerHTML = html4;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node4, text4) {
            if (text4) {
              var firstChild = node4.firstChild;
              if (firstChild && firstChild === node4.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text4;
                return;
              }
            }
            node4.textContent = text4;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty3) {
            var isEmpty = value == null || typeof value === "boolean" || value === "";
            if (isEmpty) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string4) {
              return string4.replace(hyphenPattern, function(_2, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles2) {
            {
              var serialized = "";
              var delimiter3 = "";
              for (var styleName in styles2) {
                if (!styles2.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles2[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter3 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter3 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node4, styles2) {
            var style2 = node4.style;
            for (var styleName in styles2) {
              if (!styles2.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles2[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles2[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles2) {
            var expanded = {};
            for (var key in styles2) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i2 = 0; i2 < longhands.length; i2++) {
                expanded[longhands[i2]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign4({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid3 = validateProperty(type, key);
                if (!isValid3) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid3 = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid3) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i2 = 0; i2 < queuedTargets.length; i2++) {
                restoreStateOfTarget(queuedTargets[i2]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b3) {
            if (isInsideEventHandler) {
              return fn(a2, b3);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b3);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM4) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e2) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func3, context, a2, b3, c2, d2, e2, f3) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func3.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func3, context, a2, b3, c2, d2, e2, f3) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func3.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func3, context, a2, b3, c2, d2, e2, f3) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func3, context, a2, b3, c2, d2, e2, f3) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref2 = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref2 | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref2 | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref2 | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node4 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node4;
              do {
                node4 = nextNode;
                if ((node4.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node4.return;
                }
                nextNode = node4.return;
              } while (nextNode);
            } else {
              while (node4.return) {
                node4 = node4.return;
              }
            }
            if (node4.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b3 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b3 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b3) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b3.return) {
                a2 = parentA;
                b3 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b3 = parentB;
                    break;
                  }
                  if (_child === b3) {
                    didFindChild = true;
                    b3 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b3 = parentA;
                      break;
                    }
                    if (_child === b3) {
                      didFindChild = true;
                      b3 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b3) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node4) {
            if (node4.tag === HostComponent || node4.tag === HostText) {
              return node4;
            }
            var child = node4.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node4) {
            if (node4.tag === HostComponent || node4.tag === HostText) {
              return node4;
            }
            var child = node4.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority2 = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign4({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root152, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root152, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root152, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root152.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority2;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority2;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root152, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root152, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root152) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root152);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label6 = getLabelForLane(lane);
                map.set(lane, label6);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root152, wipLanes) {
            var pendingLanes = root152.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root152.suspendedLanes;
            var pingedLanes = root152.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root152.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root152.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root152, lanes) {
            var eventTimes = root152.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root152, currentTime) {
            var pendingLanes = root152.pendingLanes;
            var suspendedLanes = root152.suspendedLanes;
            var pingedLanes = root152.pingedLanes;
            var expirationTimes = root152.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root152.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root152) {
            return getHighestPriorityLanes(root152.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root152) {
            var everythingButOffscreen = root152.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root152, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root152, lanes) {
            return (lanes & root152.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b3) {
            return (a2 & b3) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a2, b3) {
            return a2 | b3;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a2, b3) {
            return a2 & b3;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b3) {
            return a2 !== NoLane && a2 < b3 ? a2 : b3;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i2 = 0; i2 < TotalLanes; i2++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root152, updateLane, eventTime) {
            root152.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root152.suspendedLanes = NoLanes;
              root152.pingedLanes = NoLanes;
            }
            var eventTimes = root152.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root152, suspendedLanes) {
            root152.suspendedLanes |= suspendedLanes;
            root152.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root152.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root152, pingedLanes, eventTime) {
            root152.pingedLanes |= root152.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root152, remainingLanes) {
            var noLongerPendingLanes = root152.pendingLanes & ~remainingLanes;
            root152.pendingLanes = remainingLanes;
            root152.suspendedLanes = NoLanes;
            root152.pingedLanes = NoLanes;
            root152.expiredLanes &= remainingLanes;
            root152.mutableReadLanes &= remainingLanes;
            root152.entangledLanes &= remainingLanes;
            var entanglements = root152.entanglements;
            var eventTimes = root152.eventTimes;
            var expirationTimes = root152.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root152, entangledLanes) {
            var rootEntangledLanes = root152.entangledLanes |= entangledLanes;
            var entanglements = root152.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index3] & entangledLanes
              ) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root152, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root152.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root152, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root152.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root152, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root152.pendingUpdatersLaneMap;
            var memoizedUpdaters = root152.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root152, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority2(priority, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b3) {
            return a2 !== 0 && a2 < b3 ? a2 : b3;
          }
          function lowerEventPriority(a2, b3) {
            return a2 === 0 || a2 > b3 ? a2 : b3;
          }
          function isHigherEventPriority(a2, b3) {
            return a2 !== 0 && a2 < b3;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root152) {
            var currentState = root152.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root152 = nearestMounted.stateNode;
                  if (isRootDehydrated(root152)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i2 = 0;
            for (; i2 < queuedExplicitHydrationTargets.length; i2++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i2].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i2, 0, queuedTarget);
            if (i2 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
                var queuedEvent = queuedDiscreteEvents[i2];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled2() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container2, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container2, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root152 = nearestMounted.stateNode;
                  if (isRootDehydrated(root152)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority2:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root151 = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root151 = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root151 = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end2;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end2 = 1; end2 <= minEnd; end2++) {
              if (startValue[startLength - end2] !== endValue[endLength - end2]) {
                break;
              }
            }
            var sliceTail = end2 > 1 ? 1 - end2 : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root151) {
              return root151.value;
            }
            return root151.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize6 = Interface[_propName];
                if (normalize6) {
                  this[_propName] = normalize6(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign4(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign4({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign4({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign4({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign4({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign4({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign4({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign4({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign4({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign4({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign4({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign4({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign4({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM4 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM4 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM4 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM4 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars3 = nativeEvent.data;
                if (chars3 === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars3;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars3 = getData();
                reset();
                isComposing = false;
                return chars3;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars3;
            if (canUseTextInputEvent) {
              chars3 = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars3 = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars3) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars3;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM4) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element2 = document.createElement("div");
              element2.setAttribute(eventName, "return;");
              isSupported = typeof element2[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM4) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node4) {
            var state = node4._wrapperState;
            if (!state || !state.controlled || node4.type !== "number") {
              return;
            }
            {
              setDefaultValue(node4, "number", node4.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win2;
            if (nativeEventTarget.window === nativeEventTarget) {
              win2 = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win2 = doc.defaultView || doc.parentWindow;
              } else {
                win2 = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win2 : getNodeFromInstance(from2);
            var toNode = to == null ? win2 : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is3(x, y2) {
            return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
          }
          var objectIs2 = typeof Object.is === "function" ? Object.is : is3;
          function shallowEqual(objA, objB) {
            if (objectIs2(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i2 = 0; i2 < keysA.length; i2++) {
              var currentKey = keysA[i2];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs2(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node4) {
            while (node4 && node4.firstChild) {
              node4 = node4.firstChild;
            }
            return node4;
          }
          function getSiblingNode(node4) {
            while (node4) {
              if (node4.nextSibling) {
                return node4.nextSibling;
              }
              node4 = node4.parentNode;
            }
          }
          function getNodeForCharacterOffset(root152, offset) {
            var node4 = getLeafNode(root152);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node4) {
              if (node4.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node4.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node4,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node4 = getLeafNode(getSiblingNode(node4));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win2 = ownerDocument && ownerDocument.defaultView || window;
            var selection = win2.getSelection && win2.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e2) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start2 = -1;
            var end2 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node4 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node4 === anchorNode && (anchorOffset === 0 || node4.nodeType === TEXT_NODE)) {
                    start2 = length2 + anchorOffset;
                  }
                  if (node4 === focusNode && (focusOffset === 0 || node4.nodeType === TEXT_NODE)) {
                    end2 = length2 + focusOffset;
                  }
                  if (node4.nodeType === TEXT_NODE) {
                    length2 += node4.nodeValue.length;
                  }
                  if ((next2 = node4.firstChild) === null) {
                    break;
                  }
                  parentNode = node4;
                  node4 = next2;
                }
                while (true) {
                  if (node4 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start2 = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end2 = length2;
                  }
                  if ((next2 = node4.nextSibling) !== null) {
                    break;
                  }
                  node4 = parentNode;
                  parentNode = node4.parentNode;
                }
                node4 = next2;
              }
            if (start2 === -1 || end2 === -1) {
              return null;
            }
            return {
              start: start2,
              end: end2
            };
          }
          function setOffsets(node4, offsets) {
            var doc = node4.ownerDocument || document;
            var win2 = doc && doc.defaultView || window;
            if (!win2.getSelection) {
              return;
            }
            var selection = win2.getSelection();
            var length2 = node4.textContent.length;
            var start2 = Math.min(offsets.start, length2);
            var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
            if (!selection.extend && start2 > end2) {
              var temp = end2;
              end2 = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node4, start2);
            var endMarker = getNodeForCharacterOffset(node4, end2);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start2 > end2) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node4) {
            return node4 && node4.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node4) {
            return node4 && node4.ownerDocument && containsNode(node4.ownerDocument.documentElement, node4);
          }
          function isSameOriginFrame(iframe2) {
            try {
              return typeof iframe2.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win2 = window;
            var element2 = getActiveElement();
            while (element2 instanceof win2.HTMLIFrameElement) {
              if (isSameOriginFrame(element2)) {
                win2 = element2.contentWindow;
              } else {
                return element2;
              }
              element2 = getActiveElement(win2.document);
            }
            return element2;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i2 = 0; i2 < ancestors.length; i2++) {
                var info = ancestors[i2];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input4) {
            var selection;
            if ("selectionStart" in input4) {
              selection = {
                start: input4.selectionStart,
                end: input4.selectionEnd
              };
            } else {
              selection = getOffsets(input4);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input4, offsets) {
            var start2 = offsets.start;
            var end2 = offsets.end;
            if (end2 === void 0) {
              end2 = start2;
            }
            if ("selectionStart" in input4) {
              input4.selectionStart = start2;
              input4.selectionEnd = Math.min(end2, input4.value.length);
            } else {
              setOffsets(input4, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM4 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node4) {
            if ("selectionStart" in node4 && hasSelectionCapabilities(node4)) {
              return {
                start: node4.selectionStart,
                end: node4.selectionEnd
              };
            } else {
              var win2 = node4.ownerDocument && node4.ownerDocument.defaultView || window;
              var selection = win2.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM4) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i2 = 0; i2 < simpleEventPluginEvents.length; i2++) {
              var eventName = simpleEventPluginEvents[i2];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
                var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
              var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node4 = targetInst;
                mainLoop:
                  while (true) {
                    if (node4 === null) {
                      return;
                    }
                    var nodeTag = node4.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container2 = node4.stateNode.containerInfo;
                      if (isMatchingRootContainer(container2, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node4.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container2 !== null) {
                        var parentNode = getClosestInstanceFromNode(container2);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node4 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container2 = container2.parentNode;
                      }
                    }
                    node4 = node4.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent2(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent2(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent2(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent2(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent2(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent2(nodeA);
              nodeB = getParent2(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM4 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html4) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html4;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop4() {
          }
          function trapClickOnNonInteractiveElement(node4) {
            node4.onclick = noop4;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
              var propKey = updatePayload[i2];
              var propValue = updatePayload[i2 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement77(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node4 = domElement;
                  if (props.multiple) {
                    node4.multiple = true;
                  } else if (props.size) {
                    node4.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text4, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text4);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track2(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track2(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text4, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text4;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text4) {
            {
              if (text4 === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text4, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign4({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root152 = rootContainerInstance.documentElement;
                namespace = root152 ? root152.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container2 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container2.namespaceURI || null;
                type = container2.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled2();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string4 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string4, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement77(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string4 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string4, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text4, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text4, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text4, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container2, child) {
            var parentNode;
            if (container2.nodeType === COMMENT_NODE) {
              parentNode = container2.parentNode;
              parentNode.insertBefore(child, container2);
            } else {
              parentNode = container2;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container2._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container2, child, beforeChild) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.insertBefore(child, beforeChild);
            } else {
              container2.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container2, child) {
            if (container2.nodeType === COMMENT_NODE) {
              container2.parentNode.removeChild(child);
            } else {
              container2.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node4 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node4.nextSibling;
              parentInstance.removeChild(node4);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node4 = nextNode;
            } while (node4);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container2, suspenseInstance) {
            if (container2.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container2.parentNode, suspenseInstance);
            } else if (container2.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container2, suspenseInstance);
            }
            retryIfBlockedOn(container2);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text4) {
            textInstance.nodeValue = text4;
          }
          function clearContainer(container2) {
            if (container2.nodeType === ELEMENT_NODE) {
              container2.textContent = "";
            } else if (container2.nodeType === DOCUMENT_NODE) {
              if (container2.documentElement) {
                container2.removeChild(container2.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text4) {
            if (text4 === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message5, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message5 = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message: message5,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node4) {
            for (; node4 != null; node4 = node4.nextSibling) {
              var nodeType = node4.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node4.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node4;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text4, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text4);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node4 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node4) {
              if (node4.nodeType === COMMENT_NODE) {
                var data = node4.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node4);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node4 = node4.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node4 = targetInstance.previousSibling;
            var depth = 0;
            while (node4) {
              if (node4.nodeType === COMMENT_NODE) {
                var data = node4.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node4;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node4 = node4.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container2) {
            retryIfBlockedOn(container2);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text4, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text4, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text4, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text4, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text4) {
            {
              warnForInsertedHydratedText(parentContainer, text4);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text4) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text4);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text4, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text4);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node4) {
            delete node4[internalInstanceKey];
            delete node4[internalPropsKey];
            delete node4[internalEventHandlersKey];
            delete node4[internalEventHandlerListenersKey];
            delete node4[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node4) {
            node4[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node4) {
            node4[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node4) {
            node4[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node4) {
            return !!node4[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node4) {
            var inst = node4[internalInstanceKey] || node4[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node4) {
            return node4[internalPropsKey] || null;
          }
          function updateFiberProps(node4, props) {
            node4[internalPropsKey] = props;
          }
          function getEventListenerSet(node4) {
            var elementListenerSet = node4[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node4[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element2) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue2) {
            return {
              current: defaultValue2
            };
          }
          function pop(cursor2, fiber) {
            if (index2 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push2(cursor2, value, fiber) {
            index2++;
            valueStack[index2] = cursor2.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component17, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component17)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push2(contextStackCursor, context, fiber);
              push2(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign4({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push2(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push2(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push2(contextStackCursor, mergedContext, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push2(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node4 = fiber;
              do {
                switch (node4.tag) {
                  case HostRoot:
                    return node4.stateNode.context;
                  case ClassComponent: {
                    var Component17 = node4.type;
                    if (isContextProvider(Component17)) {
                      return node4.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node4 = node4.return;
              } while (node4 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i2 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i2 < queue.length; i2++) {
                  var callback = queue[i2];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits2 = slot << baseLength;
              var _id = newBits2 | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number3) {
            return 32 - clz32(number3);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text4 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text4);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text4 = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text4);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node4 = fiber;
              while (node4 !== null) {
                if (node4.mode & StrictLegacyMode) {
                  maybeStrictRoot = node4;
                }
                node4 = node4.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array2 = [];
              set2.forEach(function(value) {
                array2.push(value);
              });
              return array2.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component17, baseProps) {
            if (Component17 && Component17.defaultProps) {
              var props = assign4({}, baseProps);
              var defaultProps = Component17.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push2(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node4 = parent;
            while (node4 !== null) {
              var alternate = node4.alternate;
              if (!isSubsetOfLanes(node4.childLanes, renderLanes2)) {
                node4.childLanes = mergeLanes(node4.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node4 === propagationRoot) {
                break;
              }
              node4 = node4.return;
            }
            {
              if (node4 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list4 = fiber.dependencies;
              if (list4 !== null) {
                nextFiber = fiber.child;
                var dependency = list4.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update = createUpdate(NoTimestamp, lane);
                      update.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update.next = update;
                        } else {
                          update.next = pending.next;
                          pending.next = update;
                        }
                        sharedQueue.pending = update;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list4.lanes = mergeLanes(list4.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i2 = 0; i2 < concurrentQueues.length; i2++) {
                var queue = concurrentQueues[i2];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update.next = update;
              pushConcurrentUpdateQueue(queue);
            } else {
              update.next = interleaved.next;
              interleaved.next = update;
            }
            queue.interleaved = update;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node4 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node4 = parent;
              parent = parent.return;
            }
            if (node4.tag === HostRoot) {
              var root152 = node4.stateNode;
              return root152;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update.next = update;
              } else {
                update.next = pending.next;
                pending.next = update;
              }
              sharedQueue.pending = update;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
            }
          }
          function entangleTransitions(root152, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root152.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root152, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign4({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i2 = 0; i2 < effects.length; i2++) {
                var effect = effects[i2];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React215.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign4({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              var root152 = enqueueUpdate(fiber, update, lane);
              if (root152 !== null) {
                scheduleUpdateOnFiber(root152, fiber, lane, eventTime);
                entangleTransitions(root152, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              var root152 = enqueueUpdate(fiber, update, lane);
              if (root152 !== null) {
                scheduleUpdateOnFiber(root152, fiber, lane, eventTime);
                entangleTransitions(root152, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              var root152 = enqueueUpdate(fiber, update, lane);
              if (root152 !== null) {
                scheduleUpdateOnFiber(root152, fiber, lane, eventTime);
                entangleTransitions(root152, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state2 = instance.state;
              if (_state2 && (typeof _state2 !== "object" || isArray(_state2))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid3 = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid3 && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element2) {
            var mixedRef = element2.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element2._owner && element2._self && element2._owner.stateNode !== element2._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element2._owner) {
                var owner = element2._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element2._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element2, lanes) {
              var elementType2 = element2.type;
              if (elementType2 === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element2.props.children, lanes, element2.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType2 || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element2) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType2 === "object" && elementType2 !== null && elementType2.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType2) === current2.type) {
                  var existing = useFiber(current2, element2.props);
                  existing.ref = coerceRef(returnFiber, current2, element2);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element2._source;
                    existing._debugOwner = element2._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element2, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element2);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment32) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i2 = 0; i2 < newChildren.length; i2++) {
                  var child = newChildren[i2];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element2, lanes) {
              var key = element2.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType2 = element2.type;
                  if (elementType2 === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment32) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element2.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element2._source;
                        existing._debugOwner = element2._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType2 || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element2) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType2 === "object" && elementType2 !== null && elementType2.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType2) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element2.props);
                      _existing.ref = coerceRef(returnFiber, child, element2);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element2._source;
                        _existing._debugOwner = element2._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element2.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element2.props.children, returnFiber.mode, lanes, element2.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element2, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element2);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c2) {
            if (c2 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c2;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push2(rootInstanceStackCursor, nextRootInstance, fiber);
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push2(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push2(contextFiberStackCursor, fiber, fiber);
            push2(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push2(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node4 = row;
            while (node4 !== null) {
              if (node4.tag === SuspenseComponent) {
                var state = node4.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node4;
                  }
                }
              } else if (node4.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node4.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node4.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node4;
                }
              } else if (node4.child !== null) {
                node4.child.return = node4;
                node4 = node4.child;
                continue;
              }
              if (node4 === row) {
                return null;
              }
              while (node4.sibling === null) {
                if (node4.return === null || node4.return === row) {
                  return null;
                }
                node4 = node4.return;
              }
              node4.sibling.return = node4.return;
              node4 = node4.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
              var mutableSource = workInProgressSources[i2];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root152, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version2 = getVersion(mutableSource._source);
            if (root152.mutableSourceEagerHydrationData == null) {
              root152.mutableSourceEagerHydrationData = [mutableSource, version2];
            } else {
              root152.mutableSourceEagerHydrationData.push(mutableSource, version2);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table2 = "";
                  var secondColumnStart = 30;
                  for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                    var oldHookName = hookTypesDev[i2];
                    var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i2 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table2 += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
              if (objectIs2(nextDeps[i2], prevDeps[i2])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component17, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component17(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component17(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState2;
            if (init !== void 0) {
              initialState2 = init(initialArg);
            } else {
              initialState2 = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update.action,
                      hasEagerState: update.hasEagerState,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.hasEagerState) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs2(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs2(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs2(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root152 = getWorkInProgressRoot();
              if (root152 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root152, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs2(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs2(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root152 = getWorkInProgressRoot();
              if (root152 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root152, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs2(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root152 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root152 !== null) {
              scheduleUpdateOnFiber(root152, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState2) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState2 === "function") {
              initialState2 = initialState2();
            }
            hook.memoizedState = hook.baseState = initialState2;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState2
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState2) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState2) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create2, destroy, deps) {
            var effect = {
              tag,
              create: create2,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create2, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
          }
          function mountEffect(create2, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create2, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create2, deps);
            }
          }
          function updateEffect(create2, deps) {
            return updateEffectImpl(Passive, Passive$1, create2, deps);
          }
          function mountInsertionEffect(create2, deps) {
            return mountEffectImpl(Update, Insertion, create2, deps);
          }
          function updateInsertionEffect(create2, deps) {
            return updateEffectImpl(Update, Insertion, create2, deps);
          }
          function mountLayoutEffect(create2, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create2, deps);
          }
          function updateLayoutEffect(create2, deps) {
            return updateEffectImpl(Update, Layout, create2, deps);
          }
          function imperativeHandleEffect(create2, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create2();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create2();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create2, deps) {
            {
              if (typeof create2 !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs2(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root152 = getWorkInProgressRoot();
            var identifierPrefix = root152.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var root152 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root152 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root152, fiber, lane, eventTime);
                entangleTransitionUpdate(root152, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.hasEagerState = true;
                    update.eagerState = eagerState;
                    if (objectIs2(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root152 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
              if (root152 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root152, fiber, lane, eventTime);
                entangleTransitionUpdate(root152, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
          }
          function entangleTransitionUpdate(root152, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root152.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root152, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create2, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create2, deps);
              },
              useImperativeHandle: function(ref, create2, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create2, deps);
              },
              useInsertionEffect: function(create2, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create2, deps);
              },
              useLayoutEffect: function(create2, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create2, deps);
              },
              useMemo: function(create2, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create2, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState2) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root152 = parentFiber.stateNode;
                    root152.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root152 = parentFiber.stateNode;
                    if (root152 !== null) {
                      root152.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e2) {
              setTimeout(function() {
                throw e2;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update;
          }
          function attachPingListener(root152, wakeable, lanes) {
            var pingCache = root152.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root152.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root152, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root152, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root152, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node4 = returnFiber;
            do {
              if (node4.tag === SuspenseComponent && shouldCaptureSuspense(node4)) {
                return node4;
              }
              node4 = node4.return;
            } while (node4 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root152, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update = createUpdate(NoTimestamp, SyncLane);
                    update.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root152, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root152, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root152, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root152, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root152, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root152, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root152, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component17, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component17.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component17)
                  );
                }
              }
            }
            var render3 = Component17.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component17, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component17.type;
              if (isSimpleFunctionComponent(type) && Component17.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component17.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component17.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component17.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component17.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component17, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component17, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref2;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component17, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component17.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component17)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component17, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component17, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component17, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component17, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component17.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component17)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component17)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component17, nextProps);
              mountClassInstance(workInProgress2, Component17, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component17, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component17, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component17, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component17, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component17, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component17.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component17, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root152 = workInProgress2.stateNode;
            if (root152.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root152.pendingContext, root152.pendingContext !== root152.context);
            } else if (root152.context) {
              pushTopLevelContextObject(workInProgress2, root152.context, false);
            }
            pushHostContainer(workInProgress2, root152.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root152 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node4 = child;
                while (node4) {
                  node4.flags = node4.flags & ~Placement | Hydrating;
                  node4 = node4.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType2, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType2;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component17 = init(payload);
            workInProgress2.type = Component17;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component17);
            var resolvedProps = resolveDefaultProps(Component17, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component17);
                  workInProgress2.type = Component17 = resolveFunctionForHotReloading(Component17);
                }
                child = updateFunctionComponent(null, workInProgress2, Component17, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component17 = resolveClassForHotReloading(Component17);
                }
                child = updateClassComponent(null, workInProgress2, Component17, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component17 = resolveForwardRefForHotReloading(Component17);
                }
                child = updateForwardRef(null, workInProgress2, Component17, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component17.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component17)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component17,
                  resolveDefaultProps(Component17.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component17 !== null && typeof Component17 === "object" && Component17.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component17 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component17, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component17)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component17, nextProps);
            mountClassInstance(workInProgress2, Component17, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component17, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component17, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component17, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component17.prototype && typeof Component17.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component17) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component17, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component17) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component17) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component17)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component17, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component17, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component17, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component17);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component17) {
            {
              if (Component17) {
                if (Component17.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component17.displayName || Component17.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component17.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component17) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component17.contextType === "object" && Component17.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component17) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message5, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message5 = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message5) {
                  error2 = new Error(message5);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root152 = getWorkInProgressRoot();
                if (root152 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root152, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root152, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node4 = firstChild;
            while (node4 !== null) {
              if (node4.tag === SuspenseComponent) {
                var state = node4.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node4, renderLanes2, workInProgress2);
                }
              } else if (node4.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node4, renderLanes2, workInProgress2);
              } else if (node4.child !== null) {
                node4.child.return = node4;
                node4 = node4.child;
                continue;
              }
              if (node4 === workInProgress2) {
                return;
              }
              while (node4.sibling === null) {
                if (node4.return === null || node4.return === workInProgress2) {
                  return;
                }
                node4 = node4.return;
              }
              node4.sibling.return = node4.return;
              node4 = node4.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i2 = 0; i2 < children.length; i2++) {
                    if (!validateSuspenseListNestedChild(children[i2], i2)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs2(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render3 = newProps.children;
            {
              if (typeof render3 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render3(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root152 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component17 = workInProgress2.type;
                if (isContextProvider(Component17)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType2 = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType2, renderLanes2);
              }
              case FunctionComponent: {
                var Component17 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component17 ? unresolvedProps : resolveDefaultProps(Component17, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component17, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment32:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref2;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node4 = workInProgress2.child;
              while (node4 !== null) {
                if (node4.tag === HostComponent || node4.tag === HostText) {
                  appendInitialChild(parent, node4.stateNode);
                } else if (node4.tag === HostPortal)
                  ;
                else if (node4.child !== null) {
                  node4.child.return = node4;
                  node4 = node4.child;
                  continue;
                }
                if (node4 === workInProgress2) {
                  return;
                }
                while (node4.sibling === null) {
                  if (node4.return === null || node4.return === workInProgress2) {
                    return;
                  }
                  node4 = node4.return;
                }
                node4.sibling.return = node4.return;
                node4 = node4.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment32:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component17 = workInProgress2.type;
                if (isContextProvider(Component17)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component17 = workInProgress2.type;
                if (isContextProvider(Component17)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root152 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root152 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal2;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal2 = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal2 = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal2 === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root152, firstChild) {
            focusedInstanceHandle = prepareForCommit(root152.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root152 = finishedWork.stateNode;
                    clearContainer(root152.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create2 = effect.create;
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create2();
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root152 = parentFiber.stateNode;
                            root152.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root152 = parentFiber.stateNode;
                              root152.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref2) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node4) {
            switch (node4.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node4.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node4, node4.return);
                  } finally {
                    recordLayoutEffectDuration(node4);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node4, node4.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node4.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node4, node4.return, instance);
                }
                safelyAttachRef(node4, node4.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node4, node4.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node4 = finishedWork;
              while (true) {
                if (node4.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node4;
                    try {
                      var instance = node4.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node4.stateNode, node4.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node4.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node4.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node4.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node4.tag === OffscreenComponent || node4.tag === LegacyHiddenComponent) && node4.memoizedState !== null && node4 !== finishedWork)
                  ;
                else if (node4.child !== null) {
                  node4.child.return = node4;
                  node4 = node4.child;
                  continue;
                }
                if (node4 === finishedWork) {
                  return;
                }
                while (node4.sibling === null) {
                  if (node4.return === null || node4.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node4) {
                    hostSubtreeRoot = null;
                  }
                  node4 = node4.return;
                }
                if (hostSubtreeRoot === node4) {
                  hostSubtreeRoot = null;
                }
                node4.sibling.return = node4.return;
                node4 = node4.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal2;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal2 = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal2 = ref(instanceToUse);
                }
                {
                  if (typeof retVal2 === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node4 = fiber;
            siblings:
              while (true) {
                while (node4.sibling === null) {
                  if (node4.return === null || isHostParent(node4.return)) {
                    return null;
                  }
                  node4 = node4.return;
                }
                node4.sibling.return = node4.return;
                node4 = node4.sibling;
                while (node4.tag !== HostComponent && node4.tag !== HostText && node4.tag !== DehydratedFragment) {
                  if (node4.flags & Placement) {
                    continue siblings;
                  }
                  if (node4.child === null || node4.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node4.child.return = node4;
                    node4 = node4.child;
                  }
                }
                if (!(node4.flags & Placement)) {
                  return node4.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node4, before, parent) {
            var tag = node4.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node4.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node4.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node4, before, parent) {
            var tag = node4.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node4.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node4.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root152, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root152, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root152, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root152;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root152);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root152, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i2 = 0; i2 < deletions.length; i2++) {
                var childToDelete = deletions[i2];
                try {
                  commitDeletionEffects(root152, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root152);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root152, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root152, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root152, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref2) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root152, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref2) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root152, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root152, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root152.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root152, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root152, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root152, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root152, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root152, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root152, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root152, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root152;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root152, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root152, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root152, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root152,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root152, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root152, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root152, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root152, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root152, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root152, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root152, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root152, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root152, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root152, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i2 = 0; i2 < deletions.length; i2++) {
                    var fiberToDelete = deletions[i2];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition2 = ReactCurrentBatchConfig$3.transition;
                if (!transition2._updatedFibers) {
                  transition2._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition2._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root152, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root152, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root152 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root152, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root152 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root152, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root152, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root152, lane, eventTime) {
            var current2 = root152.current;
            current2.lanes = lane;
            markRootUpdated(root152, lane, eventTime);
            ensureRootIsScheduled(root152, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root152, currentTime) {
            var existingCallbackNode = root152.callbackNode;
            markStarvedLanesAsExpired(root152, currentTime);
            var nextLanes = getNextLanes(root152, root152 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root152.callbackNode = null;
              root152.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root152.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root152.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root152));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root152));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority2;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority2;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root152));
            }
            root152.callbackPriority = newCallbackPriority;
            root152.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root152, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root152.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root152.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root152, root152 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root152, lanes) && !includesExpiredLane(root152, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root152, lanes) : renderRootSync(root152, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root152);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root152, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root152, NoLanes);
                markRootSuspended$1(root152, lanes);
                ensureRootIsScheduled(root152, now());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root152, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root152, lanes);
                var finishedWork = root152.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root152, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root152);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root152, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root152, NoLanes);
                    markRootSuspended$1(root152, lanes);
                    ensureRootIsScheduled(root152, now());
                    throw _fatalError;
                  }
                }
                root152.finishedWork = finishedWork;
                root152.finishedLanes = lanes;
                finishConcurrentRender(root152, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root152, now());
            if (root152.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root152);
            }
            return null;
          }
          function recoverFromConcurrentError(root152, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root152)) {
              var rootWorkInProgress = prepareFreshStack(root152, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root152.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root152, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root152, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root152, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root152, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root152, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root152.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root152, suspendedLanes);
                      break;
                    }
                    root152.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root152, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root152, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root152, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root152, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root152.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root152, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root152, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root152, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node4 = finishedWork;
            while (true) {
              if (node4.flags & StoreConsistency) {
                var updateQueue = node4.updateQueue;
                if (updateQueue !== null) {
                  var checks2 = updateQueue.stores;
                  if (checks2 !== null) {
                    for (var i2 = 0; i2 < checks2.length; i2++) {
                      var check = checks2[i2];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs2(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node4.child;
              if (node4.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node4;
                node4 = child;
                continue;
              }
              if (node4 === finishedWork) {
                return true;
              }
              while (node4.sibling === null) {
                if (node4.return === null || node4.return === finishedWork) {
                  return true;
                }
                node4 = node4.return;
              }
              node4.sibling.return = node4.return;
              node4 = node4.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root152, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root152, suspendedLanes);
          }
          function performSyncWorkOnRoot(root152) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root152, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root152, now());
              return null;
            }
            var exitStatus = renderRootSync(root152, lanes);
            if (root152.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root152);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root152, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root152, NoLanes);
              markRootSuspended$1(root152, lanes);
              ensureRootIsScheduled(root152, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root152.current.alternate;
            root152.finishedWork = finishedWork;
            root152.finishedLanes = lanes;
            commitRoot(root152, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root152, now());
            return null;
          }
          function flushRoot(root152, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root152, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root152, now());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b3, c2, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b3, c2, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push2(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root152, lanes) {
            root152.finishedWork = null;
            root152.finishedLanes = NoLanes;
            var timeoutHandle = root152.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root152.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root152;
            var rootWorkInProgress = createWorkInProgress(root152.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root152, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root152, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root152, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root152 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root152.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root152, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root152, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root152, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root152, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root152, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root152 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root152.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root152, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root152, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root152, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root152, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root152, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root152, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root152, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root152.finishedWork;
            var lanes = root152.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root152.finishedWork = null;
            root152.finishedLanes = NoLanes;
            if (finishedWork === root152.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root152.callbackNode = null;
            root152.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root152, remainingLanes);
            if (root152 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority2, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root152, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root152, finishedWork, lanes);
              resetAfterCommit(root152.containerInfo);
              root152.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root152, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root152.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root152;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root152.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root152.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root152.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root152, now());
            if (recoverableErrors !== null) {
              var onRecoverableError = root152.onRecoverableError;
              for (var i2 = 0; i2 < recoverableErrors.length; i2++) {
                var recoverableError = recoverableErrors[i2];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root152.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root152.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root152 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root152;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority2, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root152 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root152.current);
            commitPassiveMountEffects(root152, root152.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i2 = 0; i2 < profilerEffects.length; i2++) {
                var _fiber = profilerEffects[i2];
                commitPassiveEffectDurations(root152, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root152.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root152 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root152;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root152);
            {
              var stateNode = root152.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root152 = enqueueUpdate(rootFiber, update, SyncLane);
            var eventTime = requestEventTime();
            if (root152 !== null) {
              markRootUpdated(root152, SyncLane, eventTime);
              ensureRootIsScheduled(root152, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root152 = enqueueUpdate(fiber, update, SyncLane);
                  var eventTime = requestEventTime();
                  if (root152 !== null) {
                    markRootUpdated(root152, SyncLane, eventTime);
                    ensureRootIsScheduled(root152, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root152, wakeable, pingedLanes) {
            var pingCache = root152.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root152, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root152);
            if (workInProgressRoot === root152 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root152, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root152, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root152 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root152 !== null) {
              markRootUpdated(root152, retryLane, eventTime);
              ensureRootIsScheduled(root152, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root152, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root152.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root152, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root152) {
            {
              if (root152.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element2) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element2.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root152, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root152.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root152, element2) {
            {
              if (root152.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element2, root152, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root2 !== null) {
                  scheduleUpdateOnFiber(_root2, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root152, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root152.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node4 = fiber;
              while (true) {
                switch (node4.tag) {
                  case HostComponent:
                    hostInstances.add(node4.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node4.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node4.stateNode.containerInfo);
                    return;
                }
                if (node4.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node4 = node4.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node4 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node4.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node4.stateNode);
                } else if (node4.child !== null) {
                  node4.child.return = node4;
                  node4 = node4.child;
                  continue;
                }
                if (node4 === fiber) {
                  return foundHostInstances;
                }
                while (node4.sibling === null) {
                  if (node4.return === null || node4.return === fiber) {
                    return foundHostInstances;
                  }
                  node4 = node4.return;
                }
                node4.sibling.return = node4.return;
                node4 = node4.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e2) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component17) {
            var prototype = Component17.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component17) {
            if (typeof Component17 === "function") {
              return shouldConstruct$1(Component17) ? ClassComponent : FunctionComponent;
            } else if (Component17 !== void 0 && Component17 !== null) {
              var $$typeof = Component17.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE2:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element2, mode, lanes) {
            var owner = null;
            {
              owner = element2._owner;
            }
            var type = element2.type;
            var key = element2.key;
            var pendingProps = element2.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element2._source;
              fiber._debugOwner = element2._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment32, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content15, mode, lanes) {
            var fiber = createFiber(HostText, content15, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate3, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate3 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate3 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate3, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root152 = new FiberRootNode(containerInfo, tag, hydrate3, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root152.current = uninitializedFiber;
            uninitializedFiber.stateNode = root152;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate3,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root152;
          }
          var ReactVersion = "18.2.0";
          function createPortal3(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component17 = fiber.type;
              if (isContextProvider(Component17)) {
                return processChildContext(fiber, Component17, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys2 = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys2);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate3 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate3, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate3 = true;
            var root152 = createFiberRoot(containerInfo, tag, hydrate3, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root152.context = getContextForSubtree(null);
            var current2 = root152.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update = createUpdate(eventTime, lane);
            update.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update, lane);
            scheduleInitialHydrationOnRoot(root152, lane, eventTime);
            return root152;
          }
          function updateContainer(element2, container2, parentComponent, callback) {
            {
              onScheduleRoot(container2, element2);
            }
            var current$1 = container2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container2.context === null) {
              container2.context = context;
            } else {
              container2.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element: element2
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            var root152 = enqueueUpdate(current$1, update, lane);
            if (root152 !== null) {
              scheduleUpdateOnFiber(root152, current$1, lane, eventTime);
              entangleTransitions(root152, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container2) {
            var containerFiber = container2.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root152 = fiber.stateNode;
                if (isRootDehydrated(root152)) {
                  var lanes = getHighestPriorityPendingLanes(root152);
                  flushRoot(root152, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync(function() {
                  var root153 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root153 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root153, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root152 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root152 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root152, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root152 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root152 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root152, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path2, index3) {
              var key = path2[index3];
              var updated = isArray(obj) ? obj.slice() : assign4({}, obj);
              if (index3 + 1 === path2.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path2, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path2) {
              return copyWithDeleteImpl(obj, path2, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray(obj) ? obj.slice() : assign4({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn2("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                  if (oldPath[i2] !== newPath[i2]) {
                    warn2("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path2, index3, value) {
              if (index3 >= path2.length) {
                return value;
              }
              var key = path2[index3];
              var updated = isArray(obj) ? obj.slice() : assign4({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path2, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path2, value) {
              return copyWithSetImpl(obj, path2, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path2, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path2, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign4({}, fiber.memoizedProps);
                var root152 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root152 !== null) {
                  scheduleUpdateOnFiber(root152, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path2) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path2);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign4({}, fiber.memoizedProps);
                var root152 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root152 !== null) {
                  scheduleUpdateOnFiber(root152, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign4({}, fiber.memoizedProps);
                var root152 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root152 !== null) {
                  scheduleUpdateOnFiber(root152, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path2, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path2, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root152 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root152 !== null) {
                scheduleUpdateOnFiber(root152, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path2) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path2);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root152 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root152 !== null) {
                scheduleUpdateOnFiber(root152, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root152 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root152 !== null) {
                scheduleUpdateOnFiber(root152, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root152 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root152 !== null) {
                scheduleUpdateOnFiber(root152, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root152 = this._internalRoot;
            if (root152 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container2 = root152.containerInfo;
              if (container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root152.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root152, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root152 = this._internalRoot;
            if (root152 !== null) {
              this._internalRoot = null;
              var container2 = root152.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync(function() {
                updateContainer(null, root152, null, null);
              });
              unmarkContainerAsRoot(container2);
            }
          };
          function createRoot(container2, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root152 = createContainer(container2, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root152.current, container2);
            var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root152);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container2, initialChildren, options2) {
            if (!isValidContainer(container2)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container2);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root152 = createHydrationContainer(initialChildren, null, container2, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root152.current, container2);
            listenToAllSupportedEvents(container2);
            if (mutableSources) {
              for (var i2 = 0; i2 < mutableSources.length; i2++) {
                var mutableSource = mutableSources[i2];
                registerMutableSourceForHydration(root152, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root152);
          }
          function isValidContainer(node4) {
            return !!(node4 && (node4.nodeType === ELEMENT_NODE || node4.nodeType === DOCUMENT_NODE || node4.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node4) {
            return !!(node4 && (node4.nodeType === ELEMENT_NODE || node4.nodeType === DOCUMENT_NODE || node4.nodeType === DOCUMENT_FRAGMENT_NODE || node4.nodeType === COMMENT_NODE && node4.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container2) {
            {
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container2)) {
                if (container2._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container2) {
              if (container2._reactRootContainer && container2.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container2._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container2) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container2._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container2);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container2.nodeType === ELEMENT_NODE && container2.tagName && container2.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container2) {
            if (!container2) {
              return null;
            }
            if (container2.nodeType === DOCUMENT_NODE) {
              return container2.documentElement;
            } else {
              return container2.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container2, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root152);
                  originalCallback.call(instance);
                };
              }
              var root152 = createHydrationContainer(
                initialChildren,
                callback,
                container2,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container2._reactRootContainer = root152;
              markContainerAsRoot(root152.current, container2);
              var rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync();
              return root152;
            } else {
              var rootSibling;
              while (rootSibling = container2.lastChild) {
                container2.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root2);
                  _originalCallback.call(instance);
                };
              }
              var _root2 = createContainer(
                container2,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container2._reactRootContainer = _root2;
              markContainerAsRoot(_root2.current, container2);
              var _rootContainerElement = container2.nodeType === COMMENT_NODE ? container2.parentNode : container2;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync(function() {
                updateContainer(initialChildren, _root2, parentComponent, callback);
              });
              return _root2;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container2, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container2);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container2._reactRootContainer;
            var root152;
            if (!maybeRoot) {
              root152 = legacyCreateRootFromDOMContainer(container2, children, parentComponent, callback, forceHydrate);
            } else {
              root152 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root152);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root152, parentComponent, callback);
            }
            return getPublicRootInstance(root152);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate2(element2, container2, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container2, true, callback);
          }
          function render2(element2, container2, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element2, container2, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element2, containerNode, false, callback);
          }
          function unmountComponentAtNode(container2) {
            if (!isValidContainerLegacy(container2)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container2) && container2._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container2._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container2);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container2, false, function() {
                  container2._reactRootContainer = null;
                  unmarkContainerAsRoot(container2);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container2);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container2.nodeType === ELEMENT_NODE && isValidContainerLegacy(container2.parentNode) && !!container2.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority2);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
          function createPortal$1(children, container2) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container2)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal3(children, container2, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element2, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container2, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container2, options2);
          }
          function hydrateRoot$1(container2, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container2, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM4 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate2;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render2;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // ../node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "../node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // ../node_modules/react-dom/client.js
  var require_client = __commonJS({
    "../node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports.createRoot = m2.createRoot;
        exports.hydrateRoot = m2.hydrateRoot;
      } else {
        i2 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c2, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c2, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c2, h3, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c2, h3, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // ../node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "../node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React215 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React215.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format2) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format2, args);
              }
            }
          }
          function printWarning(level, format2, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format2 += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format2);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE2:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign4 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign4({}, props, {
                    value: prevLog
                  }),
                  info: assign4({}, props, {
                    value: prevInfo
                  }),
                  warn: assign4({}, props, {
                    value: prevWarn
                  }),
                  error: assign4({}, props, {
                    value: prevError
                  }),
                  group: assign4({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign4({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign4({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control3;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control3 = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control3 = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control3 = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control3 && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control3.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c2 = controlLines.length - 1;
                while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                  c2--;
                }
                for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                  if (sampleLines[s2] !== controlLines[c2]) {
                    if (s2 !== 1 || c2 !== 1) {
                      do {
                        s2--;
                        c2--;
                        if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c2 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component17) {
            var prototype = Component17.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location2, componentName, element2) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element2);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element2);
                    error("Failed %s type: %s", location2, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e2) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self2) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element2 = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element2._store = {};
              Object.defineProperty(element2._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element2, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element2, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element2.props);
                Object.freeze(element2);
              }
            }
            return element2;
          };
          function jsxDEV(type, config, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self2);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element2) {
            {
              if (element2) {
                var owner = element2._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element2.type, element2._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement11(object2) {
            {
              return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element2, parentType) {
            {
              if (!element2._store || element2._store.validated || element2.key != null) {
                return;
              }
              element2._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element2 && element2._owner && element2._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element2._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element2);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node4, parentType) {
            {
              if (typeof node4 !== "object") {
                return;
              }
              if (isArray(node4)) {
                for (var i2 = 0; i2 < node4.length; i2++) {
                  var child = node4[i2];
                  if (isValidElement11(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement11(node4)) {
                if (node4._store) {
                  node4._store.validated = true;
                }
              } else if (node4) {
                var iteratorFn = getIteratorFn(node4);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node4.entries) {
                    var iterator = iteratorFn.call(node4);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement11(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element2) {
            {
              var type = element2.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element2.props, "prop", name, element2);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys2 = Object.keys(fragment.props);
              for (var i2 = 0; i2 < keys2.length; i2++) {
                var key = keys2[i2];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element2 = jsxDEV(type, props, key, source, self2);
              if (element2 == null) {
                return element2;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i2 = 0; i2 < children.length; i2++) {
                        validateChildKeys(children[i2], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element2);
              } else {
                validatePropTypes(element2);
              }
              return element2;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx22 = jsxWithValidationDynamic;
          var jsxs16 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx22;
          exports.jsxs = jsxs16;
        })();
      }
    }
  });

  // ../node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "../node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // ../node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development2 = __commonJS({
    "../node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = true;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (
            // If Scheduler runs in a non-DOM environment, it falls back to a naive
            // implementation using setTimeout.
            typeof window === "undefined" || // Check if MessageChannel is supported, too.
            typeof MessageChannel !== "function"
          ) {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e2) {
                  setTimeout(_flushCallback, 0);
                  throw e2;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push2(heap, node4) {
            var index2 = heap.length;
            heap.push(node4);
            siftUp(heap, node4, index2);
          }
          function peek2(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last = heap.pop();
              if (last !== first) {
                heap[0] = last;
                siftDown(heap, last, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node4, i2) {
            var index2 = i2;
            while (true) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node4) > 0) {
                heap[parentIndex] = node4;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node4, i2) {
            var index2 = i2;
            var length2 = heap.length;
            while (index2 < length2) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (left !== void 0 && compare(left, node4) < 0) {
                if (right !== void 0 && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node4;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node4;
                  index2 = leftIndex;
                }
              } else if (right !== void 0 && compare(right, node4) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node4;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b3) {
            var diff = a2.sortIndex - b3.sortIndex;
            return diff !== 0 ? diff : a2.id - b3.id;
          }
          var NoPriority = 0;
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority2 = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          var runIdCounter = 0;
          var mainThreadIdCounter = 0;
          var profilingStateSize = 4;
          var sharedProfilingBuffer = (
            // $FlowFixMe Flow doesn't know about SharedArrayBuffer
            typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : (
              // $FlowFixMe Flow doesn't know about ArrayBuffer
              typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null
            )
          );
          var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
          var PRIORITY = 0;
          var CURRENT_TASK_ID = 1;
          var CURRENT_RUN_ID = 2;
          var QUEUE_SIZE = 3;
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[QUEUE_SIZE] = 0;
            profilingState[CURRENT_TASK_ID] = 0;
          }
          var INITIAL_EVENT_LOG_SIZE = 131072;
          var MAX_EVENT_LOG_SIZE = 524288;
          var eventLogSize = 0;
          var eventLogBuffer = null;
          var eventLog = null;
          var eventLogIndex = 0;
          var TaskStartEvent = 1;
          var TaskCompleteEvent = 2;
          var TaskErrorEvent = 3;
          var TaskCancelEvent = 4;
          var TaskRunEvent = 5;
          var TaskYieldEvent = 6;
          var SchedulerSuspendEvent = 7;
          var SchedulerResumeEvent = 8;
          function logEvent(entries) {
            if (eventLog !== null) {
              var offset = eventLogIndex;
              eventLogIndex += entries.length;
              if (eventLogIndex + 1 > eventLogSize) {
                eventLogSize *= 2;
                if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                  console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                  stopLoggingProfilingEvents();
                  return;
                }
                var newEventLog = new Int32Array(eventLogSize * 4);
                newEventLog.set(eventLog);
                eventLogBuffer = newEventLog.buffer;
                eventLog = newEventLog;
              }
              eventLog.set(entries, offset);
            }
          }
          function startLoggingProfilingEvents() {
            eventLogSize = INITIAL_EVENT_LOG_SIZE;
            eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
            eventLog = new Int32Array(eventLogBuffer);
            eventLogIndex = 0;
          }
          function stopLoggingProfilingEvents() {
            var buffer2 = eventLogBuffer;
            eventLogSize = 0;
            eventLogBuffer = null;
            eventLog = null;
            eventLogIndex = 0;
            return buffer2;
          }
          function markTaskStart(task, ms) {
            {
              profilingState[QUEUE_SIZE]++;
              if (eventLog !== null) {
                logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
              }
            }
          }
          function markTaskCompleted(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskCanceled(task, ms) {
            {
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskCancelEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskErrored(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[QUEUE_SIZE]--;
              if (eventLog !== null) {
                logEvent([TaskErrorEvent, ms * 1e3, task.id]);
              }
            }
          }
          function markTaskRun(task, ms) {
            {
              runIdCounter++;
              profilingState[PRIORITY] = task.priorityLevel;
              profilingState[CURRENT_TASK_ID] = task.id;
              profilingState[CURRENT_RUN_ID] = runIdCounter;
              if (eventLog !== null) {
                logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markTaskYield(task, ms) {
            {
              profilingState[PRIORITY] = NoPriority;
              profilingState[CURRENT_TASK_ID] = 0;
              profilingState[CURRENT_RUN_ID] = 0;
              if (eventLog !== null) {
                logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
              }
            }
          }
          function markSchedulerSuspended(ms) {
            {
              mainThreadIdCounter++;
              if (eventLog !== null) {
                logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          function markSchedulerUnsuspended(ms) {
            {
              if (eventLog !== null) {
                logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
              }
            }
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority2;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push2(taskQueue, timer);
                {
                  markTaskStart(timer, currentTime);
                  timer.isQueued = true;
                }
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            {
              markSchedulerUnsuspended(initialTime2);
            }
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
              {
                var _currentTime = exports.unstable_now();
                markSchedulerSuspended(_currentTime);
              }
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                markTaskRun(currentTask, currentTime);
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                  markTaskYield(currentTask, currentTime);
                } else {
                  {
                    markTaskCompleted(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority2;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority2:
                priorityLevel = NormalPriority2;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority2:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            {
              newTask.isQueued = false;
            }
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push2(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push2(taskQueue, newTask);
              {
                markTaskStart(newTask, currentTime);
                newTask.isQueued = true;
              }
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            {
              if (task.isQueued) {
                var currentTime = exports.unstable_now();
                markTaskCanceled(task, currentTime);
                task.isQueued = false;
              }
            }
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = {
            startLoggingProfilingEvents,
            stopLoggingProfilingEvents,
            sharedProfilingBuffer
          };
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority2;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // ../node_modules/scheduler/index.js
  var require_scheduler2 = __commonJS({
    "../node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development2();
      }
    }
  });

  // ../node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "../node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE2 = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE2:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment32 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE2;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object2) {
            return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object2) {
            return typeOf(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object2) {
            return typeOf(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf(object2) === REACT_STRICT_MODE_TYPE2;
          }
          function isSuspense(object2) {
            return typeOf(object2) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment32;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // ../node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "../node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // ../node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "../node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i2 = 0; i2 < 10; i2++) {
            test2["_" + String.fromCharCode(i2)] = i2;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n3) {
            return test2[n3];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from2 = Object(arguments[s2]);
          for (var key in from2) {
            if (hasOwnProperty2.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i2 = 0; i2 < symbols.length; i2++) {
              if (propIsEnumerable.call(from2, symbols[i2])) {
                to[symbols[i2]] = from2[symbols[i2]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // ../node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "../node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // ../node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "../node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // ../node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "../node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text4) {
          var message5 = "Warning: " + text4;
          if (typeof console !== "undefined") {
            console.error(message5);
          }
          try {
            throw new Error(message5);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values2, location2, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location2 + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // ../node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "../node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs2 = require_react_is();
      var assign4 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text4) {
          var message5 = "Warning: " + text4;
          if (typeof console !== "undefined") {
            console.error(message5);
          }
          try {
            throw new Error(message5);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement11, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is3(x, y2) {
          if (x === y2) {
            return x !== 0 || 1 / x === 1 / y2;
          } else {
            return x !== x && y2 !== y2;
          }
        }
        function PropTypeError(message5, data) {
          this.message = message5;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location2, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location2, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i2 = 0; i2 < propValue.length; i2++) {
              var error = typeChecker(propValue, i2, componentName, location2, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!isValidElement11(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            if (!ReactIs2.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            for (var i2 = 0; i2 < expectedValues.length; i2++) {
              if (is3(propValue, expectedValues[i2])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location2, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker = arrayOfTypeCheckers[i2];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location2, propFullName) {
            var expectedTypes = [];
            for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
              var checker2 = arrayOfTypeCheckers[i3];
              var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location2, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location2, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location2, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign4({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement11(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // ../node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "../node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs2 = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs2.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs2;
      var throwOnDirectAccess;
    }
  });

  // ../node_modules/is-buffer/index.js
  var require_is_buffer = __commonJS({
    "../node_modules/is-buffer/index.js"(exports, module) {
      module.exports = function isBuffer2(obj) {
        return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
      };
    }
  });

  // ../node_modules/extend/index.js
  var require_extend = __commonJS({
    "../node_modules/extend/index.js"(exports, module) {
      "use strict";
      var hasOwn = Object.prototype.hasOwnProperty;
      var toStr = Object.prototype.toString;
      var defineProperty = Object.defineProperty;
      var gOPD = Object.getOwnPropertyDescriptor;
      var isArray = function isArray2(arr) {
        if (typeof Array.isArray === "function") {
          return Array.isArray(arr);
        }
        return toStr.call(arr) === "[object Array]";
      };
      var isPlainObject8 = function isPlainObject9(obj) {
        if (!obj || toStr.call(obj) !== "[object Object]") {
          return false;
        }
        var hasOwnConstructor = hasOwn.call(obj, "constructor");
        var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
        if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
          return false;
        }
        var key;
        for (key in obj) {
        }
        return typeof key === "undefined" || hasOwn.call(obj, key);
      };
      var setProperty = function setProperty2(target, options) {
        if (defineProperty && options.name === "__proto__") {
          defineProperty(target, options.name, {
            enumerable: true,
            configurable: true,
            value: options.newValue,
            writable: true
          });
        } else {
          target[options.name] = options.newValue;
        }
      };
      var getProperty = function getProperty2(obj, name) {
        if (name === "__proto__") {
          if (!hasOwn.call(obj, name)) {
            return void 0;
          } else if (gOPD) {
            return gOPD(obj, name).value;
          }
        }
        return obj[name];
      };
      module.exports = function extend2() {
        var options, name, src, copy2, copyIsArray, clone;
        var target = arguments[0];
        var i2 = 1;
        var length2 = arguments.length;
        var deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[1] || {};
          i2 = 2;
        }
        if (target == null || typeof target !== "object" && typeof target !== "function") {
          target = {};
        }
        for (; i2 < length2; ++i2) {
          options = arguments[i2];
          if (options != null) {
            for (name in options) {
              src = getProperty(target, name);
              copy2 = getProperty(options, name);
              if (target !== copy2) {
                if (deep && copy2 && (isPlainObject8(copy2) || (copyIsArray = isArray(copy2)))) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && isArray(src) ? src : [];
                  } else {
                    clone = src && isPlainObject8(src) ? src : {};
                  }
                  setProperty(target, { name, newValue: extend2(deep, clone, copy2) });
                } else if (typeof copy2 !== "undefined") {
                  setProperty(target, { name, newValue: copy2 });
                }
              }
            }
          }
        }
        return target;
      };
    }
  });

  // ../node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "../node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE2 || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object2) {
            if (typeof object2 === "object" && object2 !== null) {
              var $$typeof = object2.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object2.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE2:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment32 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE2;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object2) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object2) {
            return typeOf(object2) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object2) {
            return typeOf(object2) === REACT_PROVIDER_TYPE;
          }
          function isElement(object2) {
            return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object2) {
            return typeOf(object2) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object2) {
            return typeOf(object2) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object2) {
            return typeOf(object2) === REACT_LAZY_TYPE;
          }
          function isMemo(object2) {
            return typeOf(object2) === REACT_MEMO_TYPE;
          }
          function isPortal(object2) {
            return typeOf(object2) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object2) {
            return typeOf(object2) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object2) {
            return typeOf(object2) === REACT_STRICT_MODE_TYPE2;
          }
          function isSuspense(object2) {
            return typeOf(object2) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object2) {
            return typeOf(object2) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment32;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // ../node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "../node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // ../node_modules/inline-style-parser/index.js
  var require_inline_style_parser = __commonJS({
    "../node_modules/inline-style-parser/index.js"(exports, module) {
      var COMMENT_REGEX = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
      var NEWLINE_REGEX = /\n/g;
      var WHITESPACE_REGEX = /^\s*/;
      var PROPERTY_REGEX = /^(\*?[-#/*\\\w]+(\[[0-9a-z_-]+\])?)\s*/;
      var COLON_REGEX = /^:\s*/;
      var VALUE_REGEX = /^((?:'(?:\\'|.)*?'|"(?:\\"|.)*?"|\([^)]*?\)|[^};])+)/;
      var SEMICOLON_REGEX = /^[;\s]*/;
      var TRIM_REGEX = /^\s+|\s+$/g;
      var NEWLINE = "\n";
      var FORWARD_SLASH = "/";
      var ASTERISK = "*";
      var EMPTY_STRING = "";
      var TYPE_COMMENT = "comment";
      var TYPE_DECLARATION = "declaration";
      module.exports = function(style, options) {
        if (typeof style !== "string") {
          throw new TypeError("First argument must be a string");
        }
        if (!style)
          return [];
        options = options || {};
        var lineno = 1;
        var column2 = 1;
        function updatePosition(str) {
          var lines = str.match(NEWLINE_REGEX);
          if (lines)
            lineno += lines.length;
          var i2 = str.lastIndexOf(NEWLINE);
          column2 = ~i2 ? str.length - i2 : column2 + str.length;
        }
        function position4() {
          var start2 = { line: lineno, column: column2 };
          return function(node4) {
            node4.position = new Position2(start2);
            whitespace3();
            return node4;
          };
        }
        function Position2(start2) {
          this.start = start2;
          this.end = { line: lineno, column: column2 };
          this.source = options.source;
        }
        Position2.prototype.content = style;
        var errorsList = [];
        function error(msg) {
          var err = new Error(
            options.source + ":" + lineno + ":" + column2 + ": " + msg
          );
          err.reason = msg;
          err.filename = options.source;
          err.line = lineno;
          err.column = column2;
          err.source = style;
          if (options.silent) {
            errorsList.push(err);
          } else {
            throw err;
          }
        }
        function match2(re2) {
          var m2 = re2.exec(style);
          if (!m2)
            return;
          var str = m2[0];
          updatePosition(str);
          style = style.slice(str.length);
          return m2;
        }
        function whitespace3() {
          match2(WHITESPACE_REGEX);
        }
        function comments(rules2) {
          var c2;
          rules2 = rules2 || [];
          while (c2 = comment2()) {
            if (c2 !== false) {
              rules2.push(c2);
            }
          }
          return rules2;
        }
        function comment2() {
          var pos = position4();
          if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1))
            return;
          var i2 = 2;
          while (EMPTY_STRING != style.charAt(i2) && (ASTERISK != style.charAt(i2) || FORWARD_SLASH != style.charAt(i2 + 1))) {
            ++i2;
          }
          i2 += 2;
          if (EMPTY_STRING === style.charAt(i2 - 1)) {
            return error("End of comment missing");
          }
          var str = style.slice(2, i2 - 2);
          column2 += 2;
          updatePosition(str);
          style = style.slice(i2);
          column2 += 2;
          return pos({
            type: TYPE_COMMENT,
            comment: str
          });
        }
        function declaration2() {
          var pos = position4();
          var prop = match2(PROPERTY_REGEX);
          if (!prop)
            return;
          comment2();
          if (!match2(COLON_REGEX))
            return error("property missing ':'");
          var val = match2(VALUE_REGEX);
          var ret = pos({
            type: TYPE_DECLARATION,
            property: trim2(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),
            value: val ? trim2(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING
          });
          match2(SEMICOLON_REGEX);
          return ret;
        }
        function declarations() {
          var decls = [];
          comments(decls);
          var decl;
          while (decl = declaration2()) {
            if (decl !== false) {
              decls.push(decl);
              comments(decls);
            }
          }
          return decls;
        }
        whitespace3();
        return declarations();
      };
      function trim2(str) {
        return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;
      }
    }
  });

  // ../node_modules/style-to-object/index.js
  var require_style_to_object = __commonJS({
    "../node_modules/style-to-object/index.js"(exports, module) {
      var parse3 = require_inline_style_parser();
      function StyleToObject2(style, iterator) {
        var output = null;
        if (!style || typeof style !== "string") {
          return output;
        }
        var declaration2;
        var declarations = parse3(style);
        var hasIterator = typeof iterator === "function";
        var property;
        var value;
        for (var i2 = 0, len = declarations.length; i2 < len; i2++) {
          declaration2 = declarations[i2];
          property = declaration2.property;
          value = declaration2.value;
          if (hasIterator) {
            iterator(property, value, declaration2);
          } else if (value) {
            output || (output = {});
            output[property] = value;
          }
        }
        return output;
      }
      module.exports = StyleToObject2;
      module.exports.default = StyleToObject2;
    }
  });

  // ../node_modules/lodash/isObject.js
  var require_isObject = __commonJS({
    "../node_modules/lodash/isObject.js"(exports, module) {
      function isObject6(value) {
        var type = typeof value;
        return value != null && (type == "object" || type == "function");
      }
      module.exports = isObject6;
    }
  });

  // ../node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS({
    "../node_modules/lodash/_freeGlobal.js"(exports, module) {
      var freeGlobal = typeof window == "object" && window && window.Object === Object && window;
      module.exports = freeGlobal;
    }
  });

  // ../node_modules/lodash/_root.js
  var require_root = __commonJS({
    "../node_modules/lodash/_root.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeSelf = typeof self == "object" && self && self.Object === Object && self;
      var root151 = freeGlobal || freeSelf || Function("return this")();
      module.exports = root151;
    }
  });

  // ../node_modules/lodash/now.js
  var require_now = __commonJS({
    "../node_modules/lodash/now.js"(exports, module) {
      var root151 = require_root();
      var now = function() {
        return root151.Date.now();
      };
      module.exports = now;
    }
  });

  // ../node_modules/lodash/_trimmedEndIndex.js
  var require_trimmedEndIndex = __commonJS({
    "../node_modules/lodash/_trimmedEndIndex.js"(exports, module) {
      var reWhitespace = /\s/;
      function trimmedEndIndex(string4) {
        var index2 = string4.length;
        while (index2-- && reWhitespace.test(string4.charAt(index2))) {
        }
        return index2;
      }
      module.exports = trimmedEndIndex;
    }
  });

  // ../node_modules/lodash/_baseTrim.js
  var require_baseTrim = __commonJS({
    "../node_modules/lodash/_baseTrim.js"(exports, module) {
      var trimmedEndIndex = require_trimmedEndIndex();
      var reTrimStart = /^\s+/;
      function baseTrim(string4) {
        return string4 ? string4.slice(0, trimmedEndIndex(string4) + 1).replace(reTrimStart, "") : string4;
      }
      module.exports = baseTrim;
    }
  });

  // ../node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS({
    "../node_modules/lodash/_Symbol.js"(exports, module) {
      var root151 = require_root();
      var Symbol3 = root151.Symbol;
      module.exports = Symbol3;
    }
  });

  // ../node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS({
    "../node_modules/lodash/_getRawTag.js"(exports, module) {
      var Symbol3 = require_Symbol();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var nativeObjectToString = objectProto.toString;
      var symToStringTag = Symbol3 ? Symbol3.toStringTag : void 0;
      function getRawTag(value) {
        var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
        try {
          value[symToStringTag] = void 0;
          var unmasked = true;
        } catch (e2) {
        }
        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }
      module.exports = getRawTag;
    }
  });

  // ../node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS({
    "../node_modules/lodash/_objectToString.js"(exports, module) {
      var objectProto = Object.prototype;
      var nativeObjectToString = objectProto.toString;
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }
      module.exports = objectToString;
    }
  });

  // ../node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS({
    "../node_modules/lodash/_baseGetTag.js"(exports, module) {
      var Symbol3 = require_Symbol();
      var getRawTag = require_getRawTag();
      var objectToString = require_objectToString();
      var nullTag = "[object Null]";
      var undefinedTag = "[object Undefined]";
      var symToStringTag = Symbol3 ? Symbol3.toStringTag : void 0;
      function baseGetTag(value) {
        if (value == null) {
          return value === void 0 ? undefinedTag : nullTag;
        }
        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
      }
      module.exports = baseGetTag;
    }
  });

  // ../node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "../node_modules/lodash/isObjectLike.js"(exports, module) {
      function isObjectLike(value) {
        return value != null && typeof value == "object";
      }
      module.exports = isObjectLike;
    }
  });

  // ../node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS({
    "../node_modules/lodash/isSymbol.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var symbolTag = "[object Symbol]";
      function isSymbol(value) {
        return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
      }
      module.exports = isSymbol;
    }
  });

  // ../node_modules/lodash/toNumber.js
  var require_toNumber = __commonJS({
    "../node_modules/lodash/toNumber.js"(exports, module) {
      var baseTrim = require_baseTrim();
      var isObject6 = require_isObject();
      var isSymbol = require_isSymbol();
      var NAN = 0 / 0;
      var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
      var reIsBinary = /^0b[01]+$/i;
      var reIsOctal = /^0o[0-7]+$/i;
      var freeParseInt = parseInt;
      function toNumber(value) {
        if (typeof value == "number") {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject6(value)) {
          var other = typeof value.valueOf == "function" ? value.valueOf() : value;
          value = isObject6(other) ? other + "" : other;
        }
        if (typeof value != "string") {
          return value === 0 ? value : +value;
        }
        value = baseTrim(value);
        var isBinary = reIsBinary.test(value);
        return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
      }
      module.exports = toNumber;
    }
  });

  // ../node_modules/lodash/debounce.js
  var require_debounce = __commonJS({
    "../node_modules/lodash/debounce.js"(exports, module) {
      var isObject6 = require_isObject();
      var now = require_now();
      var toNumber = require_toNumber();
      var FUNC_ERROR_TEXT = "Expected a function";
      var nativeMax = Math.max;
      var nativeMin = Math.min;
      function debounce(func3, wait, options) {
        var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
        if (typeof func3 != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject6(options)) {
          leading = !!options.leading;
          maxing = "maxWait" in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = "trailing" in options ? !!options.trailing : trailing;
        }
        function invokeFunc(time) {
          var args = lastArgs, thisArg = lastThis;
          lastArgs = lastThis = void 0;
          lastInvokeTime = time;
          result = func3.apply(thisArg, args);
          return result;
        }
        function leadingEdge(time) {
          lastInvokeTime = time;
          timerId = setTimeout(timerExpired, wait);
          return leading ? invokeFunc(time) : result;
        }
        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
          return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
        }
        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
          return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
        }
        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          timerId = setTimeout(timerExpired, remainingWait(time));
        }
        function trailingEdge(time) {
          timerId = void 0;
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = void 0;
          return result;
        }
        function cancel() {
          if (timerId !== void 0) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = void 0;
        }
        function flush2() {
          return timerId === void 0 ? result : trailingEdge(now());
        }
        function debounced() {
          var time = now(), isInvoking = shouldInvoke(time);
          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;
          if (isInvoking) {
            if (timerId === void 0) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              clearTimeout(timerId);
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === void 0) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush2;
        return debounced;
      }
      module.exports = debounce;
    }
  });

  // ../node_modules/source-map/lib/base64.js
  var require_base64 = __commonJS({
    "../node_modules/source-map/lib/base64.js"(exports) {
      var intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
      exports.encode = function(number3) {
        if (0 <= number3 && number3 < intToCharMap.length) {
          return intToCharMap[number3];
        }
        throw new TypeError("Must be between 0 and 63: " + number3);
      };
      exports.decode = function(charCode) {
        var bigA = 65;
        var bigZ = 90;
        var littleA = 97;
        var littleZ = 122;
        var zero = 48;
        var nine = 57;
        var plus = 43;
        var slash = 47;
        var littleOffset = 26;
        var numberOffset = 52;
        if (bigA <= charCode && charCode <= bigZ) {
          return charCode - bigA;
        }
        if (littleA <= charCode && charCode <= littleZ) {
          return charCode - littleA + littleOffset;
        }
        if (zero <= charCode && charCode <= nine) {
          return charCode - zero + numberOffset;
        }
        if (charCode == plus) {
          return 62;
        }
        if (charCode == slash) {
          return 63;
        }
        return -1;
      };
    }
  });

  // ../node_modules/source-map/lib/base64-vlq.js
  var require_base64_vlq = __commonJS({
    "../node_modules/source-map/lib/base64-vlq.js"(exports) {
      var base64 = require_base64();
      var VLQ_BASE_SHIFT = 5;
      var VLQ_BASE = 1 << VLQ_BASE_SHIFT;
      var VLQ_BASE_MASK = VLQ_BASE - 1;
      var VLQ_CONTINUATION_BIT = VLQ_BASE;
      function toVLQSigned(aValue) {
        return aValue < 0 ? (-aValue << 1) + 1 : (aValue << 1) + 0;
      }
      function fromVLQSigned(aValue) {
        var isNegative = (aValue & 1) === 1;
        var shifted = aValue >> 1;
        return isNegative ? -shifted : shifted;
      }
      exports.encode = function base64VLQ_encode(aValue) {
        var encoded = "";
        var digit;
        var vlq = toVLQSigned(aValue);
        do {
          digit = vlq & VLQ_BASE_MASK;
          vlq >>>= VLQ_BASE_SHIFT;
          if (vlq > 0) {
            digit |= VLQ_CONTINUATION_BIT;
          }
          encoded += base64.encode(digit);
        } while (vlq > 0);
        return encoded;
      };
      exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
        var strLen = aStr.length;
        var result = 0;
        var shift = 0;
        var continuation, digit;
        do {
          if (aIndex >= strLen) {
            throw new Error("Expected more digits in base 64 VLQ value.");
          }
          digit = base64.decode(aStr.charCodeAt(aIndex++));
          if (digit === -1) {
            throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
          }
          continuation = !!(digit & VLQ_CONTINUATION_BIT);
          digit &= VLQ_BASE_MASK;
          result = result + (digit << shift);
          shift += VLQ_BASE_SHIFT;
        } while (continuation);
        aOutParam.value = fromVLQSigned(result);
        aOutParam.rest = aIndex;
      };
    }
  });

  // ../node_modules/source-map/lib/util.js
  var require_util = __commonJS({
    "../node_modules/source-map/lib/util.js"(exports) {
      function getArg(aArgs, aName, aDefaultValue) {
        if (aName in aArgs) {
          return aArgs[aName];
        } else if (arguments.length === 3) {
          return aDefaultValue;
        } else {
          throw new Error('"' + aName + '" is a required argument.');
        }
      }
      exports.getArg = getArg;
      var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/;
      var dataUrlRegexp = /^data:.+\,.+$/;
      function urlParse(aUrl) {
        var match2 = aUrl.match(urlRegexp);
        if (!match2) {
          return null;
        }
        return {
          scheme: match2[1],
          auth: match2[2],
          host: match2[3],
          port: match2[4],
          path: match2[5]
        };
      }
      exports.urlParse = urlParse;
      function urlGenerate(aParsedUrl) {
        var url = "";
        if (aParsedUrl.scheme) {
          url += aParsedUrl.scheme + ":";
        }
        url += "//";
        if (aParsedUrl.auth) {
          url += aParsedUrl.auth + "@";
        }
        if (aParsedUrl.host) {
          url += aParsedUrl.host;
        }
        if (aParsedUrl.port) {
          url += ":" + aParsedUrl.port;
        }
        if (aParsedUrl.path) {
          url += aParsedUrl.path;
        }
        return url;
      }
      exports.urlGenerate = urlGenerate;
      function normalize6(aPath) {
        var path2 = aPath;
        var url = urlParse(aPath);
        if (url) {
          if (!url.path) {
            return aPath;
          }
          path2 = url.path;
        }
        var isAbsolute2 = exports.isAbsolute(path2);
        var parts = path2.split(/\/+/);
        for (var part, up = 0, i2 = parts.length - 1; i2 >= 0; i2--) {
          part = parts[i2];
          if (part === ".") {
            parts.splice(i2, 1);
          } else if (part === "..") {
            up++;
          } else if (up > 0) {
            if (part === "") {
              parts.splice(i2 + 1, up);
              up = 0;
            } else {
              parts.splice(i2, 2);
              up--;
            }
          }
        }
        path2 = parts.join("/");
        if (path2 === "") {
          path2 = isAbsolute2 ? "/" : ".";
        }
        if (url) {
          url.path = path2;
          return urlGenerate(url);
        }
        return path2;
      }
      exports.normalize = normalize6;
      function join3(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        if (aPath === "") {
          aPath = ".";
        }
        var aPathUrl = urlParse(aPath);
        var aRootUrl = urlParse(aRoot);
        if (aRootUrl) {
          aRoot = aRootUrl.path || "/";
        }
        if (aPathUrl && !aPathUrl.scheme) {
          if (aRootUrl) {
            aPathUrl.scheme = aRootUrl.scheme;
          }
          return urlGenerate(aPathUrl);
        }
        if (aPathUrl || aPath.match(dataUrlRegexp)) {
          return aPath;
        }
        if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
          aRootUrl.host = aPath;
          return urlGenerate(aRootUrl);
        }
        var joined = aPath.charAt(0) === "/" ? aPath : normalize6(aRoot.replace(/\/+$/, "") + "/" + aPath);
        if (aRootUrl) {
          aRootUrl.path = joined;
          return urlGenerate(aRootUrl);
        }
        return joined;
      }
      exports.join = join3;
      exports.isAbsolute = function(aPath) {
        return aPath.charAt(0) === "/" || urlRegexp.test(aPath);
      };
      function relative2(aRoot, aPath) {
        if (aRoot === "") {
          aRoot = ".";
        }
        aRoot = aRoot.replace(/\/$/, "");
        var level = 0;
        while (aPath.indexOf(aRoot + "/") !== 0) {
          var index2 = aRoot.lastIndexOf("/");
          if (index2 < 0) {
            return aPath;
          }
          aRoot = aRoot.slice(0, index2);
          if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
            return aPath;
          }
          ++level;
        }
        return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
      }
      exports.relative = relative2;
      var supportsNullProto = function() {
        var obj = /* @__PURE__ */ Object.create(null);
        return !("__proto__" in obj);
      }();
      function identity(s2) {
        return s2;
      }
      function toSetString(aStr) {
        if (isProtoString(aStr)) {
          return "$" + aStr;
        }
        return aStr;
      }
      exports.toSetString = supportsNullProto ? identity : toSetString;
      function fromSetString(aStr) {
        if (isProtoString(aStr)) {
          return aStr.slice(1);
        }
        return aStr;
      }
      exports.fromSetString = supportsNullProto ? identity : fromSetString;
      function isProtoString(s2) {
        if (!s2) {
          return false;
        }
        var length2 = s2.length;
        if (length2 < 9) {
          return false;
        }
        if (s2.charCodeAt(length2 - 1) !== 95 || s2.charCodeAt(length2 - 2) !== 95 || s2.charCodeAt(length2 - 3) !== 111 || s2.charCodeAt(length2 - 4) !== 116 || s2.charCodeAt(length2 - 5) !== 111 || s2.charCodeAt(length2 - 6) !== 114 || s2.charCodeAt(length2 - 7) !== 112 || s2.charCodeAt(length2 - 8) !== 95 || s2.charCodeAt(length2 - 9) !== 95) {
          return false;
        }
        for (var i2 = length2 - 10; i2 >= 0; i2--) {
          if (s2.charCodeAt(i2) !== 36) {
            return false;
          }
        }
        return true;
      }
      function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
        var cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0 || onlyCompareOriginal) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByOriginalPositions = compareByOriginalPositions;
      function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0 || onlyCompareGenerated) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;
      function strcmp(aStr1, aStr2) {
        if (aStr1 === aStr2) {
          return 0;
        }
        if (aStr1 === null) {
          return 1;
        }
        if (aStr2 === null) {
          return -1;
        }
        if (aStr1 > aStr2) {
          return 1;
        }
        return -1;
      }
      function compareByGeneratedPositionsInflated(mappingA, mappingB) {
        var cmp = mappingA.generatedLine - mappingB.generatedLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.generatedColumn - mappingB.generatedColumn;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = strcmp(mappingA.source, mappingB.source);
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalLine - mappingB.originalLine;
        if (cmp !== 0) {
          return cmp;
        }
        cmp = mappingA.originalColumn - mappingB.originalColumn;
        if (cmp !== 0) {
          return cmp;
        }
        return strcmp(mappingA.name, mappingB.name);
      }
      exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
      function parseSourceMapInput(str) {
        return JSON.parse(str.replace(/^\)]}'[^\n]*\n/, ""));
      }
      exports.parseSourceMapInput = parseSourceMapInput;
      function computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {
        sourceURL = sourceURL || "";
        if (sourceRoot) {
          if (sourceRoot[sourceRoot.length - 1] !== "/" && sourceURL[0] !== "/") {
            sourceRoot += "/";
          }
          sourceURL = sourceRoot + sourceURL;
        }
        if (sourceMapURL) {
          var parsed = urlParse(sourceMapURL);
          if (!parsed) {
            throw new Error("sourceMapURL could not be parsed");
          }
          if (parsed.path) {
            var index2 = parsed.path.lastIndexOf("/");
            if (index2 >= 0) {
              parsed.path = parsed.path.substring(0, index2 + 1);
            }
          }
          sourceURL = join3(urlGenerate(parsed), sourceURL);
        }
        return normalize6(sourceURL);
      }
      exports.computeSourceURL = computeSourceURL;
    }
  });

  // ../node_modules/source-map/lib/array-set.js
  var require_array_set = __commonJS({
    "../node_modules/source-map/lib/array-set.js"(exports) {
      var util = require_util();
      var has = Object.prototype.hasOwnProperty;
      var hasNativeMap = typeof Map !== "undefined";
      function ArraySet() {
        this._array = [];
        this._set = hasNativeMap ? /* @__PURE__ */ new Map() : /* @__PURE__ */ Object.create(null);
      }
      ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
        var set = new ArraySet();
        for (var i2 = 0, len = aArray.length; i2 < len; i2++) {
          set.add(aArray[i2], aAllowDuplicates);
        }
        return set;
      };
      ArraySet.prototype.size = function ArraySet_size() {
        return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;
      };
      ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
        var sStr = hasNativeMap ? aStr : util.toSetString(aStr);
        var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);
        var idx = this._array.length;
        if (!isDuplicate || aAllowDuplicates) {
          this._array.push(aStr);
        }
        if (!isDuplicate) {
          if (hasNativeMap) {
            this._set.set(aStr, idx);
          } else {
            this._set[sStr] = idx;
          }
        }
      };
      ArraySet.prototype.has = function ArraySet_has(aStr) {
        if (hasNativeMap) {
          return this._set.has(aStr);
        } else {
          var sStr = util.toSetString(aStr);
          return has.call(this._set, sStr);
        }
      };
      ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
        if (hasNativeMap) {
          var idx = this._set.get(aStr);
          if (idx >= 0) {
            return idx;
          }
        } else {
          var sStr = util.toSetString(aStr);
          if (has.call(this._set, sStr)) {
            return this._set[sStr];
          }
        }
        throw new Error('"' + aStr + '" is not in the set.');
      };
      ArraySet.prototype.at = function ArraySet_at(aIdx) {
        if (aIdx >= 0 && aIdx < this._array.length) {
          return this._array[aIdx];
        }
        throw new Error("No element indexed by " + aIdx);
      };
      ArraySet.prototype.toArray = function ArraySet_toArray() {
        return this._array.slice();
      };
      exports.ArraySet = ArraySet;
    }
  });

  // ../node_modules/source-map/lib/mapping-list.js
  var require_mapping_list = __commonJS({
    "../node_modules/source-map/lib/mapping-list.js"(exports) {
      var util = require_util();
      function generatedPositionAfter(mappingA, mappingB) {
        var lineA = mappingA.generatedLine;
        var lineB = mappingB.generatedLine;
        var columnA = mappingA.generatedColumn;
        var columnB = mappingB.generatedColumn;
        return lineB > lineA || lineB == lineA && columnB >= columnA || util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
      }
      function MappingList() {
        this._array = [];
        this._sorted = true;
        this._last = { generatedLine: -1, generatedColumn: 0 };
      }
      MappingList.prototype.unsortedForEach = function MappingList_forEach(aCallback, aThisArg) {
        this._array.forEach(aCallback, aThisArg);
      };
      MappingList.prototype.add = function MappingList_add(aMapping) {
        if (generatedPositionAfter(this._last, aMapping)) {
          this._last = aMapping;
          this._array.push(aMapping);
        } else {
          this._sorted = false;
          this._array.push(aMapping);
        }
      };
      MappingList.prototype.toArray = function MappingList_toArray() {
        if (!this._sorted) {
          this._array.sort(util.compareByGeneratedPositionsInflated);
          this._sorted = true;
        }
        return this._array;
      };
      exports.MappingList = MappingList;
    }
  });

  // ../node_modules/source-map/lib/source-map-generator.js
  var require_source_map_generator = __commonJS({
    "../node_modules/source-map/lib/source-map-generator.js"(exports) {
      var base64VLQ = require_base64_vlq();
      var util = require_util();
      var ArraySet = require_array_set().ArraySet;
      var MappingList = require_mapping_list().MappingList;
      function SourceMapGenerator(aArgs) {
        if (!aArgs) {
          aArgs = {};
        }
        this._file = util.getArg(aArgs, "file", null);
        this._sourceRoot = util.getArg(aArgs, "sourceRoot", null);
        this._skipValidation = util.getArg(aArgs, "skipValidation", false);
        this._sources = new ArraySet();
        this._names = new ArraySet();
        this._mappings = new MappingList();
        this._sourcesContents = null;
      }
      SourceMapGenerator.prototype._version = 3;
      SourceMapGenerator.fromSourceMap = function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
        var sourceRoot = aSourceMapConsumer.sourceRoot;
        var generator = new SourceMapGenerator({
          file: aSourceMapConsumer.file,
          sourceRoot
        });
        aSourceMapConsumer.eachMapping(function(mapping) {
          var newMapping = {
            generated: {
              line: mapping.generatedLine,
              column: mapping.generatedColumn
            }
          };
          if (mapping.source != null) {
            newMapping.source = mapping.source;
            if (sourceRoot != null) {
              newMapping.source = util.relative(sourceRoot, newMapping.source);
            }
            newMapping.original = {
              line: mapping.originalLine,
              column: mapping.originalColumn
            };
            if (mapping.name != null) {
              newMapping.name = mapping.name;
            }
          }
          generator.addMapping(newMapping);
        });
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
          var sourceRelative = sourceFile;
          if (sourceRoot !== null) {
            sourceRelative = util.relative(sourceRoot, sourceFile);
          }
          if (!generator._sources.has(sourceRelative)) {
            generator._sources.add(sourceRelative);
          }
          var content15 = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content15 != null) {
            generator.setSourceContent(sourceFile, content15);
          }
        });
        return generator;
      };
      SourceMapGenerator.prototype.addMapping = function SourceMapGenerator_addMapping(aArgs) {
        var generated2 = util.getArg(aArgs, "generated");
        var original = util.getArg(aArgs, "original", null);
        var source = util.getArg(aArgs, "source", null);
        var name = util.getArg(aArgs, "name", null);
        if (!this._skipValidation) {
          this._validateMapping(generated2, original, source, name);
        }
        if (source != null) {
          source = String(source);
          if (!this._sources.has(source)) {
            this._sources.add(source);
          }
        }
        if (name != null) {
          name = String(name);
          if (!this._names.has(name)) {
            this._names.add(name);
          }
        }
        this._mappings.add({
          generatedLine: generated2.line,
          generatedColumn: generated2.column,
          originalLine: original != null && original.line,
          originalColumn: original != null && original.column,
          source,
          name
        });
      };
      SourceMapGenerator.prototype.setSourceContent = function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
        var source = aSourceFile;
        if (this._sourceRoot != null) {
          source = util.relative(this._sourceRoot, source);
        }
        if (aSourceContent != null) {
          if (!this._sourcesContents) {
            this._sourcesContents = /* @__PURE__ */ Object.create(null);
          }
          this._sourcesContents[util.toSetString(source)] = aSourceContent;
        } else if (this._sourcesContents) {
          delete this._sourcesContents[util.toSetString(source)];
          if (Object.keys(this._sourcesContents).length === 0) {
            this._sourcesContents = null;
          }
        }
      };
      SourceMapGenerator.prototype.applySourceMap = function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
        var sourceFile = aSourceFile;
        if (aSourceFile == null) {
          if (aSourceMapConsumer.file == null) {
            throw new Error(
              `SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map's "file" property. Both were omitted.`
            );
          }
          sourceFile = aSourceMapConsumer.file;
        }
        var sourceRoot = this._sourceRoot;
        if (sourceRoot != null) {
          sourceFile = util.relative(sourceRoot, sourceFile);
        }
        var newSources = new ArraySet();
        var newNames = new ArraySet();
        this._mappings.unsortedForEach(function(mapping) {
          if (mapping.source === sourceFile && mapping.originalLine != null) {
            var original = aSourceMapConsumer.originalPositionFor({
              line: mapping.originalLine,
              column: mapping.originalColumn
            });
            if (original.source != null) {
              mapping.source = original.source;
              if (aSourceMapPath != null) {
                mapping.source = util.join(aSourceMapPath, mapping.source);
              }
              if (sourceRoot != null) {
                mapping.source = util.relative(sourceRoot, mapping.source);
              }
              mapping.originalLine = original.line;
              mapping.originalColumn = original.column;
              if (original.name != null) {
                mapping.name = original.name;
              }
            }
          }
          var source = mapping.source;
          if (source != null && !newSources.has(source)) {
            newSources.add(source);
          }
          var name = mapping.name;
          if (name != null && !newNames.has(name)) {
            newNames.add(name);
          }
        }, this);
        this._sources = newSources;
        this._names = newNames;
        aSourceMapConsumer.sources.forEach(function(sourceFile2) {
          var content15 = aSourceMapConsumer.sourceContentFor(sourceFile2);
          if (content15 != null) {
            if (aSourceMapPath != null) {
              sourceFile2 = util.join(aSourceMapPath, sourceFile2);
            }
            if (sourceRoot != null) {
              sourceFile2 = util.relative(sourceRoot, sourceFile2);
            }
            this.setSourceContent(sourceFile2, content15);
          }
        }, this);
      };
      SourceMapGenerator.prototype._validateMapping = function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource, aName) {
        if (aOriginal && typeof aOriginal.line !== "number" && typeof aOriginal.column !== "number") {
          throw new Error(
            "original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values."
          );
        }
        if (aGenerated && "line" in aGenerated && "column" in aGenerated && aGenerated.line > 0 && aGenerated.column >= 0 && !aOriginal && !aSource && !aName) {
          return;
        } else if (aGenerated && "line" in aGenerated && "column" in aGenerated && aOriginal && "line" in aOriginal && "column" in aOriginal && aGenerated.line > 0 && aGenerated.column >= 0 && aOriginal.line > 0 && aOriginal.column >= 0 && aSource) {
          return;
        } else {
          throw new Error("Invalid mapping: " + JSON.stringify({
            generated: aGenerated,
            source: aSource,
            original: aOriginal,
            name: aName
          }));
        }
      };
      SourceMapGenerator.prototype._serializeMappings = function SourceMapGenerator_serializeMappings() {
        var previousGeneratedColumn = 0;
        var previousGeneratedLine = 1;
        var previousOriginalColumn = 0;
        var previousOriginalLine = 0;
        var previousName = 0;
        var previousSource = 0;
        var result = "";
        var next2;
        var mapping;
        var nameIdx;
        var sourceIdx;
        var mappings = this._mappings.toArray();
        for (var i2 = 0, len = mappings.length; i2 < len; i2++) {
          mapping = mappings[i2];
          next2 = "";
          if (mapping.generatedLine !== previousGeneratedLine) {
            previousGeneratedColumn = 0;
            while (mapping.generatedLine !== previousGeneratedLine) {
              next2 += ";";
              previousGeneratedLine++;
            }
          } else {
            if (i2 > 0) {
              if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i2 - 1])) {
                continue;
              }
              next2 += ",";
            }
          }
          next2 += base64VLQ.encode(mapping.generatedColumn - previousGeneratedColumn);
          previousGeneratedColumn = mapping.generatedColumn;
          if (mapping.source != null) {
            sourceIdx = this._sources.indexOf(mapping.source);
            next2 += base64VLQ.encode(sourceIdx - previousSource);
            previousSource = sourceIdx;
            next2 += base64VLQ.encode(mapping.originalLine - 1 - previousOriginalLine);
            previousOriginalLine = mapping.originalLine - 1;
            next2 += base64VLQ.encode(mapping.originalColumn - previousOriginalColumn);
            previousOriginalColumn = mapping.originalColumn;
            if (mapping.name != null) {
              nameIdx = this._names.indexOf(mapping.name);
              next2 += base64VLQ.encode(nameIdx - previousName);
              previousName = nameIdx;
            }
          }
          result += next2;
        }
        return result;
      };
      SourceMapGenerator.prototype._generateSourcesContent = function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
        return aSources.map(function(source) {
          if (!this._sourcesContents) {
            return null;
          }
          if (aSourceRoot != null) {
            source = util.relative(aSourceRoot, source);
          }
          var key = util.toSetString(source);
          return Object.prototype.hasOwnProperty.call(this._sourcesContents, key) ? this._sourcesContents[key] : null;
        }, this);
      };
      SourceMapGenerator.prototype.toJSON = function SourceMapGenerator_toJSON() {
        var map = {
          version: this._version,
          sources: this._sources.toArray(),
          names: this._names.toArray(),
          mappings: this._serializeMappings()
        };
        if (this._file != null) {
          map.file = this._file;
        }
        if (this._sourceRoot != null) {
          map.sourceRoot = this._sourceRoot;
        }
        if (this._sourcesContents) {
          map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
        }
        return map;
      };
      SourceMapGenerator.prototype.toString = function SourceMapGenerator_toString() {
        return JSON.stringify(this.toJSON());
      };
      exports.SourceMapGenerator = SourceMapGenerator;
    }
  });

  // ../node_modules/source-map/lib/binary-search.js
  var require_binary_search = __commonJS({
    "../node_modules/source-map/lib/binary-search.js"(exports) {
      exports.GREATEST_LOWER_BOUND = 1;
      exports.LEAST_UPPER_BOUND = 2;
      function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
        var mid = Math.floor((aHigh - aLow) / 2) + aLow;
        var cmp = aCompare(aNeedle, aHaystack[mid], true);
        if (cmp === 0) {
          return mid;
        } else if (cmp > 0) {
          if (aHigh - mid > 1) {
            return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return aHigh < aHaystack.length ? aHigh : -1;
          } else {
            return mid;
          }
        } else {
          if (mid - aLow > 1) {
            return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
          }
          if (aBias == exports.LEAST_UPPER_BOUND) {
            return mid;
          } else {
            return aLow < 0 ? -1 : aLow;
          }
        }
      }
      exports.search = function search2(aNeedle, aHaystack, aCompare, aBias) {
        if (aHaystack.length === 0) {
          return -1;
        }
        var index2 = recursiveSearch(
          -1,
          aHaystack.length,
          aNeedle,
          aHaystack,
          aCompare,
          aBias || exports.GREATEST_LOWER_BOUND
        );
        if (index2 < 0) {
          return -1;
        }
        while (index2 - 1 >= 0) {
          if (aCompare(aHaystack[index2], aHaystack[index2 - 1], true) !== 0) {
            break;
          }
          --index2;
        }
        return index2;
      };
    }
  });

  // ../node_modules/source-map/lib/quick-sort.js
  var require_quick_sort = __commonJS({
    "../node_modules/source-map/lib/quick-sort.js"(exports) {
      function swap(ary, x, y2) {
        var temp = ary[x];
        ary[x] = ary[y2];
        ary[y2] = temp;
      }
      function randomIntInRange(low, high) {
        return Math.round(low + Math.random() * (high - low));
      }
      function doQuickSort(ary, comparator, p2, r) {
        if (p2 < r) {
          var pivotIndex = randomIntInRange(p2, r);
          var i2 = p2 - 1;
          swap(ary, pivotIndex, r);
          var pivot = ary[r];
          for (var j3 = p2; j3 < r; j3++) {
            if (comparator(ary[j3], pivot) <= 0) {
              i2 += 1;
              swap(ary, i2, j3);
            }
          }
          swap(ary, i2 + 1, j3);
          var q = i2 + 1;
          doQuickSort(ary, comparator, p2, q - 1);
          doQuickSort(ary, comparator, q + 1, r);
        }
      }
      exports.quickSort = function(ary, comparator) {
        doQuickSort(ary, comparator, 0, ary.length - 1);
      };
    }
  });

  // ../node_modules/source-map/lib/source-map-consumer.js
  var require_source_map_consumer = __commonJS({
    "../node_modules/source-map/lib/source-map-consumer.js"(exports) {
      var util = require_util();
      var binarySearch = require_binary_search();
      var ArraySet = require_array_set().ArraySet;
      var base64VLQ = require_base64_vlq();
      var quickSort = require_quick_sort().quickSort;
      function SourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);
      }
      SourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {
        return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);
      };
      SourceMapConsumer.prototype._version = 3;
      SourceMapConsumer.prototype.__generatedMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, "_generatedMappings", {
        configurable: true,
        enumerable: true,
        get: function() {
          if (!this.__generatedMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
          }
          return this.__generatedMappings;
        }
      });
      SourceMapConsumer.prototype.__originalMappings = null;
      Object.defineProperty(SourceMapConsumer.prototype, "_originalMappings", {
        configurable: true,
        enumerable: true,
        get: function() {
          if (!this.__originalMappings) {
            this._parseMappings(this._mappings, this.sourceRoot);
          }
          return this.__originalMappings;
        }
      });
      SourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index2) {
        var c2 = aStr.charAt(index2);
        return c2 === ";" || c2 === ",";
      };
      SourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        throw new Error("Subclasses must implement _parseMappings");
      };
      SourceMapConsumer.GENERATED_ORDER = 1;
      SourceMapConsumer.ORIGINAL_ORDER = 2;
      SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
      SourceMapConsumer.LEAST_UPPER_BOUND = 2;
      SourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
        var context = aContext || null;
        var order2 = aOrder || SourceMapConsumer.GENERATED_ORDER;
        var mappings;
        switch (order2) {
          case SourceMapConsumer.GENERATED_ORDER:
            mappings = this._generatedMappings;
            break;
          case SourceMapConsumer.ORIGINAL_ORDER:
            mappings = this._originalMappings;
            break;
          default:
            throw new Error("Unknown order of iteration.");
        }
        var sourceRoot = this.sourceRoot;
        mappings.map(function(mapping) {
          var source = mapping.source === null ? null : this._sources.at(mapping.source);
          source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);
          return {
            source,
            generatedLine: mapping.generatedLine,
            generatedColumn: mapping.generatedColumn,
            originalLine: mapping.originalLine,
            originalColumn: mapping.originalColumn,
            name: mapping.name === null ? null : this._names.at(mapping.name)
          };
        }, this).forEach(aCallback, context);
      };
      SourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
        var line2 = util.getArg(aArgs, "line");
        var needle = {
          source: util.getArg(aArgs, "source"),
          originalLine: line2,
          originalColumn: util.getArg(aArgs, "column", 0)
        };
        needle.source = this._findSourceIndex(needle.source);
        if (needle.source < 0) {
          return [];
        }
        var mappings = [];
        var index2 = this._findMapping(
          needle,
          this._originalMappings,
          "originalLine",
          "originalColumn",
          util.compareByOriginalPositions,
          binarySearch.LEAST_UPPER_BOUND
        );
        if (index2 >= 0) {
          var mapping = this._originalMappings[index2];
          if (aArgs.column === void 0) {
            var originalLine = mapping.originalLine;
            while (mapping && mapping.originalLine === originalLine) {
              mappings.push({
                line: util.getArg(mapping, "generatedLine", null),
                column: util.getArg(mapping, "generatedColumn", null),
                lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
              });
              mapping = this._originalMappings[++index2];
            }
          } else {
            var originalColumn = mapping.originalColumn;
            while (mapping && mapping.originalLine === line2 && mapping.originalColumn == originalColumn) {
              mappings.push({
                line: util.getArg(mapping, "generatedLine", null),
                column: util.getArg(mapping, "generatedColumn", null),
                lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
              });
              mapping = this._originalMappings[++index2];
            }
          }
        }
        return mappings;
      };
      exports.SourceMapConsumer = SourceMapConsumer;
      function BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        var version2 = util.getArg(sourceMap, "version");
        var sources = util.getArg(sourceMap, "sources");
        var names = util.getArg(sourceMap, "names", []);
        var sourceRoot = util.getArg(sourceMap, "sourceRoot", null);
        var sourcesContent = util.getArg(sourceMap, "sourcesContent", null);
        var mappings = util.getArg(sourceMap, "mappings");
        var file = util.getArg(sourceMap, "file", null);
        if (version2 != this._version) {
          throw new Error("Unsupported version: " + version2);
        }
        if (sourceRoot) {
          sourceRoot = util.normalize(sourceRoot);
        }
        sources = sources.map(String).map(util.normalize).map(function(source) {
          return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;
        });
        this._names = ArraySet.fromArray(names.map(String), true);
        this._sources = ArraySet.fromArray(sources, true);
        this._absoluteSources = this._sources.toArray().map(function(s2) {
          return util.computeSourceURL(sourceRoot, s2, aSourceMapURL);
        });
        this.sourceRoot = sourceRoot;
        this.sourcesContent = sourcesContent;
        this._mappings = mappings;
        this._sourceMapURL = aSourceMapURL;
        this.file = file;
      }
      BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
      BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;
      BasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {
        var relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util.relative(this.sourceRoot, relativeSource);
        }
        if (this._sources.has(relativeSource)) {
          return this._sources.indexOf(relativeSource);
        }
        var i2;
        for (i2 = 0; i2 < this._absoluteSources.length; ++i2) {
          if (this._absoluteSources[i2] == aSource) {
            return i2;
          }
        }
        return -1;
      };
      BasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {
        var smc = Object.create(BasicSourceMapConsumer.prototype);
        var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
        var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
        smc.sourceRoot = aSourceMap._sourceRoot;
        smc.sourcesContent = aSourceMap._generateSourcesContent(
          smc._sources.toArray(),
          smc.sourceRoot
        );
        smc.file = aSourceMap._file;
        smc._sourceMapURL = aSourceMapURL;
        smc._absoluteSources = smc._sources.toArray().map(function(s2) {
          return util.computeSourceURL(smc.sourceRoot, s2, aSourceMapURL);
        });
        var generatedMappings = aSourceMap._mappings.toArray().slice();
        var destGeneratedMappings = smc.__generatedMappings = [];
        var destOriginalMappings = smc.__originalMappings = [];
        for (var i2 = 0, length2 = generatedMappings.length; i2 < length2; i2++) {
          var srcMapping = generatedMappings[i2];
          var destMapping = new Mapping();
          destMapping.generatedLine = srcMapping.generatedLine;
          destMapping.generatedColumn = srcMapping.generatedColumn;
          if (srcMapping.source) {
            destMapping.source = sources.indexOf(srcMapping.source);
            destMapping.originalLine = srcMapping.originalLine;
            destMapping.originalColumn = srcMapping.originalColumn;
            if (srcMapping.name) {
              destMapping.name = names.indexOf(srcMapping.name);
            }
            destOriginalMappings.push(destMapping);
          }
          destGeneratedMappings.push(destMapping);
        }
        quickSort(smc.__originalMappings, util.compareByOriginalPositions);
        return smc;
      };
      BasicSourceMapConsumer.prototype._version = 3;
      Object.defineProperty(BasicSourceMapConsumer.prototype, "sources", {
        get: function() {
          return this._absoluteSources.slice();
        }
      });
      function Mapping() {
        this.generatedLine = 0;
        this.generatedColumn = 0;
        this.source = null;
        this.originalLine = null;
        this.originalColumn = null;
        this.name = null;
      }
      BasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        var generatedLine = 1;
        var previousGeneratedColumn = 0;
        var previousOriginalLine = 0;
        var previousOriginalColumn = 0;
        var previousSource = 0;
        var previousName = 0;
        var length2 = aStr.length;
        var index2 = 0;
        var cachedSegments = {};
        var temp = {};
        var originalMappings = [];
        var generatedMappings = [];
        var mapping, str, segment, end2, value;
        while (index2 < length2) {
          if (aStr.charAt(index2) === ";") {
            generatedLine++;
            index2++;
            previousGeneratedColumn = 0;
          } else if (aStr.charAt(index2) === ",") {
            index2++;
          } else {
            mapping = new Mapping();
            mapping.generatedLine = generatedLine;
            for (end2 = index2; end2 < length2; end2++) {
              if (this._charIsMappingSeparator(aStr, end2)) {
                break;
              }
            }
            str = aStr.slice(index2, end2);
            segment = cachedSegments[str];
            if (segment) {
              index2 += str.length;
            } else {
              segment = [];
              while (index2 < end2) {
                base64VLQ.decode(aStr, index2, temp);
                value = temp.value;
                index2 = temp.rest;
                segment.push(value);
              }
              if (segment.length === 2) {
                throw new Error("Found a source, but no line and column");
              }
              if (segment.length === 3) {
                throw new Error("Found a source and line, but no column");
              }
              cachedSegments[str] = segment;
            }
            mapping.generatedColumn = previousGeneratedColumn + segment[0];
            previousGeneratedColumn = mapping.generatedColumn;
            if (segment.length > 1) {
              mapping.source = previousSource + segment[1];
              previousSource += segment[1];
              mapping.originalLine = previousOriginalLine + segment[2];
              previousOriginalLine = mapping.originalLine;
              mapping.originalLine += 1;
              mapping.originalColumn = previousOriginalColumn + segment[3];
              previousOriginalColumn = mapping.originalColumn;
              if (segment.length > 4) {
                mapping.name = previousName + segment[4];
                previousName += segment[4];
              }
            }
            generatedMappings.push(mapping);
            if (typeof mapping.originalLine === "number") {
              originalMappings.push(mapping);
            }
          }
        }
        quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
        this.__generatedMappings = generatedMappings;
        quickSort(originalMappings, util.compareByOriginalPositions);
        this.__originalMappings = originalMappings;
      };
      BasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {
        if (aNeedle[aLineName] <= 0) {
          throw new TypeError("Line must be greater than or equal to 1, got " + aNeedle[aLineName]);
        }
        if (aNeedle[aColumnName] < 0) {
          throw new TypeError("Column must be greater than or equal to 0, got " + aNeedle[aColumnName]);
        }
        return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
      };
      BasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {
        for (var index2 = 0; index2 < this._generatedMappings.length; ++index2) {
          var mapping = this._generatedMappings[index2];
          if (index2 + 1 < this._generatedMappings.length) {
            var nextMapping = this._generatedMappings[index2 + 1];
            if (mapping.generatedLine === nextMapping.generatedLine) {
              mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
              continue;
            }
          }
          mapping.lastGeneratedColumn = Infinity;
        }
      };
      BasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util.getArg(aArgs, "line"),
          generatedColumn: util.getArg(aArgs, "column")
        };
        var index2 = this._findMapping(
          needle,
          this._generatedMappings,
          "generatedLine",
          "generatedColumn",
          util.compareByGeneratedPositionsDeflated,
          util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
        );
        if (index2 >= 0) {
          var mapping = this._generatedMappings[index2];
          if (mapping.generatedLine === needle.generatedLine) {
            var source = util.getArg(mapping, "source", null);
            if (source !== null) {
              source = this._sources.at(source);
              source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);
            }
            var name = util.getArg(mapping, "name", null);
            if (name !== null) {
              name = this._names.at(name);
            }
            return {
              source,
              line: util.getArg(mapping, "originalLine", null),
              column: util.getArg(mapping, "originalColumn", null),
              name
            };
          }
        }
        return {
          source: null,
          line: null,
          column: null,
          name: null
        };
      };
      BasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {
        if (!this.sourcesContent) {
          return false;
        }
        return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function(sc) {
          return sc == null;
        });
      };
      BasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        if (!this.sourcesContent) {
          return null;
        }
        var index2 = this._findSourceIndex(aSource);
        if (index2 >= 0) {
          return this.sourcesContent[index2];
        }
        var relativeSource = aSource;
        if (this.sourceRoot != null) {
          relativeSource = util.relative(this.sourceRoot, relativeSource);
        }
        var url;
        if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {
          var fileUriAbsPath = relativeSource.replace(/^file:\/\//, "");
          if (url.scheme == "file" && this._sources.has(fileUriAbsPath)) {
            return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];
          }
          if ((!url.path || url.path == "/") && this._sources.has("/" + relativeSource)) {
            return this.sourcesContent[this._sources.indexOf("/" + relativeSource)];
          }
        }
        if (nullOnMissing) {
          return null;
        } else {
          throw new Error('"' + relativeSource + '" is not in the SourceMap.');
        }
      };
      BasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {
        var source = util.getArg(aArgs, "source");
        source = this._findSourceIndex(source);
        if (source < 0) {
          return {
            line: null,
            column: null,
            lastColumn: null
          };
        }
        var needle = {
          source,
          originalLine: util.getArg(aArgs, "line"),
          originalColumn: util.getArg(aArgs, "column")
        };
        var index2 = this._findMapping(
          needle,
          this._originalMappings,
          "originalLine",
          "originalColumn",
          util.compareByOriginalPositions,
          util.getArg(aArgs, "bias", SourceMapConsumer.GREATEST_LOWER_BOUND)
        );
        if (index2 >= 0) {
          var mapping = this._originalMappings[index2];
          if (mapping.source === needle.source) {
            return {
              line: util.getArg(mapping, "generatedLine", null),
              column: util.getArg(mapping, "generatedColumn", null),
              lastColumn: util.getArg(mapping, "lastGeneratedColumn", null)
            };
          }
        }
        return {
          line: null,
          column: null,
          lastColumn: null
        };
      };
      exports.BasicSourceMapConsumer = BasicSourceMapConsumer;
      function IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {
        var sourceMap = aSourceMap;
        if (typeof aSourceMap === "string") {
          sourceMap = util.parseSourceMapInput(aSourceMap);
        }
        var version2 = util.getArg(sourceMap, "version");
        var sections = util.getArg(sourceMap, "sections");
        if (version2 != this._version) {
          throw new Error("Unsupported version: " + version2);
        }
        this._sources = new ArraySet();
        this._names = new ArraySet();
        var lastOffset = {
          line: -1,
          column: 0
        };
        this._sections = sections.map(function(s2) {
          if (s2.url) {
            throw new Error("Support for url field in sections not implemented.");
          }
          var offset = util.getArg(s2, "offset");
          var offsetLine = util.getArg(offset, "line");
          var offsetColumn = util.getArg(offset, "column");
          if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {
            throw new Error("Section offsets must be ordered and non-overlapping.");
          }
          lastOffset = offset;
          return {
            generatedOffset: {
              // The offset fields are 0-based, but we use 1-based indices when
              // encoding/decoding from VLQ.
              generatedLine: offsetLine + 1,
              generatedColumn: offsetColumn + 1
            },
            consumer: new SourceMapConsumer(util.getArg(s2, "map"), aSourceMapURL)
          };
        });
      }
      IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
      IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;
      IndexedSourceMapConsumer.prototype._version = 3;
      Object.defineProperty(IndexedSourceMapConsumer.prototype, "sources", {
        get: function() {
          var sources = [];
          for (var i2 = 0; i2 < this._sections.length; i2++) {
            for (var j3 = 0; j3 < this._sections[i2].consumer.sources.length; j3++) {
              sources.push(this._sections[i2].consumer.sources[j3]);
            }
          }
          return sources;
        }
      });
      IndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
        var needle = {
          generatedLine: util.getArg(aArgs, "line"),
          generatedColumn: util.getArg(aArgs, "column")
        };
        var sectionIndex = binarySearch.search(
          needle,
          this._sections,
          function(needle2, section2) {
            var cmp = needle2.generatedLine - section2.generatedOffset.generatedLine;
            if (cmp) {
              return cmp;
            }
            return needle2.generatedColumn - section2.generatedOffset.generatedColumn;
          }
        );
        var section = this._sections[sectionIndex];
        if (!section) {
          return {
            source: null,
            line: null,
            column: null,
            name: null
          };
        }
        return section.consumer.originalPositionFor({
          line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),
          column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
          bias: aArgs.bias
        });
      };
      IndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {
        return this._sections.every(function(s2) {
          return s2.consumer.hasContentsOfAllSources();
        });
      };
      IndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
        for (var i2 = 0; i2 < this._sections.length; i2++) {
          var section = this._sections[i2];
          var content15 = section.consumer.sourceContentFor(aSource, true);
          if (content15) {
            return content15;
          }
        }
        if (nullOnMissing) {
          return null;
        } else {
          throw new Error('"' + aSource + '" is not in the SourceMap.');
        }
      };
      IndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
        for (var i2 = 0; i2 < this._sections.length; i2++) {
          var section = this._sections[i2];
          if (section.consumer._findSourceIndex(util.getArg(aArgs, "source")) === -1) {
            continue;
          }
          var generatedPosition = section.consumer.generatedPositionFor(aArgs);
          if (generatedPosition) {
            var ret = {
              line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),
              column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)
            };
            return ret;
          }
        }
        return {
          line: null,
          column: null
        };
      };
      IndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
        this.__generatedMappings = [];
        this.__originalMappings = [];
        for (var i2 = 0; i2 < this._sections.length; i2++) {
          var section = this._sections[i2];
          var sectionMappings = section.consumer._generatedMappings;
          for (var j3 = 0; j3 < sectionMappings.length; j3++) {
            var mapping = sectionMappings[j3];
            var source = section.consumer._sources.at(mapping.source);
            source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);
            this._sources.add(source);
            source = this._sources.indexOf(source);
            var name = null;
            if (mapping.name) {
              name = section.consumer._names.at(mapping.name);
              this._names.add(name);
              name = this._names.indexOf(name);
            }
            var adjustedMapping = {
              source,
              generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),
              generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),
              originalLine: mapping.originalLine,
              originalColumn: mapping.originalColumn,
              name
            };
            this.__generatedMappings.push(adjustedMapping);
            if (typeof adjustedMapping.originalLine === "number") {
              this.__originalMappings.push(adjustedMapping);
            }
          }
        }
        quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
        quickSort(this.__originalMappings, util.compareByOriginalPositions);
      };
      exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
    }
  });

  // ../node_modules/source-map/lib/source-node.js
  var require_source_node = __commonJS({
    "../node_modules/source-map/lib/source-node.js"(exports) {
      var SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
      var util = require_util();
      var REGEX_NEWLINE = /(\r?\n)/;
      var NEWLINE_CODE = 10;
      var isSourceNode = "$$$isSourceNode$$$";
      function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
        this.children = [];
        this.sourceContents = {};
        this.line = aLine == null ? null : aLine;
        this.column = aColumn == null ? null : aColumn;
        this.source = aSource == null ? null : aSource;
        this.name = aName == null ? null : aName;
        this[isSourceNode] = true;
        if (aChunks != null)
          this.add(aChunks);
      }
      SourceNode.fromStringWithSourceMap = function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
        var node4 = new SourceNode();
        var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
        var remainingLinesIndex = 0;
        var shiftNextLine = function() {
          var lineContents = getNextLine();
          var newLine = getNextLine() || "";
          return lineContents + newLine;
          function getNextLine() {
            return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : void 0;
          }
        };
        var lastGeneratedLine = 1, lastGeneratedColumn = 0;
        var lastMapping = null;
        aSourceMapConsumer.eachMapping(function(mapping) {
          if (lastMapping !== null) {
            if (lastGeneratedLine < mapping.generatedLine) {
              addMappingWithCode(lastMapping, shiftNextLine());
              lastGeneratedLine++;
              lastGeneratedColumn = 0;
            } else {
              var nextLine = remainingLines[remainingLinesIndex] || "";
              var code2 = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);
              remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);
              lastGeneratedColumn = mapping.generatedColumn;
              addMappingWithCode(lastMapping, code2);
              lastMapping = mapping;
              return;
            }
          }
          while (lastGeneratedLine < mapping.generatedLine) {
            node4.add(shiftNextLine());
            lastGeneratedLine++;
          }
          if (lastGeneratedColumn < mapping.generatedColumn) {
            var nextLine = remainingLines[remainingLinesIndex] || "";
            node4.add(nextLine.substr(0, mapping.generatedColumn));
            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);
            lastGeneratedColumn = mapping.generatedColumn;
          }
          lastMapping = mapping;
        }, this);
        if (remainingLinesIndex < remainingLines.length) {
          if (lastMapping) {
            addMappingWithCode(lastMapping, shiftNextLine());
          }
          node4.add(remainingLines.splice(remainingLinesIndex).join(""));
        }
        aSourceMapConsumer.sources.forEach(function(sourceFile) {
          var content15 = aSourceMapConsumer.sourceContentFor(sourceFile);
          if (content15 != null) {
            if (aRelativePath != null) {
              sourceFile = util.join(aRelativePath, sourceFile);
            }
            node4.setSourceContent(sourceFile, content15);
          }
        });
        return node4;
        function addMappingWithCode(mapping, code2) {
          if (mapping === null || mapping.source === void 0) {
            node4.add(code2);
          } else {
            var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;
            node4.add(new SourceNode(
              mapping.originalLine,
              mapping.originalColumn,
              source,
              code2,
              mapping.name
            ));
          }
        }
      };
      SourceNode.prototype.add = function SourceNode_add(aChunk) {
        if (Array.isArray(aChunk)) {
          aChunk.forEach(function(chunk) {
            this.add(chunk);
          }, this);
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
          if (aChunk) {
            this.children.push(aChunk);
          }
        } else {
          throw new TypeError(
            "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
          );
        }
        return this;
      };
      SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
        if (Array.isArray(aChunk)) {
          for (var i2 = aChunk.length - 1; i2 >= 0; i2--) {
            this.prepend(aChunk[i2]);
          }
        } else if (aChunk[isSourceNode] || typeof aChunk === "string") {
          this.children.unshift(aChunk);
        } else {
          throw new TypeError(
            "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
          );
        }
        return this;
      };
      SourceNode.prototype.walk = function SourceNode_walk(aFn) {
        var chunk;
        for (var i2 = 0, len = this.children.length; i2 < len; i2++) {
          chunk = this.children[i2];
          if (chunk[isSourceNode]) {
            chunk.walk(aFn);
          } else {
            if (chunk !== "") {
              aFn(chunk, {
                source: this.source,
                line: this.line,
                column: this.column,
                name: this.name
              });
            }
          }
        }
      };
      SourceNode.prototype.join = function SourceNode_join(aSep) {
        var newChildren;
        var i2;
        var len = this.children.length;
        if (len > 0) {
          newChildren = [];
          for (i2 = 0; i2 < len - 1; i2++) {
            newChildren.push(this.children[i2]);
            newChildren.push(aSep);
          }
          newChildren.push(this.children[i2]);
          this.children = newChildren;
        }
        return this;
      };
      SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
        var lastChild = this.children[this.children.length - 1];
        if (lastChild[isSourceNode]) {
          lastChild.replaceRight(aPattern, aReplacement);
        } else if (typeof lastChild === "string") {
          this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
        } else {
          this.children.push("".replace(aPattern, aReplacement));
        }
        return this;
      };
      SourceNode.prototype.setSourceContent = function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
        this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
      };
      SourceNode.prototype.walkSourceContents = function SourceNode_walkSourceContents(aFn) {
        for (var i2 = 0, len = this.children.length; i2 < len; i2++) {
          if (this.children[i2][isSourceNode]) {
            this.children[i2].walkSourceContents(aFn);
          }
        }
        var sources = Object.keys(this.sourceContents);
        for (var i2 = 0, len = sources.length; i2 < len; i2++) {
          aFn(util.fromSetString(sources[i2]), this.sourceContents[sources[i2]]);
        }
      };
      SourceNode.prototype.toString = function SourceNode_toString() {
        var str = "";
        this.walk(function(chunk) {
          str += chunk;
        });
        return str;
      };
      SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
        var generated2 = {
          code: "",
          line: 1,
          column: 0
        };
        var map = new SourceMapGenerator(aArgs);
        var sourceMappingActive = false;
        var lastOriginalSource = null;
        var lastOriginalLine = null;
        var lastOriginalColumn = null;
        var lastOriginalName = null;
        this.walk(function(chunk, original) {
          generated2.code += chunk;
          if (original.source !== null && original.line !== null && original.column !== null) {
            if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {
              map.addMapping({
                source: original.source,
                original: {
                  line: original.line,
                  column: original.column
                },
                generated: {
                  line: generated2.line,
                  column: generated2.column
                },
                name: original.name
              });
            }
            lastOriginalSource = original.source;
            lastOriginalLine = original.line;
            lastOriginalColumn = original.column;
            lastOriginalName = original.name;
            sourceMappingActive = true;
          } else if (sourceMappingActive) {
            map.addMapping({
              generated: {
                line: generated2.line,
                column: generated2.column
              }
            });
            lastOriginalSource = null;
            sourceMappingActive = false;
          }
          for (var idx = 0, length2 = chunk.length; idx < length2; idx++) {
            if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
              generated2.line++;
              generated2.column = 0;
              if (idx + 1 === length2) {
                lastOriginalSource = null;
                sourceMappingActive = false;
              } else if (sourceMappingActive) {
                map.addMapping({
                  source: original.source,
                  original: {
                    line: original.line,
                    column: original.column
                  },
                  generated: {
                    line: generated2.line,
                    column: generated2.column
                  },
                  name: original.name
                });
              }
            } else {
              generated2.column++;
            }
          }
        });
        this.walkSourceContents(function(sourceFile, sourceContent) {
          map.setSourceContent(sourceFile, sourceContent);
        });
        return { code: generated2.code, map };
      };
      exports.SourceNode = SourceNode;
    }
  });

  // ../node_modules/source-map/source-map.js
  var require_source_map = __commonJS({
    "../node_modules/source-map/source-map.js"(exports) {
      exports.SourceMapGenerator = require_source_map_generator().SourceMapGenerator;
      exports.SourceMapConsumer = require_source_map_consumer().SourceMapConsumer;
      exports.SourceNode = require_source_node().SourceNode;
    }
  });

  // node-modules-polyfills:path
  var path_exports = {};
  __export(path_exports, {
    basename: () => basename2,
    default: () => path_default,
    delimiter: () => delimiter2,
    dirname: () => dirname2,
    extname: () => extname2,
    isAbsolute: () => isAbsolute,
    join: () => join2,
    normalize: () => normalize5,
    relative: () => relative,
    resolve: () => resolve,
    sep: () => sep
  });
  function normalizeArray(parts, allowAboveRoot) {
    var up = 0;
    for (var i2 = parts.length - 1; i2 >= 0; i2--) {
      var last = parts[i2];
      if (last === ".") {
        parts.splice(i2, 1);
      } else if (last === "..") {
        parts.splice(i2, 1);
        up++;
      } else if (up) {
        parts.splice(i2, 1);
        up--;
      }
    }
    if (allowAboveRoot) {
      for (; up--; up) {
        parts.unshift("..");
      }
    }
    return parts;
  }
  function resolve() {
    var resolvedPath = "", resolvedAbsolute = false;
    for (var i2 = arguments.length - 1; i2 >= -1 && !resolvedAbsolute; i2--) {
      var path2 = i2 >= 0 ? arguments[i2] : "/";
      if (typeof path2 !== "string") {
        throw new TypeError("Arguments to path.resolve must be strings");
      } else if (!path2) {
        continue;
      }
      resolvedPath = path2 + "/" + resolvedPath;
      resolvedAbsolute = path2.charAt(0) === "/";
    }
    resolvedPath = normalizeArray(filter(resolvedPath.split("/"), function(p2) {
      return !!p2;
    }), !resolvedAbsolute).join("/");
    return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
  }
  function normalize5(path2) {
    var isPathAbsolute = isAbsolute(path2), trailingSlash = substr2(path2, -1) === "/";
    path2 = normalizeArray(filter(path2.split("/"), function(p2) {
      return !!p2;
    }), !isPathAbsolute).join("/");
    if (!path2 && !isPathAbsolute) {
      path2 = ".";
    }
    if (path2 && trailingSlash) {
      path2 += "/";
    }
    return (isPathAbsolute ? "/" : "") + path2;
  }
  function isAbsolute(path2) {
    return path2.charAt(0) === "/";
  }
  function join2() {
    var paths = Array.prototype.slice.call(arguments, 0);
    return normalize5(filter(paths, function(p2, index2) {
      if (typeof p2 !== "string") {
        throw new TypeError("Arguments to path.join must be strings");
      }
      return p2;
    }).join("/"));
  }
  function relative(from2, to) {
    from2 = resolve(from2).substr(1);
    to = resolve(to).substr(1);
    function trim2(arr) {
      var start2 = 0;
      for (; start2 < arr.length; start2++) {
        if (arr[start2] !== "")
          break;
      }
      var end2 = arr.length - 1;
      for (; end2 >= 0; end2--) {
        if (arr[end2] !== "")
          break;
      }
      if (start2 > end2)
        return [];
      return arr.slice(start2, end2 - start2 + 1);
    }
    var fromParts = trim2(from2.split("/"));
    var toParts = trim2(to.split("/"));
    var length2 = Math.min(fromParts.length, toParts.length);
    var samePartsLength = length2;
    for (var i2 = 0; i2 < length2; i2++) {
      if (fromParts[i2] !== toParts[i2]) {
        samePartsLength = i2;
        break;
      }
    }
    var outputParts = [];
    for (var i2 = samePartsLength; i2 < fromParts.length; i2++) {
      outputParts.push("..");
    }
    outputParts = outputParts.concat(toParts.slice(samePartsLength));
    return outputParts.join("/");
  }
  function dirname2(path2) {
    var result = splitPath(path2), root151 = result[0], dir = result[1];
    if (!root151 && !dir) {
      return ".";
    }
    if (dir) {
      dir = dir.substr(0, dir.length - 1);
    }
    return root151 + dir;
  }
  function basename2(path2, ext) {
    var f3 = splitPath(path2)[2];
    if (ext && f3.substr(-1 * ext.length) === ext) {
      f3 = f3.substr(0, f3.length - ext.length);
    }
    return f3;
  }
  function extname2(path2) {
    return splitPath(path2)[3];
  }
  function filter(xs, f3) {
    if (xs.filter)
      return xs.filter(f3);
    var res = [];
    for (var i2 = 0; i2 < xs.length; i2++) {
      if (f3(xs[i2], i2, xs))
        res.push(xs[i2]);
    }
    return res;
  }
  var splitPathRe, splitPath, sep, delimiter2, path_default, substr2;
  var init_path = __esm({
    "node-modules-polyfills:path"() {
      splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
      splitPath = function(filename) {
        return splitPathRe.exec(filename).slice(1);
      };
      sep = "/";
      delimiter2 = ":";
      path_default = {
        extname: extname2,
        basename: basename2,
        dirname: dirname2,
        sep,
        delimiter: delimiter2,
        relative,
        join: join2,
        isAbsolute,
        normalize: normalize5,
        resolve
      };
      substr2 = "ab".substr(-1) === "b" ? function(str, start2, len) {
        return str.substr(start2, len);
      } : function(str, start2, len) {
        if (start2 < 0)
          start2 = str.length + start2;
        return str.substr(start2, len);
      };
    }
  });

  // node-modules-polyfills-commonjs:path
  var require_path = __commonJS({
    "node-modules-polyfills-commonjs:path"(exports, module) {
      var polyfill = (init_path(), __toCommonJS(path_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // node-modules-polyfills:fs
  var fs_exports = {};
  __export(fs_exports, {
    default: () => fs_default
  });
  var fs_default;
  var init_fs = __esm({
    "node-modules-polyfills:fs"() {
      fs_default = {};
    }
  });

  // node-modules-polyfills-commonjs:fs
  var require_fs = __commonJS({
    "node-modules-polyfills-commonjs:fs"(exports, module) {
      var polyfill = (init_fs(), __toCommonJS(fs_exports));
      if (polyfill && polyfill.default) {
        module.exports = polyfill.default;
        for (let k in polyfill) {
          module.exports[k] = polyfill[k];
        }
      } else if (polyfill) {
        module.exports = polyfill;
      }
    }
  });

  // ../node_modules/buffer-from/index.js
  var require_buffer_from = __commonJS({
    "../node_modules/buffer-from/index.js"(exports, module) {
      var toString2 = Object.prototype.toString;
      var isModern = typeof Buffer !== "undefined" && typeof Buffer.alloc === "function" && typeof Buffer.allocUnsafe === "function" && typeof Buffer.from === "function";
      function isArrayBuffer(input4) {
        return toString2.call(input4).slice(8, -1) === "ArrayBuffer";
      }
      function fromArrayBuffer(obj, byteOffset, length2) {
        byteOffset >>>= 0;
        var maxLength = obj.byteLength - byteOffset;
        if (maxLength < 0) {
          throw new RangeError("'offset' is out of bounds");
        }
        if (length2 === void 0) {
          length2 = maxLength;
        } else {
          length2 >>>= 0;
          if (length2 > maxLength) {
            throw new RangeError("'length' is out of bounds");
          }
        }
        return isModern ? Buffer.from(obj.slice(byteOffset, byteOffset + length2)) : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length2)));
      }
      function fromString(string4, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer.isEncoding(encoding)) {
          throw new TypeError('"encoding" must be a valid string encoding');
        }
        return isModern ? Buffer.from(string4, encoding) : new Buffer(string4, encoding);
      }
      function bufferFrom(value, encodingOrOffset, length2) {
        if (typeof value === "number") {
          throw new TypeError('"value" argument must not be a number');
        }
        if (isArrayBuffer(value)) {
          return fromArrayBuffer(value, encodingOrOffset, length2);
        }
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        return isModern ? Buffer.from(value) : new Buffer(value);
      }
      module.exports = bufferFrom;
    }
  });

  // ../node_modules/source-map-support/source-map-support.js
  var require_source_map_support = __commonJS({
    "../node_modules/source-map-support/source-map-support.js"(exports, module) {
      var SourceMapConsumer = require_source_map().SourceMapConsumer;
      var path2 = require_path();
      var fs;
      try {
        fs = require_fs();
        if (!fs.existsSync || !fs.readFileSync) {
          fs = null;
        }
      } catch (err) {
      }
      var bufferFrom = require_buffer_from();
      function dynamicRequire(mod, request) {
        return mod.require(request);
      }
      var errorFormatterInstalled = false;
      var uncaughtShimInstalled = false;
      var emptyCacheBetweenOperations = false;
      var environment = "auto";
      var fileContentsCache = {};
      var sourceMapCache = {};
      var reSourceMap = /^data:application\/json[^,]+base64,/;
      var retrieveFileHandlers = [];
      var retrieveMapHandlers = [];
      function isInBrowser() {
        if (environment === "browser")
          return true;
        if (environment === "node")
          return false;
        return typeof window !== "undefined" && typeof XMLHttpRequest === "function" && !(window.require && window.module && window.process && window.process.type === "renderer");
      }
      function hasGlobalProcessEventEmitter() {
        return typeof process === "object" && process !== null && typeof process.on === "function";
      }
      function globalProcessVersion() {
        if (typeof process === "object" && process !== null) {
          return process.version;
        } else {
          return "";
        }
      }
      function globalProcessStderr() {
        if (typeof process === "object" && process !== null) {
          return process.stderr;
        }
      }
      function globalProcessExit(code2) {
        if (typeof process === "object" && process !== null && typeof process.exit === "function") {
          return process.exit(code2);
        }
      }
      function handlerExec(list4) {
        return function(arg) {
          for (var i2 = 0; i2 < list4.length; i2++) {
            var ret = list4[i2](arg);
            if (ret) {
              return ret;
            }
          }
          return null;
        };
      }
      var retrieveFile = handlerExec(retrieveFileHandlers);
      retrieveFileHandlers.push(function(path3) {
        path3 = path3.trim();
        if (/^file:/.test(path3)) {
          path3 = path3.replace(/file:\/\/\/(\w:)?/, function(protocol, drive) {
            return drive ? "" : (
              // file:///C:/dir/file -> C:/dir/file
              "/"
            );
          });
        }
        if (path3 in fileContentsCache) {
          return fileContentsCache[path3];
        }
        var contents = "";
        try {
          if (!fs) {
            var xhr = new XMLHttpRequest();
            xhr.open(
              "GET",
              path3,
              /** async */
              false
            );
            xhr.send(null);
            if (xhr.readyState === 4 && xhr.status === 200) {
              contents = xhr.responseText;
            }
          } else if (fs.existsSync(path3)) {
            contents = fs.readFileSync(path3, "utf8");
          }
        } catch (er) {
        }
        return fileContentsCache[path3] = contents;
      });
      function supportRelativeURL(file, url) {
        if (!file)
          return url;
        var dir = path2.dirname(file);
        var match2 = /^\w+:\/\/[^\/]*/.exec(dir);
        var protocol = match2 ? match2[0] : "";
        var startPath = dir.slice(protocol.length);
        if (protocol && /^\/\w\:/.test(startPath)) {
          protocol += "/";
          return protocol + path2.resolve(dir.slice(protocol.length), url).replace(/\\/g, "/");
        }
        return protocol + path2.resolve(dir.slice(protocol.length), url);
      }
      function retrieveSourceMapURL(source) {
        var fileData;
        if (isInBrowser()) {
          try {
            var xhr = new XMLHttpRequest();
            xhr.open("GET", source, false);
            xhr.send(null);
            fileData = xhr.readyState === 4 ? xhr.responseText : null;
            var sourceMapHeader = xhr.getResponseHeader("SourceMap") || xhr.getResponseHeader("X-SourceMap");
            if (sourceMapHeader) {
              return sourceMapHeader;
            }
          } catch (e2) {
          }
        }
        fileData = retrieveFile(source);
        var re2 = /(?:\/\/[@#][\s]*sourceMappingURL=([^\s'"]+)[\s]*$)|(?:\/\*[@#][\s]*sourceMappingURL=([^\s*'"]+)[\s]*(?:\*\/)[\s]*$)/mg;
        var lastMatch, match2;
        while (match2 = re2.exec(fileData))
          lastMatch = match2;
        if (!lastMatch)
          return null;
        return lastMatch[1];
      }
      var retrieveSourceMap = handlerExec(retrieveMapHandlers);
      retrieveMapHandlers.push(function(source) {
        var sourceMappingURL = retrieveSourceMapURL(source);
        if (!sourceMappingURL)
          return null;
        var sourceMapData;
        if (reSourceMap.test(sourceMappingURL)) {
          var rawData = sourceMappingURL.slice(sourceMappingURL.indexOf(",") + 1);
          sourceMapData = bufferFrom(rawData, "base64").toString();
          sourceMappingURL = source;
        } else {
          sourceMappingURL = supportRelativeURL(source, sourceMappingURL);
          sourceMapData = retrieveFile(sourceMappingURL);
        }
        if (!sourceMapData) {
          return null;
        }
        return {
          url: sourceMappingURL,
          map: sourceMapData
        };
      });
      function mapSourcePosition(position4) {
        var sourceMap = sourceMapCache[position4.source];
        if (!sourceMap) {
          var urlAndMap = retrieveSourceMap(position4.source);
          if (urlAndMap) {
            sourceMap = sourceMapCache[position4.source] = {
              url: urlAndMap.url,
              map: new SourceMapConsumer(urlAndMap.map)
            };
            if (sourceMap.map.sourcesContent) {
              sourceMap.map.sources.forEach(function(source, i2) {
                var contents = sourceMap.map.sourcesContent[i2];
                if (contents) {
                  var url = supportRelativeURL(sourceMap.url, source);
                  fileContentsCache[url] = contents;
                }
              });
            }
          } else {
            sourceMap = sourceMapCache[position4.source] = {
              url: null,
              map: null
            };
          }
        }
        if (sourceMap && sourceMap.map && typeof sourceMap.map.originalPositionFor === "function") {
          var originalPosition = sourceMap.map.originalPositionFor(position4);
          if (originalPosition.source !== null) {
            originalPosition.source = supportRelativeURL(
              sourceMap.url,
              originalPosition.source
            );
            return originalPosition;
          }
        }
        return position4;
      }
      function mapEvalOrigin(origin) {
        var match2 = /^eval at ([^(]+) \((.+):(\d+):(\d+)\)$/.exec(origin);
        if (match2) {
          var position4 = mapSourcePosition({
            source: match2[2],
            line: +match2[3],
            column: match2[4] - 1
          });
          return "eval at " + match2[1] + " (" + position4.source + ":" + position4.line + ":" + (position4.column + 1) + ")";
        }
        match2 = /^eval at ([^(]+) \((.+)\)$/.exec(origin);
        if (match2) {
          return "eval at " + match2[1] + " (" + mapEvalOrigin(match2[2]) + ")";
        }
        return origin;
      }
      function CallSiteToString() {
        var fileName;
        var fileLocation = "";
        if (this.isNative()) {
          fileLocation = "native";
        } else {
          fileName = this.getScriptNameOrSourceURL();
          if (!fileName && this.isEval()) {
            fileLocation = this.getEvalOrigin();
            fileLocation += ", ";
          }
          if (fileName) {
            fileLocation += fileName;
          } else {
            fileLocation += "<anonymous>";
          }
          var lineNumber = this.getLineNumber();
          if (lineNumber != null) {
            fileLocation += ":" + lineNumber;
            var columnNumber = this.getColumnNumber();
            if (columnNumber) {
              fileLocation += ":" + columnNumber;
            }
          }
        }
        var line2 = "";
        var functionName = this.getFunctionName();
        var addSuffix = true;
        var isConstructor = this.isConstructor();
        var isMethodCall = !(this.isToplevel() || isConstructor);
        if (isMethodCall) {
          var typeName = this.getTypeName();
          if (typeName === "[object Object]") {
            typeName = "null";
          }
          var methodName = this.getMethodName();
          if (functionName) {
            if (typeName && functionName.indexOf(typeName) != 0) {
              line2 += typeName + ".";
            }
            line2 += functionName;
            if (methodName && functionName.indexOf("." + methodName) != functionName.length - methodName.length - 1) {
              line2 += " [as " + methodName + "]";
            }
          } else {
            line2 += typeName + "." + (methodName || "<anonymous>");
          }
        } else if (isConstructor) {
          line2 += "new " + (functionName || "<anonymous>");
        } else if (functionName) {
          line2 += functionName;
        } else {
          line2 += fileLocation;
          addSuffix = false;
        }
        if (addSuffix) {
          line2 += " (" + fileLocation + ")";
        }
        return line2;
      }
      function cloneCallSite(frame) {
        var object2 = {};
        Object.getOwnPropertyNames(Object.getPrototypeOf(frame)).forEach(function(name) {
          object2[name] = /^(?:is|get)/.test(name) ? function() {
            return frame[name].call(frame);
          } : frame[name];
        });
        object2.toString = CallSiteToString;
        return object2;
      }
      function wrapCallSite(frame, state) {
        if (state === void 0) {
          state = { nextPosition: null, curPosition: null };
        }
        if (frame.isNative()) {
          state.curPosition = null;
          return frame;
        }
        var source = frame.getFileName() || frame.getScriptNameOrSourceURL();
        if (source) {
          var line2 = frame.getLineNumber();
          var column2 = frame.getColumnNumber() - 1;
          var noHeader = /^v(10\.1[6-9]|10\.[2-9][0-9]|10\.[0-9]{3,}|1[2-9]\d*|[2-9]\d|\d{3,}|11\.11)/;
          var headerLength = noHeader.test(globalProcessVersion()) ? 0 : 62;
          if (line2 === 1 && column2 > headerLength && !isInBrowser() && !frame.isEval()) {
            column2 -= headerLength;
          }
          var position4 = mapSourcePosition({
            source,
            line: line2,
            column: column2
          });
          state.curPosition = position4;
          frame = cloneCallSite(frame);
          var originalFunctionName = frame.getFunctionName;
          frame.getFunctionName = function() {
            if (state.nextPosition == null) {
              return originalFunctionName();
            }
            return state.nextPosition.name || originalFunctionName();
          };
          frame.getFileName = function() {
            return position4.source;
          };
          frame.getLineNumber = function() {
            return position4.line;
          };
          frame.getColumnNumber = function() {
            return position4.column + 1;
          };
          frame.getScriptNameOrSourceURL = function() {
            return position4.source;
          };
          return frame;
        }
        var origin = frame.isEval() && frame.getEvalOrigin();
        if (origin) {
          origin = mapEvalOrigin(origin);
          frame = cloneCallSite(frame);
          frame.getEvalOrigin = function() {
            return origin;
          };
          return frame;
        }
        return frame;
      }
      function prepareStackTrace(error, stack) {
        if (emptyCacheBetweenOperations) {
          fileContentsCache = {};
          sourceMapCache = {};
        }
        var name = error.name || "Error";
        var message5 = error.message || "";
        var errorString = name + ": " + message5;
        var state = { nextPosition: null, curPosition: null };
        var processedStack = [];
        for (var i2 = stack.length - 1; i2 >= 0; i2--) {
          processedStack.push("\n    at " + wrapCallSite(stack[i2], state));
          state.nextPosition = state.curPosition;
        }
        state.curPosition = state.nextPosition = null;
        return errorString + processedStack.reverse().join("");
      }
      function getErrorSource(error) {
        var match2 = /\n    at [^(]+ \((.*):(\d+):(\d+)\)/.exec(error.stack);
        if (match2) {
          var source = match2[1];
          var line2 = +match2[2];
          var column2 = +match2[3];
          var contents = fileContentsCache[source];
          if (!contents && fs && fs.existsSync(source)) {
            try {
              contents = fs.readFileSync(source, "utf8");
            } catch (er) {
              contents = "";
            }
          }
          if (contents) {
            var code2 = contents.split(/(?:\r\n|\r|\n)/)[line2 - 1];
            if (code2) {
              return source + ":" + line2 + "\n" + code2 + "\n" + new Array(column2).join(" ") + "^";
            }
          }
        }
        return null;
      }
      function printErrorAndExit(error) {
        var source = getErrorSource(error);
        var stderr = globalProcessStderr();
        if (stderr && stderr._handle && stderr._handle.setBlocking) {
          stderr._handle.setBlocking(true);
        }
        if (source) {
          console.error();
          console.error(source);
        }
        console.error(error.stack);
        globalProcessExit(1);
      }
      function shimEmitUncaughtException() {
        var origEmit = process.emit;
        process.emit = function(type) {
          if (type === "uncaughtException") {
            var hasStack = arguments[1] && arguments[1].stack;
            var hasListeners = this.listeners(type).length > 0;
            if (hasStack && !hasListeners) {
              return printErrorAndExit(arguments[1]);
            }
          }
          return origEmit.apply(this, arguments);
        };
      }
      var originalRetrieveFileHandlers = retrieveFileHandlers.slice(0);
      var originalRetrieveMapHandlers = retrieveMapHandlers.slice(0);
      exports.wrapCallSite = wrapCallSite;
      exports.getErrorSource = getErrorSource;
      exports.mapSourcePosition = mapSourcePosition;
      exports.retrieveSourceMap = retrieveSourceMap;
      exports.install = function(options) {
        options = options || {};
        if (options.environment) {
          environment = options.environment;
          if (["node", "browser", "auto"].indexOf(environment) === -1) {
            throw new Error("environment " + environment + " was unknown. Available options are {auto, browser, node}");
          }
        }
        if (options.retrieveFile) {
          if (options.overrideRetrieveFile) {
            retrieveFileHandlers.length = 0;
          }
          retrieveFileHandlers.unshift(options.retrieveFile);
        }
        if (options.retrieveSourceMap) {
          if (options.overrideRetrieveSourceMap) {
            retrieveMapHandlers.length = 0;
          }
          retrieveMapHandlers.unshift(options.retrieveSourceMap);
        }
        if (options.hookRequire && !isInBrowser()) {
          var Module = dynamicRequire(module, "module");
          var $compile = Module.prototype._compile;
          if (!$compile.__sourceMapSupport) {
            Module.prototype._compile = function(content15, filename) {
              fileContentsCache[filename] = content15;
              sourceMapCache[filename] = void 0;
              return $compile.call(this, content15, filename);
            };
            Module.prototype._compile.__sourceMapSupport = true;
          }
        }
        if (!emptyCacheBetweenOperations) {
          emptyCacheBetweenOperations = "emptyCacheBetweenOperations" in options ? options.emptyCacheBetweenOperations : false;
        }
        if (!errorFormatterInstalled) {
          errorFormatterInstalled = true;
          Error.prepareStackTrace = prepareStackTrace;
        }
        if (!uncaughtShimInstalled) {
          var installHandler = "handleUncaughtExceptions" in options ? options.handleUncaughtExceptions : true;
          try {
            var worker_threads = dynamicRequire(module, "worker_threads");
            if (worker_threads.isMainThread === false) {
              installHandler = false;
            }
          } catch (e2) {
          }
          if (installHandler && hasGlobalProcessEventEmitter()) {
            uncaughtShimInstalled = true;
            shimEmitUncaughtException();
          }
        }
      };
      exports.resetRetrieveHandlers = function() {
        retrieveFileHandlers.length = 0;
        retrieveMapHandlers.length = 0;
        retrieveFileHandlers = originalRetrieveFileHandlers.slice(0);
        retrieveMapHandlers = originalRetrieveMapHandlers.slice(0);
        retrieveSourceMap = handlerExec(retrieveMapHandlers);
        retrieveFile = handlerExec(retrieveFileHandlers);
      };
    }
  });

  // ../node_modules/lodash/isArray.js
  var require_isArray = __commonJS({
    "../node_modules/lodash/isArray.js"(exports, module) {
      var isArray = Array.isArray;
      module.exports = isArray;
    }
  });

  // ../node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS({
    "../node_modules/lodash/_listCacheClear.js"(exports, module) {
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }
      module.exports = listCacheClear;
    }
  });

  // ../node_modules/lodash/eq.js
  var require_eq = __commonJS({
    "../node_modules/lodash/eq.js"(exports, module) {
      function eq(value, other) {
        return value === other || value !== value && other !== other;
      }
      module.exports = eq;
    }
  });

  // ../node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS({
    "../node_modules/lodash/_assocIndexOf.js"(exports, module) {
      var eq = require_eq();
      function assocIndexOf(array2, key) {
        var length2 = array2.length;
        while (length2--) {
          if (eq(array2[length2][0], key)) {
            return length2;
          }
        }
        return -1;
      }
      module.exports = assocIndexOf;
    }
  });

  // ../node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS({
    "../node_modules/lodash/_listCacheDelete.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      var arrayProto = Array.prototype;
      var splice2 = arrayProto.splice;
      function listCacheDelete(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          return false;
        }
        var lastIndex2 = data.length - 1;
        if (index2 == lastIndex2) {
          data.pop();
        } else {
          splice2.call(data, index2, 1);
        }
        --this.size;
        return true;
      }
      module.exports = listCacheDelete;
    }
  });

  // ../node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS({
    "../node_modules/lodash/_listCacheGet.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheGet(key) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        return index2 < 0 ? void 0 : data[index2][1];
      }
      module.exports = listCacheGet;
    }
  });

  // ../node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS({
    "../node_modules/lodash/_listCacheHas.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }
      module.exports = listCacheHas;
    }
  });

  // ../node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS({
    "../node_modules/lodash/_listCacheSet.js"(exports, module) {
      var assocIndexOf = require_assocIndexOf();
      function listCacheSet(key, value) {
        var data = this.__data__, index2 = assocIndexOf(data, key);
        if (index2 < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index2][1] = value;
        }
        return this;
      }
      module.exports = listCacheSet;
    }
  });

  // ../node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS({
    "../node_modules/lodash/_ListCache.js"(exports, module) {
      var listCacheClear = require_listCacheClear();
      var listCacheDelete = require_listCacheDelete();
      var listCacheGet = require_listCacheGet();
      var listCacheHas = require_listCacheHas();
      var listCacheSet = require_listCacheSet();
      function ListCache(entries) {
        var index2 = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length2) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype["delete"] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;
      module.exports = ListCache;
    }
  });

  // ../node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS({
    "../node_modules/lodash/_stackClear.js"(exports, module) {
      var ListCache = require_ListCache();
      function stackClear() {
        this.__data__ = new ListCache();
        this.size = 0;
      }
      module.exports = stackClear;
    }
  });

  // ../node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS({
    "../node_modules/lodash/_stackDelete.js"(exports, module) {
      function stackDelete(key) {
        var data = this.__data__, result = data["delete"](key);
        this.size = data.size;
        return result;
      }
      module.exports = stackDelete;
    }
  });

  // ../node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS({
    "../node_modules/lodash/_stackGet.js"(exports, module) {
      function stackGet(key) {
        return this.__data__.get(key);
      }
      module.exports = stackGet;
    }
  });

  // ../node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS({
    "../node_modules/lodash/_stackHas.js"(exports, module) {
      function stackHas(key) {
        return this.__data__.has(key);
      }
      module.exports = stackHas;
    }
  });

  // ../node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS({
    "../node_modules/lodash/isFunction.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObject6 = require_isObject();
      var asyncTag = "[object AsyncFunction]";
      var funcTag = "[object Function]";
      var genTag = "[object GeneratorFunction]";
      var proxyTag = "[object Proxy]";
      function isFunction2(value) {
        if (!isObject6(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }
      module.exports = isFunction2;
    }
  });

  // ../node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS({
    "../node_modules/lodash/_coreJsData.js"(exports, module) {
      var root151 = require_root();
      var coreJsData = root151["__core-js_shared__"];
      module.exports = coreJsData;
    }
  });

  // ../node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS({
    "../node_modules/lodash/_isMasked.js"(exports, module) {
      var coreJsData = require_coreJsData();
      var maskSrcKey = function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
        return uid ? "Symbol(src)_1." + uid : "";
      }();
      function isMasked(func3) {
        return !!maskSrcKey && maskSrcKey in func3;
      }
      module.exports = isMasked;
    }
  });

  // ../node_modules/lodash/_toSource.js
  var require_toSource = __commonJS({
    "../node_modules/lodash/_toSource.js"(exports, module) {
      var funcProto = Function.prototype;
      var funcToString = funcProto.toString;
      function toSource(func3) {
        if (func3 != null) {
          try {
            return funcToString.call(func3);
          } catch (e2) {
          }
          try {
            return func3 + "";
          } catch (e2) {
          }
        }
        return "";
      }
      module.exports = toSource;
    }
  });

  // ../node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS({
    "../node_modules/lodash/_baseIsNative.js"(exports, module) {
      var isFunction2 = require_isFunction();
      var isMasked = require_isMasked();
      var isObject6 = require_isObject();
      var toSource = require_toSource();
      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
      var reIsHostCtor = /^\[object .+?Constructor\]$/;
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var reIsNative = RegExp(
        "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      );
      function baseIsNative(value) {
        if (!isObject6(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }
      module.exports = baseIsNative;
    }
  });

  // ../node_modules/lodash/_getValue.js
  var require_getValue = __commonJS({
    "../node_modules/lodash/_getValue.js"(exports, module) {
      function getValue(object2, key) {
        return object2 == null ? void 0 : object2[key];
      }
      module.exports = getValue;
    }
  });

  // ../node_modules/lodash/_getNative.js
  var require_getNative = __commonJS({
    "../node_modules/lodash/_getNative.js"(exports, module) {
      var baseIsNative = require_baseIsNative();
      var getValue = require_getValue();
      function getNative(object2, key) {
        var value = getValue(object2, key);
        return baseIsNative(value) ? value : void 0;
      }
      module.exports = getNative;
    }
  });

  // ../node_modules/lodash/_Map.js
  var require_Map = __commonJS({
    "../node_modules/lodash/_Map.js"(exports, module) {
      var getNative = require_getNative();
      var root151 = require_root();
      var Map2 = getNative(root151, "Map");
      module.exports = Map2;
    }
  });

  // ../node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS({
    "../node_modules/lodash/_nativeCreate.js"(exports, module) {
      var getNative = require_getNative();
      var nativeCreate = getNative(Object, "create");
      module.exports = nativeCreate;
    }
  });

  // ../node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS({
    "../node_modules/lodash/_hashClear.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }
      module.exports = hashClear;
    }
  });

  // ../node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS({
    "../node_modules/lodash/_hashDelete.js"(exports, module) {
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }
      module.exports = hashDelete;
    }
  });

  // ../node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS({
    "../node_modules/lodash/_hashGet.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? void 0 : result;
        }
        return hasOwnProperty2.call(data, key) ? data[key] : void 0;
      }
      module.exports = hashGet;
    }
  });

  // ../node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS({
    "../node_modules/lodash/_hashHas.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? data[key] !== void 0 : hasOwnProperty2.call(data, key);
      }
      module.exports = hashHas;
    }
  });

  // ../node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS({
    "../node_modules/lodash/_hashSet.js"(exports, module) {
      var nativeCreate = require_nativeCreate();
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
        return this;
      }
      module.exports = hashSet;
    }
  });

  // ../node_modules/lodash/_Hash.js
  var require_Hash = __commonJS({
    "../node_modules/lodash/_Hash.js"(exports, module) {
      var hashClear = require_hashClear();
      var hashDelete = require_hashDelete();
      var hashGet = require_hashGet();
      var hashHas = require_hashHas();
      var hashSet = require_hashSet();
      function Hash(entries) {
        var index2 = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length2) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      Hash.prototype.clear = hashClear;
      Hash.prototype["delete"] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;
      module.exports = Hash;
    }
  });

  // ../node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS({
    "../node_modules/lodash/_mapCacheClear.js"(exports, module) {
      var Hash = require_Hash();
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          "hash": new Hash(),
          "map": new (Map2 || ListCache)(),
          "string": new Hash()
        };
      }
      module.exports = mapCacheClear;
    }
  });

  // ../node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS({
    "../node_modules/lodash/_isKeyable.js"(exports, module) {
      function isKeyable(value) {
        var type = typeof value;
        return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
      }
      module.exports = isKeyable;
    }
  });

  // ../node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS({
    "../node_modules/lodash/_getMapData.js"(exports, module) {
      var isKeyable = require_isKeyable();
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
      }
      module.exports = getMapData;
    }
  });

  // ../node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS({
    "../node_modules/lodash/_mapCacheDelete.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheDelete(key) {
        var result = getMapData(this, key)["delete"](key);
        this.size -= result ? 1 : 0;
        return result;
      }
      module.exports = mapCacheDelete;
    }
  });

  // ../node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS({
    "../node_modules/lodash/_mapCacheGet.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }
      module.exports = mapCacheGet;
    }
  });

  // ../node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS({
    "../node_modules/lodash/_mapCacheHas.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }
      module.exports = mapCacheHas;
    }
  });

  // ../node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS({
    "../node_modules/lodash/_mapCacheSet.js"(exports, module) {
      var getMapData = require_getMapData();
      function mapCacheSet(key, value) {
        var data = getMapData(this, key), size = data.size;
        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }
      module.exports = mapCacheSet;
    }
  });

  // ../node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS({
    "../node_modules/lodash/_MapCache.js"(exports, module) {
      var mapCacheClear = require_mapCacheClear();
      var mapCacheDelete = require_mapCacheDelete();
      var mapCacheGet = require_mapCacheGet();
      var mapCacheHas = require_mapCacheHas();
      var mapCacheSet = require_mapCacheSet();
      function MapCache(entries) {
        var index2 = -1, length2 = entries == null ? 0 : entries.length;
        this.clear();
        while (++index2 < length2) {
          var entry = entries[index2];
          this.set(entry[0], entry[1]);
        }
      }
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype["delete"] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;
      module.exports = MapCache;
    }
  });

  // ../node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS({
    "../node_modules/lodash/_stackSet.js"(exports, module) {
      var ListCache = require_ListCache();
      var Map2 = require_Map();
      var MapCache = require_MapCache();
      var LARGE_ARRAY_SIZE = 200;
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }
      module.exports = stackSet;
    }
  });

  // ../node_modules/lodash/_Stack.js
  var require_Stack = __commonJS({
    "../node_modules/lodash/_Stack.js"(exports, module) {
      var ListCache = require_ListCache();
      var stackClear = require_stackClear();
      var stackDelete = require_stackDelete();
      var stackGet = require_stackGet();
      var stackHas = require_stackHas();
      var stackSet = require_stackSet();
      function Stack2(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }
      Stack2.prototype.clear = stackClear;
      Stack2.prototype["delete"] = stackDelete;
      Stack2.prototype.get = stackGet;
      Stack2.prototype.has = stackHas;
      Stack2.prototype.set = stackSet;
      module.exports = Stack2;
    }
  });

  // ../node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS({
    "../node_modules/lodash/_defineProperty.js"(exports, module) {
      var getNative = require_getNative();
      var defineProperty = function() {
        try {
          var func3 = getNative(Object, "defineProperty");
          func3({}, "", {});
          return func3;
        } catch (e2) {
        }
      }();
      module.exports = defineProperty;
    }
  });

  // ../node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS({
    "../node_modules/lodash/_baseAssignValue.js"(exports, module) {
      var defineProperty = require_defineProperty();
      function baseAssignValue(object2, key, value) {
        if (key == "__proto__" && defineProperty) {
          defineProperty(object2, key, {
            "configurable": true,
            "enumerable": true,
            "value": value,
            "writable": true
          });
        } else {
          object2[key] = value;
        }
      }
      module.exports = baseAssignValue;
    }
  });

  // ../node_modules/lodash/_assignMergeValue.js
  var require_assignMergeValue = __commonJS({
    "../node_modules/lodash/_assignMergeValue.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var eq = require_eq();
      function assignMergeValue(object2, key, value) {
        if (value !== void 0 && !eq(object2[key], value) || value === void 0 && !(key in object2)) {
          baseAssignValue(object2, key, value);
        }
      }
      module.exports = assignMergeValue;
    }
  });

  // ../node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS({
    "../node_modules/lodash/_createBaseFor.js"(exports, module) {
      function createBaseFor(fromRight) {
        return function(object2, iteratee, keysFunc) {
          var index2 = -1, iterable = Object(object2), props = keysFunc(object2), length2 = props.length;
          while (length2--) {
            var key = props[fromRight ? length2 : ++index2];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object2;
        };
      }
      module.exports = createBaseFor;
    }
  });

  // ../node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS({
    "../node_modules/lodash/_baseFor.js"(exports, module) {
      var createBaseFor = require_createBaseFor();
      var baseFor = createBaseFor();
      module.exports = baseFor;
    }
  });

  // ../node_modules/lodash/_cloneBuffer.js
  var require_cloneBuffer = __commonJS({
    "../node_modules/lodash/_cloneBuffer.js"(exports, module) {
      var root151 = require_root();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root151.Buffer : void 0;
      var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
      function cloneBuffer(buffer2, isDeep) {
        if (isDeep) {
          return buffer2.slice();
        }
        var length2 = buffer2.length, result = allocUnsafe ? allocUnsafe(length2) : new buffer2.constructor(length2);
        buffer2.copy(result);
        return result;
      }
      module.exports = cloneBuffer;
    }
  });

  // ../node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS({
    "../node_modules/lodash/_Uint8Array.js"(exports, module) {
      var root151 = require_root();
      var Uint8Array2 = root151.Uint8Array;
      module.exports = Uint8Array2;
    }
  });

  // ../node_modules/lodash/_cloneArrayBuffer.js
  var require_cloneArrayBuffer = __commonJS({
    "../node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
      var Uint8Array2 = require_Uint8Array();
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
        return result;
      }
      module.exports = cloneArrayBuffer;
    }
  });

  // ../node_modules/lodash/_cloneTypedArray.js
  var require_cloneTypedArray = __commonJS({
    "../node_modules/lodash/_cloneTypedArray.js"(exports, module) {
      var cloneArrayBuffer = require_cloneArrayBuffer();
      function cloneTypedArray(typedArray, isDeep) {
        var buffer2 = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer2, typedArray.byteOffset, typedArray.length);
      }
      module.exports = cloneTypedArray;
    }
  });

  // ../node_modules/lodash/_copyArray.js
  var require_copyArray = __commonJS({
    "../node_modules/lodash/_copyArray.js"(exports, module) {
      function copyArray(source, array2) {
        var index2 = -1, length2 = source.length;
        array2 || (array2 = Array(length2));
        while (++index2 < length2) {
          array2[index2] = source[index2];
        }
        return array2;
      }
      module.exports = copyArray;
    }
  });

  // ../node_modules/lodash/_baseCreate.js
  var require_baseCreate = __commonJS({
    "../node_modules/lodash/_baseCreate.js"(exports, module) {
      var isObject6 = require_isObject();
      var objectCreate = Object.create;
      var baseCreate = function() {
        function object2() {
        }
        return function(proto) {
          if (!isObject6(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object2.prototype = proto;
          var result = new object2();
          object2.prototype = void 0;
          return result;
        };
      }();
      module.exports = baseCreate;
    }
  });

  // ../node_modules/lodash/_overArg.js
  var require_overArg = __commonJS({
    "../node_modules/lodash/_overArg.js"(exports, module) {
      function overArg(func3, transform2) {
        return function(arg) {
          return func3(transform2(arg));
        };
      }
      module.exports = overArg;
    }
  });

  // ../node_modules/lodash/_getPrototype.js
  var require_getPrototype = __commonJS({
    "../node_modules/lodash/_getPrototype.js"(exports, module) {
      var overArg = require_overArg();
      var getPrototype = overArg(Object.getPrototypeOf, Object);
      module.exports = getPrototype;
    }
  });

  // ../node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS({
    "../node_modules/lodash/_isPrototype.js"(exports, module) {
      var objectProto = Object.prototype;
      function isPrototype(value) {
        var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
        return value === proto;
      }
      module.exports = isPrototype;
    }
  });

  // ../node_modules/lodash/_initCloneObject.js
  var require_initCloneObject = __commonJS({
    "../node_modules/lodash/_initCloneObject.js"(exports, module) {
      var baseCreate = require_baseCreate();
      var getPrototype = require_getPrototype();
      var isPrototype = require_isPrototype();
      function initCloneObject(object2) {
        return typeof object2.constructor == "function" && !isPrototype(object2) ? baseCreate(getPrototype(object2)) : {};
      }
      module.exports = initCloneObject;
    }
  });

  // ../node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS({
    "../node_modules/lodash/_baseIsArguments.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }
      module.exports = baseIsArguments;
    }
  });

  // ../node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS({
    "../node_modules/lodash/isArguments.js"(exports, module) {
      var baseIsArguments = require_baseIsArguments();
      var isObjectLike = require_isObjectLike();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var isArguments = baseIsArguments(function() {
        return arguments;
      }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
      };
      module.exports = isArguments;
    }
  });

  // ../node_modules/lodash/isLength.js
  var require_isLength = __commonJS({
    "../node_modules/lodash/isLength.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      function isLength(value) {
        return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }
      module.exports = isLength;
    }
  });

  // ../node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "../node_modules/lodash/isArrayLike.js"(exports, module) {
      var isFunction2 = require_isFunction();
      var isLength = require_isLength();
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction2(value);
      }
      module.exports = isArrayLike;
    }
  });

  // ../node_modules/lodash/isArrayLikeObject.js
  var require_isArrayLikeObject = __commonJS({
    "../node_modules/lodash/isArrayLikeObject.js"(exports, module) {
      var isArrayLike = require_isArrayLike();
      var isObjectLike = require_isObjectLike();
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }
      module.exports = isArrayLikeObject;
    }
  });

  // ../node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS({
    "../node_modules/lodash/stubFalse.js"(exports, module) {
      function stubFalse() {
        return false;
      }
      module.exports = stubFalse;
    }
  });

  // ../node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS({
    "../node_modules/lodash/isBuffer.js"(exports, module) {
      var root151 = require_root();
      var stubFalse = require_stubFalse();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var Buffer2 = moduleExports ? root151.Buffer : void 0;
      var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
      var isBuffer2 = nativeIsBuffer || stubFalse;
      module.exports = isBuffer2;
    }
  });

  // ../node_modules/lodash/isPlainObject.js
  var require_isPlainObject = __commonJS({
    "../node_modules/lodash/isPlainObject.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var getPrototype = require_getPrototype();
      var isObjectLike = require_isObjectLike();
      var objectTag = "[object Object]";
      var funcProto = Function.prototype;
      var objectProto = Object.prototype;
      var funcToString = funcProto.toString;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      var objectCtorString = funcToString.call(Object);
      function isPlainObject8(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
        return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
      }
      module.exports = isPlainObject8;
    }
  });

  // ../node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS({
    "../node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isLength = require_isLength();
      var isObjectLike = require_isObjectLike();
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var funcTag = "[object Function]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var objectTag = "[object Object]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var weakMapTag = "[object WeakMap]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var float32Tag = "[object Float32Array]";
      var float64Tag = "[object Float64Array]";
      var int8Tag = "[object Int8Array]";
      var int16Tag = "[object Int16Array]";
      var int32Tag = "[object Int32Array]";
      var uint8Tag = "[object Uint8Array]";
      var uint8ClampedTag = "[object Uint8ClampedArray]";
      var uint16Tag = "[object Uint16Array]";
      var uint32Tag = "[object Uint32Array]";
      var typedArrayTags = {};
      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
      function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }
      module.exports = baseIsTypedArray;
    }
  });

  // ../node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS({
    "../node_modules/lodash/_baseUnary.js"(exports, module) {
      function baseUnary(func3) {
        return function(value) {
          return func3(value);
        };
      }
      module.exports = baseUnary;
    }
  });

  // ../node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS({
    "../node_modules/lodash/_nodeUtil.js"(exports, module) {
      var freeGlobal = require_freeGlobal();
      var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
      var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
      var moduleExports = freeModule && freeModule.exports === freeExports;
      var freeProcess = moduleExports && freeGlobal.process;
      var nodeUtil = function() {
        try {
          var types = freeModule && freeModule.require && freeModule.require("util").types;
          if (types) {
            return types;
          }
          return freeProcess && freeProcess.binding && freeProcess.binding("util");
        } catch (e2) {
        }
      }();
      module.exports = nodeUtil;
    }
  });

  // ../node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "../node_modules/lodash/isTypedArray.js"(exports, module) {
      var baseIsTypedArray = require_baseIsTypedArray();
      var baseUnary = require_baseUnary();
      var nodeUtil = require_nodeUtil();
      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
      module.exports = isTypedArray;
    }
  });

  // ../node_modules/lodash/_safeGet.js
  var require_safeGet = __commonJS({
    "../node_modules/lodash/_safeGet.js"(exports, module) {
      function safeGet(object2, key) {
        if (key === "constructor" && typeof object2[key] === "function") {
          return;
        }
        if (key == "__proto__") {
          return;
        }
        return object2[key];
      }
      module.exports = safeGet;
    }
  });

  // ../node_modules/lodash/_assignValue.js
  var require_assignValue = __commonJS({
    "../node_modules/lodash/_assignValue.js"(exports, module) {
      var baseAssignValue = require_baseAssignValue();
      var eq = require_eq();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function assignValue(object2, key, value) {
        var objValue = object2[key];
        if (!(hasOwnProperty2.call(object2, key) && eq(objValue, value)) || value === void 0 && !(key in object2)) {
          baseAssignValue(object2, key, value);
        }
      }
      module.exports = assignValue;
    }
  });

  // ../node_modules/lodash/_copyObject.js
  var require_copyObject = __commonJS({
    "../node_modules/lodash/_copyObject.js"(exports, module) {
      var assignValue = require_assignValue();
      var baseAssignValue = require_baseAssignValue();
      function copyObject(source, props, object2, customizer) {
        var isNew = !object2;
        object2 || (object2 = {});
        var index2 = -1, length2 = props.length;
        while (++index2 < length2) {
          var key = props[index2];
          var newValue = customizer ? customizer(object2[key], source[key], key, object2, source) : void 0;
          if (newValue === void 0) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object2, key, newValue);
          } else {
            assignValue(object2, key, newValue);
          }
        }
        return object2;
      }
      module.exports = copyObject;
    }
  });

  // ../node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS({
    "../node_modules/lodash/_baseTimes.js"(exports, module) {
      function baseTimes(n3, iteratee) {
        var index2 = -1, result = Array(n3);
        while (++index2 < n3) {
          result[index2] = iteratee(index2);
        }
        return result;
      }
      module.exports = baseTimes;
    }
  });

  // ../node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS({
    "../node_modules/lodash/_isIndex.js"(exports, module) {
      var MAX_SAFE_INTEGER = 9007199254740991;
      var reIsUint = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length2) {
        var type = typeof value;
        length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
        return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
      }
      module.exports = isIndex;
    }
  });

  // ../node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS({
    "../node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
      var baseTimes = require_baseTimes();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isIndex = require_isIndex();
      var isTypedArray = require_isTypedArray();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length2 = result.length;
        for (var key in value) {
          if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
          isIndex(key, length2)))) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = arrayLikeKeys;
    }
  });

  // ../node_modules/lodash/_nativeKeysIn.js
  var require_nativeKeysIn = __commonJS({
    "../node_modules/lodash/_nativeKeysIn.js"(exports, module) {
      function nativeKeysIn(object2) {
        var result = [];
        if (object2 != null) {
          for (var key in Object(object2)) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = nativeKeysIn;
    }
  });

  // ../node_modules/lodash/_baseKeysIn.js
  var require_baseKeysIn = __commonJS({
    "../node_modules/lodash/_baseKeysIn.js"(exports, module) {
      var isObject6 = require_isObject();
      var isPrototype = require_isPrototype();
      var nativeKeysIn = require_nativeKeysIn();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseKeysIn(object2) {
        if (!isObject6(object2)) {
          return nativeKeysIn(object2);
        }
        var isProto = isPrototype(object2), result = [];
        for (var key in object2) {
          if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object2, key)))) {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = baseKeysIn;
    }
  });

  // ../node_modules/lodash/keysIn.js
  var require_keysIn = __commonJS({
    "../node_modules/lodash/keysIn.js"(exports, module) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeysIn = require_baseKeysIn();
      var isArrayLike = require_isArrayLike();
      function keysIn(object2) {
        return isArrayLike(object2) ? arrayLikeKeys(object2, true) : baseKeysIn(object2);
      }
      module.exports = keysIn;
    }
  });

  // ../node_modules/lodash/toPlainObject.js
  var require_toPlainObject = __commonJS({
    "../node_modules/lodash/toPlainObject.js"(exports, module) {
      var copyObject = require_copyObject();
      var keysIn = require_keysIn();
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }
      module.exports = toPlainObject;
    }
  });

  // ../node_modules/lodash/_baseMergeDeep.js
  var require_baseMergeDeep = __commonJS({
    "../node_modules/lodash/_baseMergeDeep.js"(exports, module) {
      var assignMergeValue = require_assignMergeValue();
      var cloneBuffer = require_cloneBuffer();
      var cloneTypedArray = require_cloneTypedArray();
      var copyArray = require_copyArray();
      var initCloneObject = require_initCloneObject();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isArrayLikeObject = require_isArrayLikeObject();
      var isBuffer2 = require_isBuffer();
      var isFunction2 = require_isFunction();
      var isObject6 = require_isObject();
      var isPlainObject8 = require_isPlainObject();
      var isTypedArray = require_isTypedArray();
      var safeGet = require_safeGet();
      var toPlainObject = require_toPlainObject();
      function baseMergeDeep(object2, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object2, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
        if (stacked) {
          assignMergeValue(object2, key, stacked);
          return;
        }
        var newValue = customizer ? customizer(objValue, srcValue, key + "", object2, source, stack) : void 0;
        var isCommon = newValue === void 0;
        if (isCommon) {
          var isArr = isArray(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            } else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            } else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            } else {
              newValue = [];
            }
          } else if (isPlainObject8(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            } else if (!isObject6(objValue) || isFunction2(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          } else {
            isCommon = false;
          }
        }
        if (isCommon) {
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack["delete"](srcValue);
        }
        assignMergeValue(object2, key, newValue);
      }
      module.exports = baseMergeDeep;
    }
  });

  // ../node_modules/lodash/_baseMerge.js
  var require_baseMerge = __commonJS({
    "../node_modules/lodash/_baseMerge.js"(exports, module) {
      var Stack2 = require_Stack();
      var assignMergeValue = require_assignMergeValue();
      var baseFor = require_baseFor();
      var baseMergeDeep = require_baseMergeDeep();
      var isObject6 = require_isObject();
      var keysIn = require_keysIn();
      var safeGet = require_safeGet();
      function baseMerge(object2, source, srcIndex, customizer, stack) {
        if (object2 === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          stack || (stack = new Stack2());
          if (isObject6(srcValue)) {
            baseMergeDeep(object2, source, key, srcIndex, baseMerge, customizer, stack);
          } else {
            var newValue = customizer ? customizer(safeGet(object2, key), srcValue, key + "", object2, source, stack) : void 0;
            if (newValue === void 0) {
              newValue = srcValue;
            }
            assignMergeValue(object2, key, newValue);
          }
        }, keysIn);
      }
      module.exports = baseMerge;
    }
  });

  // ../node_modules/lodash/identity.js
  var require_identity = __commonJS({
    "../node_modules/lodash/identity.js"(exports, module) {
      function identity(value) {
        return value;
      }
      module.exports = identity;
    }
  });

  // ../node_modules/lodash/_apply.js
  var require_apply = __commonJS({
    "../node_modules/lodash/_apply.js"(exports, module) {
      function apply(func3, thisArg, args) {
        switch (args.length) {
          case 0:
            return func3.call(thisArg);
          case 1:
            return func3.call(thisArg, args[0]);
          case 2:
            return func3.call(thisArg, args[0], args[1]);
          case 3:
            return func3.call(thisArg, args[0], args[1], args[2]);
        }
        return func3.apply(thisArg, args);
      }
      module.exports = apply;
    }
  });

  // ../node_modules/lodash/_overRest.js
  var require_overRest = __commonJS({
    "../node_modules/lodash/_overRest.js"(exports, module) {
      var apply = require_apply();
      var nativeMax = Math.max;
      function overRest(func3, start2, transform2) {
        start2 = nativeMax(start2 === void 0 ? func3.length - 1 : start2, 0);
        return function() {
          var args = arguments, index2 = -1, length2 = nativeMax(args.length - start2, 0), array2 = Array(length2);
          while (++index2 < length2) {
            array2[index2] = args[start2 + index2];
          }
          index2 = -1;
          var otherArgs = Array(start2 + 1);
          while (++index2 < start2) {
            otherArgs[index2] = args[index2];
          }
          otherArgs[start2] = transform2(array2);
          return apply(func3, this, otherArgs);
        };
      }
      module.exports = overRest;
    }
  });

  // ../node_modules/lodash/constant.js
  var require_constant = __commonJS({
    "../node_modules/lodash/constant.js"(exports, module) {
      function constant(value) {
        return function() {
          return value;
        };
      }
      module.exports = constant;
    }
  });

  // ../node_modules/lodash/_baseSetToString.js
  var require_baseSetToString = __commonJS({
    "../node_modules/lodash/_baseSetToString.js"(exports, module) {
      var constant = require_constant();
      var defineProperty = require_defineProperty();
      var identity = require_identity();
      var baseSetToString = !defineProperty ? identity : function(func3, string4) {
        return defineProperty(func3, "toString", {
          "configurable": true,
          "enumerable": false,
          "value": constant(string4),
          "writable": true
        });
      };
      module.exports = baseSetToString;
    }
  });

  // ../node_modules/lodash/_shortOut.js
  var require_shortOut = __commonJS({
    "../node_modules/lodash/_shortOut.js"(exports, module) {
      var HOT_COUNT = 800;
      var HOT_SPAN = 16;
      var nativeNow = Date.now;
      function shortOut(func3) {
        var count = 0, lastCalled = 0;
        return function() {
          var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func3.apply(void 0, arguments);
        };
      }
      module.exports = shortOut;
    }
  });

  // ../node_modules/lodash/_setToString.js
  var require_setToString = __commonJS({
    "../node_modules/lodash/_setToString.js"(exports, module) {
      var baseSetToString = require_baseSetToString();
      var shortOut = require_shortOut();
      var setToString = shortOut(baseSetToString);
      module.exports = setToString;
    }
  });

  // ../node_modules/lodash/_baseRest.js
  var require_baseRest = __commonJS({
    "../node_modules/lodash/_baseRest.js"(exports, module) {
      var identity = require_identity();
      var overRest = require_overRest();
      var setToString = require_setToString();
      function baseRest(func3, start2) {
        return setToString(overRest(func3, start2, identity), func3 + "");
      }
      module.exports = baseRest;
    }
  });

  // ../node_modules/lodash/_isIterateeCall.js
  var require_isIterateeCall = __commonJS({
    "../node_modules/lodash/_isIterateeCall.js"(exports, module) {
      var eq = require_eq();
      var isArrayLike = require_isArrayLike();
      var isIndex = require_isIndex();
      var isObject6 = require_isObject();
      function isIterateeCall(value, index2, object2) {
        if (!isObject6(object2)) {
          return false;
        }
        var type = typeof index2;
        if (type == "number" ? isArrayLike(object2) && isIndex(index2, object2.length) : type == "string" && index2 in object2) {
          return eq(object2[index2], value);
        }
        return false;
      }
      module.exports = isIterateeCall;
    }
  });

  // ../node_modules/lodash/_createAssigner.js
  var require_createAssigner = __commonJS({
    "../node_modules/lodash/_createAssigner.js"(exports, module) {
      var baseRest = require_baseRest();
      var isIterateeCall = require_isIterateeCall();
      function createAssigner(assigner) {
        return baseRest(function(object2, sources) {
          var index2 = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : void 0, guard = length2 > 2 ? sources[2] : void 0;
          customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : void 0;
          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length2 < 3 ? void 0 : customizer;
            length2 = 1;
          }
          object2 = Object(object2);
          while (++index2 < length2) {
            var source = sources[index2];
            if (source) {
              assigner(object2, source, index2, customizer);
            }
          }
          return object2;
        });
      }
      module.exports = createAssigner;
    }
  });

  // ../node_modules/lodash/merge.js
  var require_merge = __commonJS({
    "../node_modules/lodash/merge.js"(exports, module) {
      var baseMerge = require_baseMerge();
      var createAssigner = require_createAssigner();
      var merge5 = createAssigner(function(object2, source, srcIndex) {
        baseMerge(object2, source, srcIndex);
      });
      module.exports = merge5;
    }
  });

  // ../node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS({
    "../node_modules/lodash/_nativeKeys.js"(exports, module) {
      var overArg = require_overArg();
      var nativeKeys = overArg(Object.keys, Object);
      module.exports = nativeKeys;
    }
  });

  // ../node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS({
    "../node_modules/lodash/_baseKeys.js"(exports, module) {
      var isPrototype = require_isPrototype();
      var nativeKeys = require_nativeKeys();
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseKeys(object2) {
        if (!isPrototype(object2)) {
          return nativeKeys(object2);
        }
        var result = [];
        for (var key in Object(object2)) {
          if (hasOwnProperty2.call(object2, key) && key != "constructor") {
            result.push(key);
          }
        }
        return result;
      }
      module.exports = baseKeys;
    }
  });

  // ../node_modules/lodash/keys.js
  var require_keys = __commonJS({
    "../node_modules/lodash/keys.js"(exports, module) {
      var arrayLikeKeys = require_arrayLikeKeys();
      var baseKeys = require_baseKeys();
      var isArrayLike = require_isArrayLike();
      function keys2(object2) {
        return isArrayLike(object2) ? arrayLikeKeys(object2) : baseKeys(object2);
      }
      module.exports = keys2;
    }
  });

  // ../node_modules/lodash/_arrayEach.js
  var require_arrayEach = __commonJS({
    "../node_modules/lodash/_arrayEach.js"(exports, module) {
      function arrayEach3(array2, iteratee) {
        var index2 = -1, length2 = array2 == null ? 0 : array2.length;
        while (++index2 < length2) {
          if (iteratee(array2[index2], index2, array2) === false) {
            break;
          }
        }
        return array2;
      }
      module.exports = arrayEach3;
    }
  });

  // ../node_modules/lodash/_baseForOwn.js
  var require_baseForOwn = __commonJS({
    "../node_modules/lodash/_baseForOwn.js"(exports, module) {
      var baseFor = require_baseFor();
      var keys2 = require_keys();
      function baseForOwn(object2, iteratee) {
        return object2 && baseFor(object2, iteratee, keys2);
      }
      module.exports = baseForOwn;
    }
  });

  // ../node_modules/lodash/_createBaseEach.js
  var require_createBaseEach = __commonJS({
    "../node_modules/lodash/_createBaseEach.js"(exports, module) {
      var isArrayLike = require_isArrayLike();
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length2 = collection.length, index2 = fromRight ? length2 : -1, iterable = Object(collection);
          while (fromRight ? index2-- : ++index2 < length2) {
            if (iteratee(iterable[index2], index2, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }
      module.exports = createBaseEach;
    }
  });

  // ../node_modules/lodash/_baseEach.js
  var require_baseEach = __commonJS({
    "../node_modules/lodash/_baseEach.js"(exports, module) {
      var baseForOwn = require_baseForOwn();
      var createBaseEach = require_createBaseEach();
      var baseEach = createBaseEach(baseForOwn);
      module.exports = baseEach;
    }
  });

  // ../node_modules/lodash/_castFunction.js
  var require_castFunction = __commonJS({
    "../node_modules/lodash/_castFunction.js"(exports, module) {
      var identity = require_identity();
      function castFunction(value) {
        return typeof value == "function" ? value : identity;
      }
      module.exports = castFunction;
    }
  });

  // ../node_modules/lodash/forEach.js
  var require_forEach = __commonJS({
    "../node_modules/lodash/forEach.js"(exports, module) {
      var arrayEach3 = require_arrayEach();
      var baseEach = require_baseEach();
      var castFunction = require_castFunction();
      var isArray = require_isArray();
      function forEach(collection, iteratee) {
        var func3 = isArray(collection) ? arrayEach3 : baseEach;
        return func3(collection, castFunction(iteratee));
      }
      module.exports = forEach;
    }
  });

  // ../node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS({
    "../node_modules/lodash/_arrayMap.js"(exports, module) {
      function arrayMap(array2, iteratee) {
        var index2 = -1, length2 = array2 == null ? 0 : array2.length, result = Array(length2);
        while (++index2 < length2) {
          result[index2] = iteratee(array2[index2], index2, array2);
        }
        return result;
      }
      module.exports = arrayMap;
    }
  });

  // ../node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS({
    "../node_modules/lodash/_setCacheAdd.js"(exports, module) {
      var HASH_UNDEFINED = "__lodash_hash_undefined__";
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }
      module.exports = setCacheAdd;
    }
  });

  // ../node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS({
    "../node_modules/lodash/_setCacheHas.js"(exports, module) {
      function setCacheHas(value) {
        return this.__data__.has(value);
      }
      module.exports = setCacheHas;
    }
  });

  // ../node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS({
    "../node_modules/lodash/_SetCache.js"(exports, module) {
      var MapCache = require_MapCache();
      var setCacheAdd = require_setCacheAdd();
      var setCacheHas = require_setCacheHas();
      function SetCache(values2) {
        var index2 = -1, length2 = values2 == null ? 0 : values2.length;
        this.__data__ = new MapCache();
        while (++index2 < length2) {
          this.add(values2[index2]);
        }
      }
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;
      module.exports = SetCache;
    }
  });

  // ../node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS({
    "../node_modules/lodash/_arraySome.js"(exports, module) {
      function arraySome(array2, predicate) {
        var index2 = -1, length2 = array2 == null ? 0 : array2.length;
        while (++index2 < length2) {
          if (predicate(array2[index2], index2, array2)) {
            return true;
          }
        }
        return false;
      }
      module.exports = arraySome;
    }
  });

  // ../node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS({
    "../node_modules/lodash/_cacheHas.js"(exports, module) {
      function cacheHas(cache3, key) {
        return cache3.has(key);
      }
      module.exports = cacheHas;
    }
  });

  // ../node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS({
    "../node_modules/lodash/_equalArrays.js"(exports, module) {
      var SetCache = require_SetCache();
      var arraySome = require_arraySome();
      var cacheHas = require_cacheHas();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        var arrStacked = stack.get(array2);
        var othStacked = stack.get(other);
        if (arrStacked && othStacked) {
          return arrStacked == other && othStacked == array2;
        }
        var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
        stack.set(array2, other);
        stack.set(other, array2);
        while (++index2 < arrLength) {
          var arrValue = array2[index2], othValue = other[index2];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack) : customizer(arrValue, othValue, index2, array2, other, stack);
          }
          if (compared !== void 0) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          if (seen) {
            if (!arraySome(other, function(othValue2, othIndex) {
              if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
              result = false;
              break;
            }
          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
            result = false;
            break;
          }
        }
        stack["delete"](array2);
        stack["delete"](other);
        return result;
      }
      module.exports = equalArrays;
    }
  });

  // ../node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS({
    "../node_modules/lodash/_mapToArray.js"(exports, module) {
      function mapToArray(map) {
        var index2 = -1, result = Array(map.size);
        map.forEach(function(value, key) {
          result[++index2] = [key, value];
        });
        return result;
      }
      module.exports = mapToArray;
    }
  });

  // ../node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS({
    "../node_modules/lodash/_setToArray.js"(exports, module) {
      function setToArray(set) {
        var index2 = -1, result = Array(set.size);
        set.forEach(function(value) {
          result[++index2] = value;
        });
        return result;
      }
      module.exports = setToArray;
    }
  });

  // ../node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS({
    "../node_modules/lodash/_equalByTag.js"(exports, module) {
      var Symbol3 = require_Symbol();
      var Uint8Array2 = require_Uint8Array();
      var eq = require_eq();
      var equalArrays = require_equalArrays();
      var mapToArray = require_mapToArray();
      var setToArray = require_setToArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      var boolTag = "[object Boolean]";
      var dateTag = "[object Date]";
      var errorTag = "[object Error]";
      var mapTag = "[object Map]";
      var numberTag = "[object Number]";
      var regexpTag = "[object RegExp]";
      var setTag = "[object Set]";
      var stringTag = "[object String]";
      var symbolTag = "[object Symbol]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var dataViewTag = "[object DataView]";
      var symbolProto = Symbol3 ? Symbol3.prototype : void 0;
      var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
      function equalByTag(object2, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if (object2.byteLength != other.byteLength || object2.byteOffset != other.byteOffset) {
              return false;
            }
            object2 = object2.buffer;
            other = other.buffer;
          case arrayBufferTag:
            if (object2.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object2), new Uint8Array2(other))) {
              return false;
            }
            return true;
          case boolTag:
          case dateTag:
          case numberTag:
            return eq(+object2, +other);
          case errorTag:
            return object2.name == other.name && object2.message == other.message;
          case regexpTag:
          case stringTag:
            return object2 == other + "";
          case mapTag:
            var convert3 = mapToArray;
          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert3 || (convert3 = setToArray);
            if (object2.size != other.size && !isPartial) {
              return false;
            }
            var stacked = stack.get(object2);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;
            stack.set(object2, other);
            var result = equalArrays(convert3(object2), convert3(other), bitmask, customizer, equalFunc, stack);
            stack["delete"](object2);
            return result;
          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object2) == symbolValueOf.call(other);
            }
        }
        return false;
      }
      module.exports = equalByTag;
    }
  });

  // ../node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS({
    "../node_modules/lodash/_arrayPush.js"(exports, module) {
      function arrayPush(array2, values2) {
        var index2 = -1, length2 = values2.length, offset = array2.length;
        while (++index2 < length2) {
          array2[offset + index2] = values2[index2];
        }
        return array2;
      }
      module.exports = arrayPush;
    }
  });

  // ../node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS({
    "../node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
      var arrayPush = require_arrayPush();
      var isArray = require_isArray();
      function baseGetAllKeys(object2, keysFunc, symbolsFunc) {
        var result = keysFunc(object2);
        return isArray(object2) ? result : arrayPush(result, symbolsFunc(object2));
      }
      module.exports = baseGetAllKeys;
    }
  });

  // ../node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS({
    "../node_modules/lodash/_arrayFilter.js"(exports, module) {
      function arrayFilter(array2, predicate) {
        var index2 = -1, length2 = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
        while (++index2 < length2) {
          var value = array2[index2];
          if (predicate(value, index2, array2)) {
            result[resIndex++] = value;
          }
        }
        return result;
      }
      module.exports = arrayFilter;
    }
  });

  // ../node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS({
    "../node_modules/lodash/stubArray.js"(exports, module) {
      function stubArray() {
        return [];
      }
      module.exports = stubArray;
    }
  });

  // ../node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS({
    "../node_modules/lodash/_getSymbols.js"(exports, module) {
      var arrayFilter = require_arrayFilter();
      var stubArray = require_stubArray();
      var objectProto = Object.prototype;
      var propertyIsEnumerable = objectProto.propertyIsEnumerable;
      var nativeGetSymbols = Object.getOwnPropertySymbols;
      var getSymbols = !nativeGetSymbols ? stubArray : function(object2) {
        if (object2 == null) {
          return [];
        }
        object2 = Object(object2);
        return arrayFilter(nativeGetSymbols(object2), function(symbol) {
          return propertyIsEnumerable.call(object2, symbol);
        });
      };
      module.exports = getSymbols;
    }
  });

  // ../node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS({
    "../node_modules/lodash/_getAllKeys.js"(exports, module) {
      var baseGetAllKeys = require_baseGetAllKeys();
      var getSymbols = require_getSymbols();
      var keys2 = require_keys();
      function getAllKeys(object2) {
        return baseGetAllKeys(object2, keys2, getSymbols);
      }
      module.exports = getAllKeys;
    }
  });

  // ../node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS({
    "../node_modules/lodash/_equalObjects.js"(exports, module) {
      var getAllKeys = require_getAllKeys();
      var COMPARE_PARTIAL_FLAG = 1;
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function equalObjects(object2, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object2), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index2 = objLength;
        while (index2--) {
          var key = objProps[index2];
          if (!(isPartial ? key in other : hasOwnProperty2.call(other, key))) {
            return false;
          }
        }
        var objStacked = stack.get(object2);
        var othStacked = stack.get(other);
        if (objStacked && othStacked) {
          return objStacked == other && othStacked == object2;
        }
        var result = true;
        stack.set(object2, other);
        stack.set(other, object2);
        var skipCtor = isPartial;
        while (++index2 < objLength) {
          key = objProps[index2];
          var objValue = object2[key], othValue = other[key];
          if (customizer) {
            var compared = isPartial ? customizer(othValue, objValue, key, other, object2, stack) : customizer(objValue, othValue, key, object2, other, stack);
          }
          if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == "constructor");
        }
        if (result && !skipCtor) {
          var objCtor = object2.constructor, othCtor = other.constructor;
          if (objCtor != othCtor && ("constructor" in object2 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack["delete"](object2);
        stack["delete"](other);
        return result;
      }
      module.exports = equalObjects;
    }
  });

  // ../node_modules/lodash/_DataView.js
  var require_DataView = __commonJS({
    "../node_modules/lodash/_DataView.js"(exports, module) {
      var getNative = require_getNative();
      var root151 = require_root();
      var DataView2 = getNative(root151, "DataView");
      module.exports = DataView2;
    }
  });

  // ../node_modules/lodash/_Promise.js
  var require_Promise = __commonJS({
    "../node_modules/lodash/_Promise.js"(exports, module) {
      var getNative = require_getNative();
      var root151 = require_root();
      var Promise2 = getNative(root151, "Promise");
      module.exports = Promise2;
    }
  });

  // ../node_modules/lodash/_Set.js
  var require_Set = __commonJS({
    "../node_modules/lodash/_Set.js"(exports, module) {
      var getNative = require_getNative();
      var root151 = require_root();
      var Set2 = getNative(root151, "Set");
      module.exports = Set2;
    }
  });

  // ../node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS({
    "../node_modules/lodash/_WeakMap.js"(exports, module) {
      var getNative = require_getNative();
      var root151 = require_root();
      var WeakMap2 = getNative(root151, "WeakMap");
      module.exports = WeakMap2;
    }
  });

  // ../node_modules/lodash/_getTag.js
  var require_getTag = __commonJS({
    "../node_modules/lodash/_getTag.js"(exports, module) {
      var DataView2 = require_DataView();
      var Map2 = require_Map();
      var Promise2 = require_Promise();
      var Set2 = require_Set();
      var WeakMap2 = require_WeakMap();
      var baseGetTag = require_baseGetTag();
      var toSource = require_toSource();
      var mapTag = "[object Map]";
      var objectTag = "[object Object]";
      var promiseTag = "[object Promise]";
      var setTag = "[object Set]";
      var weakMapTag = "[object WeakMap]";
      var dataViewTag = "[object DataView]";
      var dataViewCtorString = toSource(DataView2);
      var mapCtorString = toSource(Map2);
      var promiseCtorString = toSource(Promise2);
      var setCtorString = toSource(Set2);
      var weakMapCtorString = toSource(WeakMap2);
      var getTag = baseGetTag;
      if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
        getTag = function(value) {
          var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString:
                return dataViewTag;
              case mapCtorString:
                return mapTag;
              case promiseCtorString:
                return promiseTag;
              case setCtorString:
                return setTag;
              case weakMapCtorString:
                return weakMapTag;
            }
          }
          return result;
        };
      }
      module.exports = getTag;
    }
  });

  // ../node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS({
    "../node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
      var Stack2 = require_Stack();
      var equalArrays = require_equalArrays();
      var equalByTag = require_equalByTag();
      var equalObjects = require_equalObjects();
      var getTag = require_getTag();
      var isArray = require_isArray();
      var isBuffer2 = require_isBuffer();
      var isTypedArray = require_isTypedArray();
      var COMPARE_PARTIAL_FLAG = 1;
      var argsTag = "[object Arguments]";
      var arrayTag = "[object Array]";
      var objectTag = "[object Object]";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function baseIsEqualDeep(object2, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object2), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object2), othTag = othIsArr ? arrayTag : getTag(other);
        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;
        var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
        if (isSameTag && isBuffer2(object2)) {
          if (!isBuffer2(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack2());
          return objIsArr || isTypedArray(object2) ? equalArrays(object2, other, bitmask, customizer, equalFunc, stack) : equalByTag(object2, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty2.call(object2, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty2.call(other, "__wrapped__");
          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object2.value() : object2, othUnwrapped = othIsWrapped ? other.value() : other;
            stack || (stack = new Stack2());
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack2());
        return equalObjects(object2, other, bitmask, customizer, equalFunc, stack);
      }
      module.exports = baseIsEqualDeep;
    }
  });

  // ../node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS({
    "../node_modules/lodash/_baseIsEqual.js"(exports, module) {
      var baseIsEqualDeep = require_baseIsEqualDeep();
      var isObjectLike = require_isObjectLike();
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }
      module.exports = baseIsEqual;
    }
  });

  // ../node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS({
    "../node_modules/lodash/_baseIsMatch.js"(exports, module) {
      var Stack2 = require_Stack();
      var baseIsEqual = require_baseIsEqual();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function baseIsMatch(object2, source, matchData, customizer) {
        var index2 = matchData.length, length2 = index2, noCustomizer = !customizer;
        if (object2 == null) {
          return !length2;
        }
        object2 = Object(object2);
        while (index2--) {
          var data = matchData[index2];
          if (noCustomizer && data[2] ? data[1] !== object2[data[0]] : !(data[0] in object2)) {
            return false;
          }
        }
        while (++index2 < length2) {
          data = matchData[index2];
          var key = data[0], objValue = object2[key], srcValue = data[1];
          if (noCustomizer && data[2]) {
            if (objValue === void 0 && !(key in object2)) {
              return false;
            }
          } else {
            var stack = new Stack2();
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object2, source, stack);
            }
            if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
              return false;
            }
          }
        }
        return true;
      }
      module.exports = baseIsMatch;
    }
  });

  // ../node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS({
    "../node_modules/lodash/_isStrictComparable.js"(exports, module) {
      var isObject6 = require_isObject();
      function isStrictComparable(value) {
        return value === value && !isObject6(value);
      }
      module.exports = isStrictComparable;
    }
  });

  // ../node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS({
    "../node_modules/lodash/_getMatchData.js"(exports, module) {
      var isStrictComparable = require_isStrictComparable();
      var keys2 = require_keys();
      function getMatchData(object2) {
        var result = keys2(object2), length2 = result.length;
        while (length2--) {
          var key = result[length2], value = object2[key];
          result[length2] = [key, value, isStrictComparable(value)];
        }
        return result;
      }
      module.exports = getMatchData;
    }
  });

  // ../node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS({
    "../node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
      function matchesStrictComparable(key, srcValue) {
        return function(object2) {
          if (object2 == null) {
            return false;
          }
          return object2[key] === srcValue && (srcValue !== void 0 || key in Object(object2));
        };
      }
      module.exports = matchesStrictComparable;
    }
  });

  // ../node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS({
    "../node_modules/lodash/_baseMatches.js"(exports, module) {
      var baseIsMatch = require_baseIsMatch();
      var getMatchData = require_getMatchData();
      var matchesStrictComparable = require_matchesStrictComparable();
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object2) {
          return object2 === source || baseIsMatch(object2, source, matchData);
        };
      }
      module.exports = baseMatches;
    }
  });

  // ../node_modules/lodash/_isKey.js
  var require_isKey = __commonJS({
    "../node_modules/lodash/_isKey.js"(exports, module) {
      var isArray = require_isArray();
      var isSymbol = require_isSymbol();
      var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var reIsPlainProp = /^\w*$/;
      function isKey(value, object2) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object2 != null && value in Object(object2);
      }
      module.exports = isKey;
    }
  });

  // ../node_modules/lodash/memoize.js
  var require_memoize = __commonJS({
    "../node_modules/lodash/memoize.js"(exports, module) {
      var MapCache = require_MapCache();
      var FUNC_ERROR_TEXT = "Expected a function";
      function memoize3(func3, resolver2) {
        if (typeof func3 != "function" || resolver2 != null && typeof resolver2 != "function") {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments, key = resolver2 ? resolver2.apply(this, args) : args[0], cache3 = memoized.cache;
          if (cache3.has(key)) {
            return cache3.get(key);
          }
          var result = func3.apply(this, args);
          memoized.cache = cache3.set(key, result) || cache3;
          return result;
        };
        memoized.cache = new (memoize3.Cache || MapCache)();
        return memoized;
      }
      memoize3.Cache = MapCache;
      module.exports = memoize3;
    }
  });

  // ../node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS({
    "../node_modules/lodash/_memoizeCapped.js"(exports, module) {
      var memoize3 = require_memoize();
      var MAX_MEMOIZE_SIZE = 500;
      function memoizeCapped(func3) {
        var result = memoize3(func3, function(key) {
          if (cache3.size === MAX_MEMOIZE_SIZE) {
            cache3.clear();
          }
          return key;
        });
        var cache3 = result.cache;
        return result;
      }
      module.exports = memoizeCapped;
    }
  });

  // ../node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS({
    "../node_modules/lodash/_stringToPath.js"(exports, module) {
      var memoizeCapped = require_memoizeCapped();
      var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
      var reEscapeChar = /\\(\\)?/g;
      var stringToPath = memoizeCapped(function(string4) {
        var result = [];
        if (string4.charCodeAt(0) === 46) {
          result.push("");
        }
        string4.replace(rePropName, function(match2, number3, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match2);
        });
        return result;
      });
      module.exports = stringToPath;
    }
  });

  // ../node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS({
    "../node_modules/lodash/_baseToString.js"(exports, module) {
      var Symbol3 = require_Symbol();
      var arrayMap = require_arrayMap();
      var isArray = require_isArray();
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      var symbolProto = Symbol3 ? Symbol3.prototype : void 0;
      var symbolToString = symbolProto ? symbolProto.toString : void 0;
      function baseToString(value) {
        if (typeof value == "string") {
          return value;
        }
        if (isArray(value)) {
          return arrayMap(value, baseToString) + "";
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : "";
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      module.exports = baseToString;
    }
  });

  // ../node_modules/lodash/toString.js
  var require_toString = __commonJS({
    "../node_modules/lodash/toString.js"(exports, module) {
      var baseToString = require_baseToString();
      function toString2(value) {
        return value == null ? "" : baseToString(value);
      }
      module.exports = toString2;
    }
  });

  // ../node_modules/lodash/_castPath.js
  var require_castPath = __commonJS({
    "../node_modules/lodash/_castPath.js"(exports, module) {
      var isArray = require_isArray();
      var isKey = require_isKey();
      var stringToPath = require_stringToPath();
      var toString2 = require_toString();
      function castPath(value, object2) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object2) ? [value] : stringToPath(toString2(value));
      }
      module.exports = castPath;
    }
  });

  // ../node_modules/lodash/_toKey.js
  var require_toKey = __commonJS({
    "../node_modules/lodash/_toKey.js"(exports, module) {
      var isSymbol = require_isSymbol();
      var INFINITY = 1 / 0;
      function toKey(value) {
        if (typeof value == "string" || isSymbol(value)) {
          return value;
        }
        var result = value + "";
        return result == "0" && 1 / value == -INFINITY ? "-0" : result;
      }
      module.exports = toKey;
    }
  });

  // ../node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS({
    "../node_modules/lodash/_baseGet.js"(exports, module) {
      var castPath = require_castPath();
      var toKey = require_toKey();
      function baseGet(object2, path2) {
        path2 = castPath(path2, object2);
        var index2 = 0, length2 = path2.length;
        while (object2 != null && index2 < length2) {
          object2 = object2[toKey(path2[index2++])];
        }
        return index2 && index2 == length2 ? object2 : void 0;
      }
      module.exports = baseGet;
    }
  });

  // ../node_modules/lodash/get.js
  var require_get = __commonJS({
    "../node_modules/lodash/get.js"(exports, module) {
      var baseGet = require_baseGet();
      function get(object2, path2, defaultValue2) {
        var result = object2 == null ? void 0 : baseGet(object2, path2);
        return result === void 0 ? defaultValue2 : result;
      }
      module.exports = get;
    }
  });

  // ../node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS({
    "../node_modules/lodash/_baseHasIn.js"(exports, module) {
      function baseHasIn(object2, key) {
        return object2 != null && key in Object(object2);
      }
      module.exports = baseHasIn;
    }
  });

  // ../node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS({
    "../node_modules/lodash/_hasPath.js"(exports, module) {
      var castPath = require_castPath();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isIndex = require_isIndex();
      var isLength = require_isLength();
      var toKey = require_toKey();
      function hasPath(object2, path2, hasFunc) {
        path2 = castPath(path2, object2);
        var index2 = -1, length2 = path2.length, result = false;
        while (++index2 < length2) {
          var key = toKey(path2[index2]);
          if (!(result = object2 != null && hasFunc(object2, key))) {
            break;
          }
          object2 = object2[key];
        }
        if (result || ++index2 != length2) {
          return result;
        }
        length2 = object2 == null ? 0 : object2.length;
        return !!length2 && isLength(length2) && isIndex(key, length2) && (isArray(object2) || isArguments(object2));
      }
      module.exports = hasPath;
    }
  });

  // ../node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS({
    "../node_modules/lodash/hasIn.js"(exports, module) {
      var baseHasIn = require_baseHasIn();
      var hasPath = require_hasPath();
      function hasIn(object2, path2) {
        return object2 != null && hasPath(object2, path2, baseHasIn);
      }
      module.exports = hasIn;
    }
  });

  // ../node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS({
    "../node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
      var baseIsEqual = require_baseIsEqual();
      var get = require_get();
      var hasIn = require_hasIn();
      var isKey = require_isKey();
      var isStrictComparable = require_isStrictComparable();
      var matchesStrictComparable = require_matchesStrictComparable();
      var toKey = require_toKey();
      var COMPARE_PARTIAL_FLAG = 1;
      var COMPARE_UNORDERED_FLAG = 2;
      function baseMatchesProperty(path2, srcValue) {
        if (isKey(path2) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path2), srcValue);
        }
        return function(object2) {
          var objValue = get(object2, path2);
          return objValue === void 0 && objValue === srcValue ? hasIn(object2, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }
      module.exports = baseMatchesProperty;
    }
  });

  // ../node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS({
    "../node_modules/lodash/_baseProperty.js"(exports, module) {
      function baseProperty(key) {
        return function(object2) {
          return object2 == null ? void 0 : object2[key];
        };
      }
      module.exports = baseProperty;
    }
  });

  // ../node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS({
    "../node_modules/lodash/_basePropertyDeep.js"(exports, module) {
      var baseGet = require_baseGet();
      function basePropertyDeep(path2) {
        return function(object2) {
          return baseGet(object2, path2);
        };
      }
      module.exports = basePropertyDeep;
    }
  });

  // ../node_modules/lodash/property.js
  var require_property = __commonJS({
    "../node_modules/lodash/property.js"(exports, module) {
      var baseProperty = require_baseProperty();
      var basePropertyDeep = require_basePropertyDeep();
      var isKey = require_isKey();
      var toKey = require_toKey();
      function property(path2) {
        return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
      }
      module.exports = property;
    }
  });

  // ../node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS({
    "../node_modules/lodash/_baseIteratee.js"(exports, module) {
      var baseMatches = require_baseMatches();
      var baseMatchesProperty = require_baseMatchesProperty();
      var identity = require_identity();
      var isArray = require_isArray();
      var property = require_property();
      function baseIteratee(value) {
        if (typeof value == "function") {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == "object") {
          return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
        }
        return property(value);
      }
      module.exports = baseIteratee;
    }
  });

  // ../node_modules/lodash/_baseMap.js
  var require_baseMap = __commonJS({
    "../node_modules/lodash/_baseMap.js"(exports, module) {
      var baseEach = require_baseEach();
      var isArrayLike = require_isArrayLike();
      function baseMap(collection, iteratee) {
        var index2 = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
        baseEach(collection, function(value, key, collection2) {
          result[++index2] = iteratee(value, key, collection2);
        });
        return result;
      }
      module.exports = baseMap;
    }
  });

  // ../node_modules/lodash/map.js
  var require_map = __commonJS({
    "../node_modules/lodash/map.js"(exports, module) {
      var arrayMap = require_arrayMap();
      var baseIteratee = require_baseIteratee();
      var baseMap = require_baseMap();
      var isArray = require_isArray();
      function map(collection, iteratee) {
        var func3 = isArray(collection) ? arrayMap : baseMap;
        return func3(collection, baseIteratee(iteratee, 3));
      }
      module.exports = map;
    }
  });

  // ../node_modules/lodash/_isFlattenable.js
  var require_isFlattenable = __commonJS({
    "../node_modules/lodash/_isFlattenable.js"(exports, module) {
      var Symbol3 = require_Symbol();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var spreadableSymbol = Symbol3 ? Symbol3.isConcatSpreadable : void 0;
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
      }
      module.exports = isFlattenable;
    }
  });

  // ../node_modules/lodash/_baseFlatten.js
  var require_baseFlatten = __commonJS({
    "../node_modules/lodash/_baseFlatten.js"(exports, module) {
      var arrayPush = require_arrayPush();
      var isFlattenable = require_isFlattenable();
      function baseFlatten(array2, depth, predicate, isStrict, result) {
        var index2 = -1, length2 = array2.length;
        predicate || (predicate = isFlattenable);
        result || (result = []);
        while (++index2 < length2) {
          var value = array2[index2];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }
      module.exports = baseFlatten;
    }
  });

  // ../node_modules/lodash/_baseFindIndex.js
  var require_baseFindIndex = __commonJS({
    "../node_modules/lodash/_baseFindIndex.js"(exports, module) {
      function baseFindIndex(array2, predicate, fromIndex, fromRight) {
        var length2 = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
        while (fromRight ? index2-- : ++index2 < length2) {
          if (predicate(array2[index2], index2, array2)) {
            return index2;
          }
        }
        return -1;
      }
      module.exports = baseFindIndex;
    }
  });

  // ../node_modules/lodash/_baseIsNaN.js
  var require_baseIsNaN = __commonJS({
    "../node_modules/lodash/_baseIsNaN.js"(exports, module) {
      function baseIsNaN(value) {
        return value !== value;
      }
      module.exports = baseIsNaN;
    }
  });

  // ../node_modules/lodash/_strictIndexOf.js
  var require_strictIndexOf = __commonJS({
    "../node_modules/lodash/_strictIndexOf.js"(exports, module) {
      function strictIndexOf(array2, value, fromIndex) {
        var index2 = fromIndex - 1, length2 = array2.length;
        while (++index2 < length2) {
          if (array2[index2] === value) {
            return index2;
          }
        }
        return -1;
      }
      module.exports = strictIndexOf;
    }
  });

  // ../node_modules/lodash/_baseIndexOf.js
  var require_baseIndexOf = __commonJS({
    "../node_modules/lodash/_baseIndexOf.js"(exports, module) {
      var baseFindIndex = require_baseFindIndex();
      var baseIsNaN = require_baseIsNaN();
      var strictIndexOf = require_strictIndexOf();
      function baseIndexOf(array2, value, fromIndex) {
        return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
      }
      module.exports = baseIndexOf;
    }
  });

  // ../node_modules/lodash/_arrayIncludes.js
  var require_arrayIncludes = __commonJS({
    "../node_modules/lodash/_arrayIncludes.js"(exports, module) {
      var baseIndexOf = require_baseIndexOf();
      function arrayIncludes(array2, value) {
        var length2 = array2 == null ? 0 : array2.length;
        return !!length2 && baseIndexOf(array2, value, 0) > -1;
      }
      module.exports = arrayIncludes;
    }
  });

  // ../node_modules/lodash/_arrayIncludesWith.js
  var require_arrayIncludesWith = __commonJS({
    "../node_modules/lodash/_arrayIncludesWith.js"(exports, module) {
      function arrayIncludesWith(array2, value, comparator) {
        var index2 = -1, length2 = array2 == null ? 0 : array2.length;
        while (++index2 < length2) {
          if (comparator(value, array2[index2])) {
            return true;
          }
        }
        return false;
      }
      module.exports = arrayIncludesWith;
    }
  });

  // ../node_modules/lodash/noop.js
  var require_noop = __commonJS({
    "../node_modules/lodash/noop.js"(exports, module) {
      function noop4() {
      }
      module.exports = noop4;
    }
  });

  // ../node_modules/lodash/_createSet.js
  var require_createSet = __commonJS({
    "../node_modules/lodash/_createSet.js"(exports, module) {
      var Set2 = require_Set();
      var noop4 = require_noop();
      var setToArray = require_setToArray();
      var INFINITY = 1 / 0;
      var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop4 : function(values2) {
        return new Set2(values2);
      };
      module.exports = createSet;
    }
  });

  // ../node_modules/lodash/_baseUniq.js
  var require_baseUniq = __commonJS({
    "../node_modules/lodash/_baseUniq.js"(exports, module) {
      var SetCache = require_SetCache();
      var arrayIncludes = require_arrayIncludes();
      var arrayIncludesWith = require_arrayIncludesWith();
      var cacheHas = require_cacheHas();
      var createSet = require_createSet();
      var setToArray = require_setToArray();
      var LARGE_ARRAY_SIZE = 200;
      function baseUniq(array2, iteratee, comparator) {
        var index2 = -1, includes2 = arrayIncludes, length2 = array2.length, isCommon = true, result = [], seen = result;
        if (comparator) {
          isCommon = false;
          includes2 = arrayIncludesWith;
        } else if (length2 >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array2);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes2 = cacheHas;
          seen = new SetCache();
        } else {
          seen = iteratee ? [] : result;
        }
        outer:
          while (++index2 < length2) {
            var value = array2[index2], computed = iteratee ? iteratee(value) : value;
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var seenIndex = seen.length;
              while (seenIndex--) {
                if (seen[seenIndex] === computed) {
                  continue outer;
                }
              }
              if (iteratee) {
                seen.push(computed);
              }
              result.push(value);
            } else if (!includes2(seen, computed, comparator)) {
              if (seen !== result) {
                seen.push(computed);
              }
              result.push(value);
            }
          }
        return result;
      }
      module.exports = baseUniq;
    }
  });

  // ../node_modules/lodash/union.js
  var require_union = __commonJS({
    "../node_modules/lodash/union.js"(exports, module) {
      var baseFlatten = require_baseFlatten();
      var baseRest = require_baseRest();
      var baseUniq = require_baseUniq();
      var isArrayLikeObject = require_isArrayLikeObject();
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });
      module.exports = union;
    }
  });

  // ../node_modules/lodash/last.js
  var require_last = __commonJS({
    "../node_modules/lodash/last.js"(exports, module) {
      function last(array2) {
        var length2 = array2 == null ? 0 : array2.length;
        return length2 ? array2[length2 - 1] : void 0;
      }
      module.exports = last;
    }
  });

  // ../node_modules/lodash/_baseSlice.js
  var require_baseSlice = __commonJS({
    "../node_modules/lodash/_baseSlice.js"(exports, module) {
      function baseSlice(array2, start2, end2) {
        var index2 = -1, length2 = array2.length;
        if (start2 < 0) {
          start2 = -start2 > length2 ? 0 : length2 + start2;
        }
        end2 = end2 > length2 ? length2 : end2;
        if (end2 < 0) {
          end2 += length2;
        }
        length2 = start2 > end2 ? 0 : end2 - start2 >>> 0;
        start2 >>>= 0;
        var result = Array(length2);
        while (++index2 < length2) {
          result[index2] = array2[index2 + start2];
        }
        return result;
      }
      module.exports = baseSlice;
    }
  });

  // ../node_modules/lodash/_parent.js
  var require_parent = __commonJS({
    "../node_modules/lodash/_parent.js"(exports, module) {
      var baseGet = require_baseGet();
      var baseSlice = require_baseSlice();
      function parent(object2, path2) {
        return path2.length < 2 ? object2 : baseGet(object2, baseSlice(path2, 0, -1));
      }
      module.exports = parent;
    }
  });

  // ../node_modules/lodash/_baseInvoke.js
  var require_baseInvoke = __commonJS({
    "../node_modules/lodash/_baseInvoke.js"(exports, module) {
      var apply = require_apply();
      var castPath = require_castPath();
      var last = require_last();
      var parent = require_parent();
      var toKey = require_toKey();
      function baseInvoke(object2, path2, args) {
        path2 = castPath(path2, object2);
        object2 = parent(object2, path2);
        var func3 = object2 == null ? object2 : object2[toKey(last(path2))];
        return func3 == null ? void 0 : apply(func3, object2, args);
      }
      module.exports = baseInvoke;
    }
  });

  // ../node_modules/lodash/invoke.js
  var require_invoke = __commonJS({
    "../node_modules/lodash/invoke.js"(exports, module) {
      var baseInvoke = require_baseInvoke();
      var baseRest = require_baseRest();
      var invoke = baseRest(baseInvoke);
      module.exports = invoke;
    }
  });

  // ../node_modules/lodash/uniqueId.js
  var require_uniqueId = __commonJS({
    "../node_modules/lodash/uniqueId.js"(exports, module) {
      var toString2 = require_toString();
      var idCounter = 0;
      function uniqueId(prefix2) {
        var id = ++idCounter;
        return toString2(prefix2) + id;
      }
      module.exports = uniqueId;
    }
  });

  // ../node_modules/classnames/index.js
  var require_classnames = __commonJS({
    "../node_modules/classnames/index.js"(exports, module) {
      (function() {
        "use strict";
        var hasOwn = {}.hasOwnProperty;
        var nativeCodeString = "[native code]";
        function classNames2() {
          var classes = [];
          for (var i2 = 0; i2 < arguments.length; i2++) {
            var arg = arguments[i2];
            if (!arg)
              continue;
            var argType = typeof arg;
            if (argType === "string" || argType === "number") {
              classes.push(arg);
            } else if (Array.isArray(arg)) {
              if (arg.length) {
                var inner = classNames2.apply(null, arg);
                if (inner) {
                  classes.push(inner);
                }
              }
            } else if (argType === "object") {
              if (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes("[native code]")) {
                classes.push(arg.toString());
                continue;
              }
              for (var key in arg) {
                if (hasOwn.call(arg, key) && arg[key]) {
                  classes.push(key);
                }
              }
            }
          }
          return classes.join(" ");
        }
        if (typeof module !== "undefined" && module.exports) {
          classNames2.default = classNames2;
          module.exports = classNames2;
        } else if (typeof define === "function" && typeof define.amd === "object" && define.amd) {
          define("classnames", [], function() {
            return classNames2;
          });
        } else {
          window.classNames = classNames2;
        }
      })();
    }
  });

  // ../node_modules/lodash/isEmpty.js
  var require_isEmpty = __commonJS({
    "../node_modules/lodash/isEmpty.js"(exports, module) {
      var baseKeys = require_baseKeys();
      var getTag = require_getTag();
      var isArguments = require_isArguments();
      var isArray = require_isArray();
      var isArrayLike = require_isArrayLike();
      var isBuffer2 = require_isBuffer();
      var isPrototype = require_isPrototype();
      var isTypedArray = require_isTypedArray();
      var mapTag = "[object Map]";
      var setTag = "[object Set]";
      var objectProto = Object.prototype;
      var hasOwnProperty2 = objectProto.hasOwnProperty;
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty2.call(value, key)) {
            return false;
          }
        }
        return true;
      }
      module.exports = isEmpty;
    }
  });

  // ../node_modules/lodash/_baseFilter.js
  var require_baseFilter = __commonJS({
    "../node_modules/lodash/_baseFilter.js"(exports, module) {
      var baseEach = require_baseEach();
      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function(value, index2, collection2) {
          if (predicate(value, index2, collection2)) {
            result.push(value);
          }
        });
        return result;
      }
      module.exports = baseFilter;
    }
  });

  // ../node_modules/lodash/filter.js
  var require_filter = __commonJS({
    "../node_modules/lodash/filter.js"(exports, module) {
      var arrayFilter = require_arrayFilter();
      var baseFilter = require_baseFilter();
      var baseIteratee = require_baseIteratee();
      var isArray = require_isArray();
      function filter2(collection, predicate) {
        var func3 = isArray(collection) ? arrayFilter : baseFilter;
        return func3(collection, baseIteratee(predicate, 3));
      }
      module.exports = filter2;
    }
  });

  // ../node_modules/lodash/isNil.js
  var require_isNil = __commonJS({
    "../node_modules/lodash/isNil.js"(exports, module) {
      function isNil(value) {
        return value == null;
      }
      module.exports = isNil;
    }
  });

  // ../node_modules/hyphenate-style-name/index.cjs.js
  var require_index_cjs = __commonJS({
    "../node_modules/hyphenate-style-name/index.cjs.js"(exports, module) {
      "use strict";
      var uppercasePattern = /[A-Z]/g;
      var msPattern = /^ms-/;
      var cache3 = {};
      function toHyphenLower(match2) {
        return "-" + match2.toLowerCase();
      }
      function hyphenateStyleName(name) {
        if (cache3.hasOwnProperty(name)) {
          return cache3[name];
        }
        var hName = name.replace(uppercasePattern, toHyphenLower);
        return cache3[name] = msPattern.test(hName) ? "-" + hName : hName;
      }
      module.exports = hyphenateStyleName;
    }
  });

  // ../node_modules/css-in-js-utils/lib/hyphenateProperty.js
  var require_hyphenateProperty = __commonJS({
    "../node_modules/css-in-js-utils/lib/hyphenateProperty.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = hyphenateProperty;
      var _hyphenateStyleName = require_index_cjs();
      var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function hyphenateProperty(property) {
        return (0, _hyphenateStyleName2["default"])(property);
      }
    }
  });

  // ../node_modules/css-in-js-utils/lib/cssifyDeclaration.js
  var require_cssifyDeclaration = __commonJS({
    "../node_modules/css-in-js-utils/lib/cssifyDeclaration.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = cssifyDeclaration3;
      var _hyphenateProperty = require_hyphenateProperty();
      var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function cssifyDeclaration3(property, value) {
        return (0, _hyphenateProperty2["default"])(property) + ":" + value;
      }
    }
  });

  // ../node_modules/fast-loops/lib/arrayEach.js
  var require_arrayEach2 = __commonJS({
    "../node_modules/fast-loops/lib/arrayEach.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = arrayEach3;
      function arrayEach3(arr, iterator) {
        for (var i2 = 0, len = arr.length; i2 < len; ++i2) {
          iterator(arr[i2], i2, len, arr);
        }
      }
    }
  });

  // ../node_modules/isobject/index.js
  var require_isobject = __commonJS({
    "../node_modules/isobject/index.js"(exports, module) {
      "use strict";
      module.exports = function isObject6(val) {
        return val != null && typeof val === "object" && Array.isArray(val) === false;
      };
    }
  });

  // ../node_modules/fast-loops/lib/arrayReduce.js
  var require_arrayReduce = __commonJS({
    "../node_modules/fast-loops/lib/arrayReduce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = arrayReduce6;
      function arrayReduce6(arr, reducer, initialValue) {
        for (var i2 = 0, len = arr.length; i2 < len; ++i2) {
          initialValue = reducer(initialValue, arr[i2], i2, len, arr);
        }
        return initialValue;
      }
    }
  });

  // ../node_modules/fast-loops/lib/objectReduce.js
  var require_objectReduce = __commonJS({
    "../node_modules/fast-loops/lib/objectReduce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = objectReduce2;
      function objectReduce2(obj, reducer, initialValue) {
        for (var key in obj) {
          initialValue = reducer(initialValue, obj[key], key, obj);
        }
        return initialValue;
      }
    }
  });

  // ../node_modules/css-in-js-utils/lib/camelCaseProperty.js
  var require_camelCaseProperty = __commonJS({
    "../node_modules/css-in-js-utils/lib/camelCaseProperty.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = camelCaseProperty3;
      var DASH2 = /-([a-z])/g;
      var MS3 = /^Ms/g;
      var cache3 = {};
      function toUpper2(match2) {
        return match2[1].toUpperCase();
      }
      function camelCaseProperty3(property) {
        if (cache3.hasOwnProperty(property)) {
          return cache3[property];
        }
        var camelProp = property.replace(DASH2, toUpper2).replace(MS3, "ms");
        cache3[property] = camelProp;
        return camelProp;
      }
    }
  });

  // ../node_modules/css-in-js-utils/lib/cssifyObject.js
  var require_cssifyObject = __commonJS({
    "../node_modules/css-in-js-utils/lib/cssifyObject.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = cssifyObject4;
      var _cssifyDeclaration = require_cssifyDeclaration();
      var _cssifyDeclaration2 = _interopRequireDefault(_cssifyDeclaration);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function cssifyObject4(style) {
        var css3 = "";
        for (var property in style) {
          var value = style[property];
          if (typeof value !== "string" && typeof value !== "number") {
            continue;
          }
          if (css3) {
            css3 += ";";
          }
          css3 += (0, _cssifyDeclaration2["default"])(property, value);
        }
        return css3;
      }
    }
  });

  // ../node_modules/css-in-js-utils/lib/assignStyle.js
  var require_assignStyle = __commonJS({
    "../node_modules/css-in-js-utils/lib/assignStyle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = assignStyle2;
      function _typeof3(obj) {
        "@babel/helpers - typeof";
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof3 = function _typeof4(obj2) {
            return typeof obj2;
          };
        } else {
          _typeof3 = function _typeof4(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          };
        }
        return _typeof3(obj);
      }
      function _toConsumableArray3(arr) {
        return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
      }
      function _nonIterableSpread() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
      function _unsupportedIterableToArray(o2, minLen) {
        if (!o2)
          return;
        if (typeof o2 === "string")
          return _arrayLikeToArray(o2, minLen);
        var n3 = Object.prototype.toString.call(o2).slice(8, -1);
        if (n3 === "Object" && o2.constructor)
          n3 = o2.constructor.name;
        if (n3 === "Map" || n3 === "Set")
          return Array.from(n3);
        if (n3 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n3))
          return _arrayLikeToArray(o2, minLen);
      }
      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter))
          return Array.from(iter);
      }
      function _arrayWithoutHoles(arr) {
        if (Array.isArray(arr))
          return _arrayLikeToArray(arr);
      }
      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length)
          len = arr.length;
        for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) {
          arr2[i2] = arr[i2];
        }
        return arr2;
      }
      function filterUniqueArray(arr) {
        return arr.filter(function(val, index2) {
          return arr.lastIndexOf(val) === index2;
        });
      }
      function assignStyle2(base2) {
        for (var i2 = 0, len = arguments.length <= 1 ? 0 : arguments.length - 1; i2 < len; ++i2) {
          var style = i2 + 1 < 1 || arguments.length <= i2 + 1 ? void 0 : arguments[i2 + 1];
          for (var property in style) {
            var value = style[property];
            var baseValue = base2[property];
            if (baseValue && value) {
              if (Array.isArray(baseValue)) {
                base2[property] = filterUniqueArray(baseValue.concat(value));
                continue;
              }
              if (Array.isArray(value)) {
                base2[property] = filterUniqueArray([baseValue].concat(_toConsumableArray3(value)));
                continue;
              }
              if (_typeof3(value) === "object") {
                base2[property] = assignStyle2({}, baseValue, value);
                continue;
              }
            }
            base2[property] = value;
          }
        }
        return base2;
      }
    }
  });

  // ../node_modules/css-in-js-utils/lib/resolveArrayValue.js
  var require_resolveArrayValue = __commonJS({
    "../node_modules/css-in-js-utils/lib/resolveArrayValue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = resolveArrayValue2;
      var _hyphenateProperty = require_hyphenateProperty();
      var _hyphenateProperty2 = _interopRequireDefault(_hyphenateProperty);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { "default": obj };
      }
      function resolveArrayValue2(property, value) {
        return value.join(";" + (0, _hyphenateProperty2["default"])(property) + ":");
      }
    }
  });

  // ../node_modules/@fluentui/react-northstar/node_modules/stylis/stylis.js
  var require_stylis = __commonJS({
    "../node_modules/@fluentui/react-northstar/node_modules/stylis/stylis.js"(exports, module) {
      (function(factory) {
        typeof exports === "object" && typeof module !== "undefined" ? module["exports"] = factory(null) : typeof define === "function" && define["amd"] ? define(factory(null)) : window["stylis"] = factory(null);
      })(
        /** @param {*=} options */
        function factory(options) {
          "use strict";
          var nullptn = /^\0+/g;
          var formatptn = /[\0\r\f]/g;
          var colonptn = /: */g;
          var cursorptn = /zoo|gra/;
          var transformptn = /([,: ])(transform)/g;
          var animationptn = /,+\s*(?![^(]*[)])/g;
          var propertiesptn = / +\s*(?![^(]*[)])/g;
          var elementptn = / *[\0] */g;
          var selectorptn = /,\r+?/g;
          var andptn = /([\t\r\n ])*\f?&/g;
          var escapeptn = /:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g;
          var invalidptn = /\W+/g;
          var keyframeptn = /@(k\w+)\s*(\S*)\s*/;
          var plcholdrptn = /::(place)/g;
          var readonlyptn = /:(read-only)/g;
          var beforeptn = /\s+(?=[{\];=:>])/g;
          var afterptn = /([[}=:>])\s+/g;
          var tailptn = /(\{[^{]+?);(?=\})/g;
          var whiteptn = /\s{2,}/g;
          var pseudoptn = /([^\(])(:+) */g;
          var writingptn = /[svh]\w+-[tblr]{2}/;
          var gradientptn = /([\w-]+t\()/g;
          var supportsptn = /\(\s*(.*)\s*\)/g;
          var propertyptn = /([\s\S]*?);/g;
          var selfptn = /-self|flex-/g;
          var pseudofmt = /[^]*?(:[rp][el]a[\w-]+)[^]*/;
          var trimptn = /[ \t]+$/;
          var dimensionptn = /stretch|:\s*\w+\-(?:conte|avail)/;
          var imgsrcptn = /([^-])(image-set\()/;
          var webkit = "-webkit-";
          var moz = "-moz-";
          var ms = "-ms-";
          var SEMICOLON = 59;
          var CLOSEBRACES = 125;
          var OPENBRACES = 123;
          var OPENPARENTHESES = 40;
          var CLOSEPARENTHESES = 41;
          var OPENBRACKET = 91;
          var CLOSEBRACKET = 93;
          var NEWLINE = 10;
          var CARRIAGE = 13;
          var TAB = 9;
          var AT = 64;
          var SPACE = 32;
          var AND = 38;
          var DASH2 = 45;
          var UNDERSCORE = 95;
          var STAR = 42;
          var COMMA = 44;
          var COLON = 58;
          var SINGLEQUOTE = 39;
          var DOUBLEQUOTE = 34;
          var FOWARDSLASH = 47;
          var GREATERTHAN = 62;
          var PLUS = 43;
          var TILDE = 126;
          var NULL = 0;
          var FORMFEED = 12;
          var VERTICALTAB = 11;
          var KEYFRAME = 107;
          var MEDIA = 109;
          var SUPPORTS = 115;
          var PLACEHOLDER = 112;
          var READONLY = 111;
          var IMPORT2 = 105;
          var CHARSET = 99;
          var DOCUMENT = 100;
          var PAGE = 112;
          var column2 = 1;
          var line2 = 1;
          var pattern = 0;
          var cascade = 1;
          var prefix2 = 1;
          var escape2 = 1;
          var compress = 0;
          var semicolon = 0;
          var preserve = 0;
          var array2 = [];
          var plugins = [];
          var plugged = 0;
          var should = null;
          var POSTS = -2;
          var PREPS = -1;
          var UNKWN = 0;
          var PROPS = 1;
          var BLCKS = 2;
          var ATRUL = 3;
          var unkwn = 0;
          var keyed = 1;
          var key = "";
          var nscopealt = "";
          var nscope = "";
          function compile2(parent, current, body4, id, depth) {
            var bracket = 0;
            var comment2 = 0;
            var parentheses = 0;
            var quote = 0;
            var first = 0;
            var second = 0;
            var code2 = 0;
            var tail = 0;
            var trail = 0;
            var peak = 0;
            var counter = 0;
            var context = 0;
            var atrule = 0;
            var pseudo = 0;
            var caret2 = 0;
            var format2 = 0;
            var insert = 0;
            var invert = 0;
            var length2 = 0;
            var eof = body4.length;
            var eol = eof - 1;
            var char2 = "";
            var chars3 = "";
            var child = "";
            var out = "";
            var children = "";
            var flat = "";
            var selector;
            var result;
            while (caret2 < eof) {
              code2 = body4.charCodeAt(caret2);
              if (caret2 === eol) {
                if (comment2 + quote + parentheses + bracket !== 0) {
                  if (comment2 !== 0) {
                    code2 = comment2 === FOWARDSLASH ? NEWLINE : FOWARDSLASH;
                  }
                  quote = parentheses = bracket = 0;
                  eof++;
                  eol++;
                }
              }
              if (comment2 + quote + parentheses + bracket === 0) {
                if (caret2 === eol) {
                  if (format2 > 0) {
                    chars3 = chars3.replace(formatptn, "");
                  }
                  if (chars3.trim().length > 0) {
                    switch (code2) {
                      case SPACE:
                      case TAB:
                      case SEMICOLON:
                      case CARRIAGE:
                      case NEWLINE: {
                        break;
                      }
                      default: {
                        chars3 += body4.charAt(caret2);
                      }
                    }
                    code2 = SEMICOLON;
                  }
                }
                if (insert === 1) {
                  switch (code2) {
                    case OPENBRACES:
                    case CLOSEBRACES:
                    case SEMICOLON:
                    case DOUBLEQUOTE:
                    case SINGLEQUOTE:
                    case OPENPARENTHESES:
                    case CLOSEPARENTHESES:
                    case COMMA: {
                      insert = 0;
                    }
                    case TAB:
                    case CARRIAGE:
                    case NEWLINE:
                    case SPACE: {
                      break;
                    }
                    default: {
                      insert = 0;
                      length2 = caret2;
                      first = code2;
                      caret2--;
                      code2 = SEMICOLON;
                      while (length2 < eof) {
                        switch (body4.charCodeAt(length2++)) {
                          case NEWLINE:
                          case CARRIAGE:
                          case SEMICOLON: {
                            ++caret2;
                            code2 = first;
                            length2 = eof;
                            break;
                          }
                          case COLON: {
                            if (format2 > 0) {
                              ++caret2;
                              code2 = first;
                            }
                          }
                          case OPENBRACES: {
                            length2 = eof;
                          }
                        }
                      }
                    }
                  }
                }
                switch (code2) {
                  case OPENBRACES: {
                    chars3 = chars3.trim();
                    first = chars3.charCodeAt(0);
                    counter = 1;
                    length2 = ++caret2;
                    while (caret2 < eof) {
                      switch (code2 = body4.charCodeAt(caret2)) {
                        case OPENBRACES: {
                          counter++;
                          break;
                        }
                        case CLOSEBRACES: {
                          counter--;
                          break;
                        }
                        case FOWARDSLASH: {
                          switch (second = body4.charCodeAt(caret2 + 1)) {
                            case STAR:
                            case FOWARDSLASH: {
                              caret2 = delimited(second, caret2, eol, body4);
                            }
                          }
                          break;
                        }
                        case OPENBRACKET: {
                          code2++;
                        }
                        case OPENPARENTHESES: {
                          code2++;
                        }
                        case DOUBLEQUOTE:
                        case SINGLEQUOTE: {
                          while (caret2++ < eol) {
                            if (body4.charCodeAt(caret2) === code2) {
                              break;
                            }
                          }
                        }
                      }
                      if (counter === 0) {
                        break;
                      }
                      caret2++;
                    }
                    child = body4.substring(length2, caret2);
                    if (first === NULL) {
                      first = (chars3 = chars3.replace(nullptn, "").trim()).charCodeAt(0);
                    }
                    switch (first) {
                      case AT: {
                        if (format2 > 0) {
                          chars3 = chars3.replace(formatptn, "");
                        }
                        second = chars3.charCodeAt(1);
                        switch (second) {
                          case DOCUMENT:
                          case MEDIA:
                          case SUPPORTS:
                          case DASH2: {
                            selector = current;
                            break;
                          }
                          default: {
                            selector = array2;
                          }
                        }
                        child = compile2(current, selector, child, second, depth + 1);
                        length2 = child.length;
                        if (preserve > 0 && length2 === 0) {
                          length2 = chars3.length;
                        }
                        if (plugged > 0) {
                          selector = select(array2, chars3, invert);
                          result = proxy(ATRUL, child, selector, current, line2, column2, length2, second, depth, id);
                          chars3 = selector.join("");
                          if (result !== void 0) {
                            if ((length2 = (child = result.trim()).length) === 0) {
                              second = 0;
                              child = "";
                            }
                          }
                        }
                        if (length2 > 0) {
                          switch (second) {
                            case SUPPORTS: {
                              chars3 = chars3.replace(supportsptn, supports);
                            }
                            case DOCUMENT:
                            case MEDIA:
                            case DASH2: {
                              child = chars3 + "{" + child + "}";
                              break;
                            }
                            case KEYFRAME: {
                              chars3 = chars3.replace(keyframeptn, "$1 $2" + (keyed > 0 ? key : ""));
                              child = chars3 + "{" + child + "}";
                              if (prefix2 === 1 || prefix2 === 2 && vendor("@" + child, 3)) {
                                child = "@" + webkit + child + "@" + child;
                              } else {
                                child = "@" + child;
                              }
                              break;
                            }
                            default: {
                              child = chars3 + child;
                              if (id === PAGE) {
                                child = (out += child, "");
                              }
                            }
                          }
                        } else {
                          child = "";
                        }
                        break;
                      }
                      default: {
                        child = compile2(current, select(current, chars3, invert), child, id, depth + 1);
                      }
                    }
                    children += child;
                    context = 0;
                    insert = 0;
                    pseudo = 0;
                    format2 = 0;
                    invert = 0;
                    atrule = 0;
                    chars3 = "";
                    child = "";
                    code2 = body4.charCodeAt(++caret2);
                    break;
                  }
                  case CLOSEBRACES:
                  case SEMICOLON: {
                    chars3 = (format2 > 0 ? chars3.replace(formatptn, "") : chars3).trim();
                    if ((length2 = chars3.length) > 1) {
                      if (pseudo === 0) {
                        first = chars3.charCodeAt(0);
                        if (first === DASH2 || first > 96 && first < 123) {
                          length2 = (chars3 = chars3.replace(" ", ":")).length;
                        }
                      }
                      if (plugged > 0) {
                        if ((result = proxy(PROPS, chars3, current, parent, line2, column2, out.length, id, depth, id)) !== void 0) {
                          if ((length2 = (chars3 = result.trim()).length) === 0) {
                            chars3 = "\0\0";
                          }
                        }
                      }
                      first = chars3.charCodeAt(0);
                      second = chars3.charCodeAt(1);
                      switch (first) {
                        case NULL: {
                          break;
                        }
                        case AT: {
                          if (second === IMPORT2 || second === CHARSET) {
                            flat += chars3 + body4.charAt(caret2);
                            break;
                          }
                        }
                        default: {
                          if (chars3.charCodeAt(length2 - 1) === COLON) {
                            break;
                          }
                          out += property(chars3, first, second, chars3.charCodeAt(2));
                        }
                      }
                    }
                    context = 0;
                    insert = 0;
                    pseudo = 0;
                    format2 = 0;
                    invert = 0;
                    chars3 = "";
                    code2 = body4.charCodeAt(++caret2);
                    break;
                  }
                }
              }
              switch (code2) {
                case CARRIAGE:
                case NEWLINE: {
                  if (comment2 + quote + parentheses + bracket + semicolon === 0) {
                    switch (peak) {
                      case CLOSEPARENTHESES:
                      case SINGLEQUOTE:
                      case DOUBLEQUOTE:
                      case AT:
                      case TILDE:
                      case GREATERTHAN:
                      case STAR:
                      case PLUS:
                      case FOWARDSLASH:
                      case DASH2:
                      case COLON:
                      case COMMA:
                      case SEMICOLON:
                      case OPENBRACES:
                      case CLOSEBRACES: {
                        break;
                      }
                      default: {
                        if (pseudo > 0) {
                          insert = 1;
                        }
                      }
                    }
                  }
                  if (comment2 === FOWARDSLASH) {
                    comment2 = 0;
                  } else if (cascade + context === 0 && id !== KEYFRAME && chars3.length > 0) {
                    format2 = 1;
                    chars3 += "\0";
                  }
                  if (plugged * unkwn > 0) {
                    proxy(UNKWN, chars3, current, parent, line2, column2, out.length, id, depth, id);
                  }
                  column2 = 1;
                  line2++;
                  break;
                }
                case SEMICOLON:
                case CLOSEBRACES: {
                  if (comment2 + quote + parentheses + bracket === 0) {
                    column2++;
                    break;
                  }
                }
                default: {
                  column2++;
                  char2 = body4.charAt(caret2);
                  switch (code2) {
                    case TAB:
                    case SPACE: {
                      if (quote + bracket + comment2 === 0) {
                        switch (tail) {
                          case COMMA:
                          case COLON:
                          case TAB:
                          case SPACE: {
                            char2 = "";
                            break;
                          }
                          default: {
                            if (code2 !== SPACE) {
                              char2 = " ";
                            }
                          }
                        }
                      }
                      break;
                    }
                    case NULL: {
                      char2 = "\\0";
                      break;
                    }
                    case FORMFEED: {
                      char2 = "\\f";
                      break;
                    }
                    case VERTICALTAB: {
                      char2 = "\\v";
                      break;
                    }
                    case AND: {
                      if (quote + comment2 + bracket === 0 && cascade > 0) {
                        invert = 1;
                        format2 = 1;
                        char2 = "\f" + char2;
                      }
                      break;
                    }
                    case 108: {
                      if (quote + comment2 + bracket + pattern === 0 && pseudo > 0) {
                        switch (caret2 - pseudo) {
                          case 2: {
                            if (tail === PLACEHOLDER && body4.charCodeAt(caret2 - 3) === COLON) {
                              pattern = tail;
                            }
                          }
                          case 8: {
                            if (trail === READONLY) {
                              pattern = trail;
                            }
                          }
                        }
                      }
                      break;
                    }
                    case COLON: {
                      if (quote + comment2 + bracket === 0) {
                        pseudo = caret2;
                      }
                      break;
                    }
                    case COMMA: {
                      if (comment2 + parentheses + quote + bracket === 0) {
                        format2 = 1;
                        char2 += "\r";
                      }
                      break;
                    }
                    case DOUBLEQUOTE:
                    case SINGLEQUOTE: {
                      if (comment2 === 0) {
                        quote = quote === code2 ? 0 : quote === 0 ? code2 : quote;
                      }
                      break;
                    }
                    case OPENBRACKET: {
                      if (quote + comment2 + parentheses === 0) {
                        bracket++;
                      }
                      break;
                    }
                    case CLOSEBRACKET: {
                      if (quote + comment2 + parentheses === 0) {
                        bracket--;
                      }
                      break;
                    }
                    case CLOSEPARENTHESES: {
                      if (quote + comment2 + bracket === 0) {
                        parentheses--;
                      }
                      break;
                    }
                    case OPENPARENTHESES: {
                      if (quote + comment2 + bracket === 0) {
                        if (context === 0) {
                          switch (tail * 2 + trail * 3) {
                            case 533: {
                              break;
                            }
                            default: {
                              counter = 0;
                              context = 1;
                            }
                          }
                        }
                        parentheses++;
                      }
                      break;
                    }
                    case AT: {
                      if (comment2 + parentheses + quote + bracket + pseudo + atrule === 0) {
                        atrule = 1;
                      }
                      break;
                    }
                    case STAR:
                    case FOWARDSLASH: {
                      if (quote + bracket + parentheses > 0) {
                        break;
                      }
                      switch (comment2) {
                        case 0: {
                          switch (code2 * 2 + body4.charCodeAt(caret2 + 1) * 3) {
                            case 235: {
                              comment2 = FOWARDSLASH;
                              break;
                            }
                            case 220: {
                              length2 = caret2;
                              comment2 = STAR;
                              break;
                            }
                          }
                          break;
                        }
                        case STAR: {
                          if (code2 === FOWARDSLASH && tail === STAR && length2 + 2 !== caret2) {
                            if (body4.charCodeAt(length2 + 2) === 33) {
                              out += body4.substring(length2, caret2 + 1);
                            }
                            char2 = "";
                            comment2 = 0;
                          }
                        }
                      }
                    }
                  }
                  if (comment2 === 0) {
                    if (cascade + quote + bracket + atrule === 0 && id !== KEYFRAME && code2 !== SEMICOLON) {
                      switch (code2) {
                        case COMMA:
                        case TILDE:
                        case GREATERTHAN:
                        case PLUS:
                        case CLOSEPARENTHESES:
                        case OPENPARENTHESES: {
                          if (context === 0) {
                            switch (tail) {
                              case TAB:
                              case SPACE:
                              case NEWLINE:
                              case CARRIAGE: {
                                char2 = char2 + "\0";
                                break;
                              }
                              default: {
                                char2 = "\0" + char2 + (code2 === COMMA ? "" : "\0");
                              }
                            }
                            format2 = 1;
                          } else {
                            switch (code2) {
                              case OPENPARENTHESES: {
                                if (pseudo + 7 === caret2 && tail === 108) {
                                  pseudo = 0;
                                }
                                context = ++counter;
                                break;
                              }
                              case CLOSEPARENTHESES: {
                                if ((context = --counter) === 0) {
                                  format2 = 1;
                                  char2 += "\0";
                                }
                                break;
                              }
                            }
                          }
                          break;
                        }
                        case TAB:
                        case SPACE: {
                          switch (tail) {
                            case NULL:
                            case OPENBRACES:
                            case CLOSEBRACES:
                            case SEMICOLON:
                            case COMMA:
                            case FORMFEED:
                            case TAB:
                            case SPACE:
                            case NEWLINE:
                            case CARRIAGE: {
                              break;
                            }
                            default: {
                              if (context === 0) {
                                format2 = 1;
                                char2 += "\0";
                              }
                            }
                          }
                        }
                      }
                    }
                    chars3 += char2;
                    if (code2 !== SPACE && code2 !== TAB) {
                      peak = code2;
                    }
                  }
                }
              }
              trail = tail;
              tail = code2;
              caret2++;
            }
            length2 = out.length;
            if (preserve > 0) {
              if (length2 === 0 && children.length === 0 && current[0].length === 0 === false) {
                if (id !== MEDIA || current.length === 1 && (cascade > 0 ? nscopealt : nscope) === current[0]) {
                  length2 = current.join(",").length + 2;
                }
              }
            }
            if (length2 > 0) {
              selector = cascade === 0 && id !== KEYFRAME ? isolate(current) : current;
              if (plugged > 0) {
                result = proxy(BLCKS, out, selector, parent, line2, column2, length2, id, depth, id);
                if (result !== void 0 && (out = result).length === 0) {
                  return flat + out + children;
                }
              }
              out = selector.join(",") + "{" + out + "}";
              if (prefix2 * pattern !== 0) {
                if (prefix2 === 2 && !vendor(out, 2))
                  pattern = 0;
                switch (pattern) {
                  case READONLY: {
                    out = out.replace(readonlyptn, ":" + moz + "$1") + out;
                    break;
                  }
                  case PLACEHOLDER: {
                    out = out.replace(plcholdrptn, "::" + webkit + "input-$1") + out.replace(plcholdrptn, "::" + moz + "$1") + out.replace(plcholdrptn, ":" + ms + "input-$1") + out;
                    break;
                  }
                }
                pattern = 0;
              }
            }
            return flat + out + children;
          }
          function select(parent, current, invert) {
            var selectors2 = current.trim().split(selectorptn);
            var out = selectors2;
            var length2 = selectors2.length;
            var l3 = parent.length;
            switch (l3) {
              case 0:
              case 1: {
                for (var i2 = 0, selector = l3 === 0 ? "" : parent[0] + " "; i2 < length2; ++i2) {
                  out[i2] = scope(selector, out[i2], invert, l3).trim();
                }
                break;
              }
              default: {
                for (var i2 = 0, j3 = 0, out = []; i2 < length2; ++i2) {
                  for (var k = 0; k < l3; ++k) {
                    out[j3++] = scope(parent[k] + " ", selectors2[i2], invert, l3).trim();
                  }
                }
              }
            }
            return out;
          }
          function scope(parent, current, invert, level) {
            var selector = current;
            var code2 = selector.charCodeAt(0);
            if (code2 < 33) {
              code2 = (selector = selector.trim()).charCodeAt(0);
            }
            switch (code2) {
              case AND: {
                switch (cascade + level) {
                  case 0:
                  case 1: {
                    if (parent.trim().length === 0) {
                      break;
                    }
                  }
                  default: {
                    return selector.replace(andptn, "$1" + parent.trim());
                  }
                }
                break;
              }
              case COLON: {
                switch (selector.charCodeAt(1)) {
                  case 103: {
                    if (escape2 > 0 && cascade > 0) {
                      return selector.replace(escapeptn, "$1").replace(andptn, "$1" + nscope);
                    }
                    break;
                  }
                  default: {
                    return parent.trim() + selector.replace(andptn, "$1" + parent.trim());
                  }
                }
              }
              default: {
                if (invert * cascade > 0 && selector.indexOf("\f") > 0) {
                  return selector.replace(andptn, (parent.charCodeAt(0) === COLON ? "" : "$1") + parent.trim());
                }
              }
            }
            return parent + selector;
          }
          function property(input4, first, second, third) {
            var index2 = 0;
            var out = input4 + ";";
            var hash2 = first * 2 + second * 3 + third * 4;
            var cache3;
            if (hash2 === 944) {
              return animation(out);
            } else if (prefix2 === 0 || prefix2 === 2 && !vendor(out, 1)) {
              return out;
            }
            switch (hash2) {
              case 1015: {
                return out.charCodeAt(10) === 97 ? webkit + out + out : out;
              }
              case 951: {
                return out.charCodeAt(3) === 116 ? webkit + out + out : out;
              }
              case 963: {
                return out.charCodeAt(5) === 110 ? webkit + out + out : out;
              }
              case 1009: {
                if (out.charCodeAt(4) !== 100) {
                  break;
                }
              }
              case 969:
              case 942: {
                return webkit + out + out;
              }
              case 978: {
                return webkit + out + moz + out + out;
              }
              case 1019:
              case 983: {
                return webkit + out + moz + out + ms + out + out;
              }
              case 883: {
                if (out.charCodeAt(8) === DASH2) {
                  return webkit + out + out;
                }
                if (out.indexOf("image-set(", 11) > 0) {
                  return out.replace(imgsrcptn, "$1" + webkit + "$2") + out;
                }
                return out;
              }
              case 932: {
                if (out.charCodeAt(4) === DASH2) {
                  switch (out.charCodeAt(5)) {
                    case 103: {
                      return webkit + "box-" + out.replace("-grow", "") + webkit + out + ms + out.replace("grow", "positive") + out;
                    }
                    case 115: {
                      return webkit + out + ms + out.replace("shrink", "negative") + out;
                    }
                    case 98: {
                      return webkit + out + ms + out.replace("basis", "preferred-size") + out;
                    }
                  }
                }
                return webkit + out + ms + out + out;
              }
              case 964: {
                return webkit + out + ms + "flex-" + out + out;
              }
              case 1023: {
                if (out.charCodeAt(8) !== 99) {
                  break;
                }
                cache3 = out.substring(out.indexOf(":", 15)).replace("flex-", "").replace("space-between", "justify");
                return webkit + "box-pack" + cache3 + webkit + out + ms + "flex-pack" + cache3 + out;
              }
              case 1005: {
                return cursorptn.test(out) ? out.replace(colonptn, ":" + webkit) + out.replace(colonptn, ":" + moz) + out : out;
              }
              case 1e3: {
                cache3 = out.substring(13).trim();
                index2 = cache3.indexOf("-") + 1;
                switch (cache3.charCodeAt(0) + cache3.charCodeAt(index2)) {
                  case 226: {
                    cache3 = out.replace(writingptn, "tb");
                    break;
                  }
                  case 232: {
                    cache3 = out.replace(writingptn, "tb-rl");
                    break;
                  }
                  case 220: {
                    cache3 = out.replace(writingptn, "lr");
                    break;
                  }
                  default: {
                    return out;
                  }
                }
                return webkit + out + ms + cache3 + out;
              }
              case 1017: {
                if (out.indexOf("sticky", 9) === -1) {
                  return out;
                }
              }
              case 975: {
                index2 = (out = input4).length - 10;
                cache3 = (out.charCodeAt(index2) === 33 ? out.substring(0, index2) : out).substring(input4.indexOf(":", 7) + 1).trim();
                switch (hash2 = cache3.charCodeAt(0) + (cache3.charCodeAt(7) | 0)) {
                  case 203: {
                    if (cache3.charCodeAt(8) < 111) {
                      break;
                    }
                  }
                  case 115: {
                    out = out.replace(cache3, webkit + cache3) + ";" + out;
                    break;
                  }
                  case 207:
                  case 102: {
                    out = out.replace(cache3, webkit + (hash2 > 102 ? "inline-" : "") + "box") + ";" + out.replace(cache3, webkit + cache3) + ";" + out.replace(cache3, ms + cache3 + "box") + ";" + out;
                  }
                }
                return out + ";";
              }
              case 938: {
                if (out.charCodeAt(5) === DASH2) {
                  switch (out.charCodeAt(6)) {
                    case 105: {
                      cache3 = out.replace("-items", "");
                      return webkit + out + webkit + "box-" + cache3 + ms + "flex-" + cache3 + out;
                    }
                    case 115: {
                      return webkit + out + ms + "flex-item-" + out.replace(selfptn, "") + out;
                    }
                    default: {
                      return webkit + out + ms + "flex-line-pack" + out.replace("align-content", "").replace(selfptn, "") + out;
                    }
                  }
                }
                break;
              }
              case 973:
              case 989: {
                if (out.charCodeAt(3) !== DASH2 || out.charCodeAt(4) === 122) {
                  break;
                }
              }
              case 931:
              case 953: {
                if (dimensionptn.test(input4) === true) {
                  if ((cache3 = input4.substring(input4.indexOf(":") + 1)).charCodeAt(0) === 115)
                    return property(input4.replace("stretch", "fill-available"), first, second, third).replace(":fill-available", ":stretch");
                  else
                    return out.replace(cache3, webkit + cache3) + out.replace(cache3, moz + cache3.replace("fill-", "")) + out;
                }
                break;
              }
              case 962: {
                out = webkit + out + (out.charCodeAt(5) === 102 ? ms + out : "") + out;
                if (second + third === 211 && out.charCodeAt(13) === 105 && out.indexOf("transform", 10) > 0) {
                  return out.substring(0, out.indexOf(";", 27) + 1).replace(transformptn, "$1" + webkit + "$2") + out;
                }
                break;
              }
            }
            return out;
          }
          function vendor(content15, context) {
            var index2 = content15.indexOf(context === 1 ? ":" : "{");
            var key2 = content15.substring(0, context !== 3 ? index2 : 10);
            var value = content15.substring(index2 + 1, content15.length - 1);
            return should(context !== 2 ? key2 : key2.replace(pseudofmt, "$1"), value, context);
          }
          function supports(match3, group) {
            var out = property(group, group.charCodeAt(0), group.charCodeAt(1), group.charCodeAt(2));
            return out !== group + ";" ? out.replace(propertyptn, " or ($1)").substring(4) : "(" + group + ")";
          }
          function animation(input4) {
            var length2 = input4.length;
            var index2 = input4.indexOf(":", 9) + 1;
            var declare = input4.substring(0, index2).trim();
            var out = input4.substring(index2, length2 - 1).trim();
            switch (input4.charCodeAt(9) * keyed) {
              case 0: {
                break;
              }
              case DASH2: {
                if (input4.charCodeAt(10) !== 110) {
                  break;
                }
              }
              default: {
                var list4 = out.split((out = "", animationptn));
                for (var i2 = 0, index2 = 0, length2 = list4.length; i2 < length2; index2 = 0, ++i2) {
                  var value = list4[i2];
                  var items = value.split(propertiesptn);
                  while (value = items[index2]) {
                    var peak = value.charCodeAt(0);
                    if (keyed === 1 && // letters
                    (peak > AT && peak < 90 || peak > 96 && peak < 123 || peak === UNDERSCORE || // dash but not in sequence i.e --
                    peak === DASH2 && value.charCodeAt(1) !== DASH2)) {
                      switch (isNaN(parseFloat(value)) + (value.indexOf("(") !== -1)) {
                        case 1: {
                          switch (value) {
                            case "infinite":
                            case "alternate":
                            case "backwards":
                            case "running":
                            case "normal":
                            case "forwards":
                            case "both":
                            case "none":
                            case "linear":
                            case "ease":
                            case "ease-in":
                            case "ease-out":
                            case "ease-in-out":
                            case "paused":
                            case "reverse":
                            case "alternate-reverse":
                            case "inherit":
                            case "initial":
                            case "unset":
                            case "step-start":
                            case "step-end": {
                              break;
                            }
                            default: {
                              value += key;
                            }
                          }
                        }
                      }
                    }
                    items[index2++] = value;
                  }
                  out += (i2 === 0 ? "" : ",") + items.join(" ");
                }
              }
            }
            out = declare + out + ";";
            if (prefix2 === 1 || prefix2 === 2 && vendor(out, 1))
              return webkit + out + out;
            return out;
          }
          function isolate(current) {
            for (var i2 = 0, length2 = current.length, selector = Array(length2), padding4, element2; i2 < length2; ++i2) {
              var elements = current[i2].split(elementptn);
              var out = "";
              for (var j3 = 0, size = 0, tail = 0, code2 = 0, l3 = elements.length; j3 < l3; ++j3) {
                if ((size = (element2 = elements[j3]).length) === 0 && l3 > 1) {
                  continue;
                }
                tail = out.charCodeAt(out.length - 1);
                code2 = element2.charCodeAt(0);
                padding4 = "";
                if (j3 !== 0) {
                  switch (tail) {
                    case STAR:
                    case TILDE:
                    case GREATERTHAN:
                    case PLUS:
                    case SPACE:
                    case OPENPARENTHESES: {
                      break;
                    }
                    default: {
                      padding4 = " ";
                    }
                  }
                }
                switch (code2) {
                  case AND: {
                    element2 = padding4 + nscopealt;
                  }
                  case TILDE:
                  case GREATERTHAN:
                  case PLUS:
                  case SPACE:
                  case CLOSEPARENTHESES:
                  case OPENPARENTHESES: {
                    break;
                  }
                  case OPENBRACKET: {
                    element2 = padding4 + element2 + nscopealt;
                    break;
                  }
                  case COLON: {
                    switch (element2.charCodeAt(1) * 2 + element2.charCodeAt(2) * 3) {
                      case 530: {
                        if (escape2 > 0) {
                          element2 = padding4 + element2.substring(8, size - 1);
                          break;
                        }
                      }
                      default: {
                        if (j3 < 1 || elements[j3 - 1].length < 1) {
                          element2 = padding4 + nscopealt + element2;
                        }
                      }
                    }
                    break;
                  }
                  case COMMA: {
                    padding4 = "";
                  }
                  default: {
                    if (size > 1 && element2.indexOf(":") > 0) {
                      element2 = padding4 + element2.replace(pseudoptn, "$1" + nscopealt + "$2");
                    } else {
                      element2 = padding4 + element2 + nscopealt;
                    }
                  }
                }
                out += element2;
              }
              selector[i2] = out.replace(formatptn, "").trim();
            }
            return selector;
          }
          function proxy(context, content15, selectors2, parents, line3, column3, length2, id, depth, at) {
            for (var i2 = 0, out = content15, next2; i2 < plugged; ++i2) {
              switch (next2 = plugins[i2].call(stylis2, context, out, selectors2, parents, line3, column3, length2, id, depth, at)) {
                case void 0:
                case false:
                case true:
                case null: {
                  break;
                }
                default: {
                  out = next2;
                }
              }
            }
            if (out !== content15) {
              return out;
            }
          }
          function delimited(code2, index2, length2, body4) {
            for (var i2 = index2 + 1; i2 < length2; ++i2) {
              switch (body4.charCodeAt(i2)) {
                case FOWARDSLASH: {
                  if (code2 === STAR) {
                    if (body4.charCodeAt(i2 - 1) === STAR && index2 + 2 !== i2) {
                      return i2 + 1;
                    }
                  }
                  break;
                }
                case NEWLINE: {
                  if (code2 === FOWARDSLASH) {
                    return i2 + 1;
                  }
                }
              }
            }
            return i2;
          }
          function match2(type, index2, length2, body4) {
            for (var i2 = index2 + 1; i2 < length2; ++i2) {
              switch (body4.charCodeAt(i2)) {
                case type: {
                  return i2;
                }
              }
            }
            return i2;
          }
          function minify(output) {
            return output.replace(formatptn, "").replace(beforeptn, "").replace(afterptn, "$1").replace(tailptn, "$1").replace(whiteptn, " ");
          }
          function use(plugin) {
            switch (plugin) {
              case void 0:
              case null: {
                plugged = plugins.length = 0;
                break;
              }
              default: {
                if (typeof plugin === "function") {
                  plugins[plugged++] = plugin;
                } else if (typeof plugin === "object") {
                  for (var i2 = 0, length2 = plugin.length; i2 < length2; ++i2) {
                    use(plugin[i2]);
                  }
                } else {
                  unkwn = !!plugin | 0;
                }
              }
            }
            return use;
          }
          function set(options2) {
            for (var name in options2) {
              var value = options2[name];
              switch (name) {
                case "keyframe":
                  keyed = value | 0;
                  break;
                case "global":
                  escape2 = value | 0;
                  break;
                case "cascade":
                  cascade = value | 0;
                  break;
                case "compress":
                  compress = value | 0;
                  break;
                case "semicolon":
                  semicolon = value | 0;
                  break;
                case "preserve":
                  preserve = value | 0;
                  break;
                case "prefix":
                  should = null;
                  if (!value) {
                    prefix2 = 0;
                  } else if (typeof value !== "function") {
                    prefix2 = 1;
                  } else {
                    prefix2 = 2;
                    should = value;
                  }
              }
            }
            return set;
          }
          function stylis2(selector, input4) {
            if (this !== void 0 && this.constructor === stylis2) {
              return factory(selector);
            }
            var ns = selector;
            var code2 = ns.charCodeAt(0);
            if (code2 < 33) {
              code2 = (ns = ns.trim()).charCodeAt(0);
            }
            if (keyed > 0) {
              key = ns.replace(invalidptn, code2 === OPENBRACKET ? "" : "-");
            }
            code2 = 1;
            if (cascade === 1) {
              nscope = ns;
            } else {
              nscopealt = ns;
            }
            var selectors2 = [nscope];
            var result;
            if (plugged > 0) {
              result = proxy(PREPS, input4, selectors2, selectors2, line2, column2, 0, 0, 0, 0);
              if (result !== void 0 && typeof result === "string") {
                input4 = result;
              }
            }
            var output = compile2(array2, selectors2, input4, 0, 0);
            if (plugged > 0) {
              result = proxy(POSTS, output, selectors2, selectors2, line2, column2, output.length, 0, 0, 0);
              if (result !== void 0 && typeof (output = result) !== "string") {
                code2 = 0;
              }
            }
            key = "";
            nscope = "";
            nscopealt = "";
            pattern = 0;
            line2 = 1;
            column2 = 1;
            return compress * code2 === 0 ? output : minify(output);
          }
          stylis2["use"] = use;
          stylis2["set"] = set;
          if (options !== void 0) {
            set(options);
          }
          return stylis2;
        }
      );
    }
  });

  // ../node_modules/fast-loops/lib/objectEach.js
  var require_objectEach = __commonJS({
    "../node_modules/fast-loops/lib/objectEach.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports["default"] = objectEach3;
      function objectEach3(obj, iterator) {
        for (var key in obj) {
          iterator(obj[key], key, obj);
        }
      }
    }
  });

  // ../node_modules/lodash/toFinite.js
  var require_toFinite = __commonJS({
    "../node_modules/lodash/toFinite.js"(exports, module) {
      var toNumber = require_toNumber();
      var INFINITY = 1 / 0;
      var MAX_INTEGER = 17976931348623157e292;
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = value < 0 ? -1 : 1;
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }
      module.exports = toFinite;
    }
  });

  // ../node_modules/lodash/toInteger.js
  var require_toInteger = __commonJS({
    "../node_modules/lodash/toInteger.js"(exports, module) {
      var toFinite = require_toFinite();
      function toInteger(value) {
        var result = toFinite(value), remainder = result % 1;
        return result === result ? remainder ? result - remainder : result : 0;
      }
      module.exports = toInteger;
    }
  });

  // ../node_modules/lodash/findIndex.js
  var require_findIndex = __commonJS({
    "../node_modules/lodash/findIndex.js"(exports, module) {
      var baseFindIndex = require_baseFindIndex();
      var baseIteratee = require_baseIteratee();
      var toInteger = require_toInteger();
      var nativeMax = Math.max;
      function findIndex2(array2, predicate, fromIndex) {
        var length2 = array2 == null ? 0 : array2.length;
        if (!length2) {
          return -1;
        }
        var index2 = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index2 < 0) {
          index2 = nativeMax(length2 + index2, 0);
        }
        return baseFindIndex(array2, baseIteratee(predicate, 3), index2);
      }
      module.exports = findIndex2;
    }
  });

  // ../node_modules/lodash/isNumber.js
  var require_isNumber = __commonJS({
    "../node_modules/lodash/isNumber.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var numberTag = "[object Number]";
      function isNumber2(value) {
        return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
      }
      module.exports = isNumber2;
    }
  });

  // ../node_modules/lodash/_baseDifference.js
  var require_baseDifference = __commonJS({
    "../node_modules/lodash/_baseDifference.js"(exports, module) {
      var SetCache = require_SetCache();
      var arrayIncludes = require_arrayIncludes();
      var arrayIncludesWith = require_arrayIncludesWith();
      var arrayMap = require_arrayMap();
      var baseUnary = require_baseUnary();
      var cacheHas = require_cacheHas();
      var LARGE_ARRAY_SIZE = 200;
      function baseDifference(array2, values2, iteratee, comparator) {
        var index2 = -1, includes2 = arrayIncludes, isCommon = true, length2 = array2.length, result = [], valuesLength = values2.length;
        if (!length2) {
          return result;
        }
        if (iteratee) {
          values2 = arrayMap(values2, baseUnary(iteratee));
        }
        if (comparator) {
          includes2 = arrayIncludesWith;
          isCommon = false;
        } else if (values2.length >= LARGE_ARRAY_SIZE) {
          includes2 = cacheHas;
          isCommon = false;
          values2 = new SetCache(values2);
        }
        outer:
          while (++index2 < length2) {
            var value = array2[index2], computed = iteratee == null ? value : iteratee(value);
            value = comparator || value !== 0 ? value : 0;
            if (isCommon && computed === computed) {
              var valuesIndex = valuesLength;
              while (valuesIndex--) {
                if (values2[valuesIndex] === computed) {
                  continue outer;
                }
              }
              result.push(value);
            } else if (!includes2(values2, computed, comparator)) {
              result.push(value);
            }
          }
        return result;
      }
      module.exports = baseDifference;
    }
  });

  // ../node_modules/lodash/differenceBy.js
  var require_differenceBy = __commonJS({
    "../node_modules/lodash/differenceBy.js"(exports, module) {
      var baseDifference = require_baseDifference();
      var baseFlatten = require_baseFlatten();
      var baseIteratee = require_baseIteratee();
      var baseRest = require_baseRest();
      var isArrayLikeObject = require_isArrayLikeObject();
      var last = require_last();
      var differenceBy = baseRest(function(array2, values2) {
        var iteratee = last(values2);
        if (isArrayLikeObject(iteratee)) {
          iteratee = void 0;
        }
        return isArrayLikeObject(array2) ? baseDifference(array2, baseFlatten(values2, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2)) : [];
      });
      module.exports = differenceBy;
    }
  });

  // ../node_modules/lodash/isBoolean.js
  var require_isBoolean = __commonJS({
    "../node_modules/lodash/isBoolean.js"(exports, module) {
      var baseGetTag = require_baseGetTag();
      var isObjectLike = require_isObjectLike();
      var boolTag = "[object Boolean]";
      function isBoolean2(value) {
        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
      }
      module.exports = isBoolean2;
    }
  });

  // src/index.tsx
  var import_react63 = __toESM(require_react(), 1);
  var import_client = __toESM(require_client(), 1);

  // ../node_modules/@griffel/core/constants.esm.js
  var __GLOBAL__ = typeof window === "undefined" ? window : window;
  var __NAMESPACE_PREFIX__ = "@griffel/";
  function getGlobalVar(name, defaultValue2) {
    if (!__GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)]) {
      __GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)] = defaultValue2;
    }
    return __GLOBAL__[Symbol.for(__NAMESPACE_PREFIX__ + name)];
  }
  var DEBUG_RESET_CLASSES = /* @__PURE__ */ getGlobalVar("DEBUG_RESET_CLASSES", {});
  var DEFINITION_LOOKUP_TABLE = /* @__PURE__ */ getGlobalVar("DEFINITION_LOOKUP_TABLE", {});
  var DATA_BUCKET_ATTR = "data-make-styles-bucket";
  var RESET_HASH_PREFIX = "r";
  var SEQUENCE_HASH_LENGTH = 7;
  var SEQUENCE_PREFIX = "___";
  var DEBUG_SEQUENCE_SEPARATOR = "_";
  var SEQUENCE_SIZE = false ? SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH : SEQUENCE_PREFIX.length + SEQUENCE_HASH_LENGTH + DEBUG_SEQUENCE_SEPARATOR.length + SEQUENCE_HASH_LENGTH;
  var LOOKUP_DEFINITIONS_INDEX = 0;
  var LOOKUP_DIR_INDEX = 1;

  // ../node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h3 = 0;
    var k, i2 = 0, len = str.length;
    for (; len >= 4; ++i2, len -= 4) {
      k = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h3 = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h3 ^= (str.charCodeAt(i2 + 2) & 255) << 16;
      case 2:
        h3 ^= (str.charCodeAt(i2 + 1) & 255) << 8;
      case 1:
        h3 ^= str.charCodeAt(i2) & 255;
        h3 = /* Math.imul(h, m): */
        (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
    }
    h3 ^= h3 >>> 13;
    h3 = /* Math.imul(h, m): */
    (h3 & 65535) * 1540483477 + ((h3 >>> 16) * 59797 << 16);
    return ((h3 ^ h3 >>> 15) >>> 0).toString(36);
  }

  // ../node_modules/@griffel/core/runtime/utils/hashSequence.esm.js
  function padEndHash(value) {
    const hashLength = value.length;
    if (hashLength === SEQUENCE_HASH_LENGTH) {
      return value;
    }
    for (let i2 = hashLength; i2 < SEQUENCE_HASH_LENGTH; i2++) {
      value += "0";
    }
    return value;
  }
  function hashSequence(classes, dir, sequenceIds = []) {
    if (false) {
      return SEQUENCE_PREFIX + padEndHash(murmur2(classes + dir));
    }
    return SEQUENCE_PREFIX + padEndHash(murmur2(classes + dir)) + DEBUG_SEQUENCE_SEPARATOR + padEndHash(murmur2(sequenceIds.join("")));
  }

  // ../node_modules/@griffel/core/runtime/reduceToClassNameForSlots.esm.js
  function reduceToClassName(classMap, dir) {
    let className = "";
    for (const propertyHash in classMap) {
      const classNameMapping = classMap[propertyHash];
      if (classNameMapping) {
        const hasRTLClassName = Array.isArray(classNameMapping);
        if (dir === "rtl") {
          className += (hasRTLClassName ? classNameMapping[1] : classNameMapping) + " ";
        } else {
          className += (hasRTLClassName ? classNameMapping[0] : classNameMapping) + " ";
        }
      }
    }
    return className.slice(0, -1);
  }
  function reduceToClassNameForSlots(classesMapBySlot, dir) {
    const classNamesForSlots = {};
    for (const slotName in classesMapBySlot) {
      const slotClasses = reduceToClassName(classesMapBySlot[slotName], dir);
      if (slotClasses === "") {
        classNamesForSlots[slotName] = "";
        continue;
      }
      const sequenceHash = hashSequence(slotClasses, dir);
      const resultSlotClasses = sequenceHash + " " + slotClasses;
      DEFINITION_LOOKUP_TABLE[sequenceHash] = [classesMapBySlot[slotName], dir];
      classNamesForSlots[slotName] = resultSlotClasses;
    }
    return classNamesForSlots;
  }

  // ../node_modules/@griffel/core/mergeClasses.esm.js
  var mergeClassesCachedResults = {};
  function mergeClasses() {
    let dir = null;
    let resultClassName = "";
    let sequenceMatch = "";
    const sequencesIds = new Array(arguments.length);
    let containsResetClassName = "";
    for (let i2 = 0; i2 < arguments.length; i2++) {
      const className = arguments[i2];
      if (typeof className === "string" && className !== "") {
        const sequenceIndex = className.indexOf(SEQUENCE_PREFIX);
        if (sequenceIndex === -1) {
          if (true) {
            className.split(" ").forEach((entry) => {
              if (entry.startsWith(RESET_HASH_PREFIX) && DEBUG_RESET_CLASSES[entry]) {
                if (containsResetClassName) {
                  console.error(`mergeClasses(): a passed string contains multiple classes produced by makeResetStyles (${className} & ${resultClassName}, this will lead to non-deterministic behavior. Learn more:https://griffel.js.org/react/api/make-reset-styles#limitations
Source string: ${className}`);
                } else {
                  containsResetClassName = entry;
                }
              }
            });
          }
          resultClassName += className + " ";
        } else {
          const sequenceId = className.substr(sequenceIndex, SEQUENCE_SIZE);
          if (sequenceIndex > 0) {
            resultClassName += className.slice(0, sequenceIndex);
          }
          sequenceMatch += sequenceId;
          sequencesIds[i2] = sequenceId;
        }
        if (true) {
          if (className.indexOf(SEQUENCE_PREFIX, sequenceIndex + 1) !== -1) {
            console.error(`mergeClasses(): a passed string contains multiple identifiers of atomic classes (classes that start with "${SEQUENCE_PREFIX}"), it's possible that passed classes were concatenated in a wrong way. Source string: ${className}`);
          }
        }
      }
    }
    if (sequenceMatch === "") {
      return resultClassName.slice(0, -1);
    }
    const mergeClassesResult = mergeClassesCachedResults[sequenceMatch];
    if (mergeClassesResult !== void 0) {
      return resultClassName + mergeClassesResult;
    }
    const sequenceMappings = [];
    for (let i2 = 0; i2 < arguments.length; i2++) {
      const sequenceId = sequencesIds[i2];
      if (sequenceId) {
        const sequenceMapping = DEFINITION_LOOKUP_TABLE[sequenceId];
        if (sequenceMapping) {
          sequenceMappings.push(sequenceMapping[LOOKUP_DEFINITIONS_INDEX]);
          if (true) {
            if (dir !== null && dir !== sequenceMapping[LOOKUP_DIR_INDEX]) {
              console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that has different direction (dir="${sequenceMapping[1] ? "rtl" : "ltr"}") setting than other classes. This is not supported. Source string: ${arguments[i2]}`);
            }
          }
          dir = sequenceMapping[LOOKUP_DIR_INDEX];
        } else {
          if (true) {
            console.error(`mergeClasses(): a passed string contains an identifier (${sequenceId}) that does not match any entry in cache. Source string: ${arguments[i2]}`);
          }
        }
      }
    }
    const resultDefinitions = Object.assign.apply(
      Object,
      // .assign() mutates the first object, we can't mutate mappings as it will produce invalid results later
      [{}].concat(sequenceMappings)
    );
    let atomicClassNames = reduceToClassName(resultDefinitions, dir);
    const newSequenceHash = hashSequence(atomicClassNames, dir, sequencesIds);
    atomicClassNames = newSequenceHash + " " + atomicClassNames;
    mergeClassesCachedResults[sequenceMatch] = atomicClassNames;
    DEFINITION_LOOKUP_TABLE[newSequenceHash] = [resultDefinitions, dir];
    return resultClassName + atomicClassNames;
  }

  // ../node_modules/@griffel/core/devtools/store.esm.js
  var sequenceDetails = {};
  var cssRules = /* @__PURE__ */ new Set();
  var debugData = {
    getChildrenSequences: (debugSequenceHash) => {
      const key = Object.keys(mergeClassesCachedResults).find((key2) => mergeClassesCachedResults[key2].startsWith(debugSequenceHash));
      if (key) {
        return key.split(SEQUENCE_PREFIX).filter((sequence) => sequence.length).map((sequence) => SEQUENCE_PREFIX + sequence);
      }
      return [];
    },
    addCSSRule: (rule) => {
      cssRules.add(rule);
    },
    addSequenceDetails: (classNamesForSlots, sourceURL) => {
      Object.entries(classNamesForSlots).forEach(([slotName, sequenceHash]) => {
        sequenceDetails[sequenceHash.substring(0, SEQUENCE_SIZE)] = {
          slotName,
          sourceURL
        };
      });
    },
    getCSSRules: () => {
      return Array.from(cssRules);
    },
    getSequenceDetails: (sequenceHash) => {
      return sequenceDetails[sequenceHash];
    }
  };

  // ../node_modules/@griffel/core/devtools/utils.esm.js
  function getDirectionalClassName(classes, direction) {
    return Array.isArray(classes) ? direction === "rtl" ? classes[1] : classes[0] : classes;
  }
  function getDebugClassNames(lookupItem, parentLookupItem, parentDebugClassNames, overridingSiblings) {
    const classesMapping = lookupItem[0];
    const direction = lookupItem[1];
    return Object.entries(classesMapping).map(([propertyHash, classes]) => {
      const className = getDirectionalClassName(classes, direction);
      let overriddenBy;
      if (parentDebugClassNames && parentLookupItem) {
        const matching = parentDebugClassNames.find(({
          className: parentClassName
        }) => parentClassName === className);
        if (!matching && parentLookupItem[0][propertyHash]) {
          overriddenBy = getDirectionalClassName(parentLookupItem[0][propertyHash], parentLookupItem[1]);
        } else if (matching && parentLookupItem[0][propertyHash]) {
          const siblingHasSameRule = overridingSiblings ? overridingSiblings.filter(({
            debugClassNames
          }) => debugClassNames.filter(({
            className: siblingClassName
          }) => siblingClassName === className).length > 0).length > 0 : false;
          overriddenBy = siblingHasSameRule ? matching.className : matching.overriddenBy;
        } else if (!matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        } else if (matching && !parentLookupItem[0][propertyHash]) {
          overriddenBy = void 0;
        }
      }
      return {
        className,
        overriddenBy
      };
    });
  }

  // ../node_modules/@griffel/core/devtools/getDebugTree.esm.js
  function getDebugTree(debugSequenceHash, parentNode) {
    const lookupItem = DEFINITION_LOOKUP_TABLE[debugSequenceHash];
    if (lookupItem === void 0) {
      return void 0;
    }
    const parentLookupItem = parentNode ? DEFINITION_LOOKUP_TABLE[parentNode.sequenceHash] : void 0;
    const debugClassNames = getDebugClassNames(lookupItem, parentLookupItem, parentNode === null || parentNode === void 0 ? void 0 : parentNode.debugClassNames, parentNode === null || parentNode === void 0 ? void 0 : parentNode.children);
    const node4 = {
      sequenceHash: debugSequenceHash,
      direction: lookupItem[1],
      children: [],
      debugClassNames
    };
    const childrenSequences = debugData.getChildrenSequences(node4.sequenceHash);
    childrenSequences.reverse().forEach((sequence) => {
      const child = getDebugTree(sequence, node4);
      if (child) {
        node4.children.push(child);
      }
    });
    if (!node4.children.length) {
      node4.rules = {};
      node4.debugClassNames.forEach(({
        className
      }) => {
        const mapData = debugData.getSequenceDetails(debugSequenceHash);
        if (mapData) {
          node4.slot = mapData.slotName;
          node4.sourceURL = mapData.sourceURL;
        }
        const cssRule = debugData.getCSSRules().find((cssRule2) => {
          return cssRule2.includes(className);
        });
        node4.rules[className] = cssRule;
      });
    }
    return node4;
  }

  // ../node_modules/@griffel/core/devtools/injectDevTools.esm.js
  function injectDevTools(document4) {
    const window2 = document4.defaultView;
    if (!window2 || window2.__GRIFFEL_DEVTOOLS__) {
      return;
    }
    const devtools = {
      getInfo: (element2) => {
        const rootDebugSequenceHash = Array.from(element2.classList).find((className) => className.startsWith(SEQUENCE_PREFIX));
        if (rootDebugSequenceHash === void 0) {
          return void 0;
        }
        return getDebugTree(rootDebugSequenceHash);
      }
    };
    Object.defineProperty(window2, "__GRIFFEL_DEVTOOLS__", {
      configurable: false,
      enumerable: false,
      get() {
        return devtools;
      }
    });
  }

  // ../node_modules/@griffel/core/devtools/isDevToolsEnabled.esm.js
  var isDevToolsEnabled = /* @__PURE__ */ (() => {
    var _a5;
    try {
      return Boolean(typeof window !== "undefined" && ((_a5 = window.sessionStorage) === null || _a5 === void 0 ? void 0 : _a5.getItem("__GRIFFEL_DEVTOOLS__")));
    } catch (e2) {
      return false;
    }
  })();

  // ../node_modules/@griffel/core/runtime/utils/normalizeCSSBucketEntry.esm.js
  function normalizeCSSBucketEntry(entry) {
    if (!Array.isArray(entry)) {
      return [entry];
    }
    if (entry.length > 2) {
      throw new Error("CSS Bucket contains an entry with greater than 2 items, please report this to https://github.com/microsoft/griffel/issues");
    }
    return entry;
  }

  // ../node_modules/@griffel/core/renderer/createIsomorphicStyleSheet.esm.js
  function createIsomorphicStyleSheet(styleElement, bucketName, elementAttributes) {
    const __cssRulesForSSR = [];
    elementAttributes[DATA_BUCKET_ATTR] = bucketName;
    if (styleElement) {
      for (const attrName in elementAttributes) {
        styleElement.setAttribute(attrName, elementAttributes[attrName]);
      }
    }
    function insertRule2(rule) {
      if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
        return styleElement.sheet.insertRule(rule, styleElement.sheet.cssRules.length);
      }
      return __cssRulesForSSR.push(rule);
    }
    return {
      elementAttributes,
      insertRule: insertRule2,
      element: styleElement,
      bucketName,
      cssRules() {
        if (styleElement === null || styleElement === void 0 ? void 0 : styleElement.sheet) {
          return Array.from(styleElement.sheet.cssRules).map((cssRule) => cssRule.cssText);
        }
        return __cssRulesForSSR;
      }
    };
  }

  // ../node_modules/@griffel/core/renderer/getStyleSheetForBucket.esm.js
  var styleBucketOrdering = [
    // reset styles
    "r",
    // catch-all
    "d",
    // link
    "l",
    // visited
    "v",
    // focus-within
    "w",
    // focus
    "f",
    // focus-visible
    "i",
    // hover
    "h",
    // active
    "a",
    // at rules for reset styles
    "s",
    // keyframes
    "k",
    // at-rules
    "t",
    // @media rules
    "m",
    // @container rules
    "c"
  ];
  var styleBucketOrderingMap = /* @__PURE__ */ styleBucketOrdering.reduce((acc, cur, j3) => {
    acc[cur] = j3;
    return acc;
  }, {});
  function getStyleSheetForBucket(bucketName, targetDocument, insertionPoint, renderer, metadata = {}) {
    const isMediaBucket = bucketName === "m";
    const stylesheetKey = isMediaBucket ? bucketName + metadata["m"] : bucketName;
    if (!renderer.stylesheets[stylesheetKey]) {
      const tag = targetDocument && targetDocument.createElement("style");
      const stylesheet3 = createIsomorphicStyleSheet(tag, bucketName, {
        ...renderer.styleElementAttributes,
        ...isMediaBucket && {
          media: metadata["m"]
        }
      });
      renderer.stylesheets[stylesheetKey] = stylesheet3;
      if (targetDocument && tag) {
        targetDocument.head.insertBefore(tag, findInsertionPoint(targetDocument, insertionPoint, bucketName, renderer, metadata));
      }
    }
    return renderer.stylesheets[stylesheetKey];
  }
  function findInsertionPoint(targetDocument, insertionPoint, targetBucket, renderer, metadata) {
    const targetOrder = styleBucketOrderingMap[targetBucket];
    let comparer = (el) => targetOrder - styleBucketOrderingMap[el.getAttribute(DATA_BUCKET_ATTR)];
    let styleElements = targetDocument.head.querySelectorAll(`[${DATA_BUCKET_ATTR}]`);
    if (targetBucket === "m" && metadata) {
      const mediaElements = targetDocument.head.querySelectorAll(`[${DATA_BUCKET_ATTR}="${targetBucket}"]`);
      if (mediaElements.length) {
        styleElements = mediaElements;
        comparer = (el) => renderer.compareMediaQueries(metadata["m"], el.media);
      }
    }
    const length2 = styleElements.length;
    let index2 = length2 - 1;
    while (index2 >= 0) {
      const styleElement = styleElements.item(index2);
      if (comparer(styleElement) > 0) {
        return styleElement.nextSibling;
      }
      index2--;
    }
    if (length2 > 0) {
      return styleElements.item(0);
    }
    return insertionPoint ? insertionPoint.nextSibling : null;
  }

  // ../node_modules/@griffel/core/renderer/safeInsertRule.esm.js
  var ignoreSuffixes = /* @__PURE__ */ ["-moz-placeholder", "-moz-focus-inner", "-moz-focusring", "-ms-input-placeholder", "-moz-read-write", "-moz-read-only"].join("|");
  var ignoreSuffixesRegex = /* @__PURE__ */ new RegExp(`:(${ignoreSuffixes})`);
  function safeInsertRule(sheet2, ruleCSS) {
    try {
      sheet2.insertRule(ruleCSS);
    } catch (e2) {
      if (!ignoreSuffixesRegex.test(ruleCSS)) {
        console.error(`There was a problem inserting the following rule: "${ruleCSS}"`, e2);
      }
    }
  }

  // ../node_modules/@griffel/core/renderer/createDOMRenderer.esm.js
  var lastIndex = 0;
  var defaultCompareMediaQueries = (a2, b3) => a2 < b3 ? -1 : a2 > b3 ? 1 : 0;
  function createDOMRenderer(targetDocument = typeof document === "undefined" ? void 0 : document, options = {}) {
    const {
      unstable_filterCSSRule,
      insertionPoint,
      styleElementAttributes,
      compareMediaQueries = defaultCompareMediaQueries
    } = options;
    const renderer = {
      insertionCache: {},
      stylesheets: {},
      styleElementAttributes: Object.freeze(styleElementAttributes),
      compareMediaQueries,
      id: `d${lastIndex++}`,
      insertCSSRules(cssRules2) {
        for (const styleBucketName in cssRules2) {
          const cssRulesForBucket = cssRules2[styleBucketName];
          for (let i2 = 0, l3 = cssRulesForBucket.length; i2 < l3; i2++) {
            const [ruleCSS, metadata] = normalizeCSSBucketEntry(cssRulesForBucket[i2]);
            const sheet2 = getStyleSheetForBucket(styleBucketName, targetDocument, insertionPoint || null, renderer, metadata);
            if (renderer.insertionCache[ruleCSS]) {
              continue;
            }
            renderer.insertionCache[ruleCSS] = styleBucketName;
            if (isDevToolsEnabled) {
              debugData.addCSSRule(ruleCSS);
            }
            if (unstable_filterCSSRule) {
              if (unstable_filterCSSRule(ruleCSS)) {
                safeInsertRule(sheet2, ruleCSS);
              }
            } else {
              safeInsertRule(sheet2, ruleCSS);
            }
          }
        }
      }
    };
    if (targetDocument && true && isDevToolsEnabled) {
      injectDevTools(targetDocument);
    }
    return renderer;
  }

  // ../node_modules/@griffel/core/devtools/react-render-tracker/stackTrace.esm.js
  var UNKNOWN_FUNCTION = "<unknown>";
  function parseStackTraceLine(line2) {
    return parseChrome(line2) || parseGecko(line2) || parseJSC(line2);
  }
  var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)?\)?\s*$/i;
  var chromeRe2 = /^\s*at ()((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)\s*$/i;
  var chromeEvalRe = /\((\S*)\)/;
  function parseChrome(line2) {
    const parts = chromeRe.exec(line2) || chromeRe2.exec(line2);
    if (!parts) {
      return null;
    }
    let loc = parts[2];
    const isNative = loc && loc.indexOf("native") === 0;
    const isEval = loc && loc.indexOf("eval") === 0;
    const submatch = chromeEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: !isNative ? parts[2] : null,
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)\s*$/i;
  var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
  function parseGecko(line2) {
    const parts = geckoRe.exec(line2);
    if (!parts) {
      return null;
    }
    let loc = parts[3];
    const isEval = loc && loc.indexOf(" > eval") > -1;
    const submatch = geckoEvalRe.exec(loc);
    if (isEval && submatch != null) {
      loc = submatch[1];
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }
  var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?)\s*$/i;
  function parseJSC(line2) {
    const parts = javaScriptCoreRe.exec(line2);
    if (!parts) {
      return null;
    }
    return {
      loc: parts[3],
      name: parts[1] || UNKNOWN_FUNCTION
    };
  }

  // ../node_modules/@griffel/core/devtools/getSourceURLfromError.esm.js
  function getSourceURLfromError() {
    const stacks = String(new Error().stack).split("\n");
    const userMakeStyleCallLine = findUserMakeStyleCallInStacks(stacks);
    if (userMakeStyleCallLine === void 0) {
      return void 0;
    }
    const result = parseStackTraceLine(userMakeStyleCallLine);
    return result === null || result === void 0 ? void 0 : result.loc;
  }
  function findUserMakeStyleCallInStacks(stacks) {
    for (let i2 = stacks.length - 1; i2 >= 0; --i2) {
      if (stacks[i2].includes("at getSourceURLfromError")) {
        return stacks[i2 + 3];
      }
    }
    return void 0;
  }

  // ../node_modules/@griffel/core/insertionFactory.esm.js
  var insertionFactory = () => {
    const insertionCache = {};
    return function insertStyles3(renderer, cssRules2) {
      if (insertionCache[renderer.id] === void 0) {
        renderer.insertCSSRules(cssRules2);
        insertionCache[renderer.id] = true;
      }
    };
  };

  // ../node_modules/rtl-css-js/dist/esm/convert-9768a965.js
  function arrayToObject(array2) {
    return array2.reduce(function(obj, _ref) {
      var prop1 = _ref[0], prop2 = _ref[1];
      obj[prop1] = prop2;
      obj[prop2] = prop1;
      return obj;
    }, {});
  }
  function isBoolean(val) {
    return typeof val === "boolean";
  }
  function isFunction(val) {
    return typeof val === "function";
  }
  function isNumber(val) {
    return typeof val === "number";
  }
  function isNullOrUndefined(val) {
    return val === null || typeof val === "undefined";
  }
  function isObject(val) {
    return val && typeof val === "object";
  }
  function isString(val) {
    return typeof val === "string";
  }
  function includes(inclusive, inclusee) {
    return inclusive.indexOf(inclusee) !== -1;
  }
  function flipSign(value) {
    if (parseFloat(value) === 0) {
      return value;
    }
    if (value[0] === "-") {
      return value.slice(1);
    }
    return "-" + value;
  }
  function flipTransformSign(match2, prefix2, offset, suffix) {
    return prefix2 + flipSign(offset) + suffix;
  }
  function calculateNewBackgroundPosition(value) {
    var idx = value.indexOf(".");
    if (idx === -1) {
      value = 100 - parseFloat(value) + "%";
    } else {
      var len = value.length - idx - 2;
      value = 100 - parseFloat(value);
      value = value.toFixed(len) + "%";
    }
    return value;
  }
  function getValuesAsList(value) {
    return value.replace(/ +/g, " ").split(" ").map(function(i2) {
      return i2.trim();
    }).filter(Boolean).reduce(function(_ref2, item) {
      var list4 = _ref2.list, state = _ref2.state;
      var openParansCount = (item.match(/\(/g) || []).length;
      var closedParansCount = (item.match(/\)/g) || []).length;
      if (state.parensDepth > 0) {
        list4[list4.length - 1] = list4[list4.length - 1] + " " + item;
      } else {
        list4.push(item);
      }
      state.parensDepth += openParansCount - closedParansCount;
      return {
        list: list4,
        state
      };
    }, {
      list: [],
      state: {
        parensDepth: 0
      }
    }).list;
  }
  function handleQuartetValues(value) {
    var splitValues = getValuesAsList(value);
    if (splitValues.length <= 3 || splitValues.length > 4) {
      return value;
    }
    var top = splitValues[0], right = splitValues[1], bottom = splitValues[2], left = splitValues[3];
    return [top, left, bottom, right].join(" ");
  }
  function canConvertValue(value) {
    return !isBoolean(value) && !isNullOrUndefined(value);
  }
  function splitShadow(value) {
    var shadows = [];
    var start2 = 0;
    var end2 = 0;
    var rgba = false;
    while (end2 < value.length) {
      if (!rgba && value[end2] === ",") {
        shadows.push(value.substring(start2, end2).trim());
        end2++;
        start2 = end2;
      } else if (value[end2] === "(") {
        rgba = true;
        end2++;
      } else if (value[end2] === ")") {
        rgba = false;
        end2++;
      } else {
        end2++;
      }
    }
    if (start2 != end2) {
      shadows.push(value.substring(start2, end2 + 1));
    }
    return shadows;
  }
  var propertyValueConverters = {
    padding: function padding(_ref) {
      var value = _ref.value;
      if (isNumber(value)) {
        return value;
      }
      return handleQuartetValues(value);
    },
    textShadow: function textShadow(_ref2) {
      var value = _ref2.value;
      var flippedShadows = splitShadow(value).map(function(shadow) {
        return shadow.replace(/(^|\s)(-*)([.|\d]+)/, function(match2, whiteSpace, negative, number3) {
          if (number3 === "0") {
            return match2;
          }
          var doubleNegative = negative === "" ? "-" : "";
          return "" + whiteSpace + doubleNegative + number3;
        });
      });
      return flippedShadows.join(",");
    },
    borderColor: function borderColor(_ref3) {
      var value = _ref3.value;
      return handleQuartetValues(value);
    },
    borderRadius: function borderRadius(_ref4) {
      var value = _ref4.value;
      if (isNumber(value)) {
        return value;
      }
      if (includes(value, "/")) {
        var _value$split = value.split("/"), radius1 = _value$split[0], radius2 = _value$split[1];
        var convertedRadius1 = propertyValueConverters.borderRadius({
          value: radius1.trim()
        });
        var convertedRadius2 = propertyValueConverters.borderRadius({
          value: radius2.trim()
        });
        return convertedRadius1 + " / " + convertedRadius2;
      }
      var splitValues = getValuesAsList(value);
      switch (splitValues.length) {
        case 2: {
          return splitValues.reverse().join(" ");
        }
        case 4: {
          var topLeft = splitValues[0], topRight = splitValues[1], bottomRight = splitValues[2], bottomLeft = splitValues[3];
          return [topRight, topLeft, bottomLeft, bottomRight].join(" ");
        }
        default: {
          return value;
        }
      }
    },
    background: function background(_ref5) {
      var value = _ref5.value, valuesToConvert2 = _ref5.valuesToConvert, isRtl = _ref5.isRtl, bgImgDirectionRegex2 = _ref5.bgImgDirectionRegex, bgPosDirectionRegex2 = _ref5.bgPosDirectionRegex;
      if (isNumber(value)) {
        return value;
      }
      var backgroundPositionValue = value.replace(/(url\(.*?\))|(rgba?\(.*?\))|(hsl\(.*?\))|(#[a-fA-F0-9]+)|((^| )(\D)+( |$))/g, "").trim();
      value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({
        value: backgroundPositionValue,
        valuesToConvert: valuesToConvert2,
        isRtl,
        bgPosDirectionRegex: bgPosDirectionRegex2
      }));
      return propertyValueConverters.backgroundImage({
        value,
        valuesToConvert: valuesToConvert2,
        bgImgDirectionRegex: bgImgDirectionRegex2
      });
    },
    backgroundImage: function backgroundImage(_ref6) {
      var value = _ref6.value, valuesToConvert2 = _ref6.valuesToConvert, bgImgDirectionRegex2 = _ref6.bgImgDirectionRegex;
      if (!includes(value, "url(") && !includes(value, "linear-gradient(")) {
        return value;
      }
      return value.replace(bgImgDirectionRegex2, function(match2, g1, group2) {
        return match2.replace(group2, valuesToConvert2[group2]);
      });
    },
    backgroundPosition: function backgroundPosition(_ref7) {
      var value = _ref7.value, valuesToConvert2 = _ref7.valuesToConvert, isRtl = _ref7.isRtl, bgPosDirectionRegex2 = _ref7.bgPosDirectionRegex;
      return value.replace(isRtl ? /^((-|\d|\.)+%)/ : null, function(match2, group) {
        return calculateNewBackgroundPosition(group);
      }).replace(bgPosDirectionRegex2, function(match2) {
        return valuesToConvert2[match2];
      });
    },
    backgroundPositionX: function backgroundPositionX(_ref8) {
      var value = _ref8.value, valuesToConvert2 = _ref8.valuesToConvert, isRtl = _ref8.isRtl, bgPosDirectionRegex2 = _ref8.bgPosDirectionRegex;
      if (isNumber(value)) {
        return value;
      }
      return propertyValueConverters.backgroundPosition({
        value,
        valuesToConvert: valuesToConvert2,
        isRtl,
        bgPosDirectionRegex: bgPosDirectionRegex2
      });
    },
    transition: function transition(_ref9) {
      var value = _ref9.value, propertiesToConvert2 = _ref9.propertiesToConvert;
      return value.split(/,\s*/g).map(function(transition2) {
        var values2 = transition2.split(" ");
        values2[0] = propertiesToConvert2[values2[0]] || values2[0];
        return values2.join(" ");
      }).join(", ");
    },
    transitionProperty: function transitionProperty(_ref10) {
      var value = _ref10.value, propertiesToConvert2 = _ref10.propertiesToConvert;
      return value.split(/,\s*/g).map(function(prop) {
        return propertiesToConvert2[prop] || prop;
      }).join(", ");
    },
    transform: function transform(_ref11) {
      var value = _ref11.value;
      var nonAsciiPattern = "[^\\u0020-\\u007e]";
      var escapePattern = "(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f])";
      var signedQuantPattern = "((?:-?" + ("(?:[0-9]*\\.[0-9]+|[0-9]+)(?:\\s*(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)|" + ("-?" + ("(?:[_a-z]|" + nonAsciiPattern + "|" + escapePattern + ")") + ("(?:[_a-z0-9-]|" + nonAsciiPattern + "|" + escapePattern + ")") + "*") + ")?") + ")|(?:inherit|auto))";
      var translateXRegExp = new RegExp("(translateX\\s*\\(\\s*)" + signedQuantPattern + "(\\s*\\))", "gi");
      var translateRegExp = new RegExp("(translate\\s*\\(\\s*)" + signedQuantPattern + "((?:\\s*,\\s*" + signedQuantPattern + "){0,1}\\s*\\))", "gi");
      var translate3dRegExp = new RegExp("(translate3d\\s*\\(\\s*)" + signedQuantPattern + "((?:\\s*,\\s*" + signedQuantPattern + "){0,2}\\s*\\))", "gi");
      var rotateRegExp = new RegExp("(rotate[ZY]?\\s*\\(\\s*)" + signedQuantPattern + "(\\s*\\))", "gi");
      return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);
    }
  };
  propertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;
  propertyValueConverters.margin = propertyValueConverters.padding;
  propertyValueConverters.borderWidth = propertyValueConverters.padding;
  propertyValueConverters.boxShadow = propertyValueConverters.textShadow;
  propertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;
  propertyValueConverters.borderStyle = propertyValueConverters.borderColor;
  propertyValueConverters.webkitTransform = propertyValueConverters.transform;
  propertyValueConverters.mozTransform = propertyValueConverters.transform;
  propertyValueConverters.WebkitTransform = propertyValueConverters.transform;
  propertyValueConverters.MozTransform = propertyValueConverters.transform;
  propertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;
  propertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;
  propertyValueConverters.webkitTransition = propertyValueConverters.transition;
  propertyValueConverters.mozTransition = propertyValueConverters.transition;
  propertyValueConverters.WebkitTransition = propertyValueConverters.transition;
  propertyValueConverters.MozTransition = propertyValueConverters.transition;
  propertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty;
  propertyValueConverters["text-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["border-color"] = propertyValueConverters.borderColor;
  propertyValueConverters["border-radius"] = propertyValueConverters.borderRadius;
  propertyValueConverters["background-image"] = propertyValueConverters.backgroundImage;
  propertyValueConverters["background-position"] = propertyValueConverters.backgroundPosition;
  propertyValueConverters["background-position-x"] = propertyValueConverters.backgroundPositionX;
  propertyValueConverters["object-position"] = propertyValueConverters.objectPosition;
  propertyValueConverters["border-width"] = propertyValueConverters.padding;
  propertyValueConverters["box-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["-webkit-box-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["-moz-box-shadow"] = propertyValueConverters.textShadow;
  propertyValueConverters["border-style"] = propertyValueConverters.borderColor;
  propertyValueConverters["-webkit-transform"] = propertyValueConverters.transform;
  propertyValueConverters["-moz-transform"] = propertyValueConverters.transform;
  propertyValueConverters["transform-origin"] = propertyValueConverters.transformOrigin;
  propertyValueConverters["-webkit-transform-origin"] = propertyValueConverters.transformOrigin;
  propertyValueConverters["-moz-transform-origin"] = propertyValueConverters.transformOrigin;
  propertyValueConverters["-webkit-transition"] = propertyValueConverters.transition;
  propertyValueConverters["-moz-transition"] = propertyValueConverters.transition;
  propertyValueConverters["transition-property"] = propertyValueConverters.transitionProperty;
  propertyValueConverters["-webkit-transition-property"] = propertyValueConverters.transitionProperty;
  propertyValueConverters["-moz-transition-property"] = propertyValueConverters.transitionProperty;
  var propertiesToConvert = arrayToObject([
    ["paddingLeft", "paddingRight"],
    ["marginLeft", "marginRight"],
    ["left", "right"],
    ["borderLeft", "borderRight"],
    ["borderLeftColor", "borderRightColor"],
    ["borderLeftStyle", "borderRightStyle"],
    ["borderLeftWidth", "borderRightWidth"],
    ["borderTopLeftRadius", "borderTopRightRadius"],
    ["borderBottomLeftRadius", "borderBottomRightRadius"],
    // kebab-case versions
    ["padding-left", "padding-right"],
    ["margin-left", "margin-right"],
    ["border-left", "border-right"],
    ["border-left-color", "border-right-color"],
    ["border-left-style", "border-right-style"],
    ["border-left-width", "border-right-width"],
    ["border-top-left-radius", "border-top-right-radius"],
    ["border-bottom-left-radius", "border-bottom-right-radius"]
  ]);
  var propsToIgnore = ["content"];
  var valuesToConvert = arrayToObject([["ltr", "rtl"], ["left", "right"], ["w-resize", "e-resize"], ["sw-resize", "se-resize"], ["nw-resize", "ne-resize"]]);
  var bgImgDirectionRegex = new RegExp("(^|\\W|_)((ltr)|(rtl)|(left)|(right))(\\W|_|$)", "g");
  var bgPosDirectionRegex = new RegExp("(left)|(right)");
  function convert(object2) {
    return Object.keys(object2).reduce(function(newObj, originalKey) {
      var originalValue = object2[originalKey];
      if (isString(originalValue)) {
        originalValue = originalValue.trim();
      }
      if (includes(propsToIgnore, originalKey)) {
        newObj[originalKey] = originalValue;
        return newObj;
      }
      var _convertProperty = convertProperty(originalKey, originalValue), key = _convertProperty.key, value = _convertProperty.value;
      newObj[key] = value;
      return newObj;
    }, Array.isArray(object2) ? [] : {});
  }
  function convertProperty(originalKey, originalValue) {
    var isNoFlip = /\/\*\s?@noflip\s?\*\//.test(originalValue);
    var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);
    var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);
    return {
      key,
      value
    };
  }
  function getPropertyDoppelganger(property) {
    return propertiesToConvert[property] || property;
  }
  function getValueDoppelganger(key, originalValue) {
    if (!canConvertValue(originalValue)) {
      return originalValue;
    }
    if (isObject(originalValue)) {
      return convert(originalValue);
    }
    var isNum = isNumber(originalValue);
    var isFunc = isFunction(originalValue);
    var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, "");
    var isImportant = !isNum && importantlessValue.length !== originalValue.length;
    var valueConverter = propertyValueConverters[key];
    var newValue;
    if (valueConverter) {
      newValue = valueConverter({
        value: importantlessValue,
        valuesToConvert,
        propertiesToConvert,
        isRtl: true,
        bgImgDirectionRegex,
        bgPosDirectionRegex
      });
    } else {
      newValue = valuesToConvert[importantlessValue] || importantlessValue;
    }
    if (isImportant) {
      return newValue + " !important";
    }
    return newValue;
  }

  // ../node_modules/@griffel/core/__styles.esm.js
  function __styles(classesMapBySlot, cssRules2, factory = insertionFactory) {
    const insertStyles3 = factory();
    let ltrClassNamesForSlots = null;
    let rtlClassNamesForSlots = null;
    let sourceURL;
    if (isDevToolsEnabled) {
      sourceURL = getSourceURLfromError();
    }
    function computeClasses(options) {
      const {
        dir,
        renderer
      } = options;
      const isLTR = dir === "ltr";
      if (isLTR) {
        if (ltrClassNamesForSlots === null) {
          ltrClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      } else {
        if (rtlClassNamesForSlots === null) {
          rtlClassNamesForSlots = reduceToClassNameForSlots(classesMapBySlot, dir);
        }
      }
      insertStyles3(renderer, cssRules2);
      const classNamesForSlots = isLTR ? ltrClassNamesForSlots : rtlClassNamesForSlots;
      if (isDevToolsEnabled) {
        debugData.addSequenceDetails(classNamesForSlots, sourceURL);
      }
      return classNamesForSlots;
    }
    return computeClasses;
  }

  // ../node_modules/@griffel/core/__resetStyles.esm.js
  function __resetStyles(ltrClassName, rtlClassName, cssRules2, factory = insertionFactory) {
    const insertStyles3 = factory();
    function computeClassName(options) {
      const {
        dir,
        renderer
      } = options;
      const className = dir === "ltr" ? ltrClassName : rtlClassName || ltrClassName;
      insertStyles3(renderer, Array.isArray(cssRules2) ? {
        r: cssRules2
      } : cssRules2);
      if (true) {
        DEBUG_RESET_CLASSES[className] = 1;
      }
      return className;
    }
    return computeClassName;
  }

  // ../node_modules/@griffel/react/utils/canUseDOM.esm.js
  function canUseDOM() {
    return typeof window !== "undefined" && !!(window.document && window.document.createElement);
  }

  // ../node_modules/@griffel/react/useInsertionEffect.esm.js
  var React2 = __toESM(require_react());
  var useInsertionEffect2 = (
    // @ts-expect-error Hack to make sure that `useInsertionEffect` will not cause bundling issues in older React versions
    // eslint-disable-next-line no-useless-concat
    React2["useInsertionEffect"] ? React2["useInsertionEffect"] : void 0
  );

  // ../node_modules/@griffel/react/insertionFactory.esm.js
  var insertionFactory2 = () => {
    const insertionCache = {};
    return function insert(renderer, cssRules2) {
      if (useInsertionEffect2 && canUseDOM()) {
        useInsertionEffect2(() => {
          renderer.insertCSSRules(cssRules2);
        }, [renderer, cssRules2]);
        return;
      }
      if (insertionCache[renderer.id] === void 0) {
        renderer.insertCSSRules(cssRules2);
        insertionCache[renderer.id] = true;
      }
    };
  };

  // ../node_modules/@griffel/react/RendererContext.esm.js
  var React3 = __toESM(require_react());
  var RendererContext = /* @__PURE__ */ React3.createContext(/* @__PURE__ */ createDOMRenderer());
  function useRenderer() {
    return React3.useContext(RendererContext);
  }

  // ../node_modules/@griffel/react/TextDirectionContext.esm.js
  var React4 = __toESM(require_react());
  var TextDirectionContext = /* @__PURE__ */ React4.createContext("ltr");
  var TextDirectionProvider = ({
    children,
    dir
  }) => {
    return /* @__PURE__ */ React4.createElement(TextDirectionContext.Provider, {
      value: dir
    }, children);
  };
  function useTextDirection() {
    return React4.useContext(TextDirectionContext);
  }

  // ../node_modules/@griffel/react/__styles.esm.js
  function __styles2(classesMapBySlot, cssRules2) {
    const getStyles15 = __styles(classesMapBySlot, cssRules2, insertionFactory2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles15({
        dir,
        renderer
      });
    };
  }

  // ../node_modules/@griffel/react/__resetStyles.esm.js
  function __resetStyles2(ltrClassName, rtlClassName, cssRules2) {
    const getStyles15 = __resetStyles(ltrClassName, rtlClassName, cssRules2, insertionFactory2);
    return function useClasses() {
      const dir = useTextDirection();
      const renderer = useRenderer();
      return getStyles15({
        dir,
        renderer
      });
    };
  }

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/FluentProvider.js
  var React36 = __toESM(require_react());

  // ../node_modules/@fluentui/react-jsx-runtime/lib/utils/Runtime.js
  var ReactRuntime = __toESM(require_jsx_runtime());
  var Runtime = ReactRuntime;

  // ../node_modules/@fluentui/react-jsx-runtime/lib/jsx/createJSX.js
  var React19 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/compose/slot.js
  var slot_exports = {};
  __export(slot_exports, {
    always: () => always,
    optional: () => optional,
    resolveShorthand: () => resolveShorthand
  });
  var React5 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/compose/constants.js
  var SLOT_RENDER_FUNCTION_SYMBOL = Symbol("fui.slotRenderFunction");
  var SLOT_ELEMENT_TYPE_SYMBOL = Symbol("fui.slotElementType");

  // ../node_modules/@fluentui/react-utilities/lib/compose/slot.js
  function always(value, options) {
    const { defaultProps, elementType: elementType2 } = options;
    const props = resolveShorthand(value);
    const propsWithMetadata = {
      ...defaultProps,
      ...props,
      [SLOT_ELEMENT_TYPE_SYMBOL]: elementType2
    };
    if (props && typeof props.children === "function") {
      var _defaultProps;
      propsWithMetadata[SLOT_RENDER_FUNCTION_SYMBOL] = props.children;
      propsWithMetadata.children = (_defaultProps = defaultProps) === null || _defaultProps === void 0 ? void 0 : _defaultProps.children;
    }
    return propsWithMetadata;
  }
  function optional(value, options) {
    if (value === null || value === void 0 && !options.renderByDefault) {
      return void 0;
    }
    return always(value, options);
  }
  function resolveShorthand(value) {
    if (typeof value === "string" || typeof value === "number" || Array.isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    React5.isValidElement(value)) {
      return {
        children: value
      };
    }
    if (value && typeof value !== "object" && true) {
      console.error(`@fluentui/react-utilities [slot.${resolveShorthand.name}]:
A slot got an invalid value "${value}" (${typeof value}).
A valid value for a slot is a slot shorthand or slot properties object.
Slot shorthands can be strings, numbers, arrays or JSX elements`);
    }
    return value;
  }

  // ../node_modules/@fluentui/react-utilities/lib/compose/isSlot.js
  function isSlot(element2) {
    var _element;
    return Boolean((_element = element2) === null || _element === void 0 ? void 0 : _element.hasOwnProperty(SLOT_ELEMENT_TYPE_SYMBOL));
  }

  // ../node_modules/@fluentui/react-utilities/lib/compose/resolveShorthand.js
  var resolveShorthand2 = (value, options) => {
    var _options;
    return optional(value, {
      ...options,
      renderByDefault: (_options = options) === null || _options === void 0 ? void 0 : _options.required,
      // elementType as undefined is the way to identify between a slot and a resolveShorthand call
      // in the case elementType is undefined assertSlots will fail, ensuring it'll only work with slot method.
      elementType: void 0
    });
  };

  // ../node_modules/@fluentui/react-utilities/lib/compose/isResolvedShorthand.js
  var import_react = __toESM(require_react());
  function isResolvedShorthand(shorthand) {
    return shorthand !== null && typeof shorthand === "object" && !Array.isArray(shorthand) && !(0, import_react.isValidElement)(shorthand);
  }

  // ../node_modules/@fluentui/react-utilities/lib/compose/assertSlots.js
  var React6 = __toESM(require_react());
  function assertSlots(state) {
    if (true) {
      const typedState = state;
      for (const slotName of Object.keys(typedState.components)) {
        const slotElement = typedState[slotName];
        if (slotElement === void 0) {
          continue;
        }
        if (!isSlot(slotElement)) {
          typedState[slotName] = slot_exports.always(slotElement, {
            elementType: typedState.components[slotName]
          });
          console.warn(`@fluentui/react-utilities [${assertSlots.name}]:
"state.${slotName}" is not a slot!
Be sure to create slots properly by using "slot.always" or "slot.optional".`);
        } else {
          const { [SLOT_ELEMENT_TYPE_SYMBOL]: elementType2 } = slotElement;
          if (elementType2 !== typedState.components[slotName]) {
            slotElement[SLOT_ELEMENT_TYPE_SYMBOL] = typedState.components[slotName];
            console.warn(`@fluentui/react-utilities [${assertSlots.name}]:
"state.${slotName}" element type differs from "state.components.${slotName}",
${elementType2} !== ${typedState.components[slotName]}.
Be sure to create slots properly by using "slot.always" or "slot.optional" with the correct elementType.`);
          }
        }
      }
    }
  }

  // ../node_modules/@fluentui/react-utilities/lib/ssr/canUseDOM.js
  function canUseDOM2() {
    return typeof window !== "undefined" && !!(window.document && // eslint-disable-next-line deprecation/deprecation
    window.document.createElement);
  }

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useControllableState.js
  var React7 = __toESM(require_react());
  function isFactoryDispatch(newState) {
    return typeof newState === "function";
  }
  var useControllableState = (options) => {
    const [internalState, setInternalState] = React7.useState(() => {
      if (options.defaultState === void 0) {
        return options.initialState;
      }
      return isInitializer(options.defaultState) ? options.defaultState() : options.defaultState;
    });
    const stateValueRef = React7.useRef(options.state);
    React7.useEffect(() => {
      stateValueRef.current = options.state;
    }, [
      options.state
    ]);
    const setControlledState = React7.useCallback((newState) => {
      if (isFactoryDispatch(newState)) {
        newState(stateValueRef.current);
      }
    }, []);
    return useIsControlled(options.state) ? [
      options.state,
      setControlledState
    ] : [
      internalState,
      setInternalState
    ];
  };
  function isInitializer(value) {
    return typeof value === "function";
  }
  var useIsControlled = (controlledValue) => {
    const [isControlled2] = React7.useState(() => controlledValue !== void 0);
    if (true) {
      React7.useEffect(() => {
        if (isControlled2 !== (controlledValue !== void 0)) {
          const error = new Error();
          const controlWarning = isControlled2 ? "a controlled value to be uncontrolled" : "an uncontrolled value to be controlled";
          const undefinedWarning = isControlled2 ? "defined to an undefined" : "undefined to a defined";
          console.error(`@fluentui/react-utilities [${useControllableState.name}]:
A component is changing ${controlWarning}. This is likely caused by the value changing from ${undefinedWarning} value, which should not happen.
Decide between using a controlled or uncontrolled input element for the lifetime of the component.
More info: https://reactjs.org/link/controlled-components
${error.stack}`);
        }
      }, [
        isControlled2,
        controlledValue
      ]);
    }
    return isControlled2;
  };

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js
  var React10 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useIsomorphicLayoutEffect.js
  var React9 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/ssr/SSRContext.js
  var React8 = __toESM(require_react());
  var defaultSSRContextValue = {
    current: 0
  };
  var SSRContext = /* @__PURE__ */ React8.createContext(void 0);
  function useSSRContext() {
    var _React_useContext4;
    return (_React_useContext4 = React8.useContext(SSRContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : defaultSSRContextValue;
  }

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useIsomorphicLayoutEffect.js
  var useIsomorphicLayoutEffect = canUseDOM2() ? React9.useLayoutEffect : React9.useEffect;

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useEventCallback.js
  var useEventCallback = (fn) => {
    const callbackRef = React10.useRef(() => {
      throw new Error("Cannot call an event handler while rendering");
    });
    useIsomorphicLayoutEffect(() => {
      callbackRef.current = fn;
    }, [
      fn
    ]);
    return React10.useCallback((...args) => {
      const callback = callbackRef.current;
      return callback(...args);
    }, [
      callbackRef
    ]);
  };

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useId.js
  var React11 = __toESM(require_react());
  var IdPrefixContext = React11.createContext(void 0);
  var IdPrefixProvider = IdPrefixContext.Provider;
  function useIdPrefix() {
    return React11.useContext(IdPrefixContext) || "";
  }
  function useId2(prefix2 = "fui-", providedId) {
    const contextValue = useSSRContext();
    const idPrefix = useIdPrefix();
    const _useId = React11["useId"];
    if (_useId) {
      const generatedId = _useId();
      const escapedId = React11.useMemo(() => generatedId.replace(/:/g, ""), [
        generatedId
      ]);
      return providedId || `${idPrefix}${prefix2}${escapedId}`;
    }
    return React11.useMemo(() => {
      if (providedId) {
        return providedId;
      }
      return `${idPrefix}${prefix2}${++contextValue.current}`;
    }, [
      idPrefix,
      prefix2,
      providedId,
      contextValue
    ]);
  }

  // ../node_modules/@fluentui/react-utilities/lib/hooks/useMergedRefs.js
  var React12 = __toESM(require_react());
  function useMergedRefs(...refs) {
    const mergedCallback = React12.useCallback(
      (value) => {
        mergedCallback.current = value;
        for (const ref of refs) {
          if (typeof ref === "function") {
            ref(value);
          } else if (ref) {
            ref.current = value;
          }
        }
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps -- already exhaustive
      [
        ...refs
      ]
    );
    return mergedCallback;
  }

  // ../node_modules/@fluentui/react-utilities/lib/utils/getNativeElementProps.js
  var React13 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/utils/properties.js
  var toObjectMap = (...items) => {
    const result = {};
    for (const item of items) {
      const keys2 = Array.isArray(item) ? item : Object.keys(item);
      for (const key of keys2) {
        result[key] = 1;
      }
    }
    return result;
  };
  var baseElementEvents = toObjectMap([
    "onAuxClick",
    "onAnimationEnd",
    "onAnimationStart",
    "onCopy",
    "onCut",
    "onPaste",
    "onCompositionEnd",
    "onCompositionStart",
    "onCompositionUpdate",
    "onFocus",
    "onFocusCapture",
    "onBlur",
    "onBlurCapture",
    "onChange",
    "onInput",
    "onSubmit",
    "onLoad",
    "onError",
    "onKeyDown",
    "onKeyDownCapture",
    "onKeyPress",
    "onKeyUp",
    "onAbort",
    "onCanPlay",
    "onCanPlayThrough",
    "onDurationChange",
    "onEmptied",
    "onEncrypted",
    "onEnded",
    "onLoadedData",
    "onLoadedMetadata",
    "onLoadStart",
    "onPause",
    "onPlay",
    "onPlaying",
    "onProgress",
    "onRateChange",
    "onSeeked",
    "onSeeking",
    "onStalled",
    "onSuspend",
    "onTimeUpdate",
    "onVolumeChange",
    "onWaiting",
    "onClick",
    "onClickCapture",
    "onContextMenu",
    "onDoubleClick",
    "onDrag",
    "onDragEnd",
    "onDragEnter",
    "onDragExit",
    "onDragLeave",
    "onDragOver",
    "onDragStart",
    "onDrop",
    "onMouseDown",
    "onMouseDownCapture",
    "onMouseEnter",
    "onMouseLeave",
    "onMouseMove",
    "onMouseOut",
    "onMouseOver",
    "onMouseUp",
    "onMouseUpCapture",
    "onSelect",
    "onTouchCancel",
    "onTouchEnd",
    "onTouchMove",
    "onTouchStart",
    "onScroll",
    "onWheel",
    "onPointerCancel",
    "onPointerDown",
    "onPointerEnter",
    "onPointerLeave",
    "onPointerMove",
    "onPointerOut",
    "onPointerOver",
    "onPointerUp",
    "onGotPointerCapture",
    "onLostPointerCapture"
  ]);
  var baseElementProperties = toObjectMap([
    "accessKey",
    "children",
    "className",
    "contentEditable",
    "dir",
    "draggable",
    "hidden",
    "htmlFor",
    "id",
    "lang",
    "ref",
    "role",
    "style",
    "tabIndex",
    "title",
    "translate",
    "spellCheck",
    "name"
  ]);
  var microdataProperties = toObjectMap([
    "itemID",
    "itemProp",
    "itemRef",
    "itemScope",
    "itemType"
  ]);
  var htmlElementProperties = toObjectMap(baseElementProperties, baseElementEvents, microdataProperties);
  var labelProperties = toObjectMap(htmlElementProperties, [
    "form"
  ]);
  var audioProperties = toObjectMap(htmlElementProperties, [
    "height",
    "loop",
    "muted",
    "preload",
    "src",
    "width"
  ]);
  var videoProperties = toObjectMap(audioProperties, [
    "poster"
  ]);
  var olProperties = toObjectMap(htmlElementProperties, [
    "start"
  ]);
  var liProperties = toObjectMap(htmlElementProperties, [
    "value"
  ]);
  var anchorProperties = toObjectMap(htmlElementProperties, [
    "download",
    "href",
    "hrefLang",
    "media",
    "rel",
    "target",
    "type"
  ]);
  var timeProperties = toObjectMap(htmlElementProperties, [
    "dateTime"
  ]);
  var buttonProperties = toObjectMap(htmlElementProperties, [
    "autoFocus",
    "disabled",
    "form",
    "formAction",
    "formEncType",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "type",
    "value"
  ]);
  var inputProperties = toObjectMap(buttonProperties, [
    "accept",
    "alt",
    "autoCapitalize",
    "autoComplete",
    "checked",
    "dirname",
    "form",
    "height",
    "inputMode",
    "list",
    "max",
    "maxLength",
    "min",
    "multiple",
    "pattern",
    "placeholder",
    "readOnly",
    "required",
    "src",
    "step",
    "size",
    "type",
    "value",
    "width"
  ]);
  var textAreaProperties = toObjectMap(buttonProperties, [
    "autoCapitalize",
    "cols",
    "dirname",
    "form",
    "maxLength",
    "placeholder",
    "readOnly",
    "required",
    "rows",
    "wrap"
  ]);
  var selectProperties = toObjectMap(buttonProperties, [
    "form",
    "multiple",
    "required"
  ]);
  var optionProperties = toObjectMap(htmlElementProperties, [
    "selected",
    "value"
  ]);
  var tableProperties = toObjectMap(htmlElementProperties, [
    "cellPadding",
    "cellSpacing"
  ]);
  var trProperties = htmlElementProperties;
  var thProperties = toObjectMap(htmlElementProperties, [
    "colSpan",
    "rowSpan",
    "scope"
  ]);
  var tdProperties = toObjectMap(htmlElementProperties, [
    "colSpan",
    "headers",
    "rowSpan",
    "scope"
  ]);
  var colGroupProperties = toObjectMap(htmlElementProperties, [
    "span"
  ]);
  var colProperties = toObjectMap(htmlElementProperties, [
    "span"
  ]);
  var fieldsetProperties = toObjectMap(htmlElementProperties, [
    "disabled",
    "form"
  ]);
  var formProperties = toObjectMap(htmlElementProperties, [
    "acceptCharset",
    "action",
    "encType",
    "encType",
    "method",
    "noValidate",
    "target"
  ]);
  var iframeProperties = toObjectMap(htmlElementProperties, [
    "allow",
    "allowFullScreen",
    "allowPaymentRequest",
    "allowTransparency",
    "csp",
    "height",
    "importance",
    "referrerPolicy",
    "sandbox",
    "src",
    "srcDoc",
    "width"
  ]);
  var imgProperties = toObjectMap(htmlElementProperties, [
    "alt",
    "crossOrigin",
    "height",
    "src",
    "srcSet",
    "useMap",
    "width"
  ]);
  var dialogProperties = toObjectMap(htmlElementProperties, [
    "open",
    "onCancel",
    "onClose"
  ]);
  function getNativeProps(props, allowedPropNames, excludedPropNames) {
    const isArray = Array.isArray(allowedPropNames);
    const result = {};
    const keys2 = Object.keys(props);
    for (const key of keys2) {
      var _excludedPropNames;
      const isNativeProp = !isArray && allowedPropNames[key] || isArray && allowedPropNames.indexOf(key) >= 0 || key.indexOf("data-") === 0 || key.indexOf("aria-") === 0;
      if (isNativeProp && (!excludedPropNames || ((_excludedPropNames = excludedPropNames) === null || _excludedPropNames === void 0 ? void 0 : _excludedPropNames.indexOf(key)) === -1)) {
        result[key] = props[key];
      }
    }
    return result;
  }

  // ../node_modules/@fluentui/react-utilities/lib/utils/getNativeElementProps.js
  var nativeElementMap = {
    label: labelProperties,
    audio: audioProperties,
    video: videoProperties,
    ol: olProperties,
    li: liProperties,
    a: anchorProperties,
    button: buttonProperties,
    input: inputProperties,
    textarea: textAreaProperties,
    select: selectProperties,
    option: optionProperties,
    table: tableProperties,
    tr: trProperties,
    th: thProperties,
    td: tdProperties,
    colGroup: colGroupProperties,
    col: colProperties,
    fieldset: fieldsetProperties,
    form: formProperties,
    iframe: iframeProperties,
    img: imgProperties,
    time: timeProperties,
    dialog: dialogProperties
  };
  function getNativeElementProps(tagName, props, excludedPropNames) {
    const allowedPropNames = tagName && nativeElementMap[tagName] || htmlElementProperties;
    allowedPropNames.as = 1;
    return getNativeProps(props, allowedPropNames, excludedPropNames);
  }
  var getPartitionedNativeProps = ({ primarySlotTagName, props, excludedPropNames }) => {
    return {
      root: {
        style: props.style,
        className: props.className
      },
      primary: getNativeElementProps(primarySlotTagName, props, [
        ...excludedPropNames || [],
        "style",
        "className"
      ])
    };
  };

  // ../node_modules/@fluentui/react-utilities/lib/utils/mergeCallbacks.js
  function mergeCallbacks(callback1, callback2) {
    return (...args) => {
      var _callback1, _callback2;
      (_callback1 = callback1) === null || _callback1 === void 0 ? void 0 : _callback1(...args);
      (_callback2 = callback2) === null || _callback2 === void 0 ? void 0 : _callback2(...args);
    };
  }

  // ../node_modules/@fluentui/react-utilities/lib/utils/isHTMLElement.js
  function isHTMLElement(element2, options) {
    var _typedElement_ownerDocument, _typedElement, _options;
    const typedElement = element2;
    var _options_constructorName;
    return Boolean(((_typedElement = typedElement) === null || _typedElement === void 0 ? void 0 : (_typedElement_ownerDocument = _typedElement.ownerDocument) === null || _typedElement_ownerDocument === void 0 ? void 0 : _typedElement_ownerDocument.defaultView) && typedElement instanceof typedElement.ownerDocument.defaultView[(_options_constructorName = (_options = options) === null || _options === void 0 ? void 0 : _options.constructorName) !== null && _options_constructorName !== void 0 ? _options_constructorName : "HTMLElement"]);
  }

  // ../node_modules/@fluentui/react-utilities/lib/trigger/applyTriggerPropsToChildren.js
  var React15 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/trigger/isFluentTrigger.js
  var React14 = __toESM(require_react());
  function isFluentTrigger(element2) {
    return Boolean(element2.type.isFluentTriggerComponent);
  }

  // ../node_modules/@fluentui/react-utilities/lib/trigger/applyTriggerPropsToChildren.js
  function applyTriggerPropsToChildren(children, triggerChildProps) {
    if (typeof children === "function") {
      return children(triggerChildProps);
    } else if (children) {
      return cloneTriggerTree(children, triggerChildProps);
    }
    return children || null;
  }
  function cloneTriggerTree(child, triggerProps) {
    if (!React15.isValidElement(child) || child.type === React15.Fragment) {
      throw new Error("A trigger element must be a single element for this component. Please ensure that you're not using React Fragments.");
    }
    if (isFluentTrigger(child)) {
      const grandchild = cloneTriggerTree(child.props.children, triggerProps);
      return React15.cloneElement(child, void 0, grandchild);
    } else {
      return React15.cloneElement(child, triggerProps);
    }
  }

  // ../node_modules/@fluentui/react-utilities/lib/trigger/getTriggerChild.js
  var React16 = __toESM(require_react());
  function getTriggerChild(children) {
    if (!React16.isValidElement(children)) {
      return null;
    }
    return isFluentTrigger(children) ? getTriggerChild(
      // FIXME: This casting should be unnecessary as isFluentTrigger is a guard type method,
      // but for some reason it's failing on build
      children.props.children
    ) : children;
  }

  // ../node_modules/@fluentui/react-utilities/lib/selection/useSelection.js
  var React17 = __toESM(require_react());

  // ../node_modules/@fluentui/react-utilities/lib/utils/createSetFromIterable.js
  function createSetFromIterable(iterable) {
    return iterable instanceof Set ? iterable : new Set(iterable);
  }

  // ../node_modules/@fluentui/react-utilities/lib/selection/useSelection.js
  function useSelectionState(params) {
    const [selected, setSelected] = useControllableState({
      initialState: /* @__PURE__ */ new Set(),
      defaultState: React17.useMemo(() => params.defaultSelectedItems && createSetFromIterable(params.defaultSelectedItems), [
        params.defaultSelectedItems
      ]),
      state: React17.useMemo(() => params.selectedItems && createSetFromIterable(params.selectedItems), [
        params.selectedItems
      ])
    });
    const changeSelection = (event, nextSelectedItems) => {
      var _params_onSelectionChange, _params;
      (_params_onSelectionChange = (_params = params).onSelectionChange) === null || _params_onSelectionChange === void 0 ? void 0 : _params_onSelectionChange.call(_params, event, {
        selectedItems: nextSelectedItems
      });
      setSelected(nextSelectedItems);
    };
    return [
      selected,
      changeSelection
    ];
  }
  function useSingleSelection(params) {
    const [selected, changeSelection] = useSelectionState(params);
    var _selected_has;
    const methods = {
      deselectItem: (event) => changeSelection(event, /* @__PURE__ */ new Set()),
      selectItem: (event, itemId) => changeSelection(event, /* @__PURE__ */ new Set([
        itemId
      ])),
      toggleAllItems: () => {
        if (true) {
          throw new Error("[react-utilities]: `toggleAllItems` should not be used in single selection mode");
        }
      },
      toggleItem: (event, itemId) => changeSelection(event, /* @__PURE__ */ new Set([
        itemId
      ])),
      clearItems: (event) => changeSelection(event, /* @__PURE__ */ new Set()),
      isSelected: (itemId) => (_selected_has = selected.has(itemId)) !== null && _selected_has !== void 0 ? _selected_has : false
    };
    return [
      selected,
      methods
    ];
  }
  function useMultipleSelection(params) {
    const [selected, changeSelection] = useSelectionState(params);
    const methods = {
      toggleItem: (event, itemId) => {
        const nextSelectedItems = new Set(selected);
        if (selected.has(itemId)) {
          nextSelectedItems.delete(itemId);
        } else {
          nextSelectedItems.add(itemId);
        }
        changeSelection(event, nextSelectedItems);
      },
      selectItem: (event, itemId) => {
        const nextSelectedItems = new Set(selected);
        nextSelectedItems.add(itemId);
        changeSelection(event, nextSelectedItems);
      },
      deselectItem: (event, itemId) => {
        const nextSelectedItems = new Set(selected);
        nextSelectedItems.delete(itemId);
        changeSelection(event, nextSelectedItems);
      },
      clearItems: (event) => {
        changeSelection(event, /* @__PURE__ */ new Set());
      },
      isSelected: (itemId) => selected.has(itemId),
      toggleAllItems: (event, itemIds) => {
        const allItemsSelected = itemIds.every((itemId) => selected.has(itemId));
        const nextSelectedItems = new Set(selected);
        if (allItemsSelected) {
          nextSelectedItems.clear();
        } else {
          itemIds.forEach((itemId) => nextSelectedItems.add(itemId));
        }
        changeSelection(event, nextSelectedItems);
      }
    };
    return [
      selected,
      methods
    ];
  }
  function useSelection(params) {
    if (params.selectionMode === "multiselect") {
      return useMultipleSelection(params);
    }
    return useSingleSelection(params);
  }

  // ../node_modules/@fluentui/react-jsx-runtime/lib/utils/getMetadataFromSlotComponent.js
  function getMetadataFromSlotComponent(type) {
    const { as, [SLOT_ELEMENT_TYPE_SYMBOL]: baseElementType, [SLOT_RENDER_FUNCTION_SYMBOL]: renderFunction, ...propsWithoutMetadata } = type;
    const props = propsWithoutMetadata;
    const elementType2 = typeof baseElementType === "string" ? as !== null && as !== void 0 ? as : baseElementType : baseElementType;
    if (typeof elementType2 !== "string" && as) {
      props.as = as;
    }
    return {
      elementType: elementType2,
      props,
      renderFunction
    };
  }

  // ../node_modules/@fluentui/react-jsx-runtime/lib/utils/createCompatSlotComponent.js
  var React18 = __toESM(require_react());
  function createCompatSlotComponent(type, props) {
    return {
      ...props,
      [SLOT_ELEMENT_TYPE_SYMBOL]: type
    };
  }

  // ../node_modules/@fluentui/react-jsx-runtime/lib/jsx/createJSX.js
  var createJSX = (runtime) => {
    const jsxFromSlotComponent = (type, overrideProps, key, source, self2) => {
      const { elementType: elementType2, renderFunction, props: slotProps } = getMetadataFromSlotComponent(type);
      const props = {
        ...slotProps,
        ...overrideProps
      };
      if (renderFunction) {
        return runtime(React19.Fragment, {
          children: renderFunction(elementType2, props)
        }, key, source, self2);
      }
      return runtime(elementType2, props, key, source, self2);
    };
    return (type, overrideProps, key, source, self2) => {
      if (isSlot(overrideProps)) {
        return jsxFromSlotComponent(createCompatSlotComponent(type, overrideProps), null, key, source, self2);
      }
      if (isSlot(type)) {
        return jsxFromSlotComponent(type, overrideProps, key, source, self2);
      }
      return runtime(type, overrideProps, key, source, self2);
    };
  };

  // ../node_modules/@fluentui/react-jsx-runtime/lib/jsx-runtime.js
  var import_react2 = __toESM(require_react());
  var jsx = createJSX(Runtime.jsx);
  var jsxs = createJSX(Runtime.jsxs);

  // ../node_modules/@fluentui/react-shared-contexts/lib/ThemeContext/ThemeContext.js
  var React20 = __toESM(require_react());
  var ThemeContext = React20.createContext(void 0);
  var ThemeProvider = ThemeContext.Provider;

  // ../node_modules/@fluentui/react-shared-contexts/lib/ThemeClassNameContext/ThemeClassNameContext.js
  var React21 = __toESM(require_react());
  var ThemeClassNameContext = React21.createContext(void 0);
  var themeClassNameContextDefaultVaue = "";
  var ThemeClassNameProvider = ThemeClassNameContext.Provider;
  function useThemeClassName() {
    var _React_useContext4;
    return (_React_useContext4 = React21.useContext(ThemeClassNameContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : themeClassNameContextDefaultVaue;
  }

  // ../node_modules/@fluentui/react-shared-contexts/lib/TooltipVisibilityContext/TooltipContext.js
  var React22 = __toESM(require_react());
  var TooltipVisibilityContext = React22.createContext(void 0);
  var TooltipVisibilityProvider = TooltipVisibilityContext.Provider;

  // ../node_modules/@fluentui/react-shared-contexts/lib/ProviderContext/ProviderContext.js
  var React23 = __toESM(require_react());
  var ProviderContext = React23.createContext(void 0);
  var providerContextDefaultValue = {
    targetDocument: typeof document === "object" ? document : void 0,
    dir: "ltr"
  };
  var Provider = ProviderContext.Provider;
  function useFluent() {
    var _React_useContext4;
    return (_React_useContext4 = React23.useContext(ProviderContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : providerContextDefaultValue;
  }

  // ../node_modules/@fluentui/react-shared-contexts/lib/OverridesContext/OverridesContext.js
  var React24 = __toESM(require_react());
  var OverridesContext = React24.createContext(void 0);
  var OverridesProvider = OverridesContext.Provider;
  function useOverrides() {
    var _React_useContext4;
    return (_React_useContext4 = React24.useContext(OverridesContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : {};
  }

  // ../node_modules/@fluentui/react-shared-contexts/lib/CustomStyleHooksContext/CustomStyleHooksContext.js
  var React25 = __toESM(require_react());
  var CustomStyleHooksContext = React25.createContext(void 0);
  var noop = () => {
  };
  var CustomStyleHooksProvider = CustomStyleHooksContext.Provider;
  var useCustomStyleHook = (hook) => {
    var _React_useContext4;
    var _React_useContext_hook;
    return (_React_useContext_hook = (_React_useContext4 = React25.useContext(CustomStyleHooksContext)) === null || _React_useContext4 === void 0 ? void 0 : _React_useContext4[hook]) !== null && _React_useContext_hook !== void 0 ? _React_useContext_hook : noop;
  };

  // ../node_modules/@fluentui/react-shared-contexts/lib/PortalMountNodeContext.js
  var React26 = __toESM(require_react());
  var PortalMountNodeContext = React26.createContext(void 0);
  var PortalMountNodeProvider = PortalMountNodeContext.Provider;
  function usePortalMountNode() {
    return React26.useContext(PortalMountNodeContext);
  }

  // ../node_modules/@fluentui/react-icons/lib/utils/createFluentIcon.js
  var React27 = __toESM(require_react());

  // ../node_modules/@fluentui/react-icons/lib/utils/useIconState.js
  var useRootStyles = __styles2({
    "root": {
      "mc9l5x": "f1w7gpdv",
      "Bg96gwp": "fez10in",
      "ycbfsm": "fg4l7m0"
    }
  }, {
    "d": [".f1w7gpdv{display:inline;}", ".fez10in{line-height:0;}"],
    "t": ["@media (forced-colors: active){.fg4l7m0{forced-color-adjust:auto;}}"]
  });
  var useIconState = (props) => {
    const {
      title,
      primaryFill = "currentColor",
      ...rest
    } = props;
    const state = {
      ...rest,
      title: void 0,
      fill: primaryFill
    };
    const styles2 = useRootStyles();
    state.className = mergeClasses(styles2.root, state.className);
    if (title) {
      state["aria-label"] = title;
    }
    if (!state["aria-label"] && !state["aria-labelledby"]) {
      state["aria-hidden"] = true;
    } else {
      state["role"] = "img";
    }
    return state;
  };

  // ../node_modules/@fluentui/react-icons/lib/utils/createFluentIcon.js
  var createFluentIcon = (displayName, width, paths) => {
    const viewBoxWidth = width === "1em" ? "20" : width;
    const Icon5 = React27.forwardRef((props, ref) => {
      const state = {
        ...useIconState(props),
        ref,
        width,
        height: width,
        viewBox: `0 0 ${viewBoxWidth} ${viewBoxWidth}`,
        xmlns: "http://www.w3.org/2000/svg"
      };
      return React27.createElement("svg", state, ...paths.map((d2) => React27.createElement("path", {
        d: d2,
        fill: state.fill
      })));
    });
    Icon5.displayName = displayName;
    return Icon5;
  };

  // ../node_modules/@fluentui/react-icons/lib/icons/chunk-0.js
  var ArrowDownRegular = /* @__PURE__ */ createFluentIcon("ArrowDownRegular", "1em", ["M16.87 10.84a.5.5 0 1 0-.74-.68l-5.63 6.17V2.5a.5.5 0 0 0-1 0v13.83l-5.63-6.17a.5.5 0 0 0-.74.68l6.31 6.91a.75.75 0 0 0 1.11 0l6.32-6.91Z"]);
  var ArrowUpRegular = /* @__PURE__ */ createFluentIcon("ArrowUpRegular", "1em", ["M3.13 9.16a.5.5 0 1 0 .74.68L9.5 3.67V17.5a.5.5 0 1 0 1 0V3.67l5.63 6.17a.5.5 0 0 0 .74-.68l-6.32-6.92a.75.75 0 0 0-1.1 0L3.13 9.16Z"]);

  // ../node_modules/@fluentui/react-icons/lib/icons/chunk-1.js
  var CircleFilled = /* @__PURE__ */ createFluentIcon("CircleFilled", "1em", ["M10 2a8 8 0 1 0 0 16 8 8 0 0 0 0-16Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-2.js
  var Checkmark12Filled = /* @__PURE__ */ createFluentIcon("Checkmark12Filled", "12", ["M9.76 3.2c.3.29.32.76.04 1.06l-4.25 4.5a.75.75 0 0 1-1.08.02L2.22 6.53a.75.75 0 0 1 1.06-1.06l1.7 1.7L8.7 3.24a.75.75 0 0 1 1.06-.04Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-3.js
  var Checkmark16Filled = /* @__PURE__ */ createFluentIcon("Checkmark16Filled", "16", ["M14.05 3.49c.28.3.27.77-.04 1.06l-7.93 7.47A.85.85 0 0 1 4.9 12L2.22 9.28a.75.75 0 1 1 1.06-1.06l2.24 2.27 7.47-7.04a.75.75 0 0 1 1.06.04Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-4.js
  var Dismiss20Regular = /* @__PURE__ */ createFluentIcon("Dismiss20Regular", "20", ["m4.09 4.22.06-.07a.5.5 0 0 1 .63-.06l.07.06L10 9.29l5.15-5.14a.5.5 0 0 1 .63-.06l.07.06c.18.17.2.44.06.63l-.06.07L10.71 10l5.14 5.15c.18.17.2.44.06.63l-.06.07a.5.5 0 0 1-.63.06l-.07-.06L10 10.71l-5.15 5.14a.5.5 0 0 1-.63.06l-.07-.06a.5.5 0 0 1-.06-.63l.06-.07L9.29 10 4.15 4.85a.5.5 0 0 1-.06-.63l.06-.07-.06.07Z"]);

  // ../node_modules/@fluentui/react-icons/lib/sizedIcons/chunk-11.js
  var Square12Filled = /* @__PURE__ */ createFluentIcon("Square12Filled", "12", ["M2 4c0-1.1.9-2 2-2h4a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4Z"]);
  var Square16Filled = /* @__PURE__ */ createFluentIcon("Square16Filled", "16", ["M2 4.5A2.5 2.5 0 0 1 4.5 2h7A2.5 2.5 0 0 1 14 4.5v7a2.5 2.5 0 0 1-2.5 2.5h-7A2.5 2.5 0 0 1 2 11.5v-7Z"]);

  // ../node_modules/@fluentui/react-icons/lib/contexts/IconDirectionContext.js
  var React28 = __toESM(require_react());
  var IconDirectionContext = React28.createContext(void 0);
  var IconDirectionContextProvider = IconDirectionContext.Provider;

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/renderFluentProvider.js
  var renderFluentProvider_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(Provider, {
      value: contextValues.provider,
      children: /* @__PURE__ */ jsx(ThemeProvider, {
        value: contextValues.theme,
        children: /* @__PURE__ */ jsx(ThemeClassNameProvider, {
          value: contextValues.themeClassName,
          children: /* @__PURE__ */ jsx(CustomStyleHooksProvider, {
            value: contextValues.customStyleHooks_unstable,
            children: /* @__PURE__ */ jsx(TooltipVisibilityProvider, {
              value: contextValues.tooltip,
              children: /* @__PURE__ */ jsx(TextDirectionProvider, {
                dir: contextValues.textDirection,
                children: /* @__PURE__ */ jsx(IconDirectionContextProvider, {
                  value: contextValues.iconDirection,
                  children: /* @__PURE__ */ jsx(OverridesProvider, {
                    value: contextValues.overrides_unstable,
                    children: /* @__PURE__ */ jsxs(state.root, {
                      children: [
                        canUseDOM2() ? null : /* @__PURE__ */ jsx("style", {
                          // Using dangerous HTML because react can escape characters
                          // which can lead to invalid CSS.
                          // eslint-disable-next-line react/no-danger
                          dangerouslySetInnerHTML: {
                            __html: state.serverStyleProps.cssRule
                          },
                          ...state.serverStyleProps.attributes
                        }),
                        state.root.children
                      ]
                    })
                  })
                })
              })
            })
          })
        })
      })
    });
  };

  // ../node_modules/keyborg/dist/keyborg.esm.js
  var _canUseWeakRef = typeof WeakRef !== "undefined";
  var WeakRefInstance = class {
    constructor(instance) {
      if (_canUseWeakRef && typeof instance === "object") {
        this._weakRef = new WeakRef(instance);
      } else {
        this._instance = instance;
      }
    }
    /**
     * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/deref}
     */
    deref() {
      var _a5, _b, _c;
      let instance;
      if (this._weakRef) {
        instance = (_a5 = this._weakRef) === null || _a5 === void 0 ? void 0 : _a5.deref();
        if (!instance) {
          delete this._weakRef;
        }
      } else {
        instance = this._instance;
        if ((_c = (_b = instance) === null || _b === void 0 ? void 0 : _b.isDisposed) === null || _c === void 0 ? void 0 : _c.call(_b)) {
          delete this._instance;
        }
      }
      return instance;
    }
  };
  var KEYBORG_FOCUSIN = "keyborg:focusin";
  function canOverrideNativeFocus(win2) {
    const HTMLElement2 = win2.HTMLElement;
    const origFocus = HTMLElement2.prototype.focus;
    let isCustomFocusCalled = false;
    HTMLElement2.prototype.focus = function focus() {
      isCustomFocusCalled = true;
    };
    const btn = win2.document.createElement("button");
    btn.focus();
    HTMLElement2.prototype.focus = origFocus;
    return isCustomFocusCalled;
  }
  var _canOverrideNativeFocus = false;
  function nativeFocus(element2) {
    const focus = element2.focus;
    if (focus.__keyborgNativeFocus) {
      focus.__keyborgNativeFocus.call(element2);
    } else {
      element2.focus();
    }
  }
  function setupFocusEvent(win2) {
    const kwin = win2;
    if (!_canOverrideNativeFocus) {
      _canOverrideNativeFocus = canOverrideNativeFocus(kwin);
    }
    const origFocus = kwin.HTMLElement.prototype.focus;
    if (origFocus.__keyborgNativeFocus) {
      return;
    }
    kwin.HTMLElement.prototype.focus = focus;
    const data = kwin.__keyborgData = {
      focusInHandler: (e2) => {
        var _a5;
        const target = e2.target;
        if (!target) {
          return;
        }
        const event = document.createEvent("HTMLEvents");
        event.initEvent(KEYBORG_FOCUSIN, true, true);
        const details = {
          relatedTarget: e2.relatedTarget || void 0
        };
        if (_canOverrideNativeFocus || data.lastFocusedProgrammatically) {
          details.isFocusedProgrammatically = target === ((_a5 = data.lastFocusedProgrammatically) === null || _a5 === void 0 ? void 0 : _a5.deref());
          data.lastFocusedProgrammatically = void 0;
        }
        event.details = details;
        target.dispatchEvent(event);
      }
    };
    kwin.document.addEventListener("focusin", kwin.__keyborgData.focusInHandler, true);
    function focus() {
      const keyborgNativeFocusEvent = kwin.__keyborgData;
      if (keyborgNativeFocusEvent) {
        keyborgNativeFocusEvent.lastFocusedProgrammatically = new WeakRefInstance(this);
      }
      return origFocus.apply(this, arguments);
    }
    focus.__keyborgNativeFocus = origFocus;
  }
  function disposeFocusEvent(win2) {
    const kwin = win2;
    const proto = kwin.HTMLElement.prototype;
    const origFocus = proto.focus.__keyborgNativeFocus;
    const keyborgNativeFocusEvent = kwin.__keyborgData;
    if (keyborgNativeFocusEvent) {
      kwin.document.removeEventListener("focusin", keyborgNativeFocusEvent.focusInHandler, true);
      delete kwin.__keyborgData;
    }
    if (origFocus) {
      proto.focus = origFocus;
    }
  }
  var _dismissTimeout = 500;
  var _lastId = 0;
  var KeyborgState = class {
    constructor() {
      this.__keyborgCoreRefs = {};
      this._isNavigatingWithKeyboard = false;
    }
    add(keyborg) {
      const id = keyborg.id;
      if (!(id in this.__keyborgCoreRefs)) {
        this.__keyborgCoreRefs[id] = new WeakRefInstance(keyborg);
      }
    }
    remove(id) {
      delete this.__keyborgCoreRefs[id];
      if (Object.keys(this.__keyborgCoreRefs).length === 0) {
        this._isNavigatingWithKeyboard = false;
      }
    }
    setVal(isNavigatingWithKeyboard) {
      if (this._isNavigatingWithKeyboard === isNavigatingWithKeyboard) {
        return;
      }
      this._isNavigatingWithKeyboard = isNavigatingWithKeyboard;
      for (const id of Object.keys(this.__keyborgCoreRefs)) {
        const ref = this.__keyborgCoreRefs[id];
        const keyborg = ref.deref();
        if (keyborg) {
          keyborg.update(isNavigatingWithKeyboard);
        } else {
          this.remove(id);
        }
      }
    }
    getVal() {
      return this._isNavigatingWithKeyboard;
    }
  };
  var _state = /* @__PURE__ */ new KeyborgState();
  var KeyborgCore = class {
    constructor(win2, props) {
      this._isMouseUsed = false;
      this._onFocusIn = (e2) => {
        if (this._isMouseUsed) {
          this._isMouseUsed = false;
          return;
        }
        if (_state.getVal()) {
          return;
        }
        const details = e2.details;
        if (!details.relatedTarget) {
          return;
        }
        if (details.isFocusedProgrammatically || details.isFocusedProgrammatically === void 0) {
          return;
        }
        _state.setVal(true);
      };
      this._onMouseDown = (e2) => {
        if (e2.buttons === 0 || e2.clientX === 0 && e2.clientY === 0 && e2.screenX === 0 && e2.screenY === 0) {
          return;
        }
        this._isMouseUsed = true;
        _state.setVal(false);
      };
      this._onKeyDown = (e2) => {
        var _a5;
        const isNavigatingWithKeyboard = _state.getVal();
        const keyCode = e2.keyCode;
        const triggerKeys = this._triggerKeys;
        if (!isNavigatingWithKeyboard && (!triggerKeys || triggerKeys.has(keyCode))) {
          _state.setVal(true);
        } else if (isNavigatingWithKeyboard && ((_a5 = this._dismissKeys) === null || _a5 === void 0 ? void 0 : _a5.has(keyCode))) {
          this._scheduleDismiss();
        }
      };
      this.id = "c" + ++_lastId;
      this._win = win2;
      const doc = win2.document;
      if (props) {
        const triggerKeys = props.triggerKeys;
        const dismissKeys = props.dismissKeys;
        if (triggerKeys === null || triggerKeys === void 0 ? void 0 : triggerKeys.length) {
          this._triggerKeys = new Set(triggerKeys);
        }
        if (dismissKeys === null || dismissKeys === void 0 ? void 0 : dismissKeys.length) {
          this._dismissKeys = new Set(dismissKeys);
        }
      }
      doc.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
      doc.addEventListener("mousedown", this._onMouseDown, true);
      win2.addEventListener("keydown", this._onKeyDown, true);
      setupFocusEvent(win2);
      _state.add(this);
    }
    dispose() {
      const win2 = this._win;
      if (win2) {
        if (this._dismissTimer) {
          win2.clearTimeout(this._dismissTimer);
          this._dismissTimer = void 0;
        }
        disposeFocusEvent(win2);
        const doc = win2.document;
        doc.removeEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
        doc.removeEventListener("mousedown", this._onMouseDown, true);
        win2.removeEventListener("keydown", this._onKeyDown, true);
        delete this._win;
        _state.remove(this.id);
      }
    }
    isDisposed() {
      return !!this._win;
    }
    /**
     * Updates all keyborg instances with the keyboard navigation state
     */
    update(isNavigatingWithKeyboard) {
      var _a5, _b;
      const keyborgs = (_b = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.__keyborg) === null || _b === void 0 ? void 0 : _b.refs;
      if (keyborgs) {
        for (const id of Object.keys(keyborgs)) {
          Keyborg.update(keyborgs[id], isNavigatingWithKeyboard);
        }
      }
    }
    _scheduleDismiss() {
      const win2 = this._win;
      if (win2) {
        if (this._dismissTimer) {
          win2.clearTimeout(this._dismissTimer);
          this._dismissTimer = void 0;
        }
        const was = win2.document.activeElement;
        this._dismissTimer = win2.setTimeout(() => {
          this._dismissTimer = void 0;
          const cur = win2.document.activeElement;
          if (was && cur && was === cur) {
            _state.setVal(false);
          }
        }, _dismissTimeout);
      }
    }
  };
  var Keyborg = class {
    constructor(win2, props) {
      this._cb = [];
      this._id = "k" + ++_lastId;
      this._win = win2;
      const current = win2.__keyborg;
      if (current) {
        this._core = current.core;
        current.refs[this._id] = this;
      } else {
        this._core = new KeyborgCore(win2, props);
        win2.__keyborg = {
          core: this._core,
          refs: {
            [this._id]: this
          }
        };
      }
    }
    static create(win2, props) {
      return new Keyborg(win2, props);
    }
    static dispose(instance) {
      instance.dispose();
    }
    /**
     * Updates all subscribed callbacks with the keyboard navigation state
     */
    static update(instance, isNavigatingWithKeyboard) {
      instance._cb.forEach((callback) => callback(isNavigatingWithKeyboard));
    }
    dispose() {
      var _a5;
      const current = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.__keyborg;
      if (current === null || current === void 0 ? void 0 : current.refs[this._id]) {
        delete current.refs[this._id];
        if (Object.keys(current.refs).length === 0) {
          current.core.dispose();
          delete this._win.__keyborg;
        }
      } else if (true) {
        console.error("Keyborg instance " + this._id + " is being disposed incorrectly.");
      }
      this._cb = [];
      delete this._core;
      delete this._win;
    }
    /**
     * @returns Whether the user is navigating with keyboard
     */
    isNavigatingWithKeyboard() {
      return _state.getVal();
    }
    /**
     * @param callback - Called when the keyboard navigation state changes
     */
    subscribe(callback) {
      this._cb.push(callback);
    }
    /**
     * @param callback - Registered with subscribe
     */
    unsubscribe(callback) {
      const index2 = this._cb.indexOf(callback);
      if (index2 >= 0) {
        this._cb.splice(index2, 1);
      }
    }
    /**
     * Manually set the keyboard navigtion state
     */
    setVal(isNavigatingWithKeyboard) {
      _state.setVal(isNavigatingWithKeyboard);
    }
  };
  function createKeyborg(win2, props) {
    return Keyborg.create(win2, props);
  }
  function disposeKeyborg(instance) {
    Keyborg.dispose(instance);
  }

  // ../node_modules/tabster/dist/tabster.esm.js
  var TabsterAttributeName = "data-tabster";
  var TabsterDummyInputAttributeName = "data-tabster-dummy";
  var DeloserEventName = "tabster:deloser";
  var ModalizerActiveEventName = "tabster:modalizer:active";
  var ModalizerInactiveEventName = "tabster:modalizer:inactive";
  var ModalizerFocusInEventName = "tabster:modalizer:focusin";
  var ModalizerFocusOutEventName = "tabster:modalizer:focusout";
  var ModalizerBeforeFocusOutEventName = "tabster:modalizer:beforefocusout";
  var MoverEventName = "tabster:mover";
  var FocusInEventName = "tabster:focusin";
  var FocusOutEventName = "tabster:focusout";
  var ObservedElementAccesibilities = {
    Any: 0,
    Accessible: 1,
    Focusable: 2
  };
  var RestoreFocusOrders = {
    History: 0,
    DeloserDefault: 1,
    RootDefault: 2,
    DeloserFirst: 3,
    RootFirst: 4
  };
  var Visibilities = {
    Invisible: 0,
    PartiallyVisible: 1,
    Visible: 2
  };
  var RestorerTypes = {
    Source: 0,
    Target: 1
  };
  var MoverDirections = {
    Both: 0,
    Vertical: 1,
    Horizontal: 2,
    Grid: 3,
    GridLinear: 4
  };
  var GroupperTabbabilities = {
    Unlimited: 0,
    Limited: 1,
    LimitedTrapFocus: 2
  };
  var SysDummyInputsPositions = {
    Auto: 0,
    Inside: 1,
    Outside: 2
  };
  var Types = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    TabsterAttributeName,
    TabsterDummyInputAttributeName,
    DeloserEventName,
    ModalizerActiveEventName,
    ModalizerInactiveEventName,
    ModalizerFocusInEventName,
    ModalizerFocusOutEventName,
    ModalizerBeforeFocusOutEventName,
    MoverEventName,
    FocusInEventName,
    FocusOutEventName,
    ObservedElementAccesibilities,
    RestoreFocusOrders,
    Visibilities,
    RestorerTypes,
    MoverDirections,
    GroupperTabbabilities,
    SysDummyInputsPositions
  });
  function getTabsterOnElement(tabster, element2) {
    var _a5;
    return (_a5 = tabster.storageEntry(element2)) === null || _a5 === void 0 ? void 0 : _a5.tabster;
  }
  function updateTabsterByAttribute(tabster, element2, dispose) {
    var _a5, _b;
    const newAttrValue = dispose || tabster._noop ? void 0 : element2.getAttribute(TabsterAttributeName);
    let entry = tabster.storageEntry(element2);
    let newAttr;
    if (newAttrValue) {
      if (newAttrValue !== ((_a5 = entry === null || entry === void 0 ? void 0 : entry.attr) === null || _a5 === void 0 ? void 0 : _a5.string)) {
        try {
          const newValue = JSON.parse(newAttrValue);
          if (typeof newValue !== "object") {
            throw new Error(`Value is not a JSON object, got '${newAttrValue}'.`);
          }
          newAttr = {
            string: newAttrValue,
            object: newValue
          };
        } catch (e2) {
          if (true) {
            console.error(`data-tabster attribute error: ${e2}`, element2);
          }
        }
      } else {
        return;
      }
    } else if (!entry) {
      return;
    }
    if (!entry) {
      entry = tabster.storageEntry(element2, true);
    }
    if (!entry.tabster) {
      entry.tabster = {};
    }
    const tabsterOnElement = entry.tabster || {};
    const oldTabsterProps = ((_b = entry.attr) === null || _b === void 0 ? void 0 : _b.object) || {};
    const newTabsterProps = (newAttr === null || newAttr === void 0 ? void 0 : newAttr.object) || {};
    for (const key of Object.keys(oldTabsterProps)) {
      if (!newTabsterProps[key]) {
        if (key === "root") {
          const root151 = tabsterOnElement[key];
          if (root151) {
            tabster.root.onRoot(root151, true);
          }
        }
        switch (key) {
          case "deloser":
          case "root":
          case "groupper":
          case "modalizer":
          case "restorer":
          case "mover":
            const part = tabsterOnElement[key];
            if (part) {
              part.dispose();
              delete tabsterOnElement[key];
            }
            break;
          case "observed":
            delete tabsterOnElement[key];
            if (tabster.observedElement) {
              tabster.observedElement.onObservedElementUpdate(element2);
            }
            break;
          case "focusable":
          case "outline":
          case "uncontrolled":
          case "sys":
            delete tabsterOnElement[key];
            break;
        }
      }
    }
    for (const key of Object.keys(newTabsterProps)) {
      const sys = newTabsterProps.sys;
      switch (key) {
        case "deloser":
          if (tabsterOnElement.deloser) {
            tabsterOnElement.deloser.setProps(newTabsterProps.deloser);
          } else {
            if (tabster.deloser) {
              tabsterOnElement.deloser = tabster.deloser.createDeloser(element2, newTabsterProps.deloser);
            } else if (true) {
              console.error("Deloser API used before initialization, please call `getDeloser()`");
            }
          }
          break;
        case "root":
          if (tabsterOnElement.root) {
            tabsterOnElement.root.setProps(newTabsterProps.root);
          } else {
            tabsterOnElement.root = tabster.root.createRoot(element2, newTabsterProps.root, sys);
          }
          tabster.root.onRoot(tabsterOnElement.root);
          break;
        case "modalizer":
          if (tabsterOnElement.modalizer) {
            tabsterOnElement.modalizer.setProps(newTabsterProps.modalizer);
          } else {
            if (tabster.modalizer) {
              tabsterOnElement.modalizer = tabster.modalizer.createModalizer(element2, newTabsterProps.modalizer, sys);
            } else if (true) {
              console.error("Modalizer API used before initialization, please call `getModalizer()`");
            }
          }
          break;
        case "restorer":
          if (tabsterOnElement.restorer) {
            tabsterOnElement.restorer.setProps(newTabsterProps.restorer);
          } else {
            if (tabster.restorer) {
              if (newTabsterProps.restorer) {
                tabsterOnElement.restorer = tabster.restorer.createRestorer(element2, newTabsterProps.restorer);
              }
            } else if (true) {
              console.error("Restorer API used before initialization, please call `getRestorer()`");
            }
          }
          break;
        case "focusable":
          tabsterOnElement.focusable = newTabsterProps.focusable;
          break;
        case "groupper":
          if (tabsterOnElement.groupper) {
            tabsterOnElement.groupper.setProps(newTabsterProps.groupper);
          } else {
            if (tabster.groupper) {
              tabsterOnElement.groupper = tabster.groupper.createGroupper(element2, newTabsterProps.groupper, sys);
            } else if (true) {
              console.error("Groupper API used before initialization, please call `getGroupper()`");
            }
          }
          break;
        case "mover":
          if (tabsterOnElement.mover) {
            tabsterOnElement.mover.setProps(newTabsterProps.mover);
          } else {
            if (tabster.mover) {
              tabsterOnElement.mover = tabster.mover.createMover(element2, newTabsterProps.mover, sys);
            } else if (true) {
              console.error("Mover API used before initialization, please call `getMover()`");
            }
          }
          break;
        case "observed":
          if (tabster.observedElement) {
            tabsterOnElement.observed = newTabsterProps.observed;
            tabster.observedElement.onObservedElementUpdate(element2);
          } else if (true) {
            console.error("ObservedElement API used before initialization, please call `getObservedElement()`");
          }
          break;
        case "uncontrolled":
          tabsterOnElement.uncontrolled = newTabsterProps.uncontrolled;
          break;
        case "outline":
          if (tabster.outline) {
            tabsterOnElement.outline = newTabsterProps.outline;
          } else if (true) {
            console.error("Outline API used before initialization, please call `getOutline()`");
          }
          break;
        case "sys":
          tabsterOnElement.sys = newTabsterProps.sys;
          break;
        default:
          console.error(`Unknown key '${key}' in data-tabster attribute value.`);
      }
    }
    if (newAttr) {
      entry.attr = newAttr;
    } else {
      if (Object.keys(tabsterOnElement).length === 0) {
        delete entry.tabster;
        delete entry.attr;
      }
      tabster.storageEntry(element2, false);
    }
  }
  function createEventTarget(getWindow2) {
    const global2 = getWindow2();
    try {
      if (global2.EventTarget) {
        return new global2.EventTarget();
      }
    } catch (error) {
      if (!(error instanceof TypeError)) {
        throw error;
      }
    }
    return global2.document.createElement("div");
  }
  var _isBrokenIE11;
  var _DOMRect = typeof DOMRect !== "undefined" ? DOMRect : class {
    constructor(x, y2, width, height) {
      this.left = x || 0;
      this.top = y2 || 0;
      this.right = (x || 0) + (width || 0);
      this.bottom = (y2 || 0) + (height || 0);
    }
  };
  var _uidCounter = 0;
  try {
    document.createTreeWalker(document, NodeFilter.SHOW_ELEMENT);
    _isBrokenIE11 = false;
  } catch (e2) {
    _isBrokenIE11 = true;
  }
  var _updateDummyInputsTimeout = 100;
  function getInstanceContext(getWindow2) {
    const win2 = getWindow2();
    let ctx = win2.__tabsterInstanceContext;
    if (!ctx) {
      ctx = {
        elementByUId: {},
        basics: {
          Promise: win2.Promise || void 0,
          WeakRef: win2.WeakRef || void 0
        },
        containerBoundingRectCache: {},
        lastContainerBoundingRectCacheId: 0,
        fakeWeakRefs: [],
        fakeWeakRefsStarted: false
      };
      win2.__tabsterInstanceContext = ctx;
    }
    return ctx;
  }
  function disposeInstanceContext(win2) {
    const ctx = win2.__tabsterInstanceContext;
    if (ctx) {
      ctx.elementByUId = {};
      delete ctx.WeakRef;
      ctx.containerBoundingRectCache = {};
      if (ctx.containerBoundingRectCacheTimer) {
        win2.clearTimeout(ctx.containerBoundingRectCacheTimer);
      }
      if (ctx.fakeWeakRefsTimer) {
        win2.clearTimeout(ctx.fakeWeakRefsTimer);
      }
      ctx.fakeWeakRefs = [];
      delete win2.__tabsterInstanceContext;
    }
  }
  function createWeakMap(win2) {
    const ctx = win2.__tabsterInstanceContext;
    return new ((ctx === null || ctx === void 0 ? void 0 : ctx.basics.WeakMap) || WeakMap)();
  }
  var FakeWeakRef = class {
    constructor(target) {
      this._target = target;
    }
    deref() {
      return this._target;
    }
    static cleanup(fwr, forceRemove) {
      if (!fwr._target) {
        return true;
      }
      if (forceRemove || !documentContains(fwr._target.ownerDocument, fwr._target)) {
        delete fwr._target;
        return true;
      }
      return false;
    }
  };
  var WeakHTMLElement = class {
    constructor(getWindow2, element2, data) {
      const context = getInstanceContext(getWindow2);
      let ref;
      if (context.WeakRef) {
        ref = new context.WeakRef(element2);
      } else {
        ref = new FakeWeakRef(element2);
        context.fakeWeakRefs.push(ref);
      }
      this._ref = ref;
      this._data = data;
    }
    get() {
      const ref = this._ref;
      let element2;
      if (ref) {
        element2 = ref.deref();
        if (!element2) {
          delete this._ref;
        }
      }
      return element2;
    }
    getData() {
      return this._data;
    }
  };
  function cleanupFakeWeakRefs(getWindow2, forceRemove) {
    const context = getInstanceContext(getWindow2);
    context.fakeWeakRefs = context.fakeWeakRefs.filter((e2) => !FakeWeakRef.cleanup(e2, forceRemove));
  }
  function startFakeWeakRefsCleanup(getWindow2) {
    const context = getInstanceContext(getWindow2);
    if (!context.fakeWeakRefsStarted) {
      context.fakeWeakRefsStarted = true;
      context.WeakRef = getWeakRef(context);
    }
    if (!context.fakeWeakRefsTimer) {
      context.fakeWeakRefsTimer = getWindow2().setTimeout(() => {
        context.fakeWeakRefsTimer = void 0;
        cleanupFakeWeakRefs(getWindow2);
        startFakeWeakRefsCleanup(getWindow2);
      }, 2 * 60 * 1e3);
    }
  }
  function stopFakeWeakRefsCleanupAndClearStorage(getWindow2) {
    const context = getInstanceContext(getWindow2);
    context.fakeWeakRefsStarted = false;
    if (context.fakeWeakRefsTimer) {
      getWindow2().clearTimeout(context.fakeWeakRefsTimer);
      context.fakeWeakRefsTimer = void 0;
      context.fakeWeakRefs = [];
    }
  }
  function createElementTreeWalker(doc, root151, acceptNode) {
    if (root151.nodeType !== Node.ELEMENT_NODE) {
      return void 0;
    }
    const filter2 = _isBrokenIE11 ? acceptNode : {
      acceptNode
    };
    return doc.createTreeWalker(
      root151,
      NodeFilter.SHOW_ELEMENT,
      filter2,
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore: We still don't want to completely break IE11, so, entityReferenceExpansion argument is not optional.
      false
      /* Last argument is not optional for IE11! */
    );
  }
  function getBoundingRect(getWindow2, element2) {
    let cacheId = element2.__tabsterCacheId;
    const context = getInstanceContext(getWindow2);
    const cached = cacheId ? context.containerBoundingRectCache[cacheId] : void 0;
    if (cached) {
      return cached.rect;
    }
    const scrollingElement = element2.ownerDocument && element2.ownerDocument.documentElement;
    if (!scrollingElement) {
      return new _DOMRect();
    }
    let left = 0;
    let top = 0;
    let right = scrollingElement.clientWidth;
    let bottom = scrollingElement.clientHeight;
    if (element2 !== scrollingElement) {
      const r = element2.getBoundingClientRect();
      left = Math.max(left, r.left);
      top = Math.max(top, r.top);
      right = Math.min(right, r.right);
      bottom = Math.min(bottom, r.bottom);
    }
    const rect = new _DOMRect(left < right ? left : -1, top < bottom ? top : -1, left < right ? right - left : 0, top < bottom ? bottom - top : 0);
    if (!cacheId) {
      cacheId = "r-" + ++context.lastContainerBoundingRectCacheId;
      element2.__tabsterCacheId = cacheId;
    }
    context.containerBoundingRectCache[cacheId] = {
      rect,
      element: element2
    };
    if (!context.containerBoundingRectCacheTimer) {
      context.containerBoundingRectCacheTimer = window.setTimeout(() => {
        context.containerBoundingRectCacheTimer = void 0;
        for (const cId of Object.keys(context.containerBoundingRectCache)) {
          delete context.containerBoundingRectCache[cId].element.__tabsterCacheId;
        }
        context.containerBoundingRectCache = {};
      }, 50);
    }
    return rect;
  }
  function isElementVerticallyVisibleInContainer(getWindow2, element2, tolerance) {
    const container2 = getScrollableContainer(element2);
    if (!container2) {
      return false;
    }
    const containerRect = getBoundingRect(getWindow2, container2);
    const elementRect = element2.getBoundingClientRect();
    const intersectionTolerance = elementRect.height * (1 - tolerance);
    const topIntersection = Math.max(0, containerRect.top - elementRect.top);
    const bottomIntersection = Math.max(0, elementRect.bottom - containerRect.bottom);
    const totalIntersection = topIntersection + bottomIntersection;
    return totalIntersection === 0 || totalIntersection <= intersectionTolerance;
  }
  function scrollIntoView(getWindow2, element2, alignToTop) {
    const container2 = getScrollableContainer(element2);
    if (container2) {
      const containerRect = getBoundingRect(getWindow2, container2);
      const elementRect = element2.getBoundingClientRect();
      if (alignToTop) {
        container2.scrollTop += elementRect.top - containerRect.top;
      } else {
        container2.scrollTop += elementRect.bottom - containerRect.bottom;
      }
    }
  }
  function getScrollableContainer(element2) {
    const doc = element2.ownerDocument;
    if (doc) {
      for (let el = element2.parentElement; el; el = el.parentElement) {
        if (el.scrollWidth > el.clientWidth || el.scrollHeight > el.clientHeight) {
          return el;
        }
      }
      return doc.documentElement;
    }
    return null;
  }
  function makeFocusIgnored(element2) {
    element2.__shouldIgnoreFocus = true;
  }
  function shouldIgnoreFocus(element2) {
    return !!element2.__shouldIgnoreFocus;
  }
  function getUId(wnd) {
    const rnd = new Uint32Array(4);
    if (wnd.crypto && wnd.crypto.getRandomValues) {
      wnd.crypto.getRandomValues(rnd);
    } else if (wnd.msCrypto && wnd.msCrypto.getRandomValues) {
      wnd.msCrypto.getRandomValues(rnd);
    } else {
      for (let i2 = 0; i2 < rnd.length; i2++) {
        rnd[i2] = 4294967295 * Math.random();
      }
    }
    const srnd = [];
    for (let i2 = 0; i2 < rnd.length; i2++) {
      srnd.push(rnd[i2].toString(36));
    }
    srnd.push("|");
    srnd.push((++_uidCounter).toString(36));
    srnd.push("|");
    srnd.push(Date.now().toString(36));
    return srnd.join("");
  }
  function getElementUId(getWindow2, element2) {
    const context = getInstanceContext(getWindow2);
    let uid = element2.__tabsterElementUID;
    if (!uid) {
      uid = element2.__tabsterElementUID = getUId(getWindow2());
    }
    if (!context.elementByUId[uid] && documentContains(element2.ownerDocument, element2)) {
      context.elementByUId[uid] = new WeakHTMLElement(getWindow2, element2);
    }
    return uid;
  }
  function clearElementCache(getWindow2, parent) {
    const context = getInstanceContext(getWindow2);
    for (const key of Object.keys(context.elementByUId)) {
      const wel = context.elementByUId[key];
      const el = wel && wel.get();
      if (el && parent) {
        if (!parent.contains(el)) {
          continue;
        }
      }
      delete context.elementByUId[key];
    }
  }
  function documentContains(doc, element2) {
    var _a5;
    return !!((_a5 = doc === null || doc === void 0 ? void 0 : doc.body) === null || _a5 === void 0 ? void 0 : _a5.contains(element2));
  }
  function matchesSelector(element2, selector) {
    const matches = element2.matches || element2.matchesSelector || element2.msMatchesSelector || element2.webkitMatchesSelector;
    return matches && matches.call(element2, selector);
  }
  function getPromise(getWindow2) {
    const context = getInstanceContext(getWindow2);
    if (context.basics.Promise) {
      return context.basics.Promise;
    }
    throw new Error("No Promise defined.");
  }
  function getWeakRef(context) {
    return context.basics.WeakRef;
  }
  var _lastTabsterPartId = 0;
  var TabsterPart = class {
    constructor(tabster, element2, props) {
      const getWindow2 = tabster.getWindow;
      this._tabster = tabster;
      this._element = new WeakHTMLElement(getWindow2, element2);
      this._props = {
        ...props
      };
      this.id = "i" + ++_lastTabsterPartId;
    }
    getElement() {
      return this._element.get();
    }
    getProps() {
      return this._props;
    }
    setProps(props) {
      this._props = {
        ...props
      };
    }
  };
  var DummyInput = class {
    constructor(getWindow2, isOutside, props, element2) {
      var _a5;
      this._focusIn = (e2) => {
        const input5 = this.input;
        if (this.onFocusIn && input5) {
          const relatedTarget = DummyInputManager.getLastPhantomFrom() || e2.relatedTarget;
          this.onFocusIn(this, this._isBackward(true, input5, relatedTarget), relatedTarget);
        }
      };
      this._focusOut = (e2) => {
        this.useDefaultAction = false;
        const input5 = this.input;
        if (this.onFocusOut && input5) {
          const relatedTarget = e2.relatedTarget;
          this.onFocusOut(this, this._isBackward(false, input5, relatedTarget), relatedTarget);
        }
      };
      const win2 = getWindow2();
      const input4 = win2.document.createElement("i");
      input4.tabIndex = 0;
      input4.setAttribute("role", "none");
      input4.setAttribute(TabsterDummyInputAttributeName, "");
      input4.setAttribute("aria-hidden", "true");
      const style = input4.style;
      style.position = "fixed";
      style.width = style.height = "1px";
      style.opacity = "0.001";
      style.zIndex = "-1";
      style.setProperty("content-visibility", "hidden");
      makeFocusIgnored(input4);
      this.input = input4;
      this.isFirst = props.isFirst;
      this.isOutside = isOutside;
      this._isPhantom = (_a5 = props.isPhantom) !== null && _a5 !== void 0 ? _a5 : false;
      input4.addEventListener("focusin", this._focusIn);
      input4.addEventListener("focusout", this._focusOut);
      input4.__tabsterDummyContainer = element2;
      if (this._isPhantom) {
        this._disposeTimer = win2.setTimeout(() => {
          delete this._disposeTimer;
          this.dispose();
        }, 0);
        this._clearDisposeTimeout = () => {
          if (this._disposeTimer) {
            win2.clearTimeout(this._disposeTimer);
            delete this._disposeTimer;
          }
          delete this._clearDisposeTimeout;
        };
      }
    }
    dispose() {
      var _a5;
      if (this._clearDisposeTimeout) {
        this._clearDisposeTimeout();
      }
      const input4 = this.input;
      if (!input4) {
        return;
      }
      delete this.onFocusIn;
      delete this.onFocusOut;
      delete this.input;
      input4.removeEventListener("focusin", this._focusIn);
      input4.removeEventListener("focusout", this._focusOut);
      delete input4.__tabsterDummyContainer;
      (_a5 = input4.parentElement) === null || _a5 === void 0 ? void 0 : _a5.removeChild(input4);
    }
    setTopLeft(top, left) {
      var _a5;
      const style = (_a5 = this.input) === null || _a5 === void 0 ? void 0 : _a5.style;
      if (style) {
        style.top = `${top}px`;
        style.left = `${left}px`;
      }
    }
    _isBackward(isIn, current, previous2) {
      return isIn && !previous2 ? !this.isFirst : !!(previous2 && current.compareDocumentPosition(previous2) & Node.DOCUMENT_POSITION_FOLLOWING);
    }
  };
  var DummyInputManagerPriorities = {
    Root: 1,
    Modalizer: 2,
    Mover: 3,
    Groupper: 4
  };
  var DummyInputManager = class {
    constructor(tabster, element2, priority, sys, outsideByDefault, callForDefaultAction) {
      this._element = element2;
      this._instance = new DummyInputManagerCore(tabster, element2, this, priority, sys, outsideByDefault, callForDefaultAction);
      this.moveOut = (backwards) => {
        var _a5;
        (_a5 = this._instance) === null || _a5 === void 0 ? void 0 : _a5.moveOut(backwards);
      };
      this.moveOutWithDefaultAction = (backwards) => {
        var _a5;
        (_a5 = this._instance) === null || _a5 === void 0 ? void 0 : _a5.moveOutWithDefaultAction(backwards);
      };
    }
    _setHandlers(onFocusIn, onFocusOut) {
      this._onFocusIn = onFocusIn;
      this._onFocusOut = onFocusOut;
    }
    getHandler(isIn) {
      return isIn ? this._onFocusIn : this._onFocusOut;
    }
    setTabbable(tabbable) {
      var _a5;
      (_a5 = this._instance) === null || _a5 === void 0 ? void 0 : _a5.setTabbable(this, tabbable);
    }
    dispose() {
      if (this._instance) {
        this._instance.dispose(this);
        delete this._instance;
      }
      delete this._onFocusIn;
      delete this._onFocusOut;
    }
    static getLastPhantomFrom() {
      const ret = DummyInputManager._lastPhantomFrom;
      delete DummyInputManager._lastPhantomFrom;
      return ret;
    }
    static moveWithPhantomDummy(tabster, element2, moveOutside, isBackward) {
      const dummy = new DummyInput(tabster.getWindow, true, {
        isPhantom: true,
        isFirst: true
      });
      const input4 = dummy.input;
      if (input4) {
        const parent = element2.parentElement;
        if (parent) {
          let insertBefore = moveOutside && !isBackward || !moveOutside && isBackward ? element2.nextElementSibling : element2;
          if (insertBefore) {
            if (isBackward) {
              const beforeBefore = insertBefore.previousElementSibling;
              if (beforeBefore && beforeBefore.__tabsterDummyContainer) {
                insertBefore = beforeBefore;
              }
            } else if (insertBefore.__tabsterDummyContainer) {
              insertBefore = insertBefore.nextElementSibling;
            }
          }
          parent.insertBefore(input4, insertBefore);
          DummyInputManager._lastPhantomFrom = element2;
          tabster.getWindow().setTimeout(() => {
            delete DummyInputManager._lastPhantomFrom;
          }, 0);
          nativeFocus(input4);
        }
      }
    }
  };
  function setDummyInputDebugValue(dummy, wrappers) {
    var _a5;
    const what = {
      1: "Root",
      2: "Modalizer",
      3: "Mover",
      4: "Groupper"
    };
    (_a5 = dummy.input) === null || _a5 === void 0 ? void 0 : _a5.setAttribute(TabsterDummyInputAttributeName, [`isFirst=${dummy.isFirst}`, `isOutside=${dummy.isOutside}`, ...wrappers.map((w2) => `(${what[w2.priority]}, tabbable=${w2.tabbable})`)].join(", "));
  }
  var DummyInputObserver = class {
    constructor(win2) {
      this._updateQueue = /* @__PURE__ */ new Set();
      this._lastUpdateQueueTime = 0;
      this._changedParents = /* @__PURE__ */ new WeakSet();
      this._dummies = /* @__PURE__ */ new Map();
      this._domChanged = (parent) => {
        var _a5;
        if (this._changedParents.has(parent)) {
          return;
        }
        this._changedParents.add(parent);
        if (this._updateDummyInputsTimer) {
          return;
        }
        this._updateDummyInputsTimer = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.call(this).setTimeout(() => {
          delete this._updateDummyInputsTimer;
          for (const [dummy, callback] of this._dummies) {
            const dummyParent = dummy.parentElement;
            if (!dummyParent || this._changedParents.has(dummyParent)) {
              callback();
            }
          }
          this._changedParents = /* @__PURE__ */ new WeakSet();
        }, _updateDummyInputsTimeout);
      };
      this._win = win2;
    }
    add(dummy, callback) {
      this._dummies.set(dummy, callback);
      this.domChanged = this._domChanged;
    }
    remove(dummy) {
      const dummyInputElements = this._dummies;
      dummyInputElements.delete(dummy);
      if (dummyInputElements.size === 0) {
        delete this.domChanged;
      }
    }
    dispose() {
      var _a5;
      const win2 = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.call(this);
      if (this._updateTimer) {
        win2 === null || win2 === void 0 ? void 0 : win2.clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      if (this._updateDummyInputsTimer) {
        win2 === null || win2 === void 0 ? void 0 : win2.clearTimeout(this._updateDummyInputsTimer);
        delete this._updateDummyInputsTimer;
      }
      this._changedParents = /* @__PURE__ */ new WeakSet();
      this._dummies.clear();
      delete this._win;
    }
    updatePositions(compute) {
      if (!this._win) {
        return;
      }
      this._updateQueue.add(compute);
      this._lastUpdateQueueTime = Date.now();
      this._scheduledUpdatePositions();
    }
    _scheduledUpdatePositions() {
      var _a5;
      if (this._updateTimer) {
        return;
      }
      this._updateTimer = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.call(this).setTimeout(() => {
        delete this._updateTimer;
        if (this._lastUpdateQueueTime + _updateDummyInputsTimeout <= Date.now()) {
          const scrollTopLeftCache = /* @__PURE__ */ new Map();
          const setTopLeftCallbacks = [];
          for (const compute of this._updateQueue) {
            setTopLeftCallbacks.push(compute(scrollTopLeftCache));
          }
          this._updateQueue.clear();
          for (const setTopLeft of setTopLeftCallbacks) {
            setTopLeft();
          }
          scrollTopLeftCache.clear();
        } else {
          this._scheduledUpdatePositions();
        }
      }, _updateDummyInputsTimeout);
    }
  };
  var DummyInputManagerCore = class {
    constructor(tabster, element2, manager, priority, sys, outsideByDefault, callForDefaultAction) {
      this._wrappers = [];
      this._isOutside = false;
      this._transformElements = /* @__PURE__ */ new Set();
      this._onFocusIn = (dummyInput, isBackward, relatedTarget) => {
        this._onFocus(true, dummyInput, isBackward, relatedTarget);
      };
      this._onFocusOut = (dummyInput, isBackward, relatedTarget) => {
        this._onFocus(false, dummyInput, isBackward, relatedTarget);
      };
      this.moveOut = (backwards) => {
        var _a5;
        const first = this._firstDummy;
        const last = this._lastDummy;
        if (first && last) {
          this._ensurePosition();
          const firstInput = first.input;
          const lastInput = last.input;
          const element3 = (_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get();
          if (firstInput && lastInput && element3) {
            let toFocus;
            if (backwards) {
              firstInput.tabIndex = 0;
              toFocus = firstInput;
            } else {
              lastInput.tabIndex = 0;
              toFocus = lastInput;
            }
            if (toFocus) {
              nativeFocus(toFocus);
            }
          }
        }
      };
      this.moveOutWithDefaultAction = (backwards) => {
        var _a5;
        const first = this._firstDummy;
        const last = this._lastDummy;
        if (first && last) {
          this._ensurePosition();
          const firstInput = first.input;
          const lastInput = last.input;
          const element3 = (_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get();
          if (firstInput && lastInput && element3) {
            let toFocus;
            if (backwards) {
              if (!first.isOutside && this._tabster.focusable.isFocusable(element3, true, true, true)) {
                toFocus = element3;
              } else {
                first.useDefaultAction = true;
                firstInput.tabIndex = 0;
                toFocus = firstInput;
              }
            } else {
              last.useDefaultAction = true;
              lastInput.tabIndex = 0;
              toFocus = lastInput;
            }
            if (toFocus) {
              nativeFocus(toFocus);
            }
          }
        }
      };
      this.setTabbable = (manager2, tabbable) => {
        var _a5, _b;
        for (const w2 of this._wrappers) {
          if (w2.manager === manager2) {
            w2.tabbable = tabbable;
            break;
          }
        }
        const wrapper2 = this._getCurrent();
        if (wrapper2) {
          const tabIndex = wrapper2.tabbable ? 0 : -1;
          let input4 = (_a5 = this._firstDummy) === null || _a5 === void 0 ? void 0 : _a5.input;
          if (input4) {
            input4.tabIndex = tabIndex;
          }
          input4 = (_b = this._lastDummy) === null || _b === void 0 ? void 0 : _b.input;
          if (input4) {
            input4.tabIndex = tabIndex;
          }
        }
        if (true) {
          this._firstDummy && setDummyInputDebugValue(this._firstDummy, this._wrappers);
          this._lastDummy && setDummyInputDebugValue(this._lastDummy, this._wrappers);
        }
      };
      this._addDummyInputs = () => {
        if (this._addTimer) {
          return;
        }
        this._addTimer = this._getWindow().setTimeout(() => {
          delete this._addTimer;
          this._ensurePosition();
          if (true) {
            this._firstDummy && setDummyInputDebugValue(this._firstDummy, this._wrappers);
            this._lastDummy && setDummyInputDebugValue(this._lastDummy, this._wrappers);
          }
          this._addTransformOffsets();
        }, 0);
      };
      this._addTransformOffsets = () => {
        this._tabster._dummyObserver.updatePositions(this._computeTransformOffsets);
      };
      this._computeTransformOffsets = (scrollTopLeftCache) => {
        var _a5, _b;
        const from2 = ((_a5 = this._firstDummy) === null || _a5 === void 0 ? void 0 : _a5.input) || ((_b = this._lastDummy) === null || _b === void 0 ? void 0 : _b.input);
        const transformElements = this._transformElements;
        const newTransformElements = /* @__PURE__ */ new Set();
        let scrollTop = 0;
        let scrollLeft = 0;
        const win2 = this._getWindow();
        for (let element3 = from2; element3 && element3.nodeType === Node.ELEMENT_NODE; element3 = element3.parentElement) {
          let scrollTopLeft = scrollTopLeftCache.get(element3);
          if (scrollTopLeft === void 0) {
            const transform2 = win2.getComputedStyle(element3).transform;
            if (transform2 && transform2 !== "none") {
              scrollTopLeft = {
                scrollTop: element3.scrollTop,
                scrollLeft: element3.scrollLeft
              };
            }
            scrollTopLeftCache.set(element3, scrollTopLeft || null);
          }
          if (scrollTopLeft) {
            newTransformElements.add(element3);
            if (!transformElements.has(element3)) {
              element3.addEventListener("scroll", this._addTransformOffsets);
            }
            scrollTop += scrollTopLeft.scrollTop;
            scrollLeft += scrollTopLeft.scrollLeft;
          }
        }
        for (const el2 of transformElements) {
          if (!newTransformElements.has(el2)) {
            el2.removeEventListener("scroll", this._addTransformOffsets);
          }
        }
        this._transformElements = newTransformElements;
        return () => {
          var _a6, _b2;
          (_a6 = this._firstDummy) === null || _a6 === void 0 ? void 0 : _a6.setTopLeft(scrollTop, scrollLeft);
          (_b2 = this._lastDummy) === null || _b2 === void 0 ? void 0 : _b2.setTopLeft(scrollTop, scrollLeft);
        };
      };
      const el = element2.get();
      if (!el) {
        throw new Error("No element");
      }
      this._tabster = tabster;
      this._getWindow = tabster.getWindow;
      this._callForDefaultAction = callForDefaultAction;
      const instance = el.__tabsterDummy;
      (instance || this)._wrappers.push({
        manager,
        priority,
        tabbable: true
      });
      if (instance) {
        if (true) {
          this._firstDummy && setDummyInputDebugValue(this._firstDummy, instance._wrappers);
          this._lastDummy && setDummyInputDebugValue(this._lastDummy, instance._wrappers);
        }
        return instance;
      }
      el.__tabsterDummy = this;
      const forcedDummyPosition = sys === null || sys === void 0 ? void 0 : sys.dummyInputsPosition;
      const tagName = el.tagName;
      this._isOutside = !forcedDummyPosition ? (outsideByDefault || tagName === "UL" || tagName === "OL" || tagName === "TABLE") && !(tagName === "LI" || tagName === "TD" || tagName === "TH") : forcedDummyPosition === SysDummyInputsPositions.Outside;
      this._firstDummy = new DummyInput(this._getWindow, this._isOutside, {
        isFirst: true
      }, element2);
      this._lastDummy = new DummyInput(this._getWindow, this._isOutside, {
        isFirst: false
      }, element2);
      const dummyElement = this._firstDummy.input;
      dummyElement && tabster._dummyObserver.add(dummyElement, this._addDummyInputs);
      this._firstDummy.onFocusIn = this._onFocusIn;
      this._firstDummy.onFocusOut = this._onFocusOut;
      this._lastDummy.onFocusIn = this._onFocusIn;
      this._lastDummy.onFocusOut = this._onFocusOut;
      this._element = element2;
      this._addDummyInputs();
    }
    dispose(manager, force) {
      var _a5, _b, _c, _d;
      const wrappers = this._wrappers = this._wrappers.filter((w2) => w2.manager !== manager && !force);
      if (true) {
        this._firstDummy && setDummyInputDebugValue(this._firstDummy, wrappers);
        this._lastDummy && setDummyInputDebugValue(this._lastDummy, wrappers);
      }
      if (wrappers.length === 0) {
        delete ((_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get()).__tabsterDummy;
        for (const el of this._transformElements) {
          el.removeEventListener("scroll", this._addTransformOffsets);
        }
        this._transformElements.clear();
        const win2 = this._getWindow();
        if (this._addTimer) {
          win2.clearTimeout(this._addTimer);
          delete this._addTimer;
        }
        const dummyElement = (_b = this._firstDummy) === null || _b === void 0 ? void 0 : _b.input;
        dummyElement && this._tabster._dummyObserver.remove(dummyElement);
        (_c = this._firstDummy) === null || _c === void 0 ? void 0 : _c.dispose();
        (_d = this._lastDummy) === null || _d === void 0 ? void 0 : _d.dispose();
      }
    }
    _onFocus(isIn, dummyInput, isBackward, relatedTarget) {
      var _a5;
      const wrapper2 = this._getCurrent();
      if (wrapper2 && (!dummyInput.useDefaultAction || this._callForDefaultAction)) {
        (_a5 = wrapper2.manager.getHandler(isIn)) === null || _a5 === void 0 ? void 0 : _a5(dummyInput, isBackward, relatedTarget);
      }
    }
    _getCurrent() {
      this._wrappers.sort((a2, b3) => {
        if (a2.tabbable !== b3.tabbable) {
          return a2.tabbable ? -1 : 1;
        }
        return a2.priority - b3.priority;
      });
      return this._wrappers[0];
    }
    _ensurePosition() {
      var _a5, _b, _c;
      const element2 = (_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get();
      const firstDummyInput = (_b = this._firstDummy) === null || _b === void 0 ? void 0 : _b.input;
      const lastDummyInput = (_c = this._lastDummy) === null || _c === void 0 ? void 0 : _c.input;
      if (!element2 || !firstDummyInput || !lastDummyInput) {
        return;
      }
      if (this._isOutside) {
        const elementParent = element2.parentElement;
        if (elementParent) {
          const nextSibling = element2.nextElementSibling;
          if (nextSibling !== lastDummyInput) {
            elementParent.insertBefore(lastDummyInput, nextSibling);
          }
          if (element2.previousElementSibling !== firstDummyInput) {
            elementParent.insertBefore(firstDummyInput, element2);
          }
        }
      } else {
        if (element2.lastElementChild !== lastDummyInput) {
          element2.appendChild(lastDummyInput);
        }
        const firstElementChild = element2.firstElementChild;
        if (firstElementChild && firstElementChild !== firstDummyInput) {
          element2.insertBefore(firstDummyInput, firstElementChild);
        }
      }
    }
  };
  function getLastChild(container2) {
    let lastChild = null;
    for (let i2 = container2.lastElementChild; i2; i2 = i2.lastElementChild) {
      lastChild = i2;
    }
    return lastChild || void 0;
  }
  function getAdjacentElement(from2, prev2) {
    let cur = from2;
    let adjacent = null;
    while (cur && !adjacent) {
      adjacent = prev2 ? cur.previousElementSibling : cur.nextElementSibling;
      cur = cur.parentElement;
    }
    return adjacent || void 0;
  }
  function triggerEvent(target, name, details) {
    const event = document.createEvent("HTMLEvents");
    event.initEvent(name, true, true);
    event.details = details;
    target.dispatchEvent(event);
    return !event.defaultPrevented;
  }
  function augmentAttribute(tabster, element2, name, value) {
    const entry = tabster.storageEntry(element2, true);
    let ret = false;
    if (!entry.aug) {
      if (value === void 0) {
        return ret;
      }
      entry.aug = {};
    }
    if (value === void 0) {
      if (name in entry.aug) {
        const origVal = entry.aug[name];
        delete entry.aug[name];
        if (origVal === null) {
          element2.removeAttribute(name);
        } else {
          element2.setAttribute(name, origVal);
        }
        ret = true;
      }
    } else {
      let origValue;
      if (!(name in entry.aug)) {
        origValue = element2.getAttribute(name);
      }
      if (origValue !== void 0 && origValue !== value) {
        entry.aug[name] = origValue;
        if (value === null) {
          element2.removeAttribute(name);
        } else {
          element2.setAttribute(name, value);
        }
        ret = true;
      }
    }
    if (value === void 0 && Object.keys(entry.aug).length === 0) {
      delete entry.aug;
      tabster.storageEntry(element2, false);
    }
    return ret;
  }
  function getTabsterAttribute(props, plain) {
    const attr = JSON.stringify(props);
    if (plain === true) {
      return attr;
    }
    return {
      [TabsterAttributeName]: attr
    };
  }
  function mergeTabsterProps(props, newProps) {
    for (const key of Object.keys(newProps)) {
      const value = newProps[key];
      if (value) {
        props[key] = value;
      } else {
        delete props[key];
      }
    }
  }
  function setTabsterAttribute(element2, newProps, update) {
    let props;
    if (update) {
      const attr = element2.getAttribute(TabsterAttributeName);
      if (attr) {
        try {
          props = JSON.parse(attr);
        } catch (e2) {
          if (true) {
            console.error(`data-tabster attribute error: ${e2}`, element2);
          }
        }
      }
    }
    if (!props) {
      props = {};
    }
    mergeTabsterProps(props, newProps);
    if (Object.keys(props).length > 0) {
      element2.setAttribute(TabsterAttributeName, getTabsterAttribute(props, true));
    } else {
      element2.removeAttribute(TabsterAttributeName);
    }
  }
  function _setInformativeStyle$3(weakElement, remove, id) {
    if (true) {
      const element2 = weakElement.get();
      if (element2) {
        if (remove) {
          element2.style.removeProperty("--tabster-root");
        } else {
          element2.style.setProperty("--tabster-root", id + ",");
        }
      }
    }
  }
  var RootDummyManager = class extends DummyInputManager {
    constructor(tabster, element2, setFocused, sys) {
      super(tabster, element2, DummyInputManagerPriorities.Root, sys, void 0, true);
      this._onDummyInputFocus = (dummyInput) => {
        var _a5;
        if (dummyInput.useDefaultAction) {
          this._setFocused(false, true);
        } else {
          this._tabster.keyboardNavigation.setNavigatingWithKeyboard(true);
          const element3 = this._element.get();
          if (element3) {
            this._setFocused(true, true);
            const toFocus = this._tabster.focusedElement.getFirstOrLastTabbable(dummyInput.isFirst, {
              container: element3,
              ignoreAccessibility: true
            });
            if (toFocus) {
              nativeFocus(toFocus);
              return;
            }
          }
          (_a5 = dummyInput.input) === null || _a5 === void 0 ? void 0 : _a5.blur();
        }
      };
      this._setHandlers(this._onDummyInputFocus);
      this._tabster = tabster;
      this._setFocused = setFocused;
    }
  };
  var Root = class extends TabsterPart {
    constructor(tabster, element2, onDispose, props, sys) {
      super(tabster, element2, props);
      this._isFocused = false;
      this._setFocused = (hasFocused, fromAdjacent) => {
        if (this._setFocusedTimer) {
          this._tabster.getWindow().clearTimeout(this._setFocusedTimer);
          delete this._setFocusedTimer;
        }
        if (this._isFocused === hasFocused) {
          return;
        }
        const element3 = this._element.get();
        if (element3) {
          if (hasFocused) {
            this._isFocused = true;
            triggerEvent(this._tabster.root.eventTarget, "focus", {
              element: element3,
              fromAdjacent
            });
          } else {
            this._setFocusedTimer = this._tabster.getWindow().setTimeout(() => {
              delete this._setFocusedTimer;
              this._isFocused = false;
              triggerEvent(this._tabster.root.eventTarget, "blur", {
                element: element3,
                fromAdjacent
              });
            }, 0);
          }
        }
      };
      this._onFocus = (e2) => {
        var _a5;
        const win3 = this._tabster.getWindow();
        if (this._setTabbableTimer) {
          win3.clearTimeout(this._setTabbableTimer);
          delete this._setTabbableTimer;
        }
        if (e2) {
          const ctx = RootAPI.getTabsterContext(this._tabster, e2);
          if (ctx) {
            this._setFocused(ctx.root.getElement() === this._element.get());
          }
          if (!ctx || ctx.uncontrolled || this._tabster.rootDummyInputs) {
            (_a5 = this._dummyManager) === null || _a5 === void 0 ? void 0 : _a5.setTabbable(false);
            return;
          }
        } else {
          this._setFocused(false);
        }
        this._setTabbableTimer = win3.setTimeout(() => {
          var _a6;
          delete this._setTabbableTimer;
          (_a6 = this._dummyManager) === null || _a6 === void 0 ? void 0 : _a6.setTabbable(true);
        }, 0);
      };
      this._onDispose = onDispose;
      const win2 = tabster.getWindow;
      this.uid = getElementUId(win2, element2);
      this._sys = sys;
      if (tabster.controlTab || tabster.rootDummyInputs) {
        this.addDummyInputs();
      }
      tabster.focusedElement.subscribe(this._onFocus);
      this._add();
    }
    addDummyInputs() {
      if (!this._dummyManager) {
        this._dummyManager = new RootDummyManager(this._tabster, this._element, this._setFocused, this._sys);
      }
    }
    dispose() {
      var _a5;
      this._onDispose(this);
      const win2 = this._tabster.getWindow();
      if (this._setFocusedTimer) {
        win2.clearTimeout(this._setFocusedTimer);
        delete this._setFocusedTimer;
      }
      if (this._setTabbableTimer) {
        win2.clearTimeout(this._setTabbableTimer);
        delete this._setTabbableTimer;
      }
      (_a5 = this._dummyManager) === null || _a5 === void 0 ? void 0 : _a5.dispose();
      this._remove();
    }
    moveOutWithDefaultAction(isBackward) {
      const dummyManager = this._dummyManager;
      if (dummyManager) {
        dummyManager.moveOutWithDefaultAction(isBackward);
      } else {
        const el = this.getElement();
        if (el) {
          RootDummyManager.moveWithPhantomDummy(this._tabster, el, true, isBackward);
        }
      }
    }
    _add() {
      if (true) {
        _setInformativeStyle$3(this._element, false, this.uid);
      }
    }
    _remove() {
      if (true) {
        _setInformativeStyle$3(this._element, true);
      }
    }
  };
  var RootAPI = class {
    constructor(tabster, autoRoot) {
      this._autoRootWaiting = false;
      this._roots = {};
      this._forceDummy = false;
      this.rootById = {};
      this._autoRootCreate = () => {
        var _a5;
        const doc = this._win().document;
        const body4 = doc.body;
        if (body4) {
          this._autoRootUnwait(doc);
          const props = this._autoRoot;
          if (props) {
            setTabsterAttribute(body4, {
              root: props
            }, true);
            updateTabsterByAttribute(this._tabster, body4);
            return (_a5 = getTabsterOnElement(this._tabster, body4)) === null || _a5 === void 0 ? void 0 : _a5.root;
          }
        } else if (!this._autoRootWaiting) {
          this._autoRootWaiting = true;
          doc.addEventListener("readystatechange", this._autoRootCreate);
        }
        return void 0;
      };
      this._onRootDispose = (root151) => {
        delete this._roots[root151.id];
      };
      this._tabster = tabster;
      this._win = tabster.getWindow;
      this._autoRoot = autoRoot;
      this.eventTarget = createEventTarget(this._win);
      tabster.queueInit(() => {
        if (this._autoRoot) {
          this._autoRootCreate();
        }
      });
    }
    _autoRootUnwait(doc) {
      doc.removeEventListener("readystatechange", this._autoRootCreate);
      this._autoRootWaiting = false;
    }
    dispose() {
      const win2 = this._win();
      this._autoRootUnwait(win2.document);
      delete this._autoRoot;
      Object.keys(this._roots).forEach((rootId) => {
        if (this._roots[rootId]) {
          this._roots[rootId].dispose();
          delete this._roots[rootId];
        }
      });
      this.rootById = {};
    }
    createRoot(element2, props, sys) {
      if (true)
        ;
      const newRoot = new Root(this._tabster, element2, this._onRootDispose, props, sys);
      this._roots[newRoot.id] = newRoot;
      if (this._forceDummy) {
        newRoot.addDummyInputs();
      }
      return newRoot;
    }
    addDummyInputs() {
      this._forceDummy = true;
      const roots = this._roots;
      for (const id of Object.keys(roots)) {
        roots[id].addDummyInputs();
      }
    }
    static getRootByUId(getWindow2, id) {
      const tabster = getWindow2().__tabsterInstance;
      return tabster && tabster.root.rootById[id];
    }
    /**
     * Fetches the tabster context for an element walking up its ancestors
     *
     * @param tabster Tabster instance
     * @param element The element the tabster context should represent
     * @param options Additional options
     * @returns undefined if the element is not a child of a tabster root, otherwise all applicable tabster behaviours and configurations
     */
    static getTabsterContext(tabster, element2, options) {
      if (options === void 0) {
        options = {};
      }
      var _a5, _b, _c, _d;
      if (!element2.ownerDocument) {
        return void 0;
      }
      tabster.drainInitQueue();
      const checkRtl = options.checkRtl;
      let root151;
      let modalizer;
      let groupper;
      let mover;
      let isExcludedFromMover = false;
      let isGroupperFirst;
      let modalizerInGroupper;
      let isRtl;
      let uncontrolled;
      let curElement = options.referenceElement || element2;
      const ignoreKeydown = {};
      while (curElement && (!root151 || checkRtl)) {
        const tabsterOnElement = getTabsterOnElement(tabster, curElement);
        if (checkRtl && isRtl === void 0) {
          const dir = curElement.dir;
          if (dir) {
            isRtl = dir.toLowerCase() === "rtl";
          }
        }
        if (!tabsterOnElement) {
          curElement = curElement.parentElement;
          continue;
        }
        const tagName = curElement.tagName;
        if (tabsterOnElement.uncontrolled || tagName === "IFRAME" || tagName === "WEBVIEW") {
          uncontrolled = curElement;
        }
        if (!mover && ((_a5 = tabsterOnElement.focusable) === null || _a5 === void 0 ? void 0 : _a5.excludeFromMover) && !groupper) {
          isExcludedFromMover = true;
        }
        const curModalizer = tabsterOnElement.modalizer;
        const curGroupper = tabsterOnElement.groupper;
        const curMover = tabsterOnElement.mover;
        if (!modalizer && curModalizer) {
          modalizer = curModalizer;
        }
        if (!groupper && curGroupper && (!modalizer || curModalizer)) {
          if (modalizer) {
            if (!curGroupper.isActive() && curGroupper.getProps().tabbability && modalizer.userId !== ((_b = tabster.modalizer) === null || _b === void 0 ? void 0 : _b.activeId)) {
              modalizer = void 0;
              groupper = curGroupper;
            }
            modalizerInGroupper = curGroupper;
          } else {
            groupper = curGroupper;
          }
        }
        if (!mover && curMover && (!modalizer || curModalizer) && (!curGroupper || curElement !== element2)) {
          mover = curMover;
          isGroupperFirst = !!groupper && groupper !== curGroupper;
        }
        if (tabsterOnElement.root) {
          root151 = tabsterOnElement.root;
        }
        if ((_c = tabsterOnElement.focusable) === null || _c === void 0 ? void 0 : _c.ignoreKeydown) {
          Object.assign(ignoreKeydown, tabsterOnElement.focusable.ignoreKeydown);
        }
        curElement = curElement.parentElement;
      }
      if (!root151) {
        const rootAPI = tabster.root;
        const autoRoot = rootAPI._autoRoot;
        if (autoRoot) {
          if ((_d = element2.ownerDocument) === null || _d === void 0 ? void 0 : _d.body) {
            root151 = rootAPI._autoRootCreate();
          }
        }
      }
      if (groupper && !mover) {
        isGroupperFirst = true;
      }
      if (!root151) {
        if (modalizer || groupper || mover) {
          console.error("Tabster Root is required for Mover, Groupper and Modalizer to work.");
        }
      }
      const shouldIgnoreKeydown = (event) => !!ignoreKeydown[event.key];
      return root151 ? {
        root: root151,
        modalizer,
        groupper,
        mover,
        isGroupperFirst,
        modalizerInGroupper,
        isRtl: checkRtl ? !!isRtl : void 0,
        uncontrolled,
        isExcludedFromMover,
        ignoreKeydown: shouldIgnoreKeydown
      } : void 0;
    }
    static getRoot(tabster, element2) {
      var _a5;
      for (let el = element2; el; el = el.parentElement) {
        const root151 = (_a5 = getTabsterOnElement(tabster, el)) === null || _a5 === void 0 ? void 0 : _a5.root;
        if (root151) {
          return root151;
        }
      }
      return void 0;
    }
    onRoot(root151, removed) {
      if (removed) {
        delete this.rootById[root151.uid];
      } else {
        this.rootById[root151.uid] = root151;
      }
    }
  };
  var Subscribable = class {
    constructor() {
      this._callbacks = [];
    }
    dispose() {
      this._callbacks = [];
      delete this._val;
    }
    subscribe(callback) {
      const callbacks = this._callbacks;
      const index2 = callbacks.indexOf(callback);
      if (index2 < 0) {
        callbacks.push(callback);
      }
    }
    subscribeFirst(callback) {
      const callbacks = this._callbacks;
      const index2 = callbacks.indexOf(callback);
      if (index2 >= 0) {
        callbacks.splice(index2, 1);
      }
      callbacks.unshift(callback);
    }
    unsubscribe(callback) {
      const index2 = this._callbacks.indexOf(callback);
      if (index2 >= 0) {
        this._callbacks.splice(index2, 1);
      }
    }
    setVal(val, details) {
      if (this._val === val) {
        return;
      }
      this._val = val;
      this._callCallbacks(val, details);
    }
    getVal() {
      return this._val;
    }
    trigger(val, details) {
      this._callCallbacks(val, details);
    }
    _callCallbacks(val, details) {
      this._callbacks.forEach((callback) => callback(val, details));
    }
  };
  var _focusableSelector = /* @__PURE__ */ ["a[href]", "button:not([disabled])", "input:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", "*[tabindex]", "*[contenteditable]"].join(", ");
  var FocusableAPI = class {
    constructor(tabster) {
      this._tabster = tabster;
    }
    dispose() {
    }
    getProps(element2) {
      const tabsterOnElement = getTabsterOnElement(this._tabster, element2);
      return tabsterOnElement && tabsterOnElement.focusable || {};
    }
    isFocusable(el, includeProgrammaticallyFocusable, noVisibleCheck, noAccessibleCheck) {
      if (matchesSelector(el, _focusableSelector) && (includeProgrammaticallyFocusable || el.tabIndex !== -1)) {
        return (noVisibleCheck || this.isVisible(el)) && (noAccessibleCheck || this.isAccessible(el));
      }
      return false;
    }
    isVisible(el) {
      if (!el.ownerDocument || el.nodeType !== Node.ELEMENT_NODE) {
        return false;
      }
      if (el.offsetParent === null && el.ownerDocument.body !== el) {
        return false;
      }
      const win2 = el.ownerDocument.defaultView;
      if (!win2) {
        return false;
      }
      const rect = el.ownerDocument.body.getBoundingClientRect();
      if (rect.width === 0 && rect.height === 0) {
        return false;
      }
      const computedStyle = win2.getComputedStyle(el);
      if (computedStyle.visibility === "hidden") {
        return false;
      }
      return true;
    }
    isAccessible(el) {
      var _a5;
      for (let e2 = el; e2; e2 = e2.parentElement) {
        const tabsterOnElement = getTabsterOnElement(this._tabster, e2);
        if (this._isHidden(e2)) {
          return false;
        }
        const ignoreDisabled = (_a5 = tabsterOnElement === null || tabsterOnElement === void 0 ? void 0 : tabsterOnElement.focusable) === null || _a5 === void 0 ? void 0 : _a5.ignoreAriaDisabled;
        if (!ignoreDisabled && this._isDisabled(e2)) {
          return false;
        }
      }
      return true;
    }
    _isDisabled(el) {
      return el.hasAttribute("disabled");
    }
    _isHidden(el) {
      var _a5;
      const attrVal = el.getAttribute("aria-hidden");
      if (attrVal && attrVal.toLowerCase() === "true") {
        if (!((_a5 = this._tabster.modalizer) === null || _a5 === void 0 ? void 0 : _a5.isAugmented(el))) {
          return true;
        }
      }
      return false;
    }
    findFirst(options) {
      return this.findElement({
        ...options
      });
    }
    findLast(options) {
      return this.findElement({
        isBackward: true,
        ...options
      });
    }
    findNext(options, out) {
      return this.findElement({
        ...options
      }, out);
    }
    findPrev(options, out) {
      return this.findElement({
        ...options,
        isBackward: true
      }, out);
    }
    findDefault(options) {
      return this.findElement({
        ...options,
        acceptCondition: (el) => this._tabster.focusable.isFocusable(el, options.includeProgrammaticallyFocusable) && !!this.getProps(el).isDefault
      }) || null;
    }
    findAll(options) {
      return this._findElements(true, options) || [];
    }
    findElement(options, out) {
      const found = this._findElements(false, options, out);
      return found ? found[0] : found;
    }
    _findElements(findAll, options, out) {
      var _a5, _b, _c;
      const {
        container: container2,
        currentElement = null,
        includeProgrammaticallyFocusable,
        useActiveModalizer,
        ignoreUncontrolled,
        ignoreAccessibility,
        modalizerId,
        isBackward,
        onUncontrolled,
        onElement
      } = options;
      if (!out) {
        out = {};
      }
      const elements = [];
      let {
        acceptCondition
      } = options;
      if (!container2) {
        return null;
      }
      if (!acceptCondition) {
        acceptCondition = (el) => this._tabster.focusable.isFocusable(el, includeProgrammaticallyFocusable, false, ignoreAccessibility);
      }
      const acceptElementState = {
        container: container2,
        modalizerUserId: modalizerId === void 0 && useActiveModalizer ? (_a5 = this._tabster.modalizer) === null || _a5 === void 0 ? void 0 : _a5.activeId : modalizerId || ((_c = (_b = RootAPI.getTabsterContext(this._tabster, container2)) === null || _b === void 0 ? void 0 : _b.modalizer) === null || _c === void 0 ? void 0 : _c.userId),
        from: currentElement || container2,
        isBackward,
        acceptCondition,
        includeProgrammaticallyFocusable,
        ignoreUncontrolled,
        ignoreAccessibility,
        cachedGrouppers: {}
      };
      const walker = createElementTreeWalker(container2.ownerDocument, container2, (node4) => this._acceptElement(node4, acceptElementState));
      if (!walker) {
        return null;
      }
      const prepareForNextElement = (shouldContinueIfNotFound) => {
        const foundElement2 = acceptElementState.foundElement;
        if (foundElement2) {
          elements.push(foundElement2);
        }
        if (findAll) {
          if (foundElement2) {
            acceptElementState.found = false;
            delete acceptElementState.foundElement;
            delete acceptElementState.fromCtx;
            acceptElementState.from = foundElement2;
            if (onElement && !onElement(foundElement2)) {
              return false;
            }
          }
          return !!(foundElement2 || shouldContinueIfNotFound);
        } else {
          return !!(shouldContinueIfNotFound && !foundElement2);
        }
      };
      if (!currentElement) {
        out.outOfDOMOrder = true;
      }
      if (currentElement) {
        walker.currentNode = currentElement;
      } else if (isBackward) {
        const lastChild = getLastChild(container2);
        if (!lastChild) {
          return null;
        }
        if (this._acceptElement(lastChild, acceptElementState) === NodeFilter.FILTER_ACCEPT && !prepareForNextElement(true)) {
          if (acceptElementState.skippedFocusable) {
            out.outOfDOMOrder = true;
          }
          return elements;
        }
        walker.currentNode = lastChild;
      }
      let foundElement;
      do {
        foundElement = (isBackward ? walker.previousNode() : walker.nextNode()) || void 0;
      } while (prepareForNextElement());
      if (!findAll) {
        const nextUncontrolled = acceptElementState.nextUncontrolled;
        if (nextUncontrolled) {
          if (onUncontrolled) {
            onUncontrolled(nextUncontrolled);
          }
          if (foundElement) {
            return void 0;
          } else {
            return null;
          }
        }
      }
      if (acceptElementState.skippedFocusable) {
        out.outOfDOMOrder = true;
      }
      return elements.length ? elements : null;
    }
    _acceptElement(element2, state) {
      var _a5, _b, _c, _d, _e;
      if (state.found) {
        return NodeFilter.FILTER_ACCEPT;
      }
      const container2 = state.container;
      if (element2 === container2) {
        return NodeFilter.FILTER_SKIP;
      }
      if (!container2.contains(element2)) {
        return NodeFilter.FILTER_REJECT;
      }
      if (element2.__tabsterDummyContainer) {
        return NodeFilter.FILTER_REJECT;
      }
      let lastToIgnore = state.lastToIgnore;
      if (lastToIgnore) {
        if (lastToIgnore.contains(element2)) {
          return NodeFilter.FILTER_REJECT;
        } else {
          lastToIgnore = state.lastToIgnore = void 0;
        }
      }
      const ctx = state.currentCtx = RootAPI.getTabsterContext(this._tabster, element2);
      if (!ctx) {
        return NodeFilter.FILTER_SKIP;
      }
      if (state.ignoreUncontrolled) {
        if (shouldIgnoreFocus(element2)) {
          return NodeFilter.FILTER_SKIP;
        }
      } else if (ctx.uncontrolled && !state.nextUncontrolled && this._tabster.focusable.isFocusable(element2, void 0, true, true)) {
        if (!ctx.groupper && !ctx.mover) {
          if (((_a5 = ctx.modalizer) === null || _a5 === void 0 ? void 0 : _a5.userId) === ((_b = this._tabster.modalizer) === null || _b === void 0 ? void 0 : _b.activeId)) {
            if (this.isVisible(ctx.uncontrolled)) {
              state.nextUncontrolled = ctx.uncontrolled;
            }
            state.skippedFocusable = true;
            return NodeFilter.FILTER_REJECT;
          }
        }
      }
      if (element2.tagName === "IFRAME" || element2.tagName === "WEBVIEW") {
        if (((_c = ctx.modalizer) === null || _c === void 0 ? void 0 : _c.userId) === ((_d = this._tabster.modalizer) === null || _d === void 0 ? void 0 : _d.activeId)) {
          state.found = true;
          state.lastToIgnore = state.foundElement = element2;
          return NodeFilter.FILTER_ACCEPT;
        } else {
          return NodeFilter.FILTER_REJECT;
        }
      }
      if (!state.ignoreAccessibility && !this.isAccessible(element2)) {
        if (this.isFocusable(element2, false, true, true)) {
          state.skippedFocusable = true;
        }
        return NodeFilter.FILTER_REJECT;
      }
      let result;
      let fromCtx = state.fromCtx;
      if (!fromCtx) {
        fromCtx = state.fromCtx = RootAPI.getTabsterContext(this._tabster, state.from);
      }
      const fromMover = fromCtx === null || fromCtx === void 0 ? void 0 : fromCtx.mover;
      let groupper = ctx.groupper;
      let mover = ctx.mover;
      result = (_e = this._tabster.modalizer) === null || _e === void 0 ? void 0 : _e.acceptElement(element2, state);
      if (result !== void 0) {
        state.skippedFocusable = true;
      }
      if (result === void 0 && (groupper || mover || fromMover)) {
        const groupperElement = groupper === null || groupper === void 0 ? void 0 : groupper.getElement();
        const fromMoverElement = fromMover === null || fromMover === void 0 ? void 0 : fromMover.getElement();
        let moverElement = mover === null || mover === void 0 ? void 0 : mover.getElement();
        if (moverElement && (fromMoverElement === null || fromMoverElement === void 0 ? void 0 : fromMoverElement.contains(moverElement)) && container2.contains(fromMoverElement) && (!groupperElement || !mover || fromMoverElement.contains(groupperElement))) {
          mover = fromMover;
          moverElement = fromMoverElement;
        }
        if (groupperElement && (groupperElement === container2 || !container2.contains(groupperElement))) {
          groupper = void 0;
        }
        if (moverElement && !container2.contains(moverElement)) {
          mover = void 0;
        }
        if (groupper && mover) {
          if (moverElement && groupperElement && !groupperElement.contains(moverElement)) {
            mover = void 0;
          } else {
            groupper = void 0;
          }
        }
        if (groupper) {
          result = groupper.acceptElement(element2, state);
        }
        if (mover) {
          result = mover.acceptElement(element2, state);
        }
      }
      if (result === void 0) {
        result = state.acceptCondition(element2) ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
        if (result === NodeFilter.FILTER_SKIP && this.isFocusable(element2, false, true, true)) {
          state.skippedFocusable = true;
        }
      }
      if (result === NodeFilter.FILTER_ACCEPT && !state.found) {
        state.found = true;
        state.foundElement = element2;
      }
      return result;
    }
  };
  var Keys = {
    Tab: 9,
    Enter: 13,
    Esc: 27,
    Space: 32,
    PageUp: 33,
    PageDown: 34,
    End: 35,
    Home: 36,
    Left: 37,
    Up: 38,
    Right: 39,
    Down: 40
  };
  var FocusedElementState = class extends Subscribable {
    constructor(tabster, getWindow2) {
      super();
      this._init = () => {
        const win2 = this._win();
        const doc = win2.document;
        doc.addEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
        doc.addEventListener("focusout", this._onFocusOut, true);
        win2.addEventListener("keydown", this._onKeyDown, true);
        const activeElement = doc.activeElement;
        if (activeElement && activeElement !== doc.body) {
          this._setFocusedElement(activeElement);
        }
        this.subscribe(this._onChanged);
      };
      this._onFocusIn = (e2) => {
        this._setFocusedElement(e2.target, e2.details.relatedTarget, e2.details.isFocusedProgrammatically);
      };
      this._onFocusOut = (e2) => {
        this._setFocusedElement(void 0, e2.relatedTarget);
      };
      this._validateFocusedElement = (element2) => {
      };
      this._onKeyDown = (e2) => {
        var _a5, _b;
        if (e2.keyCode !== Keys.Tab || e2.ctrlKey) {
          return;
        }
        const currentElement = this.getVal();
        if (!currentElement || !currentElement.ownerDocument || currentElement.contentEditable === "true") {
          return;
        }
        const tabster2 = this._tabster;
        const controlTab = tabster2.controlTab;
        const ctx = RootAPI.getTabsterContext(tabster2, currentElement);
        if (!ctx || ctx.ignoreKeydown(e2)) {
          return;
        }
        const isBackward = e2.shiftKey;
        const next2 = FocusedElementState.findNextTabbable(tabster2, ctx, void 0, currentElement, void 0, isBackward, void 0, true);
        let nextElement;
        if (next2) {
          let uncontrolled = next2.uncontrolled;
          if (uncontrolled) {
            const isGroupperFirst = ctx.isGroupperFirst;
            let moveOutside = false;
            if (isGroupperFirst !== void 0) {
              const groupper = (_a5 = ctx.groupper) === null || _a5 === void 0 ? void 0 : _a5.getElement();
              const mover = (_b = ctx.mover) === null || _b === void 0 ? void 0 : _b.getElement();
              let moveFrom;
              if (isGroupperFirst && groupper && uncontrolled.contains(groupper)) {
                moveFrom = groupper;
              } else if (!isGroupperFirst && mover && uncontrolled.contains(mover)) {
                moveFrom = mover;
              }
              if (moveFrom) {
                uncontrolled = moveFrom;
                moveOutside = true;
              }
            }
            if (uncontrolled && ctx.uncontrolled !== uncontrolled) {
              DummyInputManager.moveWithPhantomDummy(this._tabster, uncontrolled, moveOutside, isBackward);
            }
            return;
          }
          nextElement = next2.element;
        }
        if (nextElement) {
          if (nextElement.tagName === "IFRAME") {
            DummyInputManager.moveWithPhantomDummy(this._tabster, nextElement, false, isBackward);
            return;
          }
          if (controlTab || (next2 === null || next2 === void 0 ? void 0 : next2.outOfDOMOrder)) {
            e2.preventDefault();
            e2.stopImmediatePropagation();
            nativeFocus(nextElement);
          }
        } else {
          ctx.root.moveOutWithDefaultAction(isBackward);
        }
      };
      this._onChanged = (element2, details) => {
        var _a5, _b;
        if (element2) {
          triggerEvent(element2, FocusInEventName, details);
        } else {
          const last = (_a5 = this._lastVal) === null || _a5 === void 0 ? void 0 : _a5.get();
          if (last) {
            const d2 = {
              ...details
            };
            const lastCtx = RootAPI.getTabsterContext(this._tabster, last);
            const modalizerId = (_b = lastCtx === null || lastCtx === void 0 ? void 0 : lastCtx.modalizer) === null || _b === void 0 ? void 0 : _b.userId;
            if (modalizerId) {
              d2.modalizerId = modalizerId;
            }
            triggerEvent(last, FocusOutEventName, d2);
          }
        }
      };
      this._tabster = tabster;
      this._win = getWindow2;
      tabster.queueInit(this._init);
    }
    dispose() {
      super.dispose();
      const win2 = this._win();
      win2.document.removeEventListener(KEYBORG_FOCUSIN, this._onFocusIn, true);
      win2.document.removeEventListener("focusout", this._onFocusOut, true);
      win2.removeEventListener("keydown", this._onKeyDown, true);
      this.unsubscribe(this._onChanged);
      delete FocusedElementState._lastResetElement;
      delete this._nextVal;
      delete this._lastVal;
    }
    static forgetMemorized(instance, parent) {
      var _a5, _b;
      let wel = FocusedElementState._lastResetElement;
      let el = wel && wel.get();
      if (el && parent.contains(el)) {
        delete FocusedElementState._lastResetElement;
      }
      el = (_b = (_a5 = instance._nextVal) === null || _a5 === void 0 ? void 0 : _a5.element) === null || _b === void 0 ? void 0 : _b.get();
      if (el && parent.contains(el)) {
        delete instance._nextVal;
      }
      wel = instance._lastVal;
      el = wel && wel.get();
      if (el && parent.contains(el)) {
        delete instance._lastVal;
      }
    }
    getFocusedElement() {
      return this.getVal();
    }
    getLastFocusedElement() {
      var _a5;
      let el = (_a5 = this._lastVal) === null || _a5 === void 0 ? void 0 : _a5.get();
      if (!el || el && !documentContains(el.ownerDocument, el)) {
        this._lastVal = el = void 0;
      }
      return el;
    }
    focus(element2, noFocusedProgrammaticallyFlag, noAccessibleCheck) {
      if (!this._tabster.focusable.isFocusable(element2, noFocusedProgrammaticallyFlag, false, noAccessibleCheck)) {
        return false;
      }
      element2.focus();
      return true;
    }
    focusDefault(container2) {
      const el = this._tabster.focusable.findDefault({
        container: container2
      });
      if (el) {
        this._tabster.focusedElement.focus(el);
        return true;
      }
      return false;
    }
    getFirstOrLastTabbable(isFirst, props) {
      const tabsterFocusable = this._tabster.focusable;
      const {
        container: container2,
        ignoreAccessibility
      } = props;
      let uncontrolled;
      let toFocus;
      if (container2) {
        const ctx = RootAPI.getTabsterContext(this._tabster, container2);
        if (ctx) {
          let next2 = FocusedElementState.findNextTabbable(this._tabster, ctx, container2, void 0, void 0, !isFirst, void 0, ignoreAccessibility);
          if (next2) {
            toFocus = next2.element;
            uncontrolled = next2.uncontrolled;
            while (!toFocus && uncontrolled) {
              if (tabsterFocusable.isFocusable(uncontrolled, false, true, true)) {
                toFocus = uncontrolled;
              } else {
                toFocus = tabsterFocusable[isFirst ? "findFirst" : "findLast"]({
                  container: uncontrolled,
                  ignoreUncontrolled: true,
                  ignoreAccessibility,
                  useActiveModalizer: true
                });
              }
              if (!toFocus) {
                next2 = FocusedElementState.findNextTabbable(this._tabster, ctx, uncontrolled, void 0, void 0, !isFirst, void 0, ignoreAccessibility);
                if (next2) {
                  toFocus = next2.element;
                  uncontrolled = next2.uncontrolled;
                }
              }
            }
          }
        }
      }
      if (toFocus && !(container2 === null || container2 === void 0 ? void 0 : container2.contains(toFocus))) {
        toFocus = void 0;
      }
      return toFocus || void 0;
    }
    _focusFirstOrLast(isFirst, props) {
      const toFocus = this.getFirstOrLastTabbable(isFirst, props);
      if (toFocus) {
        this.focus(toFocus, false, true);
        return true;
      }
      return false;
    }
    focusFirst(props) {
      return this._focusFirstOrLast(true, props);
    }
    focusLast(props) {
      return this._focusFirstOrLast(false, props);
    }
    resetFocus(container2) {
      if (!this._tabster.focusable.isVisible(container2)) {
        return false;
      }
      if (!this._tabster.focusable.isFocusable(container2, true, true, true)) {
        const prevTabIndex = container2.getAttribute("tabindex");
        const prevAriaHidden = container2.getAttribute("aria-hidden");
        container2.tabIndex = -1;
        container2.setAttribute("aria-hidden", "true");
        FocusedElementState._lastResetElement = new WeakHTMLElement(this._win, container2);
        this.focus(container2, true, true);
        this._setOrRemoveAttribute(container2, "tabindex", prevTabIndex);
        this._setOrRemoveAttribute(container2, "aria-hidden", prevAriaHidden);
      } else {
        this.focus(container2);
      }
      return true;
    }
    _setOrRemoveAttribute(element2, name, value) {
      if (value === null) {
        element2.removeAttribute(name);
      } else {
        element2.setAttribute(name, value);
      }
    }
    _setFocusedElement(element2, relatedTarget, isFocusedProgrammatically) {
      var _a5, _b;
      if (this._tabster._noop) {
        return;
      }
      const details = {
        relatedTarget
      };
      if (element2) {
        const lastResetElement = (_a5 = FocusedElementState._lastResetElement) === null || _a5 === void 0 ? void 0 : _a5.get();
        FocusedElementState._lastResetElement = void 0;
        if (lastResetElement === element2 || shouldIgnoreFocus(element2)) {
          return;
        }
        details.isFocusedProgrammatically = isFocusedProgrammatically;
        const ctx = RootAPI.getTabsterContext(this._tabster, element2);
        const modalizerId = (_b = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer) === null || _b === void 0 ? void 0 : _b.userId;
        if (modalizerId) {
          details.modalizerId = modalizerId;
        }
      }
      const nextVal = this._nextVal = {
        element: element2 ? new WeakHTMLElement(this._win, element2) : void 0,
        details
      };
      if (element2 && element2 !== this._val) {
        this._validateFocusedElement(element2);
      }
      if (this._nextVal === nextVal) {
        this.setVal(element2, details);
      }
      this._nextVal = void 0;
    }
    setVal(val, details) {
      super.setVal(val, details);
      if (val) {
        this._lastVal = new WeakHTMLElement(this._win, val);
      }
    }
    static findNextTabbable(tabster, ctx, container2, currentElement, referenceElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      const actualContainer = container2 || ctx.root.getElement();
      if (!actualContainer) {
        return null;
      }
      let next2 = null;
      const isTabbingTimer = FocusedElementState._isTabbingTimer;
      const win2 = tabster.getWindow();
      if (isTabbingTimer) {
        win2.clearTimeout(isTabbingTimer);
      }
      FocusedElementState.isTabbing = true;
      FocusedElementState._isTabbingTimer = win2.setTimeout(() => {
        delete FocusedElementState._isTabbingTimer;
        FocusedElementState.isTabbing = false;
      }, 0);
      const modalizer = ctx.modalizer;
      const groupper = ctx.groupper;
      const mover = ctx.mover;
      const callFindNext = (what) => {
        var _a5;
        next2 = what.findNextTabbable(currentElement, referenceElement, isBackward, ignoreUncontrolled, ignoreAccessibility);
        if (currentElement && !(next2 === null || next2 === void 0 ? void 0 : next2.element) && !(next2 === null || next2 === void 0 ? void 0 : next2.uncontrolled)) {
          const parentElement = what !== modalizer && ((_a5 = what.getElement()) === null || _a5 === void 0 ? void 0 : _a5.parentElement);
          if (parentElement) {
            const parentCtx = RootAPI.getTabsterContext(tabster, currentElement, {
              referenceElement: parentElement
            });
            if (parentCtx) {
              const currentScopeElement = what.getElement();
              const newCurrent = isBackward ? currentScopeElement : currentScopeElement && getLastChild(currentScopeElement) || currentScopeElement;
              if (newCurrent) {
                next2 = FocusedElementState.findNextTabbable(tabster, parentCtx, container2, newCurrent, parentElement, isBackward, ignoreUncontrolled, ignoreAccessibility);
                if (next2) {
                  next2.outOfDOMOrder = true;
                }
              }
            }
          }
        }
      };
      if (groupper && mover) {
        callFindNext(ctx.isGroupperFirst ? groupper : mover);
      } else if (groupper) {
        callFindNext(groupper);
      } else if (mover) {
        callFindNext(mover);
      } else if (modalizer) {
        callFindNext(modalizer);
      } else {
        let uncontrolled;
        const onUncontrolled = (el) => {
          uncontrolled = el;
        };
        const findProps = {
          container: actualContainer,
          currentElement,
          referenceElement,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        };
        const findPropsOut = {};
        const nextElement = tabster.focusable[isBackward ? "findPrev" : "findNext"](findProps, findPropsOut);
        next2 = {
          element: uncontrolled ? void 0 : nextElement,
          uncontrolled,
          outOfDOMOrder: findPropsOut.outOfDOMOrder
        };
      }
      return next2;
    }
  };
  FocusedElementState.isTabbing = false;
  var GroupperDummyManager = class extends DummyInputManager {
    constructor(element2, groupper, tabster, sys) {
      super(tabster, element2, DummyInputManagerPriorities.Groupper, sys, true);
      this._setHandlers((dummyInput, isBackward, relatedTarget) => {
        var _a5, _b;
        const container2 = element2.get();
        const input4 = dummyInput.input;
        if (container2 && input4) {
          const ctx = RootAPI.getTabsterContext(tabster, input4);
          if (ctx) {
            let next2;
            next2 = (_a5 = groupper.findNextTabbable(relatedTarget || void 0, void 0, isBackward, true, true)) === null || _a5 === void 0 ? void 0 : _a5.element;
            if (!next2) {
              next2 = (_b = FocusedElementState.findNextTabbable(tabster, ctx, void 0, dummyInput.isOutside ? input4 : getAdjacentElement(container2, !isBackward), void 0, isBackward, true, true)) === null || _b === void 0 ? void 0 : _b.element;
            }
            if (next2) {
              nativeFocus(next2);
            }
          }
        }
      });
    }
  };
  var Groupper = class extends TabsterPart {
    constructor(tabster, element2, onDispose, props, sys) {
      super(tabster, element2, props);
      this._shouldTabInside = false;
      this.makeTabbable(false);
      this._onDispose = onDispose;
      if (!tabster.controlTab) {
        this.dummyManager = new GroupperDummyManager(this._element, this, tabster, sys);
      }
    }
    dispose() {
      var _a5;
      this._onDispose(this);
      const element2 = this._element.get();
      (_a5 = this.dummyManager) === null || _a5 === void 0 ? void 0 : _a5.dispose();
      if (element2) {
        if (true) {
          _setInformativeStyle$1(this._element, true);
        }
      }
      delete this._first;
    }
    findNextTabbable(currentElement, referenceElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      var _a5;
      const groupperElement = this.getElement();
      if (!groupperElement) {
        return null;
      }
      const currentIsDummy = ((_a5 = currentElement === null || currentElement === void 0 ? void 0 : currentElement.__tabsterDummyContainer) === null || _a5 === void 0 ? void 0 : _a5.get()) === groupperElement;
      if (!this._shouldTabInside && currentElement && groupperElement.contains(currentElement) && !currentIsDummy) {
        return {
          element: void 0,
          outOfDOMOrder: true
        };
      }
      const groupperFirstFocusable = this.getFirst(true);
      if (!currentElement || !groupperElement.contains(currentElement) || currentIsDummy) {
        return {
          element: groupperFirstFocusable,
          outOfDOMOrder: true
        };
      }
      const tabster = this._tabster;
      let next2 = null;
      let uncontrolled;
      let outOfDOMOrder = false;
      const onUncontrolled = (el) => {
        uncontrolled = el;
      };
      if (this._shouldTabInside && groupperFirstFocusable) {
        const findProps = {
          container: groupperElement,
          currentElement,
          referenceElement,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        };
        const findPropsOut = {};
        next2 = tabster.focusable[isBackward ? "findPrev" : "findNext"](findProps, findPropsOut);
        outOfDOMOrder = !!findPropsOut.outOfDOMOrder;
        if (!uncontrolled && !next2 && this._props.tabbability === GroupperTabbabilities.LimitedTrapFocus) {
          next2 = isBackward ? tabster.focusable.findLast({
            container: groupperElement,
            ignoreUncontrolled: true,
            ignoreAccessibility,
            useActiveModalizer: true
          }) : tabster.focusable.findFirst({
            container: groupperElement,
            ignoreUncontrolled: true,
            ignoreAccessibility,
            useActiveModalizer: true
          });
          outOfDOMOrder = true;
        }
      }
      return {
        element: next2,
        uncontrolled,
        outOfDOMOrder
      };
    }
    makeTabbable(isTabbable) {
      this._shouldTabInside = isTabbable || !this._props.tabbability;
      if (true) {
        _setInformativeStyle$1(this._element, !this._shouldTabInside);
      }
    }
    isActive(noIfFirstIsFocused) {
      var _a5;
      const element2 = this.getElement() || null;
      let isParentActive = true;
      for (let e2 = element2 === null || element2 === void 0 ? void 0 : element2.parentElement; e2; e2 = e2.parentElement) {
        const g2 = (_a5 = getTabsterOnElement(this._tabster, e2)) === null || _a5 === void 0 ? void 0 : _a5.groupper;
        if (g2) {
          if (!g2._shouldTabInside) {
            isParentActive = false;
          }
        }
      }
      let ret = isParentActive ? this._props.tabbability ? this._shouldTabInside : false : void 0;
      if (ret && noIfFirstIsFocused) {
        const focused = this._tabster.focusedElement.getFocusedElement();
        if (focused) {
          ret = focused !== this.getFirst(true);
        }
      }
      return ret;
    }
    getFirst(orContainer) {
      var _a5;
      const groupperElement = this.getElement();
      let first;
      if (groupperElement) {
        if (orContainer && this._tabster.focusable.isFocusable(groupperElement)) {
          return groupperElement;
        }
        first = (_a5 = this._first) === null || _a5 === void 0 ? void 0 : _a5.get();
        if (!first) {
          first = this._tabster.focusable.findFirst({
            container: groupperElement,
            ignoreUncontrolled: true,
            useActiveModalizer: true
          }) || void 0;
          if (first) {
            this.setFirst(first);
          }
        }
      }
      return first;
    }
    setFirst(element2) {
      if (element2) {
        this._first = new WeakHTMLElement(this._tabster.getWindow, element2);
      } else {
        delete this._first;
      }
    }
    acceptElement(element2, state) {
      var _a5;
      const cachedGrouppers = state.cachedGrouppers;
      const parentElement = (_a5 = this.getElement()) === null || _a5 === void 0 ? void 0 : _a5.parentElement;
      const parentCtx = parentElement && RootAPI.getTabsterContext(this._tabster, parentElement);
      const parentCtxGroupper = parentCtx === null || parentCtx === void 0 ? void 0 : parentCtx.groupper;
      const parentGroupper = (parentCtx === null || parentCtx === void 0 ? void 0 : parentCtx.isGroupperFirst) ? parentCtxGroupper : void 0;
      let parentGroupperElement;
      const getIsActive = (groupper) => {
        let cached = cachedGrouppers[groupper.id];
        let isActive2;
        if (cached) {
          isActive2 = cached.isActive;
        } else {
          isActive2 = this.isActive(true);
          cached = cachedGrouppers[groupper.id] = {
            isActive: isActive2
          };
        }
        return isActive2;
      };
      if (parentGroupper) {
        parentGroupperElement = parentGroupper.getElement();
        if (!getIsActive(parentGroupper) && parentGroupperElement && state.container !== parentGroupperElement && state.container.contains(parentGroupperElement)) {
          state.skippedFocusable = true;
          return NodeFilter.FILTER_REJECT;
        }
      }
      const isActive = getIsActive(this);
      const groupperElement = this.getElement();
      if (groupperElement) {
        if (isActive !== true) {
          if (groupperElement === element2 && parentCtxGroupper) {
            if (!parentGroupperElement) {
              parentGroupperElement = parentCtxGroupper.getElement();
            }
            if (parentGroupperElement && !getIsActive(parentCtxGroupper) && state.container.contains(parentGroupperElement) && parentGroupperElement !== state.container) {
              state.skippedFocusable = true;
              return NodeFilter.FILTER_REJECT;
            }
          }
          if (groupperElement !== element2 && groupperElement.contains(element2)) {
            state.skippedFocusable = true;
            return NodeFilter.FILTER_REJECT;
          }
          const cached = cachedGrouppers[this.id];
          let first;
          if ("first" in cached) {
            first = cached.first;
          } else {
            first = cached.first = this.getFirst(true);
          }
          if (first && state.acceptCondition(first)) {
            state.lastToIgnore = groupperElement;
            state.skippedFocusable = true;
            if (first !== state.from) {
              state.found = true;
              state.foundElement = first;
              return NodeFilter.FILTER_ACCEPT;
            } else {
              return NodeFilter.FILTER_REJECT;
            }
          }
        }
      }
      return void 0;
    }
  };
  var GroupperAPI = class {
    constructor(tabster, getWindow2) {
      this._current = {};
      this._grouppers = {};
      this._init = () => {
        const win2 = this._win();
        this._tabster.focusedElement.subscribeFirst(this._onFocus);
        win2.document.addEventListener("mousedown", this._onMouseDown, true);
        win2.addEventListener("keydown", this._onKeyDown, true);
      };
      this._onGroupperDispose = (groupper) => {
        delete this._grouppers[groupper.id];
      };
      this._onFocus = (element2) => {
        if (element2) {
          this._updateCurrent(element2, true, true);
        }
      };
      this._onMouseDown = (e2) => {
        if (e2.target) {
          this._updateCurrent(e2.target, true);
        }
      };
      this._onKeyDown = (event) => {
        if (event.keyCode !== Keys.Enter && event.keyCode !== Keys.Esc) {
          return;
        }
        if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
          return;
        }
        const element2 = this._tabster.focusedElement.getFocusedElement();
        if (element2) {
          this.handleKeyPress(element2, event);
        }
      };
      this._tabster = tabster;
      this._win = getWindow2;
      tabster.queueInit(this._init);
    }
    dispose() {
      const win2 = this._win();
      this._current = {};
      if (this._updateTimer) {
        win2.clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      this._tabster.focusedElement.unsubscribe(this._onFocus);
      win2.document.removeEventListener("mousedown", this._onMouseDown, true);
      win2.removeEventListener("keydown", this._onKeyDown, true);
      Object.keys(this._grouppers).forEach((groupperId) => {
        if (this._grouppers[groupperId]) {
          this._grouppers[groupperId].dispose();
          delete this._grouppers[groupperId];
        }
      });
    }
    createGroupper(element2, props, sys) {
      if (true)
        ;
      const newGroupper = new Groupper(this._tabster, element2, this._onGroupperDispose, props, sys);
      this._grouppers[newGroupper.id] = newGroupper;
      const focusedElement = this._tabster.focusedElement.getFocusedElement();
      if (focusedElement && element2.contains(focusedElement) && !this._updateTimer) {
        this._updateTimer = this._win().setTimeout(() => {
          delete this._updateTimer;
          if (focusedElement === this._tabster.focusedElement.getFocusedElement()) {
            this._updateCurrent(focusedElement, true, true);
          }
        }, 0);
      }
      return newGroupper;
    }
    forgetCurrentGrouppers() {
      this._current = {};
    }
    _updateCurrent(element2, includeTarget, checkTarget) {
      var _a5;
      if (this._updateTimer) {
        this._win().clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      const newIds = {};
      let isTarget = true;
      for (let el = element2; el; el = el.parentElement) {
        const groupper = (_a5 = getTabsterOnElement(this._tabster, el)) === null || _a5 === void 0 ? void 0 : _a5.groupper;
        if (groupper) {
          newIds[groupper.id] = true;
          if (isTarget && checkTarget && el !== element2) {
            isTarget = false;
          }
          if (includeTarget || !isTarget) {
            this._current[groupper.id] = groupper;
            const isTabbable = groupper.isActive() || element2 !== el && (!groupper.getProps().delegated || groupper.getFirst(false) !== element2);
            groupper.makeTabbable(isTabbable);
          }
          isTarget = false;
        }
      }
      for (const id of Object.keys(this._current)) {
        const groupper = this._current[id];
        if (!(groupper.id in newIds)) {
          groupper.makeTabbable(false);
          groupper.setFirst(void 0);
          delete this._current[id];
        }
      }
    }
    handleKeyPress(element2, event, noGoUp) {
      var _a5;
      const tabster = this._tabster;
      const ctx = RootAPI.getTabsterContext(tabster, element2);
      const modalizerInGroupper = ctx === null || ctx === void 0 ? void 0 : ctx.modalizerInGroupper;
      let groupper = (ctx === null || ctx === void 0 ? void 0 : ctx.groupper) || modalizerInGroupper;
      if (ctx && groupper) {
        if (ctx.ignoreKeydown(event)) {
          return;
        }
        let next2;
        const groupperElement = groupper.getElement();
        if (event.keyCode === Keys.Enter) {
          if (groupperElement && (element2 === groupperElement || groupper.getProps().delegated && element2 === groupper.getFirst(false))) {
            next2 = tabster.focusable.findNext({
              container: groupperElement,
              currentElement: element2,
              useActiveModalizer: true
            });
          }
        } else if (event.keyCode === Keys.Esc) {
          if (groupperElement && groupperElement.contains(element2)) {
            if (element2 !== groupperElement || noGoUp) {
              next2 = groupper.getFirst(true);
            } else {
              const parentElement = groupperElement.parentElement;
              const parentCtx = parentElement ? RootAPI.getTabsterContext(tabster, parentElement) : void 0;
              groupper = parentCtx === null || parentCtx === void 0 ? void 0 : parentCtx.groupper;
              next2 = groupper === null || groupper === void 0 ? void 0 : groupper.getFirst(true);
            }
          }
          if (groupper) {
            groupper.makeTabbable(false);
            if (modalizerInGroupper) {
              (_a5 = tabster.modalizer) === null || _a5 === void 0 ? void 0 : _a5.setActive(void 0);
            }
          }
        }
        if (next2) {
          event.preventDefault();
          event.stopImmediatePropagation();
          next2.focus();
        }
      }
    }
  };
  function _setInformativeStyle$1(weakElement, remove) {
    if (true) {
      const element2 = weakElement.get();
      if (element2) {
        if (remove) {
          element2.style.removeProperty("--tabster-groupper");
        } else {
          element2.style.setProperty("--tabster-groupper", "unlimited");
        }
      }
    }
  }
  var KeyboardNavigationState = class extends Subscribable {
    constructor(getWindow2) {
      super();
      this._onChange = (isNavigatingWithKeyboard) => {
        this.setVal(isNavigatingWithKeyboard, void 0);
      };
      this._keyborg = createKeyborg(getWindow2());
      this._keyborg.subscribe(this._onChange);
    }
    dispose() {
      super.dispose();
      if (this._keyborg) {
        this._keyborg.unsubscribe(this._onChange);
        disposeKeyborg(this._keyborg);
        delete this._keyborg;
      }
    }
    setNavigatingWithKeyboard(isNavigatingWithKeyboard) {
      var _a5;
      (_a5 = this._keyborg) === null || _a5 === void 0 ? void 0 : _a5.setVal(isNavigatingWithKeyboard);
    }
    isNavigatingWithKeyboard() {
      var _a5;
      return !!((_a5 = this._keyborg) === null || _a5 === void 0 ? void 0 : _a5.isNavigatingWithKeyboard());
    }
  };
  var _wasFocusedCounter = 0;
  var _ariaHidden = "aria-hidden";
  function _setInformativeStyle(weakElement, remove, internalId, userId, isActive, wasFocused) {
    if (true) {
      const element2 = weakElement.get();
      if (element2) {
        if (remove) {
          element2.style.removeProperty("--tabster-modalizer");
        } else {
          element2.style.setProperty("--tabster-modalizer", internalId + "," + userId + "," + (isActive ? "active" : "inactive") + ",," + (wasFocused ? `focused(${wasFocused})` : "not-focused"));
        }
      }
    }
  }
  var ModalizerDummyManager = class extends DummyInputManager {
    constructor(element2, tabster, sys) {
      super(tabster, element2, DummyInputManagerPriorities.Modalizer, sys);
      this._setHandlers((dummyInput, isBackward) => {
        var _a5, _b, _c;
        const el = element2.get();
        const container2 = el && ((_a5 = RootAPI.getRoot(tabster, el)) === null || _a5 === void 0 ? void 0 : _a5.getElement());
        const input4 = dummyInput.input;
        let toFocus;
        if (container2 && input4) {
          const dummyContainer = (_b = input4.__tabsterDummyContainer) === null || _b === void 0 ? void 0 : _b.get();
          const ctx = RootAPI.getTabsterContext(tabster, dummyContainer || input4);
          if (ctx) {
            toFocus = (_c = FocusedElementState.findNextTabbable(tabster, ctx, container2, input4, void 0, isBackward, true, true)) === null || _c === void 0 ? void 0 : _c.element;
          }
          if (toFocus) {
            nativeFocus(toFocus);
          }
        }
      });
    }
  };
  var Modalizer = class extends TabsterPart {
    constructor(tabster, element2, onDispose, props, sys, activeElements) {
      super(tabster, element2, props);
      this._wasFocused = 0;
      this.userId = props.id;
      this._onDispose = onDispose;
      this._activeElements = activeElements;
      if (!tabster.controlTab) {
        this.dummyManager = new ModalizerDummyManager(this._element, tabster, sys);
      }
      if (true) {
        _setInformativeStyle(this._element, false, this.id, this.userId, this._isActive, this._wasFocused);
      }
    }
    makeActive(isActive) {
      if (this._isActive !== isActive) {
        this._isActive = isActive;
        const element2 = this.getElement();
        if (element2) {
          const activeElements = this._activeElements;
          const index2 = activeElements.map((e2) => e2.deref()).indexOf(element2);
          if (isActive) {
            if (index2 < 0) {
              activeElements.push(new WeakRef(element2));
            }
          } else {
            if (index2 >= 0) {
              activeElements.splice(index2, 1);
            }
          }
        }
        if (true) {
          _setInformativeStyle(this._element, false, this.id, this.userId, this._isActive, this._wasFocused);
        }
        this.triggerFocusEvent(isActive ? ModalizerActiveEventName : ModalizerInactiveEventName);
      }
    }
    focused(noIncrement) {
      if (!noIncrement) {
        this._wasFocused = ++_wasFocusedCounter;
      }
      return this._wasFocused;
    }
    setProps(props) {
      if (props.id) {
        this.userId = props.id;
      }
      this._props = {
        ...props
      };
    }
    dispose() {
      var _a5;
      this.makeActive(false);
      this._onDispose(this);
      (_a5 = this.dummyManager) === null || _a5 === void 0 ? void 0 : _a5.dispose();
      this._activeElements = [];
      this._remove();
    }
    isActive() {
      return !!this._isActive;
    }
    contains(element2) {
      var _a5;
      return !!((_a5 = this.getElement()) === null || _a5 === void 0 ? void 0 : _a5.contains(element2));
    }
    findNextTabbable(currentElement, referenceElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      var _a5, _b;
      const modalizerElement = this.getElement();
      if (!modalizerElement) {
        return null;
      }
      const tabster = this._tabster;
      let next2 = null;
      let uncontrolled;
      let outOfDOMOrder = false;
      const onUncontrolled = (el) => {
        uncontrolled = el;
      };
      const container2 = currentElement && ((_a5 = RootAPI.getRoot(tabster, currentElement)) === null || _a5 === void 0 ? void 0 : _a5.getElement());
      if (container2) {
        const findProps = {
          container: container2,
          currentElement,
          referenceElement,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        };
        const findPropsOut = {};
        next2 = tabster.focusable[isBackward ? "findPrev" : "findNext"](findProps, findPropsOut);
        if (!uncontrolled && !next2 && this._props.isTrapped && ((_b = tabster.modalizer) === null || _b === void 0 ? void 0 : _b.activeId)) {
          next2 = tabster.focusable[isBackward ? "findLast" : "findFirst"]({
            container: container2,
            ignoreUncontrolled: true,
            ignoreAccessibility,
            useActiveModalizer: true
          });
          outOfDOMOrder = true;
        } else {
          outOfDOMOrder = !!findPropsOut.outOfDOMOrder;
        }
      }
      return {
        element: next2,
        uncontrolled,
        outOfDOMOrder
      };
    }
    triggerFocusEvent(eventName, allElements) {
      const element2 = this.getElement();
      let defaultPrevented = false;
      if (element2) {
        const elements = allElements ? this._activeElements.map((e2) => e2.deref()) : [element2];
        for (const el of elements) {
          if (el && !triggerEvent(el, eventName, {
            id: this.userId,
            element: element2,
            eventName
          })) {
            defaultPrevented = true;
          }
        }
      }
      return defaultPrevented;
    }
    _remove() {
      if (true) {
        _setInformativeStyle(this._element, true);
      }
    }
  };
  var ModalizerAPI = class {
    constructor(tabster, alwaysAccessibleSelector, accessibleCheck) {
      this._onModalizerDispose = (modalizer) => {
        const id = modalizer.id;
        const userId = modalizer.userId;
        const part = this._parts[userId];
        delete this._modalizers[id];
        if (part) {
          delete part[id];
          if (Object.keys(part).length === 0) {
            delete this._parts[userId];
            if (this.activeId === userId) {
              this.setActive(void 0);
            }
          }
        }
      };
      this._onKeyDown = (event) => {
        var _a5;
        if (event.keyCode !== Keys.Esc) {
          return;
        }
        const tabster2 = this._tabster;
        const element2 = tabster2.focusedElement.getFocusedElement();
        if (element2) {
          const ctx = RootAPI.getTabsterContext(tabster2, element2);
          const modalizer = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer;
          if (ctx && !ctx.groupper && (modalizer === null || modalizer === void 0 ? void 0 : modalizer.isActive()) && !ctx.ignoreKeydown(event)) {
            const activeId = modalizer.userId;
            if (activeId) {
              const part = this._parts[activeId];
              if (part) {
                const focusedSince = Object.keys(part).map((id) => {
                  var _a6;
                  const m2 = part[id];
                  const el = m2.getElement();
                  let groupper;
                  if (el) {
                    groupper = (_a6 = getTabsterOnElement(this._tabster, el)) === null || _a6 === void 0 ? void 0 : _a6.groupper;
                  }
                  return m2 && el && groupper ? {
                    el,
                    focusedSince: m2.focused(true)
                  } : {
                    focusedSince: 0
                  };
                }).filter((f3) => f3.focusedSince > 0).sort((a2, b3) => a2.focusedSince > b3.focusedSince ? -1 : a2.focusedSince < b3.focusedSince ? 1 : 0);
                if (focusedSince.length) {
                  const groupperElement = focusedSince[0].el;
                  if (groupperElement) {
                    (_a5 = tabster2.groupper) === null || _a5 === void 0 ? void 0 : _a5.handleKeyPress(groupperElement, event, true);
                  }
                }
              }
            }
          }
        }
      };
      this._onFocus = (focusedElement, details) => {
        var _a5, _b;
        const ctx = focusedElement && RootAPI.getTabsterContext(this._tabster, focusedElement);
        if (!ctx || !focusedElement) {
          return;
        }
        const augmentedMap = this._augMap;
        for (let e2 = focusedElement; e2; e2 = e2.parentElement) {
          if (augmentedMap.has(e2)) {
            augmentedMap.delete(e2);
            augmentAttribute(this._tabster, e2, _ariaHidden);
          }
        }
        const modalizer = ctx.modalizer;
        (_b = modalizer || ((_a5 = getTabsterOnElement(this._tabster, focusedElement)) === null || _a5 === void 0 ? void 0 : _a5.modalizer)) === null || _b === void 0 ? void 0 : _b.focused();
        if ((modalizer === null || modalizer === void 0 ? void 0 : modalizer.userId) === this.activeId) {
          this.currentIsOthersAccessible = modalizer === null || modalizer === void 0 ? void 0 : modalizer.getProps().isOthersAccessible;
          return;
        }
        if (details.isFocusedProgrammatically || this.currentIsOthersAccessible || (modalizer === null || modalizer === void 0 ? void 0 : modalizer.getProps().isAlwaysAccessible)) {
          this.setActive(modalizer);
        } else {
          const win3 = this._win();
          win3.clearTimeout(this._restoreModalizerFocusTimer);
          this._restoreModalizerFocusTimer = win3.setTimeout(() => this._restoreModalizerFocus(focusedElement), 100);
        }
      };
      this._tabster = tabster;
      this._win = tabster.getWindow;
      this._modalizers = {};
      this._parts = {};
      this._augMap = /* @__PURE__ */ new WeakMap();
      this._aug = [];
      this._alwaysAccessibleSelector = alwaysAccessibleSelector;
      this._accessibleCheck = accessibleCheck;
      this.activeElements = [];
      if (!tabster.controlTab) {
        tabster.root.addDummyInputs();
      }
      const win2 = this._win();
      win2.addEventListener("keydown", this._onKeyDown, true);
      tabster.queueInit(() => {
        this._tabster.focusedElement.subscribe(this._onFocus);
      });
    }
    dispose() {
      const win2 = this._win();
      win2.removeEventListener("keydown", this._onKeyDown, true);
      Object.keys(this._modalizers).forEach((modalizerId) => {
        if (this._modalizers[modalizerId]) {
          this._modalizers[modalizerId].dispose();
          delete this._modalizers[modalizerId];
        }
      });
      win2.clearTimeout(this._restoreModalizerFocusTimer);
      win2.clearTimeout(this._hiddenUpdateTimer);
      this._parts = {};
      delete this.activeId;
      this.activeElements = [];
      this._augMap = /* @__PURE__ */ new WeakMap();
      this._aug = [];
      this._tabster.focusedElement.unsubscribe(this._onFocus);
    }
    createModalizer(element2, props, sys) {
      var _a5;
      if (true)
        ;
      const modalizer = new Modalizer(this._tabster, element2, this._onModalizerDispose, props, sys, this.activeElements);
      const id = modalizer.id;
      const userId = props.id;
      this._modalizers[id] = modalizer;
      let part = this._parts[userId];
      if (!part) {
        part = this._parts[userId] = {};
      }
      part[id] = modalizer;
      if (element2.contains((_a5 = this._tabster.focusedElement.getFocusedElement()) !== null && _a5 !== void 0 ? _a5 : null)) {
        if (userId !== this.activeId) {
          this.setActive(modalizer);
        } else {
          modalizer.makeActive(true);
        }
      }
      return modalizer;
    }
    isAugmented(element2) {
      return this._augMap.has(element2);
    }
    hiddenUpdate() {
      if (this._hiddenUpdateTimer) {
        return;
      }
      this._hiddenUpdateTimer = this._win().setTimeout(() => {
        delete this._hiddenUpdateTimer;
        this._hiddenUpdate();
      }, 250);
    }
    setActive(modalizer) {
      const userId = modalizer === null || modalizer === void 0 ? void 0 : modalizer.userId;
      const activeId = this.activeId;
      if (activeId === userId) {
        return;
      }
      this.activeId = userId;
      if (activeId) {
        const part = this._parts[activeId];
        if (part) {
          for (const id of Object.keys(part)) {
            part[id].makeActive(false);
          }
        }
      }
      if (userId) {
        const part = this._parts[userId];
        if (part) {
          for (const id of Object.keys(part)) {
            part[id].makeActive(true);
          }
        }
      }
      this.currentIsOthersAccessible = modalizer === null || modalizer === void 0 ? void 0 : modalizer.getProps().isOthersAccessible;
      this.hiddenUpdate();
    }
    focus(elementFromModalizer, noFocusFirst, noFocusDefault) {
      const ctx = RootAPI.getTabsterContext(this._tabster, elementFromModalizer);
      const modalizer = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer;
      if (modalizer) {
        this.setActive(modalizer);
        const props = modalizer.getProps();
        const modalizerRoot = modalizer.getElement();
        if (modalizerRoot) {
          if (noFocusFirst === void 0) {
            noFocusFirst = props.isNoFocusFirst;
          }
          if (!noFocusFirst && this._tabster.keyboardNavigation.isNavigatingWithKeyboard() && this._tabster.focusedElement.focusFirst({
            container: modalizerRoot
          })) {
            return true;
          }
          if (noFocusDefault === void 0) {
            noFocusDefault = props.isNoFocusDefault;
          }
          if (!noFocusDefault && this._tabster.focusedElement.focusDefault(modalizerRoot)) {
            return true;
          }
          this._tabster.focusedElement.resetFocus(modalizerRoot);
        }
      } else if (true) {
        console.error("Element is not in Modalizer.", elementFromModalizer);
      }
      return false;
    }
    acceptElement(element2, state) {
      var _a5;
      const modalizerUserId = state.modalizerUserId;
      const currentModalizer = (_a5 = state.currentCtx) === null || _a5 === void 0 ? void 0 : _a5.modalizer;
      if (modalizerUserId) {
        for (const e2 of this.activeElements) {
          const el = e2.deref();
          if (el && (element2.contains(el) || el === element2)) {
            return NodeFilter.FILTER_SKIP;
          }
        }
      }
      const ret = modalizerUserId === (currentModalizer === null || currentModalizer === void 0 ? void 0 : currentModalizer.userId) || !modalizerUserId && (currentModalizer === null || currentModalizer === void 0 ? void 0 : currentModalizer.getProps().isAlwaysAccessible) ? void 0 : NodeFilter.FILTER_SKIP;
      if (ret !== void 0) {
        state.skippedFocusable = true;
      }
      return ret;
    }
    _hiddenUpdate() {
      var _a5;
      const tabster = this._tabster;
      const body4 = tabster.getWindow().document.body;
      const activeId = this.activeId;
      const parts = this._parts;
      const visibleElements = [];
      const hiddenElements = [];
      const alwaysAccessibleSelector = this._alwaysAccessibleSelector;
      const alwaysAccessibleElements = alwaysAccessibleSelector ? Array.from(body4.querySelectorAll(alwaysAccessibleSelector)) : [];
      const activeModalizerElements = [];
      for (const userId of Object.keys(parts)) {
        const modalizerParts = parts[userId];
        for (const id of Object.keys(modalizerParts)) {
          const modalizer = modalizerParts[id];
          const el = modalizer.getElement();
          const props = modalizer.getProps();
          const isAlwaysAccessible = props.isAlwaysAccessible;
          if (el) {
            if (userId === activeId) {
              activeModalizerElements.push(el);
              if (!this.currentIsOthersAccessible) {
                visibleElements.push(el);
              }
            } else if (isAlwaysAccessible) {
              alwaysAccessibleElements.push(el);
            } else {
              hiddenElements.push(el);
            }
          }
        }
      }
      const augmentedMap = this._augMap;
      const allVisibleElements = visibleElements.length > 0 ? [...visibleElements, ...alwaysAccessibleElements] : void 0;
      const newAugmented = [];
      const newAugmentedMap = /* @__PURE__ */ new WeakMap();
      const toggle2 = (element2, hide) => {
        var _a6;
        const tagName = element2.tagName;
        if (tagName === "SCRIPT" || tagName === "STYLE") {
          return;
        }
        let isAugmented = false;
        if (augmentedMap.has(element2)) {
          if (hide) {
            isAugmented = true;
          } else {
            augmentedMap.delete(element2);
            augmentAttribute(tabster, element2, _ariaHidden);
          }
        } else if (hide && !((_a6 = this._accessibleCheck) === null || _a6 === void 0 ? void 0 : _a6.call(this, element2, activeModalizerElements)) && augmentAttribute(tabster, element2, _ariaHidden, "true")) {
          augmentedMap.set(element2, true);
          isAugmented = true;
        }
        if (isAugmented) {
          newAugmented.push(new WeakRef(element2));
          newAugmentedMap.set(element2, true);
        }
      };
      const walk = (element2) => {
        for (let el = element2.firstElementChild; el; el = el.nextElementSibling) {
          let skip = false;
          let containsModalizer = false;
          if (allVisibleElements) {
            for (const c2 of allVisibleElements) {
              if (el === c2) {
                skip = true;
                break;
              }
              if (el.contains(c2)) {
                containsModalizer = true;
                break;
              }
            }
            if (containsModalizer) {
              walk(el);
            } else if (!skip) {
              toggle2(el, true);
            }
          } else {
            toggle2(el, false);
          }
        }
      };
      if (!allVisibleElements) {
        alwaysAccessibleElements.forEach((e2) => toggle2(e2, false));
      }
      hiddenElements.forEach((e2) => toggle2(e2, true));
      if (body4) {
        walk(body4);
      }
      (_a5 = this._aug) === null || _a5 === void 0 ? void 0 : _a5.map((e2) => e2.deref()).forEach((e2) => {
        if (e2 && !newAugmentedMap.get(e2)) {
          toggle2(e2, false);
        }
      });
      this._aug = newAugmented;
      this._augMap = newAugmentedMap;
    }
    /**
     * Called when an element is focused outside of an active modalizer.
     * Attempts to pull focus back into the active modalizer
     * @param outsideElement - An element being focused outside of the modalizer
     */
    _restoreModalizerFocus(outsideElement) {
      const ownerDocument = outsideElement === null || outsideElement === void 0 ? void 0 : outsideElement.ownerDocument;
      if (!outsideElement || !ownerDocument) {
        return;
      }
      const ctx = RootAPI.getTabsterContext(this._tabster, outsideElement);
      const modalizer = ctx === null || ctx === void 0 ? void 0 : ctx.modalizer;
      const activeId = this.activeId;
      if (!modalizer && !activeId || modalizer && activeId === modalizer.userId) {
        return;
      }
      const container2 = ctx === null || ctx === void 0 ? void 0 : ctx.root.getElement();
      if (container2) {
        let toFocus = this._tabster.focusable.findFirst({
          container: container2,
          ignoreUncontrolled: true,
          useActiveModalizer: true
        });
        if (toFocus) {
          if (outsideElement.compareDocumentPosition(toFocus) & document.DOCUMENT_POSITION_PRECEDING) {
            toFocus = this._tabster.focusable.findLast({
              container: container2,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
            if (!toFocus) {
              throw new Error("Something went wrong.");
            }
          }
          this._tabster.focusedElement.focus(toFocus);
          return;
        }
      }
      outsideElement.blur();
    }
  };
  var _inputSelector = /* @__PURE__ */ ["input", "textarea", "*[contenteditable]"].join(", ");
  var MoverDummyManager = class extends DummyInputManager {
    constructor(element2, tabster, getMemorized, sys) {
      super(tabster, element2, DummyInputManagerPriorities.Mover, sys);
      this._onFocusDummyInput = (dummyInput) => {
        var _a5, _b;
        const container2 = this._element.get();
        const input4 = dummyInput.input;
        if (container2 && input4) {
          const ctx = RootAPI.getTabsterContext(this._tabster, container2);
          let toFocus;
          if (ctx) {
            toFocus = (_a5 = FocusedElementState.findNextTabbable(this._tabster, ctx, void 0, input4, void 0, !dummyInput.isFirst, true)) === null || _a5 === void 0 ? void 0 : _a5.element;
          }
          const memorized = (_b = this._getMemorized()) === null || _b === void 0 ? void 0 : _b.get();
          if (memorized) {
            toFocus = memorized;
          }
          if (toFocus) {
            nativeFocus(toFocus);
          }
        }
      };
      this._tabster = tabster;
      this._getMemorized = getMemorized;
      this._setHandlers(this._onFocusDummyInput);
    }
  };
  var _moverUpdateAdd = 1;
  var _moverUpdateAttr = 2;
  var _moverUpdateRemove = 3;
  var Mover = class extends TabsterPart {
    constructor(tabster, element2, onDispose, props, sys) {
      var _a5;
      super(tabster, element2, props);
      this._visible = {};
      this._onIntersection = (entries) => {
        for (const entry of entries) {
          const el = entry.target;
          const id = getElementUId(this._win, el);
          let newVisibility;
          let fullyVisible = this._fullyVisible;
          if (entry.intersectionRatio >= 0.25) {
            newVisibility = entry.intersectionRatio >= 0.75 ? Visibilities.Visible : Visibilities.PartiallyVisible;
            if (newVisibility === Visibilities.Visible) {
              fullyVisible = id;
            }
          } else {
            newVisibility = Visibilities.Invisible;
          }
          if (this._visible[id] !== newVisibility) {
            if (newVisibility === void 0) {
              delete this._visible[id];
              if (fullyVisible === id) {
                delete this._fullyVisible;
              }
            } else {
              this._visible[id] = newVisibility;
              this._fullyVisible = fullyVisible;
            }
            const state = this.getState(el);
            if (state) {
              triggerEvent(el, MoverEventName, state);
            }
          }
        }
      };
      this._win = tabster.getWindow;
      this.visibilityTolerance = (_a5 = props.visibilityTolerance) !== null && _a5 !== void 0 ? _a5 : 0.8;
      if (this._props.trackState || this._props.visibilityAware) {
        this._intersectionObserver = new IntersectionObserver(this._onIntersection, {
          threshold: [0, 0.25, 0.5, 0.75, 1]
        });
        this._observeState();
      }
      this._onDispose = onDispose;
      const getMemorized = () => props.memorizeCurrent ? this._current : void 0;
      if (!tabster.controlTab) {
        this.dummyManager = new MoverDummyManager(this._element, tabster, getMemorized, sys);
      }
    }
    dispose() {
      var _a5;
      this._onDispose(this);
      if (this._intersectionObserver) {
        this._intersectionObserver.disconnect();
        delete this._intersectionObserver;
      }
      delete this._current;
      delete this._fullyVisible;
      delete this._allElements;
      delete this._updateQueue;
      if (this._unobserve) {
        this._unobserve();
        delete this._unobserve;
      }
      const win2 = this._win();
      if (this._setCurrentTimer) {
        win2.clearTimeout(this._setCurrentTimer);
        delete this._setCurrentTimer;
      }
      if (this._updateTimer) {
        win2.clearTimeout(this._updateTimer);
        delete this._updateTimer;
      }
      (_a5 = this.dummyManager) === null || _a5 === void 0 ? void 0 : _a5.dispose();
    }
    setCurrent(element2) {
      if (element2) {
        this._current = new WeakHTMLElement(this._win, element2);
      } else {
        this._current = void 0;
      }
      if ((this._props.trackState || this._props.visibilityAware) && !this._setCurrentTimer) {
        this._setCurrentTimer = this._win().setTimeout(() => {
          var _a5;
          delete this._setCurrentTimer;
          const changed = [];
          if (this._current !== this._prevCurrent) {
            changed.push(this._current);
            changed.push(this._prevCurrent);
            this._prevCurrent = this._current;
          }
          for (const weak of changed) {
            const el = weak === null || weak === void 0 ? void 0 : weak.get();
            if (el && ((_a5 = this._allElements) === null || _a5 === void 0 ? void 0 : _a5.get(el)) === this) {
              const props = this._props;
              if (el && (props.visibilityAware !== void 0 || props.trackState)) {
                const state = this.getState(el);
                if (state) {
                  triggerEvent(el, MoverEventName, state);
                }
              }
            }
          }
        });
      }
    }
    getCurrent() {
      var _a5;
      return ((_a5 = this._current) === null || _a5 === void 0 ? void 0 : _a5.get()) || null;
    }
    findNextTabbable(currentElement, referenceElement, isBackward, ignoreUncontrolled, ignoreAccessibility) {
      var _a5;
      const container2 = this.getElement();
      const currentIsDummy = container2 && ((_a5 = currentElement === null || currentElement === void 0 ? void 0 : currentElement.__tabsterDummyContainer) === null || _a5 === void 0 ? void 0 : _a5.get()) === container2;
      if (!container2) {
        return null;
      }
      const tabster = this._tabster;
      let next2 = null;
      let uncontrolled;
      let outOfDOMOrder = false;
      const onUncontrolled = (el) => {
        uncontrolled = el;
      };
      if (this._props.tabbable || currentIsDummy || currentElement && !container2.contains(currentElement)) {
        const findProps = {
          currentElement,
          referenceElement,
          container: container2,
          onUncontrolled,
          ignoreUncontrolled,
          ignoreAccessibility,
          useActiveModalizer: true
        };
        const findPropsOut = {};
        next2 = tabster.focusable[isBackward ? "findPrev" : "findNext"](findProps, findPropsOut);
        outOfDOMOrder = !!findPropsOut.outOfDOMOrder;
      }
      return {
        element: next2,
        uncontrolled,
        outOfDOMOrder
      };
    }
    acceptElement(element2, state) {
      var _a5, _b, _c;
      if (!FocusedElementState.isTabbing) {
        return ((_a5 = state.currentCtx) === null || _a5 === void 0 ? void 0 : _a5.isExcludedFromMover) ? NodeFilter.FILTER_REJECT : void 0;
      }
      const {
        memorizeCurrent,
        visibilityAware,
        hasDefault = true
      } = this._props;
      const moverElement = this.getElement();
      if (moverElement && (memorizeCurrent || visibilityAware || hasDefault) && (!moverElement.contains(state.from) || ((_b = state.from.__tabsterDummyContainer) === null || _b === void 0 ? void 0 : _b.get()) === moverElement)) {
        let found;
        if (memorizeCurrent) {
          const current = (_c = this._current) === null || _c === void 0 ? void 0 : _c.get();
          if (current && state.acceptCondition(current)) {
            found = current;
          }
        }
        if (!found && hasDefault) {
          found = this._tabster.focusable.findDefault({
            container: moverElement,
            ignoreUncontrolled: true,
            useActiveModalizer: true
          });
        }
        if (!found && visibilityAware) {
          found = this._tabster.focusable.findElement({
            container: moverElement,
            ignoreUncontrolled: true,
            useActiveModalizer: true,
            isBackward: state.isBackward,
            acceptCondition: (el) => {
              var _a6;
              const id = getElementUId(this._win, el);
              const visibility = this._visible[id];
              return moverElement !== el && !!((_a6 = this._allElements) === null || _a6 === void 0 ? void 0 : _a6.get(el)) && state.acceptCondition(el) && (visibility === Visibilities.Visible || visibility === Visibilities.PartiallyVisible && (visibilityAware === Visibilities.PartiallyVisible || !this._fullyVisible));
            }
          });
        }
        if (found) {
          state.found = true;
          state.foundElement = found;
          state.lastToIgnore = moverElement;
          state.skippedFocusable = true;
          return NodeFilter.FILTER_ACCEPT;
        }
      }
      return void 0;
    }
    _observeState() {
      const element2 = this.getElement();
      if (this._unobserve || !element2 || typeof MutationObserver === "undefined") {
        return;
      }
      const win2 = this._win();
      const allElements = this._allElements = /* @__PURE__ */ new WeakMap();
      const tabsterFocusable = this._tabster.focusable;
      let updateQueue = this._updateQueue = [];
      const observer = new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          const target = mutation.target;
          const removed = mutation.removedNodes;
          const added = mutation.addedNodes;
          if (mutation.type === "attributes") {
            if (mutation.attributeName === "tabindex") {
              updateQueue.push({
                element: target,
                type: _moverUpdateAttr
              });
            }
          } else {
            for (let i2 = 0; i2 < removed.length; i2++) {
              updateQueue.push({
                element: removed[i2],
                type: _moverUpdateRemove
              });
            }
            for (let i2 = 0; i2 < added.length; i2++) {
              updateQueue.push({
                element: added[i2],
                type: _moverUpdateAdd
              });
            }
          }
        }
        requestUpdate();
      });
      const setElement = (element3, remove) => {
        var _a5, _b;
        const current = allElements.get(element3);
        if (current && remove) {
          (_a5 = this._intersectionObserver) === null || _a5 === void 0 ? void 0 : _a5.unobserve(element3);
          allElements.delete(element3);
        }
        if (!current && !remove) {
          allElements.set(element3, this);
          (_b = this._intersectionObserver) === null || _b === void 0 ? void 0 : _b.observe(element3);
        }
      };
      const updateElement = (element3) => {
        const isFocusable = tabsterFocusable.isFocusable(element3);
        const current = allElements.get(element3);
        if (current) {
          if (!isFocusable) {
            setElement(element3, true);
          }
        } else {
          if (isFocusable) {
            setElement(element3);
          }
        }
      };
      const addNewElements = (element3) => {
        const {
          mover
        } = getMoverGroupper(element3);
        if (mover && mover !== this) {
          if (mover.getElement() === element3 && tabsterFocusable.isFocusable(element3)) {
            setElement(element3);
          } else {
            return;
          }
        }
        const walker = createElementTreeWalker(win2.document, element3, (node4) => {
          const {
            mover: mover2,
            groupper
          } = getMoverGroupper(node4);
          if (mover2 && mover2 !== this) {
            return NodeFilter.FILTER_REJECT;
          }
          const groupperFirstFocusable = groupper === null || groupper === void 0 ? void 0 : groupper.getFirst(true);
          if (groupper && groupper.getElement() !== node4 && groupperFirstFocusable && groupperFirstFocusable !== node4) {
            return NodeFilter.FILTER_REJECT;
          }
          if (tabsterFocusable.isFocusable(node4)) {
            setElement(node4);
          }
          return NodeFilter.FILTER_SKIP;
        });
        if (walker) {
          walker.currentNode = element3;
          while (walker.nextNode()) {
          }
        }
      };
      const removeWalk = (element3) => {
        const current = allElements.get(element3);
        if (current) {
          setElement(element3, true);
        }
        for (let el = element3.firstElementChild; el; el = el.nextElementSibling) {
          removeWalk(el);
        }
      };
      const requestUpdate = () => {
        if (!this._updateTimer && updateQueue.length) {
          this._updateTimer = win2.setTimeout(() => {
            delete this._updateTimer;
            for (const {
              element: element3,
              type
            } of updateQueue) {
              switch (type) {
                case _moverUpdateAttr:
                  updateElement(element3);
                  break;
                case _moverUpdateAdd:
                  addNewElements(element3);
                  break;
                case _moverUpdateRemove:
                  removeWalk(element3);
                  break;
              }
            }
            updateQueue = this._updateQueue = [];
          }, 0);
        }
      };
      const getMoverGroupper = (element3) => {
        const ret = {};
        for (let el = element3; el; el = el.parentElement) {
          const toe = getTabsterOnElement(this._tabster, el);
          if (toe) {
            if (toe.groupper && !ret.groupper) {
              ret.groupper = toe.groupper;
            }
            if (toe.mover) {
              ret.mover = toe.mover;
              break;
            }
          }
        }
        return ret;
      };
      updateQueue.push({
        element: element2,
        type: _moverUpdateAdd
      });
      requestUpdate();
      observer.observe(element2, {
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ["tabindex"]
      });
      this._unobserve = () => {
        observer.disconnect();
      };
    }
    getState(element2) {
      const id = getElementUId(this._win, element2);
      if (id in this._visible) {
        const visibility = this._visible[id] || Visibilities.Invisible;
        const isCurrent = this._current ? this._current.get() === element2 : void 0;
        return {
          isCurrent,
          visibility
        };
      }
      return void 0;
    }
  };
  function getDistance(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {
    const xDistance = ax2 < bx1 ? bx1 - ax2 : bx2 < ax1 ? ax1 - bx2 : 0;
    const yDistance = ay2 < by1 ? by1 - ay2 : by2 < ay1 ? ay1 - by2 : 0;
    return xDistance === 0 ? yDistance : yDistance === 0 ? xDistance : Math.sqrt(xDistance * xDistance + yDistance * yDistance);
  }
  var MoverAPI = class {
    constructor(tabster, getWindow2) {
      this._init = () => {
        const win2 = this._win();
        win2.addEventListener("keydown", this._onKeyDown, true);
        this._tabster.focusedElement.subscribe(this._onFocus);
      };
      this._onMoverDispose = (mover) => {
        delete this._movers[mover.id];
      };
      this._onFocus = (e2) => {
        var _a5;
        for (let el = e2; el; el = el.parentElement) {
          const mover = (_a5 = getTabsterOnElement(this._tabster, el)) === null || _a5 === void 0 ? void 0 : _a5.mover;
          if (mover) {
            mover.setCurrent(e2);
            break;
          }
        }
      };
      this._onKeyDown = async (event) => {
        var _a5, _b, _c, _d;
        if (this._ignoredInputTimer) {
          this._win().clearTimeout(this._ignoredInputTimer);
          delete this._ignoredInputTimer;
        }
        (_a5 = this._ignoredInputResolve) === null || _a5 === void 0 ? void 0 : _a5.call(this, false);
        let keyCode = event.keyCode;
        if (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {
          return;
        }
        switch (keyCode) {
          case Keys.Down:
          case Keys.Right:
          case Keys.Up:
          case Keys.Left:
          case Keys.PageDown:
          case Keys.PageUp:
          case Keys.Home:
          case Keys.End:
            break;
          default:
            return;
        }
        const tabster2 = this._tabster;
        const focused = tabster2.focusedElement.getFocusedElement();
        if (!focused || await this._isIgnoredInput(focused, keyCode)) {
          return;
        }
        const ctx = RootAPI.getTabsterContext(tabster2, focused, {
          checkRtl: true
        });
        if (!ctx || !ctx.mover || ctx.isExcludedFromMover || ctx.ignoreKeydown(event)) {
          return;
        }
        const mover = ctx.mover;
        const container2 = mover.getElement();
        if (ctx.isGroupperFirst) {
          const groupper = ctx.groupper;
          if (groupper && !groupper.isActive(true)) {
            for (let el = (_b = groupper.getElement()) === null || _b === void 0 ? void 0 : _b.parentElement; el && el !== container2; el = el.parentElement) {
              if ((_d = (_c = getTabsterOnElement(tabster2, el)) === null || _c === void 0 ? void 0 : _c.groupper) === null || _d === void 0 ? void 0 : _d.isActive(true)) {
                return;
              }
            }
          } else {
            return;
          }
        }
        if (!container2) {
          return;
        }
        const focusable = tabster2.focusable;
        const moverProps = mover.getProps();
        const direction = moverProps.direction || MoverDirections.Both;
        const isBoth = direction === MoverDirections.Both;
        const isVertical = isBoth || direction === MoverDirections.Vertical;
        const isHorizontal = isBoth || direction === MoverDirections.Horizontal;
        const isGridLinear = direction === MoverDirections.GridLinear;
        const isGrid = isGridLinear || direction === MoverDirections.Grid;
        const isCyclic = moverProps.cyclic;
        let next2;
        let focusedElementRect;
        let focusedElementX1 = 0;
        let focusedElementX2 = 0;
        if (isGrid) {
          focusedElementRect = focused.getBoundingClientRect();
          focusedElementX1 = Math.ceil(focusedElementRect.left);
          focusedElementX2 = Math.floor(focusedElementRect.right);
        }
        if (ctx.isRtl) {
          if (keyCode === Keys.Right) {
            keyCode = Keys.Left;
          } else if (keyCode === Keys.Left) {
            keyCode = Keys.Right;
          }
        }
        if (keyCode === Keys.Down && isVertical || keyCode === Keys.Right && (isHorizontal || isGrid)) {
          next2 = focusable.findNext({
            currentElement: focused,
            container: container2,
            useActiveModalizer: true
          });
          if (next2 && isGrid) {
            const nextElementX1 = Math.ceil(next2.getBoundingClientRect().left);
            if (!isGridLinear && focusedElementX2 > nextElementX1) {
              next2 = void 0;
            }
          } else if (!next2 && isCyclic) {
            next2 = focusable.findFirst({
              container: container2,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.Up && isVertical || keyCode === Keys.Left && (isHorizontal || isGrid)) {
          next2 = focusable.findPrev({
            currentElement: focused,
            container: container2,
            useActiveModalizer: true
          });
          if (next2 && isGrid) {
            const nextElementX2 = Math.floor(next2.getBoundingClientRect().right);
            if (!isGridLinear && nextElementX2 > focusedElementX1) {
              next2 = void 0;
            }
          } else if (!next2 && isCyclic) {
            next2 = focusable.findLast({
              container: container2,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.Home) {
          if (isGrid) {
            focusable.findElement({
              container: container2,
              currentElement: focused,
              ignoreUncontrolled: true,
              useActiveModalizer: true,
              isBackward: true,
              acceptCondition: (el) => {
                var _a6;
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil((_a6 = el.getBoundingClientRect().left) !== null && _a6 !== void 0 ? _a6 : 0);
                if (el !== focused && focusedElementX1 <= nextElementX1) {
                  return true;
                }
                next2 = el;
                return false;
              }
            });
          } else {
            next2 = focusable.findFirst({
              container: container2,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.End) {
          if (isGrid) {
            focusable.findElement({
              container: container2,
              currentElement: focused,
              ignoreUncontrolled: true,
              useActiveModalizer: true,
              acceptCondition: (el) => {
                var _a6;
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil((_a6 = el.getBoundingClientRect().left) !== null && _a6 !== void 0 ? _a6 : 0);
                if (el !== focused && focusedElementX1 >= nextElementX1) {
                  return true;
                }
                next2 = el;
                return false;
              }
            });
          } else {
            next2 = focusable.findLast({
              container: container2,
              ignoreUncontrolled: true,
              useActiveModalizer: true
            });
          }
        } else if (keyCode === Keys.PageUp) {
          focusable.findElement({
            currentElement: focused,
            container: container2,
            useActiveModalizer: true,
            isBackward: true,
            acceptCondition: (el) => {
              if (!focusable.isFocusable(el)) {
                return false;
              }
              if (isElementVerticallyVisibleInContainer(this._win, el, mover.visibilityTolerance)) {
                next2 = el;
                return false;
              }
              return true;
            }
          });
          if (isGrid && next2) {
            const firstColumnX1 = Math.ceil(next2.getBoundingClientRect().left);
            focusable.findElement({
              currentElement: next2,
              container: container2,
              useActiveModalizer: true,
              acceptCondition: (el) => {
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil(el.getBoundingClientRect().left);
                if (focusedElementX1 < nextElementX1 || firstColumnX1 >= nextElementX1) {
                  return true;
                }
                next2 = el;
                return false;
              }
            });
          }
          if (next2) {
            scrollIntoView(this._win, next2, false);
          }
        } else if (keyCode === Keys.PageDown) {
          focusable.findElement({
            currentElement: focused,
            container: container2,
            useActiveModalizer: true,
            acceptCondition: (el) => {
              if (!focusable.isFocusable(el)) {
                return false;
              }
              if (isElementVerticallyVisibleInContainer(this._win, el, mover.visibilityTolerance)) {
                next2 = el;
                return false;
              }
              return true;
            }
          });
          if (isGrid && next2) {
            const lastColumnX1 = Math.ceil(next2.getBoundingClientRect().left);
            focusable.findElement({
              currentElement: next2,
              container: container2,
              useActiveModalizer: true,
              isBackward: true,
              acceptCondition: (el) => {
                if (!focusable.isFocusable(el)) {
                  return false;
                }
                const nextElementX1 = Math.ceil(el.getBoundingClientRect().left);
                if (focusedElementX1 > nextElementX1 || lastColumnX1 <= nextElementX1) {
                  return true;
                }
                next2 = el;
                return false;
              }
            });
          }
          if (next2) {
            scrollIntoView(this._win, next2, true);
          }
        } else if (isGrid) {
          const isBackward = keyCode === Keys.Up;
          const ax1 = focusedElementX1;
          const ay1 = Math.ceil(focusedElementRect.top);
          const ax2 = focusedElementX2;
          const ay2 = Math.floor(focusedElementRect.bottom);
          let targetElement;
          let lastDistance;
          let lastIntersection = 0;
          focusable.findAll({
            container: container2,
            currentElement: focused,
            isBackward,
            onElement: (el) => {
              const rect = el.getBoundingClientRect();
              const bx1 = Math.ceil(rect.left);
              const by1 = Math.ceil(rect.top);
              const bx2 = Math.floor(rect.right);
              const by2 = Math.floor(rect.bottom);
              if (isBackward && ay1 < by2 || !isBackward && ay2 > by1) {
                return true;
              }
              const xIntersectionWidth = Math.ceil(Math.min(ax2, bx2)) - Math.floor(Math.max(ax1, bx1));
              const minWidth = Math.ceil(Math.min(ax2 - ax1, bx2 - bx1));
              if (xIntersectionWidth > 0 && minWidth >= xIntersectionWidth) {
                const intersection = xIntersectionWidth / minWidth;
                if (intersection > lastIntersection) {
                  targetElement = el;
                  lastIntersection = intersection;
                }
              } else if (lastIntersection === 0) {
                const distance = getDistance(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2);
                if (lastDistance === void 0 || distance < lastDistance) {
                  lastDistance = distance;
                  targetElement = el;
                }
              } else if (lastIntersection > 0) {
                return false;
              }
              return true;
            }
          });
          next2 = targetElement;
        }
        if (next2) {
          event.preventDefault();
          event.stopImmediatePropagation();
          nativeFocus(next2);
        }
      };
      this._tabster = tabster;
      this._win = getWindow2;
      this._movers = {};
      tabster.queueInit(this._init);
    }
    dispose() {
      var _a5;
      const win2 = this._win();
      this._tabster.focusedElement.unsubscribe(this._onFocus);
      (_a5 = this._ignoredInputResolve) === null || _a5 === void 0 ? void 0 : _a5.call(this, false);
      if (this._ignoredInputTimer) {
        win2.clearTimeout(this._ignoredInputTimer);
        delete this._ignoredInputTimer;
      }
      win2.removeEventListener("keydown", this._onKeyDown, true);
      Object.keys(this._movers).forEach((moverId) => {
        if (this._movers[moverId]) {
          this._movers[moverId].dispose();
          delete this._movers[moverId];
        }
      });
    }
    createMover(element2, props, sys) {
      if (true)
        ;
      const newMover = new Mover(this._tabster, element2, this._onMoverDispose, props, sys);
      this._movers[newMover.id] = newMover;
      return newMover;
    }
    async _isIgnoredInput(element2, keyCode) {
      var _a5;
      if (element2.getAttribute("aria-expanded") === "true") {
        return true;
      }
      if (matchesSelector(element2, _inputSelector)) {
        let selectionStart = 0;
        let selectionEnd = 0;
        let textLength = 0;
        let asyncRet;
        if (element2.tagName === "INPUT" || element2.tagName === "TEXTAREA") {
          const type = element2.type;
          const value = element2.value;
          textLength = (value || "").length;
          if (type === "email" || type === "number") {
            if (textLength) {
              const selection = (_a5 = element2.ownerDocument.defaultView) === null || _a5 === void 0 ? void 0 : _a5.getSelection();
              if (selection) {
                const initialLength = selection.toString().length;
                const isBackward = keyCode === Keys.Left || keyCode === Keys.Up;
                selection.modify("extend", isBackward ? "backward" : "forward", "character");
                if (initialLength !== selection.toString().length) {
                  selection.modify("extend", isBackward ? "forward" : "backward", "character");
                  return true;
                } else {
                  textLength = 0;
                }
              }
            }
          } else {
            const selStart = element2.selectionStart;
            if (selStart === null) {
              return type === "hidden";
            }
            selectionStart = selStart || 0;
            selectionEnd = element2.selectionEnd || 0;
          }
        } else if (element2.contentEditable === "true") {
          asyncRet = new (getPromise(this._win))((resolve2) => {
            this._ignoredInputResolve = (value) => {
              delete this._ignoredInputResolve;
              resolve2(value);
            };
            const win2 = this._win();
            if (this._ignoredInputTimer) {
              win2.clearTimeout(this._ignoredInputTimer);
            }
            const {
              anchorNode: prevAnchorNode,
              focusNode: prevFocusNode,
              anchorOffset: prevAnchorOffset,
              focusOffset: prevFocusOffset
            } = win2.getSelection() || {};
            this._ignoredInputTimer = win2.setTimeout(() => {
              var _a6, _b, _c;
              delete this._ignoredInputTimer;
              const {
                anchorNode,
                focusNode,
                anchorOffset,
                focusOffset
              } = win2.getSelection() || {};
              if (anchorNode !== prevAnchorNode || focusNode !== prevFocusNode || anchorOffset !== prevAnchorOffset || focusOffset !== prevFocusOffset) {
                (_a6 = this._ignoredInputResolve) === null || _a6 === void 0 ? void 0 : _a6.call(this, false);
                return;
              }
              selectionStart = anchorOffset || 0;
              selectionEnd = focusOffset || 0;
              textLength = ((_b = element2.textContent) === null || _b === void 0 ? void 0 : _b.length) || 0;
              if (anchorNode && focusNode) {
                if (element2.contains(anchorNode) && element2.contains(focusNode)) {
                  if (anchorNode !== element2) {
                    let anchorFound = false;
                    const addOffsets = (node4) => {
                      if (node4 === anchorNode) {
                        anchorFound = true;
                      } else if (node4 === focusNode) {
                        return true;
                      }
                      const nodeText = node4.textContent;
                      if (nodeText && !node4.firstChild) {
                        const len = nodeText.length;
                        if (anchorFound) {
                          if (focusNode !== anchorNode) {
                            selectionEnd += len;
                          }
                        } else {
                          selectionStart += len;
                          selectionEnd += len;
                        }
                      }
                      let stop = false;
                      for (let e2 = node4.firstChild; e2 && !stop; e2 = e2.nextSibling) {
                        stop = addOffsets(e2);
                      }
                      return stop;
                    };
                    addOffsets(element2);
                  }
                }
              }
              (_c = this._ignoredInputResolve) === null || _c === void 0 ? void 0 : _c.call(this, true);
            }, 0);
          });
        }
        if (asyncRet && !await asyncRet) {
          return true;
        }
        if (selectionStart !== selectionEnd) {
          return true;
        }
        if (selectionStart > 0 && (keyCode === Keys.Left || keyCode === Keys.Up || keyCode === Keys.Home)) {
          return true;
        }
        if (selectionStart < textLength && (keyCode === Keys.Right || keyCode === Keys.Down || keyCode === Keys.End)) {
          return true;
        }
      }
      return false;
    }
  };
  function observeMutations(doc, tabster, updateTabsterByAttribute2, syncState) {
    if (typeof MutationObserver === "undefined") {
      return () => {
      };
    }
    const getWindow2 = tabster.getWindow;
    let elementByUId;
    const onMutation = (mutations) => {
      var _a5, _b, _c, _d, _e;
      for (const mutation of mutations) {
        const target = mutation.target;
        const removed = mutation.removedNodes;
        const added = mutation.addedNodes;
        if (mutation.type === "attributes") {
          if (mutation.attributeName === TabsterAttributeName) {
            updateTabsterByAttribute2(tabster, target);
          }
        } else {
          for (let i2 = 0; i2 < removed.length; i2++) {
            updateTabsterElements(removed[i2], true);
            (_b = (_a5 = tabster._dummyObserver).domChanged) === null || _b === void 0 ? void 0 : _b.call(_a5, target);
          }
          for (let i2 = 0; i2 < added.length; i2++) {
            updateTabsterElements(added[i2]);
            (_d = (_c = tabster._dummyObserver).domChanged) === null || _d === void 0 ? void 0 : _d.call(_c, target);
          }
        }
      }
      (_e = tabster.modalizer) === null || _e === void 0 ? void 0 : _e.hiddenUpdate();
    };
    function updateTabsterElements(node4, removed) {
      if (!elementByUId) {
        elementByUId = getInstanceContext(getWindow2).elementByUId;
      }
      processNode(node4, removed);
      const walker = createElementTreeWalker(doc, node4, (element2) => {
        return processNode(element2, removed);
      });
      if (walker) {
        while (walker.nextNode()) {
        }
      }
    }
    function processNode(element2, removed) {
      var _a5;
      if (!element2.getAttribute) {
        return NodeFilter.FILTER_SKIP;
      }
      const uid = element2.__tabsterElementUID;
      if (uid && elementByUId) {
        if (removed) {
          delete elementByUId[uid];
        } else {
          (_a5 = elementByUId[uid]) !== null && _a5 !== void 0 ? _a5 : elementByUId[uid] = new WeakHTMLElement(getWindow2, element2);
        }
      }
      if (getTabsterOnElement(tabster, element2) || element2.hasAttribute(TabsterAttributeName)) {
        updateTabsterByAttribute2(tabster, element2, removed);
      }
      return NodeFilter.FILTER_SKIP;
    }
    const observer = new MutationObserver(onMutation);
    if (syncState) {
      updateTabsterElements(getWindow2().document.body);
    }
    observer.observe(doc, {
      childList: true,
      subtree: true,
      attributes: true,
      attributeFilter: [TabsterAttributeName]
    });
    return () => {
      observer.disconnect();
    };
  }
  var UncontrolledAPI = class {
    constructor() {
    }
  };
  var EVENT_NAME = "restorer:restorefocus";
  var HISOTRY_DEPTH = 10;
  var Restorer = class extends TabsterPart {
    constructor(tabster, element2, props) {
      var _a5;
      super(tabster, element2, props);
      this._hasFocus = false;
      this._onFocusOut = (e2) => {
        var _a6;
        const element3 = (_a6 = this._element) === null || _a6 === void 0 ? void 0 : _a6.get();
        if (element3 && e2.relatedTarget === null) {
          element3.dispatchEvent(new Event(EVENT_NAME, {
            bubbles: true
          }));
        }
        if (element3 && !element3.contains(e2.relatedTarget)) {
          this._hasFocus = false;
        }
      };
      this._onFocusIn = () => {
        this._hasFocus = true;
      };
      if (this._props.type === RestorerTypes.Source) {
        const element3 = (_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get();
        element3 === null || element3 === void 0 ? void 0 : element3.addEventListener("focusout", this._onFocusOut);
        element3 === null || element3 === void 0 ? void 0 : element3.addEventListener("focusin", this._onFocusIn);
      }
    }
    dispose() {
      var _a5, _b;
      if (this._props.type === RestorerTypes.Source) {
        const element2 = (_a5 = this._element) === null || _a5 === void 0 ? void 0 : _a5.get();
        element2 === null || element2 === void 0 ? void 0 : element2.removeEventListener("focusout", this._onFocusOut);
        element2 === null || element2 === void 0 ? void 0 : element2.removeEventListener("focusin", this._onFocusIn);
        if (this._hasFocus) {
          const doc = this._tabster.getWindow().document;
          (_b = doc.body) === null || _b === void 0 ? void 0 : _b.dispatchEvent(new Event(EVENT_NAME, {
            bubbles: true
          }));
        }
      }
    }
  };
  var RestorerAPI = class {
    constructor(tabster) {
      this._history = [];
      this._restoreFocusTimeout = 0;
      this._onRestoreFocus = (e2) => {
        const win2 = this._getWindow();
        if (this._restoreFocusTimeout) {
          win2.clearTimeout(this._restoreFocusTimeout);
        }
        this._restoreFocusTimeout = win2.setTimeout(() => this._restoreFocus(e2.target));
      };
      this._onFocusIn = (element2) => {
        var _a5;
        if (!element2) {
          return;
        }
        const tabsterAttribute = getTabsterOnElement(this._tabster, element2);
        if (((_a5 = tabsterAttribute === null || tabsterAttribute === void 0 ? void 0 : tabsterAttribute.restorer) === null || _a5 === void 0 ? void 0 : _a5.getProps().type) !== RestorerTypes.Target) {
          return;
        }
        this._addToHistory(element2);
      };
      this._restoreFocus = (source) => {
        var _a5, _b, _c;
        const doc = this._getWindow().document;
        if (doc.activeElement !== doc.body) {
          return;
        }
        if (
          // clicking on any empty space focuses body - this is can be a false positive
          !this._keyboardNavState.isNavigatingWithKeyboard() && // Source no longer exists on DOM - always restore focus
          doc.body.contains(source)
        ) {
          return;
        }
        let weakRef = this._history.pop();
        while (weakRef && !doc.body.contains((_b = (_a5 = weakRef.deref()) === null || _a5 === void 0 ? void 0 : _a5.parentElement) !== null && _b !== void 0 ? _b : null)) {
          weakRef = this._history.pop();
        }
        (_c = weakRef === null || weakRef === void 0 ? void 0 : weakRef.deref()) === null || _c === void 0 ? void 0 : _c.focus();
      };
      this._tabster = tabster;
      this._getWindow = tabster.getWindow;
      this._getWindow().addEventListener(EVENT_NAME, this._onRestoreFocus);
      this._keyboardNavState = tabster.keyboardNavigation;
      this._focusedElementState = tabster.focusedElement;
      this._focusedElementState.subscribe(this._onFocusIn);
    }
    dispose() {
      const win2 = this._getWindow();
      this._focusedElementState.unsubscribe(this._onFocusIn);
      win2.removeEventListener(EVENT_NAME, this._onRestoreFocus);
      if (this._restoreFocusTimeout) {
        win2.clearTimeout(this._restoreFocusTimeout);
      }
    }
    _addToHistory(element2) {
      var _a5;
      if (((_a5 = this._history[this._history.length - 1]) === null || _a5 === void 0 ? void 0 : _a5.deref()) === element2) {
        return;
      }
      if (this._history.length > HISOTRY_DEPTH) {
        this._history.shift();
      }
      this._history.push(new WeakRef(element2));
    }
    createRestorer(element2, props) {
      const restorer = new Restorer(this._tabster, element2, props);
      if (props.type === RestorerTypes.Target && element2.ownerDocument.activeElement === element2) {
        this._addToHistory(element2);
      }
      return restorer;
    }
  };
  var Tabster = class {
    constructor(tabster) {
      this.keyboardNavigation = tabster.keyboardNavigation;
      this.focusedElement = tabster.focusedElement;
      this.focusable = tabster.focusable;
      this.root = tabster.root;
      this.uncontrolled = tabster.uncontrolled;
      this.core = tabster;
    }
  };
  var TabsterCore = class {
    constructor(win2, props) {
      var _a5;
      this._forgetMemorizedElements = [];
      this._wrappers = /* @__PURE__ */ new Set();
      this._initQueue = [];
      this._version = "4.7.3";
      this._noop = false;
      this.getWindow = () => {
        if (!this._win) {
          throw new Error("Using disposed Tabster.");
        }
        return this._win;
      };
      this._storage = createWeakMap(win2);
      this._win = win2;
      const getWindow2 = this.getWindow;
      this.keyboardNavigation = new KeyboardNavigationState(getWindow2);
      this.focusedElement = new FocusedElementState(this, getWindow2);
      this.focusable = new FocusableAPI(this);
      this.root = new RootAPI(this, props === null || props === void 0 ? void 0 : props.autoRoot);
      this.uncontrolled = new UncontrolledAPI();
      this.controlTab = (_a5 = props === null || props === void 0 ? void 0 : props.controlTab) !== null && _a5 !== void 0 ? _a5 : true;
      this.rootDummyInputs = !!(props === null || props === void 0 ? void 0 : props.rootDummyInputs);
      this._dummyObserver = new DummyInputObserver(getWindow2);
      this.internal = {
        stopObserver: () => {
          if (this._unobserve) {
            this._unobserve();
            delete this._unobserve;
          }
        },
        resumeObserver: (syncState) => {
          if (!this._unobserve) {
            const doc = getWindow2().document;
            this._unobserve = observeMutations(doc, this, updateTabsterByAttribute, syncState);
          }
        }
      };
      startFakeWeakRefsCleanup(getWindow2);
      this.queueInit(() => {
        this.internal.resumeObserver(true);
      });
    }
    createTabster(noRefCount) {
      const wrapper2 = new Tabster(this);
      if (!noRefCount) {
        this._wrappers.add(wrapper2);
      }
      return wrapper2;
    }
    disposeTabster(wrapper2, allInstances) {
      if (allInstances) {
        this._wrappers.clear();
      } else {
        this._wrappers.delete(wrapper2);
      }
      if (this._wrappers.size === 0) {
        this.dispose();
      }
    }
    dispose() {
      var _a5, _b, _c, _d, _e, _f, _g, _h;
      this.internal.stopObserver();
      const win2 = this._win;
      win2 === null || win2 === void 0 ? void 0 : win2.clearTimeout(this._initTimer);
      delete this._initTimer;
      this._initQueue = [];
      this._forgetMemorizedElements = [];
      if (win2 && this._forgetMemorizedTimer) {
        win2.clearTimeout(this._forgetMemorizedTimer);
        delete this._forgetMemorizedTimer;
      }
      (_a5 = this.outline) === null || _a5 === void 0 ? void 0 : _a5.dispose();
      (_b = this.crossOrigin) === null || _b === void 0 ? void 0 : _b.dispose();
      (_c = this.deloser) === null || _c === void 0 ? void 0 : _c.dispose();
      (_d = this.groupper) === null || _d === void 0 ? void 0 : _d.dispose();
      (_e = this.mover) === null || _e === void 0 ? void 0 : _e.dispose();
      (_f = this.modalizer) === null || _f === void 0 ? void 0 : _f.dispose();
      (_g = this.observedElement) === null || _g === void 0 ? void 0 : _g.dispose();
      (_h = this.restorer) === null || _h === void 0 ? void 0 : _h.dispose();
      this.keyboardNavigation.dispose();
      this.focusable.dispose();
      this.focusedElement.dispose();
      this.root.dispose();
      this._dummyObserver.dispose();
      stopFakeWeakRefsCleanupAndClearStorage(this.getWindow);
      clearElementCache(this.getWindow);
      this._storage = /* @__PURE__ */ new WeakMap();
      this._wrappers.clear();
      if (win2) {
        disposeInstanceContext(win2);
        delete win2.__tabsterInstance;
        delete this._win;
      }
    }
    storageEntry(element2, addremove) {
      const storage = this._storage;
      let entry = storage.get(element2);
      if (entry) {
        if (addremove === false && Object.keys(entry).length === 0) {
          storage.delete(element2);
        }
      } else if (addremove === true) {
        entry = {};
        storage.set(element2, entry);
      }
      return entry;
    }
    forceCleanup() {
      if (!this._win) {
        return;
      }
      this._forgetMemorizedElements.push(this._win.document.body);
      if (this._forgetMemorizedTimer) {
        return;
      }
      this._forgetMemorizedTimer = this._win.setTimeout(() => {
        delete this._forgetMemorizedTimer;
        for (let el = this._forgetMemorizedElements.shift(); el; el = this._forgetMemorizedElements.shift()) {
          clearElementCache(this.getWindow, el);
          FocusedElementState.forgetMemorized(this.focusedElement, el);
        }
      }, 0);
      cleanupFakeWeakRefs(this.getWindow, true);
    }
    queueInit(callback) {
      var _a5;
      if (!this._win) {
        return;
      }
      this._initQueue.push(callback);
      if (!this._initTimer) {
        this._initTimer = (_a5 = this._win) === null || _a5 === void 0 ? void 0 : _a5.setTimeout(() => {
          delete this._initTimer;
          this.drainInitQueue();
        }, 0);
      }
    }
    drainInitQueue() {
      if (!this._win) {
        return;
      }
      const queue = this._initQueue;
      this._initQueue = [];
      queue.forEach((callback) => callback());
    }
  };
  function createTabster(win2, props) {
    let tabster = getCurrentTabster(win2);
    if (tabster) {
      return tabster.createTabster();
    }
    tabster = new TabsterCore(win2, props);
    win2.__tabsterInstance = tabster;
    return tabster.createTabster();
  }
  function getGroupper(tabster) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.groupper) {
      tabsterCore.groupper = new GroupperAPI(tabsterCore, tabsterCore.getWindow);
    }
    return tabsterCore.groupper;
  }
  function getMover(tabster) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.mover) {
      tabsterCore.mover = new MoverAPI(tabsterCore, tabsterCore.getWindow);
    }
    return tabsterCore.mover;
  }
  function getModalizer(tabster, alwaysAccessibleSelector, accessibleCheck) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.modalizer) {
      tabsterCore.modalizer = new ModalizerAPI(tabsterCore, alwaysAccessibleSelector, accessibleCheck);
    }
    return tabsterCore.modalizer;
  }
  function getRestorer(tabster) {
    const tabsterCore = tabster.core;
    if (!tabsterCore.restorer) {
      tabsterCore.restorer = new RestorerAPI(tabsterCore);
    }
    return tabsterCore.restorer;
  }
  function disposeTabster(tabster, allInstances) {
    tabster.core.disposeTabster(tabster, allInstances);
  }
  function getCurrentTabster(win2) {
    return win2.__tabsterInstance;
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useTabster.js
  var React29 = __toESM(require_react());
  var useTabster = () => {
    var _targetDocument;
    const { targetDocument } = useFluent();
    const defaultView = ((_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.defaultView) || void 0;
    const tabster = React29.useMemo(() => {
      if (!defaultView) {
        return null;
      }
      return createTabster(defaultView, {
        autoRoot: {},
        controlTab: false
      });
    }, [
      defaultView
    ]);
    useIsomorphicLayoutEffect(() => {
      return () => {
        if (tabster) {
          disposeTabster(tabster);
        }
      };
    }, [
      tabster
    ]);
    return tabster;
  };

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useTabsterAttributes.js
  var useTabsterAttributes = (props) => {
    useTabster();
    return getTabsterAttribute(props);
  };

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useArrowNavigationGroup.js
  var useArrowNavigationGroup = (options = {}) => {
    const {
      circular,
      axis,
      memorizeCurrent,
      tabbable,
      ignoreDefaultKeydown,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_hasDefault
    } = options;
    const tabster = useTabster();
    if (tabster) {
      getMover(tabster);
    }
    return useTabsterAttributes({
      mover: {
        cyclic: !!circular,
        direction: axisToMoverDirection(axis !== null && axis !== void 0 ? axis : "vertical"),
        memorizeCurrent,
        tabbable,
        hasDefault: unstable_hasDefault
      },
      ...ignoreDefaultKeydown && {
        focusable: {
          ignoreKeydown: ignoreDefaultKeydown
        }
      }
    });
  };
  function axisToMoverDirection(axis) {
    switch (axis) {
      case "horizontal":
        return Types.MoverDirections.Horizontal;
      case "grid":
        return Types.MoverDirections.Grid;
      case "grid-linear":
        return Types.MoverDirections.GridLinear;
      case "both":
        return Types.MoverDirections.Both;
      case "vertical":
      default:
        return Types.MoverDirections.Vertical;
    }
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusableGroup.js
  var useFocusableGroup = (options) => {
    var _options, _options1;
    const tabster = useTabster();
    if (tabster) {
      getGroupper(tabster);
    }
    return useTabsterAttributes({
      groupper: {
        tabbability: getTabbability((_options = options) === null || _options === void 0 ? void 0 : _options.tabBehavior)
      },
      focusable: {
        ignoreKeydown: (_options1 = options) === null || _options1 === void 0 ? void 0 : _options1.ignoreDefaultKeydown
      }
    });
  };
  var getTabbability = (tabBehavior) => {
    switch (tabBehavior) {
      case "unlimited":
        return Types.GroupperTabbabilities.Unlimited;
      case "limited":
        return Types.GroupperTabbabilities.Limited;
      case "limited-trap-focus":
        return Types.GroupperTabbabilities.LimitedTrapFocus;
      default:
        return void 0;
    }
  };

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusFinders.js
  var React30 = __toESM(require_react());
  var useFocusFinders = () => {
    const tabster = useTabster();
    const { targetDocument } = useFluent();
    const findAllFocusable = React30.useCallback((container2, acceptCondition) => {
      var _tabster;
      return ((_tabster = tabster) === null || _tabster === void 0 ? void 0 : _tabster.focusable.findAll({
        container: container2,
        acceptCondition
      })) || [];
    }, [
      tabster
    ]);
    const findFirstFocusable = React30.useCallback((container2) => {
      var _tabster;
      return (_tabster = tabster) === null || _tabster === void 0 ? void 0 : _tabster.focusable.findFirst({
        container: container2
      });
    }, [
      tabster
    ]);
    const findLastFocusable = React30.useCallback((container2) => {
      var _tabster;
      return (_tabster = tabster) === null || _tabster === void 0 ? void 0 : _tabster.focusable.findLast({
        container: container2
      });
    }, [
      tabster
    ]);
    const findNextFocusable = React30.useCallback((currentElement, options = {}) => {
      if (!tabster || !targetDocument) {
        return null;
      }
      const { container: container2 = targetDocument.body } = options;
      return tabster.focusable.findNext({
        currentElement,
        container: container2
      });
    }, [
      tabster,
      targetDocument
    ]);
    const findPrevFocusable = React30.useCallback((currentElement, options = {}) => {
      if (!tabster || !targetDocument) {
        return null;
      }
      const { container: container2 = targetDocument.body } = options;
      return tabster.focusable.findPrev({
        currentElement,
        container: container2
      });
    }, [
      tabster,
      targetDocument
    ]);
    return {
      findAllFocusable,
      findFirstFocusable,
      findLastFocusable,
      findNextFocusable,
      findPrevFocusable
    };
  };

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusVisible.js
  var React31 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tabster/lib/focus/constants.js
  var KEYBOARD_NAV_ATTRIBUTE = "data-keyboard-nav";
  var KEYBOARD_NAV_SELECTOR = `:global([${KEYBOARD_NAV_ATTRIBUTE}])`;
  var FOCUS_VISIBLE_ATTR = "data-fui-focus-visible";
  var FOCUS_WITHIN_ATTR = "data-fui-focus-within";

  // ../node_modules/@fluentui/react-tabster/lib/focus/focusVisiblePolyfill.js
  function applyFocusVisiblePolyfill(scope, targetWindow) {
    if (alreadyInScope(scope)) {
      return () => void 0;
    }
    const state = {
      current: void 0
    };
    const keyborg = createKeyborg(targetWindow);
    keyborg.subscribe((isNavigatingWithKeyboard) => {
      if (!isNavigatingWithKeyboard && state.current) {
        removeFocusVisibleClass(state.current);
        state.current = void 0;
      }
    });
    const keyborgListener = (e2) => {
      if (state.current) {
        removeFocusVisibleClass(state.current);
        state.current = void 0;
      }
      if (keyborg.isNavigatingWithKeyboard() && isHTMLElement(e2.target) && e2.target) {
        state.current = e2.target;
        applyFocusVisibleClass(state.current);
      }
    };
    const blurListener = (e2) => {
      if (!e2.relatedTarget || isHTMLElement(e2.relatedTarget) && !scope.contains(e2.relatedTarget)) {
        if (state.current) {
          removeFocusVisibleClass(state.current);
          state.current = void 0;
        }
      }
    };
    scope.addEventListener(KEYBORG_FOCUSIN, keyborgListener);
    scope.addEventListener("focusout", blurListener);
    scope.focusVisible = true;
    return () => {
      scope.removeEventListener(KEYBORG_FOCUSIN, keyborgListener);
      scope.removeEventListener("focusout", blurListener);
      delete scope.focusVisible;
      disposeKeyborg(keyborg);
    };
  }
  function applyFocusVisibleClass(el) {
    el.setAttribute(FOCUS_VISIBLE_ATTR, "");
  }
  function removeFocusVisibleClass(el) {
    el.removeAttribute(FOCUS_VISIBLE_ATTR);
  }
  function alreadyInScope(el) {
    var _el;
    if (!el) {
      return false;
    }
    if (el.focusVisible) {
      return true;
    }
    return alreadyInScope((_el = el) === null || _el === void 0 ? void 0 : _el.parentElement);
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusVisible.js
  function useFocusVisible(options = {}) {
    const contextValue = useFluent();
    const scopeRef = React31.useRef(null);
    var _options_targetDocument;
    const targetDocument = (_options_targetDocument = options.targetDocument) !== null && _options_targetDocument !== void 0 ? _options_targetDocument : contextValue.targetDocument;
    React31.useEffect(() => {
      var _targetDocument;
      if (((_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.defaultView) && scopeRef.current) {
        return applyFocusVisiblePolyfill(scopeRef.current, targetDocument.defaultView);
      }
    }, [
      scopeRef,
      targetDocument
    ]);
    return scopeRef;
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusWithin.js
  var React32 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tabster/lib/focus/focusWithinPolyfill.js
  function applyFocusWithinPolyfill(element2, win2) {
    const keyborg = createKeyborg(win2);
    keyborg.subscribe((isNavigatingWithKeyboard) => {
      if (!isNavigatingWithKeyboard) {
        removeFocusWithinClass(element2);
      }
    });
    const keyborgListener = (e2) => {
      if (keyborg.isNavigatingWithKeyboard() && isHTMLElement2(e2.target)) {
        applyFocusWithinClass(element2);
      }
    };
    const blurListener = (e2) => {
      if (!e2.relatedTarget || isHTMLElement2(e2.relatedTarget) && !element2.contains(e2.relatedTarget)) {
        removeFocusWithinClass(element2);
      }
    };
    element2.addEventListener(KEYBORG_FOCUSIN, keyborgListener);
    element2.addEventListener("focusout", blurListener);
    return () => {
      element2.removeEventListener(KEYBORG_FOCUSIN, keyborgListener);
      element2.removeEventListener("focusout", blurListener);
      disposeKeyborg(keyborg);
    };
  }
  function applyFocusWithinClass(el) {
    el.setAttribute(FOCUS_WITHIN_ATTR, "");
  }
  function removeFocusWithinClass(el) {
    el.removeAttribute(FOCUS_WITHIN_ATTR);
  }
  function isHTMLElement2(target) {
    if (!target) {
      return false;
    }
    return Boolean(target && typeof target === "object" && "classList" in target && "contains" in target);
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useFocusWithin.js
  function useFocusWithin() {
    const { targetDocument } = useFluent();
    const elementRef = React32.useRef(null);
    React32.useEffect(() => {
      var _targetDocument;
      if (((_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.defaultView) && elementRef.current) {
        return applyFocusWithinPolyfill(elementRef.current, targetDocument.defaultView);
      }
    }, [
      elementRef,
      targetDocument
    ]);
    return elementRef;
  }

  // ../node_modules/@fluentui/react-tabster/lib/hooks/useModalAttributes.js
  var useModalAttributes = (options = {}) => {
    const { trapFocus, alwaysFocusable, legacyTrapFocus } = options;
    const tabster = useTabster();
    if (tabster) {
      getModalizer(tabster);
      getRestorer(tabster);
    }
    const id = useId2("modal-", options.id);
    const modalAttributes = useTabsterAttributes({
      restorer: {
        type: Types.RestorerTypes.Source
      },
      ...trapFocus && {
        modalizer: {
          id,
          isOthersAccessible: !trapFocus,
          isAlwaysAccessible: alwaysFocusable,
          isTrapped: legacyTrapFocus && trapFocus
        }
      }
    });
    const triggerAttributes = useTabsterAttributes({
      restorer: {
        type: Types.RestorerTypes.Target
      }
    });
    return {
      modalAttributes,
      triggerAttributes
    };
  };

  // ../node_modules/@fluentui/tokens/lib/global/colors.js
  var grey = {
    "2": "#050505",
    "4": "#0a0a0a",
    "6": "#0f0f0f",
    "8": "#141414",
    "10": "#1a1a1a",
    "12": "#1f1f1f",
    "14": "#242424",
    "16": "#292929",
    "18": "#2e2e2e",
    "20": "#333333",
    "22": "#383838",
    "24": "#3d3d3d",
    "26": "#424242",
    "28": "#474747",
    "30": "#4d4d4d",
    "32": "#525252",
    "34": "#575757",
    "36": "#5c5c5c",
    "38": "#616161",
    "40": "#666666",
    "42": "#6b6b6b",
    "44": "#707070",
    "46": "#757575",
    "48": "#7a7a7a",
    "50": "#808080",
    "52": "#858585",
    "54": "#8a8a8a",
    "56": "#8f8f8f",
    "58": "#949494",
    "60": "#999999",
    "62": "#9e9e9e",
    "64": "#a3a3a3",
    "66": "#a8a8a8",
    "68": "#adadad",
    "70": "#b3b3b3",
    "72": "#b8b8b8",
    "74": "#bdbdbd",
    "76": "#c2c2c2",
    "78": "#c7c7c7",
    "80": "#cccccc",
    "82": "#d1d1d1",
    "84": "#d6d6d6",
    "86": "#dbdbdb",
    "88": "#e0e0e0",
    "90": "#e6e6e6",
    "92": "#ebebeb",
    "94": "#f0f0f0",
    "96": "#f5f5f5",
    "98": "#fafafa"
  };
  var whiteAlpha = {
    "5": "rgba(255, 255, 255, 0.05)",
    "10": "rgba(255, 255, 255, 0.1)",
    "20": "rgba(255, 255, 255, 0.2)",
    "30": "rgba(255, 255, 255, 0.3)",
    "40": "rgba(255, 255, 255, 0.4)",
    "50": "rgba(255, 255, 255, 0.5)",
    "60": "rgba(255, 255, 255, 0.6)",
    "70": "rgba(255, 255, 255, 0.7)",
    "80": "rgba(255, 255, 255, 0.8)",
    "90": "rgba(255, 255, 255, 0.9)"
  };
  var blackAlpha = {
    "5": "rgba(0, 0, 0, 0.05)",
    "10": "rgba(0, 0, 0, 0.1)",
    "20": "rgba(0, 0, 0, 0.2)",
    "30": "rgba(0, 0, 0, 0.3)",
    "40": "rgba(0, 0, 0, 0.4)",
    "50": "rgba(0, 0, 0, 0.5)",
    "60": "rgba(0, 0, 0, 0.6)",
    "70": "rgba(0, 0, 0, 0.7)",
    "80": "rgba(0, 0, 0, 0.8)",
    "90": "rgba(0, 0, 0, 0.9)"
  };
  var grey10Alpha = {
    "5": "rgba(26, 26, 26, 0.05)",
    "10": "rgba(26, 26, 26, 0.1)",
    "20": "rgba(26, 26, 26, 0.2)",
    "30": "rgba(26, 26, 26, 0.3)",
    "40": "rgba(26, 26, 26, 0.4)",
    "50": "rgba(26, 26, 26, 0.5)",
    "60": "rgba(26, 26, 26, 0.6)",
    "70": "rgba(26, 26, 26, 0.7)",
    "80": "rgba(26, 26, 26, 0.8)",
    "90": "rgba(26, 26, 26, 0.9)"
  };
  var grey12Alpha = {
    "5": "rgba(31, 31, 31, 0.05)",
    "10": "rgba(31, 31, 31, 0.1)",
    "20": "rgba(31, 31, 31, 0.2)",
    "30": "rgba(31, 31, 31, 0.3)",
    "40": "rgba(31, 31, 31, 0.4)",
    "50": "rgba(31, 31, 31, 0.5)",
    "60": "rgba(31, 31, 31, 0.6)",
    "70": "rgba(31, 31, 31, 0.7)",
    "80": "rgba(31, 31, 31, 0.8)",
    "90": "rgba(31, 31, 31, 0.9)"
  };
  var grey14Alpha = {
    "5": "rgba(36, 36, 36, 0.05)",
    "10": "rgba(36, 36, 36, 0.1)",
    "20": "rgba(36, 36, 36, 0.2)",
    "30": "rgba(36, 36, 36, 0.3)",
    "40": "rgba(36, 36, 36, 0.4)",
    "50": "rgba(36, 36, 36, 0.5)",
    "60": "rgba(36, 36, 36, 0.6)",
    "70": "rgba(36, 36, 36, 0.7)",
    "80": "rgba(36, 36, 36, 0.8)",
    "90": "rgba(36, 36, 36, 0.9)"
  };
  var white = "#ffffff";
  var black = "#000000";
  var darkRed = {
    shade50: "#130204",
    shade40: "#230308",
    shade30: "#420610",
    shade20: "#590815",
    shade10: "#690a19",
    primary: "#750b1c",
    tint10: "#861b2c",
    tint20: "#962f3f",
    tint30: "#ac4f5e",
    tint40: "#d69ca5",
    tint50: "#e9c7cd",
    tint60: "#f9f0f2"
  };
  var cranberry = {
    shade50: "#200205",
    shade40: "#3b0509",
    shade30: "#6e0811",
    shade20: "#960b18",
    shade10: "#b10e1c",
    primary: "#c50f1f",
    tint10: "#cc2635",
    tint20: "#d33f4c",
    tint30: "#dc626d",
    tint40: "#eeacb2",
    tint50: "#f6d1d5",
    tint60: "#fdf3f4"
  };
  var red = {
    shade50: "#210809",
    shade40: "#3f1011",
    shade30: "#751d1f",
    shade20: "#9f282b",
    shade10: "#bc2f32",
    primary: "#d13438",
    tint10: "#d7494c",
    tint20: "#dc5e62",
    tint30: "#e37d80",
    tint40: "#f1bbbc",
    tint50: "#f8dadb",
    tint60: "#fdf6f6"
  };
  var darkOrange = {
    shade50: "#230900",
    shade40: "#411200",
    shade30: "#7a2101",
    shade20: "#a62d01",
    shade10: "#c43501",
    primary: "#da3b01",
    tint10: "#de501c",
    tint20: "#e36537",
    tint30: "#e9835e",
    tint40: "#f4bfab",
    tint50: "#f9dcd1",
    tint60: "#fdf6f3"
  };
  var pumpkin = {
    shade50: "#200d03",
    shade40: "#3d1805",
    shade30: "#712d09",
    shade20: "#9a3d0c",
    shade10: "#b6480e",
    primary: "#ca5010",
    tint10: "#d06228",
    tint20: "#d77440",
    tint30: "#df8e64",
    tint40: "#efc4ad",
    tint50: "#f7dfd2",
    tint60: "#fdf7f4"
  };
  var orange = {
    shade50: "#271002",
    shade40: "#4a1e04",
    shade30: "#8a3707",
    shade20: "#bc4b09",
    shade10: "#de590b",
    primary: "#f7630c",
    tint10: "#f87528",
    tint20: "#f98845",
    tint30: "#faa06b",
    tint40: "#fdcfb4",
    tint50: "#fee5d7",
    tint60: "#fff9f5"
  };
  var peach = {
    shade50: "#291600",
    shade40: "#4d2a00",
    shade30: "#8f4e00",
    shade20: "#c26a00",
    shade10: "#e67e00",
    primary: "#ff8c00",
    tint10: "#ff9a1f",
    tint20: "#ffa83d",
    tint30: "#ffba66",
    tint40: "#ffddb3",
    tint50: "#ffedd6",
    tint60: "#fffaf5"
  };
  var marigold = {
    shade50: "#251a00",
    shade40: "#463100",
    shade30: "#835b00",
    shade20: "#b27c00",
    shade10: "#d39300",
    primary: "#eaa300",
    tint10: "#edad1c",
    tint20: "#efb839",
    tint30: "#f2c661",
    tint40: "#f9e2ae",
    tint50: "#fcefd3",
    tint60: "#fefbf4"
  };
  var yellow = {
    primary: "#fde300",
    shade10: "#e4cc00",
    shade20: "#c0ad00",
    shade30: "#817400",
    shade40: "#4c4400",
    shade50: "#282400",
    tint10: "#fde61e",
    tint20: "#fdea3d",
    tint30: "#feee66",
    tint40: "#fef7b2",
    tint50: "#fffad6",
    tint60: "#fffef5"
  };
  var gold = {
    shade50: "#1f1900",
    shade40: "#3a2f00",
    shade30: "#6c5700",
    shade20: "#937700",
    shade10: "#ae8c00",
    primary: "#c19c00",
    tint10: "#c8a718",
    tint20: "#d0b232",
    tint30: "#dac157",
    tint40: "#ecdfa5",
    tint50: "#f5eece",
    tint60: "#fdfbf2"
  };
  var brass = {
    shade50: "#181202",
    shade40: "#2e2103",
    shade30: "#553e06",
    shade20: "#745408",
    shade10: "#89640a",
    primary: "#986f0b",
    tint10: "#a47d1e",
    tint20: "#b18c34",
    tint30: "#c1a256",
    tint40: "#e0cea2",
    tint50: "#efe4cb",
    tint60: "#fbf8f2"
  };
  var brown = {
    shade50: "#170e07",
    shade40: "#2b1a0e",
    shade30: "#50301a",
    shade20: "#6c4123",
    shade10: "#804d29",
    primary: "#8e562e",
    tint10: "#9c663f",
    tint20: "#a97652",
    tint30: "#bb8f6f",
    tint40: "#ddc3b0",
    tint50: "#edded3",
    tint60: "#faf7f4"
  };
  var forest = {
    shade50: "#0c1501",
    shade40: "#162702",
    shade30: "#294903",
    shade20: "#376304",
    shade10: "#427505",
    primary: "#498205",
    tint10: "#599116",
    tint20: "#6ba02b",
    tint30: "#85b44c",
    tint40: "#bdd99b",
    tint50: "#dbebc7",
    tint60: "#f6faf0"
  };
  var seafoam = {
    shade50: "#002111",
    shade40: "#003d20",
    shade30: "#00723b",
    shade20: "#009b51",
    shade10: "#00b85f",
    primary: "#00cc6a",
    tint10: "#19d279",
    tint20: "#34d889",
    tint30: "#5ae0a0",
    tint40: "#a8f0cd",
    tint50: "#cff7e4",
    tint60: "#f3fdf8"
  };
  var lightGreen = {
    shade50: "#031a02",
    shade40: "#063004",
    shade30: "#0b5a08",
    shade20: "#0e7a0b",
    shade10: "#11910d",
    primary: "#13a10e",
    tint10: "#27ac22",
    tint20: "#3db838",
    tint30: "#5ec75a",
    tint40: "#a7e3a5",
    tint50: "#cef0cd",
    tint60: "#f2fbf2"
  };
  var green = {
    shade50: "#031403",
    shade40: "#052505",
    shade30: "#094509",
    shade20: "#0c5e0c",
    shade10: "#0e700e",
    primary: "#107c10",
    tint10: "#218c21",
    tint20: "#359b35",
    tint30: "#54b054",
    tint40: "#9fd89f",
    tint50: "#c9eac9",
    tint60: "#f1faf1"
  };
  var darkGreen = {
    shade50: "#021102",
    shade40: "#032003",
    shade30: "#063b06",
    shade20: "#085108",
    shade10: "#0a5f0a",
    primary: "#0b6a0b",
    tint10: "#1a7c1a",
    tint20: "#2d8e2d",
    tint30: "#4da64d",
    tint40: "#9ad29a",
    tint50: "#c6e7c6",
    tint60: "#f0f9f0"
  };
  var lightTeal = {
    shade50: "#001d1f",
    shade40: "#00373a",
    shade30: "#00666d",
    shade20: "#008b94",
    shade10: "#00a5af",
    primary: "#00b7c3",
    tint10: "#18bfca",
    tint20: "#32c8d1",
    tint30: "#58d3db",
    tint40: "#a6e9ed",
    tint50: "#cef3f5",
    tint60: "#f2fcfd"
  };
  var teal = {
    shade50: "#001516",
    shade40: "#012728",
    shade30: "#02494c",
    shade20: "#026467",
    shade10: "#037679",
    primary: "#038387",
    tint10: "#159195",
    tint20: "#2aa0a4",
    tint30: "#4cb4b7",
    tint40: "#9bd9db",
    tint50: "#c7ebec",
    tint60: "#f0fafa"
  };
  var steel = {
    shade50: "#000f12",
    shade40: "#001b22",
    shade30: "#00333f",
    shade20: "#004555",
    shade10: "#005265",
    primary: "#005b70",
    tint10: "#0f6c81",
    tint20: "#237d92",
    tint30: "#4496a9",
    tint40: "#94c8d4",
    tint50: "#c3e1e8",
    tint60: "#eff7f9"
  };
  var blue = {
    shade50: "#001322",
    shade40: "#002440",
    shade30: "#004377",
    shade20: "#005ba1",
    shade10: "#006cbf",
    primary: "#0078d4",
    tint10: "#1a86d9",
    tint20: "#3595de",
    tint30: "#5caae5",
    tint40: "#a9d3f2",
    tint50: "#d0e7f8",
    tint60: "#f3f9fd"
  };
  var royalBlue = {
    shade50: "#000c16",
    shade40: "#00172a",
    shade30: "#002c4e",
    shade20: "#003b6a",
    shade10: "#00467e",
    primary: "#004e8c",
    tint10: "#125e9a",
    tint20: "#286fa8",
    tint30: "#4a89ba",
    tint40: "#9abfdc",
    tint50: "#c7dced",
    tint60: "#f0f6fa"
  };
  var cornflower = {
    shade50: "#0d1126",
    shade40: "#182047",
    shade30: "#2c3c85",
    shade20: "#3c51b4",
    shade10: "#4760d5",
    primary: "#4f6bed",
    tint10: "#637cef",
    tint20: "#778df1",
    tint30: "#93a4f4",
    tint40: "#c8d1fa",
    tint50: "#e1e6fc",
    tint60: "#f7f9fe"
  };
  var navy = {
    shade50: "#00061d",
    shade40: "#000c36",
    shade30: "#001665",
    shade20: "#001e89",
    shade10: "#0023a2",
    primary: "#0027b4",
    tint10: "#173bbd",
    tint20: "#3050c6",
    tint30: "#546fd2",
    tint40: "#a3b2e8",
    tint50: "#ccd5f3",
    tint60: "#f2f4fc"
  };
  var lavender = {
    shade50: "#120f25",
    shade40: "#221d46",
    shade30: "#3f3682",
    shade20: "#5649b0",
    shade10: "#6656d1",
    primary: "#7160e8",
    tint10: "#8172eb",
    tint20: "#9184ee",
    tint30: "#a79cf1",
    tint40: "#d2ccf8",
    tint50: "#e7e4fb",
    tint60: "#f9f8fe"
  };
  var purple = {
    shade50: "#0f0717",
    shade40: "#1c0e2b",
    shade30: "#341a51",
    shade20: "#46236e",
    shade10: "#532982",
    primary: "#5c2e91",
    tint10: "#6b3f9e",
    tint20: "#7c52ab",
    tint30: "#9470bd",
    tint40: "#c6b1de",
    tint50: "#e0d3ed",
    tint60: "#f7f4fb"
  };
  var grape = {
    shade50: "#160418",
    shade40: "#29072e",
    shade30: "#4c0d55",
    shade20: "#671174",
    shade10: "#7a1589",
    primary: "#881798",
    tint10: "#952aa4",
    tint20: "#a33fb1",
    tint30: "#b55fc1",
    tint40: "#d9a7e0",
    tint50: "#eaceef",
    tint60: "#faf2fb"
  };
  var berry = {
    shade50: "#1f091d",
    shade40: "#3a1136",
    shade30: "#6d2064",
    shade20: "#932b88",
    shade10: "#af33a1",
    primary: "#c239b3",
    tint10: "#c94cbc",
    tint20: "#d161c4",
    tint30: "#da7ed0",
    tint40: "#edbbe7",
    tint50: "#f5daf2",
    tint60: "#fdf5fc"
  };
  var lilac = {
    shade50: "#1c0b1f",
    shade40: "#35153a",
    shade30: "#63276d",
    shade20: "#863593",
    shade10: "#9f3faf",
    primary: "#b146c2",
    tint10: "#ba58c9",
    tint20: "#c36bd1",
    tint30: "#cf87da",
    tint40: "#e6bfed",
    tint50: "#f2dcf5",
    tint60: "#fcf6fd"
  };
  var pink = {
    shade50: "#24091b",
    shade40: "#441232",
    shade30: "#80215d",
    shade20: "#ad2d7e",
    shade10: "#cd3595",
    primary: "#e43ba6",
    tint10: "#e750b0",
    tint20: "#ea66ba",
    tint30: "#ef85c8",
    tint40: "#f7c0e3",
    tint50: "#fbddf0",
    tint60: "#fef6fb"
  };
  var magenta = {
    shade50: "#1f0013",
    shade40: "#390024",
    shade30: "#6b0043",
    shade20: "#91005a",
    shade10: "#ac006b",
    primary: "#bf0077",
    tint10: "#c71885",
    tint20: "#ce3293",
    tint30: "#d957a8",
    tint40: "#eca5d1",
    tint50: "#f5cee6",
    tint60: "#fcf2f9"
  };
  var plum = {
    shade50: "#13000c",
    shade40: "#240017",
    shade30: "#43002b",
    shade20: "#5a003b",
    shade10: "#6b0045",
    primary: "#77004d",
    tint10: "#87105d",
    tint20: "#98246f",
    tint30: "#ad4589",
    tint40: "#d696c0",
    tint50: "#e9c4dc",
    tint60: "#faf0f6"
  };
  var beige = {
    shade50: "#141313",
    shade40: "#252323",
    shade30: "#444241",
    shade20: "#5d5958",
    shade10: "#6e6968",
    primary: "#7a7574",
    tint10: "#8a8584",
    tint20: "#9a9594",
    tint30: "#afabaa",
    tint40: "#d7d4d4",
    tint50: "#eae8e8",
    tint60: "#faf9f9"
  };
  var mink = {
    shade50: "#0f0e0e",
    shade40: "#1c1b1a",
    shade30: "#343231",
    shade20: "#474443",
    shade10: "#54514f",
    primary: "#5d5a58",
    tint10: "#706d6b",
    tint20: "#84817e",
    tint30: "#9e9b99",
    tint40: "#cecccb",
    tint50: "#e5e4e3",
    tint60: "#f8f8f8"
  };
  var platinum = {
    shade50: "#111314",
    shade40: "#1f2426",
    shade30: "#3b4447",
    shade20: "#505c60",
    shade10: "#5f6d71",
    primary: "#69797e",
    tint10: "#79898d",
    tint20: "#89989d",
    tint30: "#a0adb2",
    tint40: "#cdd6d8",
    tint50: "#e4e9ea",
    tint60: "#f8f9fa"
  };
  var anchor = {
    shade50: "#090a0b",
    shade40: "#111315",
    shade30: "#202427",
    shade20: "#2b3135",
    shade10: "#333a3f",
    primary: "#394146",
    tint10: "#4d565c",
    tint20: "#626c72",
    tint30: "#808a90",
    tint40: "#bcc3c7",
    tint50: "#dbdfe1",
    tint60: "#f6f7f8"
  };

  // ../node_modules/@fluentui/tokens/lib/global/colorPalette.js
  var statusSharedColors = {
    red,
    green,
    darkOrange,
    yellow,
    berry,
    lightGreen,
    marigold
  };
  var personaSharedColors = {
    darkRed,
    cranberry,
    pumpkin,
    peach,
    gold,
    brass,
    brown,
    forest,
    seafoam,
    darkGreen,
    lightTeal,
    teal,
    steel,
    blue,
    royalBlue,
    cornflower,
    navy,
    lavender,
    purple,
    grape,
    lilac,
    pink,
    magenta,
    plum,
    beige,
    mink,
    platinum,
    anchor
  };
  var mappedStatusColors = {
    cranberry,
    green,
    orange
  };

  // ../node_modules/@fluentui/tokens/lib/sharedColorNames.js
  var statusSharedColorNames = [
    "red",
    "green",
    "darkOrange",
    "yellow",
    "berry",
    "lightGreen",
    "marigold"
  ];
  var personaSharedColorNames = [
    "darkRed",
    "cranberry",
    "pumpkin",
    "peach",
    "gold",
    "brass",
    "brown",
    "forest",
    "seafoam",
    "darkGreen",
    "lightTeal",
    "teal",
    "steel",
    "blue",
    "royalBlue",
    "cornflower",
    "navy",
    "lavender",
    "purple",
    "grape",
    "lilac",
    "pink",
    "magenta",
    "plum",
    "beige",
    "mink",
    "platinum",
    "anchor"
  ];

  // ../node_modules/@fluentui/tokens/lib/statusColorMapping.js
  var statusColorMapping = {
    success: "green",
    warning: "orange",
    danger: "cranberry"
  };

  // ../node_modules/@fluentui/tokens/lib/global/borderRadius.js
  var borderRadius2 = {
    borderRadiusNone: "0",
    borderRadiusSmall: "2px",
    borderRadiusMedium: "4px",
    borderRadiusLarge: "6px",
    borderRadiusXLarge: "8px",
    borderRadiusCircular: "10000px"
  };

  // ../node_modules/@fluentui/tokens/lib/global/curves.js
  var curves = {
    curveAccelerateMax: "cubic-bezier(1,0,1,1)",
    curveAccelerateMid: "cubic-bezier(0.7,0,1,0.5)",
    curveAccelerateMin: "cubic-bezier(0.8,0,1,1)",
    curveDecelerateMax: "cubic-bezier(0,0,0,1)",
    curveDecelerateMid: "cubic-bezier(0.1,0.9,0.2,1)",
    curveDecelerateMin: "cubic-bezier(0.33,0,0.1,1)",
    curveEasyEaseMax: "cubic-bezier(0.8,0,0.1,1)",
    curveEasyEase: "cubic-bezier(0.33,0,0.67,1)",
    curveLinear: "cubic-bezier(0,0,1,1)"
  };

  // ../node_modules/@fluentui/tokens/lib/global/durations.js
  var durations = {
    durationUltraFast: "50ms",
    durationFaster: "100ms",
    durationFast: "150ms",
    durationNormal: "200ms",
    durationGentle: "250ms",
    durationSlow: "300ms",
    durationSlower: "400ms",
    durationUltraSlow: "500ms"
  };

  // ../node_modules/@fluentui/tokens/lib/global/fonts.js
  var fontSizes = {
    fontSizeBase100: "10px",
    fontSizeBase200: "12px",
    fontSizeBase300: "14px",
    fontSizeBase400: "16px",
    fontSizeBase500: "20px",
    fontSizeBase600: "24px",
    fontSizeHero700: "28px",
    fontSizeHero800: "32px",
    fontSizeHero900: "40px",
    fontSizeHero1000: "68px"
  };
  var lineHeights = {
    lineHeightBase100: "14px",
    lineHeightBase200: "16px",
    lineHeightBase300: "20px",
    lineHeightBase400: "22px",
    lineHeightBase500: "28px",
    lineHeightBase600: "32px",
    lineHeightHero700: "36px",
    lineHeightHero800: "40px",
    lineHeightHero900: "52px",
    lineHeightHero1000: "92px"
  };
  var fontWeights = {
    fontWeightRegular: 400,
    fontWeightMedium: 500,
    fontWeightSemibold: 600,
    fontWeightBold: 700
  };
  var fontFamilies = {
    fontFamilyBase: (
      // eslint-disable-next-line @fluentui/max-len
      "'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif"
    ),
    fontFamilyMonospace: "Consolas, 'Courier New', Courier, monospace",
    fontFamilyNumeric: (
      // eslint-disable-next-line @fluentui/max-len
      "Bahnschrift, 'Segoe UI', 'Segoe UI Web (West European)', -apple-system, BlinkMacSystemFont, Roboto, 'Helvetica Neue', sans-serif"
    )
  };

  // ../node_modules/@fluentui/tokens/lib/global/spacings.js
  var spacings = {
    none: "0",
    xxs: "2px",
    xs: "4px",
    sNudge: "6px",
    s: "8px",
    mNudge: "10px",
    m: "12px",
    l: "16px",
    xl: "20px",
    xxl: "24px",
    xxxl: "32px"
  };
  var horizontalSpacings = {
    spacingHorizontalNone: spacings.none,
    spacingHorizontalXXS: spacings.xxs,
    spacingHorizontalXS: spacings.xs,
    spacingHorizontalSNudge: spacings.sNudge,
    spacingHorizontalS: spacings.s,
    spacingHorizontalMNudge: spacings.mNudge,
    spacingHorizontalM: spacings.m,
    spacingHorizontalL: spacings.l,
    spacingHorizontalXL: spacings.xl,
    spacingHorizontalXXL: spacings.xxl,
    spacingHorizontalXXXL: spacings.xxxl
  };
  var verticalSpacings = {
    spacingVerticalNone: spacings.none,
    spacingVerticalXXS: spacings.xxs,
    spacingVerticalXS: spacings.xs,
    spacingVerticalSNudge: spacings.sNudge,
    spacingVerticalS: spacings.s,
    spacingVerticalMNudge: spacings.mNudge,
    spacingVerticalM: spacings.m,
    spacingVerticalL: spacings.l,
    spacingVerticalXL: spacings.xl,
    spacingVerticalXXL: spacings.xxl,
    spacingVerticalXXXL: spacings.xxxl
  };

  // ../node_modules/@fluentui/tokens/lib/global/strokeWidths.js
  var strokeWidths = {
    strokeWidthThin: "1px",
    strokeWidthThick: "2px",
    strokeWidthThicker: "3px",
    strokeWidthThickest: "4px"
  };

  // ../node_modules/@fluentui/tokens/lib/tokens.js
  var tokens = {
    // Color tokens
    colorNeutralForeground1: "var(--colorNeutralForeground1)",
    colorNeutralForeground1Hover: "var(--colorNeutralForeground1Hover)",
    colorNeutralForeground1Pressed: "var(--colorNeutralForeground1Pressed)",
    colorNeutralForeground1Selected: "var(--colorNeutralForeground1Selected)",
    colorNeutralForeground2: "var(--colorNeutralForeground2)",
    colorNeutralForeground2Hover: "var(--colorNeutralForeground2Hover)",
    colorNeutralForeground2Pressed: "var(--colorNeutralForeground2Pressed)",
    colorNeutralForeground2Selected: "var(--colorNeutralForeground2Selected)",
    colorNeutralForeground2BrandHover: "var(--colorNeutralForeground2BrandHover)",
    colorNeutralForeground2BrandPressed: "var(--colorNeutralForeground2BrandPressed)",
    colorNeutralForeground2BrandSelected: "var(--colorNeutralForeground2BrandSelected)",
    colorNeutralForeground3: "var(--colorNeutralForeground3)",
    colorNeutralForeground3Hover: "var(--colorNeutralForeground3Hover)",
    colorNeutralForeground3Pressed: "var(--colorNeutralForeground3Pressed)",
    colorNeutralForeground3Selected: "var(--colorNeutralForeground3Selected)",
    colorNeutralForeground3BrandHover: "var(--colorNeutralForeground3BrandHover)",
    colorNeutralForeground3BrandPressed: "var(--colorNeutralForeground3BrandPressed)",
    colorNeutralForeground3BrandSelected: "var(--colorNeutralForeground3BrandSelected)",
    colorNeutralForeground4: "var(--colorNeutralForeground4)",
    colorNeutralForegroundDisabled: "var(--colorNeutralForegroundDisabled)",
    colorBrandForegroundLink: "var(--colorBrandForegroundLink)",
    colorBrandForegroundLinkHover: "var(--colorBrandForegroundLinkHover)",
    colorBrandForegroundLinkPressed: "var(--colorBrandForegroundLinkPressed)",
    colorBrandForegroundLinkSelected: "var(--colorBrandForegroundLinkSelected)",
    colorNeutralForeground2Link: "var(--colorNeutralForeground2Link)",
    colorNeutralForeground2LinkHover: "var(--colorNeutralForeground2LinkHover)",
    colorNeutralForeground2LinkPressed: "var(--colorNeutralForeground2LinkPressed)",
    colorNeutralForeground2LinkSelected: "var(--colorNeutralForeground2LinkSelected)",
    colorCompoundBrandForeground1: "var(--colorCompoundBrandForeground1)",
    colorCompoundBrandForeground1Hover: "var(--colorCompoundBrandForeground1Hover)",
    colorCompoundBrandForeground1Pressed: "var(--colorCompoundBrandForeground1Pressed)",
    colorNeutralForegroundOnBrand: "var(--colorNeutralForegroundOnBrand)",
    colorNeutralForegroundInverted: "var(--colorNeutralForegroundInverted)",
    colorNeutralForegroundInvertedHover: "var(--colorNeutralForegroundInvertedHover)",
    colorNeutralForegroundInvertedPressed: "var(--colorNeutralForegroundInvertedPressed)",
    colorNeutralForegroundInvertedSelected: "var(--colorNeutralForegroundInvertedSelected)",
    colorNeutralForegroundInverted2: "var(--colorNeutralForegroundInverted2)",
    colorNeutralForegroundStaticInverted: "var(--colorNeutralForegroundStaticInverted)",
    colorNeutralForegroundInvertedLink: "var(--colorNeutralForegroundInvertedLink)",
    colorNeutralForegroundInvertedLinkHover: "var(--colorNeutralForegroundInvertedLinkHover)",
    colorNeutralForegroundInvertedLinkPressed: "var(--colorNeutralForegroundInvertedLinkPressed)",
    colorNeutralForegroundInvertedLinkSelected: "var(--colorNeutralForegroundInvertedLinkSelected)",
    colorNeutralForegroundInvertedDisabled: "var(--colorNeutralForegroundInvertedDisabled)",
    colorBrandForeground1: "var(--colorBrandForeground1)",
    colorBrandForeground2: "var(--colorBrandForeground2)",
    colorBrandForeground2Hover: "var(--colorBrandForeground2Hover)",
    colorBrandForeground2Pressed: "var(--colorBrandForeground2Pressed)",
    colorNeutralForeground1Static: "var(--colorNeutralForeground1Static)",
    colorBrandForegroundInverted: "var(--colorBrandForegroundInverted)",
    colorBrandForegroundInvertedHover: "var(--colorBrandForegroundInvertedHover)",
    colorBrandForegroundInvertedPressed: "var(--colorBrandForegroundInvertedPressed)",
    colorBrandForegroundOnLight: "var(--colorBrandForegroundOnLight)",
    colorBrandForegroundOnLightHover: "var(--colorBrandForegroundOnLightHover)",
    colorBrandForegroundOnLightPressed: "var(--colorBrandForegroundOnLightPressed)",
    colorBrandForegroundOnLightSelected: "var(--colorBrandForegroundOnLightSelected)",
    colorNeutralBackground1: "var(--colorNeutralBackground1)",
    colorNeutralBackground1Hover: "var(--colorNeutralBackground1Hover)",
    colorNeutralBackground1Pressed: "var(--colorNeutralBackground1Pressed)",
    colorNeutralBackground1Selected: "var(--colorNeutralBackground1Selected)",
    colorNeutralBackground2: "var(--colorNeutralBackground2)",
    colorNeutralBackground2Hover: "var(--colorNeutralBackground2Hover)",
    colorNeutralBackground2Pressed: "var(--colorNeutralBackground2Pressed)",
    colorNeutralBackground2Selected: "var(--colorNeutralBackground2Selected)",
    colorNeutralBackground3: "var(--colorNeutralBackground3)",
    colorNeutralBackground3Hover: "var(--colorNeutralBackground3Hover)",
    colorNeutralBackground3Pressed: "var(--colorNeutralBackground3Pressed)",
    colorNeutralBackground3Selected: "var(--colorNeutralBackground3Selected)",
    colorNeutralBackground4: "var(--colorNeutralBackground4)",
    colorNeutralBackground4Hover: "var(--colorNeutralBackground4Hover)",
    colorNeutralBackground4Pressed: "var(--colorNeutralBackground4Pressed)",
    colorNeutralBackground4Selected: "var(--colorNeutralBackground4Selected)",
    colorNeutralBackground5: "var(--colorNeutralBackground5)",
    colorNeutralBackground5Hover: "var(--colorNeutralBackground5Hover)",
    colorNeutralBackground5Pressed: "var(--colorNeutralBackground5Pressed)",
    colorNeutralBackground5Selected: "var(--colorNeutralBackground5Selected)",
    colorNeutralBackground6: "var(--colorNeutralBackground6)",
    colorNeutralBackgroundInverted: "var(--colorNeutralBackgroundInverted)",
    colorNeutralBackgroundStatic: "var(--colorNeutralBackgroundStatic)",
    colorNeutralBackgroundAlpha: "var(--colorNeutralBackgroundAlpha)",
    colorNeutralBackgroundAlpha2: "var(--colorNeutralBackgroundAlpha2)",
    colorSubtleBackground: "var(--colorSubtleBackground)",
    colorSubtleBackgroundHover: "var(--colorSubtleBackgroundHover)",
    colorSubtleBackgroundPressed: "var(--colorSubtleBackgroundPressed)",
    colorSubtleBackgroundSelected: "var(--colorSubtleBackgroundSelected)",
    colorSubtleBackgroundLightAlphaHover: "var(--colorSubtleBackgroundLightAlphaHover)",
    colorSubtleBackgroundLightAlphaPressed: "var(--colorSubtleBackgroundLightAlphaPressed)",
    colorSubtleBackgroundLightAlphaSelected: "var(--colorSubtleBackgroundLightAlphaSelected)",
    colorSubtleBackgroundInverted: "var(--colorSubtleBackgroundInverted)",
    colorSubtleBackgroundInvertedHover: "var(--colorSubtleBackgroundInvertedHover)",
    colorSubtleBackgroundInvertedPressed: "var(--colorSubtleBackgroundInvertedPressed)",
    colorSubtleBackgroundInvertedSelected: "var(--colorSubtleBackgroundInvertedSelected)",
    colorTransparentBackground: "var(--colorTransparentBackground)",
    colorTransparentBackgroundHover: "var(--colorTransparentBackgroundHover)",
    colorTransparentBackgroundPressed: "var(--colorTransparentBackgroundPressed)",
    colorTransparentBackgroundSelected: "var(--colorTransparentBackgroundSelected)",
    colorNeutralBackgroundDisabled: "var(--colorNeutralBackgroundDisabled)",
    colorNeutralBackgroundInvertedDisabled: "var(--colorNeutralBackgroundInvertedDisabled)",
    colorNeutralStencil1: "var(--colorNeutralStencil1)",
    colorNeutralStencil2: "var(--colorNeutralStencil2)",
    colorNeutralStencil1Alpha: "var(--colorNeutralStencil1Alpha)",
    colorNeutralStencil2Alpha: "var(--colorNeutralStencil2Alpha)",
    colorBackgroundOverlay: "var(--colorBackgroundOverlay)",
    colorScrollbarOverlay: "var(--colorScrollbarOverlay)",
    colorBrandBackground: "var(--colorBrandBackground)",
    colorBrandBackgroundHover: "var(--colorBrandBackgroundHover)",
    colorBrandBackgroundPressed: "var(--colorBrandBackgroundPressed)",
    colorBrandBackgroundSelected: "var(--colorBrandBackgroundSelected)",
    colorCompoundBrandBackground: "var(--colorCompoundBrandBackground)",
    colorCompoundBrandBackgroundHover: "var(--colorCompoundBrandBackgroundHover)",
    colorCompoundBrandBackgroundPressed: "var(--colorCompoundBrandBackgroundPressed)",
    colorBrandBackgroundStatic: "var(--colorBrandBackgroundStatic)",
    colorBrandBackground2: "var(--colorBrandBackground2)",
    colorBrandBackground2Hover: "var(--colorBrandBackground2Hover)",
    colorBrandBackground2Pressed: "var(--colorBrandBackground2Pressed)",
    colorBrandBackgroundInverted: "var(--colorBrandBackgroundInverted)",
    colorBrandBackgroundInvertedHover: "var(--colorBrandBackgroundInvertedHover)",
    colorBrandBackgroundInvertedPressed: "var(--colorBrandBackgroundInvertedPressed)",
    colorBrandBackgroundInvertedSelected: "var(--colorBrandBackgroundInvertedSelected)",
    colorNeutralStrokeAccessible: "var(--colorNeutralStrokeAccessible)",
    colorNeutralStrokeAccessibleHover: "var(--colorNeutralStrokeAccessibleHover)",
    colorNeutralStrokeAccessiblePressed: "var(--colorNeutralStrokeAccessiblePressed)",
    colorNeutralStrokeAccessibleSelected: "var(--colorNeutralStrokeAccessibleSelected)",
    colorNeutralStroke1: "var(--colorNeutralStroke1)",
    colorNeutralStroke1Hover: "var(--colorNeutralStroke1Hover)",
    colorNeutralStroke1Pressed: "var(--colorNeutralStroke1Pressed)",
    colorNeutralStroke1Selected: "var(--colorNeutralStroke1Selected)",
    colorNeutralStroke2: "var(--colorNeutralStroke2)",
    colorNeutralStroke3: "var(--colorNeutralStroke3)",
    colorNeutralStrokeSubtle: "var(--colorNeutralStrokeSubtle)",
    colorNeutralStrokeOnBrand: "var(--colorNeutralStrokeOnBrand)",
    colorNeutralStrokeOnBrand2: "var(--colorNeutralStrokeOnBrand2)",
    colorNeutralStrokeOnBrand2Hover: "var(--colorNeutralStrokeOnBrand2Hover)",
    colorNeutralStrokeOnBrand2Pressed: "var(--colorNeutralStrokeOnBrand2Pressed)",
    colorNeutralStrokeOnBrand2Selected: "var(--colorNeutralStrokeOnBrand2Selected)",
    colorBrandStroke1: "var(--colorBrandStroke1)",
    colorBrandStroke2: "var(--colorBrandStroke2)",
    colorBrandStroke2Hover: "var(--colorBrandStroke2Hover)",
    colorBrandStroke2Pressed: "var(--colorBrandStroke2Pressed)",
    colorBrandStroke2Contrast: "var(--colorBrandStroke2Contrast)",
    colorCompoundBrandStroke: "var(--colorCompoundBrandStroke)",
    colorCompoundBrandStrokeHover: "var(--colorCompoundBrandStrokeHover)",
    colorCompoundBrandStrokePressed: "var(--colorCompoundBrandStrokePressed)",
    colorNeutralStrokeDisabled: "var(--colorNeutralStrokeDisabled)",
    colorNeutralStrokeInvertedDisabled: "var(--colorNeutralStrokeInvertedDisabled)",
    colorTransparentStroke: "var(--colorTransparentStroke)",
    colorTransparentStrokeInteractive: "var(--colorTransparentStrokeInteractive)",
    colorTransparentStrokeDisabled: "var(--colorTransparentStrokeDisabled)",
    colorNeutralStrokeAlpha: "var(--colorNeutralStrokeAlpha)",
    colorNeutralStrokeAlpha2: "var(--colorNeutralStrokeAlpha2)",
    colorStrokeFocus1: "var(--colorStrokeFocus1)",
    colorStrokeFocus2: "var(--colorStrokeFocus2)",
    colorNeutralShadowAmbient: "var(--colorNeutralShadowAmbient)",
    colorNeutralShadowKey: "var(--colorNeutralShadowKey)",
    colorNeutralShadowAmbientLighter: "var(--colorNeutralShadowAmbientLighter)",
    colorNeutralShadowKeyLighter: "var(--colorNeutralShadowKeyLighter)",
    colorNeutralShadowAmbientDarker: "var(--colorNeutralShadowAmbientDarker)",
    colorNeutralShadowKeyDarker: "var(--colorNeutralShadowKeyDarker)",
    colorBrandShadowAmbient: "var(--colorBrandShadowAmbient)",
    colorBrandShadowKey: "var(--colorBrandShadowKey)",
    // Color palette tokens
    // Color palette red tokens
    colorPaletteRedBackground1: "var(--colorPaletteRedBackground1)",
    colorPaletteRedBackground2: "var(--colorPaletteRedBackground2)",
    colorPaletteRedBackground3: "var(--colorPaletteRedBackground3)",
    colorPaletteRedBorderActive: "var(--colorPaletteRedBorderActive)",
    colorPaletteRedBorder1: "var(--colorPaletteRedBorder1)",
    colorPaletteRedBorder2: "var(--colorPaletteRedBorder2)",
    colorPaletteRedForeground1: "var(--colorPaletteRedForeground1)",
    colorPaletteRedForeground2: "var(--colorPaletteRedForeground2)",
    colorPaletteRedForeground3: "var(--colorPaletteRedForeground3)",
    colorPaletteRedForegroundInverted: "var(--colorPaletteRedForegroundInverted)",
    // Color palette green tokens
    colorPaletteGreenBackground1: "var(--colorPaletteGreenBackground1)",
    colorPaletteGreenBackground2: "var(--colorPaletteGreenBackground2)",
    colorPaletteGreenBackground3: "var(--colorPaletteGreenBackground3)",
    colorPaletteGreenBorderActive: "var(--colorPaletteGreenBorderActive)",
    colorPaletteGreenBorder1: "var(--colorPaletteGreenBorder1)",
    colorPaletteGreenBorder2: "var(--colorPaletteGreenBorder2)",
    colorPaletteGreenForeground1: "var(--colorPaletteGreenForeground1)",
    colorPaletteGreenForeground2: "var(--colorPaletteGreenForeground2)",
    colorPaletteGreenForeground3: "var(--colorPaletteGreenForeground3)",
    colorPaletteGreenForegroundInverted: "var(--colorPaletteGreenForegroundInverted)",
    // Color palette dark orange tokens
    colorPaletteDarkOrangeBackground1: "var(--colorPaletteDarkOrangeBackground1)",
    colorPaletteDarkOrangeBackground2: "var(--colorPaletteDarkOrangeBackground2)",
    colorPaletteDarkOrangeBackground3: "var(--colorPaletteDarkOrangeBackground3)",
    colorPaletteDarkOrangeBorderActive: "var(--colorPaletteDarkOrangeBorderActive)",
    colorPaletteDarkOrangeBorder1: "var(--colorPaletteDarkOrangeBorder1)",
    colorPaletteDarkOrangeBorder2: "var(--colorPaletteDarkOrangeBorder2)",
    colorPaletteDarkOrangeForeground1: "var(--colorPaletteDarkOrangeForeground1)",
    colorPaletteDarkOrangeForeground2: "var(--colorPaletteDarkOrangeForeground2)",
    colorPaletteDarkOrangeForeground3: "var(--colorPaletteDarkOrangeForeground3)",
    // Color palette yellow tokens
    colorPaletteYellowBackground1: "var(--colorPaletteYellowBackground1)",
    colorPaletteYellowBackground2: "var(--colorPaletteYellowBackground2)",
    colorPaletteYellowBackground3: "var(--colorPaletteYellowBackground3)",
    colorPaletteYellowBorderActive: "var(--colorPaletteYellowBorderActive)",
    colorPaletteYellowBorder1: "var(--colorPaletteYellowBorder1)",
    colorPaletteYellowBorder2: "var(--colorPaletteYellowBorder2)",
    colorPaletteYellowForeground1: "var(--colorPaletteYellowForeground1)",
    colorPaletteYellowForeground2: "var(--colorPaletteYellowForeground2)",
    colorPaletteYellowForeground3: "var(--colorPaletteYellowForeground3)",
    colorPaletteYellowForegroundInverted: "var(--colorPaletteYellowForegroundInverted)",
    // Color palette berry tokens
    colorPaletteBerryBackground1: "var(--colorPaletteBerryBackground1)",
    colorPaletteBerryBackground2: "var(--colorPaletteBerryBackground2)",
    colorPaletteBerryBackground3: "var(--colorPaletteBerryBackground3)",
    colorPaletteBerryBorderActive: "var(--colorPaletteBerryBorderActive)",
    colorPaletteBerryBorder1: "var(--colorPaletteBerryBorder1)",
    colorPaletteBerryBorder2: "var(--colorPaletteBerryBorder2)",
    colorPaletteBerryForeground1: "var(--colorPaletteBerryForeground1)",
    colorPaletteBerryForeground2: "var(--colorPaletteBerryForeground2)",
    colorPaletteBerryForeground3: "var(--colorPaletteBerryForeground3)",
    // Color palette marigold tokens
    colorPaletteMarigoldBackground1: "var(--colorPaletteMarigoldBackground1)",
    colorPaletteMarigoldBackground2: "var(--colorPaletteMarigoldBackground2)",
    colorPaletteMarigoldBackground3: "var(--colorPaletteMarigoldBackground3)",
    colorPaletteMarigoldBorderActive: "var(--colorPaletteMarigoldBorderActive)",
    colorPaletteMarigoldBorder1: "var(--colorPaletteMarigoldBorder1)",
    colorPaletteMarigoldBorder2: "var(--colorPaletteMarigoldBorder2)",
    colorPaletteMarigoldForeground1: "var(--colorPaletteMarigoldForeground1)",
    colorPaletteMarigoldForeground2: "var(--colorPaletteMarigoldForeground2)",
    colorPaletteMarigoldForeground3: "var(--colorPaletteMarigoldForeground3)",
    // Color palette light green tokens
    colorPaletteLightGreenBackground1: "var(--colorPaletteLightGreenBackground1)",
    colorPaletteLightGreenBackground2: "var(--colorPaletteLightGreenBackground2)",
    colorPaletteLightGreenBackground3: "var(--colorPaletteLightGreenBackground3)",
    colorPaletteLightGreenBorderActive: "var(--colorPaletteLightGreenBorderActive)",
    colorPaletteLightGreenBorder1: "var(--colorPaletteLightGreenBorder1)",
    colorPaletteLightGreenBorder2: "var(--colorPaletteLightGreenBorder2)",
    colorPaletteLightGreenForeground1: "var(--colorPaletteLightGreenForeground1)",
    colorPaletteLightGreenForeground2: "var(--colorPaletteLightGreenForeground2)",
    colorPaletteLightGreenForeground3: "var(--colorPaletteLightGreenForeground3)",
    // Color palette anchor tokens
    colorPaletteAnchorBackground2: "var(--colorPaletteAnchorBackground2)",
    colorPaletteAnchorBorderActive: "var(--colorPaletteAnchorBorderActive)",
    colorPaletteAnchorForeground2: "var(--colorPaletteAnchorForeground2)",
    // Color palette beige tokens
    colorPaletteBeigeBackground2: "var(--colorPaletteBeigeBackground2)",
    colorPaletteBeigeBorderActive: "var(--colorPaletteBeigeBorderActive)",
    colorPaletteBeigeForeground2: "var(--colorPaletteBeigeForeground2)",
    // Color palette blue tokens
    colorPaletteBlueBackground2: "var(--colorPaletteBlueBackground2)",
    colorPaletteBlueBorderActive: "var(--colorPaletteBlueBorderActive)",
    colorPaletteBlueForeground2: "var(--colorPaletteBlueForeground2)",
    // Color palette brass tokens
    colorPaletteBrassBackground2: "var(--colorPaletteBrassBackground2)",
    colorPaletteBrassBorderActive: "var(--colorPaletteBrassBorderActive)",
    colorPaletteBrassForeground2: "var(--colorPaletteBrassForeground2)",
    // Color palette brown tokens
    colorPaletteBrownBackground2: "var(--colorPaletteBrownBackground2)",
    colorPaletteBrownBorderActive: "var(--colorPaletteBrownBorderActive)",
    colorPaletteBrownForeground2: "var(--colorPaletteBrownForeground2)",
    // Color palette cornflower tokens
    colorPaletteCornflowerBackground2: "var(--colorPaletteCornflowerBackground2)",
    colorPaletteCornflowerBorderActive: "var(--colorPaletteCornflowerBorderActive)",
    colorPaletteCornflowerForeground2: "var(--colorPaletteCornflowerForeground2)",
    // Color palette cranberry tokens
    colorPaletteCranberryBackground2: "var(--colorPaletteCranberryBackground2)",
    colorPaletteCranberryBorderActive: "var(--colorPaletteCranberryBorderActive)",
    colorPaletteCranberryForeground2: "var(--colorPaletteCranberryForeground2)",
    // Color palette dark green tokens
    colorPaletteDarkGreenBackground2: "var(--colorPaletteDarkGreenBackground2)",
    colorPaletteDarkGreenBorderActive: "var(--colorPaletteDarkGreenBorderActive)",
    colorPaletteDarkGreenForeground2: "var(--colorPaletteDarkGreenForeground2)",
    // Color palette dark red tokens
    colorPaletteDarkRedBackground2: "var(--colorPaletteDarkRedBackground2)",
    colorPaletteDarkRedBorderActive: "var(--colorPaletteDarkRedBorderActive)",
    colorPaletteDarkRedForeground2: "var(--colorPaletteDarkRedForeground2)",
    // Color palette forest tokens
    colorPaletteForestBackground2: "var(--colorPaletteForestBackground2)",
    colorPaletteForestBorderActive: "var(--colorPaletteForestBorderActive)",
    colorPaletteForestForeground2: "var(--colorPaletteForestForeground2)",
    // Color palette gold tokens
    colorPaletteGoldBackground2: "var(--colorPaletteGoldBackground2)",
    colorPaletteGoldBorderActive: "var(--colorPaletteGoldBorderActive)",
    colorPaletteGoldForeground2: "var(--colorPaletteGoldForeground2)",
    // Color palette grape tokens
    colorPaletteGrapeBackground2: "var(--colorPaletteGrapeBackground2)",
    colorPaletteGrapeBorderActive: "var(--colorPaletteGrapeBorderActive)",
    colorPaletteGrapeForeground2: "var(--colorPaletteGrapeForeground2)",
    // Color palette lavender tokens
    colorPaletteLavenderBackground2: "var(--colorPaletteLavenderBackground2)",
    colorPaletteLavenderBorderActive: "var(--colorPaletteLavenderBorderActive)",
    colorPaletteLavenderForeground2: "var(--colorPaletteLavenderForeground2)",
    // Color palette light teal tokens
    colorPaletteLightTealBackground2: "var(--colorPaletteLightTealBackground2)",
    colorPaletteLightTealBorderActive: "var(--colorPaletteLightTealBorderActive)",
    colorPaletteLightTealForeground2: "var(--colorPaletteLightTealForeground2)",
    // Color palette lilac tokens
    colorPaletteLilacBackground2: "var(--colorPaletteLilacBackground2)",
    colorPaletteLilacBorderActive: "var(--colorPaletteLilacBorderActive)",
    colorPaletteLilacForeground2: "var(--colorPaletteLilacForeground2)",
    // Color palette magenta tokens
    colorPaletteMagentaBackground2: "var(--colorPaletteMagentaBackground2)",
    colorPaletteMagentaBorderActive: "var(--colorPaletteMagentaBorderActive)",
    colorPaletteMagentaForeground2: "var(--colorPaletteMagentaForeground2)",
    // Color palette mink tokens
    colorPaletteMinkBackground2: "var(--colorPaletteMinkBackground2)",
    colorPaletteMinkBorderActive: "var(--colorPaletteMinkBorderActive)",
    colorPaletteMinkForeground2: "var(--colorPaletteMinkForeground2)",
    // Color palette navy tokens
    colorPaletteNavyBackground2: "var(--colorPaletteNavyBackground2)",
    colorPaletteNavyBorderActive: "var(--colorPaletteNavyBorderActive)",
    colorPaletteNavyForeground2: "var(--colorPaletteNavyForeground2)",
    // Color palette peach tokens
    colorPalettePeachBackground2: "var(--colorPalettePeachBackground2)",
    colorPalettePeachBorderActive: "var(--colorPalettePeachBorderActive)",
    colorPalettePeachForeground2: "var(--colorPalettePeachForeground2)",
    // Color palette pink tokens
    colorPalettePinkBackground2: "var(--colorPalettePinkBackground2)",
    colorPalettePinkBorderActive: "var(--colorPalettePinkBorderActive)",
    colorPalettePinkForeground2: "var(--colorPalettePinkForeground2)",
    // Color palette platinum tokens
    colorPalettePlatinumBackground2: "var(--colorPalettePlatinumBackground2)",
    colorPalettePlatinumBorderActive: "var(--colorPalettePlatinumBorderActive)",
    colorPalettePlatinumForeground2: "var(--colorPalettePlatinumForeground2)",
    // Color palette plum tokens
    colorPalettePlumBackground2: "var(--colorPalettePlumBackground2)",
    colorPalettePlumBorderActive: "var(--colorPalettePlumBorderActive)",
    colorPalettePlumForeground2: "var(--colorPalettePlumForeground2)",
    // Color palette pumpkin tokens
    colorPalettePumpkinBackground2: "var(--colorPalettePumpkinBackground2)",
    colorPalettePumpkinBorderActive: "var(--colorPalettePumpkinBorderActive)",
    colorPalettePumpkinForeground2: "var(--colorPalettePumpkinForeground2)",
    // Color palette purple tokens
    colorPalettePurpleBackground2: "var(--colorPalettePurpleBackground2)",
    colorPalettePurpleBorderActive: "var(--colorPalettePurpleBorderActive)",
    colorPalettePurpleForeground2: "var(--colorPalettePurpleForeground2)",
    // Color palette royal blue tokens
    colorPaletteRoyalBlueBackground2: "var(--colorPaletteRoyalBlueBackground2)",
    colorPaletteRoyalBlueBorderActive: "var(--colorPaletteRoyalBlueBorderActive)",
    colorPaletteRoyalBlueForeground2: "var(--colorPaletteRoyalBlueForeground2)",
    // Color palette seafoam tokens
    colorPaletteSeafoamBackground2: "var(--colorPaletteSeafoamBackground2)",
    colorPaletteSeafoamBorderActive: "var(--colorPaletteSeafoamBorderActive)",
    colorPaletteSeafoamForeground2: "var(--colorPaletteSeafoamForeground2)",
    // Color palette steel tokens
    colorPaletteSteelBackground2: "var(--colorPaletteSteelBackground2)",
    colorPaletteSteelBorderActive: "var(--colorPaletteSteelBorderActive)",
    colorPaletteSteelForeground2: "var(--colorPaletteSteelForeground2)",
    // Color palette teal tokens
    colorPaletteTealBackground2: "var(--colorPaletteTealBackground2)",
    colorPaletteTealBorderActive: "var(--colorPaletteTealBorderActive)",
    colorPaletteTealForeground2: "var(--colorPaletteTealForeground2)",
    // Color status success tokens
    colorStatusSuccessBackground1: "var(--colorStatusSuccessBackground1)",
    colorStatusSuccessBackground2: "var(--colorStatusSuccessBackground2)",
    colorStatusSuccessBackground3: "var(--colorStatusSuccessBackground3)",
    colorStatusSuccessForeground1: "var(--colorStatusSuccessForeground1)",
    colorStatusSuccessForeground2: "var(--colorStatusSuccessForeground2)",
    colorStatusSuccessForeground3: "var(--colorStatusSuccessForeground3)",
    colorStatusSuccessForegroundInverted: "var(--colorStatusSuccessForegroundInverted)",
    colorStatusSuccessBorderActive: "var(--colorStatusSuccessBorderActive)",
    colorStatusSuccessBorder1: "var(--colorStatusSuccessBorder1)",
    colorStatusSuccessBorder2: "var(--colorStatusSuccessBorder2)",
    // Color status warning tokens
    colorStatusWarningBackground1: "var(--colorStatusWarningBackground1)",
    colorStatusWarningBackground2: "var(--colorStatusWarningBackground2)",
    colorStatusWarningBackground3: "var(--colorStatusWarningBackground3)",
    colorStatusWarningForeground1: "var(--colorStatusWarningForeground1)",
    colorStatusWarningForeground2: "var(--colorStatusWarningForeground2)",
    colorStatusWarningForeground3: "var(--colorStatusWarningForeground3)",
    colorStatusWarningForegroundInverted: "var(--colorStatusWarningForegroundInverted)",
    colorStatusWarningBorderActive: "var(--colorStatusWarningBorderActive)",
    colorStatusWarningBorder1: "var(--colorStatusWarningBorder1)",
    colorStatusWarningBorder2: "var(--colorStatusWarningBorder2)",
    // Color status danger tokens
    colorStatusDangerBackground1: "var(--colorStatusDangerBackground1)",
    colorStatusDangerBackground2: "var(--colorStatusDangerBackground2)",
    colorStatusDangerBackground3: "var(--colorStatusDangerBackground3)",
    colorStatusDangerForeground1: "var(--colorStatusDangerForeground1)",
    colorStatusDangerForeground2: "var(--colorStatusDangerForeground2)",
    colorStatusDangerForeground3: "var(--colorStatusDangerForeground3)",
    colorStatusDangerForegroundInverted: "var(--colorStatusDangerForegroundInverted)",
    colorStatusDangerBorderActive: "var(--colorStatusDangerBorderActive)",
    colorStatusDangerBorder1: "var(--colorStatusDangerBorder1)",
    colorStatusDangerBorder2: "var(--colorStatusDangerBorder2)",
    // Border radius tokens
    borderRadiusNone: "var(--borderRadiusNone)",
    borderRadiusSmall: "var(--borderRadiusSmall)",
    borderRadiusMedium: "var(--borderRadiusMedium)",
    borderRadiusLarge: "var(--borderRadiusLarge)",
    borderRadiusXLarge: "var(--borderRadiusXLarge)",
    borderRadiusCircular: "var(--borderRadiusCircular)",
    // Font family tokens
    fontFamilyBase: "var(--fontFamilyBase)",
    fontFamilyMonospace: "var(--fontFamilyMonospace)",
    fontFamilyNumeric: "var(--fontFamilyNumeric)",
    // Font size tokens
    fontSizeBase100: "var(--fontSizeBase100)",
    fontSizeBase200: "var(--fontSizeBase200)",
    fontSizeBase300: "var(--fontSizeBase300)",
    fontSizeBase400: "var(--fontSizeBase400)",
    fontSizeBase500: "var(--fontSizeBase500)",
    fontSizeBase600: "var(--fontSizeBase600)",
    fontSizeHero700: "var(--fontSizeHero700)",
    fontSizeHero800: "var(--fontSizeHero800)",
    fontSizeHero900: "var(--fontSizeHero900)",
    fontSizeHero1000: "var(--fontSizeHero1000)",
    // Font weight tokens
    fontWeightRegular: "var(--fontWeightRegular)",
    fontWeightMedium: "var(--fontWeightMedium)",
    fontWeightSemibold: "var(--fontWeightSemibold)",
    fontWeightBold: "var(--fontWeightBold)",
    // Line height tokens
    lineHeightBase100: "var(--lineHeightBase100)",
    lineHeightBase200: "var(--lineHeightBase200)",
    lineHeightBase300: "var(--lineHeightBase300)",
    lineHeightBase400: "var(--lineHeightBase400)",
    lineHeightBase500: "var(--lineHeightBase500)",
    lineHeightBase600: "var(--lineHeightBase600)",
    lineHeightHero700: "var(--lineHeightHero700)",
    lineHeightHero800: "var(--lineHeightHero800)",
    lineHeightHero900: "var(--lineHeightHero900)",
    lineHeightHero1000: "var(--lineHeightHero1000)",
    // Shadow tokens
    shadow2: "var(--shadow2)",
    shadow4: "var(--shadow4)",
    shadow8: "var(--shadow8)",
    shadow16: "var(--shadow16)",
    shadow28: "var(--shadow28)",
    shadow64: "var(--shadow64)",
    // Shadow brand tokens
    shadow2Brand: "var(--shadow2Brand)",
    shadow4Brand: "var(--shadow4Brand)",
    shadow8Brand: "var(--shadow8Brand)",
    shadow16Brand: "var(--shadow16Brand)",
    shadow28Brand: "var(--shadow28Brand)",
    shadow64Brand: "var(--shadow64Brand)",
    // Stroke width tokens
    strokeWidthThin: "var(--strokeWidthThin)",
    strokeWidthThick: "var(--strokeWidthThick)",
    strokeWidthThicker: "var(--strokeWidthThicker)",
    strokeWidthThickest: "var(--strokeWidthThickest)",
    // Spacings
    spacingHorizontalNone: "var(--spacingHorizontalNone)",
    spacingHorizontalXXS: "var(--spacingHorizontalXXS)",
    spacingHorizontalXS: "var(--spacingHorizontalXS)",
    spacingHorizontalSNudge: "var(--spacingHorizontalSNudge)",
    spacingHorizontalS: "var(--spacingHorizontalS)",
    spacingHorizontalMNudge: "var(--spacingHorizontalMNudge)",
    spacingHorizontalM: "var(--spacingHorizontalM)",
    spacingHorizontalL: "var(--spacingHorizontalL)",
    spacingHorizontalXL: "var(--spacingHorizontalXL)",
    spacingHorizontalXXL: "var(--spacingHorizontalXXL)",
    spacingHorizontalXXXL: "var(--spacingHorizontalXXXL)",
    spacingVerticalNone: "var(--spacingVerticalNone)",
    spacingVerticalXXS: "var(--spacingVerticalXXS)",
    spacingVerticalXS: "var(--spacingVerticalXS)",
    spacingVerticalSNudge: "var(--spacingVerticalSNudge)",
    spacingVerticalS: "var(--spacingVerticalS)",
    spacingVerticalMNudge: "var(--spacingVerticalMNudge)",
    spacingVerticalM: "var(--spacingVerticalM)",
    spacingVerticalL: "var(--spacingVerticalL)",
    spacingVerticalXL: "var(--spacingVerticalXL)",
    spacingVerticalXXL: "var(--spacingVerticalXXL)",
    spacingVerticalXXXL: "var(--spacingVerticalXXXL)",
    // Durations
    durationUltraFast: "var(--durationUltraFast)",
    durationFaster: "var(--durationFaster)",
    durationFast: "var(--durationFast)",
    durationNormal: "var(--durationNormal)",
    durationGentle: "var(--durationGentle)",
    durationSlow: "var(--durationSlow)",
    durationSlower: "var(--durationSlower)",
    durationUltraSlow: "var(--durationUltraSlow)",
    // Curves
    curveAccelerateMax: "var(--curveAccelerateMax)",
    curveAccelerateMid: "var(--curveAccelerateMid)",
    curveAccelerateMin: "var(--curveAccelerateMin)",
    curveDecelerateMax: "var(--curveDecelerateMax)",
    curveDecelerateMid: "var(--curveDecelerateMid)",
    curveDecelerateMin: "var(--curveDecelerateMin)",
    curveEasyEaseMax: "var(--curveEasyEaseMax)",
    curveEasyEase: "var(--curveEasyEase)",
    curveLinear: "var(--curveLinear)"
  };

  // ../node_modules/@fluentui/tokens/lib/utils/shadows.js
  function createShadowTokens(ambientColor, keyColor, tokenSuffix = "") {
    return {
      [`shadow2${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 1px 2px ${keyColor}`,
      [`shadow4${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 2px 4px ${keyColor}`,
      [`shadow8${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 4px 8px ${keyColor}`,
      [`shadow16${tokenSuffix}`]: `0 0 2px ${ambientColor}, 0 8px 16px ${keyColor}`,
      [`shadow28${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 14px 28px ${keyColor}`,
      [`shadow64${tokenSuffix}`]: `0 0 8px ${ambientColor}, 0 32px 64px ${keyColor}`
    };
  }

  // ../node_modules/@fluentui/tokens/lib/global/brandColors.js
  var brandWeb = {
    10: `#061724`,
    20: `#082338`,
    30: `#0a2e4a`,
    40: `#0c3b5e`,
    50: `#0e4775`,
    60: `#0f548c`,
    70: `#115ea3`,
    80: `#0f6cbd`,
    90: `#2886de`,
    100: `#479ef5`,
    110: `#62abf5`,
    120: `#77b7f7`,
    130: `#96c6fa`,
    140: `#b4d6fa`,
    150: `#cfe4fa`,
    160: `#ebf3fc`
  };

  // ../node_modules/@fluentui/tokens/lib/alias/darkColorPalette.js
  var statusColorPaletteTokens = statusSharedColorNames.reduce((acc, sharedColor) => {
    const color2 = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
    const sharedColorTokens = {
      [`colorPalette${color2}Background1`]: statusSharedColors[sharedColor].shade40,
      [`colorPalette${color2}Background2`]: statusSharedColors[sharedColor].shade30,
      [`colorPalette${color2}Background3`]: statusSharedColors[sharedColor].primary,
      [`colorPalette${color2}Foreground1`]: statusSharedColors[sharedColor].tint30,
      [`colorPalette${color2}Foreground2`]: statusSharedColors[sharedColor].tint40,
      [`colorPalette${color2}Foreground3`]: statusSharedColors[sharedColor].tint20,
      [`colorPalette${color2}BorderActive`]: statusSharedColors[sharedColor].tint30,
      [`colorPalette${color2}Border1`]: statusSharedColors[sharedColor].primary,
      [`colorPalette${color2}Border2`]: statusSharedColors[sharedColor].tint20
    };
    return Object.assign(acc, sharedColorTokens);
  }, {});
  statusColorPaletteTokens.colorPaletteRedForeground3 = statusSharedColors.red.tint30;
  statusColorPaletteTokens.colorPaletteRedBorder2 = statusSharedColors.red.tint30;
  statusColorPaletteTokens.colorPaletteGreenForeground3 = statusSharedColors.green.tint40;
  statusColorPaletteTokens.colorPaletteGreenBorder2 = statusSharedColors.green.tint40;
  statusColorPaletteTokens.colorPaletteDarkOrangeForeground3 = statusSharedColors.darkOrange.tint30;
  statusColorPaletteTokens.colorPaletteDarkOrangeBorder2 = statusSharedColors.darkOrange.tint30;
  statusColorPaletteTokens.colorPaletteRedForegroundInverted = statusSharedColors.red.primary;
  statusColorPaletteTokens.colorPaletteGreenForegroundInverted = statusSharedColors.green.primary;
  statusColorPaletteTokens.colorPaletteYellowForegroundInverted = statusSharedColors.yellow.shade30;
  var personaColorPaletteTokens = personaSharedColorNames.reduce((acc, sharedColor) => {
    const color2 = sharedColor.slice(0, 1).toUpperCase() + sharedColor.slice(1);
    const sharedColorTokens = {
      [`colorPalette${color2}Background2`]: personaSharedColors[sharedColor].shade30,
      [`colorPalette${color2}Foreground2`]: personaSharedColors[sharedColor].tint40,
      [`colorPalette${color2}BorderActive`]: personaSharedColors[sharedColor].tint30
    };
    return Object.assign(acc, sharedColorTokens);
  }, {});
  personaColorPaletteTokens.colorPaletteDarkRedBackground2 = personaSharedColors.darkRed.shade20;
  personaColorPaletteTokens.colorPalettePlumBackground2 = personaSharedColors.plum.shade20;
  var colorPaletteTokens = {
    ...statusColorPaletteTokens,
    ...personaColorPaletteTokens
  };
  var colorStatusTokens = Object.entries(statusColorMapping).reduce((acc, [statusColor, sharedColor]) => {
    const color2 = statusColor.slice(0, 1).toUpperCase() + statusColor.slice(1);
    const statusColorTokens = {
      [`colorStatus${color2}Background1`]: mappedStatusColors[sharedColor].shade40,
      [`colorStatus${color2}Background2`]: mappedStatusColors[sharedColor].shade30,
      [`colorStatus${color2}Background3`]: mappedStatusColors[sharedColor].primary,
      [`colorStatus${color2}Foreground1`]: mappedStatusColors[sharedColor].tint30,
      [`colorStatus${color2}Foreground2`]: mappedStatusColors[sharedColor].tint40,
      [`colorStatus${color2}Foreground3`]: mappedStatusColors[sharedColor].tint20,
      [`colorStatus${color2}BorderActive`]: mappedStatusColors[sharedColor].tint30,
      [`colorStatus${color2}ForegroundInverted`]: mappedStatusColors[sharedColor].shade10,
      [`colorStatus${color2}Border1`]: mappedStatusColors[sharedColor].primary,
      [`colorStatus${color2}Border2`]: mappedStatusColors[sharedColor].tint20
    };
    return Object.assign(acc, statusColorTokens);
  }, {});
  colorStatusTokens.colorStatusDangerForeground3 = mappedStatusColors[statusColorMapping.danger].tint30;
  colorStatusTokens.colorStatusDangerBorder2 = mappedStatusColors[statusColorMapping.danger].tint30;
  colorStatusTokens.colorStatusSuccessForeground3 = mappedStatusColors[statusColorMapping.success].tint40;
  colorStatusTokens.colorStatusSuccessBorder2 = mappedStatusColors[statusColorMapping.success].tint40;
  colorStatusTokens.colorStatusWarningForegroundInverted = mappedStatusColors[statusColorMapping.warning].shade20;

  // ../node_modules/@fluentui/tokens/lib/alias/darkColor.js
  var generateColorTokens = (brand) => ({
    colorNeutralForeground1: white,
    colorNeutralForeground1Hover: white,
    colorNeutralForeground1Pressed: white,
    colorNeutralForeground1Selected: white,
    colorNeutralForeground2: grey[84],
    colorNeutralForeground2Hover: white,
    colorNeutralForeground2Pressed: white,
    colorNeutralForeground2Selected: white,
    colorNeutralForeground2BrandHover: brand[100],
    colorNeutralForeground2BrandPressed: brand[90],
    colorNeutralForeground2BrandSelected: brand[100],
    colorNeutralForeground3: grey[68],
    colorNeutralForeground3Hover: grey[84],
    colorNeutralForeground3Pressed: grey[84],
    colorNeutralForeground3Selected: grey[84],
    colorNeutralForeground3BrandHover: brand[100],
    colorNeutralForeground3BrandPressed: brand[90],
    colorNeutralForeground3BrandSelected: brand[100],
    colorNeutralForeground4: grey[60],
    colorNeutralForegroundDisabled: grey[36],
    colorNeutralForegroundInvertedDisabled: whiteAlpha[40],
    colorBrandForegroundLink: brand[100],
    colorBrandForegroundLinkHover: brand[110],
    colorBrandForegroundLinkPressed: brand[90],
    colorBrandForegroundLinkSelected: brand[100],
    colorNeutralForeground2Link: grey[84],
    colorNeutralForeground2LinkHover: white,
    colorNeutralForeground2LinkPressed: white,
    colorNeutralForeground2LinkSelected: white,
    colorCompoundBrandForeground1: brand[100],
    colorCompoundBrandForeground1Hover: brand[110],
    colorCompoundBrandForeground1Pressed: brand[90],
    colorBrandForeground1: brand[100],
    colorBrandForeground2: brand[110],
    colorBrandForeground2Hover: brand[130],
    colorBrandForeground2Pressed: brand[160],
    colorNeutralForeground1Static: grey[14],
    colorNeutralForegroundStaticInverted: white,
    colorNeutralForegroundInverted: grey[14],
    colorNeutralForegroundInvertedHover: grey[14],
    colorNeutralForegroundInvertedPressed: grey[14],
    colorNeutralForegroundInvertedSelected: grey[14],
    colorNeutralForegroundInverted2: grey[14],
    colorNeutralForegroundOnBrand: white,
    colorNeutralForegroundInvertedLink: white,
    colorNeutralForegroundInvertedLinkHover: white,
    colorNeutralForegroundInvertedLinkPressed: white,
    colorNeutralForegroundInvertedLinkSelected: white,
    colorBrandForegroundInverted: brand[80],
    colorBrandForegroundInvertedHover: brand[70],
    colorBrandForegroundInvertedPressed: brand[60],
    colorBrandForegroundOnLight: brand[80],
    colorBrandForegroundOnLightHover: brand[70],
    colorBrandForegroundOnLightPressed: brand[50],
    colorBrandForegroundOnLightSelected: brand[60],
    colorNeutralBackground1: grey[16],
    colorNeutralBackground1Hover: grey[24],
    colorNeutralBackground1Pressed: grey[12],
    colorNeutralBackground1Selected: grey[22],
    colorNeutralBackground2: grey[12],
    colorNeutralBackground2Hover: grey[20],
    colorNeutralBackground2Pressed: grey[8],
    colorNeutralBackground2Selected: grey[18],
    colorNeutralBackground3: grey[8],
    colorNeutralBackground3Hover: grey[16],
    colorNeutralBackground3Pressed: grey[4],
    colorNeutralBackground3Selected: grey[14],
    colorNeutralBackground4: grey[4],
    colorNeutralBackground4Hover: grey[12],
    colorNeutralBackground4Pressed: black,
    colorNeutralBackground4Selected: grey[10],
    colorNeutralBackground5: black,
    colorNeutralBackground5Hover: grey[8],
    colorNeutralBackground5Pressed: grey[2],
    colorNeutralBackground5Selected: grey[6],
    colorNeutralBackground6: grey[20],
    colorNeutralBackgroundInverted: white,
    colorNeutralBackgroundStatic: grey[24],
    colorNeutralBackgroundAlpha: grey10Alpha[50],
    colorNeutralBackgroundAlpha2: grey12Alpha[70],
    colorSubtleBackground: "transparent",
    colorSubtleBackgroundHover: grey[22],
    colorSubtleBackgroundPressed: grey[18],
    colorSubtleBackgroundSelected: grey[20],
    colorSubtleBackgroundLightAlphaHover: grey14Alpha[80],
    colorSubtleBackgroundLightAlphaPressed: grey14Alpha[50],
    colorSubtleBackgroundLightAlphaSelected: "transparent",
    colorSubtleBackgroundInverted: "transparent",
    colorSubtleBackgroundInvertedHover: blackAlpha[10],
    colorSubtleBackgroundInvertedPressed: blackAlpha[30],
    colorSubtleBackgroundInvertedSelected: blackAlpha[20],
    colorTransparentBackground: "transparent",
    colorTransparentBackgroundHover: "transparent",
    colorTransparentBackgroundPressed: "transparent",
    colorTransparentBackgroundSelected: "transparent",
    colorNeutralBackgroundDisabled: grey[8],
    colorNeutralBackgroundInvertedDisabled: whiteAlpha[10],
    colorNeutralStencil1: grey[34],
    colorNeutralStencil2: grey[20],
    colorNeutralStencil1Alpha: whiteAlpha[10],
    colorNeutralStencil2Alpha: whiteAlpha[5],
    colorBackgroundOverlay: blackAlpha[50],
    colorScrollbarOverlay: whiteAlpha[60],
    colorBrandBackground: brand[70],
    colorBrandBackgroundHover: brand[80],
    colorBrandBackgroundPressed: brand[40],
    colorBrandBackgroundSelected: brand[60],
    colorCompoundBrandBackground: brand[100],
    colorCompoundBrandBackgroundHover: brand[110],
    colorCompoundBrandBackgroundPressed: brand[90],
    colorBrandBackgroundStatic: brand[80],
    colorBrandBackground2: brand[20],
    colorBrandBackground2Hover: brand[40],
    colorBrandBackground2Pressed: brand[10],
    colorBrandBackgroundInverted: white,
    colorBrandBackgroundInvertedHover: brand[160],
    colorBrandBackgroundInvertedPressed: brand[140],
    colorBrandBackgroundInvertedSelected: brand[150],
    colorNeutralStrokeAccessible: grey[68],
    colorNeutralStrokeAccessibleHover: grey[74],
    colorNeutralStrokeAccessiblePressed: grey[70],
    colorNeutralStrokeAccessibleSelected: brand[100],
    colorNeutralStroke1: grey[40],
    colorNeutralStroke1Hover: grey[46],
    colorNeutralStroke1Pressed: grey[42],
    colorNeutralStroke1Selected: grey[44],
    colorNeutralStroke2: grey[32],
    colorNeutralStroke3: grey[24],
    colorNeutralStrokeSubtle: grey[4],
    colorNeutralStrokeOnBrand: grey[16],
    colorNeutralStrokeOnBrand2: white,
    colorNeutralStrokeOnBrand2Hover: white,
    colorNeutralStrokeOnBrand2Pressed: white,
    colorNeutralStrokeOnBrand2Selected: white,
    colorBrandStroke1: brand[100],
    colorBrandStroke2: brand[50],
    colorBrandStroke2Hover: brand[50],
    colorBrandStroke2Pressed: brand[30],
    colorBrandStroke2Contrast: brand[50],
    colorCompoundBrandStroke: brand[100],
    colorCompoundBrandStrokeHover: brand[110],
    colorCompoundBrandStrokePressed: brand[90],
    colorNeutralStrokeDisabled: grey[26],
    colorNeutralStrokeInvertedDisabled: whiteAlpha[40],
    colorTransparentStroke: "transparent",
    colorTransparentStrokeInteractive: "transparent",
    colorTransparentStrokeDisabled: "transparent",
    colorNeutralStrokeAlpha: whiteAlpha[10],
    colorNeutralStrokeAlpha2: whiteAlpha[20],
    colorStrokeFocus1: black,
    colorStrokeFocus2: white,
    colorNeutralShadowAmbient: "rgba(0,0,0,0.24)",
    colorNeutralShadowKey: "rgba(0,0,0,0.28)",
    colorNeutralShadowAmbientLighter: "rgba(0,0,0,0.12)",
    colorNeutralShadowKeyLighter: "rgba(0,0,0,0.14)",
    colorNeutralShadowAmbientDarker: "rgba(0,0,0,0.40)",
    colorNeutralShadowKeyDarker: "rgba(0,0,0,0.48)",
    colorBrandShadowAmbient: "rgba(0,0,0,0.30)",
    colorBrandShadowKey: "rgba(0,0,0,0.25)"
  });

  // ../node_modules/@fluentui/tokens/lib/utils/createDarkTheme.js
  var createDarkTheme = (brand) => {
    const colorTokens = generateColorTokens(brand);
    return {
      ...borderRadius2,
      ...fontSizes,
      ...lineHeights,
      ...fontFamilies,
      ...fontWeights,
      ...strokeWidths,
      ...horizontalSpacings,
      ...verticalSpacings,
      ...durations,
      ...curves,
      ...colorTokens,
      ...colorPaletteTokens,
      ...colorStatusTokens,
      ...createShadowTokens(colorTokens.colorNeutralShadowAmbient, colorTokens.colorNeutralShadowKey),
      ...createShadowTokens(colorTokens.colorBrandShadowAmbient, colorTokens.colorBrandShadowKey, "Brand")
    };
  };

  // ../node_modules/@fluentui/tokens/lib/themes/web/darkTheme.js
  var webDarkTheme = createDarkTheme(brandWeb);

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProvider.js
  var React34 = __toESM(require_react());

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderThemeStyleTag.js
  var React33 = __toESM(require_react());

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderStyles.styles.js
  var fluentProviderClassNames = {
    root: "fui-FluentProvider"
  };
  var useStyles = /* @__PURE__ */ __styles({
    root: {
      sj55zd: "f19n0e5",
      De3pzq: "fxugw4r",
      fsow6f: ["f1o700av", "fes3tcz"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    }
  }, {
    d: [".f19n0e5{color:var(--colorNeutralForeground1);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f1o700av{text-align:left;}", ".fes3tcz{text-align:right;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}"]
  });
  var useFluentProviderStyles_unstable = (state) => {
    const renderer = useRenderer();
    const styles2 = useStyles({
      dir: state.dir,
      renderer
    });
    state.root.className = mergeClasses(fluentProviderClassNames.root, state.themeClassName, styles2.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderThemeStyleTag.js
  var useInsertionEffect4 = React33["useInsertionEffect"] ? React33["useInsertionEffect"] : useIsomorphicLayoutEffect;
  var createStyleTag = (target, elementAttributes) => {
    if (!target) {
      return void 0;
    }
    const tag = target.createElement("style");
    Object.keys(elementAttributes).forEach((attrName) => {
      tag.setAttribute(attrName, elementAttributes[attrName]);
    });
    target.head.appendChild(tag);
    return tag;
  };
  var insertSheet = (tag, rule) => {
    const sheet2 = tag.sheet;
    if (sheet2) {
      if (sheet2.cssRules.length > 0) {
        sheet2.deleteRule(0);
      }
      sheet2.insertRule(rule, 0);
    } else if (true) {
      console.error("FluentProvider: No sheet available on styleTag, styles will not be inserted into DOM.");
    }
  };
  var useFluentProviderThemeStyleTag = (options) => {
    const { targetDocument, theme, rendererAttributes } = options;
    const styleTag = React33.useRef();
    const styleTagId = useId2(fluentProviderClassNames.root);
    const styleElementAttributes = rendererAttributes;
    const cssVarsAsString = React33.useMemo(() => {
      return theme ? Object.keys(theme).reduce((cssVarRule, cssVar) => {
        cssVarRule += `--${cssVar}: ${theme[cssVar]}; `;
        return cssVarRule;
      }, "") : "";
    }, [
      theme
    ]);
    const rule = `.${styleTagId} { ${cssVarsAsString} }`;
    if (true) {
      React33.useMemo(() => {
        if (targetDocument) {
          const providerSelector = `.${fluentProviderClassNames.root}.${styleTagId}`;
          const providerElements = targetDocument.querySelectorAll(providerSelector);
          const isSSR = targetDocument.querySelector(`${providerSelector} > style[id="${styleTagId}"]`) !== null;
          const elementsCount = isSSR ? 1 : 0;
          if (providerElements.length > elementsCount) {
            console.error([
              "@fluentui/react-provider: There are conflicting ids in your DOM.",
              "Please make sure that you configured your application properly.",
              "\n",
              "\n",
              "Configuration guide: https://aka.ms/fluentui-conflicting-ids"
            ].join(" "));
          }
        }
      }, []);
    }
    useHandleSSRStyleElements(targetDocument, styleTagId);
    useInsertionEffect4(() => {
      var _targetDocument;
      const ssrStyleElement = (_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.getElementById(styleTagId);
      if (ssrStyleElement) {
        styleTag.current = ssrStyleElement;
      } else {
        styleTag.current = createStyleTag(targetDocument, {
          ...styleElementAttributes,
          id: styleTagId
        });
        if (styleTag.current) {
          insertSheet(styleTag.current, rule);
        }
      }
      return () => {
        var _styleTag_current;
        (_styleTag_current = styleTag.current) === null || _styleTag_current === void 0 ? void 0 : _styleTag_current.remove();
      };
    }, [
      styleTagId,
      targetDocument,
      rule,
      styleElementAttributes
    ]);
    return {
      styleTagId,
      rule
    };
  };
  function useHandleSSRStyleElements(targetDocument, styleTagId) {
    React33.useState(() => {
      if (!targetDocument) {
        return;
      }
      const themeStyleElement = targetDocument.getElementById(styleTagId);
      if (themeStyleElement) {
        targetDocument.head.append(themeStyleElement);
      }
    });
  }

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProvider.js
  var useFluentProvider_unstable = (props, ref) => {
    const parentContext = useFluent();
    const parentTheme = useTheme();
    const parentOverrides = useOverrides();
    const parentCustomStyleHooks = React34.useContext(CustomStyleHooksContext) || {};
    const {
      applyStylesToPortals = true,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      dir = parentContext.dir,
      targetDocument = parentContext.targetDocument,
      theme,
      overrides_unstable: overrides = {}
    } = props;
    const mergedTheme = shallowMerge(parentTheme, theme);
    const mergedOverrides = shallowMerge(parentOverrides, overrides);
    const mergedCustomStyleHooks = shallowMerge(parentCustomStyleHooks, customStyleHooks_unstable);
    const renderer = useRenderer();
    var _renderer_styleElementAttributes;
    const { styleTagId, rule } = useFluentProviderThemeStyleTag({
      theme: mergedTheme,
      targetDocument,
      rendererAttributes: (_renderer_styleElementAttributes = renderer.styleElementAttributes) !== null && _renderer_styleElementAttributes !== void 0 ? _renderer_styleElementAttributes : {}
    });
    if (true) {
      React34.useEffect(() => {
        if (mergedTheme === void 0) {
          console.warn([
            '@fluentui/react-provider: FluentProvider does not have your "theme" defined.',
            "Make sure that your top-level FluentProvider has set a `theme` prop or you're setting the theme in your child FluentProvider."
          ].join(" "));
        }
      }, []);
    }
    return {
      applyStylesToPortals,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable: mergedCustomStyleHooks,
      dir,
      targetDocument,
      theme: mergedTheme,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable: mergedOverrides,
      themeClassName: styleTagId,
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ...props,
        dir,
        ref: useMergedRefs(ref, useFocusVisible({
          targetDocument
        }))
      }), {
        elementType: "div"
      }),
      serverStyleProps: {
        cssRule: rule,
        attributes: {
          ...renderer.styleElementAttributes,
          id: styleTagId
        }
      }
    };
  };
  function shallowMerge(a2, b3) {
    if (a2 && b3) {
      return {
        ...a2,
        ...b3
      };
    }
    if (a2) {
      return a2;
    }
    return b3;
  }
  function useTheme() {
    return React34.useContext(ThemeContext);
  }

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/useFluentProviderContextValues.js
  var React35 = __toESM(require_react());
  function useFluentProviderContextValues_unstable(state) {
    const {
      applyStylesToPortals,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      dir,
      root: root151,
      targetDocument,
      theme,
      themeClassName,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable
    } = state;
    const provider = React35.useMemo(() => ({
      dir,
      targetDocument
    }), [
      dir,
      targetDocument
    ]);
    const [tooltip] = React35.useState(() => ({}));
    const iconDirection = React35.useMemo(() => ({
      textDirection: dir
    }), [
      dir
    ]);
    return {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      customStyleHooks_unstable,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      overrides_unstable,
      provider,
      textDirection: dir,
      iconDirection,
      tooltip,
      theme,
      themeClassName: applyStylesToPortals ? root151.className : themeClassName
    };
  }

  // ../node_modules/@fluentui/react-provider/lib/components/FluentProvider/FluentProvider.js
  var FluentProvider = /* @__PURE__ */ React36.forwardRef((props, ref) => {
    const state = useFluentProvider_unstable(props, ref);
    useFluentProviderStyles_unstable(state);
    const contextValues = useFluentProviderContextValues_unstable(state);
    return renderFluentProvider_unstable(state, contextValues);
  });
  FluentProvider.displayName = "FluentProvider";

  // ../node_modules/@fluentui/react-context-selector/lib/createContext.js
  var React37 = __toESM(require_react());
  var import_scheduler = __toESM(require_scheduler2());
  var createProvider = (Original) => {
    const Provider3 = (props) => {
      const valueRef = React37.useRef(props.value);
      const versionRef = React37.useRef(0);
      const contextValue = React37.useRef();
      if (!contextValue.current) {
        contextValue.current = {
          value: valueRef,
          version: versionRef,
          listeners: []
        };
      }
      useIsomorphicLayoutEffect(() => {
        valueRef.current = props.value;
        versionRef.current += 1;
        (0, import_scheduler.unstable_runWithPriority)(import_scheduler.unstable_NormalPriority, () => {
          contextValue.current.listeners.forEach((listener) => {
            listener([
              versionRef.current,
              props.value
            ]);
          });
        });
      }, [
        props.value
      ]);
      return React37.createElement(Original, {
        value: contextValue.current
      }, props.children);
    };
    if (true) {
      Provider3.displayName = "ContextSelector.Provider";
    }
    return Provider3;
  };
  var createContext14 = (defaultValue2) => {
    const context = React37.createContext({
      value: {
        current: defaultValue2
      },
      version: {
        current: -1
      },
      listeners: []
    });
    context.Provider = createProvider(context.Provider);
    delete context.Consumer;
    return context;
  };

  // ../node_modules/@fluentui/react-context-selector/lib/useContextSelector.js
  var React38 = __toESM(require_react());
  var useContextSelector = (context, selector) => {
    const contextValue = React38.useContext(context);
    const { value: { current: value }, version: { current: version2 }, listeners } = contextValue;
    const selected = selector(value);
    const [state, dispatch] = React38.useReducer((prevState, payload) => {
      if (!payload) {
        return [
          value,
          selected
        ];
      }
      if (payload[0] <= version2) {
        if (objectIs(prevState[1], selected)) {
          return prevState;
        }
        return [
          value,
          selected
        ];
      }
      try {
        if (objectIs(prevState[0], payload[1])) {
          return prevState;
        }
        const nextSelected = selector(payload[1]);
        if (objectIs(prevState[1], nextSelected)) {
          return prevState;
        }
        return [
          payload[1],
          nextSelected
        ];
      } catch (e2) {
      }
      return [
        prevState[0],
        prevState[1]
      ];
    }, [
      value,
      selected
    ]);
    if (!objectIs(state[1], selected)) {
      dispatch(void 0);
    }
    useIsomorphicLayoutEffect(() => {
      listeners.push(dispatch);
      return () => {
        const index2 = listeners.indexOf(dispatch);
        listeners.splice(index2, 1);
      };
    }, [
      listeners
    ]);
    return state[1];
  };
  function is(x, y2) {
    return x === y2 && (x !== 0 || 1 / x === 1 / y2) || x !== x && y2 !== y2;
  }
  var objectIs = (
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore fallback to native if it exists (not in IE11)
    typeof Object.is === "function" ? Object.is : is
  );

  // ../node_modules/@fluentui/react-context-selector/lib/useHasParentContext.js
  var React39 = __toESM(require_react());
  function useHasParentContext(context) {
    const contextValue = React39.useContext(context);
    if (contextValue.version) {
      return contextValue.version.current !== -1;
    }
    return false;
  }

  // ../node_modules/@fluentui/keyboard-keys/lib/keys.js
  var Enter = "Enter";
  var Space = " ";
  var Escape = "Escape";

  // ../node_modules/@fluentui/react-aria/lib/button/useARIAButtonProps.js
  var React40 = __toESM(require_react());
  function useARIAButtonProps(type, props) {
    const { disabled, disabledFocusable = false, ["aria-disabled"]: ariaDisabled, onClick, onKeyDown, onKeyUp, ...rest } = props !== null && props !== void 0 ? props : {};
    const normalizedARIADisabled = typeof ariaDisabled === "string" ? ariaDisabled === "true" : ariaDisabled;
    const isDisabled = disabled || disabledFocusable || normalizedARIADisabled;
    const handleClick = useEventCallback((ev) => {
      if (isDisabled) {
        ev.preventDefault();
        ev.stopPropagation();
      } else {
        var _onClick;
        (_onClick = onClick) === null || _onClick === void 0 ? void 0 : _onClick(ev);
      }
    });
    const handleKeyDown = useEventCallback((ev) => {
      var _onKeyDown2;
      (_onKeyDown2 = onKeyDown) === null || _onKeyDown2 === void 0 ? void 0 : _onKeyDown2(ev);
      if (ev.isDefaultPrevented()) {
        return;
      }
      const key = ev.key;
      if (isDisabled && (key === Enter || key === Space)) {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      if (key === Space) {
        ev.preventDefault();
        return;
      } else if (key === Enter) {
        ev.preventDefault();
        ev.currentTarget.click();
      }
    });
    const handleKeyUp = useEventCallback((ev) => {
      var _onKeyUp2;
      (_onKeyUp2 = onKeyUp) === null || _onKeyUp2 === void 0 ? void 0 : _onKeyUp2(ev);
      if (ev.isDefaultPrevented()) {
        return;
      }
      const key = ev.key;
      if (isDisabled && (key === Enter || key === Space)) {
        ev.preventDefault();
        ev.stopPropagation();
        return;
      }
      if (key === Space) {
        ev.preventDefault();
        ev.currentTarget.click();
      }
    });
    if (type === "button" || type === void 0) {
      return {
        ...rest,
        disabled: disabled && !disabledFocusable,
        "aria-disabled": disabledFocusable ? true : normalizedARIADisabled,
        // onclick should still use internal handler to ensure prevention if disabled
        // if disabledFocusable then there's no requirement for handlers as those events should not be propagated
        onClick: disabledFocusable ? void 0 : handleClick,
        onKeyUp: disabledFocusable ? void 0 : onKeyUp,
        onKeyDown: disabledFocusable ? void 0 : onKeyDown
      };
    } else {
      const resultProps = {
        role: "button",
        tabIndex: disabled && !disabledFocusable ? void 0 : 0,
        ...rest,
        // If it's not a <button> than listeners are required even with disabledFocusable
        // Since you cannot assure the default behavior of the element
        // E.g: <a> will redirect on click
        onClick: handleClick,
        onKeyUp: handleKeyUp,
        onKeyDown: handleKeyDown,
        "aria-disabled": disabled || disabledFocusable || normalizedARIADisabled
      };
      if (type === "a" && isDisabled) {
        resultProps.href = void 0;
      }
      return resultProps;
    }
  }

  // ../node_modules/@fluentui/react-aria/lib/button/useARIAButtonShorthand.js
  var useARIAButtonShorthand = (value, options) => {
    var _shorthand;
    const shorthand = resolveShorthand2(value, options);
    var _shorthand_as;
    const shorthandARIAButton = useARIAButtonProps((_shorthand_as = (_shorthand = shorthand) === null || _shorthand === void 0 ? void 0 : _shorthand.as) !== null && _shorthand_as !== void 0 ? _shorthand_as : "button", shorthand);
    return shorthand && shorthandARIAButton;
  };

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/Portal.js
  var React46 = __toESM(require_react());

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/usePortal.js
  var React44 = __toESM(require_react());

  // ../node_modules/@fluentui/react-portal/lib/virtualParent/setVirtualParent.js
  function setVirtualParent(child, parent) {
    if (!child) {
      return;
    }
    const virtualChild = child;
    if (!virtualChild._virtual) {
      virtualChild._virtual = {};
    }
    virtualChild._virtual.parent = parent;
  }

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/usePortalMountNode.js
  var React43 = __toESM(require_react());

  // ../node_modules/use-disposable/lib/index.js
  var React41 = __toESM(require_react(), 1);
  var React42 = __toESM(require_react(), 1);
  var React210 = __toESM(require_react(), 1);
  var React310 = __toESM(require_react(), 1);
  var getCurrentOwner = () => React41.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;
  var REACT_STRICT_MODE_TYPE = /* @__PURE__ */ Symbol.for("react.strict_mode");
  var useIsStrictMode = () => {
    if (false) {
      return false;
    }
    const isStrictMode = React41.useRef(void 0);
    const reactMajorVersion = React41.useMemo(() => {
      return Number(React41.version.split(".")[0]);
    }, [React41.version]);
    if (isNaN(reactMajorVersion) || reactMajorVersion < 18) {
      return false;
    }
    if (isStrictMode.current === void 0) {
      let currentOwner = getCurrentOwner();
      while (currentOwner && currentOwner.return) {
        currentOwner = currentOwner.return;
        if (currentOwner.type === REACT_STRICT_MODE_TYPE || currentOwner.elementType === REACT_STRICT_MODE_TYPE) {
          isStrictMode.current = true;
        }
      }
    }
    return !!isStrictMode.current;
  };
  var effectSet = /* @__PURE__ */ new WeakSet();
  function useStrictEffect(effect, deps) {
    const currentOwner = getCurrentOwner();
    React210.useEffect(() => {
      if (!effectSet.has(currentOwner)) {
        effectSet.add(currentOwner);
        effect();
        return;
      }
      const dispose = effect();
      return dispose;
    }, deps);
  }
  var memoSet = /* @__PURE__ */ new WeakSet();
  function useStrictMemo(factory, deps) {
    return React310.useMemo(() => {
      const currentOwner = getCurrentOwner();
      if (!memoSet.has(currentOwner)) {
        memoSet.add(currentOwner);
        return null;
      }
      return factory();
    }, deps);
  }
  function useDisposable(factory, deps) {
    var _a5;
    const isStrictMode = useIsStrictMode() && true;
    const useMemo42 = isStrictMode ? useStrictMemo : React42.useMemo;
    const useEffect310 = isStrictMode ? useStrictEffect : React42.useEffect;
    const [disposable, dispose] = (_a5 = useMemo42(() => factory(), deps)) != null ? _a5 : [
      null,
      () => null
    ];
    useEffect310(() => {
      return dispose;
    }, deps);
    return disposable;
  }

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/usePortalMountNodeStyles.styles.js
  var usePortalMountNodeStylesStyles = /* @__PURE__ */ __styles2({
    root: {
      qhf8xq: "f1euv43f",
      Bhzewxz: "f15twtuk",
      oyh7mz: ["f1vgc2s3", "f1e31b4d"],
      j35jbq: ["f1e31b4d", "f1vgc2s3"],
      Bj3rh1h: "f494woh"
    }
  }, {
    d: [".f1euv43f{position:absolute;}", ".f15twtuk{top:0;}", ".f1vgc2s3{left:0;}", ".f1e31b4d{right:0;}", ".f494woh{z-index:1000000;}"]
  });

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/usePortalMountNode.js
  var useInsertionEffect6 = React43["useInsertionEffect"];
  var usePortalMountNode2 = (options) => {
    var _targetDocument;
    const { targetDocument, dir } = useFluent();
    const mountNode = usePortalMountNode();
    const focusVisibleRef = useFocusVisible();
    const classes = usePortalMountNodeStylesStyles();
    const themeClassName = useThemeClassName();
    const className = mergeClasses(themeClassName, classes.root, options.className);
    const targetNode = mountNode !== null && mountNode !== void 0 ? mountNode : (_targetDocument = targetDocument) === null || _targetDocument === void 0 ? void 0 : _targetDocument.body;
    const element2 = useDisposable(() => {
      if (targetNode === void 0 || options.disabled) {
        return [
          null,
          () => null
        ];
      }
      const newElement = targetNode.ownerDocument.createElement("div");
      targetNode.appendChild(newElement);
      return [
        newElement,
        () => newElement.remove()
      ];
    }, [
      targetNode
    ]);
    if (useInsertionEffect6) {
      useInsertionEffect6(() => {
        if (!element2) {
          return;
        }
        const classesToApply = className.split(" ").filter(Boolean);
        element2.classList.add(...classesToApply);
        element2.setAttribute("dir", dir);
        focusVisibleRef.current = element2;
        return () => {
          element2.classList.remove(...classesToApply);
          element2.removeAttribute("dir");
        };
      }, [
        className,
        dir,
        element2,
        focusVisibleRef
      ]);
    } else {
      React43.useMemo(() => {
        if (!element2) {
          return;
        }
        element2.className = className;
        element2.setAttribute("dir", dir);
        focusVisibleRef.current = element2;
      }, [
        className,
        dir,
        element2,
        focusVisibleRef
      ]);
    }
    return element2;
  };

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/usePortal.js
  function toMountNodeProps(mountNode) {
    if (isHTMLElement(mountNode)) {
      return {
        element: mountNode
      };
    }
    if (typeof mountNode === "object") {
      if (mountNode === null) {
        return {
          element: null
        };
      }
      return mountNode;
    }
    return {};
  }
  var usePortal_unstable = (props) => {
    const { element: element2, className } = toMountNodeProps(props.mountNode);
    const virtualParentRootRef = React44.useRef(null);
    const fallbackElement = usePortalMountNode2({
      disabled: !!element2,
      className
    });
    const state = {
      children: props.children,
      mountNode: element2 !== null && element2 !== void 0 ? element2 : fallbackElement,
      virtualParentRootRef
    };
    React44.useEffect(() => {
      if (state.virtualParentRootRef.current && state.mountNode) {
        setVirtualParent(state.mountNode, state.virtualParentRootRef.current);
      }
      return () => {
        if (state.mountNode) {
          setVirtualParent(state.mountNode, void 0);
        }
      };
    }, [
      state.virtualParentRootRef,
      state.mountNode
    ]);
    return state;
  };

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/renderPortal.js
  var ReactDOM = __toESM(require_react_dom());
  var React45 = __toESM(require_react());
  var renderPortal_unstable = (state) => {
    return /* @__PURE__ */ React45.createElement("span", {
      hidden: true,
      ref: state.virtualParentRootRef
    }, state.mountNode && /* @__PURE__ */ ReactDOM.createPortal(state.children, state.mountNode));
  };

  // ../node_modules/@fluentui/react-portal/lib/components/Portal/Portal.js
  var Portal = (props) => {
    const state = usePortal_unstable(props);
    return renderPortal_unstable(state);
  };
  Portal.displayName = "Portal";

  // ../node_modules/@fluentui/react-button/lib/components/Button/Button.js
  var React49 = __toESM(require_react());

  // ../node_modules/@fluentui/react-button/lib/components/Button/renderButton.js
  var renderButton_unstable = (state) => {
    assertSlots(state);
    const { iconOnly, iconPosition } = state;
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        iconPosition !== "after" && state.icon && /* @__PURE__ */ jsx(state.icon, {}),
        !iconOnly && state.root.children,
        iconPosition === "after" && state.icon && /* @__PURE__ */ jsx(state.icon, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-button/lib/components/Button/useButton.js
  var React48 = __toESM(require_react());

  // ../node_modules/@fluentui/react-button/lib/contexts/ButtonContext.js
  var React47 = __toESM(require_react());
  var buttonContext = React47.createContext(void 0);
  var buttonContextDefaultValue = {};
  var ButtonContextProvider = buttonContext.Provider;
  var _React_useContext;
  var useButtonContext = () => (_React_useContext = React47.useContext(buttonContext)) !== null && _React_useContext !== void 0 ? _React_useContext : buttonContextDefaultValue;

  // ../node_modules/@fluentui/react-button/lib/components/Button/useButton.js
  var useButton_unstable = (props, ref) => {
    var _iconShorthand;
    const { size: contextSize } = useButtonContext();
    const { appearance = "secondary", as = "button", disabled = false, disabledFocusable = false, icon: icon10, iconPosition = "before", shape: shape2 = "rounded", size = contextSize !== null && contextSize !== void 0 ? contextSize : "medium" } = props;
    const iconShorthand = slot_exports.optional(icon10, {
      elementType: "span"
    });
    return {
      // Props passed at the top-level
      appearance,
      disabled,
      disabledFocusable,
      iconPosition,
      shape: shape2,
      size,
      iconOnly: Boolean(((_iconShorthand = iconShorthand) === null || _iconShorthand === void 0 ? void 0 : _iconShorthand.children) && !props.children),
      components: {
        root: "button",
        icon: "span"
      },
      root: slot_exports.always(getNativeElementProps(as, useARIAButtonShorthand(props, {
        required: true,
        defaultProps: {
          ref,
          type: "button"
        }
      })), {
        elementType: "button"
      }),
      icon: iconShorthand
    };
  };

  // ../node_modules/@fluentui/react-button/lib/components/Button/useButtonStyles.styles.js
  var buttonClassNames = {
    root: "fui-Button",
    icon: "fui-Button__icon"
  };
  var useRootBaseClassName = /* @__PURE__ */ __resetStyles2("rlr4yyk", "r1hbzg6e", {
    r: [".rlr4yyk{align-items:center;box-sizing:border-box;display:inline-flex;justify-content:center;text-decoration-line:none;vertical-align:middle;margin:0;overflow:hidden;background-color:var(--colorNeutralBackground1);color:var(--colorNeutralForeground1);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);font-family:var(--fontFamilyBase);outline-style:none;padding:5px var(--spacingHorizontalM);min-width:96px;border-radius:var(--borderRadiusMedium);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase300);transition-duration:var(--durationFaster);transition-property:background,border,color;transition-timing-function:var(--curveEasyEase);}", ".rlr4yyk:hover{background-color:var(--colorNeutralBackground1Hover);border-color:var(--colorNeutralStroke1Hover);color:var(--colorNeutralForeground1Hover);cursor:pointer;}", ".rlr4yyk:hover:active{background-color:var(--colorNeutralBackground1Pressed);border-color:var(--colorNeutralStroke1Pressed);color:var(--colorNeutralForeground1Pressed);outline-style:none;}", ".rlr4yyk[data-fui-focus-visible]{border-color:var(--colorTransparentStroke);border-radius:var(--borderRadiusMedium);outline:var(--strokeWidthThick) solid var(--colorTransparentStroke);box-shadow:var(--shadow4),0 0 0 2px var(--colorStrokeFocus2);z-index:1;}", ".r1hbzg6e{align-items:center;box-sizing:border-box;display:inline-flex;justify-content:center;text-decoration-line:none;vertical-align:middle;margin:0;overflow:hidden;background-color:var(--colorNeutralBackground1);color:var(--colorNeutralForeground1);border:var(--strokeWidthThin) solid var(--colorNeutralStroke1);font-family:var(--fontFamilyBase);outline-style:none;padding:5px var(--spacingHorizontalM);min-width:96px;border-radius:var(--borderRadiusMedium);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightSemibold);line-height:var(--lineHeightBase300);transition-duration:var(--durationFaster);transition-property:background,border,color;transition-timing-function:var(--curveEasyEase);}", ".r1hbzg6e:hover{background-color:var(--colorNeutralBackground1Hover);border-color:var(--colorNeutralStroke1Hover);color:var(--colorNeutralForeground1Hover);cursor:pointer;}", ".r1hbzg6e:hover:active{background-color:var(--colorNeutralBackground1Pressed);border-color:var(--colorNeutralStroke1Pressed);color:var(--colorNeutralForeground1Pressed);outline-style:none;}", ".r1hbzg6e[data-fui-focus-visible]{border-color:var(--colorTransparentStroke);border-radius:var(--borderRadiusMedium);outline:var(--strokeWidthThick) solid var(--colorTransparentStroke);box-shadow:var(--shadow4),0 0 0 2px var(--colorStrokeFocus2);z-index:1;}"],
    s: ["@media screen and (prefers-reduced-motion: reduce){.rlr4yyk{transition-duration:0.01ms;}}", "@media (forced-colors: active){.rlr4yyk:focus{border-color:ButtonText;}.rlr4yyk:hover{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}.rlr4yyk:hover:active{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}}", "@media screen and (prefers-reduced-motion: reduce){.r1hbzg6e{transition-duration:0.01ms;}}", "@media (forced-colors: active){.r1hbzg6e:focus{border-color:ButtonText;}.r1hbzg6e:hover{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}.r1hbzg6e:hover:active{background-color:HighlightText;border-color:Highlight;color:Highlight;forced-color-adjust:none;}}"]
  });
  var useIconBaseClassName = /* @__PURE__ */ __resetStyles2("rywnvv2", null, [".rywnvv2{align-items:center;display:inline-flex;justify-content:center;font-size:20px;height:20px;width:20px;--fui-Button__icon--spacing:var(--spacingHorizontalSNudge);}"]);
  var useRootStyles2 = /* @__PURE__ */ __styles2({
    outline: {
      De3pzq: "f1c21dwh",
      Jwef8y: "fjxutwb",
      iro3zm: "fwiml72"
    },
    primary: {
      De3pzq: "ffp7eso",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "f1phragk",
      Jwef8y: "f15wkkf3",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "f1rq72xc",
      iro3zm: "fnp9lpt",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1d6v5y2",
      Bsw6fvg: "f1rirnrt",
      Bjwas2f: "f1uu00uk",
      Bn1d65q: ["fkvaka8", "f9a0qzu"],
      Bxeuatn: "f1ux7til",
      n51gp8: ["f9a0qzu", "fkvaka8"],
      Bbusuzp: "f1lkg8j3",
      ycbfsm: "fkc42ay",
      Bqrx1nm: "fq7113v",
      pgvf35: "ff1wgvm",
      Bh7lczh: ["fiob0tu", "f1x4h75k"],
      dpv3f4: "f1j6scgf",
      Bpnjhaq: ["f1x4h75k", "fiob0tu"],
      ze5xyy: "f4xjyn1",
      g2kj27: "fbgcvur",
      Bf756sw: "f1ks1yx8",
      Bow2dr7: ["f1o6qegi", "fmxjhhp"],
      Bvhedfk: "fcnxywj",
      Gye4lf: ["fmxjhhp", "f1o6qegi"],
      pc6evw: "f9ddjv3"
    },
    secondary: {},
    subtle: {
      De3pzq: "fhovq9v",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "fkfq4zb",
      Jwef8y: "f1t94bn6",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "fnwyq0v",
      Bk3fhr4: "ft1hn21",
      Bmfj8id: "fuxngvv",
      Bbdnnc7: "fy5bs14",
      iro3zm: "fsv2rcd",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1omzyqd",
      em6i61: "f1dfjoow",
      vm6p8p: "f1j98vj9",
      x3br3k: "fj8yq94",
      ze5xyy: "f4xjyn1",
      Bx3q9su: "f1et0tmh",
      pc6evw: "f9ddjv3",
      xd2cci: "f1wi8ngl"
    },
    transparent: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      sj55zd: "fkfq4zb",
      Jwef8y: "fjxutwb",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      Bi91k9c: "f139oj5f",
      Bk3fhr4: "ft1hn21",
      Bmfj8id: "fuxngvv",
      iro3zm: "fwiml72",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"],
      B2d53fq: "f1fg1p5m",
      em6i61: "f1dfjoow",
      vm6p8p: "f1j98vj9",
      Bqrx1nm: "fwa4z56",
      pgvf35: "fe5wyld",
      Bh7lczh: ["ffrv2ww", "f9dg1pr"],
      dpv3f4: "f1rnfj6r",
      Bpnjhaq: ["f9dg1pr", "ffrv2ww"],
      ze5xyy: "f4xjyn1",
      g2kj27: "f19ot1t3",
      Bf756sw: "fjaevkr",
      Bow2dr7: ["f1yrt24w", "f11cxmw1"],
      Bvhedfk: "f1lym4af",
      Gye4lf: ["f11cxmw1", "f1yrt24w"],
      pc6evw: "f9ddjv3"
    },
    circular: {
      Bbmb7ep: ["f8fbkgy", "f1nfllo7"],
      Beyfa6y: ["f1nfllo7", "f8fbkgy"],
      B7oj6ja: ["f1djnp8u", "f1s8kh49"],
      Btl43ni: ["f1s8kh49", "f1djnp8u"]
    },
    rounded: {},
    square: {
      Bbmb7ep: ["fzi6hpg", "fyowgf4"],
      Beyfa6y: ["fyowgf4", "fzi6hpg"],
      B7oj6ja: ["f3fg2lr", "f13av6d4"],
      Btl43ni: ["f13av6d4", "f3fg2lr"]
    },
    small: {
      Bf4jedk: "fh7ncta",
      z8tnut: "f1khb0e9",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f1jnq6q7",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"],
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    },
    smallWithIcon: {
      Byoj8tv: "f1brlhvm",
      z8tnut: "f1sl3k7w"
    },
    medium: {},
    large: {
      Bf4jedk: "f14es27b",
      z8tnut: "fp9bwmr",
      z189sj: ["fjodcmx", "fhx4nu"],
      Byoj8tv: "f150uoa4",
      uwmqm3: ["fhx4nu", "fjodcmx"],
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      Be2twd7: "fod5ikn",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "faaz57k"
    },
    largeWithIcon: {
      Byoj8tv: "fy7v416",
      z8tnut: "f1a1bwwz"
    }
  }, {
    d: [".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".ffp7eso{background-color:var(--colorBrandBackground);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}", ".f1phragk{color:var(--colorNeutralForegroundOnBrand);}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".f8fbkgy{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1nfllo7{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1djnp8u{border-top-right-radius:var(--borderRadiusCircular);}", ".f1s8kh49{border-top-left-radius:var(--borderRadiusCircular);}", ".fzi6hpg{border-bottom-right-radius:var(--borderRadiusNone);}", ".fyowgf4{border-bottom-left-radius:var(--borderRadiusNone);}", ".f3fg2lr{border-top-right-radius:var(--borderRadiusNone);}", ".f13av6d4{border-top-left-radius:var(--borderRadiusNone);}", ".fh7ncta{min-width:64px;}", ".f1khb0e9{padding-top:3px;}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f1jnq6q7{padding-bottom:3px;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1brlhvm{padding-bottom:1px;}", ".f1sl3k7w{padding-top:1px;}", ".f14es27b{min-width:96px;}", ".fp9bwmr{padding-top:8px;}", ".fjodcmx{padding-right:var(--spacingHorizontalL);}", ".fhx4nu{padding-left:var(--spacingHorizontalL);}", ".f150uoa4{padding-bottom:8px;}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fy7v416{padding-bottom:7px;}", ".f1a1bwwz{padding-top:7px;}"],
    h: [".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".fwiml72:hover:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f15wkkf3:hover{background-color:var(--colorBrandBackgroundHover);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1rq72xc:hover{color:var(--colorNeutralForegroundOnBrand);}", ".fnp9lpt:hover:active{background-color:var(--colorBrandBackgroundPressed);}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}", ".f1d6v5y2:hover:active{color:var(--colorNeutralForegroundOnBrand);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".fnwyq0v:hover{color:var(--colorNeutralForeground2Hover);}", ".ft1hn21:hover .fui-Icon-filled{display:inline;}", ".fuxngvv:hover .fui-Icon-regular{display:none;}", ".fy5bs14:hover .fui-Button__icon{color:var(--colorNeutralForeground2BrandHover);}", ".fsv2rcd:hover:active{background-color:var(--colorSubtleBackgroundPressed);}", ".f1omzyqd:hover:active{color:var(--colorNeutralForeground2Pressed);}", ".f1dfjoow:hover:active .fui-Icon-filled{display:inline;}", ".f1j98vj9:hover:active .fui-Icon-regular{display:none;}", ".fj8yq94:hover:active .fui-Button__icon{color:var(--colorNeutralForeground2BrandPressed);}", ".f139oj5f:hover{color:var(--colorNeutralForeground2BrandHover);}", ".f1fg1p5m:hover:active{color:var(--colorNeutralForeground2BrandPressed);}"],
    m: [["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1uu00uk{border-top-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9a0qzu{border-left-color:HighlightText;}.fkvaka8{border-right-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ux7til{border-bottom-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lkg8j3{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fq7113v:hover{background-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.ff1wgvm:hover{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1x4h75k:hover{border-left-color:Highlight;}.fiob0tu:hover{border-right-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1j6scgf:hover{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f4xjyn1:hover{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fbgcvur:hover:active{background-color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1ks1yx8:hover:active{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1o6qegi:hover:active{border-right-color:Highlight;}.fmxjhhp:hover:active{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fcnxywj:hover:active{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9ddjv3:hover:active{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1et0tmh:hover .fui-Button__icon{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1wi8ngl:hover:active .fui-Button__icon{color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fwa4z56:hover{background-color:var(--colorTransparentBackgroundHover);}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fe5wyld:hover{border-top-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9dg1pr:hover{border-left-color:transparent;}.ffrv2ww:hover{border-right-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1rnfj6r:hover{border-bottom-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f19ot1t3:hover:active{background-color:var(--colorTransparentBackgroundHover);}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fjaevkr:hover:active{border-top-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f11cxmw1:hover:active{border-left-color:transparent;}.f1yrt24w:hover:active{border-right-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lym4af:hover:active{border-bottom-color:transparent;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useRootDisabledStyles = /* @__PURE__ */ __styles2({
    base: {
      De3pzq: "f1bg9a2p",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      sj55zd: "f1s2aq7o",
      Bceei9c: "fdrzuqr",
      Jwef8y: "f1falr9n",
      Bgoe8wy: "f12mpcsy",
      Bwzppfd: ["f1gwvigk", "f18rmfxp"],
      oetu4i: "f1jnshp0",
      gg5e9n: ["f18rmfxp", "f1gwvigk"],
      Bi91k9c: "fvgxktp",
      eoavqd: "fphbwmw",
      Bk3fhr4: "f19vpps7",
      Bmfj8id: "fv5swzo",
      iro3zm: "f1t6o4dc",
      b661bw: "f10ztigi",
      Bk6r4ia: ["f1ft5sdu", "f1gzf82w"],
      B9zn80p: "f12zbtn2",
      Bpld233: ["f1gzf82w", "f1ft5sdu"],
      B2d53fq: "fcvwxyo",
      c3iz72: "f8w4c43",
      em6i61: "f1ol4fw6",
      vm6p8p: "f1q1lw4e"
    },
    highContrast: {
      Bsw6fvg: "f4lkoma",
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"],
      Bbusuzp: "f1dcs8yz",
      G867l3: "fjwq6ea",
      gdbnj: ["f1lr3nhc", "f1mbxvi6"],
      mxns5l: "fn5gmvv",
      o3nasb: ["f1mbxvi6", "f1lr3nhc"],
      Bqrx1nm: "f1vmkb5g",
      pgvf35: "f53ppgq",
      Bh7lczh: ["f1663y11", "f80fkiy"],
      dpv3f4: "f18v5270",
      Bpnjhaq: ["f80fkiy", "f1663y11"],
      ze5xyy: "f1kc2mi9",
      g2kj27: "f1y0svfh",
      Bf756sw: "fihuait",
      Bow2dr7: ["fnxhupq", "fyd6l6x"],
      Bvhedfk: "fx507ft",
      Gye4lf: ["fyd6l6x", "fnxhupq"],
      pc6evw: "fb3rf2x"
    },
    outline: {
      De3pzq: "f1c21dwh",
      Jwef8y: "f9ql6rf",
      iro3zm: "f3h1zc4"
    },
    primary: {
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    },
    secondary: {},
    subtle: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Jwef8y: "f9ql6rf",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      iro3zm: "f3h1zc4",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    },
    transparent: {
      De3pzq: "f1c21dwh",
      g2u3we: "f1p3nwhy",
      h3c5rm: ["f11589ue", "f1pdflbu"],
      B9xav0g: "f1q5o8ev",
      zhjwy3: ["f1pdflbu", "f11589ue"],
      Jwef8y: "f9ql6rf",
      Bgoe8wy: "f1s2uweq",
      Bwzppfd: ["fr80ssc", "fecsdlb"],
      oetu4i: "f1ukrpxl",
      gg5e9n: ["fecsdlb", "fr80ssc"],
      iro3zm: "f3h1zc4",
      b661bw: "f1h0usnq",
      Bk6r4ia: ["fs4ktlq", "fx2bmrt"],
      B9zn80p: "f16h9ulv",
      Bpld233: ["fx2bmrt", "fs4ktlq"]
    }
  }, {
    d: [".f1bg9a2p{background-color:var(--colorNeutralBackgroundDisabled);}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1p3nwhy{border-top-color:transparent;}", ".f11589ue{border-right-color:transparent;}", ".f1pdflbu{border-left-color:transparent;}", ".f1q5o8ev{border-bottom-color:transparent;}"],
    h: [".f1falr9n:hover{background-color:var(--colorNeutralBackgroundDisabled);}", ".f12mpcsy:hover{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1gwvigk:hover{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f18rmfxp:hover{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f1jnshp0:hover{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fvgxktp:hover{color:var(--colorNeutralForegroundDisabled);}", ".fphbwmw:hover{cursor:not-allowed;}", ".f19vpps7:hover .fui-Icon-filled{display:none;}", ".fv5swzo:hover .fui-Icon-regular{display:inline;}", ".f1t6o4dc:hover:active{background-color:var(--colorNeutralBackgroundDisabled);}", ".f10ztigi:hover:active{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1ft5sdu:hover:active{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f1gzf82w:hover:active{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f12zbtn2:hover:active{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fcvwxyo:hover:active{color:var(--colorNeutralForegroundDisabled);}", ".f8w4c43:hover:active{cursor:not-allowed;}", ".f1ol4fw6:hover:active .fui-Icon-filled{display:none;}", ".f1q1lw4e:hover:active .fui-Icon-regular{display:inline;}", ".f9ql6rf:hover{background-color:var(--colorTransparentBackground);}", ".f3h1zc4:hover:active{background-color:var(--colorTransparentBackground);}", ".f1s2uweq:hover{border-top-color:transparent;}", ".fr80ssc:hover{border-right-color:transparent;}", ".fecsdlb:hover{border-left-color:transparent;}", ".f1ukrpxl:hover{border-bottom-color:transparent;}", ".f1h0usnq:hover:active{border-top-color:transparent;}", ".fs4ktlq:hover:active{border-right-color:transparent;}", ".fx2bmrt:hover:active{border-left-color:transparent;}", ".f16h9ulv:hover:active{border-bottom-color:transparent;}"],
    m: [["@media (forced-colors: active){.f4lkoma{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fjwq6ea:focus{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lr3nhc:focus{border-right-color:GrayText;}.f1mbxvi6:focus{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fn5gmvv:focus{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1vmkb5g:hover{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f53ppgq:hover{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1663y11:hover{border-right-color:GrayText;}.f80fkiy:hover{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f18v5270:hover{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1kc2mi9:hover{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1y0svfh:hover:active{background-color:ButtonFace;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fihuait:hover:active{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fnxhupq:hover:active{border-right-color:GrayText;}.fyd6l6x:hover:active{border-left-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fx507ft:hover:active{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fb3rf2x:hover:active{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useRootFocusStyles = /* @__PURE__ */ __styles2({
    circular: {
      kdpuga: ["fanj13w", "f1gou5sz"],
      Bw81rd7: ["f1gou5sz", "fanj13w"],
      B6xbmo0: ["fulf6x3", "foeb2x"],
      dm238s: ["foeb2x", "fulf6x3"]
    },
    rounded: {},
    square: {
      kdpuga: ["f1ndz5i7", "f1co4qro"],
      Bw81rd7: ["f1co4qro", "f1ndz5i7"],
      B6xbmo0: ["f146y5a9", "f1k2ftg"],
      dm238s: ["f1k2ftg", "f146y5a9"]
    },
    primary: {
      B8q5s1w: "f15my96h",
      Bci5o5g: ["f8yq1e5", "f59w28j"],
      n8qw10: "f1mze7uc",
      Bdrgwmp: ["f59w28j", "f8yq1e5"],
      j6ew2k: "ftbnf46"
    },
    small: {
      kdpuga: ["fg3gtdo", "fwii5mg"],
      Bw81rd7: ["fwii5mg", "fg3gtdo"],
      B6xbmo0: ["f1palphq", "f12nxie7"],
      dm238s: ["f12nxie7", "f1palphq"]
    },
    medium: {},
    large: {
      kdpuga: ["ft3lys4", "f1la4x2g"],
      Bw81rd7: ["f1la4x2g", "ft3lys4"],
      B6xbmo0: ["f156y0zm", "fakimq4"],
      dm238s: ["fakimq4", "f156y0zm"]
    }
  }, {
    d: [".fanj13w[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1gou5sz[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusCircular);}", ".fulf6x3[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusCircular);}", ".foeb2x[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusCircular);}", ".f1ndz5i7[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusNone);}", ".f1co4qro[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusNone);}", ".f146y5a9[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusNone);}", ".f1k2ftg[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusNone);}", ".f15my96h[data-fui-focus-visible]{border-top-color:var(--colorNeutralForegroundOnBrand);}", ".f8yq1e5[data-fui-focus-visible]{border-right-color:var(--colorNeutralForegroundOnBrand);}", ".f59w28j[data-fui-focus-visible]{border-left-color:var(--colorNeutralForegroundOnBrand);}", ".f1mze7uc[data-fui-focus-visible]{border-bottom-color:var(--colorNeutralForegroundOnBrand);}", ".ftbnf46[data-fui-focus-visible]{box-shadow:var(--shadow2),0 0 0 2px var(--colorStrokeFocus2);}", ".fg3gtdo[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusSmall);}", ".fwii5mg[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusSmall);}", ".f1palphq[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusSmall);}", ".f12nxie7[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusSmall);}", ".ft3lys4[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusLarge);}", ".f1la4x2g[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusLarge);}", ".f156y0zm[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusLarge);}", ".fakimq4[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusLarge);}"]
  });
  var useRootIconOnlyStyles = /* @__PURE__ */ __styles2({
    small: {
      z8tnut: "f1sl3k7w",
      z189sj: ["f136y8j8", "f10xn8zz"],
      Byoj8tv: "f1brlhvm",
      uwmqm3: ["f10xn8zz", "f136y8j8"],
      Bf4jedk: "f17fgpbq",
      B2u0y6b: "f1jt17bm"
    },
    medium: {
      z8tnut: "f1sbtcvk",
      z189sj: ["fwiuce9", "f15vdbe4"],
      Byoj8tv: "fdghr9",
      uwmqm3: ["f15vdbe4", "fwiuce9"],
      Bf4jedk: "fwbmr0d",
      B2u0y6b: "f44c6la"
    },
    large: {
      z8tnut: "f1a1bwwz",
      z189sj: ["f18k1jr3", "f1rtp3s9"],
      Byoj8tv: "fy7v416",
      uwmqm3: ["f1rtp3s9", "f18k1jr3"],
      Bf4jedk: "f12clzc2",
      B2u0y6b: "fjy1crr"
    }
  }, {
    d: [".f1sl3k7w{padding-top:1px;}", ".f136y8j8{padding-right:1px;}", ".f10xn8zz{padding-left:1px;}", ".f1brlhvm{padding-bottom:1px;}", ".f17fgpbq{min-width:24px;}", ".f1jt17bm{max-width:24px;}", ".f1sbtcvk{padding-top:5px;}", ".fwiuce9{padding-right:5px;}", ".f15vdbe4{padding-left:5px;}", ".fdghr9{padding-bottom:5px;}", ".fwbmr0d{min-width:32px;}", ".f44c6la{max-width:32px;}", ".f1a1bwwz{padding-top:7px;}", ".f18k1jr3{padding-right:7px;}", ".f1rtp3s9{padding-left:7px;}", ".fy7v416{padding-bottom:7px;}", ".f12clzc2{min-width:40px;}", ".fjy1crr{max-width:40px;}"]
  });
  var useIconStyles = /* @__PURE__ */ __styles2({
    small: {
      Be2twd7: "fe5j1ua",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3",
      Bqrlyyl: "fbaiahx"
    },
    medium: {},
    large: {
      Be2twd7: "f1rt2boy",
      Bqenvij: "frvgh55",
      a9b677: "fq4mcun",
      Bqrlyyl: "f1exjqw5"
    },
    before: {
      t21cq0: ["f1nizpg2", "f1a695kz"]
    },
    after: {
      Frg6f3: ["f1a695kz", "f1nizpg2"]
    }
  }, {
    d: [".fe5j1ua{font-size:20px;}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".fbaiahx{--fui-Button__icon--spacing:var(--spacingHorizontalXS);}", ".f1rt2boy{font-size:24px;}", ".frvgh55{height:24px;}", ".fq4mcun{width:24px;}", ".f1exjqw5{--fui-Button__icon--spacing:var(--spacingHorizontalSNudge);}", ".f1nizpg2{margin-right:var(--fui-Button__icon--spacing);}", ".f1a695kz{margin-left:var(--fui-Button__icon--spacing);}"]
  });
  var useButtonStyles_unstable = (state) => {
    const rootBaseClassName = useRootBaseClassName();
    const iconBaseClassName = useIconBaseClassName();
    const rootStyles = useRootStyles2();
    const rootDisabledStyles = useRootDisabledStyles();
    const rootFocusStyles = useRootFocusStyles();
    const rootIconOnlyStyles = useRootIconOnlyStyles();
    const iconStyles = useIconStyles();
    const {
      appearance,
      disabled,
      disabledFocusable,
      icon: icon10,
      iconOnly,
      iconPosition,
      shape: shape2,
      size
    } = state;
    state.root.className = mergeClasses(
      buttonClassNames.root,
      rootBaseClassName,
      appearance && rootStyles[appearance],
      rootStyles[size],
      icon10 && size === "small" && rootStyles.smallWithIcon,
      icon10 && size === "large" && rootStyles.largeWithIcon,
      rootStyles[shape2],
      // Disabled styles
      (disabled || disabledFocusable) && rootDisabledStyles.base,
      (disabled || disabledFocusable) && rootDisabledStyles.highContrast,
      appearance && (disabled || disabledFocusable) && rootDisabledStyles[appearance],
      // Focus styles
      appearance === "primary" && rootFocusStyles.primary,
      rootFocusStyles[size],
      rootFocusStyles[shape2],
      // Icon-only styles
      iconOnly && rootIconOnlyStyles[size],
      // User provided class name
      state.root.className
    );
    if (state.icon) {
      state.icon.className = mergeClasses(buttonClassNames.icon, iconBaseClassName, !!state.root.children && iconStyles[iconPosition], iconStyles[size], state.icon.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-button/lib/components/Button/Button.js
  var Button = /* @__PURE__ */ React49.forwardRef((props, ref) => {
    const state = useButton_unstable(props, ref);
    useButtonStyles_unstable(state);
    useCustomStyleHook("useButtonStyles_unstable")(state);
    return renderButton_unstable(state);
  });
  Button.displayName = "Button";

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/Checkbox.js
  var React54 = __toESM(require_react());

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/useCheckbox.js
  var React53 = __toESM(require_react());

  // ../node_modules/@fluentui/react-field/lib/contexts/FieldContext.js
  var React50 = __toESM(require_react());
  var FieldContext = React50.createContext(void 0);
  var FieldContextProvider = FieldContext.Provider;
  var useFieldContext_unstable = () => React50.useContext(FieldContext);

  // ../node_modules/@fluentui/react-field/lib/contexts/useFieldControlProps.js
  function useFieldControlProps_unstable(props, options) {
    return getFieldControlProps(useFieldContext_unstable(), props, options);
  }
  function getFieldControlProps(context, props, options) {
    var _options, _options1;
    if (!context) {
      return props;
    }
    props = {
      ...props
    };
    const { generatedControlId, hintId, labelFor, labelId, required, validationMessageId, validationState } = context;
    if (generatedControlId) {
      var _props;
      var _id;
      (_id = (_props = props).id) !== null && _id !== void 0 ? _id : _props.id = generatedControlId;
    }
    if (labelId && (!((_options = options) === null || _options === void 0 ? void 0 : _options.supportsLabelFor) || labelFor !== props.id)) {
      var _props1, _arialabelledby;
      var _2;
      (_2 = (_props1 = props)[_arialabelledby = "aria-labelledby"]) !== null && _2 !== void 0 ? _2 : _props1[_arialabelledby] = labelId;
    }
    if (validationMessageId || hintId) {
      var _props2;
      props["aria-describedby"] = [
        validationMessageId,
        hintId,
        (_props2 = props) === null || _props2 === void 0 ? void 0 : _props2["aria-describedby"]
      ].filter(Boolean).join(" ");
    }
    if (validationState === "error") {
      var _props3, _ariainvalid;
      var _1;
      (_1 = (_props3 = props)[_ariainvalid = "aria-invalid"]) !== null && _1 !== void 0 ? _1 : _props3[_ariainvalid] = true;
    }
    if (required) {
      var _options2;
      if ((_options2 = options) === null || _options2 === void 0 ? void 0 : _options2.supportsRequired) {
        var _props4;
        var _required;
        (_required = (_props4 = props).required) !== null && _required !== void 0 ? _required : _props4.required = true;
      } else {
        var _props5, _ariarequired;
        var _22;
        (_22 = (_props5 = props)[_ariarequired = "aria-required"]) !== null && _22 !== void 0 ? _22 : _props5[_ariarequired] = true;
      }
    }
    if ((_options1 = options) === null || _options1 === void 0 ? void 0 : _options1.supportsSize) {
      var _props6;
      var _size;
      (_size = (_props6 = props).size) !== null && _size !== void 0 ? _size : _props6.size = context.size;
    }
    return props;
  }

  // ../node_modules/@fluentui/react-label/lib/components/Label/Label.js
  var React52 = __toESM(require_react());

  // ../node_modules/@fluentui/react-label/lib/components/Label/useLabel.js
  var React51 = __toESM(require_react());
  var useLabel_unstable = (props, ref) => {
    const { disabled = false, required = false, weight = "regular", size = "medium" } = props;
    return {
      disabled,
      required: slot_exports.optional(required === true ? "*" : required || void 0, {
        defaultProps: {
          "aria-hidden": "true"
        },
        elementType: "span"
      }),
      weight,
      size,
      components: {
        root: "label",
        required: "span"
      },
      root: slot_exports.always(getNativeElementProps("label", {
        ref,
        ...props
      }), {
        elementType: "label"
      })
    };
  };

  // ../node_modules/@fluentui/react-label/lib/components/Label/renderLabel.js
  var renderLabel_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.root.children,
        state.required && /* @__PURE__ */ jsx(state.required, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-label/lib/components/Label/useLabelStyles.styles.js
  var labelClassNames = {
    root: "fui-Label",
    required: "fui-Label__required"
  };
  var useStyles2 = /* @__PURE__ */ __styles2({
    root: {
      Bahqtrf: "fk6fouc",
      sj55zd: "f19n0e5"
    },
    disabled: {
      sj55zd: "f1s2aq7o"
    },
    required: {
      sj55zd: "f1whyuy6",
      uwmqm3: ["fycuoez", "f8wuabp"]
    },
    requiredDisabled: {
      sj55zd: "f1s2aq7o"
    },
    small: {
      Be2twd7: "fy9rknc",
      Bg96gwp: "fwrc4pm"
    },
    medium: {
      Be2twd7: "fkhj508",
      Bg96gwp: "f1i3iumi"
    },
    large: {
      Be2twd7: "fod5ikn",
      Bg96gwp: "faaz57k",
      Bhrd7zp: "fl43uef"
    },
    semibold: {
      Bhrd7zp: "fl43uef"
    }
  }, {
    d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f1whyuy6{color:var(--colorPaletteRedForeground3);}", ".fycuoez{padding-left:4px;}", ".f8wuabp{padding-right:4px;}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}"]
  });
  var useLabelStyles_unstable = (state) => {
    const styles2 = useStyles2();
    state.root.className = mergeClasses(labelClassNames.root, styles2.root, state.disabled && styles2.disabled, styles2[state.size], state.weight === "semibold" && styles2.semibold, state.root.className);
    if (state.required) {
      state.required.className = mergeClasses(labelClassNames.required, styles2.required, state.disabled && styles2.requiredDisabled, state.required.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-label/lib/components/Label/Label.js
  var Label = /* @__PURE__ */ React52.forwardRef((props, ref) => {
    const state = useLabel_unstable(props, ref);
    useLabelStyles_unstable(state);
    useCustomStyleHook("useLabelStyles_unstable")(state);
    return renderLabel_unstable(state);
  });
  Label.displayName = "Label";

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/useCheckbox.js
  var useCheckbox_unstable = (props, ref) => {
    props = useFieldControlProps_unstable(props, {
      supportsLabelFor: true,
      supportsRequired: true
    });
    const { disabled = false, required, shape: shape2 = "square", size = "medium", labelPosition = "after", onChange } = props;
    const [checked, setChecked] = useControllableState({
      defaultState: props.defaultChecked,
      state: props.checked,
      initialState: false
    });
    const nativeProps = getPartitionedNativeProps({
      props,
      primarySlotTagName: "input",
      excludedPropNames: [
        "checked",
        "defaultChecked",
        "size",
        "onChange"
      ]
    });
    const mixed = checked === "mixed";
    const id = useId2("checkbox-", nativeProps.primary.id);
    let checkmarkIcon;
    if (mixed) {
      if (shape2 === "circular") {
        checkmarkIcon = /* @__PURE__ */ React53.createElement(CircleFilled, null);
      } else {
        checkmarkIcon = size === "large" ? /* @__PURE__ */ React53.createElement(Square16Filled, null) : /* @__PURE__ */ React53.createElement(Square12Filled, null);
      }
    } else if (checked) {
      checkmarkIcon = size === "large" ? /* @__PURE__ */ React53.createElement(Checkmark16Filled, null) : /* @__PURE__ */ React53.createElement(Checkmark12Filled, null);
    }
    const state = {
      shape: shape2,
      checked,
      disabled,
      size,
      labelPosition,
      components: {
        root: "span",
        input: "input",
        indicator: "div",
        label: Label
      },
      root: slot_exports.always(props.root, {
        defaultProps: {
          ref: useFocusWithin(),
          ...nativeProps.root
        },
        elementType: "span"
      }),
      input: slot_exports.always(props.input, {
        defaultProps: {
          type: "checkbox",
          id,
          ref,
          checked: checked === true,
          ...nativeProps.primary
        },
        elementType: "input"
      }),
      label: slot_exports.optional(props.label, {
        defaultProps: {
          htmlFor: id,
          disabled,
          required,
          size: "medium"
        },
        elementType: Label
      }),
      indicator: slot_exports.optional(props.indicator, {
        renderByDefault: true,
        defaultProps: {
          "aria-hidden": true,
          children: checkmarkIcon
        },
        elementType: "div"
      })
    };
    state.input.onChange = useEventCallback((ev) => {
      var _onChange;
      const val = ev.currentTarget.indeterminate ? "mixed" : ev.currentTarget.checked;
      (_onChange = onChange) === null || _onChange === void 0 ? void 0 : _onChange(ev, {
        checked: val
      });
      setChecked(val);
    });
    const inputRef = useMergedRefs(state.input.ref);
    state.input.ref = inputRef;
    useIsomorphicLayoutEffect(() => {
      if (inputRef.current) {
        inputRef.current.indeterminate = mixed;
      }
    }, [
      inputRef,
      mixed
    ]);
    return state;
  };

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/renderCheckbox.js
  var renderCheckbox_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        /* @__PURE__ */ jsx(state.input, {}),
        state.labelPosition === "before" && state.label && /* @__PURE__ */ jsx(state.label, {}),
        /* @__PURE__ */ jsx(state.indicator, {}),
        state.labelPosition === "after" && state.label && /* @__PURE__ */ jsx(state.label, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/useCheckboxStyles.styles.js
  var checkboxClassNames = {
    root: "fui-Checkbox",
    label: "fui-Checkbox__label",
    input: "fui-Checkbox__input",
    indicator: "fui-Checkbox__indicator"
  };
  var useRootBaseClassName2 = /* @__PURE__ */ __resetStyles2("r1qaeuiq", "rm0k3vm", [".r1qaeuiq{position:relative;display:inline-flex;cursor:pointer;vertical-align:middle;color:var(--colorNeutralForeground3);}", ".r1qaeuiq:focus{outline-style:none;}", ".r1qaeuiq:focus-visible{outline-style:none;}", ".r1qaeuiq[data-fui-focus-within]:focus-within{border-top-color:transparent;border-right-color:transparent;border-bottom-color:transparent;border-left-color:transparent;}", '.r1qaeuiq[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-right-style:solid;border-bottom-style:solid;border-left-style:solid;border-top-width:2px;border-right-width:2px;border-bottom-width:2px;border-left-width:2px;border-bottom-right-radius:var(--borderRadiusMedium);border-bottom-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);top:calc(2px * -1);right:calc(2px * -1);bottom:calc(2px * -1);left:calc(2px * -1);}', ".rm0k3vm{position:relative;display:inline-flex;cursor:pointer;vertical-align:middle;color:var(--colorNeutralForeground3);}", ".rm0k3vm:focus{outline-style:none;}", ".rm0k3vm:focus-visible{outline-style:none;}", ".rm0k3vm[data-fui-focus-within]:focus-within{border-top-color:transparent;border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;}", '.rm0k3vm[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-left-style:solid;border-bottom-style:solid;border-right-style:solid;border-top-width:2px;border-left-width:2px;border-bottom-width:2px;border-right-width:2px;border-bottom-left-radius:var(--borderRadiusMedium);border-bottom-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);top:calc(2px * -1);left:calc(2px * -1);bottom:calc(2px * -1);right:calc(2px * -1);}']);
  var useRootStyles3 = /* @__PURE__ */ __styles2({
    unchecked: {
      Bi91k9c: "f3p8bqa",
      ns3gzv: "ffqb913",
      n5iecx: ["f42z0vd", "f1j37kh1"],
      Bq2lx2j: "f10v6cc1",
      Bv7p3up: ["f1j37kh1", "f42z0vd"],
      lj723h: "f1r2dosr",
      B6u2zzw: "f1oarbgq",
      Be5wueo: ["fo8gord", "f18ci1af"],
      Cgwcxn: "fviagcr",
      Btnvhkj: ["f18ci1af", "fo8gord"]
    },
    checked: {
      sj55zd: "f19n0e5",
      Bvs3sgl: "f5opsb9",
      opw9sb: "fpaw01r",
      C5wppx: "f1gqj827",
      B32epof: ["fub94a2", "f13mj44e"],
      Bphahg7: "f1qq5vh1",
      Jctw66: ["f13mj44e", "fub94a2"],
      Bq0zqd5: "f5x9vvn",
      ns3gzv: "fub8hyy",
      n5iecx: ["fffzknn", "f172bh4s"],
      Bq2lx2j: "f6tipb1",
      Bv7p3up: ["f172bh4s", "fffzknn"],
      Bgesukf: "f8adco2",
      B6u2zzw: "f1lepnt8",
      Be5wueo: ["f80ygm0", "frrkusm"],
      Cgwcxn: "f1gg953z",
      Btnvhkj: ["frrkusm", "f80ygm0"]
    },
    mixed: {
      sj55zd: "f19n0e5",
      C5wppx: "f12fgbth",
      B32epof: ["f171e6fm", "fttsnhr"],
      Bphahg7: "f1fyk1ks",
      Jctw66: ["fttsnhr", "f171e6fm"],
      opw9sb: "fvvg2h8",
      ns3gzv: "f1nlwys0",
      n5iecx: ["f1bhstg2", "f6tsdgz"],
      Bq2lx2j: "fqxbw9v",
      Bv7p3up: ["f6tsdgz", "f1bhstg2"],
      cc1l3s: "f1r38qqt",
      B6u2zzw: "f12q3i2l",
      Be5wueo: ["f9g1hxu", "f1o4ic5t"],
      Cgwcxn: "f1c3thm1",
      Btnvhkj: ["f1o4ic5t", "f9g1hxu"],
      km5s60: "ffd07pq"
    },
    disabled: {
      Bceei9c: "f158kwzp",
      sj55zd: "f1s2aq7o",
      C5wppx: "fgiuqeu",
      B32epof: ["f1q4sfkt", "f71co73"],
      Bphahg7: "f1u7lsiy",
      Jctw66: ["f71co73", "f1q4sfkt"],
      opw9sb: "f3vxa14",
      Bbusuzp: "f1dcs8yz",
      B7bxudy: "f1lmtjkn"
    }
  }, {
    h: [".f3p8bqa:hover{color:var(--colorNeutralForeground2);}", ".ffqb913:hover>.fui-Checkbox__indicator{border-top-color:var(--colorNeutralStrokeAccessibleHover);}", ".f42z0vd:hover>.fui-Checkbox__indicator{border-right-color:var(--colorNeutralStrokeAccessibleHover);}", ".f1j37kh1:hover>.fui-Checkbox__indicator{border-left-color:var(--colorNeutralStrokeAccessibleHover);}", ".f10v6cc1:hover>.fui-Checkbox__indicator{border-bottom-color:var(--colorNeutralStrokeAccessibleHover);}", ".f5x9vvn:hover>.fui-Checkbox__indicator{background-color:var(--colorCompoundBrandBackgroundHover);}", ".fub8hyy:hover>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandBackgroundHover);}", ".fffzknn:hover>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandBackgroundHover);}", ".f172bh4s:hover>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandBackgroundHover);}", ".f6tipb1:hover>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandBackgroundHover);}", ".f1nlwys0:hover>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandStrokeHover);}", ".f1bhstg2:hover>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandStrokeHover);}", ".f6tsdgz:hover>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandStrokeHover);}", ".fqxbw9v:hover>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandStrokeHover);}", ".f1r38qqt:hover>.fui-Checkbox__indicator{color:var(--colorCompoundBrandForeground1Hover);}"],
    a: [".f1r2dosr:active{color:var(--colorNeutralForeground1);}", ".f1oarbgq:active>.fui-Checkbox__indicator{border-top-color:var(--colorNeutralStrokeAccessiblePressed);}", ".fo8gord:active>.fui-Checkbox__indicator{border-right-color:var(--colorNeutralStrokeAccessiblePressed);}", ".f18ci1af:active>.fui-Checkbox__indicator{border-left-color:var(--colorNeutralStrokeAccessiblePressed);}", ".fviagcr:active>.fui-Checkbox__indicator{border-bottom-color:var(--colorNeutralStrokeAccessiblePressed);}", ".f8adco2:active>.fui-Checkbox__indicator{background-color:var(--colorCompoundBrandBackgroundPressed);}", ".f1lepnt8:active>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandBackgroundPressed);}", ".f80ygm0:active>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandBackgroundPressed);}", ".frrkusm:active>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandBackgroundPressed);}", ".f1gg953z:active>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandBackgroundPressed);}", ".f12q3i2l:active>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandStrokePressed);}", ".f9g1hxu:active>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandStrokePressed);}", ".f1o4ic5t:active>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandStrokePressed);}", ".f1c3thm1:active>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandStrokePressed);}", ".ffd07pq:active>.fui-Checkbox__indicator{color:var(--colorCompoundBrandForeground1Pressed);}"],
    d: [".f19n0e5{color:var(--colorNeutralForeground1);}", ".f5opsb9>.fui-Checkbox__indicator{background-color:var(--colorCompoundBrandBackground);}", ".fpaw01r>.fui-Checkbox__indicator{color:var(--colorNeutralForegroundInverted);}", ".f1gqj827>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandBackground);}", ".fub94a2>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandBackground);}", ".f13mj44e>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandBackground);}", ".f1qq5vh1>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandBackground);}", ".f12fgbth>.fui-Checkbox__indicator{border-top-color:var(--colorCompoundBrandStroke);}", ".f171e6fm>.fui-Checkbox__indicator{border-right-color:var(--colorCompoundBrandStroke);}", ".fttsnhr>.fui-Checkbox__indicator{border-left-color:var(--colorCompoundBrandStroke);}", ".f1fyk1ks>.fui-Checkbox__indicator{border-bottom-color:var(--colorCompoundBrandStroke);}", ".fvvg2h8>.fui-Checkbox__indicator{color:var(--colorCompoundBrandForeground1);}", ".f158kwzp{cursor:default;}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".fgiuqeu>.fui-Checkbox__indicator{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f1q4sfkt>.fui-Checkbox__indicator{border-right-color:var(--colorNeutralStrokeDisabled);}", ".f71co73>.fui-Checkbox__indicator{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f1u7lsiy>.fui-Checkbox__indicator{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".f3vxa14>.fui-Checkbox__indicator{color:var(--colorNeutralForegroundDisabled);}"],
    m: [["@media (forced-colors: active){.f1dcs8yz{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lmtjkn>.fui-Checkbox__indicator{color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useInputBaseClassName = /* @__PURE__ */ __resetStyles2("ruo9svu", null, [".ruo9svu{box-sizing:border-box;cursor:inherit;height:100%;margin:0;opacity:0;position:absolute;top:0;width:calc(16px + 2 * var(--spacingHorizontalS));}"]);
  var useInputStyles = /* @__PURE__ */ __styles2({
    before: {
      j35jbq: ["f1e31b4d", "f1vgc2s3"]
    },
    after: {
      oyh7mz: ["f1vgc2s3", "f1e31b4d"]
    },
    large: {
      a9b677: "f1mq5jt6"
    }
  }, {
    d: [".f1e31b4d{right:0;}", ".f1vgc2s3{left:0;}", ".f1mq5jt6{width:calc(20px + 2 * var(--spacingHorizontalS));}"]
  });
  var useIndicatorBaseClassName = /* @__PURE__ */ __resetStyles2("rrh91wr", null, [".rrh91wr{align-self:flex-start;box-sizing:border-box;flex-shrink:0;display:flex;align-items:center;justify-content:center;overflow:hidden;border:var(--strokeWidthThin) solid var(--colorNeutralStrokeAccessible);border-radius:var(--borderRadiusSmall);margin:var(--spacingVerticalS) var(--spacingHorizontalS);fill:currentColor;pointer-events:none;font-size:12px;height:16px;width:16px;}"]);
  var useIndicatorStyles = /* @__PURE__ */ __styles2({
    large: {
      Be2twd7: "f4ybsrx",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3"
    },
    circular: {
      Bbmb7ep: ["f8fbkgy", "f1nfllo7"],
      Beyfa6y: ["f1nfllo7", "f8fbkgy"],
      B7oj6ja: ["f1djnp8u", "f1s8kh49"],
      Btl43ni: ["f1s8kh49", "f1djnp8u"]
    }
  }, {
    d: [".f4ybsrx{font-size:16px;}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".f8fbkgy{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f1nfllo7{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1djnp8u{border-top-right-radius:var(--borderRadiusCircular);}", ".f1s8kh49{border-top-left-radius:var(--borderRadiusCircular);}"]
  });
  var useLabelStyles = /* @__PURE__ */ __styles2({
    base: {
      qb2dma: "f7nlbp4",
      sj55zd: "f1ym3bx4",
      Bceei9c: "fpo1scq",
      z8tnut: "f1kwiid1",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f5b47ha",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"]
    },
    before: {
      z189sj: ["f7x41pl", "fruq291"]
    },
    after: {
      uwmqm3: ["fruq291", "f7x41pl"]
    },
    medium: {
      B6of3ja: "fjzwpt6",
      jrapky: "fh6j2fo"
    },
    large: {
      B6of3ja: "f1xlvstr",
      jrapky: "f49ad5g"
    }
  }, {
    d: [".f7nlbp4{align-self:center;}", ".f1ym3bx4{color:inherit;}", ".fpo1scq{cursor:inherit;}", ".f1kwiid1{padding-top:var(--spacingVerticalS);}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f5b47ha{padding-bottom:var(--spacingVerticalS);}", ".f7x41pl{padding-right:var(--spacingHorizontalXS);}", ".fruq291{padding-left:var(--spacingHorizontalXS);}", ".fjzwpt6{margin-top:calc((16px - var(--lineHeightBase300)) / 2);}", ".fh6j2fo{margin-bottom:calc((16px - var(--lineHeightBase300)) / 2);}", ".f1xlvstr{margin-top:calc((20px - var(--lineHeightBase300)) / 2);}", ".f49ad5g{margin-bottom:calc((20px - var(--lineHeightBase300)) / 2);}"]
  });
  var useCheckboxStyles_unstable = (state) => {
    const {
      checked,
      disabled,
      labelPosition,
      shape: shape2,
      size
    } = state;
    const rootBaseClassName = useRootBaseClassName2();
    const rootStyles = useRootStyles3();
    state.root.className = mergeClasses(checkboxClassNames.root, rootBaseClassName, disabled ? rootStyles.disabled : checked === "mixed" ? rootStyles.mixed : checked ? rootStyles.checked : rootStyles.unchecked, state.root.className);
    const inputBaseClassName = useInputBaseClassName();
    const inputStyles2 = useInputStyles();
    state.input.className = mergeClasses(checkboxClassNames.input, inputBaseClassName, size === "large" && inputStyles2.large, inputStyles2[labelPosition], state.input.className);
    const indicatorBaseClassName = useIndicatorBaseClassName();
    const indicatorStyles = useIndicatorStyles();
    if (state.indicator) {
      state.indicator.className = mergeClasses(checkboxClassNames.indicator, indicatorBaseClassName, size === "large" && indicatorStyles.large, shape2 === "circular" && indicatorStyles.circular, state.indicator.className);
    }
    const labelStyles2 = useLabelStyles();
    if (state.label) {
      state.label.className = mergeClasses(checkboxClassNames.label, labelStyles2.base, labelStyles2[size], labelStyles2[labelPosition], state.label.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-checkbox/lib/components/Checkbox/Checkbox.js
  var Checkbox = /* @__PURE__ */ React54.forwardRef((props, ref) => {
    const state = useCheckbox_unstable(props, ref);
    useCheckboxStyles_unstable(state);
    useCustomStyleHook("useCheckboxStyles_unstable")(state);
    return renderCheckbox_unstable(state);
  });
  Checkbox.displayName = "Checkbox";

  // ../node_modules/@fluentui/react-divider/lib/components/Divider/Divider.js
  var React56 = __toESM(require_react());

  // ../node_modules/@fluentui/react-divider/lib/components/Divider/renderDivider.js
  var renderDivider_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {
      children: state.root.children !== void 0 && /* @__PURE__ */ jsx(state.wrapper, {
        children: state.root.children
      })
    });
  };

  // ../node_modules/@fluentui/react-divider/lib/components/Divider/useDivider.js
  var React55 = __toESM(require_react());
  var useDivider_unstable = (props, ref) => {
    const { alignContent = "center", appearance = "default", inset = false, vertical = false, wrapper: wrapper2 } = props;
    const dividerId = useId2("divider-");
    return {
      // Props passed at the top-level
      alignContent,
      appearance,
      inset,
      vertical,
      // Slots definition
      components: {
        root: "div",
        wrapper: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        role: "separator",
        "aria-orientation": vertical ? "vertical" : "horizontal",
        "aria-labelledby": props.children ? dividerId : void 0,
        ...props,
        ref
      }), {
        elementType: "div"
      }),
      wrapper: slot_exports.always(wrapper2, {
        defaultProps: {
          id: dividerId,
          children: props.children
        },
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-divider/lib/components/Divider/useDividerStyles.styles.js
  var dividerClassNames = {
    root: "fui-Divider",
    wrapper: "fui-Divider__wrapper"
  };
  var useBaseStyles = /* @__PURE__ */ __styles2({
    base: {
      Bt984gj: "f122n59",
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f22iagw",
      Beiy3e4: "f1063pyq",
      Bh6795r: "fqerorx",
      qhf8xq: "f10pi13n",
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm",
      fsow6f: "f17mccla",
      Bcvre1j: "fyl8oag",
      Br0sdwz: "f16vkdww",
      Bn78ew0: "fhsnbul",
      li1rpt: "f1gw3sf2",
      ap17g6: "f1ly5f7u",
      B771hl4: "f1s3tz6t"
    },
    childless: {
      susq4k: "f1kyqvp9",
      Bicfajf: ["fzynn9s", "f1z0ukd1"],
      jwcpgy: ["fekrn8e", "ftdg338"],
      B4rk6o: "fesgyo"
    },
    start: {
      Bsft5z2: "f13zj6fq"
    },
    center: {
      Ftih45: "f1wl9k8s",
      Bsft5z2: "f13zj6fq"
    },
    end: {
      Ftih45: "f1wl9k8s"
    },
    brand: {
      sj55zd: "f16muhyy",
      Bq4z7u6: "fcbuu2a",
      Bk5zm6e: ["f1wdw2dr", "f1ttio3w"],
      Bqjgrrk: "f1582fpk",
      Bm6vgfq: ["f1ttio3w", "f1wdw2dr"],
      B0n5ga8: "f1ahrvm8",
      s924m2: ["f1cd3wbc", "f17hbk9y"],
      B1q35kw: "fvrapl0",
      Gp14am: ["f17hbk9y", "f1cd3wbc"]
    },
    "default": {
      sj55zd: "fkfq4zb",
      Bq4z7u6: "f1vccso1",
      Bk5zm6e: ["f1geml7w", "fjml6kk"],
      Bqjgrrk: "f1r7kh1m",
      Bm6vgfq: ["fjml6kk", "f1geml7w"],
      B0n5ga8: "f16j7guv",
      s924m2: ["fx01ahm", "fj1a37q"],
      B1q35kw: "fl8d8yv",
      Gp14am: ["fj1a37q", "fx01ahm"]
    },
    subtle: {
      sj55zd: "fkfq4zb",
      Bq4z7u6: "f5g06un",
      Bk5zm6e: ["f13sxdku", "f1n015lb"],
      Bqjgrrk: "f1x6bl8t",
      Bm6vgfq: ["f1n015lb", "f13sxdku"],
      B0n5ga8: "fvod1wy",
      s924m2: ["fwslg65", "flk0e17"],
      B1q35kw: "f103fvts",
      Gp14am: ["flk0e17", "fwslg65"]
    },
    strong: {
      sj55zd: "fkfq4zb",
      Bq4z7u6: "f10tv6oz",
      Bk5zm6e: ["f16xp3sf", "f1seuxxq"],
      Bqjgrrk: "fwrmqbx",
      Bm6vgfq: ["f1seuxxq", "f16xp3sf"],
      B0n5ga8: "ft83z1f",
      s924m2: ["f1g4150c", "f192dr6e"],
      B1q35kw: "f1qnawh6",
      Gp14am: ["f192dr6e", "f1g4150c"]
    }
  }, {
    d: [".f122n59{align-items:center;}", ".f1ewtqcl{box-sizing:border-box;}", ".f22iagw{display:flex;}", ".f1063pyq{flex-direction:row;}", ".fqerorx{flex-grow:1;}", ".f10pi13n{position:relative;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f17mccla{text-align:center;}", ".fyl8oag::before{box-sizing:border-box;}", ".f16vkdww::before{display:flex;}", ".fhsnbul::before{flex-grow:1;}", ".f1gw3sf2::after{box-sizing:border-box;}", ".f1ly5f7u::after{display:flex;}", ".f1s3tz6t::after{flex-grow:1;}", ".f1kyqvp9::before{margin-bottom:0;}", ".fzynn9s::before{margin-right:0;}", ".f1z0ukd1::before{margin-left:0;}", ".fekrn8e::after{margin-left:0;}", ".ftdg338::after{margin-right:0;}", ".fesgyo::after{margin-top:0;}", '.f13zj6fq::after{content:"";}', '.f1wl9k8s::before{content:"";}', ".f16muhyy{color:var(--colorBrandForeground1);}", ".fcbuu2a::before{border-top-color:var(--colorBrandStroke1);}", ".f1wdw2dr::before{border-right-color:var(--colorBrandStroke1);}", ".f1ttio3w::before{border-left-color:var(--colorBrandStroke1);}", ".f1582fpk::before{border-bottom-color:var(--colorBrandStroke1);}", ".f1ahrvm8::after{border-top-color:var(--colorBrandStroke1);}", ".f1cd3wbc::after{border-right-color:var(--colorBrandStroke1);}", ".f17hbk9y::after{border-left-color:var(--colorBrandStroke1);}", ".fvrapl0::after{border-bottom-color:var(--colorBrandStroke1);}", ".fkfq4zb{color:var(--colorNeutralForeground2);}", ".f1vccso1::before{border-top-color:var(--colorNeutralStroke2);}", ".f1geml7w::before{border-right-color:var(--colorNeutralStroke2);}", ".fjml6kk::before{border-left-color:var(--colorNeutralStroke2);}", ".f1r7kh1m::before{border-bottom-color:var(--colorNeutralStroke2);}", ".f16j7guv::after{border-top-color:var(--colorNeutralStroke2);}", ".fx01ahm::after{border-right-color:var(--colorNeutralStroke2);}", ".fj1a37q::after{border-left-color:var(--colorNeutralStroke2);}", ".fl8d8yv::after{border-bottom-color:var(--colorNeutralStroke2);}", ".f5g06un::before{border-top-color:var(--colorNeutralStroke3);}", ".f13sxdku::before{border-right-color:var(--colorNeutralStroke3);}", ".f1n015lb::before{border-left-color:var(--colorNeutralStroke3);}", ".f1x6bl8t::before{border-bottom-color:var(--colorNeutralStroke3);}", ".fvod1wy::after{border-top-color:var(--colorNeutralStroke3);}", ".fwslg65::after{border-right-color:var(--colorNeutralStroke3);}", ".flk0e17::after{border-left-color:var(--colorNeutralStroke3);}", ".f103fvts::after{border-bottom-color:var(--colorNeutralStroke3);}", ".f10tv6oz::before{border-top-color:var(--colorNeutralStroke1);}", ".f16xp3sf::before{border-right-color:var(--colorNeutralStroke1);}", ".f1seuxxq::before{border-left-color:var(--colorNeutralStroke1);}", ".fwrmqbx::before{border-bottom-color:var(--colorNeutralStroke1);}", ".ft83z1f::after{border-top-color:var(--colorNeutralStroke1);}", ".f1g4150c::after{border-right-color:var(--colorNeutralStroke1);}", ".f192dr6e::after{border-left-color:var(--colorNeutralStroke1);}", ".f1qnawh6::after{border-bottom-color:var(--colorNeutralStroke1);}"]
  });
  var useHorizontalStyles = /* @__PURE__ */ __styles2({
    base: {
      a9b677: "fly5x3f",
      Bdkvgpv: "f163fonl",
      B0qfbqy: "f51yk4v",
      pbipgd: "f13rof3u",
      Bm2nyyq: "f8rth92",
      xrcqlc: "f6czdpx",
      i5u598: "f1iyka9k"
    },
    inset: {
      uwmqm3: ["fjlbh76", "f11qrl6u"],
      z189sj: ["f11qrl6u", "fjlbh76"]
    },
    start: {
      Ftih45: "f1wl9k8s",
      Bicfajf: ["f1ojjlep", "fk1kexq"],
      Bxwl2t9: "f1he2m4d",
      jwcpgy: ["f12w1bnb", "f1558wlj"]
    },
    center: {
      Bicfajf: ["f1ojjlep", "fk1kexq"],
      jwcpgy: ["f12w1bnb", "f1558wlj"]
    },
    end: {
      Bicfajf: ["f1ojjlep", "fk1kexq"],
      Bsft5z2: "f13zj6fq",
      jwcpgy: ["f12w1bnb", "f1558wlj"],
      Iy66sp: "f1ayce8x"
    }
  }, {
    d: [".fly5x3f{width:100%;}", ".f163fonl::before{border-top-style:solid;}", ".f51yk4v::before{border-top-width:var(--strokeWidthThin);}", ".f13rof3u::before{min-width:8px;}", ".f8rth92::after{border-top-style:solid;}", ".f6czdpx::after{border-top-width:var(--strokeWidthThin);}", ".f1iyka9k::after{min-width:8px;}", ".fjlbh76{padding-left:12px;}", ".f11qrl6u{padding-right:12px;}", '.f1wl9k8s::before{content:"";}', ".f1ojjlep::before{margin-right:12px;}", ".fk1kexq::before{margin-left:12px;}", ".f1he2m4d::before{max-width:8px;}", ".f12w1bnb::after{margin-left:12px;}", ".f1558wlj::after{margin-right:12px;}", '.f13zj6fq::after{content:"";}', ".f1ayce8x::after{max-width:8px;}"]
  });
  var useVerticalStyles = /* @__PURE__ */ __styles2({
    base: {
      Beiy3e4: "f1vx9l62",
      sshi5w: "f16gbxbe",
      m598lv: ["f1yq6w5o", "f1jpmc5p"],
      B4f6apu: ["f9sc749", "f1x8pvcy"],
      zkzzav: "fhkwbjy",
      Barhvk9: ["flthirb", "ftkbnf5"],
      Ihftqj: ["f13hvwk3", "f1en4csx"],
      Bde111x: "f19onpk6"
    },
    inset: {
      B6of3ja: "f1xdg43u",
      jrapky: "f1jlhsmd"
    },
    withChildren: {
      sshi5w: "f1tjaq3g"
    },
    start: {
      Ftih45: "f1wl9k8s",
      susq4k: "fg2pwug",
      Bbdr6tz: "fkjtzyi",
      B4rk6o: "f8vk40g"
    },
    center: {
      susq4k: "fg2pwug",
      B4rk6o: "f8vk40g"
    },
    end: {
      susq4k: "fg2pwug",
      Bsft5z2: "f13zj6fq",
      B4rk6o: "f8vk40g",
      gn64ia: "fqg5mu5"
    }
  }, {
    d: [".f1vx9l62{flex-direction:column;}", ".f16gbxbe{min-height:20px;}", ".f1yq6w5o::before{border-right-style:solid;}", ".f1jpmc5p::before{border-left-style:solid;}", ".f9sc749::before{border-right-width:var(--strokeWidthThin);}", ".f1x8pvcy::before{border-left-width:var(--strokeWidthThin);}", ".fhkwbjy::before{min-height:8px;}", ".flthirb::after{border-right-style:solid;}", ".ftkbnf5::after{border-left-style:solid;}", ".f13hvwk3::after{border-right-width:var(--strokeWidthThin);}", ".f1en4csx::after{border-left-width:var(--strokeWidthThin);}", ".f19onpk6::after{min-height:8px;}", ".f1xdg43u{margin-top:12px;}", ".f1jlhsmd{margin-bottom:12px;}", ".f1tjaq3g{min-height:84px;}", '.f1wl9k8s::before{content:"";}', ".fg2pwug::before{margin-bottom:12px;}", ".fkjtzyi::before{max-height:8px;}", ".f8vk40g::after{margin-top:12px;}", '.f13zj6fq::after{content:"";}', ".fqg5mu5::after{max-height:8px;}"]
  });
  var useDividerStyles_unstable = (state) => {
    const baseStyles = useBaseStyles();
    const horizontalStyles = useHorizontalStyles();
    const verticalStyles = useVerticalStyles();
    const {
      alignContent,
      appearance,
      inset,
      vertical
    } = state;
    state.root.className = mergeClasses(
      dividerClassNames.root,
      // Base styles
      baseStyles.base,
      baseStyles[alignContent],
      appearance && baseStyles[appearance],
      // Horizontal styles
      !vertical && horizontalStyles.base,
      !vertical && inset && horizontalStyles.inset,
      !vertical && horizontalStyles[alignContent],
      // Vertical styles
      vertical && verticalStyles.base,
      vertical && inset && verticalStyles.inset,
      vertical && verticalStyles[alignContent],
      vertical && state.root.children !== void 0 && verticalStyles.withChildren,
      // Childless styles
      state.root.children === void 0 && baseStyles.childless,
      // User provided class name
      state.root.className
    );
    if (state.wrapper) {
      state.wrapper.className = mergeClasses(dividerClassNames.wrapper, state.wrapper.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-divider/lib/components/Divider/Divider.js
  var Divider = /* @__PURE__ */ React56.forwardRef((props, ref) => {
    const state = useDivider_unstable(props, ref);
    useDividerStyles_unstable(state);
    useCustomStyleHook("useDividerStyles_unstable")(state);
    return renderDivider_unstable(state);
  });
  Divider.displayName = "Divider";

  // ../node_modules/@fluentui/react-input/lib/components/Input/Input.js
  var React58 = __toESM(require_react());

  // ../node_modules/@fluentui/react-input/lib/components/Input/useInput.js
  var React57 = __toESM(require_react());
  var useInput_unstable = (props, ref) => {
    props = useFieldControlProps_unstable(props, {
      supportsLabelFor: true,
      supportsRequired: true,
      supportsSize: true
    });
    const overrides = useOverrides();
    var _overrides_inputDefaultAppearance;
    const { size = "medium", appearance = (_overrides_inputDefaultAppearance = overrides.inputDefaultAppearance) !== null && _overrides_inputDefaultAppearance !== void 0 ? _overrides_inputDefaultAppearance : "outline", onChange } = props;
    if (appearance === "filled-darker-shadow" || appearance === "filled-lighter-shadow") {
      console.error("The 'filled-darker-shadow' and 'filled-lighter-shadow' appearances are deprecated and will be removed in the future.");
    }
    const [value, setValue] = useControllableState({
      state: props.value,
      defaultState: props.defaultValue,
      initialState: ""
    });
    const nativeProps = getPartitionedNativeProps({
      props,
      primarySlotTagName: "input",
      excludedPropNames: [
        "size",
        "onChange",
        "value",
        "defaultValue"
      ]
    });
    const state = {
      size,
      appearance,
      components: {
        root: "span",
        input: "input",
        contentBefore: "span",
        contentAfter: "span"
      },
      input: slot_exports.always(props.input, {
        defaultProps: {
          type: "text",
          ref,
          ...nativeProps.primary
        },
        elementType: "input"
      }),
      contentAfter: slot_exports.optional(props.contentAfter, {
        elementType: "span"
      }),
      contentBefore: slot_exports.optional(props.contentBefore, {
        elementType: "span"
      }),
      root: slot_exports.always(props.root, {
        defaultProps: nativeProps.root,
        elementType: "span"
      })
    };
    state.input.value = value;
    state.input.onChange = useEventCallback((ev) => {
      var _onChange;
      const newValue = ev.target.value;
      (_onChange = onChange) === null || _onChange === void 0 ? void 0 : _onChange(ev, {
        value: newValue
      });
      setValue(newValue);
    });
    return state;
  };

  // ../node_modules/@fluentui/react-input/lib/components/Input/renderInput.js
  var renderInput_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.contentBefore && /* @__PURE__ */ jsx(state.contentBefore, {}),
        /* @__PURE__ */ jsx(state.input, {}),
        state.contentAfter && /* @__PURE__ */ jsx(state.contentAfter, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-input/lib/components/Input/useInputStyles.styles.js
  var inputClassNames = {
    root: "fui-Input",
    input: "fui-Input__input",
    contentBefore: "fui-Input__contentBefore",
    contentAfter: "fui-Input__contentAfter"
  };
  var useRootClassName = /* @__PURE__ */ __resetStyles2("r1jtohuq", "rl1z2p5", {
    r: [".r1jtohuq{display:inline-flex;align-items:center;flex-wrap:nowrap;gap:var(--spacingHorizontalXXS);border-radius:var(--borderRadiusMedium);position:relative;box-sizing:border-box;min-height:32px;padding:0 var(--spacingHorizontalMNudge);font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);background-color:var(--colorNeutralBackground1);border:1px solid var(--colorNeutralStroke1);border-bottom-color:var(--colorNeutralStrokeAccessible);}", '.r1jtohuq::after{box-sizing:border-box;content:"";position:absolute;left:-1px;bottom:-1px;right:-1px;height:max(2px, var(--borderRadiusMedium));border-bottom-left-radius:var(--borderRadiusMedium);border-bottom-right-radius:var(--borderRadiusMedium);border-bottom:2px solid var(--colorCompoundBrandStroke);clip-path:inset(calc(100% - 2px) 0 0 0);transform:scaleX(0);transition-property:transform;transition-duration:var(--durationUltraFast);transition-delay:var(--curveAccelerateMid);}', ".r1jtohuq:focus-within::after{transform:scaleX(1);transition-property:transform;transition-duration:var(--durationNormal);transition-delay:var(--curveDecelerateMid);}", ".r1jtohuq:focus-within:active::after{border-bottom-color:var(--colorCompoundBrandStrokePressed);}", ".r1jtohuq:focus-within{outline:2px solid transparent;}", ".rl1z2p5{display:inline-flex;align-items:center;flex-wrap:nowrap;gap:var(--spacingHorizontalXXS);border-radius:var(--borderRadiusMedium);position:relative;box-sizing:border-box;min-height:32px;padding:0 var(--spacingHorizontalMNudge);font-family:var(--fontFamilyBase);font-size:var(--fontSizeBase300);font-weight:var(--fontWeightRegular);line-height:var(--lineHeightBase300);background-color:var(--colorNeutralBackground1);border:1px solid var(--colorNeutralStroke1);border-bottom-color:var(--colorNeutralStrokeAccessible);}", '.rl1z2p5::after{box-sizing:border-box;content:"";position:absolute;right:-1px;bottom:-1px;left:-1px;height:max(2px, var(--borderRadiusMedium));border-bottom-right-radius:var(--borderRadiusMedium);border-bottom-left-radius:var(--borderRadiusMedium);border-bottom:2px solid var(--colorCompoundBrandStroke);clip-path:inset(calc(100% - 2px) 0 0 0);transform:scaleX(0);transition-property:transform;transition-duration:var(--durationUltraFast);transition-delay:var(--curveAccelerateMid);}', ".rl1z2p5:focus-within::after{transform:scaleX(1);transition-property:transform;transition-duration:var(--durationNormal);transition-delay:var(--curveDecelerateMid);}", ".rl1z2p5:focus-within:active::after{border-bottom-color:var(--colorCompoundBrandStrokePressed);}", ".rl1z2p5:focus-within{outline:2px solid transparent;}"],
    s: ["@media screen and (prefers-reduced-motion: reduce){.r1jtohuq::after{transition-duration:0.01ms;transition-delay:0.01ms;}}", "@media screen and (prefers-reduced-motion: reduce){.r1jtohuq:focus-within::after{transition-duration:0.01ms;transition-delay:0.01ms;}}", "@media screen and (prefers-reduced-motion: reduce){.rl1z2p5::after{transition-duration:0.01ms;transition-delay:0.01ms;}}", "@media screen and (prefers-reduced-motion: reduce){.rl1z2p5:focus-within::after{transition-duration:0.01ms;transition-delay:0.01ms;}}"]
  });
  var useRootStyles4 = /* @__PURE__ */ __styles2({
    small: {
      sshi5w: "f1pha7fy",
      uwmqm3: ["fk8j09s", "fdw0yi8"],
      z189sj: ["fdw0yi8", "fk8j09s"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fy9rknc",
      Bhrd7zp: "figsok6",
      Bg96gwp: "fwrc4pm"
    },
    medium: {},
    large: {
      sshi5w: "f1w5jphr",
      uwmqm3: ["f1uw59to", "fw5db7e"],
      z189sj: ["fw5db7e", "f1uw59to"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "figsok6",
      Bg96gwp: "faaz57k",
      i8kkvl: "f1rjii52",
      Belr9w4: "f1r7g2jn"
    },
    outline: {},
    outlineInteractive: {
      Bgoe8wy: "fvcxoqz",
      Bwzppfd: ["f1ub3y4t", "f1m52nbi"],
      oetu4i: "f1l4zc64",
      gg5e9n: ["f1m52nbi", "f1ub3y4t"],
      Drbcw7: "f8vnjqi",
      udz0bu: ["fz1etlk", "f1hc16gm"],
      Be8ivqh: "f1klwx88",
      ofdepl: ["f1hc16gm", "fz1etlk"]
    },
    underline: {
      De3pzq: "f1c21dwh",
      Bbmb7ep: ["f1krrbdw", "f1deotkl"],
      Beyfa6y: ["f1deotkl", "f1krrbdw"],
      B7oj6ja: ["f10ostut", "f1ozlkrg"],
      Btl43ni: ["f1ozlkrg", "f10ostut"],
      icvyot: "f1ern45e",
      vrafjx: ["f1n71otn", "f1deefiw"],
      wvpqe5: ["f1deefiw", "f1n71otn"],
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      B1piin3: ["f15yvnhg", "f1n6gb5g"]
    },
    underlineInteractive: {
      oetu4i: "f1l4zc64",
      Be8ivqh: "f1klwx88",
      B3778ie: ["f1nf3wye", "feulmo5"],
      d9w3h3: ["feulmo5", "f1nf3wye"],
      Bl18szs: ["f18vqdqu", "f53nyzz"],
      B4j8arr: ["f53nyzz", "f18vqdqu"]
    },
    filled: {
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"]
    },
    filledInteractive: {
      q7v0qe: "ftmjh5b",
      kmh5ft: ["f17blpuu", "fsrcdbj"],
      nagaa4: "f1tpwn32",
      B1yhkcb: ["fsrcdbj", "f17blpuu"]
    },
    invalid: {
      tvckwq: "fs4k3qj",
      gk2u95: ["fcee079", "fmyw78r"],
      hhx65j: "f1fgmyf4",
      Bxowmz0: ["fmyw78r", "fcee079"]
    },
    "filled-darker": {
      De3pzq: "f16xq7d1"
    },
    "filled-lighter": {
      De3pzq: "fxugw4r"
    },
    "filled-darker-shadow": {
      De3pzq: "f16xq7d1",
      E5pizo: "fyed02w"
    },
    "filled-lighter-shadow": {
      De3pzq: "fxugw4r",
      E5pizo: "fyed02w"
    },
    disabled: {
      Bceei9c: "fdrzuqr",
      De3pzq: "f1c21dwh",
      g2u3we: "f1jj8ep1",
      h3c5rm: ["f15xbau", "fy0fskl"],
      B9xav0g: "f4ikngz",
      zhjwy3: ["fy0fskl", "f15xbau"],
      Bjwas2f: "fg455y9",
      Bn1d65q: ["f1rvyvqg", "f14g86mu"],
      Bxeuatn: "f1cwzwz",
      n51gp8: ["f14g86mu", "f1rvyvqg"],
      Bsft5z2: "fhr9occ",
      Bduesf4: "f99w1ws"
    }
  }, {
    d: [".f1pha7fy{min-height:24px;}", ".fk8j09s{padding-left:var(--spacingHorizontalSNudge);}", ".fdw0yi8{padding-right:var(--spacingHorizontalSNudge);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".fwrc4pm{line-height:var(--lineHeightBase200);}", ".f1w5jphr{min-height:40px;}", ".f1uw59to{padding-left:var(--spacingHorizontalM);}", ".fw5db7e{padding-right:var(--spacingHorizontalM);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".f1rjii52{column-gap:var(--spacingHorizontalSNudge);}", ".f1r7g2jn{row-gap:var(--spacingHorizontalSNudge);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1krrbdw{border-bottom-right-radius:0;}", ".f1deotkl{border-bottom-left-radius:0;}", ".f10ostut{border-top-right-radius:0;}", ".f1ozlkrg{border-top-left-radius:0;}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1n6gb5g::after{left:0;}", ".f15yvnhg::after{right:0;}", ".f1nf3wye::after{border-bottom-right-radius:0;}", ".feulmo5::after{border-bottom-left-radius:0;}", ".f18vqdqu::after{border-top-right-radius:0;}", ".f53nyzz::after{border-top-left-radius:0;}", ".fghlq4f{border-top-color:var(--colorTransparentStroke);}", ".f1gn591s{border-right-color:var(--colorTransparentStroke);}", ".fjscplz{border-left-color:var(--colorTransparentStroke);}", ".fb073pr{border-bottom-color:var(--colorTransparentStroke);}", ".fs4k3qj:not(:focus-within),.fs4k3qj:hover:not(:focus-within){border-top-color:var(--colorPaletteRedBorder2);}", ".fcee079:not(:focus-within),.fcee079:hover:not(:focus-within){border-right-color:var(--colorPaletteRedBorder2);}", ".fmyw78r:not(:focus-within),.fmyw78r:hover:not(:focus-within){border-left-color:var(--colorPaletteRedBorder2);}", ".f1fgmyf4:not(:focus-within),.f1fgmyf4:hover:not(:focus-within){border-bottom-color:var(--colorPaletteRedBorder2);}", ".f16xq7d1{background-color:var(--colorNeutralBackground3);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".fyed02w{box-shadow:var(--shadow2);}", ".fdrzuqr{cursor:not-allowed;}", ".f1jj8ep1{border-top-color:var(--colorNeutralStrokeDisabled);}", ".f15xbau{border-right-color:var(--colorNeutralStrokeDisabled);}", ".fy0fskl{border-left-color:var(--colorNeutralStrokeDisabled);}", ".f4ikngz{border-bottom-color:var(--colorNeutralStrokeDisabled);}", ".fhr9occ::after{content:unset;}"],
    h: [".fvcxoqz:hover{border-top-color:var(--colorNeutralStroke1Hover);}", ".f1ub3y4t:hover{border-right-color:var(--colorNeutralStroke1Hover);}", ".f1m52nbi:hover{border-left-color:var(--colorNeutralStroke1Hover);}", ".f1l4zc64:hover{border-bottom-color:var(--colorNeutralStrokeAccessibleHover);}", ".ftmjh5b:hover,.ftmjh5b:focus-within{border-top-color:var(--colorTransparentStrokeInteractive);}", ".f17blpuu:hover,.f17blpuu:focus-within{border-right-color:var(--colorTransparentStrokeInteractive);}", ".fsrcdbj:hover,.fsrcdbj:focus-within{border-left-color:var(--colorTransparentStrokeInteractive);}", ".f1tpwn32:hover,.f1tpwn32:focus-within{border-bottom-color:var(--colorTransparentStrokeInteractive);}"],
    a: [".f8vnjqi:active,.f8vnjqi:focus-within{border-top-color:var(--colorNeutralStroke1Pressed);}", ".fz1etlk:active,.fz1etlk:focus-within{border-right-color:var(--colorNeutralStroke1Pressed);}", ".f1hc16gm:active,.f1hc16gm:focus-within{border-left-color:var(--colorNeutralStroke1Pressed);}", ".f1klwx88:active,.f1klwx88:focus-within{border-bottom-color:var(--colorNeutralStrokeAccessiblePressed);}"],
    m: [["@media (forced-colors: active){.fg455y9{border-top-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f14g86mu{border-left-color:GrayText;}.f1rvyvqg{border-right-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1cwzwz{border-bottom-color:GrayText;}}", {
      m: "(forced-colors: active)"
    }]],
    w: [".f99w1ws:focus-within{outline-style:none;}"]
  });
  var useInputClassName = /* @__PURE__ */ __resetStyles2("rvp2gzh", null, [".rvp2gzh{box-sizing:border-box;flex-grow:1;min-width:0;border-style:none;padding:0 var(--spacingHorizontalXXS);color:var(--colorNeutralForeground1);background-color:transparent;outline-style:none;font-family:inherit;font-size:inherit;font-weight:inherit;line-height:inherit;}", ".rvp2gzh::-webkit-input-placeholder{color:var(--colorNeutralForeground4);opacity:1;}", ".rvp2gzh::-moz-placeholder{color:var(--colorNeutralForeground4);opacity:1;}", ".rvp2gzh:-ms-input-placeholder{color:var(--colorNeutralForeground4);opacity:1;}", ".rvp2gzh::placeholder{color:var(--colorNeutralForeground4);opacity:1;}"]);
  var useInputElementStyles = /* @__PURE__ */ __styles2({
    large: {
      uwmqm3: ["fk8j09s", "fdw0yi8"],
      z189sj: ["fdw0yi8", "fk8j09s"]
    },
    disabled: {
      sj55zd: "f1s2aq7o",
      De3pzq: "f1c21dwh",
      Bceei9c: "fdrzuqr",
      yvdlaj: "fahhnxm"
    }
  }, {
    d: [".fk8j09s{padding-left:var(--spacingHorizontalSNudge);}", ".fdw0yi8{padding-right:var(--spacingHorizontalSNudge);}", ".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".fdrzuqr{cursor:not-allowed;}", ".fahhnxm::-webkit-input-placeholder{color:var(--colorNeutralForegroundDisabled);}", ".fahhnxm::-moz-placeholder{color:var(--colorNeutralForegroundDisabled);}"]
  });
  var useContentClassName = /* @__PURE__ */ __resetStyles2("r1572tok", null, [".r1572tok{box-sizing:border-box;color:var(--colorNeutralForeground3);display:flex;}", ".r1572tok>svg{font-size:20px;}"]);
  var useContentStyles = /* @__PURE__ */ __styles2({
    disabled: {
      sj55zd: "f1s2aq7o"
    },
    small: {
      kwki1k: "f3u2cy0"
    },
    medium: {},
    large: {
      kwki1k: "fa420co"
    }
  }, {
    d: [".f1s2aq7o{color:var(--colorNeutralForegroundDisabled);}", ".f3u2cy0>svg{font-size:16px;}", ".fa420co>svg{font-size:24px;}"]
  });
  var useInputStyles_unstable = (state) => {
    const {
      size,
      appearance
    } = state;
    const disabled = state.input.disabled;
    const invalid = `${state.input["aria-invalid"]}` === "true";
    const filled = appearance.startsWith("filled");
    const rootStyles = useRootStyles4();
    const inputStyles2 = useInputElementStyles();
    const contentStyles = useContentStyles();
    state.root.className = mergeClasses(inputClassNames.root, useRootClassName(), rootStyles[size], rootStyles[appearance], !disabled && appearance === "outline" && rootStyles.outlineInteractive, !disabled && appearance === "underline" && rootStyles.underlineInteractive, !disabled && filled && rootStyles.filledInteractive, filled && rootStyles.filled, !disabled && invalid && rootStyles.invalid, disabled && rootStyles.disabled, state.root.className);
    state.input.className = mergeClasses(inputClassNames.input, useInputClassName(), size === "large" && inputStyles2.large, disabled && inputStyles2.disabled, state.input.className);
    const contentClasses = [useContentClassName(), disabled && contentStyles.disabled, contentStyles[size]];
    if (state.contentBefore) {
      state.contentBefore.className = mergeClasses(inputClassNames.contentBefore, ...contentClasses, state.contentBefore.className);
    }
    if (state.contentAfter) {
      state.contentAfter.className = mergeClasses(inputClassNames.contentAfter, ...contentClasses, state.contentAfter.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-input/lib/components/Input/Input.js
  var Input = /* @__PURE__ */ React58.forwardRef((props, ref) => {
    const state = useInput_unstable(props, ref);
    useInputStyles_unstable(state);
    useCustomStyleHook("useInputStyles_unstable")(state);
    return renderInput_unstable(state);
  });
  Input.displayName = "Input";

  // ../node_modules/@fluentui/react-radio/lib/contexts/RadioGroupContext.js
  var React59 = __toESM(require_react());
  var RadioGroupContext = React59.createContext(void 0);
  var radioGroupContextDefaultValue = {};
  var RadioGroupProvider = RadioGroupContext.Provider;
  var useRadioGroupContextValue_unstable = () => React59.useContext(RadioGroupContext) || radioGroupContextDefaultValue;

  // ../node_modules/@fluentui/react-radio/lib/components/Radio/Radio.js
  var React61 = __toESM(require_react());

  // ../node_modules/@fluentui/react-radio/lib/components/Radio/renderRadio.js
  var renderRadio_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        /* @__PURE__ */ jsx(state.input, {}),
        /* @__PURE__ */ jsx(state.indicator, {}),
        state.label && /* @__PURE__ */ jsx(state.label, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-radio/lib/components/Radio/useRadio.js
  var React60 = __toESM(require_react());
  var useRadio_unstable = (props, ref) => {
    const group = useRadioGroupContextValue_unstable();
    const { name = group.name, checked = group.value !== void 0 ? group.value === props.value : void 0, defaultChecked = group.defaultValue !== void 0 ? group.defaultValue === props.value : void 0, labelPosition = group.layout === "horizontal-stacked" ? "below" : "after", disabled = group.disabled, required = group.required, "aria-describedby": ariaDescribedBy = group["aria-describedby"], onChange } = props;
    const nativeProps = getPartitionedNativeProps({
      props,
      primarySlotTagName: "input",
      excludedPropNames: [
        "checked",
        "defaultChecked",
        "onChange"
      ]
    });
    const root151 = slot_exports.always(props.root, {
      defaultProps: {
        ref: useFocusWithin(),
        ...nativeProps.root
      },
      elementType: "span"
    });
    const input4 = slot_exports.always(props.input, {
      defaultProps: {
        ref,
        type: "radio",
        id: useId2("radio-", nativeProps.primary.id),
        name,
        checked,
        defaultChecked,
        disabled,
        required,
        "aria-describedby": ariaDescribedBy,
        ...nativeProps.primary
      },
      elementType: "input"
    });
    input4.onChange = mergeCallbacks(input4.onChange, (ev) => {
      var _onChange;
      return (_onChange = onChange) === null || _onChange === void 0 ? void 0 : _onChange(ev, {
        value: ev.currentTarget.value
      });
    });
    const label6 = slot_exports.optional(props.label, {
      defaultProps: {
        htmlFor: input4.id,
        disabled: input4.disabled
      },
      elementType: Label
    });
    const indicator5 = slot_exports.always(props.indicator, {
      defaultProps: {
        "aria-hidden": true,
        children: /* @__PURE__ */ React60.createElement(CircleFilled, null)
      },
      elementType: "div"
    });
    return {
      labelPosition,
      components: {
        root: "span",
        input: "input",
        label: Label,
        indicator: "div"
      },
      root: root151,
      input: input4,
      label: label6,
      indicator: indicator5
    };
  };

  // ../node_modules/@fluentui/react-radio/lib/components/Radio/useRadioStyles.styles.js
  var radioClassNames = {
    root: "fui-Radio",
    indicator: "fui-Radio__indicator",
    input: "fui-Radio__input",
    label: "fui-Radio__label"
  };
  var useRootBaseClassName3 = /* @__PURE__ */ __resetStyles2("r12l4eqc", "r18esy0c", [".r12l4eqc{display:inline-flex;position:relative;}", ".r12l4eqc:focus{outline-style:none;}", ".r12l4eqc:focus-visible{outline-style:none;}", ".r12l4eqc[data-fui-focus-within]:focus-within{border-top-color:transparent;border-right-color:transparent;border-bottom-color:transparent;border-left-color:transparent;}", '.r12l4eqc[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-right-style:solid;border-bottom-style:solid;border-left-style:solid;border-top-width:2px;border-right-width:2px;border-bottom-width:2px;border-left-width:2px;border-bottom-right-radius:var(--borderRadiusMedium);border-bottom-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);top:calc(2px * -1);right:calc(2px * -1);bottom:calc(2px * -1);left:calc(2px * -1);}', ".r18esy0c{display:inline-flex;position:relative;}", ".r18esy0c:focus{outline-style:none;}", ".r18esy0c:focus-visible{outline-style:none;}", ".r18esy0c[data-fui-focus-within]:focus-within{border-top-color:transparent;border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;}", '.r18esy0c[data-fui-focus-within]:focus-within::after{content:"";position:absolute;pointer-events:none;z-index:1;border-top-style:solid;border-left-style:solid;border-bottom-style:solid;border-right-style:solid;border-top-width:2px;border-left-width:2px;border-bottom-width:2px;border-right-width:2px;border-bottom-left-radius:var(--borderRadiusMedium);border-bottom-right-radius:var(--borderRadiusMedium);border-top-left-radius:var(--borderRadiusMedium);border-top-right-radius:var(--borderRadiusMedium);border-top-color:var(--colorStrokeFocus2);border-left-color:var(--colorStrokeFocus2);border-bottom-color:var(--colorStrokeFocus2);border-right-color:var(--colorStrokeFocus2);top:calc(2px * -1);left:calc(2px * -1);bottom:calc(2px * -1);right:calc(2px * -1);}']);
  var useRootStyles5 = /* @__PURE__ */ __styles2({
    vertical: {
      Beiy3e4: "f1vx9l62",
      Bt984gj: "f122n59"
    }
  }, {
    d: [".f1vx9l62{flex-direction:column;}", ".f122n59{align-items:center;}"]
  });
  var useInputBaseClassName2 = /* @__PURE__ */ __resetStyles2("r9gx1vl", "r1uk1i2c", [".r9gx1vl{position:absolute;left:0;top:0;width:calc(16px + 2 * var(--spacingHorizontalS));height:100%;box-sizing:border-box;margin:0;opacity:0;}", ".r9gx1vl:enabled{cursor:pointer;}", ".r9gx1vl:enabled~.fui-Radio__label{cursor:pointer;}", ".r9gx1vl:not(:checked)~.fui-Radio__indicator>*{opacity:0;}", ".r9gx1vl:enabled:not(:checked)~.fui-Radio__label{color:var(--colorNeutralForeground3);}", ".r9gx1vl:enabled:not(:checked)~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessible);}", ".r9gx1vl:enabled:not(:checked):hover~.fui-Radio__label{color:var(--colorNeutralForeground2);}", ".r9gx1vl:enabled:not(:checked):hover~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessibleHover);}", ".r9gx1vl:enabled:not(:checked):hover:active~.fui-Radio__label{color:var(--colorNeutralForeground1);}", ".r9gx1vl:enabled:not(:checked):hover:active~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessiblePressed);}", ".r9gx1vl:enabled:checked~.fui-Radio__label{color:var(--colorNeutralForeground1);}", ".r9gx1vl:enabled:checked~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStroke);color:var(--colorCompoundBrandForeground1);}", ".r9gx1vl:enabled:checked:hover~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStrokeHover);color:var(--colorCompoundBrandForeground1Hover);}", ".r9gx1vl:enabled:checked:hover:active~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStrokePressed);color:var(--colorCompoundBrandForeground1Pressed);}", ".r9gx1vl:disabled~.fui-Radio__label{color:var(--colorNeutralForegroundDisabled);cursor:default;}", ".r9gx1vl:disabled~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeDisabled);color:var(--colorNeutralForegroundDisabled);}", ".r1uk1i2c{position:absolute;right:0;top:0;width:calc(16px + 2 * var(--spacingHorizontalS));height:100%;box-sizing:border-box;margin:0;opacity:0;}", ".r1uk1i2c:enabled{cursor:pointer;}", ".r1uk1i2c:enabled~.fui-Radio__label{cursor:pointer;}", ".r1uk1i2c:not(:checked)~.fui-Radio__indicator>*{opacity:0;}", ".r1uk1i2c:enabled:not(:checked)~.fui-Radio__label{color:var(--colorNeutralForeground3);}", ".r1uk1i2c:enabled:not(:checked)~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessible);}", ".r1uk1i2c:enabled:not(:checked):hover~.fui-Radio__label{color:var(--colorNeutralForeground2);}", ".r1uk1i2c:enabled:not(:checked):hover~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessibleHover);}", ".r1uk1i2c:enabled:not(:checked):hover:active~.fui-Radio__label{color:var(--colorNeutralForeground1);}", ".r1uk1i2c:enabled:not(:checked):hover:active~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeAccessiblePressed);}", ".r1uk1i2c:enabled:checked~.fui-Radio__label{color:var(--colorNeutralForeground1);}", ".r1uk1i2c:enabled:checked~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStroke);color:var(--colorCompoundBrandForeground1);}", ".r1uk1i2c:enabled:checked:hover~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStrokeHover);color:var(--colorCompoundBrandForeground1Hover);}", ".r1uk1i2c:enabled:checked:hover:active~.fui-Radio__indicator{border-color:var(--colorCompoundBrandStrokePressed);color:var(--colorCompoundBrandForeground1Pressed);}", ".r1uk1i2c:disabled~.fui-Radio__label{color:var(--colorNeutralForegroundDisabled);cursor:default;}", ".r1uk1i2c:disabled~.fui-Radio__indicator{border-color:var(--colorNeutralStrokeDisabled);color:var(--colorNeutralForegroundDisabled);}"]);
  var useInputStyles2 = /* @__PURE__ */ __styles2({
    below: {
      a9b677: "fly5x3f",
      Bqenvij: "f1je6zif"
    }
  }, {
    d: [".fly5x3f{width:100%;}", ".f1je6zif{height:calc(16px + 2 * var(--spacingVerticalS));}"]
  });
  var useIndicatorBaseClassName2 = /* @__PURE__ */ __resetStyles2("rid4516", null, [".rid4516{width:16px;height:16px;font-size:12px;box-sizing:border-box;flex-shrink:0;display:flex;align-items:center;justify-content:center;overflow:hidden;border:var(--strokeWidthThin) solid;border-radius:var(--borderRadiusCircular);margin:var(--spacingVerticalS) var(--spacingHorizontalS);fill:currentColor;pointer-events:none;}"]);
  var useLabelStyles2 = /* @__PURE__ */ __styles2({
    base: {
      qb2dma: "f7nlbp4",
      z8tnut: "f1kwiid1",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f5b47ha",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"]
    },
    after: {
      uwmqm3: ["fruq291", "f7x41pl"],
      B6of3ja: "fjzwpt6",
      jrapky: "fh6j2fo"
    },
    below: {
      z8tnut: "f1ywm7hm",
      fsow6f: "f17mccla"
    }
  }, {
    d: [".f7nlbp4{align-self:center;}", ".f1kwiid1{padding-top:var(--spacingVerticalS);}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f5b47ha{padding-bottom:var(--spacingVerticalS);}", ".fruq291{padding-left:var(--spacingHorizontalXS);}", ".f7x41pl{padding-right:var(--spacingHorizontalXS);}", ".fjzwpt6{margin-top:calc((16px - var(--lineHeightBase300)) / 2);}", ".fh6j2fo{margin-bottom:calc((16px - var(--lineHeightBase300)) / 2);}", ".f1ywm7hm{padding-top:var(--spacingVerticalXS);}", ".f17mccla{text-align:center;}"]
  });
  var useRadioStyles_unstable = (state) => {
    const {
      labelPosition
    } = state;
    const rootBaseClassName = useRootBaseClassName3();
    const rootStyles = useRootStyles5();
    state.root.className = mergeClasses(radioClassNames.root, rootBaseClassName, labelPosition === "below" && rootStyles.vertical, state.root.className);
    const inputBaseClassName = useInputBaseClassName2();
    const inputStyles2 = useInputStyles2();
    state.input.className = mergeClasses(radioClassNames.input, inputBaseClassName, labelPosition === "below" && inputStyles2.below, state.input.className);
    const indicatorBaseClassName = useIndicatorBaseClassName2();
    state.indicator.className = mergeClasses(radioClassNames.indicator, indicatorBaseClassName, state.indicator.className);
    const labelStyles2 = useLabelStyles2();
    if (state.label) {
      state.label.className = mergeClasses(radioClassNames.label, labelStyles2.base, labelStyles2[labelPosition], state.label.className);
    }
  };

  // ../node_modules/@fluentui/react-radio/lib/components/Radio/Radio.js
  var Radio = /* @__PURE__ */ React61.forwardRef((props, ref) => {
    const state = useRadio_unstable(props, ref);
    useRadioStyles_unstable(state);
    useCustomStyleHook("useRadioStyles_unstable")(state);
    return renderRadio_unstable(state);
  });
  Radio.displayName = "Radio";

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/Tab.js
  var React64 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/useTab.js
  var React62 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/TabListContext.js
  var tabListContextDefaultValue = {
    appearance: "transparent",
    reserveSelectedTabSpace: true,
    disabled: false,
    selectedValue: void 0,
    onRegister: () => {
    },
    onUnregister: () => {
    },
    onSelect: () => {
    },
    getRegisteredTabs: () => {
      return {
        registeredTabs: {}
      };
    },
    size: "medium",
    vertical: false
  };
  var TabListContext = createContext14(void 0);
  var TabListProvider = TabListContext.Provider;
  var useTabListContext_unstable = (selector) => useContextSelector(TabListContext, (ctx = tabListContextDefaultValue) => selector(ctx));

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/useTab.js
  var useTab_unstable = (props, ref) => {
    var _iconSlot;
    const { content: content15, disabled: tabDisabled = false, icon: icon10, onClick, value } = props;
    const appearance = useTabListContext_unstable((ctx) => ctx.appearance);
    const reserveSelectedTabSpace = useTabListContext_unstable((ctx) => ctx.reserveSelectedTabSpace);
    const listDisabled = useTabListContext_unstable((ctx) => ctx.disabled);
    const selected = useTabListContext_unstable((ctx) => ctx.selectedValue === value);
    const onRegister = useTabListContext_unstable((ctx) => ctx.onRegister);
    const onUnregister = useTabListContext_unstable((ctx) => ctx.onUnregister);
    const onSelect = useTabListContext_unstable((ctx) => ctx.onSelect);
    const size = useTabListContext_unstable((ctx) => ctx.size);
    const vertical = useTabListContext_unstable((ctx) => !!ctx.vertical);
    const disabled = listDisabled || tabDisabled;
    const innerRef = React62.useRef(null);
    const onTabClick = useEventCallback(mergeCallbacks(onClick, (event) => onSelect(event, {
      value
    })));
    React62.useEffect(() => {
      onRegister({
        value,
        ref: innerRef
      });
      return () => {
        onUnregister({
          value,
          ref: innerRef
        });
      };
    }, [
      onRegister,
      onUnregister,
      innerRef,
      value
    ]);
    const iconSlot = slot_exports.optional(icon10, {
      elementType: "span"
    });
    const contentSlot = slot_exports.always(content15, {
      defaultProps: {
        children: props.children
      },
      elementType: "span"
    });
    const iconOnly = Boolean(((_iconSlot = iconSlot) === null || _iconSlot === void 0 ? void 0 : _iconSlot.children) && !contentSlot.children);
    return {
      components: {
        root: "button",
        icon: "span",
        content: "span",
        contentReservedSpace: "span"
      },
      root: slot_exports.always(getNativeElementProps("button", {
        ref: useMergedRefs(ref, innerRef),
        role: "tab",
        type: "button",
        // aria-selected undefined indicates it is not selectable
        // according to https://www.w3.org/TR/wai-aria-1.1/#aria-selected
        "aria-selected": disabled ? void 0 : `${selected}`,
        ...props,
        disabled,
        onClick: onTabClick
      }), {
        elementType: "button"
      }),
      icon: iconSlot,
      iconOnly,
      content: contentSlot,
      contentReservedSpace: slot_exports.optional(content15, {
        renderByDefault: !selected && !iconOnly && reserveSelectedTabSpace,
        defaultProps: {
          children: props.children
        },
        elementType: "span"
      }),
      appearance,
      disabled,
      selected,
      size,
      value,
      vertical
    };
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/renderTab.js
  var renderTab_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.icon && /* @__PURE__ */ jsx(state.icon, {}),
        !state.iconOnly && /* @__PURE__ */ jsx(state.content, {}),
        state.contentReservedSpace && /* @__PURE__ */ jsx(state.contentReservedSpace, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/useTabAnimatedIndicator.styles.js
  var React63 = __toESM(require_react());
  var tabIndicatorCssVars_unstable = {
    offsetVar: "--fui-Tab__indicator--offset",
    scaleVar: "--fui-Tab__indicator--scale"
  };
  var useActiveIndicatorStyles = /* @__PURE__ */ __styles2({
    base: {
      B68tc82: "f1mtd64y",
      Bmxbyg5: "f1y7q3j9"
    },
    animated: {
      Ba2ppi3: "fhwpy7i",
      F2fol1: "f6zz20j",
      B1dyfl9: "f1ai4sc1",
      B0vmy72: "f9qxlq5",
      u9bimw: "f1aql376"
    },
    horizontal: {
      sjv3b2: ["fug4aj8", "f1i5xzg7"],
      b1kco5: "f1q7ujh"
    },
    vertical: {
      sjv3b2: "f1hqboyk",
      b1kco5: "f1dxupa6"
    }
  }, {
    d: [".f1mtd64y{overflow-x:visible;}", ".f1y7q3j9{overflow-y:visible;}", ".fhwpy7i::after{transition-property:transform;}", ".f6zz20j::after{transition-duration:var(--durationSlow);}", ".f1ai4sc1::after{transition-timing-function:var(--curveDecelerateMax);}", ".fug4aj8::after{transform-origin:left;}", ".f1i5xzg7::after{transform-origin:right;}", ".f1q7ujh::after{transform:translateX(var(--fui-Tab__indicator--offset)) scaleX(var(--fui-Tab__indicator--scale));}", ".f1hqboyk::after{transform-origin:top;}", ".f1dxupa6::after{transform:translateY(var(--fui-Tab__indicator--offset)) scaleY(var(--fui-Tab__indicator--scale));}"],
    m: [["@media (prefers-reduced-motion: reduce){.f9qxlq5::after{transition-property:none;}}", {
      m: "(prefers-reduced-motion: reduce)"
    }], ["@media (prefers-reduced-motion: reduce){.f1aql376::after{transition-duration:0.01ms;}}", {
      m: "(prefers-reduced-motion: reduce)"
    }]]
  });
  var calculateTabRect = (element2) => {
    if (element2) {
      var _element_parentElement;
      const parentRect = ((_element_parentElement = element2.parentElement) === null || _element_parentElement === void 0 ? void 0 : _element_parentElement.getBoundingClientRect()) || {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
      const tabRect = element2.getBoundingClientRect();
      return {
        x: tabRect.x - parentRect.x,
        y: tabRect.y - parentRect.y,
        width: tabRect.width,
        height: tabRect.height
      };
    }
    return void 0;
  };
  var getRegisteredTabRect = (registeredTabs, value) => {
    var _registeredTabs_JSON_stringify;
    const element2 = value !== void 0 && value !== null ? (_registeredTabs_JSON_stringify = registeredTabs[JSON.stringify(value)]) === null || _registeredTabs_JSON_stringify === void 0 ? void 0 : _registeredTabs_JSON_stringify.ref.current : void 0;
    return element2 ? calculateTabRect(element2) : void 0;
  };
  var useTabAnimatedIndicatorStyles_unstable = (state) => {
    const {
      disabled,
      selected,
      vertical
    } = state;
    const activeIndicatorStyles = useActiveIndicatorStyles();
    const [lastAnimatedFrom, setLastAnimatedFrom] = React63.useState();
    const [animationValues, setAnimationValues] = React63.useState({
      offset: 0,
      scale: 1
    });
    const getRegisteredTabs = useTabListContext_unstable((ctx) => ctx.getRegisteredTabs);
    React63.useEffect(() => {
      if (lastAnimatedFrom) {
        setAnimationValues({
          offset: 0,
          scale: 1
        });
      }
    }, [lastAnimatedFrom]);
    if (selected) {
      const {
        previousSelectedValue,
        selectedValue,
        registeredTabs
      } = getRegisteredTabs();
      if (previousSelectedValue && lastAnimatedFrom !== previousSelectedValue) {
        const previousSelectedTabRect = getRegisteredTabRect(registeredTabs, previousSelectedValue);
        const selectedTabRect = getRegisteredTabRect(registeredTabs, selectedValue);
        if (selectedTabRect && previousSelectedTabRect) {
          const offset = vertical ? previousSelectedTabRect.y - selectedTabRect.y : previousSelectedTabRect.x - selectedTabRect.x;
          const scale = vertical ? previousSelectedTabRect.height / selectedTabRect.height : previousSelectedTabRect.width / selectedTabRect.width;
          setAnimationValues({
            offset,
            scale
          });
          setLastAnimatedFrom(previousSelectedValue);
        }
      }
    } else if (lastAnimatedFrom) {
      setLastAnimatedFrom(void 0);
    }
    if (disabled) {
      return state;
    }
    const animating = animationValues.offset === 0 && animationValues.scale === 1;
    state.root.className = mergeClasses(state.root.className, selected && activeIndicatorStyles.base, selected && animating && activeIndicatorStyles.animated, selected && (vertical ? activeIndicatorStyles.vertical : activeIndicatorStyles.horizontal));
    const rootCssVars = {
      [tabIndicatorCssVars_unstable.offsetVar]: `${animationValues.offset}px`,
      [tabIndicatorCssVars_unstable.scaleVar]: `${animationValues.scale}`
    };
    state.root.style = {
      ...rootCssVars,
      ...state.root.style
    };
    return state;
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/useTabStyles.styles.js
  var tabClassNames = {
    root: "fui-Tab",
    icon: "fui-Tab__icon",
    content: "fui-Tab__content"
  };
  var reservedSpaceClassNames = {
    content: "fui-Tab__content--reserved-space"
  };
  var useRootStyles6 = /* @__PURE__ */ __styles2({
    base: {
      Bt984gj: "f122n59",
      g2u3we: "fwhevhj",
      h3c5rm: ["f61n433", "f1q8l70w"],
      B9xav0g: "fv1dfc8",
      zhjwy3: ["f1q8l70w", "f61n433"],
      Bbmb7ep: ["f1aa9q02", "f16jpd5f"],
      Beyfa6y: ["f16jpd5f", "f1aa9q02"],
      B7oj6ja: ["f1jar5jt", "fyu767a"],
      Btl43ni: ["fyu767a", "f1jar5jt"],
      B4j52fo: "fre7gi1",
      Bekrc4i: ["f1358rze", "f1rvrf73"],
      Bn0qgzm: "fqdk4by",
      ibv6hh: ["f1rvrf73", "f1358rze"],
      Bceei9c: "f1k6fduh",
      mc9l5x: "f13qh94s",
      Bnnss6s: "fi64zpg",
      Bxotwcr: "f1u07yai",
      Budl1dq: "frn2hmy",
      wkccdc: "f1olsevy",
      Bahqtrf: "fk6fouc",
      Bg96gwp: "f1i3iumi",
      oeaueh: "f1s6fcnf",
      qhf8xq: "f10pi13n",
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      B9bfxx9: "f1cxpek8"
    },
    horizontal: {
      Brf1p80: "f4d9j23"
    },
    vertical: {
      Brf1p80: "f1s9ku6b"
    },
    smallHorizontal: {
      i8kkvl: "f14mj54c",
      z8tnut: "fp2oml8",
      z189sj: ["fdw0yi8", "fk8j09s"],
      Byoj8tv: "f1tdddsa",
      uwmqm3: ["fk8j09s", "fdw0yi8"]
    },
    smallVertical: {
      i8kkvl: "f14mj54c",
      z8tnut: "fclwglc",
      z189sj: ["fdw0yi8", "fk8j09s"],
      Byoj8tv: "fywfov9",
      uwmqm3: ["fk8j09s", "fdw0yi8"]
    },
    mediumHorizontal: {
      i8kkvl: "f1rjii52",
      z8tnut: "f5yzyt",
      z189sj: ["f11gcy0p", "f1ng84yb"],
      Byoj8tv: "fx3omr",
      uwmqm3: ["f1ng84yb", "f11gcy0p"]
    },
    mediumVertical: {
      i8kkvl: "f1rjii52",
      z8tnut: "fp2oml8",
      z189sj: ["f11gcy0p", "f1ng84yb"],
      Byoj8tv: "f1tdddsa",
      uwmqm3: ["f1ng84yb", "f11gcy0p"]
    },
    largeHorizontal: {
      i8kkvl: "f1rjii52",
      z8tnut: "fikn0iw",
      z189sj: ["f11gcy0p", "f1ng84yb"],
      Byoj8tv: "fdxej3c",
      uwmqm3: ["f1ng84yb", "f11gcy0p"]
    },
    largeVertical: {
      i8kkvl: "f1rjii52",
      z8tnut: "f1kwiid1",
      z189sj: ["f11gcy0p", "f1ng84yb"],
      Byoj8tv: "f5b47ha",
      uwmqm3: ["f1ng84yb", "f11gcy0p"]
    },
    transparent: {
      De3pzq: "f1c21dwh",
      Jwef8y: "fjxutwb",
      ecr2s2: "fophhak",
      Bptxc3x: "fmmjozx",
      B076xvk: "f1mfqf41",
      q9r9w5: "f10aiid4",
      cl4aha: "fpkze5g",
      Bk452zc: "f149wc3x",
      a4hkcw: "fjioou7"
    },
    subtle: {
      De3pzq: "fhovq9v",
      Jwef8y: "f1t94bn6",
      ecr2s2: "f1wfn5kd",
      Bptxc3x: "fmmjozx",
      B076xvk: "f1mfqf41",
      q9r9w5: "f10aiid4",
      cl4aha: "fpkze5g",
      Bk452zc: "f149wc3x",
      a4hkcw: "fjioou7"
    },
    disabled: {
      De3pzq: "f1c21dwh",
      Bptxc3x: "fato7r6",
      cl4aha: "fao1bnu",
      Bceei9c: "fdrzuqr"
    },
    selected: {
      Bptxc3x: "f1cadz5z",
      B076xvk: "f1ck17l",
      q9r9w5: "f42ak0g",
      cl4aha: "ffplhdr",
      Bk452zc: "ffth601",
      a4hkcw: "fhklyu5"
    }
  }, {
    d: [".f122n59{align-items:center;}", ".fwhevhj{border-top-color:none;}", ".f61n433{border-right-color:none;}", ".f1q8l70w{border-left-color:none;}", ".fv1dfc8{border-bottom-color:none;}", ".f1aa9q02{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f16jpd5f{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f1jar5jt{border-top-right-radius:var(--borderRadiusMedium);}", ".fyu767a{border-top-left-radius:var(--borderRadiusMedium);}", ".fre7gi1{border-top-width:0;}", ".f1358rze{border-right-width:0;}", ".f1rvrf73{border-left-width:0;}", ".fqdk4by{border-bottom-width:0;}", ".f1k6fduh{cursor:pointer;}", ".f13qh94s{display:grid;}", ".fi64zpg{flex-shrink:0;}", ".f1u07yai{grid-auto-flow:column;}", ".frn2hmy{grid-template-columns:auto;}", ".f1olsevy{grid-template-rows:auto;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".f1s6fcnf{outline-style:none;}", ".f10pi13n{position:relative;}", ".f1p9o1ba{overflow-x:hidden;}", ".f1sil6mw{overflow-y:hidden;}", ".f1cxpek8{text-transform:none;}", ".f4d9j23{justify-content:center;}", ".f1s9ku6b{justify-content:start;}", ".f14mj54c{column-gap:var(--spacingHorizontalXXS);}", ".fp2oml8{padding-top:var(--spacingVerticalSNudge);}", ".fdw0yi8{padding-right:var(--spacingHorizontalSNudge);}", ".fk8j09s{padding-left:var(--spacingHorizontalSNudge);}", ".f1tdddsa{padding-bottom:var(--spacingVerticalSNudge);}", ".fclwglc{padding-top:var(--spacingVerticalXXS);}", ".fywfov9{padding-bottom:var(--spacingVerticalXXS);}", ".f1rjii52{column-gap:var(--spacingHorizontalSNudge);}", ".f5yzyt{padding-top:var(--spacingVerticalM);}", ".f11gcy0p{padding-right:var(--spacingHorizontalMNudge);}", ".f1ng84yb{padding-left:var(--spacingHorizontalMNudge);}", ".fx3omr{padding-bottom:var(--spacingVerticalM);}", ".fikn0iw{padding-top:var(--spacingVerticalL);}", ".fdxej3c{padding-bottom:var(--spacingVerticalL);}", ".f1kwiid1{padding-top:var(--spacingVerticalS);}", ".f5b47ha{padding-bottom:var(--spacingVerticalS);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".fmmjozx .fui-Tab__icon{color:var(--colorNeutralForeground2);}", ".fpkze5g .fui-Tab__content{color:var(--colorNeutralForeground2);}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fato7r6 .fui-Tab__icon{color:var(--colorNeutralForegroundDisabled);}", ".fao1bnu .fui-Tab__content{color:var(--colorNeutralForegroundDisabled);}", ".fdrzuqr{cursor:not-allowed;}", ".f1cadz5z .fui-Tab__icon{color:var(--colorCompoundBrandForeground1);}", ".ffplhdr .fui-Tab__content{color:var(--colorNeutralForeground1);}"],
    h: [".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".f1mfqf41:hover .fui-Tab__icon{color:var(--colorNeutralForeground2Hover);}", ".f149wc3x:hover .fui-Tab__content{color:var(--colorNeutralForeground2Hover);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".f1ck17l:hover .fui-Tab__icon{color:var(--colorCompoundBrandForeground1Hover);}", ".ffth601:hover .fui-Tab__content{color:var(--colorNeutralForeground1Hover);}"],
    a: [".fophhak:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f10aiid4:active .fui-Tab__icon{color:var(--colorNeutralForeground2Pressed);}", ".fjioou7:active .fui-Tab__content{color:var(--colorNeutralForeground2Pressed);}", ".f1wfn5kd:active{background-color:var(--colorSubtleBackgroundPressed);}", ".f42ak0g:active .fui-Tab__icon{color:var(--colorCompoundBrandForeground1Pressed);}", ".fhklyu5:active .fui-Tab__content{color:var(--colorNeutralForeground1Pressed);}"]
  });
  var useFocusStyles = /* @__PURE__ */ __styles2({
    base: {
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bn4voq9: "f1p7hgxw",
      Bfpq7zp: "f1way5bb",
      g9k6zt: "f9znhxp",
      j6ew2k: ["fqa318h", "fqa318h"],
      Bhxq17a: "f1vjpng2"
    }
  }, {
    d: [".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", ".f1p7hgxw[data-fui-focus-visible]{outline-width:var(--strokeWidthThick);}", ".f1way5bb[data-fui-focus-visible]{outline-color:transparent;}", ".f9znhxp[data-fui-focus-visible]{outline-style:solid;}", ".fqa318h[data-fui-focus-visible]{box-shadow:var(--shadow4),0 0 0 var(--strokeWidthThick) var(--colorStrokeFocus2);}", ".f1vjpng2[data-fui-focus-visible]{z-index:1;}"]
  });
  var usePendingIndicatorStyles = /* @__PURE__ */ __styles2({
    base: {
      az7l2e: "fhw179n",
      Bv4n3vi: ["f10y1uxy", "f6aiuy0"],
      vqofr: ["f6aiuy0", "f10y1uxy"],
      B0uxbk8: ["f1kfpfnu", "f1dx5wco"],
      Bgqb9hq: ["f1dx5wco", "f1kfpfnu"],
      amg5m6: "f1kmhr4c",
      zkfqfm: "fl1ydde",
      Bkydozb: "f1y7maxz",
      vzq8l0: ["f105swax", "fscdmel"],
      Bka2azo: ["fscdmel", "f105swax"],
      Br4ovkg: ["f1tkcw1w", "f1u11x8o"],
      csmgbd: ["f1u11x8o", "f1tkcw1w"],
      y36c18: "f16cxu0",
      B1ctymy: "f1nwgacf",
      Bgvrrv0: "f15ovonk",
      ddr6p5: "fvje46l"
    },
    disabled: {
      az7l2e: "f1ut20fw",
      Bkydozb: "fhrzcfn"
    },
    smallHorizontal: {
      lawp4y: "fchca7p",
      Baz25je: "f1r53b5e",
      Fbdkly: ["f1s6rxz5", "fo35v8s"],
      mdwyqc: ["fo35v8s", "f1s6rxz5"]
    },
    smallVertical: {
      lawp4y: "fze4zud",
      Fbdkly: ["f1fzr1x6", "f1f351id"],
      Bciustq: "fdp32p8",
      Ccq8qp: "f1aij3q"
    },
    mediumHorizontal: {
      lawp4y: "fchca7p",
      Baz25je: "f1s2r9ax",
      Fbdkly: ["f1o0nnkk", "fxb7rol"],
      mdwyqc: ["fxb7rol", "f1o0nnkk"]
    },
    mediumVertical: {
      lawp4y: "f17jracn",
      Fbdkly: ["f1fzr1x6", "f1f351id"],
      Bciustq: "f117lcb2",
      Ccq8qp: "f1aij3q"
    },
    largeHorizontal: {
      lawp4y: "fchca7p",
      Baz25je: "f1s2r9ax",
      Fbdkly: ["f1o0nnkk", "fxb7rol"],
      mdwyqc: ["fxb7rol", "f1o0nnkk"]
    },
    largeVertical: {
      lawp4y: "fel9d3z",
      Fbdkly: ["f1fzr1x6", "f1f351id"],
      Bciustq: "f6vqlre",
      Ccq8qp: "f1aij3q"
    }
  }, {
    h: [".fhw179n:hover::before{background-color:var(--colorNeutralStroke1Hover);}", ".f10y1uxy:hover::before{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f6aiuy0:hover::before{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1kfpfnu:hover::before{border-top-right-radius:var(--borderRadiusCircular);}", ".f1dx5wco:hover::before{border-top-left-radius:var(--borderRadiusCircular);}", '.f1kmhr4c:hover::before{content:"";}', ".fl1ydde:hover::before{position:absolute;}", ".f1ut20fw:hover::before{background-color:var(--colorTransparentStroke);}"],
    a: [".f1y7maxz:active::before{background-color:var(--colorNeutralStroke1Pressed);}", ".f105swax:active::before{border-bottom-right-radius:var(--borderRadiusCircular);}", ".fscdmel:active::before{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1tkcw1w:active::before{border-top-right-radius:var(--borderRadiusCircular);}", ".f1u11x8o:active::before{border-top-left-radius:var(--borderRadiusCircular);}", '.f16cxu0:active::before{content:"";}', ".f1nwgacf:active::before{position:absolute;}", ".fhrzcfn:active::before{background-color:var(--colorTransparentStroke);}"],
    m: [["@media (forced-colors: active){.f15ovonk:hover::before{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fvje46l:active::before{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }]],
    d: [".fchca7p::before{bottom:0;}", ".f1r53b5e::before{height:var(--strokeWidthThick);}", ".f1s6rxz5::before{left:var(--spacingHorizontalSNudge);}", ".fo35v8s::before{right:var(--spacingHorizontalSNudge);}", ".fze4zud::before{bottom:var(--spacingVerticalXS);}", ".f1fzr1x6::before{left:0;}", ".f1f351id::before{right:0;}", ".fdp32p8::before{top:var(--spacingVerticalXS);}", ".f1aij3q::before{width:var(--strokeWidthThicker);}", ".f1s2r9ax::before{height:var(--strokeWidthThicker);}", ".f1o0nnkk::before{left:var(--spacingHorizontalM);}", ".fxb7rol::before{right:var(--spacingHorizontalM);}", ".f17jracn::before{bottom:var(--spacingVerticalS);}", ".f117lcb2::before{top:var(--spacingVerticalS);}", ".fel9d3z::before{bottom:var(--spacingVerticalMNudge);}", ".f6vqlre::before{top:var(--spacingVerticalMNudge);}"]
  });
  var useActiveIndicatorStyles2 = /* @__PURE__ */ __styles2({
    base: {
      Bjyk6c5: "f1rp0jgh",
      B3778ie: ["fprarqb", "f14vs0nd"],
      d9w3h3: ["f14vs0nd", "fprarqb"],
      Bl18szs: ["f1gtfqs9", "f18zvfd9"],
      B4j8arr: ["f18zvfd9", "f1gtfqs9"],
      Bsft5z2: "f13zj6fq",
      E3zdtr: "f1mdlcz9",
      t2ki1e: "ffmd2fr"
    },
    selected: {
      Bjyk6c5: "f1ksivud",
      Glksuk: "f1eytvvh",
      Blzl0y7: "fuaa9s",
      f7digc: "fy7ktjt",
      Biqphg1: "f16tp0gf",
      Bntoloa: "fj0yp7j"
    },
    disabled: {
      Bjyk6c5: "f13lkzet"
    },
    smallHorizontal: {
      By385i5: "fo72kxq",
      Dlnsje: "f9bb2ob",
      Eqx8gd: ["f1q70ajw", "f18rbzdx"],
      B1piin3: ["f18rbzdx", "f1q70ajw"]
    },
    smallVertical: {
      By385i5: "fqbue9b",
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      bn5sak: "fk1klkt",
      a2br6o: "f1o25lip"
    },
    mediumHorizontal: {
      By385i5: "fo72kxq",
      Dlnsje: "f1vx7lu8",
      Eqx8gd: ["fna7m5n", "f1oxpfwv"],
      B1piin3: ["f1oxpfwv", "fna7m5n"]
    },
    mediumVertical: {
      By385i5: "fipylg0",
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      bn5sak: "fqchiol",
      a2br6o: "f1o25lip"
    },
    largeHorizontal: {
      By385i5: "fo72kxq",
      Dlnsje: "f1vx7lu8",
      Eqx8gd: ["fna7m5n", "f1oxpfwv"],
      B1piin3: ["f1oxpfwv", "fna7m5n"]
    },
    largeVertical: {
      By385i5: "f1w7dm5g",
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      bn5sak: "f1p6em4m",
      a2br6o: "f1o25lip"
    }
  }, {
    d: [".f1rp0jgh::after{background-color:var(--colorTransparentStroke);}", ".fprarqb::after{border-bottom-right-radius:var(--borderRadiusCircular);}", ".f14vs0nd::after{border-bottom-left-radius:var(--borderRadiusCircular);}", ".f1gtfqs9::after{border-top-right-radius:var(--borderRadiusCircular);}", ".f18zvfd9::after{border-top-left-radius:var(--borderRadiusCircular);}", '.f13zj6fq::after{content:"";}', ".f1mdlcz9::after{position:absolute;}", ".ffmd2fr::after{z-index:1;}", ".f1ksivud::after{background-color:var(--colorCompoundBrandStroke);}", ".f13lkzet::after{background-color:var(--colorNeutralForegroundDisabled);}", ".fo72kxq::after{bottom:0;}", ".f9bb2ob::after{height:var(--strokeWidthThick);}", ".f1q70ajw::after{left:var(--spacingHorizontalSNudge);}", ".f18rbzdx::after{right:var(--spacingHorizontalSNudge);}", ".fqbue9b::after{bottom:var(--spacingVerticalXS);}", ".f1n6gb5g::after{left:0;}", ".f15yvnhg::after{right:0;}", ".fk1klkt::after{top:var(--spacingVerticalXS);}", ".f1o25lip::after{width:var(--strokeWidthThicker);}", ".f1vx7lu8::after{height:var(--strokeWidthThicker);}", ".fna7m5n::after{left:var(--spacingHorizontalM);}", ".f1oxpfwv::after{right:var(--spacingHorizontalM);}", ".fipylg0::after{bottom:var(--spacingVerticalS);}", ".fqchiol::after{top:var(--spacingVerticalS);}", ".f1w7dm5g::after{bottom:var(--spacingVerticalMNudge);}", ".f1p6em4m::after{top:var(--spacingVerticalMNudge);}"],
    h: [".f1eytvvh:hover::after{background-color:var(--colorCompoundBrandStrokeHover);}"],
    a: [".fuaa9s:active::after{background-color:var(--colorCompoundBrandStrokePressed);}"],
    m: [["@media (forced-colors: active){.fy7ktjt::after{background-color:ButtonText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f16tp0gf:hover::after{background-color:ButtonText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fj0yp7j:active::after{background-color:ButtonText;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useIconStyles2 = /* @__PURE__ */ __styles2({
    base: {
      Br312pm: "fwpfdsa",
      Ijaq50: "f16hsg94",
      Bt984gj: "f122n59",
      mc9l5x: "ftuwxu6",
      Brf1p80: "f4d9j23",
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      D0sxk3: "f16u1re",
      t6yez3: "f8bsbmo"
    },
    small: {
      Be2twd7: "fe5j1ua",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3"
    },
    medium: {
      Be2twd7: "fe5j1ua",
      Bqenvij: "fjamq6b",
      a9b677: "f64fuq3"
    },
    large: {
      Be2twd7: "f1rt2boy",
      Bqenvij: "frvgh55",
      a9b677: "fq4mcun"
    },
    selected: {
      D0sxk3: "fxoiby5",
      t6yez3: "f15q0o9g"
    }
  }, {
    d: [".fwpfdsa{grid-column-start:1;}", ".f16hsg94{grid-row-start:1;}", ".f122n59{align-items:center;}", ".ftuwxu6{display:inline-flex;}", ".f4d9j23{justify-content:center;}", ".f1p9o1ba{overflow-x:hidden;}", ".f1sil6mw{overflow-y:hidden;}", ".f16u1re .fui-Icon-filled{display:none;}", ".f8bsbmo .fui-Icon-regular{display:inline;}", ".fe5j1ua{font-size:20px;}", ".fjamq6b{height:20px;}", ".f64fuq3{width:20px;}", ".f1rt2boy{font-size:24px;}", ".frvgh55{height:24px;}", ".fq4mcun{width:24px;}", ".fxoiby5 .fui-Icon-filled{display:inline;}", ".f15q0o9g .fui-Icon-regular{display:none;}"]
  });
  var useContentStyles2 = /* @__PURE__ */ __styles2({
    base: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi",
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      z8tnut: "fztplxc",
      z189sj: ["ffczdla", "fgiv446"],
      Byoj8tv: "f9g1xly",
      uwmqm3: ["fgiv446", "ffczdla"]
    },
    selected: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "f1i3iumi"
    },
    large: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "figsok6",
      Bg96gwp: "faaz57k"
    },
    largeSelected: {
      Bahqtrf: "fk6fouc",
      Be2twd7: "fod5ikn",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "faaz57k"
    },
    noIconBefore: {
      Br312pm: "fwpfdsa",
      Ijaq50: "f16hsg94"
    },
    iconBefore: {
      Br312pm: "fd46tj4",
      Ijaq50: "f16hsg94"
    },
    placeholder: {
      Bcdw1i0: "fd7fpy0"
    }
  }, {
    d: [".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}", ".f1p9o1ba{overflow-x:hidden;}", ".f1sil6mw{overflow-y:hidden;}", ".fztplxc{padding-top:var(--spacingVerticalNone);}", ".ffczdla{padding-right:var(--spacingHorizontalXXS);}", ".fgiv446{padding-left:var(--spacingHorizontalXXS);}", ".f9g1xly{padding-bottom:var(--spacingVerticalNone);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".fod5ikn{font-size:var(--fontSizeBase400);}", ".faaz57k{line-height:var(--lineHeightBase400);}", ".fwpfdsa{grid-column-start:1;}", ".f16hsg94{grid-row-start:1;}", ".fd46tj4{grid-column-start:2;}", ".fd7fpy0{visibility:hidden;}"]
  });
  var useTabStyles_unstable = (state) => {
    const rootStyles = useRootStyles6();
    const focusStyles = useFocusStyles();
    const pendingIndicatorStyles = usePendingIndicatorStyles();
    const activeIndicatorStyles = useActiveIndicatorStyles2();
    const iconStyles = useIconStyles2();
    const contentStyles = useContentStyles2();
    const {
      appearance,
      disabled,
      selected,
      size,
      vertical
    } = state;
    state.root.className = mergeClasses(
      tabClassNames.root,
      rootStyles.base,
      vertical ? rootStyles.vertical : rootStyles.horizontal,
      size === "small" && (vertical ? rootStyles.smallVertical : rootStyles.smallHorizontal),
      size === "medium" && (vertical ? rootStyles.mediumVertical : rootStyles.mediumHorizontal),
      size === "large" && (vertical ? rootStyles.largeVertical : rootStyles.largeHorizontal),
      focusStyles.base,
      !disabled && appearance === "subtle" && rootStyles.subtle,
      !disabled && appearance === "transparent" && rootStyles.transparent,
      !disabled && selected && rootStyles.selected,
      disabled && rootStyles.disabled,
      // pending indicator (before pseudo element)
      pendingIndicatorStyles.base,
      size === "small" && (vertical ? pendingIndicatorStyles.smallVertical : pendingIndicatorStyles.smallHorizontal),
      size === "medium" && (vertical ? pendingIndicatorStyles.mediumVertical : pendingIndicatorStyles.mediumHorizontal),
      size === "large" && (vertical ? pendingIndicatorStyles.largeVertical : pendingIndicatorStyles.largeHorizontal),
      disabled && pendingIndicatorStyles.disabled,
      // active indicator (after pseudo element)
      selected && activeIndicatorStyles.base,
      selected && !disabled && activeIndicatorStyles.selected,
      selected && size === "small" && (vertical ? activeIndicatorStyles.smallVertical : activeIndicatorStyles.smallHorizontal),
      selected && size === "medium" && (vertical ? activeIndicatorStyles.mediumVertical : activeIndicatorStyles.mediumHorizontal),
      selected && size === "large" && (vertical ? activeIndicatorStyles.largeVertical : activeIndicatorStyles.largeHorizontal),
      selected && disabled && activeIndicatorStyles.disabled,
      state.root.className
    );
    if (state.icon) {
      state.icon.className = mergeClasses(tabClassNames.icon, iconStyles.base, iconStyles[size], selected && iconStyles.selected, state.icon.className);
    }
    if (state.contentReservedSpace) {
      state.contentReservedSpace.className = mergeClasses(reservedSpaceClassNames.content, contentStyles.base, size === "large" ? contentStyles.largeSelected : contentStyles.selected, state.icon ? contentStyles.iconBefore : contentStyles.noIconBefore, contentStyles.placeholder, state.content.className);
      state.contentReservedSpaceClassName = state.contentReservedSpace.className;
    }
    state.content.className = mergeClasses(tabClassNames.content, contentStyles.base, size === "large" && contentStyles.large, selected && (size === "large" ? contentStyles.largeSelected : contentStyles.selected), state.icon ? contentStyles.iconBefore : contentStyles.noIconBefore, state.content.className);
    useTabAnimatedIndicatorStyles_unstable(state);
    return state;
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/Tab/Tab.js
  var Tab2 = /* @__PURE__ */ React64.forwardRef((props, ref) => {
    const state = useTab_unstable(props, ref);
    useTabStyles_unstable(state);
    useCustomStyleHook("useTabStyles_unstable")(state);
    return renderTab_unstable(state);
  });
  Tab2.displayName = "Tab";

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/TabList.js
  var React66 = __toESM(require_react());

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/useTabList.js
  var React65 = __toESM(require_react());
  var useTabList_unstable = (props, ref) => {
    const { appearance = "transparent", reserveSelectedTabSpace = true, disabled = false, onTabSelect, size = "medium", vertical = false } = props;
    const innerRef = React65.useRef(null);
    const focusAttributes = useArrowNavigationGroup({
      circular: true,
      axis: vertical ? "vertical" : "horizontal",
      memorizeCurrent: true
    });
    const [selectedValue, setSelectedValue] = useControllableState({
      state: props.selectedValue,
      defaultState: props.defaultSelectedValue,
      initialState: void 0
    });
    const currentSelectedValue = React65.useRef(void 0);
    const previousSelectedValue = React65.useRef(void 0);
    React65.useEffect(() => {
      previousSelectedValue.current = currentSelectedValue.current;
      currentSelectedValue.current = selectedValue;
    }, [
      selectedValue
    ]);
    const onSelect = useEventCallback((event, data) => {
      var _onTabSelect;
      setSelectedValue(data.value);
      (_onTabSelect = onTabSelect) === null || _onTabSelect === void 0 ? void 0 : _onTabSelect(event, data);
    });
    const registeredTabs = React65.useRef({});
    const onRegister = useEventCallback((data) => {
      registeredTabs.current[JSON.stringify(data.value)] = data;
    });
    const onUnregister = useEventCallback((data) => {
      delete registeredTabs.current[JSON.stringify(data.value)];
    });
    const getRegisteredTabs = React65.useCallback(() => {
      return {
        selectedValue: currentSelectedValue.current,
        previousSelectedValue: previousSelectedValue.current,
        registeredTabs: registeredTabs.current
      };
    }, []);
    return {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref: useMergedRefs(ref, innerRef),
        role: "tablist",
        "aria-orientation": vertical ? "vertical" : "horizontal",
        ...focusAttributes,
        ...props
      }), {
        elementType: "div"
      }),
      appearance,
      reserveSelectedTabSpace,
      disabled,
      selectedValue,
      size,
      vertical,
      onRegister,
      onUnregister,
      onSelect,
      getRegisteredTabs
    };
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/renderTabList.js
  var renderTabList_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {
      children: /* @__PURE__ */ jsx(TabListProvider, {
        value: contextValues.tabList,
        children: state.root.children
      })
    });
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/useTabListStyles.styles.js
  var tabListClassNames = {
    root: "fui-TabList"
  };
  var useStyles3 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Beiy3e4: "f1063pyq",
      Bnnss6s: "fi64zpg",
      Eh141a: "flvyvdh",
      qhf8xq: "f10pi13n"
    },
    horizontal: {
      Bt984gj: "f1q9h2pe",
      Beiy3e4: "f1063pyq"
    },
    vertical: {
      Bt984gj: "f1q9h2pe",
      Beiy3e4: "f1vx9l62"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f1063pyq{flex-direction:row;}", ".fi64zpg{flex-shrink:0;}", ".flvyvdh{flex-wrap:nowrap;}", ".f10pi13n{position:relative;}", ".f1q9h2pe{align-items:stretch;}", ".f1vx9l62{flex-direction:column;}"]
  });
  var useTabListStyles_unstable = (state) => {
    const {
      vertical
    } = state;
    const styles2 = useStyles3();
    state.root.className = mergeClasses(tabListClassNames.root, styles2.root, vertical ? styles2.vertical : styles2.horizontal, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/useTabListContextValues.js
  function useTabListContextValues_unstable(state) {
    const { appearance, reserveSelectedTabSpace, disabled, selectedValue: selectedKey, onRegister, onUnregister, onSelect, getRegisteredTabs, size, vertical } = state;
    const tabList = {
      appearance,
      reserveSelectedTabSpace,
      disabled,
      selectedValue: selectedKey,
      onSelect,
      onRegister,
      onUnregister,
      getRegisteredTabs,
      size,
      vertical
    };
    return {
      tabList
    };
  }

  // ../node_modules/@fluentui/react-tabs/lib/components/TabList/TabList.js
  var TabList = /* @__PURE__ */ React66.forwardRef((props, ref) => {
    const state = useTabList_unstable(props, ref);
    const contextValues = useTabListContextValues_unstable(state);
    useTabListStyles_unstable(state);
    useCustomStyleHook("useTabListStyles_unstable")(state);
    return renderTabList_unstable(state, contextValues);
  });
  TabList.displayName = "TabList";

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/Dialog.js
  var React70 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/useDialog.js
  var React69 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/utils/useDisableBodyScroll.js
  var import_react18 = __toESM(require_react());
  var disableScrollElementProp = "__fluentDisableScrollElement";
  function useDisableBodyScroll() {
    const { targetDocument } = useFluent();
    return (0, import_react18.useCallback)(() => {
      if (targetDocument) {
        return disableScroll(targetDocument.body);
      }
    }, [
      targetDocument
    ]);
  }
  function disableScroll(target) {
    var _target_ownerDocument_defaultView;
    const { clientWidth } = target.ownerDocument.documentElement;
    var _target_ownerDocument_defaultView_innerWidth;
    const innerWidth2 = (_target_ownerDocument_defaultView_innerWidth = (_target_ownerDocument_defaultView = target.ownerDocument.defaultView) === null || _target_ownerDocument_defaultView === void 0 ? void 0 : _target_ownerDocument_defaultView.innerWidth) !== null && _target_ownerDocument_defaultView_innerWidth !== void 0 ? _target_ownerDocument_defaultView_innerWidth : 0;
    assertIsDisableScrollElement(target);
    if (target[disableScrollElementProp].count === 0) {
      target.style.overflow = "hidden";
      target.style.paddingRight = `${innerWidth2 - clientWidth}px`;
    }
    target[disableScrollElementProp].count++;
    return () => {
      target[disableScrollElementProp].count--;
      if (target[disableScrollElementProp].count === 0) {
        target.style.overflow = target[disableScrollElementProp].previousOverflowStyle;
        target.style.paddingRight = target[disableScrollElementProp].previousPaddingRightStyle;
      }
    };
  }
  function assertIsDisableScrollElement(element2) {
    var _element, _disableScrollElementProp;
    var _2;
    (_2 = (_element = element2)[_disableScrollElementProp = disableScrollElementProp]) !== null && _2 !== void 0 ? _2 : _element[_disableScrollElementProp] = {
      count: 0,
      previousOverflowStyle: element2.style.overflow,
      previousPaddingRightStyle: element2.style.paddingRight
    };
  }

  // ../node_modules/@fluentui/react-dialog/lib/utils/useFocusFirstElement.js
  var React67 = __toESM(require_react());
  function useFocusFirstElement(open, modalType) {
    const { findFirstFocusable } = useFocusFinders();
    const { targetDocument } = useFluent();
    const dialogRef = React67.useRef(null);
    React67.useEffect(() => {
      if (!open) {
        return;
      }
      const element2 = dialogRef.current && findFirstFocusable(dialogRef.current);
      if (element2) {
        element2.focus();
      } else {
        var _dialogRef_current;
        (_dialogRef_current = dialogRef.current) === null || _dialogRef_current === void 0 ? void 0 : _dialogRef_current.focus();
        if (true) {
          console.warn(`@fluentui/react-dialog [useFocusFirstElement]:
A Dialog should have at least one focusable element inside DialogSurface.
Please add at least a close button either on \`DialogTitle\` action slot or inside \`DialogActions\``);
        }
      }
    }, [
      findFirstFocusable,
      open,
      modalType,
      targetDocument
    ]);
    return dialogRef;
  }

  // ../node_modules/@fluentui/react-dialog/lib/contexts/dialogContext.js
  var React68 = __toESM(require_react());
  var defaultContextValue = {
    open: false,
    inertTrapFocus: false,
    modalType: "modal",
    isNestedDialog: false,
    dialogRef: {
      current: null
    },
    requestOpenChange() {
    }
  };
  var DialogContext = createContext14(void 0);
  var DialogProvider = DialogContext.Provider;
  var useDialogContext_unstable = (selector) => useContextSelector(DialogContext, (ctx = defaultContextValue) => selector(ctx));

  // ../node_modules/@fluentui/react-dialog/lib/contexts/dialogSurfaceContext.js
  var import_react19 = __toESM(require_react());
  var defaultContextValue2 = false;
  var DialogSurfaceContext = (0, import_react19.createContext)(void 0);
  var DialogSurfaceProvider = DialogSurfaceContext.Provider;
  var _useContext;
  var useDialogSurfaceContext_unstable = () => (_useContext = (0, import_react19.useContext)(DialogSurfaceContext)) !== null && _useContext !== void 0 ? _useContext : defaultContextValue2;

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/useDialog.js
  var useDialog_unstable = (props) => {
    const { children, modalType = "modal", onOpenChange, inertTrapFocus = false } = props;
    const [trigger, content15] = childrenToTriggerAndContent(children);
    const [open, setOpen] = useControllableState({
      state: props.open,
      defaultState: props.defaultOpen,
      initialState: false
    });
    const requestOpenChange = useEventCallback((data) => {
      var _onOpenChange;
      (_onOpenChange = onOpenChange) === null || _onOpenChange === void 0 ? void 0 : _onOpenChange(data.event, data);
      if (!data.event.isDefaultPrevented()) {
        setOpen(data.open);
      }
    });
    const focusRef = useFocusFirstElement(open, modalType);
    const disableBodyScroll2 = useDisableBodyScroll();
    const isBodyScrollLocked = Boolean(open && modalType !== "non-modal");
    useIsomorphicLayoutEffect(() => {
      if (isBodyScrollLocked) {
        return disableBodyScroll2();
      }
    }, [
      disableBodyScroll2,
      isBodyScrollLocked
    ]);
    const { modalAttributes, triggerAttributes } = useModalAttributes({
      trapFocus: modalType !== "non-modal",
      legacyTrapFocus: !inertTrapFocus
    });
    return {
      components: {
        backdrop: "div"
      },
      inertTrapFocus,
      open,
      modalType,
      content: open ? content15 : null,
      trigger,
      requestOpenChange,
      dialogTitleId: useId2("dialog-title-"),
      isNestedDialog: useHasParentContext(DialogContext),
      dialogRef: focusRef,
      modalAttributes: modalType !== "non-modal" ? modalAttributes : void 0,
      triggerAttributes
    };
  };
  function childrenToTriggerAndContent(children) {
    const childrenArray = React69.Children.toArray(children);
    if (true) {
      if (childrenArray.length !== 1 && childrenArray.length !== 2) {
        console.warn(`@fluentui/react-dialog [useDialog]:
Dialog must contain at least one child <DialogSurface/>,
and at most two children <DialogTrigger/> <DialogSurface/> (in this order).`);
      }
    }
    switch (childrenArray.length) {
      case 2:
        return childrenArray;
      case 1:
        return [
          void 0,
          childrenArray[0]
        ];
      default:
        return [
          void 0,
          void 0
        ];
    }
  }

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/renderDialog.js
  var renderDialog_unstable = (state, contextValues) => {
    const { content: content15, trigger } = state;
    return /* @__PURE__ */ jsx(DialogProvider, {
      value: contextValues.dialog,
      children: /* @__PURE__ */ jsxs(DialogSurfaceProvider, {
        value: contextValues.dialogSurface,
        children: [
          trigger,
          content15
        ]
      })
    });
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/useDialogContextValues.js
  function useDialogContextValues_unstable(state) {
    const { modalType, open, dialogRef, dialogTitleId, isNestedDialog, inertTrapFocus, requestOpenChange, modalAttributes, triggerAttributes } = state;
    const dialog = {
      open,
      modalType,
      dialogRef,
      dialogTitleId,
      isNestedDialog,
      inertTrapFocus,
      modalAttributes,
      triggerAttributes,
      requestOpenChange
    };
    const dialogSurface = false;
    return {
      dialog,
      dialogSurface
    };
  }

  // ../node_modules/@fluentui/react-dialog/lib/components/Dialog/Dialog.js
  var Dialog = /* @__PURE__ */ React70.memo((props) => {
    const state = useDialog_unstable(props);
    const contextValues = useDialogContextValues_unstable(state);
    return renderDialog_unstable(state, contextValues);
  });
  Dialog.displayName = "Dialog";

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTrigger/DialogTrigger.js
  var React72 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTrigger/useDialogTrigger.js
  var React71 = __toESM(require_react());
  var useDialogTrigger_unstable = (props) => {
    var _child, _child1, _child2, _child3;
    const isInsideSurfaceDialog = useDialogSurfaceContext_unstable();
    const { children, disableButtonEnhancement = false, action = isInsideSurfaceDialog ? "close" : "open" } = props;
    const child = getTriggerChild(children);
    const requestOpenChange = useDialogContext_unstable((ctx) => ctx.requestOpenChange);
    const { triggerAttributes } = useModalAttributes();
    const handleClick = useEventCallback((event) => {
      var _child_props_onClick, _child4, _child_props;
      (_child4 = child) === null || _child4 === void 0 ? void 0 : (_child_props_onClick = (_child_props = _child4.props).onClick) === null || _child_props_onClick === void 0 ? void 0 : _child_props_onClick.call(_child_props, event);
      if (!event.isDefaultPrevented()) {
        requestOpenChange({
          event,
          type: "triggerClick",
          open: action === "open"
        });
      }
    });
    const triggerChildProps = {
      ...(_child = child) === null || _child === void 0 ? void 0 : _child.props,
      ref: (_child1 = child) === null || _child1 === void 0 ? void 0 : _child1.ref,
      onClick: handleClick,
      ...triggerAttributes
    };
    const ariaButtonTriggerChildProps = useARIAButtonProps(((_child2 = child) === null || _child2 === void 0 ? void 0 : _child2.type) === "button" || ((_child3 = child) === null || _child3 === void 0 ? void 0 : _child3.type) === "a" ? child.type : "div", {
      ...triggerChildProps,
      type: "button"
    });
    return {
      children: applyTriggerPropsToChildren(children, disableButtonEnhancement ? triggerChildProps : ariaButtonTriggerChildProps)
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTrigger/renderDialogTrigger.js
  var renderDialogTrigger_unstable = (state) => state.children;

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTrigger/DialogTrigger.js
  var DialogTrigger = (props) => {
    const state = useDialogTrigger_unstable(props);
    return renderDialogTrigger_unstable(state);
  };
  DialogTrigger.displayName = "DialogTrigger";
  DialogTrigger.isFluentTriggerComponent = true;

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogActions/DialogActions.js
  var React74 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogActions/useDialogActions.js
  var React73 = __toESM(require_react());
  var useDialogActions_unstable = (props, ref) => {
    const { position: position4 = "end", fluid = false } = props;
    return {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref,
        ...props
      }), {
        elementType: "div"
      }),
      position: position4,
      fluid
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogActions/renderDialogActions.js
  var renderDialogActions_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {});
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogActions/useDialogActionsStyles.styles.js
  var dialogActionsClassNames = {
    root: "fui-DialogActions"
  };
  var useStyles4 = /* @__PURE__ */ __styles2({
    root: {
      Bqenvij: "f3052tw",
      B7ck84d: "f1ewtqcl",
      mc9l5x: "f22iagw",
      Ijaq50: "f1cztu7b",
      nk6f5a: "fcu02xx",
      i8kkvl: "f4px1ci",
      Belr9w4: "fn67r4l",
      Bmdcpmo: "f6glcwc",
      th9wkt: "f1e3st1r"
    },
    gridPositionEnd: {
      Bdqf98w: "f1a7i8kp",
      Br312pm: "fd46tj4",
      Bw0ie65: "fsyjsko",
      B6n781s: "f1f41i0t",
      Bv5d0be: "f1jaqex3",
      v4ugfu: "f2ao6jk"
    },
    gridPositionStart: {
      Bdqf98w: "fsxvdwy",
      Br312pm: "fwpfdsa",
      Bw0ie65: "f1e2fz10",
      Bojbm9c: "f11ihkml",
      Bv5d0be: "fce5bvx",
      v4ugfu: "f2ao6jk"
    },
    fluidStart: {
      Bw0ie65: "fsyjsko"
    },
    fluidEnd: {
      Br312pm: "fwpfdsa"
    }
  }, {
    d: [".f3052tw{height:fit-content;}", ".f1ewtqcl{box-sizing:border-box;}", ".f22iagw{display:flex;}", ".f1cztu7b{grid-row-start:3;}", ".fcu02xx{grid-row-end:3;}", ".f4px1ci{column-gap:8px;}", ".fn67r4l{row-gap:8px;}", ".f1a7i8kp{justify-self:end;}", ".fd46tj4{grid-column-start:2;}", ".fsyjsko{grid-column-end:4;}", ".fsxvdwy{justify-self:start;}", ".fwpfdsa{grid-column-start:1;}", ".f1e2fz10{grid-column-end:2;}"],
    m: [["@media screen and (max-width: 480px){.f6glcwc{flex-direction:column;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f1e3st1r{justify-self:stretch;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f1f41i0t{grid-column-start:1;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f1jaqex3{grid-row-start:4;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f2ao6jk{grid-row-end:auto;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f11ihkml{grid-column-end:4;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.fce5bvx{grid-row-start:3;}}", {
      m: "screen and (max-width: 480px)"
    }]]
  });
  var useDialogActionsStyles_unstable = (state) => {
    const styles2 = useStyles4();
    state.root.className = mergeClasses(dialogActionsClassNames.root, styles2.root, state.position === "start" && styles2.gridPositionStart, state.position === "end" && styles2.gridPositionEnd, state.fluid && state.position === "start" && styles2.fluidStart, state.fluid && state.position === "end" && styles2.fluidEnd, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogActions/DialogActions.js
  var DialogActions = /* @__PURE__ */ React74.forwardRef((props, ref) => {
    const state = useDialogActions_unstable(props, ref);
    useDialogActionsStyles_unstable(state);
    useCustomStyleHook("useDialogActionsStyles_unstable")(state);
    return renderDialogActions_unstable(state);
  });
  DialogActions.displayName = "DialogActions";

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogBody/DialogBody.js
  var React76 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogBody/useDialogBody.js
  var React75 = __toESM(require_react());
  var useDialogBody_unstable = (props, ref) => {
    var _props_as;
    return {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : "div", {
        ref,
        ...props
      }), {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogBody/renderDialogBody.js
  var renderDialogBody_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {});
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogBody/useDialogBodyStyles.styles.js
  var dialogBodyClassNames = {
    root: "fui-DialogBody"
  };
  var useStyles5 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f13qh94s",
      fshzfu: "f120kxnn",
      Bxyxcbc: "flnwrvu",
      B7ck84d: "f1ewtqcl",
      B68tc82: "f1ln0qer",
      Bmxbyg5: "fa2wlxz",
      i8kkvl: "f4px1ci",
      Belr9w4: "fn67r4l",
      wkccdc: "f1x46k84",
      Budl1dq: "fjj47a5",
      B5xtmjs: "ff54dml",
      Bqu9lor: "f1t97isy"
    }
  }, {
    d: [".f13qh94s{display:grid;}", ".f120kxnn::backdrop{background-color:rgba(0, 0, 0, 0.4);}", ".flnwrvu{max-height:calc(100vh - 2 * 24px);}", ".f1ewtqcl{box-sizing:border-box;}", ".f1ln0qer{overflow-x:unset;}", ".fa2wlxz{overflow-y:unset;}", ".f4px1ci{column-gap:8px;}", ".fn67r4l{row-gap:8px;}", ".f1x46k84{grid-template-rows:auto 1fr;}", ".fjj47a5{grid-template-columns:1fr 1fr auto;}"],
    m: [["@media screen and (max-width: 480px){.ff54dml{max-width:100vw;}}", {
      m: "screen and (max-width: 480px)"
    }], ["@media screen and (max-width: 480px){.f1t97isy{grid-template-rows:auto 1fr auto;}}", {
      m: "screen and (max-width: 480px)"
    }]]
  });
  var useDialogBodyStyles_unstable = (state) => {
    const styles2 = useStyles5();
    state.root.className = mergeClasses(dialogBodyClassNames.root, styles2.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogBody/DialogBody.js
  var DialogBody = /* @__PURE__ */ React76.forwardRef((props, ref) => {
    const state = useDialogBody_unstable(props, ref);
    useDialogBodyStyles_unstable(state);
    useCustomStyleHook("useDialogBodyStyles_unstable")(state);
    return renderDialogBody_unstable(state);
  });
  DialogBody.displayName = "DialogBody";

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/DialogTitle.js
  var React78 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/useDialogTitle.js
  var React77 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/useDialogTitleStyles.styles.js
  var dialogTitleClassNames = {
    root: "fui-DialogTitle",
    action: "fui-DialogTitle__action"
  };
  var useStyles6 = /* @__PURE__ */ __styles2({
    root: {
      Ijaq50: "f16hsg94",
      nk6f5a: "f1amvztq",
      Br312pm: "fwpfdsa",
      Bw0ie65: "fz1yyy6",
      Bahqtrf: "fk6fouc",
      Be2twd7: "f1pp30po",
      Bhrd7zp: "fl43uef",
      Bg96gwp: "f106mvju",
      B6of3ja: "f1hu3pq6",
      t21cq0: ["f11qmguv", "f1tyq0we"],
      jrapky: "f19f4twv",
      Frg6f3: ["f1tyq0we", "f11qmguv"]
    },
    rootWithoutAction: {
      Bw0ie65: "fsyjsko"
    },
    action: {
      Ijaq50: "f16hsg94",
      nk6f5a: "f1amvztq",
      Br312pm: "fis13di",
      Bdqf98w: "f1a7i8kp",
      qb2dma: "f9h729m"
    }
  }, {
    d: [".f16hsg94{grid-row-start:1;}", ".f1amvztq{grid-row-end:1;}", ".fwpfdsa{grid-column-start:1;}", ".fz1yyy6{grid-column-end:3;}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".f1pp30po{font-size:var(--fontSizeBase500);}", ".fl43uef{font-weight:var(--fontWeightSemibold);}", ".f106mvju{line-height:var(--lineHeightBase500);}", ".f1hu3pq6{margin-top:0;}", ".f11qmguv{margin-right:0;}", ".f1tyq0we{margin-left:0;}", ".f19f4twv{margin-bottom:0;}", ".fsyjsko{grid-column-end:4;}", ".fis13di{grid-column-start:3;}", ".f1a7i8kp{justify-self:end;}", ".f9h729m{align-self:start;}"]
  });
  var useDialogTitleInternalStyles = /* @__PURE__ */ __styles2({
    button: {
      qhf8xq: "f10pi13n",
      B7ck84d: "f1e4lqlz",
      De3pzq: "f1u2r49w",
      sj55zd: "f1ym3bx4",
      Bahqtrf: "f1mo0ibp",
      Be2twd7: "fjoy568",
      Bceei9c: "f1k6fduh",
      Bg96gwp: "fez10in",
      B68tc82: "f1mtd64y",
      Bmxbyg5: "f1y7q3j9",
      z8tnut: "f1g0x7ka",
      z189sj: ["fhxju0i", "f1cnd47f"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f1cnd47f", "fhxju0i"],
      icvyot: "f1ern45e",
      vrafjx: ["f1n71otn", "f1deefiw"],
      oivjwe: "f1h8hb77",
      wvpqe5: ["f1deefiw", "f1n71otn"],
      Bv0vk6g: "f37px4s",
      fsow6f: "fgusgyc",
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bm4h7ae: "f15bsgw9",
      B7ys5i9: "f14e48fq",
      Busjfv9: "f18yb2kv",
      Bhk32uz: "fd6o370",
      Bf4ptjt: "fh1cnn4",
      kclons: ["fy7oxxb", "f184ne2d"],
      Bhdgwq3: "fpukqih",
      Blkhhs4: ["f184ne2d", "fy7oxxb"],
      Bqtpl0w: "frrh606",
      clg4pj: ["f1v5zibi", "fo2hd23"],
      hgwjuy: "ful5kiu",
      Bonggc9: ["fo2hd23", "f1v5zibi"],
      B1tsrr9: ["f1jqcqds", "ftffrms"],
      Dah5zi: ["ftffrms", "f1jqcqds"],
      Bkh64rk: ["f2e7qr6", "fsr1zz6"],
      qqdqy8: ["fsr1zz6", "f2e7qr6"],
      B6dhp37: "f1dvezut",
      i03rao: ["fd0oaoj", "f1cwg4i8"],
      Boxcth7: "fjvm52t",
      Bsom6fd: ["f1cwg4i8", "fd0oaoj"],
      J0r882: "f57olzd",
      Bule8hv: ["f4stah7", "fs1por5"],
      Bjwuhne: "f480a47",
      Ghsupd: ["fs1por5", "f4stah7"]
    }
  }, {
    d: [".f10pi13n{position:relative;}", ".f1e4lqlz{box-sizing:content-box;}", ".f1u2r49w{background-color:inherit;}", ".f1ym3bx4{color:inherit;}", ".f1mo0ibp{font-family:inherit;}", ".fjoy568{font-size:inherit;}", ".f1k6fduh{cursor:pointer;}", ".fez10in{line-height:0;}", ".f1mtd64y{overflow-x:visible;}", ".f1y7q3j9{overflow-y:visible;}", ".f1g0x7ka{padding-top:0;}", ".fhxju0i{padding-right:0;}", ".f1cnd47f{padding-left:0;}", ".f1qch9an{padding-bottom:0;}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1h8hb77{border-bottom-style:none;}", ".f37px4s{-webkit-appearance:button;}", ".fgusgyc{text-align:unset;}", ".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", ".fh1cnn4[data-fui-focus-visible]::after{border-top-style:solid;}", ".fy7oxxb[data-fui-focus-visible]::after{border-right-style:solid;}", ".f184ne2d[data-fui-focus-visible]::after{border-left-style:solid;}", ".fpukqih[data-fui-focus-visible]::after{border-bottom-style:solid;}", ".frrh606[data-fui-focus-visible]::after{border-top-width:2px;}", ".f1v5zibi[data-fui-focus-visible]::after{border-right-width:2px;}", ".fo2hd23[data-fui-focus-visible]::after{border-left-width:2px;}", ".ful5kiu[data-fui-focus-visible]::after{border-bottom-width:2px;}", ".f1jqcqds[data-fui-focus-visible]::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".ftffrms[data-fui-focus-visible]::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f2e7qr6[data-fui-focus-visible]::after{border-top-right-radius:var(--borderRadiusMedium);}", ".fsr1zz6[data-fui-focus-visible]::after{border-top-left-radius:var(--borderRadiusMedium);}", ".f1dvezut[data-fui-focus-visible]::after{border-top-color:var(--colorStrokeFocus2);}", ".fd0oaoj[data-fui-focus-visible]::after{border-right-color:var(--colorStrokeFocus2);}", ".f1cwg4i8[data-fui-focus-visible]::after{border-left-color:var(--colorStrokeFocus2);}", ".fjvm52t[data-fui-focus-visible]::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f57olzd[data-fui-focus-visible]::after{top:calc(2px * -1);}", ".f4stah7[data-fui-focus-visible]::after{right:calc(2px * -1);}", ".fs1por5[data-fui-focus-visible]::after{left:calc(2px * -1);}", ".f480a47[data-fui-focus-visible]::after{bottom:calc(2px * -1);}"],
    f: [".ftqa4ok:focus{outline-style:none;}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"]
  });
  var useDialogTitleStyles_unstable = (state) => {
    const styles2 = useStyles6();
    state.root.className = mergeClasses(dialogTitleClassNames.root, styles2.root, !state.action && styles2.rootWithoutAction, state.root.className);
    if (state.action) {
      state.action.className = mergeClasses(dialogTitleClassNames.action, styles2.action, state.action.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/useDialogTitle.js
  var useDialogTitle_unstable = (props, ref) => {
    const { as, action } = props;
    const modalType = useDialogContext_unstable((ctx) => ctx.modalType);
    const internalStyles = useDialogTitleInternalStyles();
    return {
      components: {
        root: "h2",
        action: "div"
      },
      root: slot_exports.always(getNativeElementProps(as !== null && as !== void 0 ? as : "h2", {
        ref,
        id: useDialogContext_unstable((ctx) => ctx.dialogTitleId),
        ...props
      }), {
        elementType: "h2"
      }),
      action: slot_exports.optional(action, {
        renderByDefault: modalType === "non-modal",
        defaultProps: {
          children: /* @__PURE__ */ React77.createElement(DialogTrigger, {
            disableButtonEnhancement: true,
            action: "close"
          }, /* @__PURE__ */ React77.createElement("button", {
            type: "button",
            className: internalStyles.button,
            // TODO: find a better way to add internal labels
            "aria-label": "close"
          }, /* @__PURE__ */ React77.createElement(Dismiss20Regular, null)))
        },
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/renderDialogTitle.js
  var renderDialogTitle_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(import_react2.Fragment, {
      children: [
        /* @__PURE__ */ jsx(state.root, {
          children: state.root.children
        }),
        state.action && /* @__PURE__ */ jsx(state.action, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogTitle/DialogTitle.js
  var DialogTitle = /* @__PURE__ */ React78.forwardRef((props, ref) => {
    const state = useDialogTitle_unstable(props, ref);
    useDialogTitleStyles_unstable(state);
    useCustomStyleHook("useDialogTitleStyles_unstable")(state);
    return renderDialogTitle_unstable(state);
  });
  DialogTitle.displayName = "DialogTitle";

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/DialogSurface.js
  var React80 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/useDialogSurface.js
  var React79 = __toESM(require_react());
  var useDialogSurface_unstable = (props, ref) => {
    const modalType = useDialogContext_unstable((ctx) => ctx.modalType);
    const modalAttributes = useDialogContext_unstable((ctx) => ctx.modalAttributes);
    const dialogRef = useDialogContext_unstable((ctx) => ctx.dialogRef);
    const open = useDialogContext_unstable((ctx) => ctx.open);
    const requestOpenChange = useDialogContext_unstable((ctx) => ctx.requestOpenChange);
    const dialogTitleID = useDialogContext_unstable((ctx) => ctx.dialogTitleId);
    const handledBackdropClick = useEventCallback((event) => {
      if (isResolvedShorthand(props.backdrop)) {
        var _props_backdrop_onClick, _props_backdrop;
        (_props_backdrop_onClick = (_props_backdrop = props.backdrop).onClick) === null || _props_backdrop_onClick === void 0 ? void 0 : _props_backdrop_onClick.call(_props_backdrop, event);
      }
      if (modalType === "modal" && !event.isDefaultPrevented()) {
        requestOpenChange({
          event,
          open: false,
          type: "backdropClick"
        });
      }
    });
    const handleKeyDown = useEventCallback((event) => {
      var _props_onKeyDown, _props;
      (_props_onKeyDown = (_props = props).onKeyDown) === null || _props_onKeyDown === void 0 ? void 0 : _props_onKeyDown.call(_props, event);
      if (event.key === Escape && !event.isDefaultPrevented()) {
        requestOpenChange({
          event,
          open: false,
          type: "escapeKeyDown"
        });
        event.stopPropagation();
      }
    });
    const backdrop = slot_exports.optional(props.backdrop, {
      renderByDefault: open && modalType !== "non-modal",
      defaultProps: {
        "aria-hidden": "true"
      },
      elementType: "div"
    });
    if (backdrop) {
      backdrop.onClick = handledBackdropClick;
    }
    var _props_as;
    return {
      components: {
        backdrop: "div",
        root: "div"
      },
      backdrop,
      mountNode: props.mountNode,
      root: slot_exports.always(getNativeElementProps((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : "div", {
        tabIndex: -1,
        "aria-modal": modalType !== "non-modal",
        role: modalType === "alert" ? "alertdialog" : "dialog",
        "aria-labelledby": props["aria-label"] ? void 0 : dialogTitleID,
        ...props,
        ...modalAttributes,
        onKeyDown: handleKeyDown,
        ref: useMergedRefs(ref, dialogRef)
      }), {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/renderDialogSurface.js
  var renderDialogSurface_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(Portal, {
      mountNode: state.mountNode,
      children: [
        state.backdrop && /* @__PURE__ */ jsx(state.backdrop, {}),
        /* @__PURE__ */ jsx(DialogSurfaceProvider, {
          value: contextValues.dialogSurface,
          children: /* @__PURE__ */ jsx(state.root, {})
        })
      ]
    });
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/useDialogSurfaceStyles.styles.js
  var dialogSurfaceClassNames = {
    root: "fui-DialogSurface",
    backdrop: "fui-DialogSurface__backdrop"
  };
  var useStyles7 = /* @__PURE__ */ __styles2({
    focusOutline: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bm4h7ae: "f15bsgw9",
      B7ys5i9: "f14e48fq",
      Busjfv9: "f18yb2kv",
      Bhk32uz: "fd6o370",
      Bf4ptjt: "fh1cnn4",
      kclons: ["fy7oxxb", "f184ne2d"],
      Bhdgwq3: "fpukqih",
      Blkhhs4: ["f184ne2d", "fy7oxxb"],
      Bqtpl0w: "frrh606",
      clg4pj: ["f1v5zibi", "fo2hd23"],
      hgwjuy: "ful5kiu",
      Bonggc9: ["fo2hd23", "f1v5zibi"],
      B1tsrr9: ["f1jqcqds", "ftffrms"],
      Dah5zi: ["ftffrms", "f1jqcqds"],
      Bkh64rk: ["f2e7qr6", "fsr1zz6"],
      qqdqy8: ["fsr1zz6", "f2e7qr6"],
      B6dhp37: "f1dvezut",
      i03rao: ["fd0oaoj", "f1cwg4i8"],
      Boxcth7: "fjvm52t",
      Bsom6fd: ["f1cwg4i8", "fd0oaoj"],
      J0r882: "f57olzd",
      Bule8hv: ["f4stah7", "fs1por5"],
      Bjwuhne: "f480a47",
      Ghsupd: ["fs1por5", "f4stah7"]
    },
    root: {
      mc9l5x: "ftgm304",
      famaaq: "f1c515w",
      Bcdw1i0: "f1bitti",
      Bhzewxz: "f15twtuk",
      j35jbq: ["f1e31b4d", "f1vgc2s3"],
      B5kzvoi: "f1yab3r1",
      oyh7mz: ["f1vgc2s3", "f1e31b4d"],
      z8tnut: "fuq56rw",
      z189sj: ["f15kemlc", "fdgang7"],
      Byoj8tv: "fl2zwns",
      uwmqm3: ["fdgang7", "f15kemlc"],
      B6of3ja: "fgr6219",
      t21cq0: ["f1ujusj6", "fcgxt0o"],
      jrapky: "f10jk5vf",
      Frg6f3: ["fcgxt0o", "f1ujusj6"],
      icvyot: "fzkkow9",
      vrafjx: ["fcdblym", "fjik90z"],
      oivjwe: "fg706s2",
      wvpqe5: ["fjik90z", "fcdblym"],
      B68tc82: "f1ln0qer",
      Bmxbyg5: "fa2wlxz",
      fshzfu: "f120kxnn",
      qhf8xq: "f19dog8a",
      Bqenvij: "f3052tw",
      B2u0y6b: "fvgz9i8",
      Bxyxcbc: "f6a9g1z",
      B7ck84d: "f1ewtqcl",
      E5pizo: "f10nrhrw",
      De3pzq: "fxugw4r",
      sj55zd: "f19n0e5",
      B4j52fo: "f5ogflp",
      Bekrc4i: ["f1hqa2wf", "finvdd3"],
      Bn0qgzm: "f1f09k3d",
      ibv6hh: ["finvdd3", "f1hqa2wf"],
      g2u3we: "fghlq4f",
      h3c5rm: ["f1gn591s", "fjscplz"],
      B9xav0g: "fb073pr",
      zhjwy3: ["fjscplz", "f1gn591s"],
      Bbmb7ep: ["fnivh3a", "fc7yr5o"],
      Beyfa6y: ["fc7yr5o", "fnivh3a"],
      B7oj6ja: ["f1el4m67", "f8yange"],
      Btl43ni: ["f8yange", "f1el4m67"],
      B5xtmjs: "ff54dml"
    },
    backdrop: {
      qhf8xq: "f19dog8a",
      De3pzq: "fju19wo",
      Bhzewxz: "f113wtx2",
      j35jbq: ["f10k790i", "f1xynx9j"],
      B5kzvoi: "f5gq2j6",
      oyh7mz: ["f1xynx9j", "f10k790i"]
    },
    nestedDialogBackdrop: {
      De3pzq: "f3rmtva"
    },
    nestedNativeDialogBackdrop: {
      fshzfu: "foe20jx"
    }
  }, {
    f: [".ftqa4ok:focus{outline-style:none;}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"],
    d: [".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", ".fh1cnn4[data-fui-focus-visible]::after{border-top-style:solid;}", ".fy7oxxb[data-fui-focus-visible]::after{border-right-style:solid;}", ".f184ne2d[data-fui-focus-visible]::after{border-left-style:solid;}", ".fpukqih[data-fui-focus-visible]::after{border-bottom-style:solid;}", ".frrh606[data-fui-focus-visible]::after{border-top-width:2px;}", ".f1v5zibi[data-fui-focus-visible]::after{border-right-width:2px;}", ".fo2hd23[data-fui-focus-visible]::after{border-left-width:2px;}", ".ful5kiu[data-fui-focus-visible]::after{border-bottom-width:2px;}", ".f1jqcqds[data-fui-focus-visible]::after{border-bottom-right-radius:var(--borderRadiusMedium);}", ".ftffrms[data-fui-focus-visible]::after{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f2e7qr6[data-fui-focus-visible]::after{border-top-right-radius:var(--borderRadiusMedium);}", ".fsr1zz6[data-fui-focus-visible]::after{border-top-left-radius:var(--borderRadiusMedium);}", ".f1dvezut[data-fui-focus-visible]::after{border-top-color:var(--colorStrokeFocus2);}", ".fd0oaoj[data-fui-focus-visible]::after{border-right-color:var(--colorStrokeFocus2);}", ".f1cwg4i8[data-fui-focus-visible]::after{border-left-color:var(--colorStrokeFocus2);}", ".fjvm52t[data-fui-focus-visible]::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f57olzd[data-fui-focus-visible]::after{top:calc(2px * -1);}", ".f4stah7[data-fui-focus-visible]::after{right:calc(2px * -1);}", ".fs1por5[data-fui-focus-visible]::after{left:calc(2px * -1);}", ".f480a47[data-fui-focus-visible]::after{bottom:calc(2px * -1);}", ".ftgm304{display:block;}", ".f1c515w{-webkit-user-select:unset;-moz-user-select:unset;-ms-user-select:unset;user-select:unset;}", ".f1bitti{visibility:unset;}", ".f15twtuk{top:0;}", ".f1e31b4d{right:0;}", ".f1vgc2s3{left:0;}", ".f1yab3r1{bottom:0;}", ".fuq56rw{padding-top:24px;}", ".f15kemlc{padding-right:24px;}", ".fdgang7{padding-left:24px;}", ".fl2zwns{padding-bottom:24px;}", ".fgr6219{margin-top:auto;}", ".f1ujusj6{margin-right:auto;}", ".fcgxt0o{margin-left:auto;}", ".f10jk5vf{margin-bottom:auto;}", ".fzkkow9{border-top-style:solid;}", ".fcdblym{border-right-style:solid;}", ".fjik90z{border-left-style:solid;}", ".fg706s2{border-bottom-style:solid;}", ".f1ln0qer{overflow-x:unset;}", ".fa2wlxz{overflow-y:unset;}", ".f120kxnn::backdrop{background-color:rgba(0, 0, 0, 0.4);}", ".f19dog8a{position:fixed;}", ".f3052tw{height:fit-content;}", ".fvgz9i8{max-width:600px;}", ".f6a9g1z{max-height:100vh;}", ".f1ewtqcl{box-sizing:border-box;}", ".f10nrhrw{box-shadow:var(--shadow64);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f5ogflp{border-top-width:1px;}", ".f1hqa2wf{border-right-width:1px;}", ".finvdd3{border-left-width:1px;}", ".f1f09k3d{border-bottom-width:1px;}", ".fghlq4f{border-top-color:var(--colorTransparentStroke);}", ".f1gn591s{border-right-color:var(--colorTransparentStroke);}", ".fjscplz{border-left-color:var(--colorTransparentStroke);}", ".fb073pr{border-bottom-color:var(--colorTransparentStroke);}", ".fnivh3a{border-bottom-right-radius:var(--borderRadiusXLarge);}", ".fc7yr5o{border-bottom-left-radius:var(--borderRadiusXLarge);}", ".f1el4m67{border-top-right-radius:var(--borderRadiusXLarge);}", ".f8yange{border-top-left-radius:var(--borderRadiusXLarge);}", ".fju19wo{background-color:rgba(0, 0, 0, 0.4);}", ".f113wtx2{top:0px;}", ".f10k790i{right:0px;}", ".f1xynx9j{left:0px;}", ".f5gq2j6{bottom:0px;}", ".f3rmtva{background-color:transparent;}", ".foe20jx::backdrop{background-color:transparent;}"],
    m: [["@media screen and (max-width: 480px){.ff54dml{max-width:100vw;}}", {
      m: "screen and (max-width: 480px)"
    }]]
  });
  var useDialogSurfaceStyles_unstable = (state) => {
    const styles2 = useStyles7();
    const isNestedDialog = useDialogContext_unstable((ctx) => ctx.isNestedDialog);
    state.root.className = mergeClasses(dialogSurfaceClassNames.root, styles2.root, styles2.focusOutline, isNestedDialog && styles2.nestedNativeDialogBackdrop, state.root.className);
    if (state.backdrop) {
      state.backdrop.className = mergeClasses(dialogSurfaceClassNames.backdrop, styles2.backdrop, isNestedDialog && styles2.nestedDialogBackdrop, state.backdrop.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/useDialogSurfaceContextValues.js
  function useDialogSurfaceContextValues_unstable(state) {
    const dialogSurface = true;
    return {
      dialogSurface
    };
  }

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogSurface/DialogSurface.js
  var DialogSurface = /* @__PURE__ */ React80.forwardRef((props, ref) => {
    const state = useDialogSurface_unstable(props, ref);
    const contextValues = useDialogSurfaceContextValues_unstable(state);
    useDialogSurfaceStyles_unstable(state);
    useCustomStyleHook("useDialogSurfaceStyles_unstable")(state);
    return renderDialogSurface_unstable(state, contextValues);
  });
  DialogSurface.displayName = "DialogSurface";

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogContent/DialogContent.js
  var React82 = __toESM(require_react());

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogContent/useDialogContent.js
  var React81 = __toESM(require_react());
  var useDialogContent_unstable = (props, ref) => {
    var _props_as;
    return {
      components: {
        root: "div"
      },
      root: slot_exports.always(getNativeElementProps((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : "div", {
        ref,
        ...props
      }), {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogContent/renderDialogContent.js
  var renderDialogContent_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {});
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogContent/useDialogContentStyles.styles.js
  var dialogContentClassNames = {
    root: "fui-DialogContent"
  };
  var useStyles8 = /* @__PURE__ */ __styles2({
    root: {
      Bmxbyg5: "f5zp4f",
      sshi5w: "f1nxs5xn",
      B7ck84d: "f1ewtqcl",
      Ijaq50: "faunodf",
      nk6f5a: "f88nxoq",
      Br312pm: "fwpfdsa",
      Bw0ie65: "fsyjsko",
      z8tnut: "fr4fn7s",
      z189sj: ["f171n1a0", "f1jwbs5a"],
      Byoj8tv: "f1ean75l",
      uwmqm3: ["f1jwbs5a", "f171n1a0"],
      B6of3ja: "fxlnl9e",
      t21cq0: ["ffs23cn", "f1v5tmjd"],
      jrapky: "f2uu7rc",
      Frg6f3: ["f1v5tmjd", "ffs23cn"],
      Bahqtrf: "fk6fouc",
      Be2twd7: "fkhj508",
      Bhrd7zp: "figsok6",
      Bg96gwp: "f1i3iumi"
    }
  }, {
    d: [".f5zp4f{overflow-y:auto;}", ".f1nxs5xn{min-height:32px;}", ".f1ewtqcl{box-sizing:border-box;}", ".faunodf{grid-row-start:2;}", ".f88nxoq{grid-row-end:2;}", ".fwpfdsa{grid-column-start:1;}", ".fsyjsko{grid-column-end:4;}", ".fr4fn7s{padding-top:var(--strokeWidthThick);}", ".f171n1a0{padding-right:var(--strokeWidthThick);}", ".f1jwbs5a{padding-left:var(--strokeWidthThick);}", ".f1ean75l{padding-bottom:var(--strokeWidthThick);}", ".fxlnl9e{margin-top:calc(var(--strokeWidthThick) * -1);}", ".ffs23cn{margin-right:calc(var(--strokeWidthThick) * -1);}", ".f1v5tmjd{margin-left:calc(var(--strokeWidthThick) * -1);}", ".f2uu7rc{margin-bottom:calc(var(--strokeWidthThick) * -1);}", ".fk6fouc{font-family:var(--fontFamilyBase);}", ".fkhj508{font-size:var(--fontSizeBase300);}", ".figsok6{font-weight:var(--fontWeightRegular);}", ".f1i3iumi{line-height:var(--lineHeightBase300);}"]
  });
  var useDialogContentStyles_unstable = (state) => {
    const styles2 = useStyles8();
    state.root.className = mergeClasses(dialogContentClassNames.root, styles2.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-dialog/lib/components/DialogContent/DialogContent.js
  var DialogContent = /* @__PURE__ */ React82.forwardRef((props, ref) => {
    const state = useDialogContent_unstable(props, ref);
    useDialogContentStyles_unstable(state);
    useCustomStyleHook("useDialogContentStyles_unstable")(state);
    return renderDialogContent_unstable(state);
  });
  DialogContent.displayName = "DialogContent";

  // ../node_modules/@fluentui/react-table/lib/hooks/useTableFeatures.js
  var React86 = __toESM(require_react());

  // ../node_modules/@fluentui/react-table/lib/hooks/useTableSelection.js
  var React83 = __toESM(require_react());
  var noop2 = () => void 0;
  var defaultTableSelectionState = {
    allRowsSelected: false,
    clearRows: noop2,
    deselectRow: noop2,
    isRowSelected: () => false,
    selectRow: noop2,
    selectedRows: /* @__PURE__ */ new Set(),
    someRowsSelected: false,
    toggleAllRows: noop2,
    toggleRow: noop2,
    selectionMode: "multiselect"
  };
  function useTableSelection(options) {
    return (tableState) => useTableSelectionState(tableState, options);
  }
  function useTableSelectionState(tableState, options) {
    const { items, getRowId } = tableState;
    const { selectionMode, defaultSelectedItems, selectedItems: selectedItems2, onSelectionChange } = options;
    const [selected, selectionMethods] = useSelection({
      selectionMode,
      defaultSelectedItems,
      selectedItems: selectedItems2,
      onSelectionChange
    });
    const selectableRowIds = React83.useMemo(() => {
      const rowIds = /* @__PURE__ */ new Set();
      for (let i2 = 0; i2 < items.length; i2++) {
        var _getRowId;
        var _getRowId1;
        rowIds.add((_getRowId1 = (_getRowId = getRowId) === null || _getRowId === void 0 ? void 0 : _getRowId(items[i2])) !== null && _getRowId1 !== void 0 ? _getRowId1 : i2);
      }
      return rowIds;
    }, [
      items,
      getRowId
    ]);
    const allRowsSelected = React83.useMemo(() => {
      if (selectionMode === "single") {
        const selectedRow = Array.from(selected)[0];
        return selectableRowIds.has(selectedRow);
      }
      if (selected.size < selectableRowIds.size) {
        return false;
      }
      let res = true;
      selectableRowIds.forEach((selectableRowId) => {
        if (!selected.has(selectableRowId)) {
          res = false;
        }
      });
      return res;
    }, [
      selectableRowIds,
      selected,
      selectionMode
    ]);
    const someRowsSelected = React83.useMemo(() => {
      if (selected.size <= 0) {
        return false;
      }
      let res = false;
      selectableRowIds.forEach((selectableRowId) => {
        if (selected.has(selectableRowId)) {
          res = true;
        }
      });
      return res;
    }, [
      selectableRowIds,
      selected
    ]);
    const toggleAllRows = useEventCallback((e2) => {
      var _getRowId;
      selectionMethods.toggleAllItems(e2, items.map((item, i2) => {
        var _getRowId1;
        return (_getRowId = (_getRowId1 = getRowId) === null || _getRowId1 === void 0 ? void 0 : _getRowId1(item)) !== null && _getRowId !== void 0 ? _getRowId : i2;
      }));
    });
    const toggleRow = useEventCallback((e2, rowId) => selectionMethods.toggleItem(e2, rowId));
    const deselectRow = useEventCallback((e2, rowId) => selectionMethods.deselectItem(e2, rowId));
    const selectRow = useEventCallback((e2, rowId) => selectionMethods.selectItem(e2, rowId));
    const isRowSelected = (rowId) => selectionMethods.isSelected(rowId);
    const clearRows = useEventCallback((e2) => selectionMethods.clearItems(e2));
    return {
      ...tableState,
      selection: {
        selectionMode,
        someRowsSelected,
        allRowsSelected,
        selectedRows: selected,
        toggleRow,
        toggleAllRows,
        clearRows,
        deselectRow,
        selectRow,
        isRowSelected
      }
    };
  }

  // ../node_modules/@fluentui/react-table/lib/hooks/useTableSort.js
  var React84 = __toESM(require_react());
  var noop3 = () => void 0;
  var defaultTableSortState = {
    getSortDirection: () => "ascending",
    setColumnSort: noop3,
    sort: (rows) => [
      ...rows
    ],
    sortColumn: void 0,
    sortDirection: "ascending",
    toggleColumnSort: noop3
  };

  // ../node_modules/@fluentui/react-table/lib/hooks/useTableColumnSizing.js
  var React85 = __toESM(require_react());
  var defaultColumnSizingState = {
    getColumnWidths: () => [],
    getOnMouseDown: () => () => null,
    setColumnWidth: () => null,
    getTableProps: () => ({}),
    getTableHeaderCellProps: () => ({
      style: {},
      columnId: ""
    }),
    getTableCellProps: () => ({
      style: {},
      columnId: ""
    }),
    enableKeyboardMode: () => () => null
  };

  // ../node_modules/@fluentui/react-table/lib/hooks/useTableFeatures.js
  var defaultRowEnhancer = (row) => row;
  var defaultTableState = {
    selection: defaultTableSelectionState,
    sort: defaultTableSortState,
    getRows: () => [],
    getRowId: () => "",
    items: [],
    columns: [],
    // eslint-disable-next-line @typescript-eslint/naming-convention
    columnSizing_unstable: defaultColumnSizingState,
    tableRef: React86.createRef()
  };
  function useTableFeatures(options, plugins = []) {
    const { items, getRowId, columns } = options;
    var _getRowId;
    const getRows = (rowEnhancer = defaultRowEnhancer) => items.map((item, i2) => {
      var _getRowId1;
      return rowEnhancer({
        item,
        rowId: (_getRowId = (_getRowId1 = getRowId) === null || _getRowId1 === void 0 ? void 0 : _getRowId1(item)) !== null && _getRowId !== void 0 ? _getRowId : i2
      });
    });
    const initialState2 = {
      getRowId,
      items,
      columns,
      getRows,
      selection: defaultTableSelectionState,
      sort: defaultTableSortState,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      columnSizing_unstable: defaultColumnSizingState,
      tableRef: React86.createRef()
    };
    return plugins.reduce((state, plugin) => plugin(state), initialState2);
  }

  // ../node_modules/@fluentui/react-table/lib/hooks/createColumn.js
  var defaultCompare = () => 0;
  var defaultRenderCell = () => {
    if (true) {
      console.warn("@fluentui/react-table: You are using the default column renderCell function that renders null");
    }
    return null;
  };
  var defaultRenderHeaderCell = () => {
    if (true) {
      console.warn("@fluentui/react-table: You are using the default column renderHeaderCell function that renders null");
    }
    return null;
  };
  function createTableColumn(options) {
    const { columnId, renderCell = defaultRenderCell, renderHeaderCell = defaultRenderHeaderCell, compare = defaultCompare } = options;
    return {
      columnId,
      renderCell,
      renderHeaderCell,
      compare
    };
  }

  // ../node_modules/@fluentui/react-table/lib/components/TableCell/TableCell.js
  var React89 = __toESM(require_react());

  // ../node_modules/@fluentui/react-table/lib/components/TableCell/useTableCell.js
  var React88 = __toESM(require_react());

  // ../node_modules/@fluentui/react-table/lib/contexts/tableContext.js
  var React87 = __toESM(require_react());
  var tableContext = React87.createContext(void 0);
  var tableContextDefaultValue = {
    size: "medium",
    noNativeElements: false,
    sortable: false
  };
  var TableContextProvider = tableContext.Provider;
  var _React_useContext2;
  var useTableContext = () => (_React_useContext2 = React87.useContext(tableContext)) !== null && _React_useContext2 !== void 0 ? _React_useContext2 : tableContextDefaultValue;

  // ../node_modules/@fluentui/react-table/lib/components/TableCell/useTableCell.js
  var useTableCell_unstable = (props, ref) => {
    const { noNativeElements, size } = useTableContext();
    var _props_as;
    const rootComponent = ((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : noNativeElements) ? "div" : "td";
    return {
      components: {
        root: rootComponent
      },
      root: slot_exports.always(getNativeElementProps(rootComponent, {
        ref,
        role: rootComponent === "div" ? "cell" : void 0,
        ...props
      }), {
        elementType: rootComponent
      }),
      noNativeElements,
      size
    };
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableCell/renderTableCell.js
  var renderTableCell_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {});
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableCell/useTableCellStyles.styles.js
  var tableCellClassName = "fui-TableCell";
  var tableCellClassNames = {
    root: tableCellClassName
  };
  var useTableLayoutStyles = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f15pt5es",
      ha4doy: "fmrv4ls"
    },
    medium: {
      Bqenvij: "f1ft4266"
    },
    small: {
      Bqenvij: "fbsu25e"
    },
    "extra-small": {
      Bqenvij: "frvgh55"
    }
  }, {
    d: [".f15pt5es{display:table-cell;}", ".fmrv4ls{vertical-align:middle;}", ".f1ft4266{height:44px;}", ".fbsu25e{height:34px;}", ".frvgh55{height:24px;}"]
  });
  var useFlexLayoutStyles = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Bf4jedk: "f10tiqix",
      Bt984gj: "f122n59",
      Bh6795r: "fqerorx",
      Bnnss6s: "f1neuvcm",
      xawz: "fkjuxzh"
    },
    medium: {
      sshi5w: "f5pgtk9"
    },
    small: {
      sshi5w: "fcep9tg"
    },
    "extra-small": {
      sshi5w: "f1pha7fy"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f10tiqix{min-width:0px;}", ".f122n59{align-items:center;}", ".fqerorx{flex-grow:1;}", ".f1neuvcm{flex-shrink:1;}", ".fkjuxzh{flex-basis:0px;}", ".f5pgtk9{min-height:44px;}", ".fcep9tg{min-height:34px;}", ".f1pha7fy{min-height:24px;}"]
  });
  var useStyles9 = /* @__PURE__ */ __styles2({
    root: {
      De3pzq: "f1u2r49w",
      qhf8xq: "f10pi13n",
      z8tnut: "f1nbblvp",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f1ov4xf1",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"],
      Bn4voq9: "fz36nt7",
      g9k6zt: "f9znhxp",
      Bfpq7zp: "fqrak0z",
      kdpuga: ["f1o2ludy", "f1kjnpwc"],
      Bw81rd7: ["f1kjnpwc", "f1o2ludy"],
      B6xbmo0: ["fxmnebo", "f1witrsb"],
      dm238s: ["f1witrsb", "fxmnebo"]
    }
  }, {
    d: [".f1u2r49w{background-color:inherit;}", ".f10pi13n{position:relative;}", ".f1nbblvp{padding-top:0px;}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f1ov4xf1{padding-bottom:0px;}", ".fz36nt7[data-fui-focus-visible]{outline-width:2px;}", ".f9znhxp[data-fui-focus-visible]{outline-style:solid;}", ".fqrak0z[data-fui-focus-visible]{outline-color:var(--colorStrokeFocus2);}", ".f1o2ludy[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f1kjnpwc[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusMedium);}", ".fxmnebo[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusMedium);}", ".f1witrsb[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusMedium);}"]
  });
  var useTableCellStyles_unstable = (state) => {
    const styles2 = useStyles9();
    const layoutStyles2 = {
      table: useTableLayoutStyles(),
      flex: useFlexLayoutStyles()
    };
    state.root.className = mergeClasses(tableCellClassNames.root, styles2.root, state.noNativeElements ? layoutStyles2.flex.root : layoutStyles2.table.root, state.noNativeElements ? layoutStyles2.flex[state.size] : layoutStyles2.table[state.size], state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableCell/TableCell.js
  var TableCell = /* @__PURE__ */ React89.forwardRef((props, ref) => {
    const state = useTableCell_unstable(props, ref);
    useTableCellStyles_unstable(state);
    useCustomStyleHook("useTableCellStyles_unstable")(state);
    return renderTableCell_unstable(state);
  });
  TableCell.displayName = "TableCell";

  // ../node_modules/@fluentui/react-table/lib/components/TableRow/TableRow.js
  var React92 = __toESM(require_react());

  // ../node_modules/@fluentui/react-table/lib/components/TableRow/useTableRow.js
  var React91 = __toESM(require_react());

  // ../node_modules/@fluentui/react-table/lib/contexts/tableHeaderContext.js
  var React90 = __toESM(require_react());
  var tableHeaderContext = React90.createContext(void 0);
  var tableHeaderContextDefaultValue = "";
  var TableHeaderContextProvider = tableHeaderContext.Provider;
  var useIsInTableHeader = () => React90.useContext(tableHeaderContext) === tableHeaderContextDefaultValue;

  // ../node_modules/@fluentui/react-table/lib/components/TableRow/useTableRow.js
  var useTableRow_unstable = (props, ref) => {
    const { noNativeElements, size } = useTableContext();
    var _props_as;
    const rootComponent = ((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : noNativeElements) ? "div" : "tr";
    const focusVisibleRef = useFocusVisible();
    const focusWithinRef = useFocusWithin();
    const isHeaderRow = useIsInTableHeader();
    var _props_appearance;
    return {
      components: {
        root: rootComponent
      },
      root: slot_exports.always(getNativeElementProps(rootComponent, {
        ref: useMergedRefs(ref, focusVisibleRef, focusWithinRef),
        role: rootComponent === "div" ? "row" : void 0,
        ...props
      }), {
        elementType: rootComponent
      }),
      size,
      noNativeElements,
      appearance: (_props_appearance = props.appearance) !== null && _props_appearance !== void 0 ? _props_appearance : "none",
      isHeaderRow
    };
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableRow/renderTableRow.js
  var renderTableRow_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {});
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableSelectionCell/useTableSelectionCellStyles.styles.js
  var tableSelectionCellClassNames = {
    root: "fui-TableSelectionCell",
    checkboxIndicator: "fui-TableSelectionCell__checkboxIndicator",
    radioIndicator: "fui-TableSelectionCell__radioIndicator"
  };
  var useTableLayoutStyles2 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f15pt5es",
      a9b677: "fksc0bp"
    }
  }, {
    d: [".f15pt5es{display:table-cell;}", ".fksc0bp{width:44px;}"]
  });
  var useFlexLayoutStyles2 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Bh6795r: "fqerorx",
      Bnnss6s: "f1neuvcm",
      xawz: "fkjuxzh",
      Bf4jedk: "fvrlu0f",
      B2u0y6b: "f1c71y05",
      Brf1p80: "f4d9j23"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".fqerorx{flex-grow:1;}", ".f1neuvcm{flex-shrink:1;}", ".fkjuxzh{flex-basis:0px;}", ".fvrlu0f{min-width:44px;}", ".f1c71y05{max-width:44px;}", ".f4d9j23{justify-content:center;}"]
  });
  var useStyles10 = /* @__PURE__ */ __styles2({
    root: {
      fsow6f: "f17mccla",
      Huce71: "fz5stix",
      z8tnut: "f1g0x7ka",
      z189sj: ["fhxju0i", "f1cnd47f"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f1cnd47f", "fhxju0i"],
      Bn4voq9: "fz36nt7",
      g9k6zt: "f9znhxp",
      Bfpq7zp: "fqrak0z",
      kdpuga: ["f1o2ludy", "f1kjnpwc"],
      Bw81rd7: ["f1kjnpwc", "f1o2ludy"],
      B6xbmo0: ["fxmnebo", "f1witrsb"],
      dm238s: ["f1witrsb", "fxmnebo"]
    },
    radioIndicator: {
      mc9l5x: "f22iagw",
      Bh6795r: "fqerorx",
      Bt984gj: "f122n59",
      Brf1p80: "f4d9j23"
    },
    subtle: {
      abs64n: "fk73vx1",
      B8a84jv: "f1y7ij6c"
    },
    hidden: {
      Bcdw1i0: "fd7fpy0"
    }
  }, {
    d: [".f17mccla{text-align:center;}", ".fz5stix{white-space:nowrap;}", ".f1g0x7ka{padding-top:0;}", ".fhxju0i{padding-right:0;}", ".f1cnd47f{padding-left:0;}", ".f1qch9an{padding-bottom:0;}", ".fz36nt7[data-fui-focus-visible]{outline-width:2px;}", ".f9znhxp[data-fui-focus-visible]{outline-style:solid;}", ".fqrak0z[data-fui-focus-visible]{outline-color:var(--colorStrokeFocus2);}", ".f1o2ludy[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f1kjnpwc[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusMedium);}", ".fxmnebo[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusMedium);}", ".f1witrsb[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusMedium);}", ".f22iagw{display:flex;}", ".fqerorx{flex-grow:1;}", ".f122n59{align-items:center;}", ".f4d9j23{justify-content:center;}", ".fk73vx1{opacity:0;}", ".f1y7ij6c[data-fui-focus-within]:focus-within{opacity:1;}", ".fd7fpy0{visibility:hidden;}"]
  });
  var useTableSelectionCellStyles_unstable = (state) => {
    const styles2 = useStyles10();
    const layoutStyles2 = {
      table: useTableLayoutStyles2(),
      flex: useFlexLayoutStyles2()
    };
    state.root.className = mergeClasses(tableSelectionCellClassNames.root, styles2.root, state.noNativeElements ? layoutStyles2.flex.root : layoutStyles2.table.root, state.subtle && state.checked === false && styles2.subtle, state.hidden && styles2.hidden, state.root.className);
    if (state.checkboxIndicator) {
      state.checkboxIndicator.className = mergeClasses(tableSelectionCellClassNames.checkboxIndicator, state.checkboxIndicator.className);
    }
    if (state.radioIndicator) {
      state.radioIndicator.className = mergeClasses(tableSelectionCellClassNames.radioIndicator, styles2.radioIndicator, state.radioIndicator.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableRow/useTableRowStyles.styles.js
  var tableRowClassName = "fui-TableRow";
  var tableRowClassNames = {
    root: tableRowClassName
  };
  var useTableLayoutStyles3 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f1u0rzck"
    }
  }, {
    d: [".f1u0rzck{display:table-row;}"]
  });
  var useFlexLayoutStyles3 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Bt984gj: "f122n59"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".f122n59{align-items:center;}"]
  });
  var useStyles11 = /* @__PURE__ */ __styles2({
    root: {
      sj55zd: "f19n0e5",
      B7ck84d: "f1ewtqcl",
      Bconypa: "f1jazu75",
      B6guboy: "f1xeqee6",
      Bn4voq9: "fz36nt7",
      g9k6zt: "f9znhxp",
      Bfpq7zp: "fqrak0z",
      kdpuga: ["f1o2ludy", "f1kjnpwc"],
      Bw81rd7: ["f1kjnpwc", "f1o2ludy"],
      B6xbmo0: ["fxmnebo", "f1witrsb"],
      dm238s: ["f1witrsb", "fxmnebo"]
    },
    noAppearanceFocusWithin: {
      Bm5rygw: "f13cic75"
    },
    rootInteractive: {
      ecr2s2: "f1wfn5kd",
      lj723h: "f1g4hkjv",
      B43xm9u: "f15ngxrw",
      i921ia: "fjbbrdp",
      Jwef8y: "f1t94bn6",
      Bi91k9c: "feu1g3u",
      Bpt6rm4: "f1uorfem",
      ff6mpl: "fw60kww"
    },
    medium: {
      Bn0qgzm: "f1vxd6vx",
      oivjwe: "fg706s2",
      B9xav0g: "frpde29"
    },
    small: {
      Bn0qgzm: "f1vxd6vx",
      oivjwe: "fg706s2",
      B9xav0g: "frpde29"
    },
    "extra-small": {
      Be2twd7: "fy9rknc"
    },
    brand: {
      De3pzq: "f16xkysk",
      g2u3we: "f1bh3yvw",
      h3c5rm: ["fmi79ni", "f11fozsx"],
      B9xav0g: "fnzw4c6",
      zhjwy3: ["f11fozsx", "fmi79ni"],
      ecr2s2: "ftepret",
      gwxt9v: "fqlf3fd",
      v3aym: ["f9dpb3h", "fw2muls"],
      Bc736ss: "f1yat0gj",
      Bk6ri7n: ["fw2muls", "f9dpb3h"],
      Bk5ld8o: "f7nae3y",
      c4eypz: ["fkbere7", "fa97sf3"],
      felo30: "fmtyzcc",
      Eshu5l: ["fa97sf3", "fkbere7"],
      Bjwas2f: "fb6zhgp",
      Bn1d65q: ["fyowp6c", "fz08sq8"],
      Bxeuatn: "f9dii88",
      n51gp8: ["fz08sq8", "fyowp6c"],
      Beo2b4z: ["f1afxoft", "flqq2yx"],
      h6lo6r: ["flqq2yx", "f1afxoft"],
      Btyw6ap: ["f1b5xrmd", "f1831rx6"],
      w1pwid: ["f1831rx6", "f1b5xrmd"],
      Brwvgy3: "fd94n53",
      yadkgm: "f1e0wld5"
    },
    neutral: {
      gwxt9v: "fqlf3fd",
      v3aym: ["f9dpb3h", "fw2muls"],
      Bc736ss: "f1yat0gj",
      Bk6ri7n: ["fw2muls", "f9dpb3h"],
      Bk5ld8o: "f7nae3y",
      c4eypz: ["fkbere7", "fa97sf3"],
      felo30: "fmtyzcc",
      Eshu5l: ["fa97sf3", "fkbere7"],
      Bjwas2f: "fb6zhgp",
      Bn1d65q: ["fyowp6c", "fz08sq8"],
      Bxeuatn: "f9dii88",
      n51gp8: ["fz08sq8", "fyowp6c"],
      Beo2b4z: ["f1afxoft", "flqq2yx"],
      h6lo6r: ["flqq2yx", "f1afxoft"],
      Btyw6ap: ["f1b5xrmd", "f1831rx6"],
      w1pwid: ["f1831rx6", "f1b5xrmd"],
      Brwvgy3: "fd94n53",
      yadkgm: "f1e0wld5",
      De3pzq: "fq5gl1p",
      sj55zd: "f1cgsbmv",
      Jwef8y: "f1uqaxdt",
      ecr2s2: "fa9o754",
      g2u3we: "frmsihh",
      h3c5rm: ["frttxa5", "f11o2r7f"],
      B9xav0g: "fem5et0",
      zhjwy3: ["f11o2r7f", "frttxa5"]
    },
    none: {}
  }, {
    d: [".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1ewtqcl{box-sizing:border-box;}", ".f1jazu75[data-fui-focus-within]:focus-within .fui-TableSelectionCell{opacity:1;}", ".f1xeqee6[data-fui-focus-within]:focus-within .fui-TableCellActions{opacity:1;}", ".fz36nt7[data-fui-focus-visible]{outline-width:2px;}", ".f9znhxp[data-fui-focus-visible]{outline-style:solid;}", ".fqrak0z[data-fui-focus-visible]{outline-color:var(--colorStrokeFocus2);}", ".f1o2ludy[data-fui-focus-visible]{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f1kjnpwc[data-fui-focus-visible]{border-bottom-left-radius:var(--borderRadiusMedium);}", ".fxmnebo[data-fui-focus-visible]{border-top-right-radius:var(--borderRadiusMedium);}", ".f1witrsb[data-fui-focus-visible]{border-top-left-radius:var(--borderRadiusMedium);}", ".f13cic75[data-fui-focus-within]:focus-within{background-color:var(--colorSubtleBackgroundHover);}", ".f1vxd6vx{border-bottom-width:var(--strokeWidthThin);}", ".fg706s2{border-bottom-style:solid;}", ".frpde29{border-bottom-color:var(--colorNeutralStroke2);}", ".fy9rknc{font-size:var(--fontSizeBase200);}", ".f16xkysk{background-color:var(--colorBrandBackground2);}", ".f1bh3yvw{border-top-color:var(--colorTransparentStrokeInteractive);}", ".fmi79ni{border-right-color:var(--colorTransparentStrokeInteractive);}", ".f11fozsx{border-left-color:var(--colorTransparentStrokeInteractive);}", ".fnzw4c6{border-bottom-color:var(--colorTransparentStrokeInteractive);}", ".fq5gl1p{background-color:var(--colorSubtleBackgroundSelected);}", ".f1cgsbmv{color:var(--colorNeutralForeground1Hover);}", ".frmsihh{border-top-color:var(--colorNeutralStrokeOnBrand);}", ".frttxa5{border-right-color:var(--colorNeutralStrokeOnBrand);}", ".f11o2r7f{border-left-color:var(--colorNeutralStrokeOnBrand);}", ".fem5et0{border-bottom-color:var(--colorNeutralStrokeOnBrand);}"],
    a: [".f1wfn5kd:active{background-color:var(--colorSubtleBackgroundPressed);}", ".f1g4hkjv:active{color:var(--colorNeutralForeground1Pressed);}", ".f15ngxrw:active .fui-TableCellActions{opacity:1;}", ".fjbbrdp:active .fui-TableSelectionCell{opacity:1;}", ".ftepret:active{background-color:var(--colorBrandBackgroundInvertedSelected);}", ".fa9o754:active{background-color:var(--colorSubtleBackgroundSelected);}"],
    h: [".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".feu1g3u:hover{color:var(--colorNeutralForeground1Hover);}", ".f1uorfem:hover .fui-TableCellActions{opacity:1;}", ".fw60kww:hover .fui-TableSelectionCell{opacity:1;}", ".f1uqaxdt:hover{background-color:var(--colorSubtleBackgroundSelected);}"],
    m: [["@media (forced-colors: active){.fqlf3fd{border-top-width:2px;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9dpb3h{border-right-width:2px;}.fw2muls{border-left-width:2px;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1yat0gj{border-bottom-width:2px;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f7nae3y{border-top-style:solid;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fa97sf3{border-left-style:solid;}.fkbere7{border-right-style:solid;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fmtyzcc{border-bottom-style:solid;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fb6zhgp{border-top-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fyowp6c{border-right-color:transparent;}.fz08sq8{border-left-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f9dii88{border-bottom-color:transparent;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1afxoft{border-bottom-right-radius:var(--borderRadiusMedium);}.flqq2yx{border-bottom-left-radius:var(--borderRadiusMedium);}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1831rx6{border-top-left-radius:var(--borderRadiusMedium);}.f1b5xrmd{border-top-right-radius:var(--borderRadiusMedium);}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fd94n53{box-sizing:border-box;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1e0wld5:focus-visible{outline-offset:-4px;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useTableRowStyles_unstable = (state) => {
    const styles2 = useStyles11();
    const layoutStyles2 = {
      table: useTableLayoutStyles3(),
      flex: useFlexLayoutStyles3()
    };
    state.root.className = mergeClasses(tableRowClassNames.root, styles2.root, !state.isHeaderRow && styles2.rootInteractive, styles2[state.size], state.noNativeElements ? layoutStyles2.flex.root : layoutStyles2.table.root, styles2[state.appearance], state.appearance === "none" && !state.isHeaderRow && styles2.noAppearanceFocusWithin, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableRow/TableRow.js
  var TableRow = /* @__PURE__ */ React92.forwardRef((props, ref) => {
    const state = useTableRow_unstable(props, ref);
    useTableRowStyles_unstable(state);
    useCustomStyleHook("useTableRowStyles_unstable")(state);
    return renderTableRow_unstable(state);
  });
  TableRow.displayName = "TableRow";

  // ../node_modules/@fluentui/react-table/lib/components/TableBody/TableBody.js
  var React94 = __toESM(require_react());

  // ../node_modules/@fluentui/react-table/lib/components/TableBody/useTableBody.js
  var React93 = __toESM(require_react());
  var useTableBody_unstable = (props, ref) => {
    const { noNativeElements } = useTableContext();
    var _props_as;
    const rootComponent = ((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : noNativeElements) ? "div" : "tbody";
    return {
      components: {
        root: rootComponent
      },
      root: slot_exports.always(getNativeElementProps(rootComponent, {
        ref,
        role: rootComponent === "div" ? "rowgroup" : void 0,
        ...props
      }), {
        elementType: rootComponent
      }),
      noNativeElements
    };
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableBody/renderTableBody.js
  var renderTableBody_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {});
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableBody/useTableBodyStyles.styles.js
  var useTableLayoutStyles4 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f1tp1avn"
    }
  }, {
    d: [".f1tp1avn{display:table-row-group;}"]
  });
  var useFlexLayoutStyles4 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "ftgm304"
    }
  }, {
    d: [".ftgm304{display:block;}"]
  });
  var tableBodyClassName = "fui-TableBody";
  var useTableBodyStyles_unstable = (state) => {
    const layoutStyles2 = {
      table: useTableLayoutStyles4(),
      flex: useFlexLayoutStyles4()
    };
    state.root.className = mergeClasses(tableBodyClassName, state.noNativeElements ? layoutStyles2.flex.root : layoutStyles2.table.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableBody/TableBody.js
  var TableBody = /* @__PURE__ */ React94.forwardRef((props, ref) => {
    const state = useTableBody_unstable(props, ref);
    useTableBodyStyles_unstable(state);
    useCustomStyleHook("useTableBodyStyles_unstable")(state);
    return renderTableBody_unstable(state);
  });
  TableBody.displayName = "TableBody";

  // ../node_modules/@fluentui/react-table/lib/components/Table/Table.js
  var React97 = __toESM(require_react());

  // ../node_modules/@fluentui/react-table/lib/components/Table/useTable.js
  var React95 = __toESM(require_react());
  var useTable_unstable = (props, ref) => {
    var _props_as;
    const rootComponent = ((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : props.noNativeElements) ? "div" : "table";
    var _props_size, _props_noNativeElements, _props_sortable;
    return {
      components: {
        root: rootComponent
      },
      root: slot_exports.always(getNativeElementProps(rootComponent, {
        ref,
        role: rootComponent === "div" ? "table" : void 0,
        ...props
      }), {
        elementType: rootComponent
      }),
      size: (_props_size = props.size) !== null && _props_size !== void 0 ? _props_size : "medium",
      noNativeElements: (_props_noNativeElements = props.noNativeElements) !== null && _props_noNativeElements !== void 0 ? _props_noNativeElements : false,
      sortable: (_props_sortable = props.sortable) !== null && _props_sortable !== void 0 ? _props_sortable : false
    };
  };

  // ../node_modules/@fluentui/react-table/lib/components/Table/renderTable.js
  var renderTable_unstable = (state, contextValues) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(TableContextProvider, {
      value: contextValues.table,
      children: /* @__PURE__ */ jsx(state.root, {})
    });
  };

  // ../node_modules/@fluentui/react-table/lib/components/Table/useTableStyles.styles.js
  var tableClassName = "fui-Table";
  var useTableLayoutStyles5 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f1w4nmp0",
      ha4doy: "fmrv4ls",
      a9b677: "fly5x3f",
      B73mfa3: "f14m3nip"
    }
  }, {
    d: [".f1w4nmp0{display:table;}", ".fmrv4ls{vertical-align:middle;}", ".fly5x3f{width:100%;}", ".f14m3nip{table-layout:fixed;}"]
  });
  var useFlexLayoutStyles5 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "ftgm304"
    }
  }, {
    d: [".ftgm304{display:block;}"]
  });
  var useStyles12 = /* @__PURE__ */ __styles2({
    root: {
      po53p8: "fgkb47j",
      De3pzq: "fhovq9v"
    }
  }, {
    d: [".fgkb47j{border-collapse:collapse;}", ".fhovq9v{background-color:var(--colorSubtleBackground);}"]
  });
  var useTableStyles_unstable = (state) => {
    const styles2 = useStyles12();
    const layoutStyles2 = {
      table: useTableLayoutStyles5(),
      flex: useFlexLayoutStyles5()
    };
    state.root.className = mergeClasses(tableClassName, styles2.root, state.noNativeElements ? layoutStyles2.flex.root : layoutStyles2.table.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-table/lib/components/Table/useTableContextValues.js
  var React96 = __toESM(require_react());
  function useTableContextValues_unstable(state) {
    const { size, noNativeElements, sortable } = state;
    const tableContext2 = React96.useMemo(() => ({
      noNativeElements,
      size,
      sortable
    }), [
      noNativeElements,
      size,
      sortable
    ]);
    return {
      table: tableContext2
    };
  }

  // ../node_modules/@fluentui/react-table/lib/components/Table/Table.js
  var Table = /* @__PURE__ */ React97.forwardRef((props, ref) => {
    const state = useTable_unstable(props, ref);
    useTableStyles_unstable(state);
    useCustomStyleHook("useTableStyles_unstable")(state);
    return renderTable_unstable(state, useTableContextValues_unstable(state));
  });
  Table.displayName = "Table";

  // ../node_modules/@fluentui/react-table/lib/components/TableHeader/TableHeader.js
  var React99 = __toESM(require_react());

  // ../node_modules/@fluentui/react-table/lib/components/TableHeader/useTableHeader.js
  var React98 = __toESM(require_react());
  var useTableHeader_unstable = (props, ref) => {
    const { noNativeElements } = useTableContext();
    var _props_as;
    const rootComponent = ((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : noNativeElements) ? "div" : "thead";
    return {
      components: {
        root: rootComponent
      },
      root: slot_exports.always(getNativeElementProps(rootComponent, {
        ref,
        role: rootComponent === "div" ? "rowgroup" : void 0,
        ...props
      }), {
        elementType: rootComponent
      }),
      noNativeElements
    };
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableHeader/renderTableHeader.js
  var renderTableHeader_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(TableHeaderContextProvider, {
      value: "",
      children: /* @__PURE__ */ jsx(state.root, {})
    });
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableHeader/useTableHeaderStyles.styles.js
  var tableHeaderClassName = "fui-TableHeader";
  var useFlexLayoutStyles6 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "ftgm304"
    }
  }, {
    d: [".ftgm304{display:block;}"]
  });
  var useTableLayoutStyles6 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f1tp1avn"
    }
  }, {
    d: [".f1tp1avn{display:table-row-group;}"]
  });
  var useTableHeaderStyles_unstable = (state) => {
    const layoutStyles2 = {
      table: useTableLayoutStyles6(),
      flex: useFlexLayoutStyles6()
    };
    state.root.className = mergeClasses(tableHeaderClassName, state.noNativeElements ? layoutStyles2.flex.root : layoutStyles2.table.root, state.root.className);
    return state;
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableHeader/TableHeader.js
  var TableHeader = /* @__PURE__ */ React99.forwardRef((props, ref) => {
    const state = useTableHeader_unstable(props, ref);
    useTableHeaderStyles_unstable(state);
    useCustomStyleHook("useTableHeaderStyles_unstable")(state);
    return renderTableHeader_unstable(state);
  });
  TableHeader.displayName = "TableHeader";

  // ../node_modules/@fluentui/react-table/lib/components/TableHeaderCell/TableHeaderCell.js
  var React101 = __toESM(require_react());

  // ../node_modules/@fluentui/react-table/lib/components/TableHeaderCell/useTableHeaderCell.js
  var React100 = __toESM(require_react());
  var sortIcons = {
    ascending: /* @__PURE__ */ React100.createElement(ArrowUpRegular, {
      fontSize: 12
    }),
    descending: /* @__PURE__ */ React100.createElement(ArrowDownRegular, {
      fontSize: 12
    })
  };
  var useTableHeaderCell_unstable = (props, ref) => {
    const { noNativeElements, sortable } = useTableContext();
    var _props_as;
    const rootComponent = ((_props_as = props.as) !== null && _props_as !== void 0 ? _props_as : noNativeElements) ? "div" : "th";
    var _props_sortDirection;
    return {
      components: {
        root: rootComponent,
        button: "div",
        sortIcon: "span",
        aside: "span"
      },
      root: slot_exports.always(getNativeElementProps(rootComponent, {
        ref: useMergedRefs(ref, useFocusWithin()),
        role: rootComponent === "div" ? "columnheader" : void 0,
        "aria-sort": sortable ? (_props_sortDirection = props.sortDirection) !== null && _props_sortDirection !== void 0 ? _props_sortDirection : "none" : void 0,
        ...props
      }), {
        elementType: rootComponent
      }),
      aside: slot_exports.optional(props.aside, {
        elementType: "span"
      }),
      sortIcon: slot_exports.optional(props.sortIcon, {
        renderByDefault: !!props.sortDirection,
        defaultProps: {
          children: props.sortDirection ? sortIcons[props.sortDirection] : void 0
        },
        elementType: "span"
      }),
      button: slot_exports.always(useARIAButtonShorthand(props.button, {
        required: true,
        defaultProps: {
          as: "div",
          ...!sortable && {
            role: "presentation",
            tabIndex: void 0
          }
        }
      }), {
        elementType: "div"
      }),
      sortable,
      noNativeElements
    };
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableHeaderCell/renderTableHeaderCell.js
  var renderTableHeaderCell_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        /* @__PURE__ */ jsxs(state.button, {
          children: [
            state.root.children,
            state.sortIcon && /* @__PURE__ */ jsx(state.sortIcon, {})
          ]
        }),
        state.aside && /* @__PURE__ */ jsx(state.aside, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableHeaderCell/useTableHeaderCellStyles.styles.js
  var tableHeaderCellClassNames = {
    root: "fui-TableHeaderCell",
    button: "fui-TableHeaderCell__button",
    sortIcon: "fui-TableHeaderCell__sortIcon",
    aside: "fui-TableHeaderCell__aside"
  };
  var useTableLayoutStyles7 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f15pt5es",
      ha4doy: "fmrv4ls"
    }
  }, {
    d: [".f15pt5es{display:table-cell;}", ".fmrv4ls{vertical-align:middle;}"]
  });
  var useFlexLayoutStyles7 = /* @__PURE__ */ __styles2({
    root: {
      mc9l5x: "f22iagw",
      Bh6795r: "fqerorx",
      Bnnss6s: "f1neuvcm",
      xawz: "fkjuxzh",
      Bf4jedk: "f10tiqix"
    }
  }, {
    d: [".f22iagw{display:flex;}", ".fqerorx{flex-grow:1;}", ".f1neuvcm{flex-shrink:1;}", ".fkjuxzh{flex-basis:0px;}", ".f10tiqix{min-width:0px;}"]
  });
  var useStyles13 = /* @__PURE__ */ __styles2({
    root: {
      Bhrd7zp: "figsok6",
      z8tnut: "f1nbblvp",
      z189sj: ["f1vdfbxk", "f1f5gg8d"],
      Byoj8tv: "f1ov4xf1",
      uwmqm3: ["f1f5gg8d", "f1vdfbxk"],
      B3nxjsc: "fhix6mv",
      Bmvh20x: "fha7anx",
      robkg1: "f1fmzww4",
      pehzd3: ["fs9qmxf", "f187m4uq"],
      B8osjzx: ["f187m4uq", "fs9qmxf"],
      u7xebq: ["f145mzao", "f1uha7eq"],
      Blsv9te: ["f1uha7eq", "f145mzao"],
      qhf8xq: "f10pi13n"
    },
    rootInteractive: {
      Jwef8y: "f1t94bn6",
      ecr2s2: "f1wfn5kd"
    },
    resetButton: {
      B3rzk8w: "fq6nmtn",
      B7ck84d: "f1e4lqlz",
      De3pzq: "f1u2r49w",
      sj55zd: "f1ym3bx4",
      Bahqtrf: "f1mo0ibp",
      Be2twd7: "fjoy568",
      Bg96gwp: "fytdu2e",
      B68tc82: "f1mtd64y",
      Bmxbyg5: "f1y7q3j9",
      z8tnut: "f1g0x7ka",
      z189sj: ["fhxju0i", "f1cnd47f"],
      Byoj8tv: "f1qch9an",
      uwmqm3: ["f1cnd47f", "fhxju0i"],
      icvyot: "f1ern45e",
      vrafjx: ["f1n71otn", "f1deefiw"],
      oivjwe: "f1h8hb77",
      wvpqe5: ["f1deefiw", "f1n71otn"],
      fsow6f: "fgusgyc"
    },
    button: {
      qhf8xq: "f10pi13n",
      a9b677: "fly5x3f",
      mc9l5x: "f22iagw",
      Bh6795r: "fqerorx",
      Bqenvij: "f1l02sjl",
      Bt984gj: "f122n59",
      i8kkvl: "f1ufnopg",
      Belr9w4: "f14sijuj",
      sshi5w: "f1nxs5xn",
      Bnnss6s: "f1neuvcm",
      xawz: "fkjuxzh",
      oeaueh: "f1s6fcnf"
    },
    sortable: {
      Bceei9c: "f1k6fduh"
    },
    sortIcon: {
      mc9l5x: "f22iagw",
      Bt984gj: "f122n59",
      z8tnut: "fclwglc"
    },
    resizeHandle: {}
  }, {
    d: [".figsok6{font-weight:var(--fontWeightRegular);}", ".f1nbblvp{padding-top:0px;}", ".f1vdfbxk{padding-right:var(--spacingHorizontalS);}", ".f1f5gg8d{padding-left:var(--spacingHorizontalS);}", ".f1ov4xf1{padding-bottom:0px;}", ".fhix6mv[data-fui-focus-within]:focus-within{outline-width:2px;}", ".fha7anx[data-fui-focus-within]:focus-within{outline-style:solid;}", ".f1fmzww4[data-fui-focus-within]:focus-within{outline-color:var(--colorStrokeFocus2);}", ".fs9qmxf[data-fui-focus-within]:focus-within{border-bottom-right-radius:var(--borderRadiusMedium);}", ".f187m4uq[data-fui-focus-within]:focus-within{border-bottom-left-radius:var(--borderRadiusMedium);}", ".f145mzao[data-fui-focus-within]:focus-within{border-top-right-radius:var(--borderRadiusMedium);}", ".f1uha7eq[data-fui-focus-within]:focus-within{border-top-left-radius:var(--borderRadiusMedium);}", ".f10pi13n{position:relative;}", ".fq6nmtn{resize:horizontal;}", ".f1e4lqlz{box-sizing:content-box;}", ".f1u2r49w{background-color:inherit;}", ".f1ym3bx4{color:inherit;}", ".f1mo0ibp{font-family:inherit;}", ".fjoy568{font-size:inherit;}", ".fytdu2e{line-height:normal;}", ".f1mtd64y{overflow-x:visible;}", ".f1y7q3j9{overflow-y:visible;}", ".f1g0x7ka{padding-top:0;}", ".fhxju0i{padding-right:0;}", ".f1cnd47f{padding-left:0;}", ".f1qch9an{padding-bottom:0;}", ".f1ern45e{border-top-style:none;}", ".f1n71otn{border-right-style:none;}", ".f1deefiw{border-left-style:none;}", ".f1h8hb77{border-bottom-style:none;}", ".fgusgyc{text-align:unset;}", ".fly5x3f{width:100%;}", ".f22iagw{display:flex;}", ".fqerorx{flex-grow:1;}", ".f1l02sjl{height:100%;}", ".f122n59{align-items:center;}", ".f1ufnopg{column-gap:var(--spacingHorizontalXS);}", ".f14sijuj{row-gap:var(--spacingHorizontalXS);}", ".f1nxs5xn{min-height:32px;}", ".f1neuvcm{flex-shrink:1;}", ".fkjuxzh{flex-basis:0px;}", ".f1s6fcnf{outline-style:none;}", ".f1k6fduh{cursor:pointer;}", ".fclwglc{padding-top:var(--spacingVerticalXXS);}"],
    h: [".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}"],
    a: [".f1wfn5kd:active{background-color:var(--colorSubtleBackgroundPressed);}"]
  });
  var useTableHeaderCellStyles_unstable = (state) => {
    const styles2 = useStyles13();
    const layoutStyles2 = {
      table: useTableLayoutStyles7(),
      flex: useFlexLayoutStyles7()
    };
    state.root.className = mergeClasses(tableHeaderCellClassNames.root, styles2.root, state.sortable && styles2.rootInteractive, state.noNativeElements ? layoutStyles2.flex.root : layoutStyles2.table.root, state.root.className);
    state.button.className = mergeClasses(tableHeaderCellClassNames.button, styles2.resetButton, styles2.button, state.sortable && styles2.sortable, state.button.className);
    if (state.sortIcon) {
      state.sortIcon.className = mergeClasses(tableHeaderCellClassNames.sortIcon, styles2.sortIcon, state.sortIcon.className);
    }
    if (state.aside) {
      state.aside.className = mergeClasses(tableHeaderCellClassNames.aside, styles2.resizeHandle, state.aside.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableHeaderCell/TableHeaderCell.js
  var TableHeaderCell = /* @__PURE__ */ React101.forwardRef((props, ref) => {
    const state = useTableHeaderCell_unstable(props, ref);
    useTableHeaderCellStyles_unstable(state);
    useCustomStyleHook("useTableHeaderCellStyles_unstable")(state);
    return renderTableHeaderCell_unstable(state);
  });
  TableHeaderCell.displayName = "TableHeaderCell";

  // ../node_modules/@fluentui/react-table/lib/components/TableSelectionCell/TableSelectionCell.js
  var React103 = __toESM(require_react());

  // ../node_modules/@fluentui/react-table/lib/components/TableSelectionCell/useTableSelectionCell.js
  var React102 = __toESM(require_react());
  var useTableSelectionCell_unstable = (props, ref) => {
    const tableCellState = useTableCell_unstable(props, ref);
    const { noNativeElements } = useTableContext();
    const { type = "checkbox", checked = false, subtle = false, hidden = false } = props;
    return {
      ...tableCellState,
      components: {
        ...tableCellState.components,
        checkboxIndicator: Checkbox,
        radioIndicator: Radio
      },
      checkboxIndicator: slot_exports.optional(props.checkboxIndicator, {
        renderByDefault: type === "checkbox",
        defaultProps: {
          checked: props.checked
        },
        elementType: Checkbox
      }),
      radioIndicator: slot_exports.optional(props.radioIndicator, {
        renderByDefault: type === "radio",
        defaultProps: {
          checked: !!checked,
          input: {
            name: useId2("table-selection-radio")
          }
        },
        elementType: Radio
      }),
      type,
      checked,
      noNativeElements,
      subtle,
      hidden
    };
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableSelectionCell/renderTableSelectionCell.js
  var renderTableSelectionCell_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.type === "checkbox" && state.checkboxIndicator && /* @__PURE__ */ jsx(state.checkboxIndicator, {}),
        state.type === "radio" && state.radioIndicator && /* @__PURE__ */ jsx(state.radioIndicator, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-table/lib/components/TableSelectionCell/TableSelectionCell.js
  var TableSelectionCell = /* @__PURE__ */ React103.forwardRef((props, ref) => {
    const state = useTableSelectionCell_unstable(props, ref);
    useTableSelectionCellStyles_unstable(state);
    useCustomStyleHook("useTableSelectionCellStyles_unstable")(state);
    return renderTableSelectionCell_unstable(state);
  });
  TableSelectionCell.displayName = "TableSelectionCell";

  // ../node_modules/@fluentui/react-card/lib/components/Card/Card.js
  var React108 = __toESM(require_react());

  // ../node_modules/@fluentui/react-card/lib/components/Card/useCard.js
  var React106 = __toESM(require_react());

  // ../node_modules/@fluentui/react-card/lib/components/Card/useCardSelectable.js
  var React104 = __toESM(require_react());
  var useCardSelectable = (props, { referenceLabel, referenceId }, cardRef) => {
    const { checkbox: checkbox2 = {}, selected, defaultSelected, onSelectionChange, floatingAction, onClick, onKeyDown } = props;
    const { findAllFocusable } = useFocusFinders();
    const checkboxRef = React104.useRef(null);
    const isSelectable = [
      selected,
      defaultSelected,
      onSelectionChange
    ].some((prop) => typeof prop !== "undefined");
    const [isCardSelected, setIsCardSelected] = React104.useState(false);
    const [isSelectFocused, setIsSelectFocused] = React104.useState(false);
    const shouldRestrictTriggerAction = React104.useCallback((event) => {
      var _checkboxRef;
      if (!cardRef.current) {
        return false;
      }
      const focusableElements = findAllFocusable(cardRef.current);
      const target = event.target;
      const isElementInFocusableGroup = focusableElements.some((element2) => element2.contains(target));
      const isCheckboxSlot = ((_checkboxRef = checkboxRef) === null || _checkboxRef === void 0 ? void 0 : _checkboxRef.current) === target;
      return isElementInFocusableGroup && !isCheckboxSlot;
    }, [
      cardRef,
      findAllFocusable
    ]);
    const onChangeHandler = React104.useCallback((event) => {
      if (shouldRestrictTriggerAction(event)) {
        return;
      }
      const newCheckedValue = !isCardSelected;
      setIsCardSelected(newCheckedValue);
      if (onSelectionChange) {
        onSelectionChange(event, {
          selected: newCheckedValue
        });
      }
    }, [
      onSelectionChange,
      isCardSelected,
      shouldRestrictTriggerAction
    ]);
    const onKeyDownHandler = React104.useCallback((event) => {
      if ([
        Enter
      ].includes(event.key)) {
        event.preventDefault();
        onChangeHandler(event);
      }
    }, [
      onChangeHandler
    ]);
    const checkboxSlot = React104.useMemo(() => {
      if (!isSelectable || floatingAction) {
        return;
      }
      const selectableCheckboxProps = {};
      if (referenceId) {
        selectableCheckboxProps["aria-labelledby"] = referenceId;
      } else if (referenceLabel) {
        selectableCheckboxProps["aria-label"] = referenceLabel;
      }
      return slot_exports.optional(checkbox2, {
        defaultProps: {
          ref: checkboxRef,
          type: "checkbox",
          checked: isCardSelected,
          onChange: (event) => onChangeHandler(event),
          onFocus: () => setIsSelectFocused(true),
          onBlur: () => setIsSelectFocused(false),
          ...selectableCheckboxProps
        },
        elementType: "input"
      });
    }, [
      checkbox2,
      floatingAction,
      isCardSelected,
      isSelectable,
      onChangeHandler,
      referenceId,
      referenceLabel
    ]);
    const floatingActionSlot = React104.useMemo(() => {
      if (!floatingAction) {
        return;
      }
      return slot_exports.optional(floatingAction, {
        defaultProps: {
          ref: checkboxRef
        },
        elementType: "div"
      });
    }, [
      floatingAction
    ]);
    const selectableCardProps = React104.useMemo(() => {
      if (!isSelectable) {
        return null;
      }
      return {
        onClick: mergeCallbacks(onClick, onChangeHandler),
        onKeyDown: mergeCallbacks(onKeyDown, onKeyDownHandler)
      };
    }, [
      isSelectable,
      onChangeHandler,
      onClick,
      onKeyDown,
      onKeyDownHandler
    ]);
    React104.useEffect(() => setIsCardSelected(Boolean(defaultSelected !== null && defaultSelected !== void 0 ? defaultSelected : selected)), [
      defaultSelected,
      selected,
      setIsCardSelected
    ]);
    return {
      selected: isCardSelected,
      selectable: isSelectable,
      selectFocused: isSelectFocused,
      selectableCardProps,
      checkboxSlot,
      floatingActionSlot
    };
  };

  // ../node_modules/@fluentui/react-card/lib/components/Card/CardContext.js
  var React105 = __toESM(require_react());
  var cardContext = React105.createContext(void 0);
  var cardContextDefaultValue = {
    selectableA11yProps: {
      referenceId: void 0,
      setReferenceId() {
      },
      referenceLabel: void 0,
      setReferenceLabel() {
      }
    }
  };
  var CardProvider = cardContext.Provider;
  var _React_useContext3;
  var useCardContext_unstable = () => (_React_useContext3 = React105.useContext(cardContext)) !== null && _React_useContext3 !== void 0 ? _React_useContext3 : cardContextDefaultValue;

  // ../node_modules/@fluentui/react-card/lib/components/Card/useCard.js
  var focusMap = {
    off: void 0,
    "no-tab": "limited-trap-focus",
    "tab-exit": "limited",
    "tab-only": "unlimited"
  };
  var useCardInteractive = ({ focusMode = "off", ...props }) => {
    const interactive = [
      "onClick",
      "onDoubleClick",
      "onMouseUp",
      "onMouseDown",
      "onPointerUp",
      "onPointerDown",
      "onTouchStart",
      "onTouchEnd",
      "onDragStart",
      "onDragEnd"
    ].some((prop) => props[prop]);
    const groupperAttrs = useFocusableGroup({
      tabBehavior: focusMap[interactive ? "no-tab" : focusMode]
    });
    const interactiveFocusAttributes = {
      ...groupperAttrs,
      tabIndex: 0
    };
    return {
      interactive,
      focusAttributes: focusMode === "off" ? null : interactiveFocusAttributes
    };
  };
  var useCard_unstable = (props, ref) => {
    const { appearance = "filled", orientation = "vertical", size = "medium" } = props;
    const [referenceId, setReferenceId] = React106.useState(cardContextDefaultValue.selectableA11yProps.referenceId);
    const [referenceLabel, setReferenceLabel] = React106.useState(cardContextDefaultValue.selectableA11yProps.referenceId);
    const cardBaseRef = useFocusWithin();
    const { selectable, selected, selectableCardProps, selectFocused, checkboxSlot, floatingActionSlot } = useCardSelectable(props, {
      referenceId,
      referenceLabel
    }, cardBaseRef);
    const cardRef = useMergedRefs(cardBaseRef, ref);
    const { interactive, focusAttributes } = useCardInteractive(props);
    return {
      appearance,
      orientation,
      size,
      interactive,
      selectable,
      selectFocused,
      selected,
      selectableA11yProps: {
        setReferenceId,
        referenceId,
        referenceLabel,
        setReferenceLabel
      },
      components: {
        root: "div",
        floatingAction: "div",
        checkbox: "input"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref: cardRef,
        role: "group",
        ...focusAttributes,
        ...props,
        ...selectableCardProps
      }), {
        elementType: "div"
      }),
      floatingAction: floatingActionSlot,
      checkbox: checkboxSlot
    };
  };

  // ../node_modules/@fluentui/react-card/lib/components/Card/renderCard.js
  var renderCard_unstable = (state, cardContextValue) => {
    assertSlots(state);
    return /* @__PURE__ */ jsx(state.root, {
      children: /* @__PURE__ */ jsxs(CardProvider, {
        value: cardContextValue,
        children: [
          state.checkbox ? /* @__PURE__ */ jsx(state.checkbox, {}) : null,
          state.floatingAction ? /* @__PURE__ */ jsx(state.floatingAction, {}) : null,
          state.root.children
        ]
      })
    });
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardHeader/useCardHeaderStyles.styles.js
  var cardHeaderClassNames = {
    root: "fui-CardHeader",
    image: "fui-CardHeader__image",
    header: "fui-CardHeader__header",
    description: "fui-CardHeader__description",
    action: "fui-CardHeader__action"
  };
  var useStyles14 = /* @__PURE__ */ __styles2({
    root: {
      Bkc6ea2: "fkufhic",
      mc9l5x: "f13qh94s",
      t4k1zu: "f8a668j",
      Bt984gj: "f122n59"
    },
    image: {
      mc9l5x: "ftuwxu6",
      t21cq0: ["fql5097", "f6yss9k"],
      Br312pm: "fwpfdsa",
      Ijaq50: "fldnz9j"
    },
    header: {
      Br312pm: "fd46tj4",
      Ijaq50: "f16hsg94",
      mc9l5x: "f22iagw"
    },
    description: {
      Br312pm: "fd46tj4",
      Ijaq50: "faunodf",
      mc9l5x: "f22iagw"
    },
    action: {
      Frg6f3: ["f6yss9k", "fql5097"],
      Br312pm: "fis13di",
      Ijaq50: "fldnz9j"
    }
  }, {
    d: [".fkufhic{--fui-CardHeader--gap:12px;}", ".f13qh94s{display:grid;}", ".f8a668j{grid-auto-columns:min-content 1fr min-content;}", ".f122n59{align-items:center;}", ".ftuwxu6{display:inline-flex;}", ".fql5097{margin-right:var(--fui-CardHeader--gap);}", ".f6yss9k{margin-left:var(--fui-CardHeader--gap);}", ".fwpfdsa{grid-column-start:1;}", ".fldnz9j{grid-row-start:span 2;}", ".fd46tj4{grid-column-start:2;}", ".f16hsg94{grid-row-start:1;}", ".f22iagw{display:flex;}", ".faunodf{grid-row-start:2;}", ".fis13di{grid-column-start:3;}"]
  });
  var useCardHeaderStyles_unstable = (state) => {
    const styles2 = useStyles14();
    state.root.className = mergeClasses(cardHeaderClassNames.root, styles2.root, state.root.className);
    if (state.image) {
      state.image.className = mergeClasses(cardHeaderClassNames.image, styles2.image, state.image.className);
    }
    if (state.header) {
      state.header.className = mergeClasses(cardHeaderClassNames.header, styles2.header, state.header.className);
    }
    if (state.description) {
      state.description.className = mergeClasses(cardHeaderClassNames.description, styles2.description, state.description.className);
    }
    if (state.action) {
      state.action.className = mergeClasses(cardHeaderClassNames.action, styles2.action, state.action.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-card/lib/components/Card/useCardStyles.styles.js
  var React107 = __toESM(require_react());
  var cardClassNames = {
    root: "fui-Card",
    floatingAction: "fui-Card__floatingAction",
    checkbox: "fui-Card__checkbox"
  };
  var cardCSSVars = {
    cardSizeVar: "--fui-Card--size",
    cardBorderRadiusVar: "--fui-Card--border-radius"
  };
  var focusOutlineStyle = {
    outlineRadius: `var(${cardCSSVars.cardBorderRadiusVar})`,
    outlineWidth: tokens.strokeWidthThick,
    outlineOffset: "-2px"
  };
  var useStyles15 = /* @__PURE__ */ __styles2({
    root: {
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      Bbmb7ep: ["fifeqxg", "f899z7z"],
      Beyfa6y: ["f899z7z", "fifeqxg"],
      B7oj6ja: ["f4h3tyx", "f18ur2pz"],
      Btl43ni: ["f18ur2pz", "f4h3tyx"],
      z8tnut: "f1lplnzb",
      z189sj: ["f10m5gbb", "f1k04kkk"],
      Byoj8tv: "fhftqfp",
      uwmqm3: ["f1k04kkk", "f10m5gbb"],
      i8kkvl: "fxsr4vj",
      Belr9w4: "fcvsdzp",
      mc9l5x: "f22iagw",
      qhf8xq: "f10pi13n",
      B7ck84d: "f1ewtqcl",
      sj55zd: "f19n0e5",
      E3zdtr: "f1mdlcz9",
      bn5sak: "frwkxtg",
      Eqx8gd: ["f1n6gb5g", "f15yvnhg"],
      B1piin3: ["f15yvnhg", "f1n6gb5g"],
      By385i5: "fo72kxq",
      Bsft5z2: "f13zj6fq",
      B80jsxd: "f1nwj1ja",
      Bm2nyyq: "f8rth92",
      Barhvk9: ["flthirb", "ftkbnf5"],
      Bw17bha: "f1lh990p",
      vfts7: ["ftkbnf5", "flthirb"],
      xrcqlc: "f6czdpx",
      Ihftqj: ["f13hvwk3", "f1en4csx"],
      Bcgy8vk: "f1i1u9k0",
      Bhxzhr1: ["f1en4csx", "f13hvwk3"],
      B3778ie: ["f1qnomq5", "f2fl922"],
      d9w3h3: ["f2fl922", "f1qnomq5"],
      Bl18szs: ["f1anhtl", "f1n2zcl3"],
      B4j8arr: ["f1n2zcl3", "f1anhtl"],
      B2jhnfs: "f16v3d5c",
      wiictr: "f1su8t2g"
    },
    focused: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      B8q5s1w: "f8hki3x",
      Bci5o5g: ["f1d2448m", "ffh67wi"],
      n8qw10: "f1bjia2o",
      Bdrgwmp: ["ffh67wi", "f1d2448m"],
      Bm4h7ae: "f15bsgw9",
      B7ys5i9: "f14e48fq",
      Busjfv9: "f18yb2kv",
      Bhk32uz: "fd6o370",
      Bf4ptjt: "fh1cnn4",
      kclons: ["fy7oxxb", "f184ne2d"],
      Bhdgwq3: "fpukqih",
      Blkhhs4: ["f184ne2d", "fy7oxxb"],
      Bqtpl0w: "f99gebs",
      clg4pj: ["f13b0oaq", "f8t2bz6"],
      hgwjuy: "f1jvq617",
      Bonggc9: ["f8t2bz6", "f13b0oaq"],
      B1tsrr9: ["f11unbnk", "fbd201q"],
      Dah5zi: ["fbd201q", "f11unbnk"],
      Bkh64rk: ["f12nqxso", "f1uguk4w"],
      qqdqy8: ["f1uguk4w", "f12nqxso"],
      B6dhp37: "f1dvezut",
      i03rao: ["fd0oaoj", "f1cwg4i8"],
      Boxcth7: "fjvm52t",
      Bsom6fd: ["f1cwg4i8", "fd0oaoj"],
      J0r882: "f15fr7a0",
      Bule8hv: ["fwsq40z", "fy0y4wt"],
      Bjwuhne: "f34ld9f",
      Ghsupd: ["fy0y4wt", "fwsq40z"]
    },
    selectableFocused: {
      Brovlpu: "ftqa4ok",
      B486eqv: "f2hkw1w",
      Bssx7fj: "f1b1k54r",
      uh7if5: ["f4ne723", "fqqcjud"],
      clntm0: "fh7aioi",
      Dlk2r6: ["fqqcjud", "f4ne723"],
      B2j2mmj: "ffht0p2",
      wigs8: "f1p0ul1q",
      pbfy6t: "f1c901ms",
      B0v4ure: "f1alokd7",
      ghq09: "f78i1la",
      B24cy0v: ["f1kvsw7t", "f1bw8brt"],
      Bwckmig: "f8k7e5g",
      Bvwlmkc: ["f1bw8brt", "f1kvsw7t"],
      Bbgo44z: "f125hn41",
      Bil7v7r: ["fgxkx34", "f1v56tyl"],
      skfxo0: "fdxas6f",
      jo1ztg: ["f1v56tyl", "fgxkx34"],
      Ba3ybja: ["fxwickw", "f1ia5cve"],
      az1dzo: ["f1ia5cve", "fxwickw"],
      vppk2z: ["f194aguw", "fqicc6c"],
      B6352mv: ["fqicc6c", "f194aguw"],
      nr063g: "fq4eyks",
      Blmvk6g: ["f1ya6x16", "ftuszwa"],
      Bsiemmq: "f1e2iu44",
      B98u21t: ["ftuszwa", "f1ya6x16"],
      B2pnrqr: "f1amxum7",
      B29w5g4: ["f1cec8w7", "f554mv0"],
      Bhhzhcn: "f1sj6kbr",
      Bec0n69: ["f554mv0", "f1cec8w7"]
    },
    orientationHorizontal: {
      Beiy3e4: "f1063pyq",
      Bt984gj: "f122n59",
      Bnoktp0: "fpfyeui",
      Idhjb2: "fwi74qw",
      ihgzqh: ["ffcmwrh", "f6ppoih"],
      Bgp6ld0: ["f1dc9p14", "fd933vt"],
      Bbucpmy: "f18esqgw"
    },
    orientationVertical: {
      Beiy3e4: "f1vx9l62",
      Bt4kzjz: ["fobhde4", "fx5r7kn"],
      B1ou843: ["fx5r7kn", "fobhde4"],
      y1433z: "f19chtn8",
      B7egwnw: "fuvs6re",
      B49b4xf: "fy4glsf"
    },
    sizeSmall: {
      B7balbw: "f1pi9uxy",
      B1h88n7: "f1h1zgly"
    },
    sizeMedium: {
      B7balbw: "frsmuga",
      B1h88n7: "fuldkky"
    },
    sizeLarge: {
      B7balbw: "f1qua4xo",
      B1h88n7: "fimkt6v"
    },
    filled: {
      De3pzq: "fxugw4r",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"]
    },
    filledInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "fxugw4r",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"],
      Jwef8y: "f1knas48",
      Bvxd0ez: "f1m145df",
      ecr2s2: "fb40n2d"
    },
    filledInteractiveSelected: {
      De3pzq: "f1nfm20t",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "f1kz6goq"
    },
    filledAlternative: {
      De3pzq: "f1dmdbja",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"]
    },
    filledAlternativeInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "f1dmdbja",
      E5pizo: "f1whvlc6",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"],
      Jwef8y: "f1uvynv3",
      Bvxd0ez: "f1m145df",
      ecr2s2: "f1yhgkbh"
    },
    filledAlternativeInteractiveSelected: {
      De3pzq: "fjxa0vh",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "fehi0vp"
    },
    outline: {
      De3pzq: "f1c21dwh",
      E5pizo: "f1couhl3",
      B0n5ga8: "ft83z1f",
      s924m2: ["f1g4150c", "f192dr6e"],
      B1q35kw: "f1qnawh6",
      Gp14am: ["f192dr6e", "f1g4150c"]
    },
    outlineInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "f1c21dwh",
      E5pizo: "f1couhl3",
      B0n5ga8: "ft83z1f",
      s924m2: ["f1g4150c", "f192dr6e"],
      B1q35kw: "f1qnawh6",
      Gp14am: ["f192dr6e", "f1g4150c"],
      Jwef8y: "fjxutwb",
      Be0v6ae: "f1llr77y",
      B5kxglz: ["fzk0khw", "fjj8tog"],
      B3pwyw6: "fb1u8ub",
      Bymgtzf: ["fjj8tog", "fzk0khw"],
      ecr2s2: "fophhak",
      dmfk: "f1uohb70",
      B4ofi8: ["f1jm7v1n", "f1bus3rq"],
      jgq6uv: "f1fbu7rr",
      Baxewws: ["f1bus3rq", "f1jm7v1n"]
    },
    outlineInteractiveSelected: {
      De3pzq: "f1q9pm1r",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "fg59vm4"
    },
    subtle: {
      De3pzq: "fhovq9v",
      E5pizo: "f1couhl3",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"]
    },
    subtleInteractive: {
      Bceei9c: "f1k6fduh",
      De3pzq: "fhovq9v",
      E5pizo: "f1couhl3",
      B0n5ga8: "f16gxe2i",
      s924m2: ["fpgykix", "fzybk4o"],
      B1q35kw: "f1osi826",
      Gp14am: ["fzybk4o", "fpgykix"],
      Jwef8y: "f1t94bn6",
      ecr2s2: "f1wfn5kd"
    },
    subtleInteractiveSelected: {
      De3pzq: "fq5gl1p",
      B0n5ga8: "f16eln5f",
      s924m2: ["fa2okxs", "fg4zq3l"],
      B1q35kw: "ff6932p",
      Gp14am: ["fg4zq3l", "fa2okxs"],
      Jwef8y: "f1uqaxdt"
    },
    highContrastSelected: {
      ycbfsm: "fkc42ay",
      Bsw6fvg: "f1rirnrt",
      Bbusuzp: "f1lkg8j3",
      xgfqdd: "f1nkj0oa",
      Bmmdzwq: "fey3rwa",
      zkpvhj: ["f5jhx11", "fff9uym"],
      B20bydw: "fm7n0jy",
      Bwwwggl: ["fff9uym", "f5jhx11"]
    },
    highContrastInteractive: {
      h1vhog: "fpfvv3l",
      kslmdy: "f1oamsm6",
      Baaf6ca: "f1il21bs",
      x9zz3d: "fnn5dk0",
      Bmmdzwq: "fey3rwa",
      zkpvhj: ["f5jhx11", "fff9uym"],
      B20bydw: "fm7n0jy",
      Bwwwggl: ["fff9uym", "f5jhx11"]
    },
    select: {
      qhf8xq: "f1euv43f",
      Bhzewxz: "fqclxi7",
      j35jbq: ["fiv86kb", "f36uhnt"],
      Bj3rh1h: "f19g0ac"
    },
    hiddenCheckbox: {
      B68tc82: "f1p9o1ba",
      Bmxbyg5: "f1sil6mw",
      a9b677: "frkrog8",
      Bqenvij: "f1mpe4l3",
      qhf8xq: "f1euv43f",
      Bh84pgu: "fmf1zke",
      Bgl5zvf: "f1wch0ki",
      Huce71: "fz5stix"
    }
  }, {
    d: [".f1p9o1ba{overflow-x:hidden;}", ".f1sil6mw{overflow-y:hidden;}", ".fifeqxg{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".f899z7z{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f4h3tyx{border-top-right-radius:var(--fui-Card--border-radius);}", ".f18ur2pz{border-top-left-radius:var(--fui-Card--border-radius);}", ".f1lplnzb{padding-top:var(--fui-Card--size);}", ".f10m5gbb{padding-right:var(--fui-Card--size);}", ".f1k04kkk{padding-left:var(--fui-Card--size);}", ".fhftqfp{padding-bottom:var(--fui-Card--size);}", ".fxsr4vj{column-gap:var(--fui-Card--size);}", ".fcvsdzp{row-gap:var(--fui-Card--size);}", ".f22iagw{display:flex;}", ".f10pi13n{position:relative;}", ".f1ewtqcl{box-sizing:border-box;}", ".f19n0e5{color:var(--colorNeutralForeground1);}", ".f1mdlcz9::after{position:absolute;}", ".frwkxtg::after{top:0;}", ".f1n6gb5g::after{left:0;}", ".f15yvnhg::after{right:0;}", ".fo72kxq::after{bottom:0;}", '.f13zj6fq::after{content:"";}', ".f1nwj1ja::after{pointer-events:none;}", ".f8rth92::after{border-top-style:solid;}", ".flthirb::after{border-right-style:solid;}", ".ftkbnf5::after{border-left-style:solid;}", ".f1lh990p::after{border-bottom-style:solid;}", ".f6czdpx::after{border-top-width:var(--strokeWidthThin);}", ".f13hvwk3::after{border-right-width:var(--strokeWidthThin);}", ".f1en4csx::after{border-left-width:var(--strokeWidthThin);}", ".f1i1u9k0::after{border-bottom-width:var(--strokeWidthThin);}", ".f1qnomq5::after{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".f2fl922::after{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f1anhtl::after{border-top-right-radius:var(--fui-Card--border-radius);}", ".f1n2zcl3::after{border-top-left-radius:var(--fui-Card--border-radius);}", ".f16v3d5c>.fui-CardHeader,.f16v3d5c>.fui-CardFooter{flex-shrink:0;}", ".f1su8t2g>:not(.fui-CardPreview):not(.fui-CardHeader):not(.fui-CardFooter){flex-grow:1;}", ".f8hki3x[data-fui-focus-visible]{border-top-color:transparent;}", ".f1d2448m[data-fui-focus-visible]{border-right-color:transparent;}", ".ffh67wi[data-fui-focus-visible]{border-left-color:transparent;}", ".f1bjia2o[data-fui-focus-visible]{border-bottom-color:transparent;}", '.f15bsgw9[data-fui-focus-visible]::after{content:"";}', ".f14e48fq[data-fui-focus-visible]::after{position:absolute;}", ".f18yb2kv[data-fui-focus-visible]::after{pointer-events:none;}", ".fd6o370[data-fui-focus-visible]::after{z-index:1;}", ".fh1cnn4[data-fui-focus-visible]::after{border-top-style:solid;}", ".fy7oxxb[data-fui-focus-visible]::after{border-right-style:solid;}", ".f184ne2d[data-fui-focus-visible]::after{border-left-style:solid;}", ".fpukqih[data-fui-focus-visible]::after{border-bottom-style:solid;}", ".f99gebs[data-fui-focus-visible]::after{border-top-width:var(--strokeWidthThick);}", ".f13b0oaq[data-fui-focus-visible]::after{border-right-width:var(--strokeWidthThick);}", ".f8t2bz6[data-fui-focus-visible]::after{border-left-width:var(--strokeWidthThick);}", ".f1jvq617[data-fui-focus-visible]::after{border-bottom-width:var(--strokeWidthThick);}", ".f11unbnk[data-fui-focus-visible]::after{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".fbd201q[data-fui-focus-visible]::after{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f12nqxso[data-fui-focus-visible]::after{border-top-right-radius:var(--fui-Card--border-radius);}", ".f1uguk4w[data-fui-focus-visible]::after{border-top-left-radius:var(--fui-Card--border-radius);}", ".f1dvezut[data-fui-focus-visible]::after{border-top-color:var(--colorStrokeFocus2);}", ".fd0oaoj[data-fui-focus-visible]::after{border-right-color:var(--colorStrokeFocus2);}", ".f1cwg4i8[data-fui-focus-visible]::after{border-left-color:var(--colorStrokeFocus2);}", ".fjvm52t[data-fui-focus-visible]::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f15fr7a0[data-fui-focus-visible]::after{top:calc(0px - var(--strokeWidthThick) - -2px);}", ".fwsq40z[data-fui-focus-visible]::after{right:calc(0px - var(--strokeWidthThick) - -2px);}", ".fy0y4wt[data-fui-focus-visible]::after{left:calc(0px - var(--strokeWidthThick) - -2px);}", ".f34ld9f[data-fui-focus-visible]::after{bottom:calc(0px - var(--strokeWidthThick) - -2px);}", ".f1b1k54r[data-fui-focus-within]:focus-within{border-top-color:transparent;}", ".f4ne723[data-fui-focus-within]:focus-within{border-right-color:transparent;}", ".fqqcjud[data-fui-focus-within]:focus-within{border-left-color:transparent;}", ".fh7aioi[data-fui-focus-within]:focus-within{border-bottom-color:transparent;}", '.ffht0p2[data-fui-focus-within]:focus-within::after{content:"";}', ".f1p0ul1q[data-fui-focus-within]:focus-within::after{position:absolute;}", ".f1c901ms[data-fui-focus-within]:focus-within::after{pointer-events:none;}", ".f1alokd7[data-fui-focus-within]:focus-within::after{z-index:1;}", ".f78i1la[data-fui-focus-within]:focus-within::after{border-top-style:solid;}", ".f1kvsw7t[data-fui-focus-within]:focus-within::after{border-right-style:solid;}", ".f1bw8brt[data-fui-focus-within]:focus-within::after{border-left-style:solid;}", ".f8k7e5g[data-fui-focus-within]:focus-within::after{border-bottom-style:solid;}", ".f125hn41[data-fui-focus-within]:focus-within::after{border-top-width:var(--strokeWidthThick);}", ".fgxkx34[data-fui-focus-within]:focus-within::after{border-right-width:var(--strokeWidthThick);}", ".f1v56tyl[data-fui-focus-within]:focus-within::after{border-left-width:var(--strokeWidthThick);}", ".fdxas6f[data-fui-focus-within]:focus-within::after{border-bottom-width:var(--strokeWidthThick);}", ".fxwickw[data-fui-focus-within]:focus-within::after{border-bottom-right-radius:var(--fui-Card--border-radius);}", ".f1ia5cve[data-fui-focus-within]:focus-within::after{border-bottom-left-radius:var(--fui-Card--border-radius);}", ".f194aguw[data-fui-focus-within]:focus-within::after{border-top-right-radius:var(--fui-Card--border-radius);}", ".fqicc6c[data-fui-focus-within]:focus-within::after{border-top-left-radius:var(--fui-Card--border-radius);}", ".fq4eyks[data-fui-focus-within]:focus-within::after{border-top-color:var(--colorStrokeFocus2);}", ".f1ya6x16[data-fui-focus-within]:focus-within::after{border-right-color:var(--colorStrokeFocus2);}", ".ftuszwa[data-fui-focus-within]:focus-within::after{border-left-color:var(--colorStrokeFocus2);}", ".f1e2iu44[data-fui-focus-within]:focus-within::after{border-bottom-color:var(--colorStrokeFocus2);}", ".f1amxum7[data-fui-focus-within]:focus-within::after{top:calc(0px - var(--strokeWidthThick) - -2px);}", ".f1cec8w7[data-fui-focus-within]:focus-within::after{right:calc(0px - var(--strokeWidthThick) - -2px);}", ".f554mv0[data-fui-focus-within]:focus-within::after{left:calc(0px - var(--strokeWidthThick) - -2px);}", ".f1sj6kbr[data-fui-focus-within]:focus-within::after{bottom:calc(0px - var(--strokeWidthThick) - -2px);}", ".f1063pyq{flex-direction:row;}", ".f122n59{align-items:center;}", ".fpfyeui>.fui-CardPreview{margin-top:calc(var(--fui-Card--size) * -1);}", ".fwi74qw>.fui-CardPreview{margin-bottom:calc(var(--fui-Card--size) * -1);}", '.ffcmwrh>:not([aria-hidden="true"]).fui-CardPreview:first-of-type{margin-left:calc(var(--fui-Card--size) * -1);}', '.f6ppoih>:not([aria-hidden="true"]).fui-CardPreview:first-of-type{margin-right:calc(var(--fui-Card--size) * -1);}', '.f1dc9p14>:not([aria-hidden="true"]).fui-CardPreview:last-of-type{margin-right:calc(var(--fui-Card--size) * -1);}', '.fd933vt>:not([aria-hidden="true"]).fui-CardPreview:last-of-type{margin-left:calc(var(--fui-Card--size) * -1);}', ".f18esqgw>.fui-CardHeader:last-of-type,.f18esqgw>.fui-CardFooter:last-of-type{flex-grow:1;}", ".f1vx9l62{flex-direction:column;}", ".fobhde4>.fui-CardPreview{margin-left:calc(var(--fui-Card--size) * -1);}", ".fx5r7kn>.fui-CardPreview{margin-right:calc(var(--fui-Card--size) * -1);}", '.f19chtn8>:not([aria-hidden="true"]).fui-CardPreview:first-of-type{margin-top:calc(var(--fui-Card--size) * -1);}', ".fuvs6re>.fui-Card__floatingAction+.fui-CardPreview{margin-top:calc(var(--fui-Card--size) * -1);}", '.fy4glsf>:not([aria-hidden="true"]).fui-CardPreview:last-of-type{margin-bottom:calc(var(--fui-Card--size) * -1);}', ".f1pi9uxy{--fui-Card--size:8px;}", ".f1h1zgly{--fui-Card--border-radius:var(--borderRadiusSmall);}", ".frsmuga{--fui-Card--size:12px;}", ".fuldkky{--fui-Card--border-radius:var(--borderRadiusMedium);}", ".f1qua4xo{--fui-Card--size:16px;}", ".fimkt6v{--fui-Card--border-radius:var(--borderRadiusLarge);}", ".fxugw4r{background-color:var(--colorNeutralBackground1);}", ".f1whvlc6{box-shadow:var(--shadow4);}", ".f16gxe2i::after{border-top-color:var(--colorTransparentStroke);}", ".fpgykix::after{border-right-color:var(--colorTransparentStroke);}", ".fzybk4o::after{border-left-color:var(--colorTransparentStroke);}", ".f1osi826::after{border-bottom-color:var(--colorTransparentStroke);}", ".f1k6fduh{cursor:pointer;}", ".f1nfm20t{background-color:var(--colorNeutralBackground1Selected);}", ".f16eln5f::after{border-top-color:var(--colorNeutralStroke1Selected);}", ".fa2okxs::after{border-right-color:var(--colorNeutralStroke1Selected);}", ".fg4zq3l::after{border-left-color:var(--colorNeutralStroke1Selected);}", ".ff6932p::after{border-bottom-color:var(--colorNeutralStroke1Selected);}", ".f1dmdbja{background-color:var(--colorNeutralBackground2);}", ".fjxa0vh{background-color:var(--colorNeutralBackground2Selected);}", ".f1c21dwh{background-color:var(--colorTransparentBackground);}", ".f1couhl3{box-shadow:none;}", ".ft83z1f::after{border-top-color:var(--colorNeutralStroke1);}", ".f1g4150c::after{border-right-color:var(--colorNeutralStroke1);}", ".f192dr6e::after{border-left-color:var(--colorNeutralStroke1);}", ".f1qnawh6::after{border-bottom-color:var(--colorNeutralStroke1);}", ".f1q9pm1r{background-color:var(--colorTransparentBackgroundSelected);}", ".fhovq9v{background-color:var(--colorSubtleBackground);}", ".fq5gl1p{background-color:var(--colorSubtleBackgroundSelected);}", ".f1euv43f{position:absolute;}", ".fqclxi7{top:4px;}", ".fiv86kb{right:4px;}", ".f36uhnt{left:4px;}", ".f19g0ac{z-index:1;}", ".frkrog8{width:1px;}", ".f1mpe4l3{height:1px;}", ".fmf1zke{clip:rect(0 0 0 0);}", ".f1wch0ki{clip-path:inset(50%);}", ".fz5stix{white-space:nowrap;}"],
    f: [".ftqa4ok:focus{outline-style:none;}"],
    i: [".f2hkw1w:focus-visible{outline-style:none;}"],
    h: [".f1knas48:hover{background-color:var(--colorNeutralBackground1Hover);}", ".f1m145df:hover{box-shadow:var(--shadow8);}", ".f1kz6goq:hover{background-color:var(--colorNeutralBackground1Selected);}", ".f1uvynv3:hover{background-color:var(--colorNeutralBackground2Hover);}", ".fehi0vp:hover{background-color:var(--colorNeutralBackground2Selected);}", ".fjxutwb:hover{background-color:var(--colorTransparentBackgroundHover);}", ".f1llr77y:hover::after{border-top-color:var(--colorNeutralStroke1Hover);}", ".fzk0khw:hover::after{border-right-color:var(--colorNeutralStroke1Hover);}", ".fjj8tog:hover::after{border-left-color:var(--colorNeutralStroke1Hover);}", ".fb1u8ub:hover::after{border-bottom-color:var(--colorNeutralStroke1Hover);}", ".fg59vm4:hover{background-color:var(--colorTransparentBackgroundSelected);}", ".f1t94bn6:hover{background-color:var(--colorSubtleBackgroundHover);}", ".f1uqaxdt:hover{background-color:var(--colorSubtleBackgroundSelected);}"],
    a: [".fb40n2d:active{background-color:var(--colorNeutralBackground1Pressed);}", ".f1yhgkbh:active{background-color:var(--colorNeutralBackground2Pressed);}", ".fophhak:active{background-color:var(--colorTransparentBackgroundPressed);}", ".f1uohb70:active::after{border-top-color:var(--colorNeutralStroke1Pressed);}", ".f1jm7v1n:active::after{border-right-color:var(--colorNeutralStroke1Pressed);}", ".f1bus3rq:active::after{border-left-color:var(--colorNeutralStroke1Pressed);}", ".f1fbu7rr:active::after{border-bottom-color:var(--colorNeutralStroke1Pressed);}", ".f1wfn5kd:active{background-color:var(--colorSubtleBackgroundPressed);}"],
    m: [["@media (forced-colors: active){.fkc42ay{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1rirnrt{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1lkg8j3{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1nkj0oa .fui-CardPreview,.f1nkj0oa .fui-CardFooter{forced-color-adjust:auto;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fey3rwa::after{border-top-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f5jhx11::after{border-right-color:Highlight;}.fff9uym::after{border-left-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fm7n0jy::after{border-bottom-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fpfvv3l:hover,.fpfvv3l :active{forced-color-adjust:none;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1oamsm6:hover,.f1oamsm6 :active{background-color:Highlight;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.f1il21bs:hover,.f1il21bs :active{color:HighlightText;}}", {
      m: "(forced-colors: active)"
    }], ["@media (forced-colors: active){.fnn5dk0:hover .fui-CardPreview,.fnn5dk0 :active .fui-CardPreview,.fnn5dk0:hover .fui-CardFooter,.fnn5dk0 :active .fui-CardFooter{forced-color-adjust:auto;}}", {
      m: "(forced-colors: active)"
    }]]
  });
  var useCardStyles_unstable = (state) => {
    const styles2 = useStyles15();
    const orientationMap = {
      horizontal: styles2.orientationHorizontal,
      vertical: styles2.orientationVertical
    };
    const sizeMap = {
      small: styles2.sizeSmall,
      medium: styles2.sizeMedium,
      large: styles2.sizeLarge
    };
    const appearanceMap = {
      filled: styles2.filled,
      "filled-alternative": styles2.filledAlternative,
      outline: styles2.outline,
      subtle: styles2.subtle
    };
    const selectedMap = {
      filled: styles2.filledInteractiveSelected,
      "filled-alternative": styles2.filledAlternativeInteractiveSelected,
      outline: styles2.outlineInteractiveSelected,
      subtle: styles2.subtleInteractiveSelected
    };
    const interactiveMap = {
      filled: styles2.filledInteractive,
      "filled-alternative": styles2.filledAlternativeInteractive,
      outline: styles2.outlineInteractive,
      subtle: styles2.subtleInteractive
    };
    const isSelectableOrInteractive = state.interactive || state.selectable;
    const focusedClassName = React107.useMemo(() => {
      if (state.selectable) {
        if (state.selectFocused) {
          return styles2.selectableFocused;
        }
        return "";
      }
      return styles2.focused;
    }, [state.selectFocused, state.selectable, styles2.focused, styles2.selectableFocused]);
    state.root.className = mergeClasses(
      cardClassNames.root,
      styles2.root,
      orientationMap[state.orientation],
      sizeMap[state.size],
      appearanceMap[state.appearance],
      isSelectableOrInteractive && interactiveMap[state.appearance],
      state.selected && selectedMap[state.appearance],
      // Focus overrides
      focusedClassName,
      // High contrast overrides
      isSelectableOrInteractive && styles2.highContrastInteractive,
      state.selected && styles2.highContrastSelected,
      state.root.className
    );
    if (state.floatingAction) {
      state.floatingAction.className = mergeClasses(cardClassNames.floatingAction, styles2.select, state.floatingAction.className);
    }
    if (state.checkbox) {
      state.checkbox.className = mergeClasses(cardClassNames.checkbox, styles2.hiddenCheckbox, state.checkbox.className);
    }
    return state;
  };

  // ../node_modules/@fluentui/react-card/lib/components/Card/useCardContextValue.js
  function useCardContextValue({ selectableA11yProps }) {
    return {
      selectableA11yProps
    };
  }

  // ../node_modules/@fluentui/react-card/lib/components/Card/Card.js
  var Card = /* @__PURE__ */ React108.forwardRef((props, ref) => {
    const state = useCard_unstable(props, ref);
    const cardContextValue = useCardContextValue(state);
    useCardStyles_unstable(state);
    return renderCard_unstable(state, cardContextValue);
  });
  Card.displayName = "Card";

  // ../node_modules/@fluentui/react-card/lib/components/CardHeader/CardHeader.js
  var React110 = __toESM(require_react());

  // ../node_modules/@fluentui/react-card/lib/components/CardHeader/useCardHeader.js
  var React109 = __toESM(require_react());
  function getChildWithId(header6) {
    function isReactElementWithIdProp(element2) {
      return React109.isValidElement(element2) && Boolean(element2.props.id);
    }
    return React109.Children.toArray(header6).find(isReactElementWithIdProp);
  }
  function getReferenceId(headerId, childWithId, generatedId) {
    var _childWithId;
    if (headerId) {
      return headerId;
    }
    if ((_childWithId = childWithId) === null || _childWithId === void 0 ? void 0 : _childWithId.props.id) {
      return childWithId.props.id;
    }
    return generatedId;
  }
  var useCardHeader_unstable = (props, ref) => {
    const { image: image5, header: header6, description, action } = props;
    const { selectableA11yProps: { referenceId, setReferenceId } } = useCardContext_unstable();
    const headerRef = React109.useRef(null);
    const hasChildId = React109.useRef(false);
    const generatedId = useId2(cardHeaderClassNames.header, referenceId);
    const headerSlot = slot_exports.optional(header6, {
      renderByDefault: true,
      defaultProps: {
        ref: headerRef,
        id: !hasChildId.current ? referenceId : void 0
      },
      elementType: "div"
    });
    React109.useEffect(() => {
      var _headerRef_current, _headerSlot;
      const headerId = !hasChildId.current ? (_headerRef_current = headerRef.current) === null || _headerRef_current === void 0 ? void 0 : _headerRef_current.id : void 0;
      const childWithId = getChildWithId((_headerSlot = headerSlot) === null || _headerSlot === void 0 ? void 0 : _headerSlot.children);
      hasChildId.current = Boolean(childWithId);
      setReferenceId(getReferenceId(headerId, childWithId, generatedId));
    }, [
      generatedId,
      header6,
      headerSlot,
      setReferenceId
    ]);
    return {
      components: {
        root: "div",
        image: "div",
        header: "div",
        description: "div",
        action: "div"
      },
      root: slot_exports.always(getNativeElementProps("div", {
        ref,
        ...props
      }), {
        elementType: "div"
      }),
      image: slot_exports.optional(image5, {
        elementType: "div"
      }),
      header: headerSlot,
      description: slot_exports.optional(description, {
        elementType: "div"
      }),
      action: slot_exports.optional(action, {
        elementType: "div"
      })
    };
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardHeader/renderCardHeader.js
  var renderCardHeader_unstable = (state) => {
    assertSlots(state);
    return /* @__PURE__ */ jsxs(state.root, {
      children: [
        state.image && /* @__PURE__ */ jsx(state.image, {}),
        /* @__PURE__ */ jsx(state.header, {}),
        state.description && /* @__PURE__ */ jsx(state.description, {}),
        state.action && /* @__PURE__ */ jsx(state.action, {})
      ]
    });
  };

  // ../node_modules/@fluentui/react-card/lib/components/CardHeader/CardHeader.js
  var CardHeader = /* @__PURE__ */ React110.forwardRef((props, ref) => {
    const state = useCardHeader_unstable(props, ref);
    useCardHeaderStyles_unstable(state);
    return renderCardHeader_unstable(state);
  });
  CardHeader.displayName = "CardHeader";

  // ../node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // ../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // ../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o2, p2) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
      o3.__proto__ = p3;
      return o3;
    };
    return _setPrototypeOf(o2, p2);
  }

  // ../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // ../node_modules/react-hotkeys-hook/src/HotkeysProvider.tsx
  var import_react35 = __toESM(require_react());

  // ../node_modules/react-hotkeys-hook/src/BoundHotkeysProxyProvider.tsx
  var import_react34 = __toESM(require_react());
  var BoundHotkeysProxyProvider = (0, import_react34.createContext)(void 0);
  function BoundHotkeysProxyProviderProvider({ addHotkey, removeHotkey, children }) {
    return /* @__PURE__ */ React.createElement(BoundHotkeysProxyProvider.Provider, { value: { addHotkey, removeHotkey } }, children);
  }

  // ../node_modules/react-hotkeys-hook/src/deepEqual.ts
  function deepEqual(x, y2) {
    return x && y2 && typeof x === "object" && typeof y2 === "object" ? Object.keys(x).length === Object.keys(y2).length && //@ts-ignore
    Object.keys(x).reduce((isEqual, key) => isEqual && deepEqual(x[key], y2[key]), true) : x === y2;
  }

  // ../node_modules/react-hotkeys-hook/src/HotkeysProvider.tsx
  var HotkeysContext = (0, import_react35.createContext)({
    hotkeys: [],
    enabledScopes: [],
    // This array has to be empty instead of containing '*' as default, to check if the provider is set or not
    toggleScope: () => {
    },
    enableScope: () => {
    },
    disableScope: () => {
    }
  });
  var HotkeysProvider = ({ initiallyActiveScopes = ["*"], children }) => {
    const [internalActiveScopes, setInternalActiveScopes] = (0, import_react35.useState)(
      initiallyActiveScopes?.length > 0 ? initiallyActiveScopes : ["*"]
    );
    const [boundHotkeys, setBoundHotkeys] = (0, import_react35.useState)([]);
    const enableScope = (0, import_react35.useCallback)((scope) => {
      setInternalActiveScopes((prev2) => {
        if (prev2.includes("*")) {
          return [scope];
        }
        return Array.from(/* @__PURE__ */ new Set([...prev2, scope]));
      });
    }, []);
    const disableScope = (0, import_react35.useCallback)((scope) => {
      setInternalActiveScopes((prev2) => {
        if (prev2.filter((s2) => s2 !== scope).length === 0) {
          return ["*"];
        } else {
          return prev2.filter((s2) => s2 !== scope);
        }
      });
    }, []);
    const toggleScope = (0, import_react35.useCallback)((scope) => {
      setInternalActiveScopes((prev2) => {
        if (prev2.includes(scope)) {
          if (prev2.filter((s2) => s2 !== scope).length === 0) {
            return ["*"];
          } else {
            return prev2.filter((s2) => s2 !== scope);
          }
        } else {
          if (prev2.includes("*")) {
            return [scope];
          }
          return Array.from(/* @__PURE__ */ new Set([...prev2, scope]));
        }
      });
    }, []);
    const addBoundHotkey = (0, import_react35.useCallback)((hotkey) => {
      setBoundHotkeys((prev2) => [...prev2, hotkey]);
    }, []);
    const removeBoundHotkey = (0, import_react35.useCallback)((hotkey) => {
      setBoundHotkeys((prev2) => prev2.filter((h3) => !deepEqual(h3, hotkey)));
    }, []);
    return /* @__PURE__ */ React.createElement(
      HotkeysContext.Provider,
      {
        value: { enabledScopes: internalActiveScopes, hotkeys: boundHotkeys, enableScope, disableScope, toggleScope }
      },
      /* @__PURE__ */ React.createElement(BoundHotkeysProxyProviderProvider, { addHotkey: addBoundHotkey, removeHotkey: removeBoundHotkey }, children)
    );
  };

  // src/providers/ProjectProvider.tsx
  var import_react38 = __toESM(require_react(), 1);

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/assert.js
  function assert(condition, msg) {
    if (!condition) {
      throw new Error(msg);
    }
  }
  var FLOAT32_MAX = 34028234663852886e22;
  var FLOAT32_MIN = -34028234663852886e22;
  var UINT32_MAX = 4294967295;
  var INT32_MAX = 2147483647;
  var INT32_MIN = -2147483648;
  function assertInt32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid int 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)
      throw new Error("invalid int 32: " + arg);
  }
  function assertUInt32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid uint 32: " + typeof arg);
    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)
      throw new Error("invalid uint 32: " + arg);
  }
  function assertFloat32(arg) {
    if (typeof arg !== "number")
      throw new Error("invalid float 32: " + typeof arg);
    if (!Number.isFinite(arg))
      return;
    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)
      throw new Error("invalid float 32: " + arg);
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/enum.js
  var enumTypeSymbol = Symbol("@bufbuild/protobuf/enum-type");
  function getEnumType(enumObject) {
    const t2 = enumObject[enumTypeSymbol];
    assert(t2, "missing enum type on enum object");
    return t2;
  }
  function setEnumType(enumObject, typeName, values2, opt) {
    enumObject[enumTypeSymbol] = makeEnumType(typeName, values2.map((v2) => ({
      no: v2.no,
      name: v2.name,
      localName: enumObject[v2.no]
    })), opt);
  }
  function makeEnumType(typeName, values2, _opt) {
    const names = /* @__PURE__ */ Object.create(null);
    const numbers = /* @__PURE__ */ Object.create(null);
    const normalValues = [];
    for (const value of values2) {
      const n3 = normalizeEnumValue(value);
      normalValues.push(n3);
      names[value.name] = n3;
      numbers[value.no] = n3;
    }
    return {
      typeName,
      values: normalValues,
      // We do not surface options at this time
      // options: opt?.options ?? Object.create(null),
      findName(name) {
        return names[name];
      },
      findNumber(no) {
        return numbers[no];
      }
    };
  }
  function makeEnum(typeName, values2, opt) {
    const enumObject = {};
    for (const value of values2) {
      const n3 = normalizeEnumValue(value);
      enumObject[n3.localName] = n3.no;
      enumObject[n3.no] = n3.localName;
    }
    setEnumType(enumObject, typeName, values2, opt);
    return enumObject;
  }
  function normalizeEnumValue(value) {
    if ("localName" in value) {
      return value;
    }
    return Object.assign(Object.assign({}, value), { localName: value.name });
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/message.js
  var Message = class {
    /**
     * Compare with a message of the same type.
     */
    equals(other) {
      return this.getType().runtime.util.equals(this.getType(), this, other);
    }
    /**
     * Create a deep copy.
     */
    clone() {
      return this.getType().runtime.util.clone(this);
    }
    /**
     * Parse from binary data, merging fields.
     *
     * Repeated fields are appended. Map entries are added, overwriting
     * existing keys.
     *
     * If a message field is already present, it will be merged with the
     * new data.
     */
    fromBinary(bytes, options) {
      const type = this.getType(), format2 = type.runtime.bin, opt = format2.makeReadOptions(options);
      format2.readMessage(this, opt.readerFactory(bytes), bytes.byteLength, opt);
      return this;
    }
    /**
     * Parse a message from a JSON value.
     */
    fromJson(jsonValue, options) {
      const type = this.getType(), format2 = type.runtime.json, opt = format2.makeReadOptions(options);
      format2.readMessage(type, jsonValue, opt, this);
      return this;
    }
    /**
     * Parse a message from a JSON string.
     */
    fromJsonString(jsonString, options) {
      let json2;
      try {
        json2 = JSON.parse(jsonString);
      } catch (e2) {
        throw new Error(`cannot decode ${this.getType().typeName} from JSON: ${e2 instanceof Error ? e2.message : String(e2)}`);
      }
      return this.fromJson(json2, options);
    }
    /**
     * Serialize the message to binary data.
     */
    toBinary(options) {
      const type = this.getType(), bin = type.runtime.bin, opt = bin.makeWriteOptions(options), writer = opt.writerFactory();
      bin.writeMessage(this, writer, opt);
      return writer.finish();
    }
    /**
     * Serialize the message to a JSON value, a JavaScript value that can be
     * passed to JSON.stringify().
     */
    toJson(options) {
      const type = this.getType(), json2 = type.runtime.json, opt = json2.makeWriteOptions(options);
      return json2.writeMessage(this, opt);
    }
    /**
     * Serialize the message to a JSON string.
     */
    toJsonString(options) {
      var _a5;
      const value = this.toJson(options);
      return JSON.stringify(value, null, (_a5 = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a5 !== void 0 ? _a5 : 0);
    }
    /**
     * Override for serialization behavior. This will be invoked when calling
     * JSON.stringify on this message (i.e. JSON.stringify(msg)).
     *
     * Note that this will not serialize google.protobuf.Any with a packed
     * message because the protobuf JSON format specifies that it needs to be
     * unpacked, and this is only possible with a type registry to look up the
     * message type.  As a result, attempting to serialize a message with this
     * type will throw an Error.
     *
     * This method is protected because you should not need to invoke it
     * directly -- instead use JSON.stringify or toJsonString for
     * stringified JSON.  Alternatively, if actual JSON is desired, you should
     * use toJson.
     */
    toJSON() {
      return this.toJson({
        emitDefaultValues: true
      });
    }
    /**
     * Retrieve the MessageType of this message - a singleton that represents
     * the protobuf message declaration and provides metadata for reflection-
     * based operations.
     */
    getType() {
      return Object.getPrototypeOf(this).constructor;
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/message-type.js
  function makeMessageType(runtime, typeName, fields, opt) {
    var _a5;
    const localName = (_a5 = opt === null || opt === void 0 ? void 0 : opt.localName) !== null && _a5 !== void 0 ? _a5 : typeName.substring(typeName.lastIndexOf(".") + 1);
    const type = {
      [localName]: function(data) {
        runtime.util.initFields(this);
        runtime.util.initPartial(data, this);
      }
    }[localName];
    Object.setPrototypeOf(type.prototype, new Message());
    Object.assign(type, {
      runtime,
      typeName,
      fields: runtime.util.newFieldList(fields),
      fromBinary(bytes, options) {
        return new type().fromBinary(bytes, options);
      },
      fromJson(jsonValue, options) {
        return new type().fromJson(jsonValue, options);
      },
      fromJsonString(jsonString, options) {
        return new type().fromJsonString(jsonString, options);
      },
      equals(a2, b3) {
        return runtime.util.equals(type, a2, b3);
      }
    });
    return type;
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/proto-runtime.js
  function makeProtoRuntime(syntax, json2, bin, util) {
    return {
      syntax,
      json: json2,
      bin,
      util,
      makeMessageType(typeName, fields, opt) {
        return makeMessageType(this, typeName, fields, opt);
      },
      makeEnum,
      makeEnumType,
      getEnumType
    };
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/field.js
  var ScalarType;
  (function(ScalarType2) {
    ScalarType2[ScalarType2["DOUBLE"] = 1] = "DOUBLE";
    ScalarType2[ScalarType2["FLOAT"] = 2] = "FLOAT";
    ScalarType2[ScalarType2["INT64"] = 3] = "INT64";
    ScalarType2[ScalarType2["UINT64"] = 4] = "UINT64";
    ScalarType2[ScalarType2["INT32"] = 5] = "INT32";
    ScalarType2[ScalarType2["FIXED64"] = 6] = "FIXED64";
    ScalarType2[ScalarType2["FIXED32"] = 7] = "FIXED32";
    ScalarType2[ScalarType2["BOOL"] = 8] = "BOOL";
    ScalarType2[ScalarType2["STRING"] = 9] = "STRING";
    ScalarType2[ScalarType2["BYTES"] = 12] = "BYTES";
    ScalarType2[ScalarType2["UINT32"] = 13] = "UINT32";
    ScalarType2[ScalarType2["SFIXED32"] = 15] = "SFIXED32";
    ScalarType2[ScalarType2["SFIXED64"] = 16] = "SFIXED64";
    ScalarType2[ScalarType2["SINT32"] = 17] = "SINT32";
    ScalarType2[ScalarType2["SINT64"] = 18] = "SINT64";
  })(ScalarType || (ScalarType = {}));

  // ../node_modules/@bufbuild/protobuf/dist/esm/google/varint.js
  function varint64read() {
    let lowBits = 0;
    let highBits = 0;
    for (let shift = 0; shift < 28; shift += 7) {
      let b3 = this.buf[this.pos++];
      lowBits |= (b3 & 127) << shift;
      if ((b3 & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
    }
    let middleByte = this.buf[this.pos++];
    lowBits |= (middleByte & 15) << 28;
    highBits = (middleByte & 112) >> 4;
    if ((middleByte & 128) == 0) {
      this.assertBounds();
      return [lowBits, highBits];
    }
    for (let shift = 3; shift <= 31; shift += 7) {
      let b3 = this.buf[this.pos++];
      highBits |= (b3 & 127) << shift;
      if ((b3 & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
      }
    }
    throw new Error("invalid varint");
  }
  function varint64write(lo, hi, bytes) {
    for (let i2 = 0; i2 < 28; i2 = i2 + 7) {
      const shift = lo >>> i2;
      const hasNext = !(shift >>> 7 == 0 && hi == 0);
      const byte = (hasNext ? shift | 128 : shift) & 255;
      bytes.push(byte);
      if (!hasNext) {
        return;
      }
    }
    const splitBits = lo >>> 28 & 15 | (hi & 7) << 4;
    const hasMoreBits = !(hi >> 3 == 0);
    bytes.push((hasMoreBits ? splitBits | 128 : splitBits) & 255);
    if (!hasMoreBits) {
      return;
    }
    for (let i2 = 3; i2 < 31; i2 = i2 + 7) {
      const shift = hi >>> i2;
      const hasNext = !(shift >>> 7 == 0);
      const byte = (hasNext ? shift | 128 : shift) & 255;
      bytes.push(byte);
      if (!hasNext) {
        return;
      }
    }
    bytes.push(hi >>> 31 & 1);
  }
  var TWO_PWR_32_DBL = 4294967296;
  function int64FromString(dec) {
    const minus = dec[0] === "-";
    if (minus) {
      dec = dec.slice(1);
    }
    const base2 = 1e6;
    let lowBits = 0;
    let highBits = 0;
    function add1e6digit(begin, end2) {
      const digit1e6 = Number(dec.slice(begin, end2));
      highBits *= base2;
      lowBits = lowBits * base2 + digit1e6;
      if (lowBits >= TWO_PWR_32_DBL) {
        highBits = highBits + (lowBits / TWO_PWR_32_DBL | 0);
        lowBits = lowBits % TWO_PWR_32_DBL;
      }
    }
    add1e6digit(-24, -18);
    add1e6digit(-18, -12);
    add1e6digit(-12, -6);
    add1e6digit(-6);
    return minus ? negate(lowBits, highBits) : newBits(lowBits, highBits);
  }
  function int64ToString(lo, hi) {
    let bits = newBits(lo, hi);
    const negative = bits.hi & 2147483648;
    if (negative) {
      bits = negate(bits.lo, bits.hi);
    }
    const result = uInt64ToString(bits.lo, bits.hi);
    return negative ? "-" + result : result;
  }
  function uInt64ToString(lo, hi) {
    ({ lo, hi } = toUnsigned(lo, hi));
    if (hi <= 2097151) {
      return String(TWO_PWR_32_DBL * hi + lo);
    }
    const low = lo & 16777215;
    const mid = (lo >>> 24 | hi << 8) & 16777215;
    const high = hi >> 16 & 65535;
    let digitA = low + mid * 6777216 + high * 6710656;
    let digitB = mid + high * 8147497;
    let digitC = high * 2;
    const base2 = 1e7;
    if (digitA >= base2) {
      digitB += Math.floor(digitA / base2);
      digitA %= base2;
    }
    if (digitB >= base2) {
      digitC += Math.floor(digitB / base2);
      digitB %= base2;
    }
    return digitC.toString() + decimalFrom1e7WithLeadingZeros(digitB) + decimalFrom1e7WithLeadingZeros(digitA);
  }
  function toUnsigned(lo, hi) {
    return { lo: lo >>> 0, hi: hi >>> 0 };
  }
  function newBits(lo, hi) {
    return { lo: lo | 0, hi: hi | 0 };
  }
  function negate(lowBits, highBits) {
    highBits = ~highBits;
    if (lowBits) {
      lowBits = ~lowBits + 1;
    } else {
      highBits += 1;
    }
    return newBits(lowBits, highBits);
  }
  var decimalFrom1e7WithLeadingZeros = (digit1e7) => {
    const partial = String(digit1e7);
    return "0000000".slice(partial.length) + partial;
  };
  function varint32write(value, bytes) {
    if (value >= 0) {
      while (value > 127) {
        bytes.push(value & 127 | 128);
        value = value >>> 7;
      }
      bytes.push(value);
    } else {
      for (let i2 = 0; i2 < 9; i2++) {
        bytes.push(value & 127 | 128);
        value = value >> 7;
      }
      bytes.push(1);
    }
  }
  function varint32read() {
    let b3 = this.buf[this.pos++];
    let result = b3 & 127;
    if ((b3 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b3 = this.buf[this.pos++];
    result |= (b3 & 127) << 7;
    if ((b3 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b3 = this.buf[this.pos++];
    result |= (b3 & 127) << 14;
    if ((b3 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b3 = this.buf[this.pos++];
    result |= (b3 & 127) << 21;
    if ((b3 & 128) == 0) {
      this.assertBounds();
      return result;
    }
    b3 = this.buf[this.pos++];
    result |= (b3 & 15) << 28;
    for (let readBytes = 5; (b3 & 128) !== 0 && readBytes < 10; readBytes++)
      b3 = this.buf[this.pos++];
    if ((b3 & 128) != 0)
      throw new Error("invalid varint");
    this.assertBounds();
    return result >>> 0;
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/proto-int64.js
  function makeInt64Support() {
    const dv = new DataView(new ArrayBuffer(8));
    const ok2 = typeof BigInt === "function" && typeof dv.getBigInt64 === "function" && typeof dv.getBigUint64 === "function" && typeof dv.setBigInt64 === "function" && typeof dv.setBigUint64 === "function" && (typeof process != "object" || typeof process.env != "object" || process.env.BUF_BIGINT_DISABLE !== "1");
    if (ok2) {
      const MIN = BigInt("-9223372036854775808"), MAX = BigInt("9223372036854775807"), UMIN = BigInt("0"), UMAX = BigInt("18446744073709551615");
      return {
        zero: BigInt(0),
        supported: true,
        parse(value) {
          const bi = typeof value == "bigint" ? value : BigInt(value);
          if (bi > MAX || bi < MIN) {
            throw new Error(`int64 invalid: ${value}`);
          }
          return bi;
        },
        uParse(value) {
          const bi = typeof value == "bigint" ? value : BigInt(value);
          if (bi > UMAX || bi < UMIN) {
            throw new Error(`uint64 invalid: ${value}`);
          }
          return bi;
        },
        enc(value) {
          dv.setBigInt64(0, this.parse(value), true);
          return {
            lo: dv.getInt32(0, true),
            hi: dv.getInt32(4, true)
          };
        },
        uEnc(value) {
          dv.setBigInt64(0, this.uParse(value), true);
          return {
            lo: dv.getInt32(0, true),
            hi: dv.getInt32(4, true)
          };
        },
        dec(lo, hi) {
          dv.setInt32(0, lo, true);
          dv.setInt32(4, hi, true);
          return dv.getBigInt64(0, true);
        },
        uDec(lo, hi) {
          dv.setInt32(0, lo, true);
          dv.setInt32(4, hi, true);
          return dv.getBigUint64(0, true);
        }
      };
    }
    const assertInt64String = (value) => assert(/^-?[0-9]+$/.test(value), `int64 invalid: ${value}`);
    const assertUInt64String = (value) => assert(/^[0-9]+$/.test(value), `uint64 invalid: ${value}`);
    return {
      zero: "0",
      supported: false,
      parse(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertInt64String(value);
        return value;
      },
      uParse(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertUInt64String(value);
        return value;
      },
      enc(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertInt64String(value);
        return int64FromString(value);
      },
      uEnc(value) {
        if (typeof value != "string") {
          value = value.toString();
        }
        assertUInt64String(value);
        return int64FromString(value);
      },
      dec(lo, hi) {
        return int64ToString(lo, hi);
      },
      uDec(lo, hi) {
        return uInt64ToString(lo, hi);
      }
    };
  }
  var protoInt64 = makeInt64Support();

  // ../node_modules/@bufbuild/protobuf/dist/esm/binary-encoding.js
  var WireType;
  (function(WireType2) {
    WireType2[WireType2["Varint"] = 0] = "Varint";
    WireType2[WireType2["Bit64"] = 1] = "Bit64";
    WireType2[WireType2["LengthDelimited"] = 2] = "LengthDelimited";
    WireType2[WireType2["StartGroup"] = 3] = "StartGroup";
    WireType2[WireType2["EndGroup"] = 4] = "EndGroup";
    WireType2[WireType2["Bit32"] = 5] = "Bit32";
  })(WireType || (WireType = {}));
  var BinaryWriter = class {
    constructor(textEncoder) {
      this.stack = [];
      this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();
      this.chunks = [];
      this.buf = [];
    }
    /**
     * Return all bytes written and reset this writer.
     */
    finish() {
      this.chunks.push(new Uint8Array(this.buf));
      let len = 0;
      for (let i2 = 0; i2 < this.chunks.length; i2++)
        len += this.chunks[i2].length;
      let bytes = new Uint8Array(len);
      let offset = 0;
      for (let i2 = 0; i2 < this.chunks.length; i2++) {
        bytes.set(this.chunks[i2], offset);
        offset += this.chunks[i2].length;
      }
      this.chunks = [];
      return bytes;
    }
    /**
     * Start a new fork for length-delimited data like a message
     * or a packed repeated field.
     *
     * Must be joined later with `join()`.
     */
    fork() {
      this.stack.push({ chunks: this.chunks, buf: this.buf });
      this.chunks = [];
      this.buf = [];
      return this;
    }
    /**
     * Join the last fork. Write its length and bytes, then
     * return to the previous state.
     */
    join() {
      let chunk = this.finish();
      let prev2 = this.stack.pop();
      if (!prev2)
        throw new Error("invalid state, fork stack empty");
      this.chunks = prev2.chunks;
      this.buf = prev2.buf;
      this.uint32(chunk.byteLength);
      return this.raw(chunk);
    }
    /**
     * Writes a tag (field number and wire type).
     *
     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
     *
     * Generated code should compute the tag ahead of time and call `uint32()`.
     */
    tag(fieldNo, type) {
      return this.uint32((fieldNo << 3 | type) >>> 0);
    }
    /**
     * Write a chunk of raw bytes.
     */
    raw(chunk) {
      if (this.buf.length) {
        this.chunks.push(new Uint8Array(this.buf));
        this.buf = [];
      }
      this.chunks.push(chunk);
      return this;
    }
    /**
     * Write a `uint32` value, an unsigned 32 bit varint.
     */
    uint32(value) {
      assertUInt32(value);
      while (value > 127) {
        this.buf.push(value & 127 | 128);
        value = value >>> 7;
      }
      this.buf.push(value);
      return this;
    }
    /**
     * Write a `int32` value, a signed 32 bit varint.
     */
    int32(value) {
      assertInt32(value);
      varint32write(value, this.buf);
      return this;
    }
    /**
     * Write a `bool` value, a variant.
     */
    bool(value) {
      this.buf.push(value ? 1 : 0);
      return this;
    }
    /**
     * Write a `bytes` value, length-delimited arbitrary data.
     */
    bytes(value) {
      this.uint32(value.byteLength);
      return this.raw(value);
    }
    /**
     * Write a `string` value, length-delimited data converted to UTF-8 text.
     */
    string(value) {
      let chunk = this.textEncoder.encode(value);
      this.uint32(chunk.byteLength);
      return this.raw(chunk);
    }
    /**
     * Write a `float` value, 32-bit floating point number.
     */
    float(value) {
      assertFloat32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setFloat32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `double` value, a 64-bit floating point number.
     */
    double(value) {
      let chunk = new Uint8Array(8);
      new DataView(chunk.buffer).setFloat64(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
     */
    fixed32(value) {
      assertUInt32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setUint32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
     */
    sfixed32(value) {
      assertInt32(value);
      let chunk = new Uint8Array(4);
      new DataView(chunk.buffer).setInt32(0, value, true);
      return this.raw(chunk);
    }
    /**
     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
     */
    sint32(value) {
      assertInt32(value);
      value = (value << 1 ^ value >> 31) >>> 0;
      varint32write(value, this.buf);
      return this;
    }
    /**
     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
     */
    sfixed64(value) {
      let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.enc(value);
      view.setInt32(0, tc.lo, true);
      view.setInt32(4, tc.hi, true);
      return this.raw(chunk);
    }
    /**
     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
     */
    fixed64(value) {
      let chunk = new Uint8Array(8), view = new DataView(chunk.buffer), tc = protoInt64.uEnc(value);
      view.setInt32(0, tc.lo, true);
      view.setInt32(4, tc.hi, true);
      return this.raw(chunk);
    }
    /**
     * Write a `int64` value, a signed 64-bit varint.
     */
    int64(value) {
      let tc = protoInt64.enc(value);
      varint64write(tc.lo, tc.hi, this.buf);
      return this;
    }
    /**
     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64(value) {
      let tc = protoInt64.enc(value), sign = tc.hi >> 31, lo = tc.lo << 1 ^ sign, hi = (tc.hi << 1 | tc.lo >>> 31) ^ sign;
      varint64write(lo, hi, this.buf);
      return this;
    }
    /**
     * Write a `uint64` value, an unsigned 64-bit varint.
     */
    uint64(value) {
      let tc = protoInt64.uEnc(value);
      varint64write(tc.lo, tc.hi, this.buf);
      return this;
    }
  };
  var BinaryReader = class {
    constructor(buf, textDecoder) {
      this.varint64 = varint64read;
      this.uint32 = varint32read;
      this.buf = buf;
      this.len = buf.length;
      this.pos = 0;
      this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
      this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder();
    }
    /**
     * Reads a tag - field number and wire type.
     */
    tag() {
      let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;
      if (fieldNo <= 0 || wireType < 0 || wireType > 5)
        throw new Error("illegal tag: field no " + fieldNo + " wire type " + wireType);
      return [fieldNo, wireType];
    }
    /**
     * Skip one element on the wire and return the skipped data.
     * Supports WireType.StartGroup since v2.0.0-alpha.23.
     */
    skip(wireType) {
      let start2 = this.pos;
      switch (wireType) {
        case WireType.Varint:
          while (this.buf[this.pos++] & 128) {
          }
          break;
        case WireType.Bit64:
          this.pos += 4;
        case WireType.Bit32:
          this.pos += 4;
          break;
        case WireType.LengthDelimited:
          let len = this.uint32();
          this.pos += len;
          break;
        case WireType.StartGroup:
          let t2;
          while ((t2 = this.tag()[1]) !== WireType.EndGroup) {
            this.skip(t2);
          }
          break;
        default:
          throw new Error("cant skip wire type " + wireType);
      }
      this.assertBounds();
      return this.buf.subarray(start2, this.pos);
    }
    /**
     * Throws error if position in byte array is out of range.
     */
    assertBounds() {
      if (this.pos > this.len)
        throw new RangeError("premature EOF");
    }
    /**
     * Read a `int32` field, a signed 32 bit varint.
     */
    int32() {
      return this.uint32() | 0;
    }
    /**
     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
     */
    sint32() {
      let zze = this.uint32();
      return zze >>> 1 ^ -(zze & 1);
    }
    /**
     * Read a `int64` field, a signed 64-bit varint.
     */
    int64() {
      return protoInt64.dec(...this.varint64());
    }
    /**
     * Read a `uint64` field, an unsigned 64-bit varint.
     */
    uint64() {
      return protoInt64.uDec(...this.varint64());
    }
    /**
     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64() {
      let [lo, hi] = this.varint64();
      let s2 = -(lo & 1);
      lo = (lo >>> 1 | (hi & 1) << 31) ^ s2;
      hi = hi >>> 1 ^ s2;
      return protoInt64.dec(lo, hi);
    }
    /**
     * Read a `bool` field, a variant.
     */
    bool() {
      let [lo, hi] = this.varint64();
      return lo !== 0 || hi !== 0;
    }
    /**
     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
     */
    fixed32() {
      return this.view.getUint32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
     */
    sfixed32() {
      return this.view.getInt32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
     */
    fixed64() {
      return protoInt64.uDec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
     */
    sfixed64() {
      return protoInt64.dec(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `float` field, 32-bit floating point number.
     */
    float() {
      return this.view.getFloat32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `double` field, a 64-bit floating point number.
     */
    double() {
      return this.view.getFloat64((this.pos += 8) - 8, true);
    }
    /**
     * Read a `bytes` field, length-delimited arbitrary data.
     */
    bytes() {
      let len = this.uint32(), start2 = this.pos;
      this.pos += len;
      this.assertBounds();
      return this.buf.subarray(start2, start2 + len);
    }
    /**
     * Read a `string` field, length-delimited data converted to UTF-8 text.
     */
    string() {
      return this.textDecoder.decode(this.bytes());
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/field-wrapper.js
  function wrapField(type, value) {
    if (value instanceof Message || !type.fieldWrapper) {
      return value;
    }
    return type.fieldWrapper.wrapField(value);
  }
  var wktWrapperToScalarType = {
    "google.protobuf.DoubleValue": ScalarType.DOUBLE,
    "google.protobuf.FloatValue": ScalarType.FLOAT,
    "google.protobuf.Int64Value": ScalarType.INT64,
    "google.protobuf.UInt64Value": ScalarType.UINT64,
    "google.protobuf.Int32Value": ScalarType.INT32,
    "google.protobuf.UInt32Value": ScalarType.UINT32,
    "google.protobuf.BoolValue": ScalarType.BOOL,
    "google.protobuf.StringValue": ScalarType.STRING,
    "google.protobuf.BytesValue": ScalarType.BYTES
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/scalars.js
  function scalarEquals(type, a2, b3) {
    if (a2 === b3) {
      return true;
    }
    if (type == ScalarType.BYTES) {
      if (!(a2 instanceof Uint8Array) || !(b3 instanceof Uint8Array)) {
        return false;
      }
      if (a2.length !== b3.length) {
        return false;
      }
      for (let i2 = 0; i2 < a2.length; i2++) {
        if (a2[i2] !== b3[i2]) {
          return false;
        }
      }
      return true;
    }
    switch (type) {
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        return a2 == b3;
    }
    return false;
  }
  function scalarDefaultValue(type) {
    switch (type) {
      case ScalarType.BOOL:
        return false;
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        return protoInt64.zero;
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
        return 0;
      case ScalarType.BYTES:
        return new Uint8Array(0);
      case ScalarType.STRING:
        return "";
      default:
        return 0;
    }
  }
  function scalarTypeInfo(type, value) {
    const isUndefined = value === void 0;
    let wireType = WireType.Varint;
    let isIntrinsicDefault = value === 0;
    switch (type) {
      case ScalarType.STRING:
        isIntrinsicDefault = isUndefined || !value.length;
        wireType = WireType.LengthDelimited;
        break;
      case ScalarType.BOOL:
        isIntrinsicDefault = value === false;
        break;
      case ScalarType.DOUBLE:
        wireType = WireType.Bit64;
        break;
      case ScalarType.FLOAT:
        wireType = WireType.Bit32;
        break;
      case ScalarType.INT64:
        isIntrinsicDefault = isUndefined || value == 0;
        break;
      case ScalarType.UINT64:
        isIntrinsicDefault = isUndefined || value == 0;
        break;
      case ScalarType.FIXED64:
        isIntrinsicDefault = isUndefined || value == 0;
        wireType = WireType.Bit64;
        break;
      case ScalarType.BYTES:
        isIntrinsicDefault = isUndefined || !value.byteLength;
        wireType = WireType.LengthDelimited;
        break;
      case ScalarType.FIXED32:
        wireType = WireType.Bit32;
        break;
      case ScalarType.SFIXED32:
        wireType = WireType.Bit32;
        break;
      case ScalarType.SFIXED64:
        isIntrinsicDefault = isUndefined || value == 0;
        wireType = WireType.Bit64;
        break;
      case ScalarType.SINT64:
        isIntrinsicDefault = isUndefined || value == 0;
        break;
    }
    const method = ScalarType[type].toLowerCase();
    return [wireType, method, isUndefined || isIntrinsicDefault];
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-common.js
  var unknownFieldsSymbol = Symbol("@bufbuild/protobuf/unknown-fields");
  var readDefaults = {
    readUnknownFields: true,
    readerFactory: (bytes) => new BinaryReader(bytes)
  };
  var writeDefaults = {
    writeUnknownFields: true,
    writerFactory: () => new BinaryWriter()
  };
  function makeReadOptions(options) {
    return options ? Object.assign(Object.assign({}, readDefaults), options) : readDefaults;
  }
  function makeWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, writeDefaults), options) : writeDefaults;
  }
  function makeBinaryFormatCommon() {
    return {
      makeReadOptions,
      makeWriteOptions,
      listUnknownFields(message5) {
        var _a5;
        return (_a5 = message5[unknownFieldsSymbol]) !== null && _a5 !== void 0 ? _a5 : [];
      },
      discardUnknownFields(message5) {
        delete message5[unknownFieldsSymbol];
      },
      writeUnknownFields(message5, writer) {
        const m2 = message5;
        const c2 = m2[unknownFieldsSymbol];
        if (c2) {
          for (const f3 of c2) {
            writer.tag(f3.no, f3.wireType).raw(f3.data);
          }
        }
      },
      onUnknownField(message5, no, wireType, data) {
        const m2 = message5;
        if (!Array.isArray(m2[unknownFieldsSymbol])) {
          m2[unknownFieldsSymbol] = [];
        }
        m2[unknownFieldsSymbol].push({ no, wireType, data });
      },
      readMessage(message5, reader, length2, options) {
        const type = message5.getType();
        const end2 = length2 === void 0 ? reader.len : reader.pos + length2;
        while (reader.pos < end2) {
          const [fieldNo, wireType] = reader.tag(), field = type.fields.find(fieldNo);
          if (!field) {
            const data = reader.skip(wireType);
            if (options.readUnknownFields) {
              this.onUnknownField(message5, fieldNo, wireType, data);
            }
            continue;
          }
          let target = message5, repeated = field.repeated, localName = field.localName;
          if (field.oneof) {
            target = target[field.oneof.localName];
            if (target.case != localName) {
              delete target.value;
            }
            target.case = localName;
            localName = "value";
          }
          switch (field.kind) {
            case "scalar":
            case "enum":
              const scalarType = field.kind == "enum" ? ScalarType.INT32 : field.T;
              if (repeated) {
                let arr = target[localName];
                if (wireType == WireType.LengthDelimited && scalarType != ScalarType.STRING && scalarType != ScalarType.BYTES) {
                  let e2 = reader.uint32() + reader.pos;
                  while (reader.pos < e2) {
                    arr.push(readScalar(reader, scalarType));
                  }
                } else {
                  arr.push(readScalar(reader, scalarType));
                }
              } else {
                target[localName] = readScalar(reader, scalarType);
              }
              break;
            case "message":
              const messageType = field.T;
              if (repeated) {
                target[localName].push(readMessageField(reader, new messageType(), options));
              } else {
                if (target[localName] instanceof Message) {
                  readMessageField(reader, target[localName], options);
                } else {
                  target[localName] = readMessageField(reader, new messageType(), options);
                  if (messageType.fieldWrapper && !field.oneof && !field.repeated) {
                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                  }
                }
              }
              break;
            case "map":
              let [mapKey, mapVal] = readMapEntry(field, reader, options);
              target[localName][mapKey] = mapVal;
              break;
          }
        }
      }
    };
  }
  function readMessageField(reader, message5, options) {
    const format2 = message5.getType().runtime.bin;
    format2.readMessage(message5, reader, reader.uint32(), options);
    return message5;
  }
  function readMapEntry(field, reader, options) {
    const length2 = reader.uint32(), end2 = reader.pos + length2;
    let key, val;
    while (reader.pos < end2) {
      let [fieldNo] = reader.tag();
      switch (fieldNo) {
        case 1:
          key = readScalar(reader, field.K);
          break;
        case 2:
          switch (field.V.kind) {
            case "scalar":
              val = readScalar(reader, field.V.T);
              break;
            case "enum":
              val = reader.int32();
              break;
            case "message":
              val = readMessageField(reader, new field.V.T(), options);
              break;
          }
          break;
      }
    }
    if (key === void 0) {
      let keyRaw = scalarDefaultValue(field.K);
      key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;
    }
    if (typeof key != "string" && typeof key != "number") {
      key = key.toString();
    }
    if (val === void 0) {
      switch (field.V.kind) {
        case "scalar":
          val = scalarDefaultValue(field.V.T);
          break;
        case "enum":
          val = 0;
          break;
        case "message":
          val = new field.V.T();
          break;
      }
    }
    return [key, val];
  }
  function readScalar(reader, type) {
    switch (type) {
      case ScalarType.STRING:
        return reader.string();
      case ScalarType.BOOL:
        return reader.bool();
      case ScalarType.DOUBLE:
        return reader.double();
      case ScalarType.FLOAT:
        return reader.float();
      case ScalarType.INT32:
        return reader.int32();
      case ScalarType.INT64:
        return reader.int64();
      case ScalarType.UINT64:
        return reader.uint64();
      case ScalarType.FIXED64:
        return reader.fixed64();
      case ScalarType.BYTES:
        return reader.bytes();
      case ScalarType.FIXED32:
        return reader.fixed32();
      case ScalarType.SFIXED32:
        return reader.sfixed32();
      case ScalarType.SFIXED64:
        return reader.sfixed64();
      case ScalarType.SINT64:
        return reader.sint64();
      case ScalarType.UINT32:
        return reader.uint32();
      case ScalarType.SINT32:
        return reader.sint32();
    }
  }
  function writeMapEntry(writer, options, field, key, value) {
    writer.tag(field.no, WireType.LengthDelimited);
    writer.fork();
    let keyValue = key;
    switch (field.K) {
      case ScalarType.INT32:
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
        keyValue = Number.parseInt(key);
        break;
      case ScalarType.BOOL:
        assert(key == "true" || key == "false");
        keyValue = key == "true";
        break;
    }
    writeScalar(writer, field.K, 1, keyValue, true);
    switch (field.V.kind) {
      case "scalar":
        writeScalar(writer, field.V.T, 2, value, true);
        break;
      case "enum":
        writeScalar(writer, ScalarType.INT32, 2, value, true);
        break;
      case "message":
        writeMessageField(writer, options, field.V.T, 2, value);
        break;
    }
    writer.join();
  }
  function writeMessageField(writer, options, type, fieldNo, value) {
    if (value !== void 0) {
      const message5 = wrapField(type, value);
      writer.tag(fieldNo, WireType.LengthDelimited).bytes(message5.toBinary(options));
    }
  }
  function writeScalar(writer, type, fieldNo, value, emitIntrinsicDefault) {
    let [wireType, method, isIntrinsicDefault] = scalarTypeInfo(type, value);
    if (!isIntrinsicDefault || emitIntrinsicDefault) {
      writer.tag(fieldNo, wireType)[method](value);
    }
  }
  function writePacked(writer, type, fieldNo, value) {
    if (!value.length) {
      return;
    }
    writer.tag(fieldNo, WireType.LengthDelimited).fork();
    let [, method] = scalarTypeInfo(type);
    for (let i2 = 0; i2 < value.length; i2++) {
      writer[method](value[i2]);
    }
    writer.join();
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/binary-format-proto3.js
  function makeBinaryFormatProto3() {
    return Object.assign(Object.assign({}, makeBinaryFormatCommon()), { writeMessage(message5, writer, options) {
      const type = message5.getType();
      for (const field of type.fields.byNumber()) {
        let value, repeated = field.repeated, localName = field.localName;
        if (field.oneof) {
          const oneof = message5[field.oneof.localName];
          if (oneof.case !== localName) {
            continue;
          }
          value = oneof.value;
        } else {
          value = message5[localName];
        }
        switch (field.kind) {
          case "scalar":
          case "enum":
            let scalarType = field.kind == "enum" ? ScalarType.INT32 : field.T;
            if (repeated) {
              if (field.packed) {
                writePacked(writer, scalarType, field.no, value);
              } else {
                for (const item of value) {
                  writeScalar(writer, scalarType, field.no, item, true);
                }
              }
            } else {
              if (value !== void 0) {
                writeScalar(writer, scalarType, field.no, value, !!field.oneof || field.opt);
              }
            }
            break;
          case "message":
            if (repeated) {
              for (const item of value) {
                writeMessageField(writer, options, field.T, field.no, item);
              }
            } else {
              writeMessageField(writer, options, field.T, field.no, value);
            }
            break;
          case "map":
            for (const [key, val] of Object.entries(value)) {
              writeMapEntry(writer, options, field, key, val);
            }
            break;
        }
      }
      if (options.writeUnknownFields) {
        this.writeUnknownFields(message5, writer);
      }
      return writer;
    } });
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/proto-base64.js
  var encTable = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  var decTable = [];
  for (let i2 = 0; i2 < encTable.length; i2++)
    decTable[encTable[i2].charCodeAt(0)] = i2;
  decTable["-".charCodeAt(0)] = encTable.indexOf("+");
  decTable["_".charCodeAt(0)] = encTable.indexOf("/");
  var protoBase64 = {
    /**
     * Decodes a base64 string to a byte array.
     *
     * - ignores white-space, including line breaks and tabs
     * - allows inner padding (can decode concatenated base64 strings)
     * - does not require padding
     * - understands base64url encoding:
     *   "-" instead of "+",
     *   "_" instead of "/",
     *   no padding
     */
    dec(base64Str) {
      let es = base64Str.length * 3 / 4;
      if (base64Str[base64Str.length - 2] == "=")
        es -= 2;
      else if (base64Str[base64Str.length - 1] == "=")
        es -= 1;
      let bytes = new Uint8Array(es), bytePos = 0, groupPos = 0, b3, p2 = 0;
      for (let i2 = 0; i2 < base64Str.length; i2++) {
        b3 = decTable[base64Str.charCodeAt(i2)];
        if (b3 === void 0) {
          switch (base64Str[i2]) {
            case "=":
              groupPos = 0;
            case "\n":
            case "\r":
            case "	":
            case " ":
              continue;
            default:
              throw Error("invalid base64 string.");
          }
        }
        switch (groupPos) {
          case 0:
            p2 = b3;
            groupPos = 1;
            break;
          case 1:
            bytes[bytePos++] = p2 << 2 | (b3 & 48) >> 4;
            p2 = b3;
            groupPos = 2;
            break;
          case 2:
            bytes[bytePos++] = (p2 & 15) << 4 | (b3 & 60) >> 2;
            p2 = b3;
            groupPos = 3;
            break;
          case 3:
            bytes[bytePos++] = (p2 & 3) << 6 | b3;
            groupPos = 0;
            break;
        }
      }
      if (groupPos == 1)
        throw Error("invalid base64 string.");
      return bytes.subarray(0, bytePos);
    },
    /**
     * Encode a byte array to a base64 string.
     */
    enc(bytes) {
      let base64 = "", groupPos = 0, b3, p2 = 0;
      for (let i2 = 0; i2 < bytes.length; i2++) {
        b3 = bytes[i2];
        switch (groupPos) {
          case 0:
            base64 += encTable[b3 >> 2];
            p2 = (b3 & 3) << 4;
            groupPos = 1;
            break;
          case 1:
            base64 += encTable[p2 | b3 >> 4];
            p2 = (b3 & 15) << 2;
            groupPos = 2;
            break;
          case 2:
            base64 += encTable[p2 | b3 >> 6];
            base64 += encTable[b3 & 63];
            groupPos = 0;
            break;
        }
      }
      if (groupPos) {
        base64 += encTable[p2];
        base64 += "=";
        if (groupPos == 1)
          base64 += "=";
      }
      return base64;
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-common.js
  var jsonReadDefaults = {
    ignoreUnknownFields: false
  };
  var jsonWriteDefaults = {
    emitDefaultValues: false,
    enumAsInteger: false,
    useProtoFieldName: false,
    prettySpaces: 0
  };
  function makeReadOptions2(options) {
    return options ? Object.assign(Object.assign({}, jsonReadDefaults), options) : jsonReadDefaults;
  }
  function makeWriteOptions2(options) {
    return options ? Object.assign(Object.assign({}, jsonWriteDefaults), options) : jsonWriteDefaults;
  }
  function makeJsonFormatCommon(makeWriteField) {
    const writeField = makeWriteField(writeEnum, writeScalar2);
    return {
      makeReadOptions: makeReadOptions2,
      makeWriteOptions: makeWriteOptions2,
      readMessage(type, json2, options, message5) {
        if (json2 == null || Array.isArray(json2) || typeof json2 != "object") {
          throw new Error(`cannot decode message ${type.typeName} from JSON: ${this.debug(json2)}`);
        }
        message5 = message5 !== null && message5 !== void 0 ? message5 : new type();
        const oneofSeen = {};
        for (const [jsonKey, jsonValue] of Object.entries(json2)) {
          const field = type.fields.findJsonName(jsonKey);
          if (!field) {
            if (!options.ignoreUnknownFields) {
              throw new Error(`cannot decode message ${type.typeName} from JSON: key "${jsonKey}" is unknown`);
            }
            continue;
          }
          let localName = field.localName;
          let target = message5;
          if (field.oneof) {
            if (jsonValue === null && field.kind == "scalar") {
              continue;
            }
            const seen = oneofSeen[field.oneof.localName];
            if (seen) {
              throw new Error(`cannot decode message ${type.typeName} from JSON: multiple keys for oneof "${field.oneof.name}" present: "${seen}", "${jsonKey}"`);
            }
            oneofSeen[field.oneof.localName] = jsonKey;
            target = target[field.oneof.localName] = { case: localName };
            localName = "value";
          }
          if (field.repeated) {
            if (jsonValue === null) {
              continue;
            }
            if (!Array.isArray(jsonValue)) {
              throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
            }
            const targetArray = target[localName];
            for (const jsonItem of jsonValue) {
              if (jsonItem === null) {
                throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`);
              }
              let val;
              switch (field.kind) {
                case "message":
                  val = field.T.fromJson(jsonItem, options);
                  break;
                case "enum":
                  val = readEnum(field.T, jsonItem, options.ignoreUnknownFields);
                  if (val === void 0)
                    continue;
                  break;
                case "scalar":
                  try {
                    val = readScalar2(field.T, jsonItem);
                  } catch (e2) {
                    let m2 = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonItem)}`;
                    if (e2 instanceof Error && e2.message.length > 0) {
                      m2 += `: ${e2.message}`;
                    }
                    throw new Error(m2);
                  }
                  break;
              }
              targetArray.push(val);
            }
          } else if (field.kind == "map") {
            if (jsonValue === null) {
              continue;
            }
            if (Array.isArray(jsonValue) || typeof jsonValue != "object") {
              throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`);
            }
            const targetMap = target[localName];
            for (const [jsonMapKey, jsonMapValue] of Object.entries(jsonValue)) {
              if (jsonMapValue === null) {
                throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: map value null`);
              }
              let val;
              switch (field.V.kind) {
                case "message":
                  val = field.V.T.fromJson(jsonMapValue, options);
                  break;
                case "enum":
                  val = readEnum(field.V.T, jsonMapValue, options.ignoreUnknownFields);
                  if (val === void 0)
                    continue;
                  break;
                case "scalar":
                  try {
                    val = readScalar2(field.V.T, jsonMapValue);
                  } catch (e2) {
                    let m2 = `cannot decode map value for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                    if (e2 instanceof Error && e2.message.length > 0) {
                      m2 += `: ${e2.message}`;
                    }
                    throw new Error(m2);
                  }
                  break;
              }
              try {
                targetMap[readScalar2(field.K, field.K == ScalarType.BOOL ? jsonMapKey == "true" ? true : jsonMapKey == "false" ? false : jsonMapKey : jsonMapKey).toString()] = val;
              } catch (e2) {
                let m2 = `cannot decode map key for field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                if (e2 instanceof Error && e2.message.length > 0) {
                  m2 += `: ${e2.message}`;
                }
                throw new Error(m2);
              }
            }
          } else {
            switch (field.kind) {
              case "message":
                const messageType = field.T;
                if (jsonValue === null && messageType.typeName != "google.protobuf.Value") {
                  if (field.oneof) {
                    throw new Error(`cannot decode field ${type.typeName}.${field.name} from JSON: null is invalid for oneof field "${jsonKey}"`);
                  }
                  continue;
                }
                if (target[localName] instanceof Message) {
                  target[localName].fromJson(jsonValue, options);
                } else {
                  target[localName] = messageType.fromJson(jsonValue, options);
                  if (messageType.fieldWrapper && !field.oneof) {
                    target[localName] = messageType.fieldWrapper.unwrapField(target[localName]);
                  }
                }
                break;
              case "enum":
                const enumValue = readEnum(field.T, jsonValue, options.ignoreUnknownFields);
                if (enumValue !== void 0) {
                  target[localName] = enumValue;
                }
                break;
              case "scalar":
                try {
                  target[localName] = readScalar2(field.T, jsonValue);
                } catch (e2) {
                  let m2 = `cannot decode field ${type.typeName}.${field.name} from JSON: ${this.debug(jsonValue)}`;
                  if (e2 instanceof Error && e2.message.length > 0) {
                    m2 += `: ${e2.message}`;
                  }
                  throw new Error(m2);
                }
                break;
            }
          }
        }
        return message5;
      },
      writeMessage(message5, options) {
        const type = message5.getType();
        const json2 = {};
        let field;
        try {
          for (const member of type.fields.byMember()) {
            let jsonValue;
            if (member.kind == "oneof") {
              const oneof = message5[member.localName];
              if (oneof.value === void 0) {
                continue;
              }
              field = member.findField(oneof.case);
              if (!field) {
                throw "oneof case not found: " + oneof.case;
              }
              jsonValue = writeField(field, oneof.value, options);
            } else {
              field = member;
              jsonValue = writeField(field, message5[field.localName], options);
            }
            if (jsonValue !== void 0) {
              json2[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;
            }
          }
        } catch (e2) {
          const m2 = field ? `cannot encode field ${type.typeName}.${field.name} to JSON` : `cannot encode message ${type.typeName} to JSON`;
          const r = e2 instanceof Error ? e2.message : String(e2);
          throw new Error(m2 + (r.length > 0 ? `: ${r}` : ""));
        }
        return json2;
      },
      readScalar: readScalar2,
      writeScalar: writeScalar2,
      debug: debugJsonValue
    };
  }
  function debugJsonValue(json2) {
    if (json2 === null) {
      return "null";
    }
    switch (typeof json2) {
      case "object":
        return Array.isArray(json2) ? "array" : "object";
      case "string":
        return json2.length > 100 ? "string" : `"${json2.split('"').join('\\"')}"`;
      default:
        return String(json2);
    }
  }
  function readScalar2(type, json2) {
    switch (type) {
      case ScalarType.DOUBLE:
      case ScalarType.FLOAT:
        if (json2 === null)
          return 0;
        if (json2 === "NaN")
          return Number.NaN;
        if (json2 === "Infinity")
          return Number.POSITIVE_INFINITY;
        if (json2 === "-Infinity")
          return Number.NEGATIVE_INFINITY;
        if (json2 === "") {
          break;
        }
        if (typeof json2 == "string" && json2.trim().length !== json2.length) {
          break;
        }
        if (typeof json2 != "string" && typeof json2 != "number") {
          break;
        }
        const float = Number(json2);
        if (Number.isNaN(float)) {
          break;
        }
        if (!Number.isFinite(float)) {
          break;
        }
        if (type == ScalarType.FLOAT)
          assertFloat32(float);
        return float;
      case ScalarType.INT32:
      case ScalarType.FIXED32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
      case ScalarType.UINT32:
        if (json2 === null)
          return 0;
        let int32;
        if (typeof json2 == "number")
          int32 = json2;
        else if (typeof json2 == "string" && json2.length > 0) {
          if (json2.trim().length === json2.length)
            int32 = Number(json2);
        }
        if (int32 === void 0)
          break;
        if (type == ScalarType.UINT32)
          assertUInt32(int32);
        else
          assertInt32(int32);
        return int32;
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        if (json2 === null)
          return protoInt64.zero;
        if (typeof json2 != "number" && typeof json2 != "string")
          break;
        return protoInt64.parse(json2);
      case ScalarType.FIXED64:
      case ScalarType.UINT64:
        if (json2 === null)
          return protoInt64.zero;
        if (typeof json2 != "number" && typeof json2 != "string")
          break;
        return protoInt64.uParse(json2);
      case ScalarType.BOOL:
        if (json2 === null)
          return false;
        if (typeof json2 !== "boolean")
          break;
        return json2;
      case ScalarType.STRING:
        if (json2 === null)
          return "";
        if (typeof json2 !== "string") {
          break;
        }
        try {
          encodeURIComponent(json2);
        } catch (e2) {
          throw new Error("invalid UTF8");
        }
        return json2;
      case ScalarType.BYTES:
        if (json2 === null || json2 === "")
          return new Uint8Array(0);
        if (typeof json2 !== "string")
          break;
        return protoBase64.dec(json2);
    }
    throw new Error();
  }
  function readEnum(type, json2, ignoreUnknownFields) {
    if (json2 === null) {
      return 0;
    }
    switch (typeof json2) {
      case "number":
        if (Number.isInteger(json2)) {
          return json2;
        }
        break;
      case "string":
        const value = type.findName(json2);
        if (value || ignoreUnknownFields) {
          return value === null || value === void 0 ? void 0 : value.no;
        }
        break;
    }
    throw new Error(`cannot decode enum ${type.typeName} from JSON: ${debugJsonValue(json2)}`);
  }
  function writeEnum(type, value, emitIntrinsicDefault, enumAsInteger) {
    var _a5;
    if (value === void 0) {
      return value;
    }
    if (value === 0 && !emitIntrinsicDefault) {
      return void 0;
    }
    if (enumAsInteger) {
      return value;
    }
    if (type.typeName == "google.protobuf.NullValue") {
      return null;
    }
    const val = type.findNumber(value);
    return (_a5 = val === null || val === void 0 ? void 0 : val.name) !== null && _a5 !== void 0 ? _a5 : value;
  }
  function writeScalar2(type, value, emitIntrinsicDefault) {
    if (value === void 0) {
      return void 0;
    }
    switch (type) {
      case ScalarType.INT32:
      case ScalarType.SFIXED32:
      case ScalarType.SINT32:
      case ScalarType.FIXED32:
      case ScalarType.UINT32:
        assert(typeof value == "number");
        return value != 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.FLOAT:
      case ScalarType.DOUBLE:
        assert(typeof value == "number");
        if (Number.isNaN(value))
          return "NaN";
        if (value === Number.POSITIVE_INFINITY)
          return "Infinity";
        if (value === Number.NEGATIVE_INFINITY)
          return "-Infinity";
        return value !== 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.STRING:
        assert(typeof value == "string");
        return value.length > 0 || emitIntrinsicDefault ? value : void 0;
      case ScalarType.BOOL:
        assert(typeof value == "boolean");
        return value || emitIntrinsicDefault ? value : void 0;
      case ScalarType.UINT64:
      case ScalarType.FIXED64:
      case ScalarType.INT64:
      case ScalarType.SFIXED64:
      case ScalarType.SINT64:
        assert(typeof value == "bigint" || typeof value == "string" || typeof value == "number");
        return emitIntrinsicDefault || value != 0 ? value.toString(10) : void 0;
      case ScalarType.BYTES:
        assert(value instanceof Uint8Array);
        return emitIntrinsicDefault || value.byteLength > 0 ? protoBase64.enc(value) : void 0;
    }
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/json-format-proto3.js
  function makeJsonFormatProto3() {
    return makeJsonFormatCommon((writeEnum2, writeScalar3) => {
      return function writeField(field, value, options) {
        if (field.kind == "map") {
          const jsonObj = {};
          switch (field.V.kind) {
            case "scalar":
              for (const [entryKey, entryValue] of Object.entries(value)) {
                const val = writeScalar3(field.V.T, entryValue, true);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
            case "message":
              for (const [entryKey, entryValue] of Object.entries(value)) {
                jsonObj[entryKey.toString()] = entryValue.toJson(options);
              }
              break;
            case "enum":
              const enumType = field.V.T;
              for (const [entryKey, entryValue] of Object.entries(value)) {
                assert(entryValue === void 0 || typeof entryValue == "number");
                const val = writeEnum2(enumType, entryValue, true, options.enumAsInteger);
                assert(val !== void 0);
                jsonObj[entryKey.toString()] = val;
              }
              break;
          }
          return options.emitDefaultValues || Object.keys(jsonObj).length > 0 ? jsonObj : void 0;
        } else if (field.repeated) {
          const jsonArr = [];
          switch (field.kind) {
            case "scalar":
              for (let i2 = 0; i2 < value.length; i2++) {
                jsonArr.push(writeScalar3(field.T, value[i2], true));
              }
              break;
            case "enum":
              for (let i2 = 0; i2 < value.length; i2++) {
                jsonArr.push(writeEnum2(field.T, value[i2], true, options.enumAsInteger));
              }
              break;
            case "message":
              for (let i2 = 0; i2 < value.length; i2++) {
                jsonArr.push(wrapField(field.T, value[i2]).toJson(options));
              }
              break;
          }
          return options.emitDefaultValues || jsonArr.length > 0 ? jsonArr : void 0;
        } else {
          switch (field.kind) {
            case "scalar":
              return writeScalar3(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues);
            case "enum":
              return writeEnum2(field.T, value, !!field.oneof || field.opt || options.emitDefaultValues, options.enumAsInteger);
            case "message":
              return value !== void 0 ? wrapField(field.T, value).toJson(options) : void 0;
          }
        }
      };
    });
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/util-common.js
  function makeUtilCommon() {
    return {
      setEnumType,
      initPartial(source, target) {
        if (source === void 0) {
          return;
        }
        const type = target.getType();
        for (const member of type.fields.byMember()) {
          const localName = member.localName, t2 = target, s2 = source;
          if (s2[localName] === void 0) {
            continue;
          }
          switch (member.kind) {
            case "oneof":
              const sk = s2[localName].case;
              if (sk === void 0) {
                continue;
              }
              const sourceField = member.findField(sk);
              let val = s2[localName].value;
              if (sourceField && sourceField.kind == "message" && !(val instanceof sourceField.T)) {
                val = new sourceField.T(val);
              } else if (sourceField && sourceField.kind === "scalar" && sourceField.T === ScalarType.BYTES) {
                val = toU8Arr(val);
              }
              t2[localName] = { case: sk, value: val };
              break;
            case "scalar":
            case "enum":
              let copy2 = s2[localName];
              if (member.T === ScalarType.BYTES) {
                copy2 = member.repeated ? copy2.map(toU8Arr) : toU8Arr(copy2);
              }
              t2[localName] = copy2;
              break;
            case "map":
              switch (member.V.kind) {
                case "scalar":
                case "enum":
                  if (member.V.T === ScalarType.BYTES) {
                    for (const [k, v2] of Object.entries(s2[localName])) {
                      t2[localName][k] = toU8Arr(v2);
                    }
                  } else {
                    Object.assign(t2[localName], s2[localName]);
                  }
                  break;
                case "message":
                  const messageType = member.V.T;
                  for (const k of Object.keys(s2[localName])) {
                    let val2 = s2[localName][k];
                    if (!messageType.fieldWrapper) {
                      val2 = new messageType(val2);
                    }
                    t2[localName][k] = val2;
                  }
                  break;
              }
              break;
            case "message":
              const mt = member.T;
              if (member.repeated) {
                t2[localName] = s2[localName].map((val2) => val2 instanceof mt ? val2 : new mt(val2));
              } else if (s2[localName] !== void 0) {
                const val2 = s2[localName];
                if (mt.fieldWrapper) {
                  if (
                    // We can't use BytesValue.typeName as that will create a circular import
                    mt.typeName === "google.protobuf.BytesValue"
                  ) {
                    t2[localName] = toU8Arr(val2);
                  } else {
                    t2[localName] = val2;
                  }
                } else {
                  t2[localName] = val2 instanceof mt ? val2 : new mt(val2);
                }
              }
              break;
          }
        }
      },
      equals(type, a2, b3) {
        if (a2 === b3) {
          return true;
        }
        if (!a2 || !b3) {
          return false;
        }
        return type.fields.byMember().every((m2) => {
          const va = a2[m2.localName];
          const vb = b3[m2.localName];
          if (m2.repeated) {
            if (va.length !== vb.length) {
              return false;
            }
            switch (m2.kind) {
              case "message":
                return va.every((a3, i2) => m2.T.equals(a3, vb[i2]));
              case "scalar":
                return va.every((a3, i2) => scalarEquals(m2.T, a3, vb[i2]));
              case "enum":
                return va.every((a3, i2) => scalarEquals(ScalarType.INT32, a3, vb[i2]));
            }
            throw new Error(`repeated cannot contain ${m2.kind}`);
          }
          switch (m2.kind) {
            case "message":
              return m2.T.equals(va, vb);
            case "enum":
              return scalarEquals(ScalarType.INT32, va, vb);
            case "scalar":
              return scalarEquals(m2.T, va, vb);
            case "oneof":
              if (va.case !== vb.case) {
                return false;
              }
              const s2 = m2.findField(va.case);
              if (s2 === void 0) {
                return true;
              }
              switch (s2.kind) {
                case "message":
                  return s2.T.equals(va.value, vb.value);
                case "enum":
                  return scalarEquals(ScalarType.INT32, va.value, vb.value);
                case "scalar":
                  return scalarEquals(s2.T, va.value, vb.value);
              }
              throw new Error(`oneof cannot contain ${s2.kind}`);
            case "map":
              const keys2 = Object.keys(va).concat(Object.keys(vb));
              switch (m2.V.kind) {
                case "message":
                  const messageType = m2.V.T;
                  return keys2.every((k) => messageType.equals(va[k], vb[k]));
                case "enum":
                  return keys2.every((k) => scalarEquals(ScalarType.INT32, va[k], vb[k]));
                case "scalar":
                  const scalarType = m2.V.T;
                  return keys2.every((k) => scalarEquals(scalarType, va[k], vb[k]));
              }
              break;
          }
        });
      },
      clone(message5) {
        const type = message5.getType(), target = new type(), any2 = target;
        for (const member of type.fields.byMember()) {
          const source = message5[member.localName];
          let copy2;
          if (member.repeated) {
            copy2 = source.map(cloneSingularField);
          } else if (member.kind == "map") {
            copy2 = any2[member.localName];
            for (const [key, v2] of Object.entries(source)) {
              copy2[key] = cloneSingularField(v2);
            }
          } else if (member.kind == "oneof") {
            const f3 = member.findField(source.case);
            copy2 = f3 ? { case: source.case, value: cloneSingularField(source.value) } : { case: void 0 };
          } else {
            copy2 = cloneSingularField(source);
          }
          any2[member.localName] = copy2;
        }
        return target;
      }
    };
  }
  function cloneSingularField(value) {
    if (value === void 0) {
      return value;
    }
    if (value instanceof Message) {
      return value.clone();
    }
    if (value instanceof Uint8Array) {
      const c2 = new Uint8Array(value.byteLength);
      c2.set(value);
      return c2;
    }
    return value;
  }
  function toU8Arr(input4) {
    return input4 instanceof Uint8Array ? input4 : new Uint8Array(input4);
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/field-list.js
  var InternalFieldList = class {
    constructor(fields, normalizer) {
      this._fields = fields;
      this._normalizer = normalizer;
    }
    findJsonName(jsonName) {
      if (!this.jsonNames) {
        const t2 = {};
        for (const f3 of this.list()) {
          t2[f3.jsonName] = t2[f3.name] = f3;
        }
        this.jsonNames = t2;
      }
      return this.jsonNames[jsonName];
    }
    find(fieldNo) {
      if (!this.numbers) {
        const t2 = {};
        for (const f3 of this.list()) {
          t2[f3.no] = f3;
        }
        this.numbers = t2;
      }
      return this.numbers[fieldNo];
    }
    list() {
      if (!this.all) {
        this.all = this._normalizer(this._fields);
      }
      return this.all;
    }
    byNumber() {
      if (!this.numbersAsc) {
        this.numbersAsc = this.list().concat().sort((a2, b3) => a2.no - b3.no);
      }
      return this.numbersAsc;
    }
    byMember() {
      if (!this.members) {
        this.members = [];
        const a2 = this.members;
        let o2;
        for (const f3 of this.list()) {
          if (f3.oneof) {
            if (f3.oneof !== o2) {
              o2 = f3.oneof;
              a2.push(o2);
            }
          } else {
            a2.push(f3);
          }
        }
      }
      return this.members;
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/names.js
  function localFieldName(protoName, inOneof) {
    const name = protoCamelCase(protoName);
    if (inOneof) {
      return name;
    }
    return safeObjectProperty(safeMessageProperty(name));
  }
  function localOneofName(protoName) {
    return localFieldName(protoName, false);
  }
  var fieldJsonName = protoCamelCase;
  function protoCamelCase(snakeCase) {
    let capNext = false;
    const b3 = [];
    for (let i2 = 0; i2 < snakeCase.length; i2++) {
      let c2 = snakeCase.charAt(i2);
      switch (c2) {
        case "_":
          capNext = true;
          break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          b3.push(c2);
          capNext = false;
          break;
        default:
          if (capNext) {
            capNext = false;
            c2 = c2.toUpperCase();
          }
          b3.push(c2);
          break;
      }
    }
    return b3.join("");
  }
  var reservedObjectProperties = /* @__PURE__ */ new Set([
    // names reserved by JavaScript
    "constructor",
    "toString",
    "toJSON",
    "valueOf"
  ]);
  var reservedMessageProperties = /* @__PURE__ */ new Set([
    // names reserved by the runtime
    "getType",
    "clone",
    "equals",
    "fromBinary",
    "fromJson",
    "fromJsonString",
    "toBinary",
    "toJson",
    "toJsonString",
    // names reserved by the runtime for the future
    "toObject"
  ]);
  var fallback = (name) => `${name}$`;
  var safeMessageProperty = (name) => {
    if (reservedMessageProperties.has(name)) {
      return fallback(name);
    }
    return name;
  };
  var safeObjectProperty = (name) => {
    if (reservedObjectProperties.has(name)) {
      return fallback(name);
    }
    return name;
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/private/field.js
  var InternalOneofInfo = class {
    constructor(name) {
      this.kind = "oneof";
      this.repeated = false;
      this.packed = false;
      this.opt = false;
      this.default = void 0;
      this.fields = [];
      this.name = name;
      this.localName = localOneofName(name);
    }
    addField(field) {
      assert(field.oneof === this, `field ${field.name} not one of ${this.name}`);
      this.fields.push(field);
    }
    findField(localName) {
      if (!this._lookup) {
        this._lookup = /* @__PURE__ */ Object.create(null);
        for (let i2 = 0; i2 < this.fields.length; i2++) {
          this._lookup[this.fields[i2].localName] = this.fields[i2];
        }
      }
      return this._lookup[localName];
    }
  };

  // ../node_modules/@bufbuild/protobuf/dist/esm/proto3.js
  var proto3 = makeProtoRuntime("proto3", makeJsonFormatProto3(), makeBinaryFormatProto3(), Object.assign(Object.assign({}, makeUtilCommon()), {
    newFieldList(fields) {
      return new InternalFieldList(fields, normalizeFieldInfosProto3);
    },
    initFields(target) {
      for (const member of target.getType().fields.byMember()) {
        if (member.opt) {
          continue;
        }
        const name = member.localName, t2 = target;
        if (member.repeated) {
          t2[name] = [];
          continue;
        }
        switch (member.kind) {
          case "oneof":
            t2[name] = { case: void 0 };
            break;
          case "enum":
            t2[name] = 0;
            break;
          case "map":
            t2[name] = {};
            break;
          case "scalar":
            t2[name] = scalarDefaultValue(member.T);
            break;
          case "message":
            break;
        }
      }
    }
  }));
  function normalizeFieldInfosProto3(fieldInfos) {
    var _a5, _b, _c;
    const r = [];
    let o2;
    for (const field of typeof fieldInfos == "function" ? fieldInfos() : fieldInfos) {
      const f3 = field;
      f3.localName = localFieldName(field.name, field.oneof !== void 0);
      f3.jsonName = (_a5 = field.jsonName) !== null && _a5 !== void 0 ? _a5 : fieldJsonName(field.name);
      f3.repeated = (_b = field.repeated) !== null && _b !== void 0 ? _b : false;
      f3.packed = (_c = field.packed) !== null && _c !== void 0 ? _c : field.kind == "enum" || field.kind == "scalar" && field.T != ScalarType.BYTES && field.T != ScalarType.STRING;
      if (field.oneof !== void 0) {
        const ooname = typeof field.oneof == "string" ? field.oneof : field.oneof.name;
        if (!o2 || o2.name != ooname) {
          o2 = new InternalOneofInfo(ooname);
        }
        f3.oneof = o2;
        o2.addField(f3);
      }
      r.push(f3);
    }
    return r;
  }

  // ../node_modules/@bufbuild/protobuf/dist/esm/service-type.js
  var MethodKind;
  (function(MethodKind2) {
    MethodKind2[MethodKind2["Unary"] = 0] = "Unary";
    MethodKind2[MethodKind2["ServerStreaming"] = 1] = "ServerStreaming";
    MethodKind2[MethodKind2["ClientStreaming"] = 2] = "ClientStreaming";
    MethodKind2[MethodKind2["BiDiStreaming"] = 3] = "BiDiStreaming";
  })(MethodKind || (MethodKind = {}));
  var MethodIdempotency;
  (function(MethodIdempotency2) {
    MethodIdempotency2[MethodIdempotency2["NoSideEffects"] = 1] = "NoSideEffects";
    MethodIdempotency2[MethodIdempotency2["Idempotent"] = 2] = "Idempotent";
  })(MethodIdempotency || (MethodIdempotency = {}));

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/code.js
  var Code;
  (function(Code3) {
    Code3[Code3["Canceled"] = 1] = "Canceled";
    Code3[Code3["Unknown"] = 2] = "Unknown";
    Code3[Code3["InvalidArgument"] = 3] = "InvalidArgument";
    Code3[Code3["DeadlineExceeded"] = 4] = "DeadlineExceeded";
    Code3[Code3["NotFound"] = 5] = "NotFound";
    Code3[Code3["AlreadyExists"] = 6] = "AlreadyExists";
    Code3[Code3["PermissionDenied"] = 7] = "PermissionDenied";
    Code3[Code3["ResourceExhausted"] = 8] = "ResourceExhausted";
    Code3[Code3["FailedPrecondition"] = 9] = "FailedPrecondition";
    Code3[Code3["Aborted"] = 10] = "Aborted";
    Code3[Code3["OutOfRange"] = 11] = "OutOfRange";
    Code3[Code3["Unimplemented"] = 12] = "Unimplemented";
    Code3[Code3["Internal"] = 13] = "Internal";
    Code3[Code3["Unavailable"] = 14] = "Unavailable";
    Code3[Code3["DataLoss"] = 15] = "DataLoss";
    Code3[Code3["Unauthenticated"] = 16] = "Unauthenticated";
  })(Code || (Code = {}));

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/code-string.js
  function codeToString(value) {
    const name = Code[value];
    if (typeof name != "string") {
      return value.toString();
    }
    return name[0].toLowerCase() + name.substring(1).replace(/[A-Z]/g, (c2) => "_" + c2.toLowerCase());
  }
  var stringToCode;
  function codeFromString(value) {
    if (!stringToCode) {
      stringToCode = {};
      for (const value2 of Object.values(Code)) {
        if (typeof value2 == "string") {
          continue;
        }
        stringToCode[codeToString(value2)] = value2;
      }
    }
    return stringToCode[value];
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/connect-error.js
  var ConnectError = class extends Error {
    /**
     * Create a new ConnectError.
     * If no code is provided, code "unknown" is used.
     * Outgoing details are only relevant for the server side - a service may
     * raise an error with details, and it is up to the protocol implementation
     * to encode and send the details along with error.
     */
    constructor(message5, code2 = Code.Unknown, metadata, outgoingDetails, cause) {
      super(createMessage(message5, code2));
      this.name = "ConnectError";
      Object.setPrototypeOf(this, new.target.prototype);
      this.rawMessage = message5;
      this.code = code2;
      this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});
      this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];
      this.cause = cause;
    }
    /**
     * Convert any value - typically a caught error into a ConnectError,
     * following these rules:
     * - If the value is already a ConnectError, return it as is.
     * - If the value is an AbortError from the fetch API, return the message
     *   of the AbortError with code Canceled.
     * - For other Errors, return the error message with code Unknown by default.
     * - For other values, return the values String representation as a message,
     *   with the code Unknown by default.
     * The original value will be used for the "cause" property for the new
     * ConnectError.
     */
    static from(reason, code2 = Code.Unknown) {
      if (reason instanceof ConnectError) {
        return reason;
      }
      if (reason instanceof Error) {
        if (reason.name == "AbortError") {
          return new ConnectError(reason.message, Code.Canceled);
        }
        return new ConnectError(reason.message, code2, void 0, void 0, reason);
      }
      return new ConnectError(String(reason), code2, void 0, void 0, reason);
    }
    findDetails(typeOrRegistry) {
      const registry = "typeName" in typeOrRegistry ? {
        findMessage: (typeName) => typeName === typeOrRegistry.typeName ? typeOrRegistry : void 0
      } : typeOrRegistry;
      const details = [];
      for (const data of this.details) {
        if (data instanceof Message) {
          if (registry.findMessage(data.getType().typeName)) {
            details.push(data);
          }
          continue;
        }
        const type = registry.findMessage(data.type);
        if (type) {
          try {
            details.push(type.fromBinary(data.value));
          } catch (_2) {
          }
        }
      }
      return details;
    }
  };
  function createMessage(message5, code2) {
    return message5.length ? `[${codeToString(code2)}] ${message5}` : `[${codeToString(code2)}]`;
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/http-headers.js
  function appendHeaders(...headers) {
    const h3 = new Headers();
    for (const e2 of headers) {
      e2.forEach((value, key) => {
        h3.append(key, value);
      });
    }
    return h3;
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol/envelope.js
  function createEnvelopeReadableStream(stream) {
    let reader;
    let buffer2 = new Uint8Array(0);
    function append2(chunk) {
      const n3 = new Uint8Array(buffer2.length + chunk.length);
      n3.set(buffer2);
      n3.set(chunk, buffer2.length);
      buffer2 = n3;
    }
    return new ReadableStream({
      start() {
        reader = stream.getReader();
      },
      async pull(controller) {
        let header6 = void 0;
        for (; ; ) {
          if (header6 === void 0 && buffer2.byteLength >= 5) {
            let length2 = 0;
            for (let i2 = 1; i2 < 5; i2++) {
              length2 = (length2 << 8) + buffer2[i2];
            }
            header6 = { flags: buffer2[0], length: length2 };
          }
          if (header6 !== void 0 && buffer2.byteLength >= header6.length + 5) {
            break;
          }
          const result = await reader.read();
          if (result.done) {
            break;
          }
          append2(result.value);
        }
        if (header6 === void 0) {
          if (buffer2.byteLength == 0) {
            controller.close();
            return;
          }
          controller.error(new ConnectError("premature end of stream", Code.DataLoss));
          return;
        }
        const data = buffer2.subarray(5, 5 + header6.length);
        buffer2 = buffer2.subarray(5 + header6.length);
        controller.enqueue({
          flags: header6.flags,
          data
        });
      }
    });
  }
  function encodeEnvelope(flags, data) {
    const bytes = new Uint8Array(data.length + 5);
    bytes.set(data, 5);
    const v2 = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
    v2.setUint8(0, flags);
    v2.setUint32(1, data.length);
    return bytes;
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol/signals.js
  function createLinkedAbortController(...signals) {
    const controller = new AbortController();
    const sa = signals.filter((s2) => s2 !== void 0).concat(controller.signal);
    for (const signal of sa) {
      if (signal.aborted) {
        onAbort.apply(signal);
        break;
      }
      signal.addEventListener("abort", onAbort);
    }
    function onAbort() {
      if (!controller.signal.aborted) {
        controller.abort(getAbortSignalReason(this));
      }
      for (const signal of sa) {
        signal.removeEventListener("abort", onAbort);
      }
    }
    return controller;
  }
  function createDeadlineSignal(timeoutMs) {
    const controller = new AbortController();
    const listener = () => {
      controller.abort(new ConnectError("the operation timed out", Code.DeadlineExceeded));
    };
    let timeoutId;
    if (timeoutMs !== void 0) {
      if (timeoutMs <= 0)
        listener();
      else
        timeoutId = setTimeout(listener, timeoutMs);
    }
    return {
      signal: controller.signal,
      cleanup: () => clearTimeout(timeoutId)
    };
  }
  function getAbortSignalReason(signal) {
    if (!signal.aborted) {
      return void 0;
    }
    if (signal.reason !== void 0) {
      return signal.reason;
    }
    const e2 = new Error("This operation was aborted");
    e2.name = "AbortError";
    return e2;
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol/create-method-url.js
  function createMethodUrl(baseUrl, service, method) {
    const s2 = typeof service == "string" ? service : service.typeName;
    const m2 = typeof method == "string" ? method : method.name;
    return baseUrl.toString().replace(/\/?$/, `/${s2}/${m2}`);
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol/serialization.js
  function getJsonOptions(options) {
    var _a5;
    const o2 = Object.assign({}, options);
    (_a5 = o2.ignoreUnknownFields) !== null && _a5 !== void 0 ? _a5 : o2.ignoreUnknownFields = true;
    return o2;
  }
  function createClientMethodSerializers(method, useBinaryFormat, jsonOptions, binaryOptions) {
    const input4 = useBinaryFormat ? createBinarySerialization(method.I, binaryOptions) : createJsonSerialization(method.I, jsonOptions);
    const output = useBinaryFormat ? createBinarySerialization(method.O, binaryOptions) : createJsonSerialization(method.O, jsonOptions);
    return { parse: output.parse, serialize: input4.serialize };
  }
  function createBinarySerialization(messageType, options) {
    return {
      parse(data) {
        try {
          return messageType.fromBinary(data, options);
        } catch (e2) {
          const m2 = e2 instanceof Error ? e2.message : String(e2);
          throw new ConnectError(`parse binary: ${m2}`, Code.InvalidArgument);
        }
      },
      serialize(data) {
        try {
          return data.toBinary(options);
        } catch (e2) {
          const m2 = e2 instanceof Error ? e2.message : String(e2);
          throw new ConnectError(`serialize binary: ${m2}`, Code.Internal);
        }
      }
    };
  }
  function createJsonSerialization(messageType, options) {
    var _a5, _b;
    const textEncoder = (_a5 = options === null || options === void 0 ? void 0 : options.textEncoder) !== null && _a5 !== void 0 ? _a5 : new TextEncoder();
    const textDecoder = (_b = options === null || options === void 0 ? void 0 : options.textDecoder) !== null && _b !== void 0 ? _b : new TextDecoder();
    const o2 = getJsonOptions(options);
    return {
      parse(data) {
        try {
          const json2 = textDecoder.decode(data);
          return messageType.fromJsonString(json2, o2);
        } catch (e2) {
          throw ConnectError.from(e2, Code.InvalidArgument);
        }
      },
      serialize(data) {
        try {
          const json2 = data.toJsonString(o2);
          return textEncoder.encode(json2);
        } catch (e2) {
          throw ConnectError.from(e2, Code.Internal);
        }
      }
    };
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/content-type.js
  var contentTypeRegExp = /^application\/(connect\+)?(?:(json)(?:; ?charset=utf-?8)?|(proto))$/i;
  var contentTypeUnaryProto = "application/proto";
  var contentTypeUnaryJson = "application/json";
  var contentTypeStreamProto = "application/connect+proto";
  var contentTypeStreamJson = "application/connect+json";
  function parseContentType(contentType) {
    const match2 = contentType === null || contentType === void 0 ? void 0 : contentType.match(contentTypeRegExp);
    if (!match2) {
      return void 0;
    }
    const stream = !!match2[1];
    const binary = !!match2[3];
    return { stream, binary };
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/error-json.js
  function errorFromJson(jsonValue, metadata, fallback2) {
    if (metadata) {
      new Headers(metadata).forEach((value, key) => fallback2.metadata.append(key, value));
    }
    if (typeof jsonValue !== "object" || jsonValue == null || Array.isArray(jsonValue) || !("code" in jsonValue) || typeof jsonValue.code !== "string") {
      throw fallback2;
    }
    const code2 = codeFromString(jsonValue.code);
    if (code2 === void 0) {
      throw fallback2;
    }
    const message5 = jsonValue.message;
    if (message5 != null && typeof message5 !== "string") {
      throw fallback2;
    }
    const error = new ConnectError(message5 !== null && message5 !== void 0 ? message5 : "", code2, metadata);
    if ("details" in jsonValue && Array.isArray(jsonValue.details)) {
      for (const detail of jsonValue.details) {
        if (detail === null || typeof detail != "object" || Array.isArray(detail) || typeof detail.type != "string" || typeof detail.value != "string" || "debug" in detail && typeof detail.debug != "object") {
          throw fallback2;
        }
        try {
          error.details.push({
            type: detail.type,
            value: protoBase64.dec(detail.value),
            debug: detail.debug
          });
        } catch (e2) {
          throw fallback2;
        }
      }
    }
    return error;
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/end-stream.js
  var endStreamFlag = 2;
  function endStreamFromJson(data) {
    const parseErr = new ConnectError("invalid end stream", Code.InvalidArgument);
    let jsonValue;
    try {
      jsonValue = JSON.parse(typeof data == "string" ? data : new TextDecoder().decode(data));
    } catch (e2) {
      throw parseErr;
    }
    if (typeof jsonValue != "object" || jsonValue == null || Array.isArray(jsonValue)) {
      throw parseErr;
    }
    const metadata = new Headers();
    if ("metadata" in jsonValue) {
      if (typeof jsonValue.metadata != "object" || jsonValue.metadata == null || Array.isArray(jsonValue.metadata)) {
        throw parseErr;
      }
      for (const [key, values2] of Object.entries(jsonValue.metadata)) {
        if (!Array.isArray(values2) || values2.some((value) => typeof value != "string")) {
          throw parseErr;
        }
        for (const value of values2) {
          metadata.append(key, value);
        }
      }
    }
    const error = "error" in jsonValue ? errorFromJson(jsonValue.error, metadata, parseErr) : void 0;
    return { metadata, error };
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/headers.js
  var headerContentType = "Content-Type";
  var headerUnaryContentLength = "Content-Length";
  var headerUnaryEncoding = "Content-Encoding";
  var headerUnaryAcceptEncoding = "Accept-Encoding";
  var headerTimeout = "Connect-Timeout-Ms";
  var headerProtocolVersion = "Connect-Protocol-Version";

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/http-status.js
  function codeFromHttpStatus(httpStatus) {
    switch (httpStatus) {
      case 400:
        return Code.InvalidArgument;
      case 401:
        return Code.Unauthenticated;
      case 403:
        return Code.PermissionDenied;
      case 404:
        return Code.Unimplemented;
      case 408:
        return Code.DeadlineExceeded;
      case 409:
        return Code.Aborted;
      case 412:
        return Code.FailedPrecondition;
      case 413:
        return Code.ResourceExhausted;
      case 415:
        return Code.Internal;
      case 429:
        return Code.Unavailable;
      case 431:
        return Code.ResourceExhausted;
      case 502:
        return Code.Unavailable;
      case 503:
        return Code.Unavailable;
      case 504:
        return Code.Unavailable;
      default:
        return Code.Unknown;
    }
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/trailer-mux.js
  function trailerDemux(header6) {
    const h3 = new Headers(), t2 = new Headers();
    header6.forEach((value, key) => {
      if (key.toLowerCase().startsWith("trailer-")) {
        t2.set(key.substring(8), value);
      } else {
        h3.set(key, value);
      }
    });
    return [h3, t2];
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/version.js
  var protocolVersion = "1";

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/request-header.js
  function requestHeader(methodKind, useBinaryFormat, timeoutMs, userProvidedHeaders) {
    const result = new Headers(userProvidedHeaders !== null && userProvidedHeaders !== void 0 ? userProvidedHeaders : {});
    if (timeoutMs !== void 0) {
      result.set(headerTimeout, `${timeoutMs}`);
    }
    result.set(headerContentType, methodKind == MethodKind.Unary ? useBinaryFormat ? contentTypeUnaryProto : contentTypeUnaryJson : useBinaryFormat ? contentTypeStreamProto : contentTypeStreamJson);
    result.set(headerProtocolVersion, protocolVersion);
    return result;
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/validate-response.js
  function validateResponse(methodKind, status, headers) {
    const mimeType = headers.get("Content-Type");
    const parsedType = parseContentType(mimeType);
    if (status !== 200) {
      const errorFromStatus = new ConnectError(`HTTP ${status}`, codeFromHttpStatus(status), headers);
      if (methodKind == MethodKind.Unary && parsedType && !parsedType.binary) {
        return { isUnaryError: true, unaryError: errorFromStatus };
      }
      throw errorFromStatus;
    }
    return { isUnaryError: false };
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol-connect/get-request.js
  var contentTypePrefix = "application/";
  function encodeMessageForUrl(message5, useBase64) {
    if (useBase64) {
      return protoBase64.enc(message5).replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
    } else {
      return encodeURIComponent(new TextDecoder().decode(message5));
    }
  }
  function transformConnectPostToGetRequest(request, message5, useBase64) {
    let query = `?connect=v${protocolVersion}`;
    const contentType = request.header.get(headerContentType);
    if ((contentType === null || contentType === void 0 ? void 0 : contentType.indexOf(contentTypePrefix)) === 0) {
      query += "&encoding=" + encodeURIComponent(contentType.slice(contentTypePrefix.length));
    }
    const compression = request.header.get(headerUnaryEncoding);
    if (compression !== null && compression !== "identity") {
      query += "&compression=" + encodeURIComponent(compression);
      useBase64 = true;
    }
    if (useBase64) {
      query += "&base64=1";
    }
    query += "&message=" + encodeMessageForUrl(message5, useBase64);
    const url = request.url + query;
    const header6 = new Headers(request.header);
    header6.delete(headerProtocolVersion);
    header6.delete(headerContentType);
    header6.delete(headerUnaryContentLength);
    header6.delete(headerUnaryEncoding);
    header6.delete(headerUnaryAcceptEncoding);
    return Object.assign(Object.assign({}, request), {
      init: Object.assign(Object.assign({}, request.init), { method: "GET" }),
      url,
      header: header6
    });
  }

  // ../node_modules/@bufbuild/connect-web/node_modules/@bufbuild/connect/dist/esm/protocol/run-call.js
  function runUnaryCall(opt) {
    const next2 = applyInterceptors(opt.next, opt.interceptors);
    const [signal, abort, done] = setupSignal(opt);
    const req = Object.assign(Object.assign({}, opt.req), { message: normalize(opt.req.method.I, opt.req.message), signal });
    return next2(req).then((res) => {
      done();
      return res;
    }, abort);
  }
  function runStreamingCall(opt) {
    const next2 = applyInterceptors(opt.next, opt.interceptors);
    const [signal, abort, done] = setupSignal(opt);
    const req = Object.assign(Object.assign({}, opt.req), { message: normalizeIterable(opt.req.method.I, opt.req.message), signal });
    let doneCalled = false;
    signal.addEventListener("abort", function() {
      var _a5, _b;
      const it = opt.req.message[Symbol.asyncIterator]();
      if (!doneCalled) {
        (_a5 = it.throw) === null || _a5 === void 0 ? void 0 : _a5.call(it, this.reason).catch(() => {
        });
      }
      (_b = it.return) === null || _b === void 0 ? void 0 : _b.call(it).catch(() => {
      });
    });
    return next2(req).then((res) => {
      return Object.assign(Object.assign({}, res), { message: {
        [Symbol.asyncIterator]() {
          const it = res.message[Symbol.asyncIterator]();
          return {
            next() {
              return it.next().then((r) => {
                if (r.done == true) {
                  doneCalled = true;
                  done();
                }
                return r;
              }, abort);
            }
            // We deliberately omit throw/return.
          };
        }
      } });
    }, abort);
  }
  function setupSignal(opt) {
    const { signal, cleanup } = createDeadlineSignal(opt.timeoutMs);
    const controller = createLinkedAbortController(opt.signal, signal);
    return [
      controller.signal,
      function abort(reason) {
        const e2 = ConnectError.from(signal.aborted ? getAbortSignalReason(signal) : reason);
        controller.abort(e2);
        cleanup();
        return Promise.reject(e2);
      },
      function done() {
        cleanup();
        controller.abort();
      }
    ];
  }
  function applyInterceptors(next2, interceptors) {
    var _a5;
    return (_a5 = interceptors === null || interceptors === void 0 ? void 0 : interceptors.concat().reverse().reduce(
      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
      (n3, i2) => i2(n3),
      next2
    )) !== null && _a5 !== void 0 ? _a5 : next2;
  }
  function normalize(type, message5) {
    return message5 instanceof type ? message5 : new type(message5);
  }
  function normalizeIterable(messageType, input4) {
    function transform2(result) {
      if (result.done === true) {
        return result;
      }
      return {
        done: result.done,
        value: normalize(messageType, result.value)
      };
    }
    return {
      [Symbol.asyncIterator]() {
        const it = input4[Symbol.asyncIterator]();
        const res = {
          next: () => it.next().then(transform2)
        };
        if (it.throw !== void 0) {
          res.throw = (e2) => it.throw(e2).then(transform2);
        }
        if (it.return !== void 0) {
          res.return = (v2) => it.return(v2).then(transform2);
        }
        return res;
      }
    };
  }

  // ../node_modules/@bufbuild/connect-web/dist/esm/assert-fetch-api.js
  function assertFetchApi() {
    try {
      new Headers();
    } catch (_2) {
      throw new Error("connect-web requires the fetch API. Are you running on an old version of Node.js? Node.js is not supported in Connect for Web - please stay tuned for Connect for Node.");
    }
  }

  // ../node_modules/@bufbuild/connect-web/dist/esm/connect-transport.js
  var __await = function(v2) {
    return this instanceof __await ? (this.v = v2, this) : new __await(v2);
  };
  var __asyncGenerator = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g2 = generator.apply(thisArg, _arguments || []), i2, q = [];
    return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2;
    function verb(n3) {
      if (g2[n3])
        i2[n3] = function(v2) {
          return new Promise(function(a2, b3) {
            q.push([n3, v2, a2, b3]) > 1 || resume(n3, v2);
          });
        };
    }
    function resume(n3, v2) {
      try {
        step(g2[n3](v2));
      } catch (e2) {
        settle(q[0][3], e2);
      }
    }
    function step(r) {
      r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f3, v2) {
      if (f3(v2), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  };
  function createConnectTransport(options) {
    var _a5;
    assertFetchApi();
    const useBinaryFormat = (_a5 = options.useBinaryFormat) !== null && _a5 !== void 0 ? _a5 : false;
    return {
      async unary(service, method, signal, timeoutMs, header6, message5) {
        var _a6;
        const { serialize: serialize2, parse: parse3 } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
        return await runUnaryCall({
          interceptors: options.interceptors,
          signal,
          timeoutMs,
          req: {
            stream: false,
            service,
            method,
            url: createMethodUrl(options.baseUrl, service, method),
            init: {
              method: "POST",
              credentials: (_a6 = options.credentials) !== null && _a6 !== void 0 ? _a6 : "same-origin",
              redirect: "error",
              mode: "cors"
            },
            header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header6),
            message: message5
          },
          next: async (req) => {
            var _a7;
            const useGet = options.useHttpGet === true && method.idempotency === MethodIdempotency.NoSideEffects;
            let body4 = null;
            if (useGet) {
              req = transformConnectPostToGetRequest(req, serialize2(req.message), useBinaryFormat);
            } else {
              body4 = serialize2(req.message);
            }
            const fetch = (_a7 = options.fetch) !== null && _a7 !== void 0 ? _a7 : globalThis.fetch;
            const response = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: body4 }));
            const { isUnaryError, unaryError } = validateResponse(method.kind, response.status, response.headers);
            if (isUnaryError) {
              throw errorFromJson(await response.json(), appendHeaders(...trailerDemux(response.headers)), unaryError);
            }
            const [demuxedHeader, demuxedTrailer] = trailerDemux(response.headers);
            return {
              stream: false,
              service,
              method,
              header: demuxedHeader,
              message: useBinaryFormat ? parse3(new Uint8Array(await response.arrayBuffer())) : method.O.fromJson(await response.json(), getJsonOptions(options.jsonOptions)),
              trailer: demuxedTrailer
            };
          }
        });
      },
      async stream(service, method, signal, timeoutMs, header6, input4) {
        var _a6;
        const { serialize: serialize2, parse: parse3 } = createClientMethodSerializers(method, useBinaryFormat, options.jsonOptions, options.binaryOptions);
        function parseResponseBody(body4, trailerTarget) {
          return __asyncGenerator(this, arguments, function* parseResponseBody_1() {
            const reader = createEnvelopeReadableStream(body4).getReader();
            let endStreamReceived = false;
            for (; ; ) {
              const result = yield __await(reader.read());
              if (result.done) {
                break;
              }
              const { flags, data } = result.value;
              if ((flags & endStreamFlag) === endStreamFlag) {
                endStreamReceived = true;
                const endStream = endStreamFromJson(data);
                if (endStream.error) {
                  throw endStream.error;
                }
                endStream.metadata.forEach((value, key) => trailerTarget.set(key, value));
                continue;
              }
              yield yield __await(parse3(data));
            }
            if (!endStreamReceived) {
              throw "missing EndStreamResponse";
            }
          });
        }
        async function createRequestBody(input5) {
          if (method.kind != MethodKind.ServerStreaming) {
            throw "The fetch API does not support streaming request bodies";
          }
          const r = await input5[Symbol.asyncIterator]().next();
          if (r.done == true) {
            throw "missing request message";
          }
          return encodeEnvelope(0, serialize2(r.value));
        }
        return await runStreamingCall({
          interceptors: options.interceptors,
          timeoutMs,
          signal,
          req: {
            stream: true,
            service,
            method,
            url: createMethodUrl(options.baseUrl, service, method),
            init: {
              method: "POST",
              credentials: (_a6 = options.credentials) !== null && _a6 !== void 0 ? _a6 : "same-origin",
              redirect: "error",
              mode: "cors"
            },
            header: requestHeader(method.kind, useBinaryFormat, timeoutMs, header6),
            message: input4
          },
          next: async (req) => {
            var _a7;
            const fetch = (_a7 = options.fetch) !== null && _a7 !== void 0 ? _a7 : globalThis.fetch;
            const fRes = await fetch(req.url, Object.assign(Object.assign({}, req.init), { headers: req.header, signal: req.signal, body: await createRequestBody(req.message) }));
            validateResponse(method.kind, fRes.status, fRes.headers);
            if (fRes.body === null) {
              throw "missing response body";
            }
            const trailer = new Headers();
            const res = Object.assign(Object.assign({}, req), { header: fRes.headers, trailer, message: parseResponseBody(fRes.body, trailer) });
            return res;
          }
        });
      }
    };
  }

  // ../node_modules/@bufbuild/connect/dist/esm/code.js
  var Code2;
  (function(Code3) {
    Code3[Code3["Canceled"] = 1] = "Canceled";
    Code3[Code3["Unknown"] = 2] = "Unknown";
    Code3[Code3["InvalidArgument"] = 3] = "InvalidArgument";
    Code3[Code3["DeadlineExceeded"] = 4] = "DeadlineExceeded";
    Code3[Code3["NotFound"] = 5] = "NotFound";
    Code3[Code3["AlreadyExists"] = 6] = "AlreadyExists";
    Code3[Code3["PermissionDenied"] = 7] = "PermissionDenied";
    Code3[Code3["ResourceExhausted"] = 8] = "ResourceExhausted";
    Code3[Code3["FailedPrecondition"] = 9] = "FailedPrecondition";
    Code3[Code3["Aborted"] = 10] = "Aborted";
    Code3[Code3["OutOfRange"] = 11] = "OutOfRange";
    Code3[Code3["Unimplemented"] = 12] = "Unimplemented";
    Code3[Code3["Internal"] = 13] = "Internal";
    Code3[Code3["Unavailable"] = 14] = "Unavailable";
    Code3[Code3["DataLoss"] = 15] = "DataLoss";
    Code3[Code3["Unauthenticated"] = 16] = "Unauthenticated";
  })(Code2 || (Code2 = {}));

  // ../node_modules/@bufbuild/connect/dist/esm/protocol-connect/code-string.js
  function codeToString2(value) {
    const name = Code2[value];
    if (typeof name != "string") {
      return value.toString();
    }
    return name[0].toLowerCase() + name.substring(1).replace(/[A-Z]/g, (c2) => "_" + c2.toLowerCase());
  }

  // ../node_modules/@bufbuild/connect/dist/esm/connect-error.js
  var ConnectError2 = class extends Error {
    /**
     * Create a new ConnectError.
     * If no code is provided, code "unknown" is used.
     * Outgoing details are only relevant for the server side - a service may
     * raise an error with details, and it is up to the protocol implementation
     * to encode and send the details along with error.
     */
    constructor(message5, code2 = Code2.Unknown, metadata, outgoingDetails, cause) {
      super(createMessage2(message5, code2));
      this.name = "ConnectError";
      Object.setPrototypeOf(this, new.target.prototype);
      this.rawMessage = message5;
      this.code = code2;
      this.metadata = new Headers(metadata !== null && metadata !== void 0 ? metadata : {});
      this.details = outgoingDetails !== null && outgoingDetails !== void 0 ? outgoingDetails : [];
      this.cause = cause;
    }
    /**
     * Convert any value - typically a caught error into a ConnectError,
     * following these rules:
     * - If the value is already a ConnectError, return it as is.
     * - If the value is an AbortError from the fetch API, return the message
     *   of the AbortError with code Canceled.
     * - For other Errors, return the error message with code Unknown by default.
     * - For other values, return the values String representation as a message,
     *   with the code Unknown by default.
     */
    static from(reason, code2 = Code2.Unknown) {
      if (reason instanceof ConnectError2) {
        return reason;
      }
      if (reason instanceof Error) {
        if (reason.name == "AbortError") {
          return new ConnectError2(reason.message, Code2.Canceled);
        }
        return new ConnectError2(reason.message, code2);
      }
      return new ConnectError2(String(reason), code2);
    }
    findDetails(typeOrRegistry) {
      const registry = "typeName" in typeOrRegistry ? {
        findMessage: (typeName) => typeName === typeOrRegistry.typeName ? typeOrRegistry : void 0
      } : typeOrRegistry;
      const details = [];
      for (const data of this.details) {
        if (data instanceof Message) {
          if (registry.findMessage(data.getType().typeName)) {
            details.push(data);
          }
          continue;
        }
        const type = registry.findMessage(data.type);
        if (type) {
          try {
            details.push(type.fromBinary(data.value));
          } catch (_2) {
          }
        }
      }
      return details;
    }
  };
  function createMessage2(message5, code2) {
    return message5.length ? `[${codeToString2(code2)}] ${message5}` : `[${codeToString2(code2)}]`;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/any-client.js
  function makeAnyClient(service, createMethod) {
    const client = {};
    for (const [localName, methodInfo] of Object.entries(service.methods)) {
      const method = createMethod(Object.assign(Object.assign({}, methodInfo), {
        localName,
        service
      }));
      if (method != null) {
        client[localName] = method;
      }
    }
    return client;
  }

  // ../node_modules/@bufbuild/connect/dist/esm/protocol/async-iterable.js
  var __asyncValues = function(o2) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m2 = o2[Symbol.asyncIterator], i2;
    return m2 ? m2.call(o2) : (o2 = typeof __values === "function" ? __values(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2);
    function verb(n3) {
      i2[n3] = o2[n3] && function(v2) {
        return new Promise(function(resolve2, reject) {
          v2 = o2[n3](v2), settle(resolve2, reject, v2.done, v2.value);
        });
      };
    }
    function settle(resolve2, reject, d2, v2) {
      Promise.resolve(v2).then(function(v3) {
        resolve2({ value: v3, done: d2 });
      }, reject);
    }
  };
  var __await2 = function(v2) {
    return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
  };
  var __asyncGenerator2 = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g2 = generator.apply(thisArg, _arguments || []), i2, q = [];
    return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2;
    function verb(n3) {
      if (g2[n3])
        i2[n3] = function(v2) {
          return new Promise(function(a2, b3) {
            q.push([n3, v2, a2, b3]) > 1 || resume(n3, v2);
          });
        };
    }
    function resume(n3, v2) {
      try {
        step(g2[n3](v2));
      } catch (e2) {
        settle(q[0][3], e2);
      }
    }
    function step(r) {
      r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f3, v2) {
      if (f3(v2), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  };
  var __asyncDelegator = function(o2) {
    var i2, p2;
    return i2 = {}, verb("next"), verb("throw", function(e2) {
      throw e2;
    }), verb("return"), i2[Symbol.iterator] = function() {
      return this;
    }, i2;
    function verb(n3, f3) {
      i2[n3] = o2[n3] ? function(v2) {
        return (p2 = !p2) ? { value: __await2(o2[n3](v2)), done: false } : f3 ? f3(v2) : v2;
      } : f3;
    }
  };
  function createAsyncIterable(items) {
    return __asyncGenerator2(this, arguments, function* createAsyncIterable_1() {
      yield __await2(yield* __asyncDelegator(__asyncValues(items)));
    });
  }

  // ../node_modules/@bufbuild/connect/dist/esm/promise-client.js
  var __await3 = function(v2) {
    return this instanceof __await3 ? (this.v = v2, this) : new __await3(v2);
  };
  var __asyncValues2 = function(o2) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m2 = o2[Symbol.asyncIterator], i2;
    return m2 ? m2.call(o2) : (o2 = typeof __values === "function" ? __values(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2);
    function verb(n3) {
      i2[n3] = o2[n3] && function(v2) {
        return new Promise(function(resolve2, reject) {
          v2 = o2[n3](v2), settle(resolve2, reject, v2.done, v2.value);
        });
      };
    }
    function settle(resolve2, reject, d2, v2) {
      Promise.resolve(v2).then(function(v3) {
        resolve2({ value: v3, done: d2 });
      }, reject);
    }
  };
  var __asyncDelegator2 = function(o2) {
    var i2, p2;
    return i2 = {}, verb("next"), verb("throw", function(e2) {
      throw e2;
    }), verb("return"), i2[Symbol.iterator] = function() {
      return this;
    }, i2;
    function verb(n3, f3) {
      i2[n3] = o2[n3] ? function(v2) {
        return (p2 = !p2) ? { value: __await3(o2[n3](v2)), done: false } : f3 ? f3(v2) : v2;
      } : f3;
    }
  };
  var __asyncGenerator3 = function(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var g2 = generator.apply(thisArg, _arguments || []), i2, q = [];
    return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
      return this;
    }, i2;
    function verb(n3) {
      if (g2[n3])
        i2[n3] = function(v2) {
          return new Promise(function(a2, b3) {
            q.push([n3, v2, a2, b3]) > 1 || resume(n3, v2);
          });
        };
    }
    function resume(n3, v2) {
      try {
        step(g2[n3](v2));
      } catch (e2) {
        settle(q[0][3], e2);
      }
    }
    function step(r) {
      r.value instanceof __await3 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
      resume("next", value);
    }
    function reject(value) {
      resume("throw", value);
    }
    function settle(f3, v2) {
      if (f3(v2), q.shift(), q.length)
        resume(q[0][0], q[0][1]);
    }
  };
  function createPromiseClient(service, transport2) {
    return makeAnyClient(service, (method) => {
      switch (method.kind) {
        case MethodKind.Unary:
          return createUnaryFn(transport2, service, method);
        case MethodKind.ServerStreaming:
          return createServerStreamingFn(transport2, service, method);
        case MethodKind.ClientStreaming:
          return createClientStreamingFn(transport2, service, method);
        case MethodKind.BiDiStreaming:
          return createBiDiStreamingFn(transport2, service, method);
        default:
          return null;
      }
    });
  }
  function createUnaryFn(transport2, service, method) {
    return async function(input4, options) {
      var _a5, _b;
      const response = await transport2.unary(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input4);
      (_a5 = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a5 === void 0 ? void 0 : _a5.call(options, response.header);
      (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
      return response.message;
    };
  }
  function createServerStreamingFn(transport2, service, method) {
    return function(input4, options) {
      var _a5, _b;
      return __asyncGenerator3(this, arguments, function* () {
        const inputMessage = input4 instanceof method.I ? input4 : new method.I(input4);
        const response = yield __await3(transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, createAsyncIterable([inputMessage])));
        (_a5 = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a5 === void 0 ? void 0 : _a5.call(options, response.header);
        yield __await3(yield* __asyncDelegator2(__asyncValues2(response.message)));
        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
      });
    };
  }
  function createClientStreamingFn(transport2, service, method) {
    return async function(request, options) {
      var _a5, e_1, _b, _c;
      var _d, _e;
      function input4() {
        return __asyncGenerator3(this, arguments, function* input_1() {
          var _a6, e_2, _b2, _c2;
          try {
            for (var _d2 = true, request_1 = __asyncValues2(request), request_1_1; request_1_1 = yield __await3(request_1.next()), _a6 = request_1_1.done, !_a6; ) {
              _c2 = request_1_1.value;
              _d2 = false;
              try {
                const partial = _c2;
                yield yield __await3(partial instanceof method.I ? partial : new method.I(partial));
              } finally {
                _d2 = true;
              }
            }
          } catch (e_2_1) {
            e_2 = { error: e_2_1 };
          } finally {
            try {
              if (!_d2 && !_a6 && (_b2 = request_1.return))
                yield __await3(_b2.call(request_1));
            } finally {
              if (e_2)
                throw e_2.error;
            }
          }
        });
      }
      const response = await transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input4());
      (_d = options === null || options === void 0 ? void 0 : options.onHeader) === null || _d === void 0 ? void 0 : _d.call(options, response.header);
      let singleMessage;
      try {
        for (var _f = true, _g = __asyncValues2(response.message), _h; _h = await _g.next(), _a5 = _h.done, !_a5; ) {
          _c = _h.value;
          _f = false;
          try {
            const message5 = _c;
            singleMessage = message5;
          } finally {
            _f = true;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (!_f && !_a5 && (_b = _g.return))
            await _b.call(_g);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      if (!singleMessage) {
        throw new ConnectError2("protocol error: missing response message", Code2.Internal);
      }
      (_e = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _e === void 0 ? void 0 : _e.call(options, response.trailer);
      return singleMessage;
    };
  }
  function createBiDiStreamingFn(transport2, service, method) {
    return function(request, options) {
      var _a5, _b;
      return __asyncGenerator3(this, arguments, function* () {
        function input4() {
          return __asyncGenerator3(this, arguments, function* input_2() {
            var _a6, e_3, _b2, _c;
            try {
              for (var _d = true, request_2 = __asyncValues2(request), request_2_1; request_2_1 = yield __await3(request_2.next()), _a6 = request_2_1.done, !_a6; ) {
                _c = request_2_1.value;
                _d = false;
                try {
                  const partial = _c;
                  yield yield __await3(partial instanceof method.I ? partial : new method.I(partial));
                } finally {
                  _d = true;
                }
              }
            } catch (e_3_1) {
              e_3 = { error: e_3_1 };
            } finally {
              try {
                if (!_d && !_a6 && (_b2 = request_2.return))
                  yield __await3(_b2.call(request_2));
              } finally {
                if (e_3)
                  throw e_3.error;
              }
            }
          });
        }
        const response = yield __await3(transport2.stream(service, method, options === null || options === void 0 ? void 0 : options.signal, options === null || options === void 0 ? void 0 : options.timeoutMs, options === null || options === void 0 ? void 0 : options.headers, input4()));
        (_a5 = options === null || options === void 0 ? void 0 : options.onHeader) === null || _a5 === void 0 ? void 0 : _a5.call(options, response.header);
        yield __await3(yield* __asyncDelegator2(__asyncValues2(response.message)));
        (_b = options === null || options === void 0 ? void 0 : options.onTrailer) === null || _b === void 0 ? void 0 : _b.call(options, response.trailer);
      });
    };
  }

  // src/rpc/api_pb.ts
  var ContentType = /* @__PURE__ */ ((ContentType2) => {
    ContentType2[ContentType2["TEXT"] = 0] = "TEXT";
    ContentType2[ContentType2["AUDIO"] = 1] = "AUDIO";
    ContentType2[ContentType2["URL"] = 2] = "URL";
    return ContentType2;
  })(ContentType || {});
  proto3.util.setEnumType(ContentType, "lunabrain.ContentType", [
    { no: 0, name: "TEXT" },
    { no: 1, name: "AUDIO" },
    { no: 2, name: "URL" }
  ]);
  var NormalizerID = /* @__PURE__ */ ((NormalizerID2) => {
    NormalizerID2[NormalizerID2["URL_YOUTUBE_TRANSCRIPT"] = 0] = "URL_YOUTUBE_TRANSCRIPT";
    NormalizerID2[NormalizerID2["URL_ARTICLE"] = 1] = "URL_ARTICLE";
    NormalizerID2[NormalizerID2["URL_HTML"] = 2] = "URL_HTML";
    NormalizerID2[NormalizerID2["URL_CLEAN"] = 3] = "URL_CLEAN";
    NormalizerID2[NormalizerID2["TEXT_CLEAN"] = 4] = "TEXT_CLEAN";
    NormalizerID2[NormalizerID2["AUDIO_TRANSCRIPT"] = 5] = "AUDIO_TRANSCRIPT";
    NormalizerID2[NormalizerID2["GITHUB_README"] = 7] = "GITHUB_README";
    return NormalizerID2;
  })(NormalizerID || {});
  proto3.util.setEnumType(NormalizerID, "lunabrain.NormalizerID", [
    { no: 0, name: "URL_YOUTUBE_TRANSCRIPT" },
    { no: 1, name: "URL_ARTICLE" },
    { no: 2, name: "URL_HTML" },
    { no: 3, name: "URL_CLEAN" },
    { no: 4, name: "TEXT_CLEAN" },
    { no: 5, name: "AUDIO_TRANSCRIPT" },
    { no: 7, name: "GITHUB_README" }
  ]);
  var TransformerID = /* @__PURE__ */ ((TransformerID2) => {
    TransformerID2[TransformerID2["SUMMARY"] = 0] = "SUMMARY";
    TransformerID2[TransformerID2["CATEGORIES"] = 1] = "CATEGORIES";
    return TransformerID2;
  })(TransformerID || {});
  proto3.util.setEnumType(TransformerID, "lunabrain.TransformerID", [
    { no: 0, name: "SUMMARY" },
    { no: 1, name: "CATEGORIES" }
  ]);
  var EntityType = /* @__PURE__ */ ((EntityType2) => {
    EntityType2[EntityType2["URL_ENTITY"] = 0] = "URL_ENTITY";
    return EntityType2;
  })(EntityType || {});
  proto3.util.setEnumType(EntityType, "lunabrain.EntityType", [
    { no: 0, name: "URL_ENTITY" }
  ]);
  var _ReadMessagesRequest = class extends Message {
    /**
     * @generated from field: string channelID = 1;
     */
    channelID = "";
    /**
     * @generated from field: string lastMessageID = 2;
     */
    lastMessageID = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _ReadMessagesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ReadMessagesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ReadMessagesRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ReadMessagesRequest, a2, b3);
    }
  };
  var ReadMessagesRequest = _ReadMessagesRequest;
  __publicField(ReadMessagesRequest, "runtime", proto3);
  __publicField(ReadMessagesRequest, "typeName", "lunabrain.ReadMessagesRequest");
  __publicField(ReadMessagesRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "channelID",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "lastMessageID",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _ReadMessagesResponse = class extends Message {
    /**
     * @generated from field: string messageID = 1;
     */
    messageID = "";
    /**
     * @generated from field: string content = 2;
     */
    content = "";
    /**
     * @generated from field: string authorID = 3;
     */
    authorID = "";
    /**
     * @generated from field: string authorUsername = 4;
     */
    authorUsername = "";
    /**
     * @generated from field: string authorAvatar = 5;
     */
    authorAvatar = "";
    /**
     * @generated from field: string createdAt = 6;
     */
    createdAt = "";
    /**
     * @generated from field: string channelID = 7;
     */
    channelID = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _ReadMessagesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ReadMessagesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ReadMessagesResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ReadMessagesResponse, a2, b3);
    }
  };
  var ReadMessagesResponse = _ReadMessagesResponse;
  __publicField(ReadMessagesResponse, "runtime", proto3);
  __publicField(ReadMessagesResponse, "typeName", "lunabrain.ReadMessagesResponse");
  __publicField(ReadMessagesResponse, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "messageID",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "content",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "authorID",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 4,
      name: "authorUsername",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 5,
      name: "authorAvatar",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 6,
      name: "createdAt",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 7,
      name: "channelID",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _WriteMessageRequest = class extends Message {
    /**
     * @generated from field: string channelID = 1;
     */
    channelID = "";
    /**
     * @generated from field: string content = 2;
     */
    content = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _WriteMessageRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _WriteMessageRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _WriteMessageRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_WriteMessageRequest, a2, b3);
    }
  };
  var WriteMessageRequest = _WriteMessageRequest;
  __publicField(WriteMessageRequest, "runtime", proto3);
  __publicField(WriteMessageRequest, "typeName", "lunabrain.WriteMessageRequest");
  __publicField(WriteMessageRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "channelID",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "content",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _WriteMessageResponse = class extends Message {
    /**
     * @generated from field: string messageID = 1;
     */
    messageID = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _WriteMessageResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _WriteMessageResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _WriteMessageResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_WriteMessageResponse, a2, b3);
    }
  };
  var WriteMessageResponse = _WriteMessageResponse;
  __publicField(WriteMessageResponse, "runtime", proto3);
  __publicField(WriteMessageResponse, "typeName", "lunabrain.WriteMessageResponse");
  __publicField(WriteMessageResponse, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "messageID",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Contents = class extends Message {
    /**
     * @generated from field: repeated lunabrain.Content contents = 1;
     */
    contents = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Contents().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Contents().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Contents().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Contents, a2, b3);
    }
  };
  var Contents = _Contents;
  __publicField(Contents, "runtime", proto3);
  __publicField(Contents, "typeName", "lunabrain.Contents");
  __publicField(Contents, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "contents", kind: "message", T: Content, repeated: true }
  ]));
  var _Query = class extends Message {
    /**
     * @generated from field: string query = 1;
     */
    query = "";
    /**
     * @generated from field: uint32 page = 2;
     */
    page = 0;
    /**
     * @generated from field: string contentID = 3;
     */
    contentID = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Query().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Query().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Query().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Query, a2, b3);
    }
  };
  var Query = _Query;
  __publicField(Query, "runtime", proto3);
  __publicField(Query, "typeName", "lunabrain.Query");
  __publicField(Query, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "query",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "page",
      kind: "scalar",
      T: 13
      /* ScalarType.UINT32 */
    },
    {
      no: 3,
      name: "contentID",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Results = class extends Message {
    /**
     * @generated from field: repeated lunabrain.StoredContent storedContent = 1;
     */
    storedContent = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Results().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Results().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Results().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Results, a2, b3);
    }
  };
  var Results = _Results;
  __publicField(Results, "runtime", proto3);
  __publicField(Results, "typeName", "lunabrain.Results");
  __publicField(Results, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "storedContent", kind: "message", T: StoredContent, repeated: true }
  ]));
  var _StoredContent = class extends Message {
    /**
     * @generated from field: lunabrain.Content content = 1;
     */
    content;
    /**
     * @generated from field: repeated lunabrain.NormalizedContent normalized = 2;
     */
    normalized = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _StoredContent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _StoredContent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _StoredContent().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_StoredContent, a2, b3);
    }
  };
  var StoredContent = _StoredContent;
  __publicField(StoredContent, "runtime", proto3);
  __publicField(StoredContent, "typeName", "lunabrain.StoredContent");
  __publicField(StoredContent, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: Content },
    { no: 2, name: "normalized", kind: "message", T: NormalizedContent, repeated: true }
  ]));
  var _Content = class extends Message {
    /**
     * @generated from field: bytes data = 1;
     */
    data = new Uint8Array(0);
    /**
     * @generated from field: lunabrain.ContentType type = 2;
     */
    type = 0 /* TEXT */;
    /**
     * @generated from oneof lunabrain.Content.options
     */
    options = { case: void 0 };
    /**
     * @generated from field: map<string, string> metadata = 6;
     */
    metadata = {};
    /**
     * @generated from field: string createdAt = 7;
     */
    createdAt = "";
    /**
     * @generated from field: string id = 8;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Content().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Content().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Content().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Content, a2, b3);
    }
  };
  var Content = _Content;
  __publicField(Content, "runtime", proto3);
  __publicField(Content, "typeName", "lunabrain.Content");
  __publicField(Content, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "data",
      kind: "scalar",
      T: 12
      /* ScalarType.BYTES */
    },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ContentType) },
    { no: 3, name: "textOptions", kind: "message", T: TextOptions, oneof: "options" },
    { no: 4, name: "fileOptions", kind: "message", T: FileOptions, oneof: "options" },
    { no: 5, name: "urlOptions", kind: "message", T: URLOptions, oneof: "options" },
    { no: 6, name: "metadata", kind: "map", K: 9, V: {
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    } },
    {
      no: 7,
      name: "createdAt",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 8,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _NormalizedContent = class extends Message {
    /**
     * @generated from field: string data = 1;
     */
    data = "";
    /**
     * @generated from field: lunabrain.NormalizerID normalizerID = 2;
     */
    normalizerID = 0 /* URL_YOUTUBE_TRANSCRIPT */;
    /**
     * @generated from field: string contentID = 3;
     */
    contentID = "";
    /**
     * @generated from field: repeated lunabrain.TransformedContent transformed = 4;
     */
    transformed = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _NormalizedContent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _NormalizedContent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _NormalizedContent().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_NormalizedContent, a2, b3);
    }
  };
  var NormalizedContent = _NormalizedContent;
  __publicField(NormalizedContent, "runtime", proto3);
  __publicField(NormalizedContent, "typeName", "lunabrain.NormalizedContent");
  __publicField(NormalizedContent, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "data",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 2, name: "normalizerID", kind: "enum", T: proto3.getEnumType(NormalizerID) },
    {
      no: 3,
      name: "contentID",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 4, name: "transformed", kind: "message", T: TransformedContent, repeated: true }
  ]));
  var _TransformedContent = class extends Message {
    /**
     * @generated from field: string data = 1;
     */
    data = "";
    /**
     * @generated from field: lunabrain.TransformerID transformerID = 2;
     */
    transformerID = 0 /* SUMMARY */;
    /**
     * @generated from field: string normalizedContentID = 3;
     */
    normalizedContentID = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _TransformedContent().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _TransformedContent().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _TransformedContent().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_TransformedContent, a2, b3);
    }
  };
  var TransformedContent = _TransformedContent;
  __publicField(TransformedContent, "runtime", proto3);
  __publicField(TransformedContent, "typeName", "lunabrain.TransformedContent");
  __publicField(TransformedContent, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "data",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 2, name: "transformerID", kind: "enum", T: proto3.getEnumType(TransformerID) },
    {
      no: 3,
      name: "normalizedContentID",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _File = class extends Message {
    /**
     * @generated from field: bytes data = 1;
     */
    data = new Uint8Array(0);
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _File().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _File().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _File().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_File, a2, b3);
    }
  };
  var File = _File;
  __publicField(File, "runtime", proto3);
  __publicField(File, "typeName", "lunabrain.File");
  __publicField(File, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "data",
      kind: "scalar",
      T: 12
      /* ScalarType.BYTES */
    }
  ]));
  var _ContentIDs = class extends Message {
    /**
     * @generated from field: repeated lunabrain.ContentID contentIDs = 1;
     */
    contentIDs = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _ContentIDs().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ContentIDs().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ContentIDs().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ContentIDs, a2, b3);
    }
  };
  var ContentIDs = _ContentIDs;
  __publicField(ContentIDs, "runtime", proto3);
  __publicField(ContentIDs, "typeName", "lunabrain.ContentIDs");
  __publicField(ContentIDs, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "contentIDs", kind: "message", T: ContentID, repeated: true }
  ]));
  var _ContentID = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _ContentID().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ContentID().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ContentID().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ContentID, a2, b3);
    }
  };
  var ContentID = _ContentID;
  __publicField(ContentID, "runtime", proto3);
  __publicField(ContentID, "typeName", "lunabrain.ContentID");
  __publicField(ContentID, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _TextOptions = class extends Message {
    /**
     * @generated from field: string data = 1;
     */
    data = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _TextOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _TextOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _TextOptions().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_TextOptions, a2, b3);
    }
  };
  var TextOptions = _TextOptions;
  __publicField(TextOptions, "runtime", proto3);
  __publicField(TextOptions, "typeName", "lunabrain.TextOptions");
  __publicField(TextOptions, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "data",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _FileOptions = class extends Message {
    /**
     * @generated from field: string file = 1;
     */
    file = "";
    /**
     * @generated from field: bytes data = 2;
     */
    data = new Uint8Array(0);
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _FileOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _FileOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _FileOptions().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_FileOptions, a2, b3);
    }
  };
  var FileOptions = _FileOptions;
  __publicField(FileOptions, "runtime", proto3);
  __publicField(FileOptions, "typeName", "lunabrain.FileOptions");
  __publicField(FileOptions, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "file",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "data",
      kind: "scalar",
      T: 12
      /* ScalarType.BYTES */
    }
  ]));
  var _URLOptions = class extends Message {
    /**
     * @generated from field: string url = 1;
     */
    url = "";
    /**
     * @generated from field: bool crawl = 2;
     */
    crawl = false;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _URLOptions().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _URLOptions().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _URLOptions().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_URLOptions, a2, b3);
    }
  };
  var URLOptions = _URLOptions;
  __publicField(URLOptions, "runtime", proto3);
  __publicField(URLOptions, "typeName", "lunabrain.URLOptions");
  __publicField(URLOptions, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "url",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "crawl",
      kind: "scalar",
      T: 8
      /* ScalarType.BOOL */
    }
  ]));

  // src/rpc/protoflow_pb.ts
  var _AnalyzeConversationRequest = class extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _AnalyzeConversationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _AnalyzeConversationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _AnalyzeConversationRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_AnalyzeConversationRequest, a2, b3);
    }
  };
  var AnalyzeConversationRequest = _AnalyzeConversationRequest;
  __publicField(AnalyzeConversationRequest, "runtime", proto3);
  __publicField(AnalyzeConversationRequest, "typeName", "protoflow.AnalyzeConversationRequest");
  __publicField(AnalyzeConversationRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "text",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _AnalyzeConversationResponse = class extends Message {
    /**
     * Phone numbers of the participants
     *
     * @generated from field: repeated string phone_numbers = 1;
     */
    phoneNumbers = [];
    /**
     * The summary of the conversation
     *
     * @generated from field: string summary = 2;
     */
    summary = "";
    /**
     * Based on the content of the conversation, the system will generate a list of questions
     *
     * @generated from field: repeated string questions = 3;
     */
    questions = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _AnalyzeConversationResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _AnalyzeConversationResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _AnalyzeConversationResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_AnalyzeConversationResponse, a2, b3);
    }
  };
  var AnalyzeConversationResponse = _AnalyzeConversationResponse;
  __publicField(AnalyzeConversationResponse, "runtime", proto3);
  __publicField(AnalyzeConversationResponse, "typeName", "protoflow.AnalyzeConversationResponse");
  __publicField(AnalyzeConversationResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "phone_numbers", kind: "scalar", T: 9, repeated: true },
    {
      no: 2,
      name: "summary",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 3, name: "questions", kind: "scalar", T: 9, repeated: true }
  ]));
  var _GenerateImagesRequest = class extends Message {
    /**
     * @generated from field: string prompt = 1;
     */
    prompt = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GenerateImagesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GenerateImagesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GenerateImagesRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GenerateImagesRequest, a2, b3);
    }
  };
  var GenerateImagesRequest = _GenerateImagesRequest;
  __publicField(GenerateImagesRequest, "runtime", proto3);
  __publicField(GenerateImagesRequest, "typeName", "protoflow.GenerateImagesRequest");
  __publicField(GenerateImagesRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "prompt",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _GenerateImagesResponse = class extends Message {
    /**
     * @generated from field: repeated string images = 1;
     */
    images = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GenerateImagesResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GenerateImagesResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GenerateImagesResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GenerateImagesResponse, a2, b3);
    }
  };
  var GenerateImagesResponse = _GenerateImagesResponse;
  __publicField(GenerateImagesResponse, "runtime", proto3);
  __publicField(GenerateImagesResponse, "typeName", "protoflow.GenerateImagesResponse");
  __publicField(GenerateImagesResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "images", kind: "scalar", T: 9, repeated: true }
  ]));
  var _User = class extends Message {
    /**
     * @generated from field: string email = 1;
     */
    email = "";
    /**
     * @generated from field: string password = 2;
     */
    password = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _User().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _User().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _User().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_User, a2, b3);
    }
  };
  var User = _User;
  __publicField(User, "runtime", proto3);
  __publicField(User, "typeName", "protoflow.User");
  __publicField(User, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "email",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "password",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _LoginResponse = class extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _LoginResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _LoginResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _LoginResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_LoginResponse, a2, b3);
    }
  };
  var LoginResponse = _LoginResponse;
  __publicField(LoginResponse, "runtime", proto3);
  __publicField(LoginResponse, "typeName", "protoflow.LoginResponse");
  __publicField(LoginResponse, "fields", proto3.util.newFieldList(() => []));
  var _Empty = class extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Empty().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Empty().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Empty().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Empty, a2, b3);
    }
  };
  var Empty = _Empty;
  __publicField(Empty, "runtime", proto3);
  __publicField(Empty, "typeName", "protoflow.Empty");
  __publicField(Empty, "fields", proto3.util.newFieldList(() => []));
  var _DeleteSessionRequest = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _DeleteSessionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _DeleteSessionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _DeleteSessionRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_DeleteSessionRequest, a2, b3);
    }
  };
  var DeleteSessionRequest = _DeleteSessionRequest;
  __publicField(DeleteSessionRequest, "runtime", proto3);
  __publicField(DeleteSessionRequest, "typeName", "protoflow.DeleteSessionRequest");
  __publicField(DeleteSessionRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Prompt = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string text = 2;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Prompt().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Prompt().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Prompt().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Prompt, a2, b3);
    }
  };
  var Prompt = _Prompt;
  __publicField(Prompt, "runtime", proto3);
  __publicField(Prompt, "typeName", "protoflow.Prompt");
  __publicField(Prompt, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "text",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _GetPromptsRequest = class extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetPromptsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetPromptsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetPromptsRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetPromptsRequest, a2, b3);
    }
  };
  var GetPromptsRequest = _GetPromptsRequest;
  __publicField(GetPromptsRequest, "runtime", proto3);
  __publicField(GetPromptsRequest, "typeName", "protoflow.GetPromptsRequest");
  __publicField(GetPromptsRequest, "fields", proto3.util.newFieldList(() => []));
  var _GetPromptsResponse = class extends Message {
    /**
     * @generated from field: repeated protoflow.Prompt prompts = 1;
     */
    prompts = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetPromptsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetPromptsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetPromptsResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetPromptsResponse, a2, b3);
    }
  };
  var GetPromptsResponse = _GetPromptsResponse;
  __publicField(GetPromptsResponse, "runtime", proto3);
  __publicField(GetPromptsResponse, "typeName", "protoflow.GetPromptsResponse");
  __publicField(GetPromptsResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "prompts", kind: "message", T: Prompt, repeated: true }
  ]));
  var _InferRequest = class extends Message {
    /**
     * @generated from field: string prompt = 1;
     */
    prompt = "";
    /**
     * @generated from field: repeated string text = 2;
     */
    text = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _InferRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _InferRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _InferRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_InferRequest, a2, b3);
    }
  };
  var InferRequest = _InferRequest;
  __publicField(InferRequest, "runtime", proto3);
  __publicField(InferRequest, "typeName", "protoflow.InferRequest");
  __publicField(InferRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "prompt",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 2, name: "text", kind: "scalar", T: 9, repeated: true }
  ]));
  var _InferResponse = class extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _InferResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _InferResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _InferResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_InferResponse, a2, b3);
    }
  };
  var InferResponse = _InferResponse;
  __publicField(InferResponse, "runtime", proto3);
  __publicField(InferResponse, "typeName", "protoflow.InferResponse");
  __publicField(InferResponse, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "text",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _UploadContentRequest = class extends Message {
    /**
     * @generated from field: lunabrain.Content content = 1;
     */
    content;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _UploadContentRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _UploadContentRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _UploadContentRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_UploadContentRequest, a2, b3);
    }
  };
  var UploadContentRequest = _UploadContentRequest;
  __publicField(UploadContentRequest, "runtime", proto3);
  __publicField(UploadContentRequest, "typeName", "protoflow.UploadContentRequest");
  __publicField(UploadContentRequest, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: Content }
  ]));
  var _UploadContentResponse = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _UploadContentResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _UploadContentResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _UploadContentResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_UploadContentResponse, a2, b3);
    }
  };
  var UploadContentResponse = _UploadContentResponse;
  __publicField(UploadContentResponse, "runtime", proto3);
  __publicField(UploadContentResponse, "typeName", "protoflow.UploadContentResponse");
  __publicField(UploadContentResponse, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _GetSessionRequest = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetSessionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetSessionRequest, a2, b3);
    }
  };
  var GetSessionRequest = _GetSessionRequest;
  __publicField(GetSessionRequest, "runtime", proto3);
  __publicField(GetSessionRequest, "typeName", "protoflow.GetSessionRequest");
  __publicField(GetSessionRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _GetSessionResponse = class extends Message {
    /**
     * @generated from field: protoflow.Session session = 1;
     */
    session;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetSessionResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetSessionResponse, a2, b3);
    }
  };
  var GetSessionResponse = _GetSessionResponse;
  __publicField(GetSessionResponse, "runtime", proto3);
  __publicField(GetSessionResponse, "typeName", "protoflow.GetSessionResponse");
  __publicField(GetSessionResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "session", kind: "message", T: Session }
  ]));
  var _GetSessionsRequest = class extends Message {
    /**
     * @generated from field: uint64 page = 1;
     */
    page = protoInt64.zero;
    /**
     * @generated from field: uint64 limit = 2;
     */
    limit = protoInt64.zero;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetSessionsRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionsRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionsRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetSessionsRequest, a2, b3);
    }
  };
  var GetSessionsRequest = _GetSessionsRequest;
  __publicField(GetSessionsRequest, "runtime", proto3);
  __publicField(GetSessionsRequest, "typeName", "protoflow.GetSessionsRequest");
  __publicField(GetSessionsRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "page",
      kind: "scalar",
      T: 4
      /* ScalarType.UINT64 */
    },
    {
      no: 2,
      name: "limit",
      kind: "scalar",
      T: 4
      /* ScalarType.UINT64 */
    }
  ]));
  var _GetSessionsResponse = class extends Message {
    /**
     * @generated from field: repeated protoflow.Session sessions = 1;
     */
    sessions = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _GetSessionsResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _GetSessionsResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _GetSessionsResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_GetSessionsResponse, a2, b3);
    }
  };
  var GetSessionsResponse = _GetSessionsResponse;
  __publicField(GetSessionsResponse, "runtime", proto3);
  __publicField(GetSessionsResponse, "typeName", "protoflow.GetSessionsResponse");
  __publicField(GetSessionsResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "sessions", kind: "message", T: Session, repeated: true }
  ]));
  var _Session = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string name = 2;
     */
    name = "";
    /**
     * @generated from field: repeated protoflow.Segment segments = 3;
     */
    segments = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Session().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Session().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Session().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Session, a2, b3);
    }
  };
  var Session = _Session;
  __publicField(Session, "runtime", proto3);
  __publicField(Session, "typeName", "protoflow.Session");
  __publicField(Session, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 3, name: "segments", kind: "message", T: Segment, repeated: true }
  ]));
  var _Token = class extends Message {
    /**
     * @generated from field: uint32 id = 1;
     */
    id = 0;
    /**
     * @generated from field: uint64 start_time = 2;
     */
    startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 3;
     */
    endTime = protoInt64.zero;
    /**
     * @generated from field: string text = 4;
     */
    text = "";
    /**
     * @generated from field: string p = 5;
     */
    p = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Token().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Token().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Token().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Token, a2, b3);
    }
  };
  var Token = _Token;
  __publicField(Token, "runtime", proto3);
  __publicField(Token, "typeName", "protoflow.Token");
  __publicField(Token, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 13
      /* ScalarType.UINT32 */
    },
    {
      no: 2,
      name: "start_time",
      kind: "scalar",
      T: 4
      /* ScalarType.UINT64 */
    },
    {
      no: 3,
      name: "end_time",
      kind: "scalar",
      T: 4
      /* ScalarType.UINT64 */
    },
    {
      no: 4,
      name: "text",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 5,
      name: "p",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Segment = class extends Message {
    /**
     * @generated from field: uint32 num = 1;
     */
    num = 0;
    /**
     * @generated from field: repeated protoflow.Token tokens = 2;
     */
    tokens = [];
    /**
     * @generated from field: string text = 3;
     */
    text = "";
    /**
     * @generated from field: uint64 start_time = 4;
     */
    startTime = protoInt64.zero;
    /**
     * @generated from field: uint64 end_time = 5;
     */
    endTime = protoInt64.zero;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Segment().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Segment().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Segment().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Segment, a2, b3);
    }
  };
  var Segment = _Segment;
  __publicField(Segment, "runtime", proto3);
  __publicField(Segment, "typeName", "protoflow.Segment");
  __publicField(Segment, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "num",
      kind: "scalar",
      T: 13
      /* ScalarType.UINT32 */
    },
    { no: 2, name: "tokens", kind: "message", T: Token, repeated: true },
    {
      no: 3,
      name: "text",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 4,
      name: "start_time",
      kind: "scalar",
      T: 4
      /* ScalarType.UINT64 */
    },
    {
      no: 5,
      name: "end_time",
      kind: "scalar",
      T: 4
      /* ScalarType.UINT64 */
    }
  ]));
  var _TranscriptionRequest = class extends Message {
    /**
     * @generated from field: string file_path = 14;
     */
    filePath = "";
    /**
     * Path to the model file
     *
     * @generated from field: string model = 1;
     */
    model = "";
    /**
     * Spoken language
     *
     * @generated from field: string language = 2;
     */
    language = "";
    /**
     * Translate from source language to English
     *
     * @generated from field: bool translate = 3;
     */
    translate = false;
    /**
     * Time offset in nanoseconds to match Go's time.Duration
     *
     * @generated from field: int64 offset = 4;
     */
    offset = protoInt64.zero;
    /**
     * Duration of audio to process in nanoseconds
     *
     * @generated from field: int64 duration = 5;
     */
    duration = protoInt64.zero;
    /**
     * Number of threads to use
     *
     * @generated from field: uint32 threads = 6;
     */
    threads = 0;
    /**
     * Enable speedup
     *
     * @generated from field: bool speedup = 7;
     */
    speedup = false;
    /**
     * Maximum segment length in characters
     *
     * @generated from field: uint32 max_len = 8;
     */
    maxLen = 0;
    /**
     * Maximum tokens per segment
     *
     * @generated from field: uint32 max_tokens = 9;
     */
    maxTokens = 0;
    /**
     * Maximum segment score
     *
     * @generated from field: double word_threshold = 10;
     */
    wordThreshold = 0;
    /**
     * Display tokens
     *
     * @generated from field: bool tokens = 11;
     */
    tokens = false;
    /**
     * Colorize tokens
     *
     * @generated from field: bool colorize = 12;
     */
    colorize = false;
    /**
     * Output format (srt, none or leave as empty string)
     *
     * @generated from field: string out = 13;
     */
    out = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _TranscriptionRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _TranscriptionRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _TranscriptionRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_TranscriptionRequest, a2, b3);
    }
  };
  var TranscriptionRequest = _TranscriptionRequest;
  __publicField(TranscriptionRequest, "runtime", proto3);
  __publicField(TranscriptionRequest, "typeName", "protoflow.TranscriptionRequest");
  __publicField(TranscriptionRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 14,
      name: "file_path",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 1,
      name: "model",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "language",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "translate",
      kind: "scalar",
      T: 8
      /* ScalarType.BOOL */
    },
    {
      no: 4,
      name: "offset",
      kind: "scalar",
      T: 3
      /* ScalarType.INT64 */
    },
    {
      no: 5,
      name: "duration",
      kind: "scalar",
      T: 3
      /* ScalarType.INT64 */
    },
    {
      no: 6,
      name: "threads",
      kind: "scalar",
      T: 13
      /* ScalarType.UINT32 */
    },
    {
      no: 7,
      name: "speedup",
      kind: "scalar",
      T: 8
      /* ScalarType.BOOL */
    },
    {
      no: 8,
      name: "max_len",
      kind: "scalar",
      T: 13
      /* ScalarType.UINT32 */
    },
    {
      no: 9,
      name: "max_tokens",
      kind: "scalar",
      T: 13
      /* ScalarType.UINT32 */
    },
    {
      no: 10,
      name: "word_threshold",
      kind: "scalar",
      T: 1
      /* ScalarType.DOUBLE */
    },
    {
      no: 11,
      name: "tokens",
      kind: "scalar",
      T: 8
      /* ScalarType.BOOL */
    },
    {
      no: 12,
      name: "colorize",
      kind: "scalar",
      T: 8
      /* ScalarType.BOOL */
    },
    {
      no: 13,
      name: "out",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _RegisterFlags = class extends Message {
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _RegisterFlags().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _RegisterFlags().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _RegisterFlags().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_RegisterFlags, a2, b3);
    }
  };
  var RegisterFlags = _RegisterFlags;
  __publicField(RegisterFlags, "runtime", proto3);
  __publicField(RegisterFlags, "typeName", "protoflow.RegisterFlags");
  __publicField(RegisterFlags, "fields", proto3.util.newFieldList(() => []));
  var _OCRText = class extends Message {
    /**
     * @generated from field: string text = 1;
     */
    text = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _OCRText().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _OCRText().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _OCRText().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_OCRText, a2, b3);
    }
  };
  var OCRText = _OCRText;
  __publicField(OCRText, "runtime", proto3);
  __publicField(OCRText, "typeName", "protoflow.OCRText");
  __publicField(OCRText, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "text",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _Image = class extends Message {
    /**
     * @generated from field: bytes image = 1;
     */
    image = new Uint8Array(0);
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _Image().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _Image().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _Image().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_Image, a2, b3);
    }
  };
  var Image = _Image;
  __publicField(Image, "runtime", proto3);
  __publicField(Image, "typeName", "protoflow.Image");
  __publicField(Image, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "image",
      kind: "scalar",
      T: 12
      /* ScalarType.BYTES */
    }
  ]));
  var _ConvertFileRequest = class extends Message {
    /**
     * @generated from field: string from = 1;
     */
    from = "";
    /**
     * @generated from field: string to = 2;
     */
    to = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _ConvertFileRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ConvertFileRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ConvertFileRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ConvertFileRequest, a2, b3);
    }
  };
  var ConvertFileRequest = _ConvertFileRequest;
  __publicField(ConvertFileRequest, "runtime", proto3);
  __publicField(ConvertFileRequest, "typeName", "protoflow.ConvertFileRequest");
  __publicField(ConvertFileRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "from",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "to",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _ChatRequest = class extends Message {
    /**
     * @generated from field: int32 capture_device = 1;
     */
    captureDevice = 0;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _ChatRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ChatRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ChatRequest().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ChatRequest, a2, b3);
    }
  };
  var ChatRequest = _ChatRequest;
  __publicField(ChatRequest, "runtime", proto3);
  __publicField(ChatRequest, "typeName", "protoflow.ChatRequest");
  __publicField(ChatRequest, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "capture_device",
      kind: "scalar",
      T: 5
      /* ScalarType.INT32 */
    }
  ]));
  var _ChatResponse = class extends Message {
    /**
     * @generated from field: protoflow.Segment segment = 1;
     */
    segment;
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _ChatResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _ChatResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _ChatResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_ChatResponse, a2, b3);
    }
  };
  var ChatResponse = _ChatResponse;
  __publicField(ChatResponse, "runtime", proto3);
  __publicField(ChatResponse, "typeName", "protoflow.ChatResponse");
  __publicField(ChatResponse, "fields", proto3.util.newFieldList(() => [
    { no: 1, name: "segment", kind: "message", T: Segment }
  ]));
  var _YouTubeVideo = class extends Message {
    /**
     * @generated from field: string id = 1;
     */
    id = "";
    /**
     * @generated from field: string file = 2;
     */
    file = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _YouTubeVideo().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _YouTubeVideo().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _YouTubeVideo().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_YouTubeVideo, a2, b3);
    }
  };
  var YouTubeVideo = _YouTubeVideo;
  __publicField(YouTubeVideo, "runtime", proto3);
  __publicField(YouTubeVideo, "typeName", "protoflow.YouTubeVideo");
  __publicField(YouTubeVideo, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "file",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _FilePath = class extends Message {
    /**
     * @generated from field: string file = 1;
     */
    file = "";
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _FilePath().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _FilePath().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _FilePath().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_FilePath, a2, b3);
    }
  };
  var FilePath = _FilePath;
  __publicField(FilePath, "runtime", proto3);
  __publicField(FilePath, "typeName", "protoflow.FilePath");
  __publicField(FilePath, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "file",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]));
  var _YouTubeVideoResponse = class extends Message {
    /**
     * @generated from field: string title = 1;
     */
    title = "";
    /**
     * @generated from field: protoflow.FilePath file_path = 2;
     */
    filePath;
    /**
     * @generated from field: repeated protoflow.Segment transcript = 3;
     */
    transcript = [];
    constructor(data) {
      super();
      proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
      return new _YouTubeVideoResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
      return new _YouTubeVideoResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
      return new _YouTubeVideoResponse().fromJsonString(jsonString, options);
    }
    static equals(a2, b3) {
      return proto3.util.equals(_YouTubeVideoResponse, a2, b3);
    }
  };
  var YouTubeVideoResponse = _YouTubeVideoResponse;
  __publicField(YouTubeVideoResponse, "runtime", proto3);
  __publicField(YouTubeVideoResponse, "typeName", "protoflow.YouTubeVideoResponse");
  __publicField(YouTubeVideoResponse, "fields", proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "title",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 2, name: "file_path", kind: "message", T: FilePath },
    { no: 3, name: "transcript", kind: "message", T: Segment, repeated: true }
  ]));

  // src/rpc/protoflow_connect.ts
  var ProtoflowService = {
    typeName: "protoflow.ProtoflowService",
    methods: {
      /**
       * @generated from rpc protoflow.ProtoflowService.DownloadYouTubeVideo
       */
      downloadYouTubeVideo: {
        name: "DownloadYouTubeVideo",
        I: YouTubeVideo,
        O: YouTubeVideoResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GetSessions
       */
      getSessions: {
        name: "GetSessions",
        I: GetSessionsRequest,
        O: GetSessionsResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GetSession
       */
      getSession: {
        name: "GetSession",
        I: GetSessionRequest,
        O: GetSessionResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.DeleteSession
       */
      deleteSession: {
        name: "DeleteSession",
        I: DeleteSessionRequest,
        O: Empty,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.GetPrompts
       */
      getPrompts: {
        name: "GetPrompts",
        I: GetPromptsRequest,
        O: GetPromptsResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.NewPrompt
       */
      newPrompt: {
        name: "NewPrompt",
        I: Prompt,
        O: Prompt,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.UploadContent
       */
      uploadContent: {
        name: "UploadContent",
        I: UploadContentRequest,
        O: ChatResponse,
        kind: MethodKind.ServerStreaming
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.Infer
       */
      infer: {
        name: "Infer",
        I: InferRequest,
        O: InferResponse,
        kind: MethodKind.ServerStreaming
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.Chat
       */
      chat: {
        name: "Chat",
        I: ChatRequest,
        O: ChatResponse,
        kind: MethodKind.ServerStreaming
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.ConvertFile
       */
      convertFile: {
        name: "ConvertFile",
        I: ConvertFileRequest,
        O: FilePath,
        kind: MethodKind.Unary
      },
      /**
       *  rpc OCR (FilePath) returns (OCRText);
       *
       * @generated from rpc protoflow.ProtoflowService.GenerateImages
       */
      generateImages: {
        name: "GenerateImages",
        I: GenerateImagesRequest,
        O: GenerateImagesResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.AnalyzeConversation
       */
      analyzeConversation: {
        name: "AnalyzeConversation",
        I: AnalyzeConversationRequest,
        O: AnalyzeConversationResponse,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.Register
       */
      register: {
        name: "Register",
        I: User,
        O: User,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.Login
       */
      login: {
        name: "Login",
        I: User,
        O: User,
        kind: MethodKind.Unary
      },
      /**
       * @generated from rpc protoflow.ProtoflowService.Logout
       */
      logout: {
        name: "Logout",
        I: Empty,
        O: Empty,
        kind: MethodKind.Unary
      }
    }
  };

  // src/lib/api.ts
  var transport = createConnectTransport({
    baseUrl: "/api"
  });
  var projectService = createPromiseClient(ProtoflowService, transport);

  // ../node_modules/react-hot-toast/dist/index.mjs
  var import_react36 = __toESM(require_react(), 1);
  var import_react37 = __toESM(require_react(), 1);
  var l2 = __toESM(require_react(), 1);

  // ../node_modules/goober/dist/goober.modern.js
  var e = { data: "" };
  var t = (t2) => "object" == typeof window ? ((t2 ? t2.querySelector("#_goober") : window._goober) || Object.assign((t2 || document.head).appendChild(document.createElement("style")), { innerHTML: " ", id: "_goober" })).firstChild : t2 || e;
  var l = /(?:([\u0080-\uFFFF\w-%@]+) *:? *([^{;]+?);|([^;}{]*?) *{)|(}\s*)/g;
  var a = /\/\*[^]*?\*\/|  +/g;
  var n = /\n+/g;
  var o = (e2, t2) => {
    let r = "", l3 = "", a2 = "";
    for (let n3 in e2) {
      let c2 = e2[n3];
      "@" == n3[0] ? "i" == n3[1] ? r = n3 + " " + c2 + ";" : l3 += "f" == n3[1] ? o(c2, n3) : n3 + "{" + o(c2, "k" == n3[1] ? "" : t2) + "}" : "object" == typeof c2 ? l3 += o(c2, t2 ? t2.replace(/([^,])+/g, (e3) => n3.replace(/(^:.*)|([^,])+/g, (t3) => /&/.test(t3) ? t3.replace(/&/g, e3) : e3 ? e3 + " " + t3 : t3)) : n3) : null != c2 && (n3 = /^--/.test(n3) ? n3 : n3.replace(/[A-Z]/g, "-$&").toLowerCase(), a2 += o.p ? o.p(n3, c2) : n3 + ":" + c2 + ";");
    }
    return r + (t2 && a2 ? t2 + "{" + a2 + "}" : a2) + l3;
  };
  var c = {};
  var s = (e2) => {
    if ("object" == typeof e2) {
      let t2 = "";
      for (let r in e2)
        t2 += r + s(e2[r]);
      return t2;
    }
    return e2;
  };
  var i = (e2, t2, r, i2, p2) => {
    let u3 = s(e2), d2 = c[u3] || (c[u3] = ((e3) => {
      let t3 = 0, r2 = 11;
      for (; t3 < e3.length; )
        r2 = 101 * r2 + e3.charCodeAt(t3++) >>> 0;
      return "go" + r2;
    })(u3));
    if (!c[d2]) {
      let t3 = u3 !== e2 ? e2 : ((e3) => {
        let t4, r2, o2 = [{}];
        for (; t4 = l.exec(e3.replace(a, "")); )
          t4[4] ? o2.shift() : t4[3] ? (r2 = t4[3].replace(n, " ").trim(), o2.unshift(o2[0][r2] = o2[0][r2] || {})) : o2[0][t4[1]] = t4[2].replace(n, " ").trim();
        return o2[0];
      })(e2);
      c[d2] = o(p2 ? { ["@keyframes " + d2]: t3 } : t3, r ? "" : "." + d2);
    }
    let f3 = r && c.g ? c.g : null;
    return r && (c.g = c[d2]), ((e3, t3, r2, l3) => {
      l3 ? t3.data = t3.data.replace(l3, e3) : -1 === t3.data.indexOf(e3) && (t3.data = r2 ? e3 + t3.data : t3.data + e3);
    })(c[d2], t2, i2, f3), d2;
  };
  var p = (e2, t2, r) => e2.reduce((e3, l3, a2) => {
    let n3 = t2[a2];
    if (n3 && n3.call) {
      let e4 = n3(r), t3 = e4 && e4.props && e4.props.className || /^go/.test(e4) && e4;
      n3 = t3 ? "." + t3 : e4 && "object" == typeof e4 ? e4.props ? "" : o(e4, "") : false === e4 ? "" : e4;
    }
    return e3 + l3 + (null == n3 ? "" : n3);
  }, "");
  function u(e2) {
    let r = this || {}, l3 = e2.call ? e2(r.p) : e2;
    return i(l3.unshift ? l3.raw ? p(l3, [].slice.call(arguments, 1), r.p) : l3.reduce((e3, t2) => Object.assign(e3, t2 && t2.call ? t2(r.p) : t2), {}) : l3, t(r.target), r.g, r.o, r.k);
  }
  var d;
  var f;
  var g;
  var b = u.bind({ g: 1 });
  var h = u.bind({ k: 1 });
  function m(e2, t2, r, l3) {
    o.p = t2, d = e2, f = r, g = l3;
  }
  function j(e2, t2) {
    let r = this || {};
    return function() {
      let l3 = arguments;
      function a2(n3, o2) {
        let c2 = Object.assign({}, n3), s2 = c2.className || a2.className;
        r.p = Object.assign({ theme: f && f() }, c2), r.o = / *go\d+/.test(s2), c2.className = u.apply(r, l3) + (s2 ? " " + s2 : ""), t2 && (c2.ref = o2);
        let i2 = e2;
        return e2[0] && (i2 = c2.as || e2, delete c2.as), g && i2[0] && g(c2), d(i2, c2);
      }
      return t2 ? t2(a2) : a2;
    };
  }

  // ../node_modules/react-hot-toast/dist/index.mjs
  var y = __toESM(require_react(), 1);
  var f2 = __toESM(require_react(), 1);
  var W = (e2) => typeof e2 == "function";
  var T = (e2, t2) => W(e2) ? e2(t2) : e2;
  var U = (() => {
    let e2 = 0;
    return () => (++e2).toString();
  })();
  var b2 = (() => {
    let e2;
    return () => {
      if (e2 === void 0 && typeof window < "u") {
        let t2 = matchMedia("(prefers-reduced-motion: reduce)");
        e2 = !t2 || t2.matches;
      }
      return e2;
    };
  })();
  var Q = 20;
  var S = /* @__PURE__ */ new Map();
  var X = 1e3;
  var $ = (e2) => {
    if (S.has(e2))
      return;
    let t2 = setTimeout(() => {
      S.delete(e2), u2({ type: 4, toastId: e2 });
    }, X);
    S.set(e2, t2);
  };
  var J = (e2) => {
    let t2 = S.get(e2);
    t2 && clearTimeout(t2);
  };
  var v = (e2, t2) => {
    switch (t2.type) {
      case 0:
        return { ...e2, toasts: [t2.toast, ...e2.toasts].slice(0, Q) };
      case 1:
        return t2.toast.id && J(t2.toast.id), { ...e2, toasts: e2.toasts.map((r) => r.id === t2.toast.id ? { ...r, ...t2.toast } : r) };
      case 2:
        let { toast: o2 } = t2;
        return e2.toasts.find((r) => r.id === o2.id) ? v(e2, { type: 1, toast: o2 }) : v(e2, { type: 0, toast: o2 });
      case 3:
        let { toastId: s2 } = t2;
        return s2 ? $(s2) : e2.toasts.forEach((r) => {
          $(r.id);
        }), { ...e2, toasts: e2.toasts.map((r) => r.id === s2 || s2 === void 0 ? { ...r, visible: false } : r) };
      case 4:
        return t2.toastId === void 0 ? { ...e2, toasts: [] } : { ...e2, toasts: e2.toasts.filter((r) => r.id !== t2.toastId) };
      case 5:
        return { ...e2, pausedAt: t2.time };
      case 6:
        let a2 = t2.time - (e2.pausedAt || 0);
        return { ...e2, pausedAt: void 0, toasts: e2.toasts.map((r) => ({ ...r, pauseDuration: r.pauseDuration + a2 })) };
    }
  };
  var A = [];
  var P = { toasts: [], pausedAt: void 0 };
  var u2 = (e2) => {
    P = v(P, e2), A.forEach((t2) => {
      t2(P);
    });
  };
  var Y = { blank: 4e3, error: 4e3, success: 2e3, loading: 1 / 0, custom: 4e3 };
  var I = (e2 = {}) => {
    let [t2, o2] = (0, import_react36.useState)(P);
    (0, import_react36.useEffect)(() => (A.push(o2), () => {
      let a2 = A.indexOf(o2);
      a2 > -1 && A.splice(a2, 1);
    }), [t2]);
    let s2 = t2.toasts.map((a2) => {
      var r, c2;
      return { ...e2, ...e2[a2.type], ...a2, duration: a2.duration || ((r = e2[a2.type]) == null ? void 0 : r.duration) || (e2 == null ? void 0 : e2.duration) || Y[a2.type], style: { ...e2.style, ...(c2 = e2[a2.type]) == null ? void 0 : c2.style, ...a2.style } };
    });
    return { ...t2, toasts: s2 };
  };
  var G = (e2, t2 = "blank", o2) => ({ createdAt: Date.now(), visible: true, type: t2, ariaProps: { role: "status", "aria-live": "polite" }, message: e2, pauseDuration: 0, ...o2, id: (o2 == null ? void 0 : o2.id) || U() });
  var h2 = (e2) => (t2, o2) => {
    let s2 = G(t2, e2, o2);
    return u2({ type: 2, toast: s2 }), s2.id;
  };
  var n2 = (e2, t2) => h2("blank")(e2, t2);
  n2.error = h2("error");
  n2.success = h2("success");
  n2.loading = h2("loading");
  n2.custom = h2("custom");
  n2.dismiss = (e2) => {
    u2({ type: 3, toastId: e2 });
  };
  n2.remove = (e2) => u2({ type: 4, toastId: e2 });
  n2.promise = (e2, t2, o2) => {
    let s2 = n2.loading(t2.loading, { ...o2, ...o2 == null ? void 0 : o2.loading });
    return e2.then((a2) => (n2.success(T(t2.success, a2), { id: s2, ...o2, ...o2 == null ? void 0 : o2.success }), a2)).catch((a2) => {
      n2.error(T(t2.error, a2), { id: s2, ...o2, ...o2 == null ? void 0 : o2.error });
    }), e2;
  };
  var Z = (e2, t2) => {
    u2({ type: 1, toast: { id: e2, height: t2 } });
  };
  var ee = () => {
    u2({ type: 5, time: Date.now() });
  };
  var D = (e2) => {
    let { toasts: t2, pausedAt: o2 } = I(e2);
    (0, import_react37.useEffect)(() => {
      if (o2)
        return;
      let r = Date.now(), c2 = t2.map((i2) => {
        if (i2.duration === 1 / 0)
          return;
        let d2 = (i2.duration || 0) + i2.pauseDuration - (r - i2.createdAt);
        if (d2 < 0) {
          i2.visible && n2.dismiss(i2.id);
          return;
        }
        return setTimeout(() => n2.dismiss(i2.id), d2);
      });
      return () => {
        c2.forEach((i2) => i2 && clearTimeout(i2));
      };
    }, [t2, o2]);
    let s2 = (0, import_react37.useCallback)(() => {
      o2 && u2({ type: 6, time: Date.now() });
    }, [o2]), a2 = (0, import_react37.useCallback)((r, c2) => {
      let { reverseOrder: i2 = false, gutter: d2 = 8, defaultPosition: p2 } = c2 || {}, g2 = t2.filter((m2) => (m2.position || p2) === (r.position || p2) && m2.height), E = g2.findIndex((m2) => m2.id === r.id), x = g2.filter((m2, R) => R < E && m2.visible).length;
      return g2.filter((m2) => m2.visible).slice(...i2 ? [x + 1] : [0, x]).reduce((m2, R) => m2 + (R.height || 0) + d2, 0);
    }, [t2]);
    return { toasts: t2, handlers: { updateHeight: Z, startPause: ee, endPause: s2, calculateOffset: a2 } };
  };
  var oe = h`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
 transform: scale(1) rotate(45deg);
  opacity: 1;
}`;
  var re = h`
from {
  transform: scale(0);
  opacity: 0;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var se = h`
from {
  transform: scale(0) rotate(90deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(90deg);
	opacity: 1;
}`;
  var _ = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e2) => e2.primary || "#ff4b4b"};
  position: relative;
  transform: rotate(45deg);

  animation: ${oe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;

  &:after,
  &:before {
    content: '';
    animation: ${re} 0.15s ease-out forwards;
    animation-delay: 150ms;
    position: absolute;
    border-radius: 3px;
    opacity: 0;
    background: ${(e2) => e2.secondary || "#fff"};
    bottom: 9px;
    left: 4px;
    height: 2px;
    width: 12px;
  }

  &:before {
    animation: ${se} 0.15s ease-out forwards;
    animation-delay: 180ms;
    transform: rotate(90deg);
  }
`;
  var ne = h`
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
`;
  var V = j("div")`
  width: 12px;
  height: 12px;
  box-sizing: border-box;
  border: 2px solid;
  border-radius: 100%;
  border-color: ${(e2) => e2.secondary || "#e0e0e0"};
  border-right-color: ${(e2) => e2.primary || "#616161"};
  animation: ${ne} 1s linear infinite;
`;
  var pe = h`
from {
  transform: scale(0) rotate(45deg);
	opacity: 0;
}
to {
  transform: scale(1) rotate(45deg);
	opacity: 1;
}`;
  var de = h`
0% {
	height: 0;
	width: 0;
	opacity: 0;
}
40% {
  height: 0;
	width: 6px;
	opacity: 1;
}
100% {
  opacity: 1;
  height: 10px;
}`;
  var w = j("div")`
  width: 20px;
  opacity: 0;
  height: 20px;
  border-radius: 10px;
  background: ${(e2) => e2.primary || "#61d345"};
  position: relative;
  transform: rotate(45deg);

  animation: ${pe} 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
  animation-delay: 100ms;
  &:after {
    content: '';
    box-sizing: border-box;
    animation: ${de} 0.2s ease-out forwards;
    opacity: 0;
    animation-delay: 200ms;
    position: absolute;
    border-right: 2px solid;
    border-bottom: 2px solid;
    border-color: ${(e2) => e2.secondary || "#fff"};
    bottom: 6px;
    left: 6px;
    height: 10px;
    width: 6px;
  }
`;
  var ue = j("div")`
  position: absolute;
`;
  var le = j("div")`
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  min-width: 20px;
  min-height: 20px;
`;
  var Te = h`
from {
  transform: scale(0.6);
  opacity: 0.4;
}
to {
  transform: scale(1);
  opacity: 1;
}`;
  var fe = j("div")`
  position: relative;
  transform: scale(0.6);
  opacity: 0.4;
  min-width: 20px;
  animation: ${Te} 0.3s 0.12s cubic-bezier(0.175, 0.885, 0.32, 1.275)
    forwards;
`;
  var M = ({ toast: e2 }) => {
    let { icon: t2, type: o2, iconTheme: s2 } = e2;
    return t2 !== void 0 ? typeof t2 == "string" ? y.createElement(fe, null, t2) : t2 : o2 === "blank" ? null : y.createElement(le, null, y.createElement(V, { ...s2 }), o2 !== "loading" && y.createElement(ue, null, o2 === "error" ? y.createElement(_, { ...s2 }) : y.createElement(w, { ...s2 })));
  };
  var ye = (e2) => `
0% {transform: translate3d(0,${e2 * -200}%,0) scale(.6); opacity:.5;}
100% {transform: translate3d(0,0,0) scale(1); opacity:1;}
`;
  var ge = (e2) => `
0% {transform: translate3d(0,0,-1px) scale(1); opacity:1;}
100% {transform: translate3d(0,${e2 * -150}%,-1px) scale(.6); opacity:0;}
`;
  var he = "0%{opacity:0;} 100%{opacity:1;}";
  var xe = "0%{opacity:1;} 100%{opacity:0;}";
  var be = j("div")`
  display: flex;
  align-items: center;
  background: #fff;
  color: #363636;
  line-height: 1.3;
  will-change: transform;
  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1), 0 3px 3px rgba(0, 0, 0, 0.05);
  max-width: 350px;
  pointer-events: auto;
  padding: 8px 10px;
  border-radius: 8px;
`;
  var Se = j("div")`
  display: flex;
  justify-content: center;
  margin: 4px 10px;
  color: inherit;
  flex: 1 1 auto;
  white-space: pre-line;
`;
  var Ae = (e2, t2) => {
    let s2 = e2.includes("top") ? 1 : -1, [a2, r] = b2() ? [he, xe] : [ye(s2), ge(s2)];
    return { animation: t2 ? `${h(a2)} 0.35s cubic-bezier(.21,1.02,.73,1) forwards` : `${h(r)} 0.4s forwards cubic-bezier(.06,.71,.55,1)` };
  };
  var F = l2.memo(({ toast: e2, position: t2, style: o2, children: s2 }) => {
    let a2 = e2.height ? Ae(e2.position || t2 || "top-center", e2.visible) : { opacity: 0 }, r = l2.createElement(M, { toast: e2 }), c2 = l2.createElement(Se, { ...e2.ariaProps }, T(e2.message, e2));
    return l2.createElement(be, { className: e2.className, style: { ...a2, ...o2, ...e2.style } }, typeof s2 == "function" ? s2({ icon: r, message: c2 }) : l2.createElement(l2.Fragment, null, r, c2));
  });
  m(f2.createElement);
  var Ee = ({ id: e2, className: t2, style: o2, onHeightUpdate: s2, children: a2 }) => {
    let r = f2.useCallback((c2) => {
      if (c2) {
        let i2 = () => {
          let d2 = c2.getBoundingClientRect().height;
          s2(e2, d2);
        };
        i2(), new MutationObserver(i2).observe(c2, { subtree: true, childList: true, characterData: true });
      }
    }, [e2, s2]);
    return f2.createElement("div", { ref: r, className: t2, style: o2 }, a2);
  };
  var Re = (e2, t2) => {
    let o2 = e2.includes("top"), s2 = o2 ? { top: 0 } : { bottom: 0 }, a2 = e2.includes("center") ? { justifyContent: "center" } : e2.includes("right") ? { justifyContent: "flex-end" } : {};
    return { left: 0, right: 0, display: "flex", position: "absolute", transition: b2() ? void 0 : "all 230ms cubic-bezier(.21,1.02,.73,1)", transform: `translateY(${t2 * (o2 ? 1 : -1)}px)`, ...s2, ...a2 };
  };
  var ve = u`
  z-index: 9999;
  > * {
    pointer-events: auto;
  }
`;
  var O = 16;
  var Ie = ({ reverseOrder: e2, position: t2 = "top-center", toastOptions: o2, gutter: s2, children: a2, containerStyle: r, containerClassName: c2 }) => {
    let { toasts: i2, handlers: d2 } = D(o2);
    return f2.createElement("div", { style: { position: "fixed", zIndex: 9999, top: O, left: O, right: O, bottom: O, pointerEvents: "none", ...r }, className: c2, onMouseEnter: d2.startPause, onMouseLeave: d2.endPause }, i2.map((p2) => {
      let g2 = p2.position || t2, E = d2.calculateOffset(p2, { reverseOrder: e2, gutter: s2, defaultPosition: t2 }), x = Re(g2, E);
      return f2.createElement(Ee, { id: p2.id, key: p2.id, onHeightUpdate: d2.updateHeight, className: p2.visible ? ve : "", style: x }, p2.type === "custom" ? T(p2.message, p2) : a2 ? a2(p2) : f2.createElement(F, { toast: p2, position: g2 }));
    }));
  };
  var _t = n2;

  // src/providers/ProjectProvider.tsx
  var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
  var ProjectContext = (0, import_react38.createContext)({});
  var useProjectContext = () => (0, import_react38.useContext)(ProjectContext);
  function ProjectProvider({ children }) {
    const [messages, setMessages] = (0, import_react38.useState)([]);
    const [isRecording, setIsRecording] = (0, import_react38.useState)(false);
    const [selectedValue, setSelectedValue] = (0, import_react38.useState)("");
    const [session, setSession] = (0, import_react38.useState)(void 0);
    const [inference, setInference] = (0, import_react38.useState)("");
    const [user, setUser] = (0, import_react38.useState)(void 0);
    const [loading, setLoading] = (0, import_react38.useState)(false);
    const [analyzedText, setAnalyzedText] = (0, import_react38.useState)(void 0);
    const [media, setMedia] = (0, import_react38.useState)(void 0);
    const inferFromMessages = (0, import_react38.useCallback)(async (prompt) => {
      const mIdx = messages.length + 1;
      const m2 = { text: prompt, sender: "user", segment: new Segment() };
      setMessages((prev2) => [...prev2, m2]);
      let i2 = "";
      try {
        const res = projectService.infer({
          text: messages.map((m3) => m3.text),
          prompt
        });
        for await (const exec of res) {
          setInference((prev2) => exec.text || "");
          i2 = exec.text || "";
        }
      } catch (e2) {
        _t.error(e2.message);
        console.log(e2);
      }
      setInference("");
      setMessages((prev2) => [...prev2, m2, { ...m2, text: i2 }]);
    }, [messages, setMessages]);
    (0, import_react38.useEffect)(() => {
      if (selectedValue !== "") {
        (async () => {
          const res = await projectService.getSession({
            id: selectedValue
          });
          setSession(res.session);
          setMessages(res.session?.segments.map((m2) => ({ text: m2.text || "", sender: "bot", segment: m2 })) || []);
        })();
      }
    }, [selectedValue]);
    async function streamMessages(res) {
      setMessages([]);
      for await (const exec of res) {
        setMessages((prev2) => {
          if (!exec.segment) {
            return prev2;
          }
          const newMsg = { text: exec.segment?.text || "", sender: "bot", segment: exec.segment };
          const i2 = prev2.findIndex((m2) => m2.segment.num === exec.segment?.num);
          if (i2 !== -1) {
            let newPrev = [...prev2];
            newPrev[i2] = newMsg;
            return newPrev;
          }
          return [...prev2, newMsg];
        });
      }
      setLoading(false);
    }
    (0, import_react38.useEffect)(() => {
      if (!isRecording) {
        return;
      }
      (async () => {
        try {
          const res = projectService.chat({}, {
            timeoutMs: void 0
          });
          await streamMessages(res);
        } catch (e2) {
          if (e2 instanceof ConnectError2 && e2.code != Code2.Canceled) {
            _t.error(e2.message);
            console.log(e2);
          }
        }
      })();
    }, [isRecording]);
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
      ProjectContext.Provider,
      {
        value: {
          messages,
          setMessages,
          isRecording,
          setIsRecording,
          selectedValue,
          setSelectedValue,
          streamMessages,
          session,
          inferFromMessages,
          inference,
          user,
          setUser,
          loading,
          setLoading,
          analyzedText,
          setAnalyzedText,
          media,
          setMedia
        },
        children
      }
    );
  }

  // ../node_modules/react-router-dom/dist/index.js
  var React113 = __toESM(require_react());

  // ../node_modules/react-router/dist/index.js
  var React112 = __toESM(require_react());

  // ../node_modules/@remix-run/router/dist/router.js
  function _extends2() {
    _extends2 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  var Action;
  (function(Action2) {
    Action2["Pop"] = "POP";
    Action2["Push"] = "PUSH";
    Action2["Replace"] = "REPLACE";
  })(Action || (Action = {}));
  var PopStateEventType = "popstate";
  function createBrowserHistory(options) {
    if (options === void 0) {
      options = {};
    }
    function createBrowserLocation(window2, globalHistory) {
      let {
        pathname,
        search: search2,
        hash: hash2
      } = window2.location;
      return createLocation(
        "",
        {
          pathname,
          search: search2,
          hash: hash2
        },
        // state defaults to `null` because `window.history.state` does
        globalHistory.state && globalHistory.state.usr || null,
        globalHistory.state && globalHistory.state.key || "default"
      );
    }
    function createBrowserHref(window2, to) {
      return typeof to === "string" ? to : createPath(to);
    }
    return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
  }
  function invariant(value, message5) {
    if (value === false || value === null || typeof value === "undefined") {
      throw new Error(message5);
    }
  }
  function warning(cond, message5) {
    if (!cond) {
      if (typeof console !== "undefined")
        console.warn(message5);
      try {
        throw new Error(message5);
      } catch (e2) {
      }
    }
  }
  function createKey() {
    return Math.random().toString(36).substr(2, 8);
  }
  function getHistoryState(location2, index2) {
    return {
      usr: location2.state,
      key: location2.key,
      idx: index2
    };
  }
  function createLocation(current, to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location2 = _extends2({
      pathname: typeof current === "string" ? current : current.pathname,
      search: "",
      hash: ""
    }, typeof to === "string" ? parsePath(to) : to, {
      state,
      // TODO: This could be cleaned up.  push/replace should probably just take
      // full Locations now and avoid the need to run through this flow at all
      // But that's a pretty big refactor to the current test suite so going to
      // keep as is for the time being and just let any incoming keys take precedence
      key: to && to.key || key || createKey()
    });
    return location2;
  }
  function createPath(_ref) {
    let {
      pathname = "/",
      search: search2 = "",
      hash: hash2 = ""
    } = _ref;
    if (search2 && search2 !== "?")
      pathname += search2.charAt(0) === "?" ? search2 : "?" + search2;
    if (hash2 && hash2 !== "#")
      pathname += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
    return pathname;
  }
  function parsePath(path2) {
    let parsedPath = {};
    if (path2) {
      let hashIndex = path2.indexOf("#");
      if (hashIndex >= 0) {
        parsedPath.hash = path2.substr(hashIndex);
        path2 = path2.substr(0, hashIndex);
      }
      let searchIndex = path2.indexOf("?");
      if (searchIndex >= 0) {
        parsedPath.search = path2.substr(searchIndex);
        path2 = path2.substr(0, searchIndex);
      }
      if (path2) {
        parsedPath.pathname = path2;
      }
    }
    return parsedPath;
  }
  function getUrlBasedHistory(getLocation, createHref, validateLocation, options) {
    if (options === void 0) {
      options = {};
    }
    let {
      window: window2 = document.defaultView,
      v5Compat = false
    } = options;
    let globalHistory = window2.history;
    let action = Action.Pop;
    let listener = null;
    let index2 = getIndex();
    if (index2 == null) {
      index2 = 0;
      globalHistory.replaceState(_extends2({}, globalHistory.state, {
        idx: index2
      }), "");
    }
    function getIndex() {
      let state = globalHistory.state || {
        idx: null
      };
      return state.idx;
    }
    function handlePop() {
      action = Action.Pop;
      let nextIndex = getIndex();
      let delta = nextIndex == null ? null : nextIndex - index2;
      index2 = nextIndex;
      if (listener) {
        listener({
          action,
          location: history.location,
          delta
        });
      }
    }
    function push2(to, state) {
      action = Action.Push;
      let location2 = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index2 = getIndex() + 1;
      let historyState = getHistoryState(location2, index2);
      let url = history.createHref(location2);
      try {
        globalHistory.pushState(historyState, "", url);
      } catch (error) {
        if (error instanceof DOMException && error.name === "DataCloneError") {
          throw error;
        }
        window2.location.assign(url);
      }
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 1
        });
      }
    }
    function replace2(to, state) {
      action = Action.Replace;
      let location2 = createLocation(history.location, to, state);
      if (validateLocation)
        validateLocation(location2, to);
      index2 = getIndex();
      let historyState = getHistoryState(location2, index2);
      let url = history.createHref(location2);
      globalHistory.replaceState(historyState, "", url);
      if (v5Compat && listener) {
        listener({
          action,
          location: history.location,
          delta: 0
        });
      }
    }
    function createURL(to) {
      let base2 = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
      let href = typeof to === "string" ? to : createPath(to);
      invariant(base2, "No window.location.(origin|href) available to create URL for href: " + href);
      return new URL(href, base2);
    }
    let history = {
      get action() {
        return action;
      },
      get location() {
        return getLocation(window2, globalHistory);
      },
      listen(fn) {
        if (listener) {
          throw new Error("A history only accepts one active listener");
        }
        window2.addEventListener(PopStateEventType, handlePop);
        listener = fn;
        return () => {
          window2.removeEventListener(PopStateEventType, handlePop);
          listener = null;
        };
      },
      createHref(to) {
        return createHref(window2, to);
      },
      createURL,
      encodeLocation(to) {
        let url = createURL(to);
        return {
          pathname: url.pathname,
          search: url.search,
          hash: url.hash
        };
      },
      push: push2,
      replace: replace2,
      go(n3) {
        return globalHistory.go(n3);
      }
    };
    return history;
  }
  var ResultType;
  (function(ResultType2) {
    ResultType2["data"] = "data";
    ResultType2["deferred"] = "deferred";
    ResultType2["redirect"] = "redirect";
    ResultType2["error"] = "error";
  })(ResultType || (ResultType = {}));
  function matchRoutes(routes, locationArg, basename3) {
    if (basename3 === void 0) {
      basename3 = "/";
    }
    let location2 = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    let pathname = stripBasename(location2.pathname || "/", basename3);
    if (pathname == null) {
      return null;
    }
    let branches = flattenRoutes(routes);
    rankRouteBranches(branches);
    let matches = null;
    for (let i2 = 0; matches == null && i2 < branches.length; ++i2) {
      matches = matchRouteBranch(
        branches[i2],
        // Incoming pathnames are generally encoded from either window.location
        // or from router.navigate, but we want to match against the unencoded
        // paths in the route definitions.  Memory router locations won't be
        // encoded here but there also shouldn't be anything to decode so this
        // should be a safe operation.  This avoids needing matchRoutes to be
        // history-aware.
        safelyDecodeURI(pathname)
      );
    }
    return matches;
  }
  function flattenRoutes(routes, branches, parentsMeta, parentPath) {
    if (branches === void 0) {
      branches = [];
    }
    if (parentsMeta === void 0) {
      parentsMeta = [];
    }
    if (parentPath === void 0) {
      parentPath = "";
    }
    let flattenRoute = (route, index2, relativePath) => {
      let meta = {
        relativePath: relativePath === void 0 ? route.path || "" : relativePath,
        caseSensitive: route.caseSensitive === true,
        childrenIndex: index2,
        route
      };
      if (meta.relativePath.startsWith("/")) {
        invariant(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
        meta.relativePath = meta.relativePath.slice(parentPath.length);
      }
      let path2 = joinPaths([parentPath, meta.relativePath]);
      let routesMeta = parentsMeta.concat(meta);
      if (route.children && route.children.length > 0) {
        invariant(
          // Our types know better, but runtime JS may not!
          // @ts-expect-error
          route.index !== true,
          "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path2 + '".')
        );
        flattenRoutes(route.children, branches, routesMeta, path2);
      }
      if (route.path == null && !route.index) {
        return;
      }
      branches.push({
        path: path2,
        score: computeScore(path2, route.index),
        routesMeta
      });
    };
    routes.forEach((route, index2) => {
      var _route$path;
      if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
        flattenRoute(route, index2);
      } else {
        for (let exploded of explodeOptionalSegments(route.path)) {
          flattenRoute(route, index2, exploded);
        }
      }
    });
    return branches;
  }
  function explodeOptionalSegments(path2) {
    let segments = path2.split("/");
    if (segments.length === 0)
      return [];
    let [first, ...rest] = segments;
    let isOptional = first.endsWith("?");
    let required = first.replace(/\?$/, "");
    if (rest.length === 0) {
      return isOptional ? [required, ""] : [required];
    }
    let restExploded = explodeOptionalSegments(rest.join("/"));
    let result = [];
    result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
    if (isOptional) {
      result.push(...restExploded);
    }
    return result.map((exploded) => path2.startsWith("/") && exploded === "" ? "/" : exploded);
  }
  function rankRouteBranches(branches) {
    branches.sort((a2, b3) => a2.score !== b3.score ? b3.score - a2.score : compareIndexes(a2.routesMeta.map((meta) => meta.childrenIndex), b3.routesMeta.map((meta) => meta.childrenIndex)));
  }
  var paramRe = /^:\w+$/;
  var dynamicSegmentValue = 3;
  var indexRouteValue = 2;
  var emptySegmentValue = 1;
  var staticSegmentValue = 10;
  var splatPenalty = -2;
  var isSplat = (s2) => s2 === "*";
  function computeScore(path2, index2) {
    let segments = path2.split("/");
    let initialScore = segments.length;
    if (segments.some(isSplat)) {
      initialScore += splatPenalty;
    }
    if (index2) {
      initialScore += indexRouteValue;
    }
    return segments.filter((s2) => !isSplat(s2)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
  }
  function compareIndexes(a2, b3) {
    let siblings = a2.length === b3.length && a2.slice(0, -1).every((n3, i2) => n3 === b3[i2]);
    return siblings ? (
      // If two routes are siblings, we should try to match the earlier sibling
      // first. This allows people to have fine-grained control over the matching
      // behavior by simply putting routes with identical paths in the order they
      // want them tried.
      a2[a2.length - 1] - b3[b3.length - 1]
    ) : (
      // Otherwise, it doesn't really make sense to rank non-siblings by index,
      // so they sort equally.
      0
    );
  }
  function matchRouteBranch(branch, pathname) {
    let {
      routesMeta
    } = branch;
    let matchedParams = {};
    let matchedPathname = "/";
    let matches = [];
    for (let i2 = 0; i2 < routesMeta.length; ++i2) {
      let meta = routesMeta[i2];
      let end2 = i2 === routesMeta.length - 1;
      let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
      let match2 = matchPath({
        path: meta.relativePath,
        caseSensitive: meta.caseSensitive,
        end: end2
      }, remainingPathname);
      if (!match2)
        return null;
      Object.assign(matchedParams, match2.params);
      let route = meta.route;
      matches.push({
        // TODO: Can this as be avoided?
        params: matchedParams,
        pathname: joinPaths([matchedPathname, match2.pathname]),
        pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
        route
      });
      if (match2.pathnameBase !== "/") {
        matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
      }
    }
    return matches;
  }
  function matchPath(pattern, pathname) {
    if (typeof pattern === "string") {
      pattern = {
        path: pattern,
        caseSensitive: false,
        end: true
      };
    }
    let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);
    let match2 = pathname.match(matcher);
    if (!match2)
      return null;
    let matchedPathname = match2[0];
    let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
    let captureGroups = match2.slice(1);
    let params = paramNames.reduce((memo6, paramName, index2) => {
      if (paramName === "*") {
        let splatValue = captureGroups[index2] || "";
        pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
      }
      memo6[paramName] = safelyDecodeURIComponent(captureGroups[index2] || "", paramName);
      return memo6;
    }, {});
    return {
      params,
      pathname: matchedPathname,
      pathnameBase,
      pattern
    };
  }
  function compilePath(path2, caseSensitive, end2) {
    if (caseSensitive === void 0) {
      caseSensitive = false;
    }
    if (end2 === void 0) {
      end2 = true;
    }
    warning(path2 === "*" || !path2.endsWith("*") || path2.endsWith("/*"), 'Route path "' + path2 + '" will be treated as if it were ' + ('"' + path2.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path2.replace(/\*$/, "/*") + '".'));
    let paramNames = [];
    let regexpSource = "^" + path2.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^$?{}|()[\]]/g, "\\$&").replace(/\/:(\w+)/g, (_2, paramName) => {
      paramNames.push(paramName);
      return "/([^\\/]+)";
    });
    if (path2.endsWith("*")) {
      paramNames.push("*");
      regexpSource += path2 === "*" || path2 === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
    } else if (end2) {
      regexpSource += "\\/*$";
    } else if (path2 !== "" && path2 !== "/") {
      regexpSource += "(?:(?=\\/|$))";
    } else
      ;
    let matcher = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
    return [matcher, paramNames];
  }
  function safelyDecodeURI(value) {
    try {
      return decodeURI(value);
    } catch (error) {
      warning(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
      return value;
    }
  }
  function safelyDecodeURIComponent(value, paramName) {
    try {
      return decodeURIComponent(value);
    } catch (error) {
      warning(false, 'The value for the URL param "' + paramName + '" will not be decoded because' + (' the string "' + value + '" is a malformed URL segment. This is probably') + (" due to a bad percent encoding (" + error + ")."));
      return value;
    }
  }
  function stripBasename(pathname, basename3) {
    if (basename3 === "/")
      return pathname;
    if (!pathname.toLowerCase().startsWith(basename3.toLowerCase())) {
      return null;
    }
    let startIndex = basename3.endsWith("/") ? basename3.length - 1 : basename3.length;
    let nextChar = pathname.charAt(startIndex);
    if (nextChar && nextChar !== "/") {
      return null;
    }
    return pathname.slice(startIndex) || "/";
  }
  function resolvePath(to, fromPathname) {
    if (fromPathname === void 0) {
      fromPathname = "/";
    }
    let {
      pathname: toPathname,
      search: search2 = "",
      hash: hash2 = ""
    } = typeof to === "string" ? parsePath(to) : to;
    let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
    return {
      pathname,
      search: normalizeSearch(search2),
      hash: normalizeHash(hash2)
    };
  }
  function resolvePathname(relativePath, fromPathname) {
    let segments = fromPathname.replace(/\/+$/, "").split("/");
    let relativeSegments = relativePath.split("/");
    relativeSegments.forEach((segment) => {
      if (segment === "..") {
        if (segments.length > 1)
          segments.pop();
      } else if (segment !== ".") {
        segments.push(segment);
      }
    });
    return segments.length > 1 ? segments.join("/") : "/";
  }
  function getInvalidPathError(char2, field, dest, path2) {
    return "Cannot include a '" + char2 + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path2) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
  }
  function getPathContributingMatches(matches) {
    return matches.filter((match2, index2) => index2 === 0 || match2.route.path && match2.route.path.length > 0);
  }
  function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
    if (isPathRelative === void 0) {
      isPathRelative = false;
    }
    let to;
    if (typeof toArg === "string") {
      to = parsePath(toArg);
    } else {
      to = _extends2({}, toArg);
      invariant(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
      invariant(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
      invariant(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
    }
    let isEmptyPath = toArg === "" || to.pathname === "";
    let toPathname = isEmptyPath ? "/" : to.pathname;
    let from2;
    if (isPathRelative || toPathname == null) {
      from2 = locationPathname;
    } else {
      let routePathnameIndex = routePathnames.length - 1;
      if (toPathname.startsWith("..")) {
        let toSegments = toPathname.split("/");
        while (toSegments[0] === "..") {
          toSegments.shift();
          routePathnameIndex -= 1;
        }
        to.pathname = toSegments.join("/");
      }
      from2 = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
    }
    let path2 = resolvePath(to, from2);
    let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
    let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
    if (!path2.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
      path2.pathname += "/";
    }
    return path2;
  }
  var joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
  var normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
  var normalizeSearch = (search2) => !search2 || search2 === "?" ? "" : search2.startsWith("?") ? search2 : "?" + search2;
  var normalizeHash = (hash2) => !hash2 || hash2 === "#" ? "" : hash2.startsWith("#") ? hash2 : "#" + hash2;
  function isRouteErrorResponse(error) {
    return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
  }
  var validMutationMethodsArr = ["post", "put", "patch", "delete"];
  var validMutationMethods = new Set(validMutationMethodsArr);
  var validRequestMethodsArr = ["get", ...validMutationMethodsArr];
  var validRequestMethods = new Set(validRequestMethodsArr);
  var UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");

  // ../node_modules/react-router/dist/index.js
  function _extends3() {
    _extends3 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  var DataRouterContext = /* @__PURE__ */ React112.createContext(null);
  if (true) {
    DataRouterContext.displayName = "DataRouter";
  }
  var DataRouterStateContext = /* @__PURE__ */ React112.createContext(null);
  if (true) {
    DataRouterStateContext.displayName = "DataRouterState";
  }
  var AwaitContext = /* @__PURE__ */ React112.createContext(null);
  if (true) {
    AwaitContext.displayName = "Await";
  }
  var NavigationContext = /* @__PURE__ */ React112.createContext(null);
  if (true) {
    NavigationContext.displayName = "Navigation";
  }
  var LocationContext = /* @__PURE__ */ React112.createContext(null);
  if (true) {
    LocationContext.displayName = "Location";
  }
  var RouteContext = /* @__PURE__ */ React112.createContext({
    outlet: null,
    matches: [],
    isDataRoute: false
  });
  if (true) {
    RouteContext.displayName = "Route";
  }
  var RouteErrorContext = /* @__PURE__ */ React112.createContext(null);
  if (true) {
    RouteErrorContext.displayName = "RouteError";
  }
  function useHref(to, _temp) {
    let {
      relative: relative2
    } = _temp === void 0 ? {} : _temp;
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useHref() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      basename: basename3,
      navigator: navigator2
    } = React112.useContext(NavigationContext);
    let {
      hash: hash2,
      pathname,
      search: search2
    } = useResolvedPath(to, {
      relative: relative2
    });
    let joinedPathname = pathname;
    if (basename3 !== "/") {
      joinedPathname = pathname === "/" ? basename3 : joinPaths([basename3, pathname]);
    }
    return navigator2.createHref({
      pathname: joinedPathname,
      search: search2,
      hash: hash2
    });
  }
  function useInRouterContext() {
    return React112.useContext(LocationContext) != null;
  }
  function useLocation() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useLocation() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    return React112.useContext(LocationContext).location;
  }
  var navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
  function useIsomorphicLayoutEffect2(cb) {
    let isStatic = React112.useContext(NavigationContext).static;
    if (!isStatic) {
      React112.useLayoutEffect(cb);
    }
  }
  function useNavigate() {
    let {
      isDataRoute
    } = React112.useContext(RouteContext);
    return isDataRoute ? useNavigateStable() : useNavigateUnstable();
  }
  function useNavigateUnstable() {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useNavigate() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let dataRouterContext = React112.useContext(DataRouterContext);
    let {
      basename: basename3,
      navigator: navigator2
    } = React112.useContext(NavigationContext);
    let {
      matches
    } = React112.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
    let activeRef = React112.useRef(false);
    useIsomorphicLayoutEffect2(() => {
      activeRef.current = true;
    });
    let navigate = React112.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        navigator2.go(to);
        return;
      }
      let path2 = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
      if (dataRouterContext == null && basename3 !== "/") {
        path2.pathname = path2.pathname === "/" ? basename3 : joinPaths([basename3, path2.pathname]);
      }
      (!!options.replace ? navigator2.replace : navigator2.push)(path2, options.state, options);
    }, [basename3, navigator2, routePathnamesJson, locationPathname, dataRouterContext]);
    return navigate;
  }
  function useResolvedPath(to, _temp2) {
    let {
      relative: relative2
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      matches
    } = React112.useContext(RouteContext);
    let {
      pathname: locationPathname
    } = useLocation();
    let routePathnamesJson = JSON.stringify(getPathContributingMatches(matches).map((match2) => match2.pathnameBase));
    return React112.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative2 === "path"), [to, routePathnamesJson, locationPathname, relative2]);
  }
  function useRoutes(routes, locationArg) {
    return useRoutesImpl(routes, locationArg);
  }
  function useRoutesImpl(routes, locationArg, dataRouterState) {
    !useInRouterContext() ? true ? invariant(
      false,
      // TODO: This error is probably because they somehow have 2 versions of the
      // router loaded. We can help them understand how to avoid that.
      "useRoutes() may be used only in the context of a <Router> component."
    ) : invariant(false) : void 0;
    let {
      navigator: navigator2
    } = React112.useContext(NavigationContext);
    let {
      matches: parentMatches
    } = React112.useContext(RouteContext);
    let routeMatch = parentMatches[parentMatches.length - 1];
    let parentParams = routeMatch ? routeMatch.params : {};
    let parentPathname = routeMatch ? routeMatch.pathname : "/";
    let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
    let parentRoute = routeMatch && routeMatch.route;
    if (true) {
      let parentPath = parentRoute && parentRoute.path || "";
      warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
    }
    let locationFromContext = useLocation();
    let location2;
    if (locationArg) {
      var _parsedLocationArg$pa;
      let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
      !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant(false) : void 0;
      location2 = parsedLocationArg;
    } else {
      location2 = locationFromContext;
    }
    let pathname = location2.pathname || "/";
    let remainingPathname = parentPathnameBase === "/" ? pathname : pathname.slice(parentPathnameBase.length) || "/";
    let matches = matchRoutes(routes, {
      pathname: remainingPathname
    });
    if (true) {
      true ? warning(parentRoute || matches != null, 'No routes matched location "' + location2.pathname + location2.search + location2.hash + '" ') : void 0;
      true ? warning(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0, 'Matched leaf route at location "' + location2.pathname + location2.search + location2.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
    }
    let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
      params: Object.assign({}, parentParams, match2.params),
      pathname: joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathname).pathname : match2.pathname
      ]),
      pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
        parentPathnameBase,
        // Re-encode pathnames that were decoded inside matchRoutes
        navigator2.encodeLocation ? navigator2.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
      ])
    })), parentMatches, dataRouterState);
    if (locationArg && renderedMatches) {
      return /* @__PURE__ */ React112.createElement(LocationContext.Provider, {
        value: {
          location: _extends3({
            pathname: "/",
            search: "",
            hash: "",
            state: null,
            key: "default"
          }, location2),
          navigationType: Action.Pop
        }
      }, renderedMatches);
    }
    return renderedMatches;
  }
  function DefaultErrorComponent() {
    let error = useRouteError();
    let message5 = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
    let stack = error instanceof Error ? error.stack : null;
    let lightgrey = "rgba(200,200,200, 0.5)";
    let preStyles = {
      padding: "0.5rem",
      backgroundColor: lightgrey
    };
    let codeStyles = {
      padding: "2px 4px",
      backgroundColor: lightgrey
    };
    let devInfo = null;
    if (true) {
      console.error("Error handled by React Router default ErrorBoundary:", error);
      devInfo = /* @__PURE__ */ React112.createElement(React112.Fragment, null, /* @__PURE__ */ React112.createElement("p", null, "\u{1F4BF} Hey developer \u{1F44B}"), /* @__PURE__ */ React112.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", /* @__PURE__ */ React112.createElement("code", {
        style: codeStyles
      }, "ErrorBoundary"), " or", " ", /* @__PURE__ */ React112.createElement("code", {
        style: codeStyles
      }, "errorElement"), " prop on your route."));
    }
    return /* @__PURE__ */ React112.createElement(React112.Fragment, null, /* @__PURE__ */ React112.createElement("h2", null, "Unexpected Application Error!"), /* @__PURE__ */ React112.createElement("h3", {
      style: {
        fontStyle: "italic"
      }
    }, message5), stack ? /* @__PURE__ */ React112.createElement("pre", {
      style: preStyles
    }, stack) : null, devInfo);
  }
  var defaultErrorElement = /* @__PURE__ */ React112.createElement(DefaultErrorComponent, null);
  var RenderErrorBoundary = class extends React112.Component {
    constructor(props) {
      super(props);
      this.state = {
        location: props.location,
        revalidation: props.revalidation,
        error: props.error
      };
    }
    static getDerivedStateFromError(error) {
      return {
        error
      };
    }
    static getDerivedStateFromProps(props, state) {
      if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
        return {
          error: props.error,
          location: props.location,
          revalidation: props.revalidation
        };
      }
      return {
        error: props.error || state.error,
        location: state.location,
        revalidation: props.revalidation || state.revalidation
      };
    }
    componentDidCatch(error, errorInfo) {
      console.error("React Router caught the following error during render", error, errorInfo);
    }
    render() {
      return this.state.error ? /* @__PURE__ */ React112.createElement(RouteContext.Provider, {
        value: this.props.routeContext
      }, /* @__PURE__ */ React112.createElement(RouteErrorContext.Provider, {
        value: this.state.error,
        children: this.props.component
      })) : this.props.children;
    }
  };
  function RenderedRoute(_ref) {
    let {
      routeContext,
      match: match2,
      children
    } = _ref;
    let dataRouterContext = React112.useContext(DataRouterContext);
    if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
      dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
    }
    return /* @__PURE__ */ React112.createElement(RouteContext.Provider, {
      value: routeContext
    }, children);
  }
  function _renderMatches(matches, parentMatches, dataRouterState) {
    var _dataRouterState2;
    if (parentMatches === void 0) {
      parentMatches = [];
    }
    if (dataRouterState === void 0) {
      dataRouterState = null;
    }
    if (matches == null) {
      var _dataRouterState;
      if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
        matches = dataRouterState.matches;
      } else {
        return null;
      }
    }
    let renderedMatches = matches;
    let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
    if (errors != null) {
      let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]));
      !(errorIndex >= 0) ? true ? invariant(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant(false) : void 0;
      renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
    }
    return renderedMatches.reduceRight((outlet, match2, index2) => {
      let error = match2.route.id ? errors == null ? void 0 : errors[match2.route.id] : null;
      let errorElement = null;
      if (dataRouterState) {
        errorElement = match2.route.errorElement || defaultErrorElement;
      }
      let matches2 = parentMatches.concat(renderedMatches.slice(0, index2 + 1));
      let getChildren2 = () => {
        let children;
        if (error) {
          children = errorElement;
        } else if (match2.route.Component) {
          children = /* @__PURE__ */ React112.createElement(match2.route.Component, null);
        } else if (match2.route.element) {
          children = match2.route.element;
        } else {
          children = outlet;
        }
        return /* @__PURE__ */ React112.createElement(RenderedRoute, {
          match: match2,
          routeContext: {
            outlet,
            matches: matches2,
            isDataRoute: dataRouterState != null
          },
          children
        });
      };
      return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index2 === 0) ? /* @__PURE__ */ React112.createElement(RenderErrorBoundary, {
        location: dataRouterState.location,
        revalidation: dataRouterState.revalidation,
        component: errorElement,
        error,
        children: getChildren2(),
        routeContext: {
          outlet: null,
          matches: matches2,
          isDataRoute: true
        }
      }) : getChildren2();
    }, null);
  }
  var DataRouterHook = /* @__PURE__ */ function(DataRouterHook3) {
    DataRouterHook3["UseBlocker"] = "useBlocker";
    DataRouterHook3["UseRevalidator"] = "useRevalidator";
    DataRouterHook3["UseNavigateStable"] = "useNavigate";
    return DataRouterHook3;
  }(DataRouterHook || {});
  var DataRouterStateHook = /* @__PURE__ */ function(DataRouterStateHook3) {
    DataRouterStateHook3["UseBlocker"] = "useBlocker";
    DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
    DataRouterStateHook3["UseActionData"] = "useActionData";
    DataRouterStateHook3["UseRouteError"] = "useRouteError";
    DataRouterStateHook3["UseNavigation"] = "useNavigation";
    DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
    DataRouterStateHook3["UseMatches"] = "useMatches";
    DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
    DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
    DataRouterStateHook3["UseRouteId"] = "useRouteId";
    return DataRouterStateHook3;
  }(DataRouterStateHook || {});
  function getDataRouterConsoleError(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext(hookName) {
    let ctx = React112.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState(hookName) {
    let state = React112.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useRouteContext(hookName) {
    let route = React112.useContext(RouteContext);
    !route ? true ? invariant(false, getDataRouterConsoleError(hookName)) : invariant(false) : void 0;
    return route;
  }
  function useCurrentRouteId(hookName) {
    let route = useRouteContext(hookName);
    let thisRoute = route.matches[route.matches.length - 1];
    !thisRoute.route.id ? true ? invariant(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant(false) : void 0;
    return thisRoute.route.id;
  }
  function useRouteId() {
    return useCurrentRouteId(DataRouterStateHook.UseRouteId);
  }
  function useNavigation() {
    let state = useDataRouterState(DataRouterStateHook.UseNavigation);
    return state.navigation;
  }
  function useMatches() {
    let {
      matches,
      loaderData
    } = useDataRouterState(DataRouterStateHook.UseMatches);
    return React112.useMemo(() => matches.map((match2) => {
      let {
        pathname,
        params
      } = match2;
      return {
        id: match2.route.id,
        pathname,
        params,
        data: loaderData[match2.route.id],
        handle: match2.route.handle
      };
    }), [matches, loaderData]);
  }
  function useRouteError() {
    var _state$errors;
    let error = React112.useContext(RouteErrorContext);
    let state = useDataRouterState(DataRouterStateHook.UseRouteError);
    let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
    if (error) {
      return error;
    }
    return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
  }
  function useNavigateStable() {
    let {
      router
    } = useDataRouterContext(DataRouterHook.UseNavigateStable);
    let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
    let activeRef = React112.useRef(false);
    useIsomorphicLayoutEffect2(() => {
      activeRef.current = true;
    });
    let navigate = React112.useCallback(function(to, options) {
      if (options === void 0) {
        options = {};
      }
      true ? warning(activeRef.current, navigateEffectWarning) : void 0;
      if (!activeRef.current)
        return;
      if (typeof to === "number") {
        router.navigate(to);
      } else {
        router.navigate(to, _extends3({
          fromRouteId: id
        }, options));
      }
    }, [router, id]);
    return navigate;
  }
  var alreadyWarned = {};
  function warningOnce(key, cond, message5) {
    if (!cond && !alreadyWarned[key]) {
      alreadyWarned[key] = true;
      true ? warning(false, message5) : void 0;
    }
  }
  var START_TRANSITION = "startTransition";
  var startTransitionImpl = React112[START_TRANSITION];
  function Router(_ref5) {
    let {
      basename: basenameProp = "/",
      children = null,
      location: locationProp,
      navigationType = Action.Pop,
      navigator: navigator2,
      static: staticProp = false
    } = _ref5;
    !!useInRouterContext() ? true ? invariant(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant(false) : void 0;
    let basename3 = basenameProp.replace(/^\/*/, "/");
    let navigationContext = React112.useMemo(() => ({
      basename: basename3,
      navigator: navigator2,
      static: staticProp
    }), [basename3, navigator2, staticProp]);
    if (typeof locationProp === "string") {
      locationProp = parsePath(locationProp);
    }
    let {
      pathname = "/",
      search: search2 = "",
      hash: hash2 = "",
      state = null,
      key = "default"
    } = locationProp;
    let locationContext = React112.useMemo(() => {
      let trailingPathname = stripBasename(pathname, basename3);
      if (trailingPathname == null) {
        return null;
      }
      return {
        location: {
          pathname: trailingPathname,
          search: search2,
          hash: hash2,
          state,
          key
        },
        navigationType
      };
    }, [basename3, pathname, search2, hash2, state, key, navigationType]);
    true ? warning(locationContext != null, '<Router basename="' + basename3 + '"> is not able to match the URL ' + ('"' + pathname + search2 + hash2 + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
    if (locationContext == null) {
      return null;
    }
    return /* @__PURE__ */ React112.createElement(NavigationContext.Provider, {
      value: navigationContext
    }, /* @__PURE__ */ React112.createElement(LocationContext.Provider, {
      children,
      value: locationContext
    }));
  }
  var neverSettledPromise = new Promise(() => {
  });

  // ../node_modules/react-router-dom/dist/index.js
  function _extends4() {
    _extends4 = Object.assign ? Object.assign.bind() : function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends4.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var defaultMethod = "get";
  var defaultEncType = "application/x-www-form-urlencoded";
  function isHtmlElement(object2) {
    return object2 != null && typeof object2.tagName === "string";
  }
  function isButtonElement(object2) {
    return isHtmlElement(object2) && object2.tagName.toLowerCase() === "button";
  }
  function isFormElement(object2) {
    return isHtmlElement(object2) && object2.tagName.toLowerCase() === "form";
  }
  function isInputElement(object2) {
    return isHtmlElement(object2) && object2.tagName.toLowerCase() === "input";
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  function shouldProcessLinkClick(event, target) {
    return event.button === 0 && // Ignore everything but left clicks
    (!target || target === "_self") && // Let browser handle "target=_blank" etc.
    !isModifiedEvent(event);
  }
  var _formDataSupportsSubmitter = null;
  function isFormDataSubmitterSupported() {
    if (_formDataSupportsSubmitter === null) {
      try {
        new FormData(
          document.createElement("form"),
          // @ts-expect-error if FormData supports the submitter parameter, this will throw
          0
        );
        _formDataSupportsSubmitter = false;
      } catch (e2) {
        _formDataSupportsSubmitter = true;
      }
    }
    return _formDataSupportsSubmitter;
  }
  var supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
  function getFormEncType(encType) {
    if (encType != null && !supportedFormEncTypes.has(encType)) {
      true ? warning(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')) : void 0;
      return null;
    }
    return encType;
  }
  function getFormSubmissionInfo(target, basename3) {
    let method;
    let action;
    let encType;
    let formData;
    let body4;
    if (isFormElement(target)) {
      let attr = target.getAttribute("action");
      action = attr ? stripBasename(attr, basename3) : null;
      method = target.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(target);
    } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
      let form = target.form;
      if (form == null) {
        throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
      }
      let attr = target.getAttribute("formaction") || form.getAttribute("action");
      action = attr ? stripBasename(attr, basename3) : null;
      method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
      encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
      formData = new FormData(form, target);
      if (!isFormDataSubmitterSupported()) {
        let {
          name,
          type,
          value
        } = target;
        if (type === "image") {
          let prefix2 = name ? name + "." : "";
          formData.append(prefix2 + "x", "0");
          formData.append(prefix2 + "y", "0");
        } else if (name) {
          formData.append(name, value);
        }
      }
    } else if (isHtmlElement(target)) {
      throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
    } else {
      method = defaultMethod;
      action = null;
      encType = defaultEncType;
      body4 = target;
    }
    if (formData && encType === "text/plain") {
      body4 = formData;
      formData = void 0;
    }
    return {
      action,
      method: method.toLowerCase(),
      encType,
      formData,
      body: body4
    };
  }
  var _excluded = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset"];
  var _excluded2 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "children"];
  var _excluded3 = ["reloadDocument", "replace", "state", "method", "action", "onSubmit", "submit", "relative", "preventScrollReset"];
  var START_TRANSITION2 = "startTransition";
  var startTransitionImpl2 = React113[START_TRANSITION2];
  function BrowserRouter(_ref) {
    let {
      basename: basename3,
      children,
      future,
      window: window2
    } = _ref;
    let historyRef = React113.useRef();
    if (historyRef.current == null) {
      historyRef.current = createBrowserHistory({
        window: window2,
        v5Compat: true
      });
    }
    let history = historyRef.current;
    let [state, setStateImpl] = React113.useState({
      action: history.action,
      location: history.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React113.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React113.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React113.createElement(Router, {
      basename: basename3,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    });
  }
  function HistoryRouter(_ref3) {
    let {
      basename: basename3,
      children,
      future,
      history
    } = _ref3;
    let [state, setStateImpl] = React113.useState({
      action: history.action,
      location: history.location
    });
    let {
      v7_startTransition
    } = future || {};
    let setState = React113.useCallback((newState) => {
      v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
    }, [setStateImpl, v7_startTransition]);
    React113.useLayoutEffect(() => history.listen(setState), [history, setState]);
    return /* @__PURE__ */ React113.createElement(Router, {
      basename: basename3,
      children,
      location: state.location,
      navigationType: state.action,
      navigator: history
    });
  }
  if (true) {
    HistoryRouter.displayName = "unstable_HistoryRouter";
  }
  var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  var ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
  var Link2 = /* @__PURE__ */ React113.forwardRef(function LinkWithRef(_ref4, ref) {
    let {
      onClick,
      relative: relative2,
      reloadDocument,
      replace: replace2,
      state,
      target,
      to,
      preventScrollReset
    } = _ref4, rest = _objectWithoutPropertiesLoose2(_ref4, _excluded);
    let {
      basename: basename3
    } = React113.useContext(NavigationContext);
    let absoluteHref;
    let isExternal = false;
    if (typeof to === "string" && ABSOLUTE_URL_REGEX.test(to)) {
      absoluteHref = to;
      if (isBrowser) {
        try {
          let currentUrl = new URL(window.location.href);
          let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
          let path2 = stripBasename(targetUrl.pathname, basename3);
          if (targetUrl.origin === currentUrl.origin && path2 != null) {
            to = path2 + targetUrl.search + targetUrl.hash;
          } else {
            isExternal = true;
          }
        } catch (e2) {
          true ? warning(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
        }
      }
    }
    let href = useHref(to, {
      relative: relative2
    });
    let internalOnClick = useLinkClickHandler(to, {
      replace: replace2,
      state,
      target,
      preventScrollReset,
      relative: relative2
    });
    function handleClick(event) {
      if (onClick)
        onClick(event);
      if (!event.defaultPrevented) {
        internalOnClick(event);
      }
    }
    return (
      // eslint-disable-next-line jsx-a11y/anchor-has-content
      /* @__PURE__ */ React113.createElement("a", _extends4({}, rest, {
        href: absoluteHref || href,
        onClick: isExternal || reloadDocument ? onClick : handleClick,
        ref,
        target
      }))
    );
  });
  if (true) {
    Link2.displayName = "Link";
  }
  var NavLink = /* @__PURE__ */ React113.forwardRef(function NavLinkWithRef(_ref5, ref) {
    let {
      "aria-current": ariaCurrentProp = "page",
      caseSensitive = false,
      className: classNameProp = "",
      end: end2 = false,
      style: styleProp,
      to,
      children
    } = _ref5, rest = _objectWithoutPropertiesLoose2(_ref5, _excluded2);
    let path2 = useResolvedPath(to, {
      relative: rest.relative
    });
    let location2 = useLocation();
    let routerState = React113.useContext(DataRouterStateContext);
    let {
      navigator: navigator2
    } = React113.useContext(NavigationContext);
    let toPathname = navigator2.encodeLocation ? navigator2.encodeLocation(path2).pathname : path2.pathname;
    let locationPathname = location2.pathname;
    let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
    if (!caseSensitive) {
      locationPathname = locationPathname.toLowerCase();
      nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
      toPathname = toPathname.toLowerCase();
    }
    let isActive = locationPathname === toPathname || !end2 && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === "/";
    let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end2 && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
    let ariaCurrent = isActive ? ariaCurrentProp : void 0;
    let className;
    if (typeof classNameProp === "function") {
      className = classNameProp({
        isActive,
        isPending
      });
    } else {
      className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null].filter(Boolean).join(" ");
    }
    let style = typeof styleProp === "function" ? styleProp({
      isActive,
      isPending
    }) : styleProp;
    return /* @__PURE__ */ React113.createElement(Link2, _extends4({}, rest, {
      "aria-current": ariaCurrent,
      className,
      ref,
      style,
      to
    }), typeof children === "function" ? children({
      isActive,
      isPending
    }) : children);
  });
  if (true) {
    NavLink.displayName = "NavLink";
  }
  var Form = /* @__PURE__ */ React113.forwardRef((props, ref) => {
    let submit = useSubmit();
    return /* @__PURE__ */ React113.createElement(FormImpl, _extends4({}, props, {
      submit,
      ref
    }));
  });
  if (true) {
    Form.displayName = "Form";
  }
  var FormImpl = /* @__PURE__ */ React113.forwardRef((_ref6, forwardedRef) => {
    let {
      reloadDocument,
      replace: replace2,
      state,
      method = defaultMethod,
      action,
      onSubmit,
      submit,
      relative: relative2,
      preventScrollReset
    } = _ref6, props = _objectWithoutPropertiesLoose2(_ref6, _excluded3);
    let formMethod = method.toLowerCase() === "get" ? "get" : "post";
    let formAction = useFormAction(action, {
      relative: relative2
    });
    let submitHandler = (event) => {
      onSubmit && onSubmit(event);
      if (event.defaultPrevented)
        return;
      event.preventDefault();
      let submitter = event.nativeEvent.submitter;
      let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
      submit(submitter || event.currentTarget, {
        method: submitMethod,
        replace: replace2,
        state,
        relative: relative2,
        preventScrollReset
      });
    };
    return /* @__PURE__ */ React113.createElement("form", _extends4({
      ref: forwardedRef,
      method: formMethod,
      action: formAction,
      onSubmit: reloadDocument ? onSubmit : submitHandler
    }, props));
  });
  if (true) {
    FormImpl.displayName = "FormImpl";
  }
  function ScrollRestoration(_ref7) {
    let {
      getKey,
      storageKey
    } = _ref7;
    useScrollRestoration({
      getKey,
      storageKey
    });
    return null;
  }
  if (true) {
    ScrollRestoration.displayName = "ScrollRestoration";
  }
  var DataRouterHook2;
  (function(DataRouterHook3) {
    DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
    DataRouterHook3["UseSubmit"] = "useSubmit";
    DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
    DataRouterHook3["UseFetcher"] = "useFetcher";
  })(DataRouterHook2 || (DataRouterHook2 = {}));
  var DataRouterStateHook2;
  (function(DataRouterStateHook3) {
    DataRouterStateHook3["UseFetchers"] = "useFetchers";
    DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
  })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
  function getDataRouterConsoleError2(hookName) {
    return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
  }
  function useDataRouterContext2(hookName) {
    let ctx = React113.useContext(DataRouterContext);
    !ctx ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return ctx;
  }
  function useDataRouterState2(hookName) {
    let state = React113.useContext(DataRouterStateContext);
    !state ? true ? invariant(false, getDataRouterConsoleError2(hookName)) : invariant(false) : void 0;
    return state;
  }
  function useLinkClickHandler(to, _temp) {
    let {
      target,
      replace: replaceProp,
      state,
      preventScrollReset,
      relative: relative2
    } = _temp === void 0 ? {} : _temp;
    let navigate = useNavigate();
    let location2 = useLocation();
    let path2 = useResolvedPath(to, {
      relative: relative2
    });
    return React113.useCallback((event) => {
      if (shouldProcessLinkClick(event, target)) {
        event.preventDefault();
        let replace2 = replaceProp !== void 0 ? replaceProp : createPath(location2) === createPath(path2);
        navigate(to, {
          replace: replace2,
          state,
          preventScrollReset,
          relative: relative2
        });
      }
    }, [location2, navigate, path2, replaceProp, state, target, to, preventScrollReset, relative2]);
  }
  function validateClientSideSubmission() {
    if (typeof document === "undefined") {
      throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
    }
  }
  function useSubmit() {
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseSubmit);
    let {
      basename: basename3
    } = React113.useContext(NavigationContext);
    let currentRouteId = useRouteId();
    return React113.useCallback(function(target, options) {
      if (options === void 0) {
        options = {};
      }
      validateClientSideSubmission();
      let {
        action,
        method,
        encType,
        formData,
        body: body4
      } = getFormSubmissionInfo(target, basename3);
      router.navigate(options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body: body4,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        replace: options.replace,
        state: options.state,
        fromRouteId: currentRouteId
      });
    }, [router, basename3, currentRouteId]);
  }
  function useFormAction(action, _temp2) {
    let {
      relative: relative2
    } = _temp2 === void 0 ? {} : _temp2;
    let {
      basename: basename3
    } = React113.useContext(NavigationContext);
    let routeContext = React113.useContext(RouteContext);
    !routeContext ? true ? invariant(false, "useFormAction must be used inside a RouteContext") : invariant(false) : void 0;
    let [match2] = routeContext.matches.slice(-1);
    let path2 = _extends4({}, useResolvedPath(action ? action : ".", {
      relative: relative2
    }));
    let location2 = useLocation();
    if (action == null) {
      path2.search = location2.search;
      if (match2.route.index) {
        let params = new URLSearchParams(path2.search);
        params.delete("index");
        path2.search = params.toString() ? "?" + params.toString() : "";
      }
    }
    if ((!action || action === ".") && match2.route.index) {
      path2.search = path2.search ? path2.search.replace(/^\?/, "?index&") : "?index";
    }
    if (basename3 !== "/") {
      path2.pathname = path2.pathname === "/" ? basename3 : joinPaths([basename3, path2.pathname]);
    }
    return createPath(path2);
  }
  var SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
  var savedScrollPositions = {};
  function useScrollRestoration(_temp3) {
    let {
      getKey,
      storageKey
    } = _temp3 === void 0 ? {} : _temp3;
    let {
      router
    } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
    let {
      restoreScrollPosition,
      preventScrollReset
    } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
    let {
      basename: basename3
    } = React113.useContext(NavigationContext);
    let location2 = useLocation();
    let matches = useMatches();
    let navigation = useNavigation();
    React113.useEffect(() => {
      window.history.scrollRestoration = "manual";
      return () => {
        window.history.scrollRestoration = "auto";
      };
    }, []);
    usePageHide(React113.useCallback(() => {
      if (navigation.state === "idle") {
        let key = (getKey ? getKey(location2, matches) : null) || location2.key;
        savedScrollPositions[key] = window.scrollY;
      }
      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
      window.history.scrollRestoration = "auto";
    }, [storageKey, getKey, navigation.state, location2, matches]));
    if (typeof document !== "undefined") {
      React113.useLayoutEffect(() => {
        try {
          let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
          if (sessionPositions) {
            savedScrollPositions = JSON.parse(sessionPositions);
          }
        } catch (e2) {
        }
      }, [storageKey]);
      React113.useLayoutEffect(() => {
        let getKeyWithoutBasename = getKey && basename3 !== "/" ? (location3, matches2) => getKey(
          // Strip the basename to match useLocation()
          _extends4({}, location3, {
            pathname: stripBasename(location3.pathname, basename3) || location3.pathname
          }),
          matches2
        ) : getKey;
        let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
        return () => disableScrollRestoration && disableScrollRestoration();
      }, [router, basename3, getKey]);
      React113.useLayoutEffect(() => {
        if (restoreScrollPosition === false) {
          return;
        }
        if (typeof restoreScrollPosition === "number") {
          window.scrollTo(0, restoreScrollPosition);
          return;
        }
        if (location2.hash) {
          let el = document.getElementById(decodeURIComponent(location2.hash.slice(1)));
          if (el) {
            el.scrollIntoView();
            return;
          }
        }
        if (preventScrollReset === true) {
          return;
        }
        window.scrollTo(0, 0);
      }, [location2, restoreScrollPosition, preventScrollReset]);
    }
  }
  function usePageHide(callback, options) {
    let {
      capture
    } = options || {};
    React113.useEffect(() => {
      let opts = capture != null ? {
        capture
      } : void 0;
      window.addEventListener("pagehide", callback, opts);
      return () => {
        window.removeEventListener("pagehide", callback, opts);
      };
    }, [callback, capture]);
  }

  // ../node_modules/react-error-boundary/dist/react-error-boundary.esm.js
  var import_react39 = __toESM(require_react());
  var ErrorBoundaryContext = (0, import_react39.createContext)(null);
  var initialState = {
    didCatch: false,
    error: null
  };
  var ErrorBoundary = class extends import_react39.Component {
    constructor(props) {
      super(props);
      this.resetErrorBoundary = this.resetErrorBoundary.bind(this);
      this.state = initialState;
    }
    static getDerivedStateFromError(error) {
      return {
        didCatch: true,
        error
      };
    }
    resetErrorBoundary() {
      const {
        error
      } = this.state;
      if (error !== null) {
        var _this$props$onReset, _this$props;
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        (_this$props$onReset = (_this$props = this.props).onReset) === null || _this$props$onReset === void 0 ? void 0 : _this$props$onReset.call(_this$props, {
          args,
          reason: "imperative-api"
        });
        this.setState(initialState);
      }
    }
    componentDidCatch(error, info) {
      var _this$props$onError, _this$props2;
      (_this$props$onError = (_this$props2 = this.props).onError) === null || _this$props$onError === void 0 ? void 0 : _this$props$onError.call(_this$props2, error, info);
    }
    componentDidUpdate(prevProps, prevState) {
      const {
        didCatch
      } = this.state;
      const {
        resetKeys
      } = this.props;
      if (didCatch && prevState.error !== null && hasArrayChanged(prevProps.resetKeys, resetKeys)) {
        var _this$props$onReset2, _this$props3;
        (_this$props$onReset2 = (_this$props3 = this.props).onReset) === null || _this$props$onReset2 === void 0 ? void 0 : _this$props$onReset2.call(_this$props3, {
          next: resetKeys,
          prev: prevProps.resetKeys,
          reason: "keys"
        });
        this.setState(initialState);
      }
    }
    render() {
      const {
        children,
        fallbackRender,
        FallbackComponent,
        fallback: fallback2
      } = this.props;
      const {
        didCatch,
        error
      } = this.state;
      let childToRender = children;
      if (didCatch) {
        const props = {
          error,
          resetErrorBoundary: this.resetErrorBoundary
        };
        if ((0, import_react39.isValidElement)(fallback2)) {
          childToRender = fallback2;
        } else if (typeof fallbackRender === "function") {
          childToRender = fallbackRender(props);
        } else if (FallbackComponent) {
          childToRender = (0, import_react39.createElement)(FallbackComponent, props);
        } else {
          throw error;
        }
      }
      return (0, import_react39.createElement)(ErrorBoundaryContext.Provider, {
        value: {
          didCatch,
          error,
          resetErrorBoundary: this.resetErrorBoundary
        }
      }, childToRender);
    }
  };
  function hasArrayChanged() {
    let a2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    let b3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    return a2.length !== b3.length || a2.some((item, index2) => !Object.is(item, b3[index2]));
  }

  // src/components/FallbackError.tsx
  var import_react40 = __toESM(require_react(), 1);
  var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
  var FallbackError = ({ error, resetErrorBoundary }) => {
    const [open, setOpen] = (0, import_react40.useState)(true);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Dialog, { open, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(DialogSurface, { children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(DialogBody, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(DialogTitle, { children: "Unhandled Error" }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(DialogContent, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("h4", { children: error.message.toString() }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("pre", { children: error.stack })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(DialogActions, { children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(DialogTrigger, { disableButtonEnhancement: true, children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(Button, { appearance: "secondary", onClick: () => resetErrorBoundary(), children: "Close" }) }) })
    ] }) }) });
  };

  // ../node_modules/tslib/tslib.es6.mjs
  var extendStatics = function(d2, b3) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b4) {
      d3.__proto__ = b4;
    } || function(d3, b4) {
      for (var p2 in b4)
        if (Object.prototype.hasOwnProperty.call(b4, p2))
          d3[p2] = b4[p2];
    };
    return extendStatics(d2, b3);
  };
  function __extends(d2, b3) {
    if (typeof b3 !== "function" && b3 !== null)
      throw new TypeError("Class extends value " + String(b3) + " is not a constructor or null");
    extendStatics(d2, b3);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b3 === null ? Object.create(b3) : (__.prototype = b3.prototype, new __());
  }
  var __assign = function() {
    __assign = Object.assign || function __assign3(t2) {
      for (var s2, i2 = 1, n3 = arguments.length; i2 < n3; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign.apply(this, arguments);
  };
  function __rest(s2, e2) {
    var t2 = {};
    for (var p2 in s2)
      if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
        t2[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
        if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
          t2[p2[i2]] = s2[p2[i2]];
      }
    return t2;
  }
  function __decorate(decorators, target, key, desc) {
    var c2 = arguments.length, r = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
      r = Reflect.decorate(decorators, target, key, desc);
    else
      for (var i2 = decorators.length - 1; i2 >= 0; i2--)
        if (d2 = decorators[i2])
          r = (c2 < 3 ? d2(r) : c2 > 3 ? d2(target, key, r) : d2(target, key)) || r;
    return c2 > 3 && r && Object.defineProperty(target, key, r), r;
  }
  function __spreadArray(to, from2, pack) {
    if (pack || arguments.length === 2)
      for (var i2 = 0, l3 = from2.length, ar; i2 < l3; i2++) {
        if (ar || !(i2 in from2)) {
          if (!ar)
            ar = Array.prototype.slice.call(from2, 0, i2);
          ar[i2] = from2[i2];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from2));
  }

  // ../node_modules/@fluentui/merge-styles/lib/Stylesheet.js
  var InjectionMode = {
    /**
     * Avoids style injection, use getRules() to read the styles.
     */
    none: 0,
    /**
     * Inserts rules using the insertRule api.
     */
    insertNode: 1,
    /**
     * Appends rules using appendChild.
     */
    appendChild: 2
  };
  var STYLESHEET_SETTING = "__stylesheet__";
  var REUSE_STYLE_NODE = typeof navigator !== "undefined" && /rv:11.0/.test(navigator.userAgent);
  var _global = {};
  try {
    _global = window || {};
  } catch (_a5) {
  }
  var _stylesheet;
  var Stylesheet = (
    /** @class */
    function() {
      function Stylesheet2(config, serializedStylesheet) {
        var _a5, _b, _c, _d, _e, _f;
        this._rules = [];
        this._preservedRules = [];
        this._counter = 0;
        this._keyToClassName = {};
        this._onInsertRuleCallbacks = [];
        this._onResetCallbacks = [];
        this._classNameToArgs = {};
        this._config = __assign({
          // If there is no document we won't have an element to inject into.
          injectionMode: typeof document === "undefined" ? InjectionMode.none : InjectionMode.insertNode,
          defaultPrefix: "css",
          namespace: void 0,
          cspSettings: void 0
        }, config);
        this._classNameToArgs = (_a5 = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.classNameToArgs) !== null && _a5 !== void 0 ? _a5 : this._classNameToArgs;
        this._counter = (_b = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.counter) !== null && _b !== void 0 ? _b : this._counter;
        this._keyToClassName = (_d = (_c = this._config.classNameCache) !== null && _c !== void 0 ? _c : serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.keyToClassName) !== null && _d !== void 0 ? _d : this._keyToClassName;
        this._preservedRules = (_e = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.preservedRules) !== null && _e !== void 0 ? _e : this._preservedRules;
        this._rules = (_f = serializedStylesheet === null || serializedStylesheet === void 0 ? void 0 : serializedStylesheet.rules) !== null && _f !== void 0 ? _f : this._rules;
      }
      Stylesheet2.getInstance = function() {
        _stylesheet = _global[STYLESHEET_SETTING];
        if (!_stylesheet || _stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document) {
          var fabricConfig = (_global === null || _global === void 0 ? void 0 : _global.FabricConfig) || {};
          var stylesheet3 = new Stylesheet2(fabricConfig.mergeStyles, fabricConfig.serializedStylesheet);
          _stylesheet = stylesheet3;
          _global[STYLESHEET_SETTING] = stylesheet3;
        }
        return _stylesheet;
      };
      Stylesheet2.prototype.serialize = function() {
        return JSON.stringify({
          classNameToArgs: this._classNameToArgs,
          counter: this._counter,
          keyToClassName: this._keyToClassName,
          preservedRules: this._preservedRules,
          rules: this._rules
        });
      };
      Stylesheet2.prototype.setConfig = function(config) {
        this._config = __assign(__assign({}, this._config), config);
      };
      Stylesheet2.prototype.onReset = function(callback) {
        var _this = this;
        this._onResetCallbacks.push(callback);
        return function() {
          _this._onResetCallbacks = _this._onResetCallbacks.filter(function(cb) {
            return cb !== callback;
          });
        };
      };
      Stylesheet2.prototype.onInsertRule = function(callback) {
        var _this = this;
        this._onInsertRuleCallbacks.push(callback);
        return function() {
          _this._onInsertRuleCallbacks = _this._onInsertRuleCallbacks.filter(function(cb) {
            return cb !== callback;
          });
        };
      };
      Stylesheet2.prototype.getClassName = function(displayName) {
        var namespace = this._config.namespace;
        var prefix2 = displayName || this._config.defaultPrefix;
        return "".concat(namespace ? namespace + "-" : "").concat(prefix2, "-").concat(this._counter++);
      };
      Stylesheet2.prototype.cacheClassName = function(className, key, args, rules2) {
        this._keyToClassName[key] = className;
        this._classNameToArgs[className] = {
          args,
          rules: rules2
        };
      };
      Stylesheet2.prototype.classNameFromKey = function(key) {
        return this._keyToClassName[key];
      };
      Stylesheet2.prototype.getClassNameCache = function() {
        return this._keyToClassName;
      };
      Stylesheet2.prototype.argsFromClassName = function(className) {
        var entry = this._classNameToArgs[className];
        return entry && entry.args;
      };
      Stylesheet2.prototype.insertedRulesFromClassName = function(className) {
        var entry = this._classNameToArgs[className];
        return entry && entry.rules;
      };
      Stylesheet2.prototype.insertRule = function(rule, preserve) {
        var injectionMode = this._config.injectionMode;
        var element2 = injectionMode !== InjectionMode.none ? this._getStyleElement() : void 0;
        if (preserve) {
          this._preservedRules.push(rule);
        }
        if (element2) {
          switch (injectionMode) {
            case InjectionMode.insertNode:
              var sheet2 = element2.sheet;
              try {
                sheet2.insertRule(rule, sheet2.cssRules.length);
              } catch (e2) {
              }
              break;
            case InjectionMode.appendChild:
              element2.appendChild(document.createTextNode(rule));
              break;
          }
        } else {
          this._rules.push(rule);
        }
        if (this._config.onInsertRule) {
          this._config.onInsertRule(rule);
        }
        this._onInsertRuleCallbacks.forEach(function(callback) {
          return callback();
        });
      };
      Stylesheet2.prototype.getRules = function(includePreservedRules) {
        return (includePreservedRules ? this._preservedRules.join("") : "") + this._rules.join("");
      };
      Stylesheet2.prototype.reset = function() {
        this._rules = [];
        this._counter = 0;
        this._classNameToArgs = {};
        this._keyToClassName = {};
        this._onResetCallbacks.forEach(function(callback) {
          return callback();
        });
      };
      Stylesheet2.prototype.resetKeys = function() {
        this._keyToClassName = {};
      };
      Stylesheet2.prototype._getStyleElement = function() {
        var _this = this;
        if (!this._styleElement && typeof document !== "undefined") {
          this._styleElement = this._createStyleElement();
          if (!REUSE_STYLE_NODE) {
            window.requestAnimationFrame(function() {
              _this._styleElement = void 0;
            });
          }
        }
        return this._styleElement;
      };
      Stylesheet2.prototype._createStyleElement = function() {
        var head = document.head;
        var styleElement = document.createElement("style");
        var nodeToInsertBefore = null;
        styleElement.setAttribute("data-merge-styles", "true");
        var cspSettings = this._config.cspSettings;
        if (cspSettings) {
          if (cspSettings.nonce) {
            styleElement.setAttribute("nonce", cspSettings.nonce);
          }
        }
        if (this._lastStyleElement) {
          nodeToInsertBefore = this._lastStyleElement.nextElementSibling;
        } else {
          var placeholderStyleTag = this._findPlaceholderStyleTag();
          if (placeholderStyleTag) {
            nodeToInsertBefore = placeholderStyleTag.nextElementSibling;
          } else {
            nodeToInsertBefore = head.childNodes[0];
          }
        }
        head.insertBefore(styleElement, head.contains(nodeToInsertBefore) ? nodeToInsertBefore : null);
        this._lastStyleElement = styleElement;
        return styleElement;
      };
      Stylesheet2.prototype._findPlaceholderStyleTag = function() {
        var head = document.head;
        if (head) {
          return head.querySelector("style[data-merge-styles]");
        }
        return null;
      };
      return Stylesheet2;
    }()
  );

  // ../node_modules/@fluentui/merge-styles/lib/extractStyleParts.js
  function extractStyleParts() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var classes = [];
    var objects = [];
    var stylesheet3 = Stylesheet.getInstance();
    function _processArgs(argsList) {
      for (var _i2 = 0, argsList_1 = argsList; _i2 < argsList_1.length; _i2++) {
        var arg = argsList_1[_i2];
        if (arg) {
          if (typeof arg === "string") {
            if (arg.indexOf(" ") >= 0) {
              _processArgs(arg.split(" "));
            } else {
              var translatedArgs = stylesheet3.argsFromClassName(arg);
              if (translatedArgs) {
                _processArgs(translatedArgs);
              } else {
                if (classes.indexOf(arg) === -1) {
                  classes.push(arg);
                }
              }
            }
          } else if (Array.isArray(arg)) {
            _processArgs(arg);
          } else if (typeof arg === "object") {
            objects.push(arg);
          }
        }
      }
    }
    _processArgs(args);
    return {
      classes,
      objects
    };
  }

  // ../node_modules/@fluentui/merge-styles/lib/StyleOptionsState.js
  function setRTL(isRTL) {
    if (_rtl !== isRTL) {
      _rtl = isRTL;
    }
  }
  function getRTL() {
    if (_rtl === void 0) {
      _rtl = typeof document !== "undefined" && !!document.documentElement && document.documentElement.getAttribute("dir") === "rtl";
    }
    return _rtl;
  }
  var _rtl;
  _rtl = getRTL();
  function getStyleOptions() {
    return {
      rtl: getRTL()
    };
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/kebabRules.js
  var rules = {};
  function kebabRules(rulePairs, index2) {
    var rule = rulePairs[index2];
    if (rule.charAt(0) !== "-") {
      rulePairs[index2] = rules[rule] = rules[rule] || rule.replace(/([A-Z])/g, "-$1").toLowerCase();
    }
  }

  // ../node_modules/@fluentui/merge-styles/lib/getVendorSettings.js
  var _vendorSettings;
  function getVendorSettings() {
    var _a5;
    if (!_vendorSettings) {
      var doc = typeof document !== "undefined" ? document : void 0;
      var nav = typeof navigator !== "undefined" ? navigator : void 0;
      var userAgent = (_a5 = nav === null || nav === void 0 ? void 0 : nav.userAgent) === null || _a5 === void 0 ? void 0 : _a5.toLowerCase();
      if (!doc) {
        _vendorSettings = {
          isWebkit: true,
          isMoz: true,
          isOpera: true,
          isMs: true
        };
      } else {
        _vendorSettings = {
          isWebkit: !!(doc && "WebkitAppearance" in doc.documentElement.style),
          isMoz: !!(userAgent && userAgent.indexOf("firefox") > -1),
          isOpera: !!(userAgent && userAgent.indexOf("opera") > -1),
          isMs: !!(nav && (/rv:11.0/i.test(nav.userAgent) || /Edge\/\d./i.test(navigator.userAgent)))
        };
      }
    }
    return _vendorSettings;
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/prefixRules.js
  var autoPrefixNames = {
    "user-select": 1
  };
  function prefixRules(rulePairs, index2) {
    var vendorSettings = getVendorSettings();
    var name = rulePairs[index2];
    if (autoPrefixNames[name]) {
      var value = rulePairs[index2 + 1];
      if (autoPrefixNames[name]) {
        if (vendorSettings.isWebkit) {
          rulePairs.push("-webkit-" + name, value);
        }
        if (vendorSettings.isMoz) {
          rulePairs.push("-moz-" + name, value);
        }
        if (vendorSettings.isMs) {
          rulePairs.push("-ms-" + name, value);
        }
        if (vendorSettings.isOpera) {
          rulePairs.push("-o-" + name, value);
        }
      }
    }
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/provideUnits.js
  var NON_PIXEL_NUMBER_PROPS = [
    "column-count",
    "font-weight",
    "flex",
    "flex-grow",
    "flex-shrink",
    "fill-opacity",
    "opacity",
    "order",
    "z-index",
    "zoom"
  ];
  function provideUnits(rulePairs, index2) {
    var name = rulePairs[index2];
    var value = rulePairs[index2 + 1];
    if (typeof value === "number") {
      var isNonPixelProp = NON_PIXEL_NUMBER_PROPS.indexOf(name) > -1;
      var isVariableOrPrefixed = name.indexOf("--") > -1;
      var unit = isNonPixelProp || isVariableOrPrefixed ? "" : "px";
      rulePairs[index2 + 1] = "".concat(value).concat(unit);
    }
  }

  // ../node_modules/@fluentui/merge-styles/lib/transforms/rtlifyRules.js
  var _a;
  var LEFT = "left";
  var RIGHT = "right";
  var NO_FLIP = "@noflip";
  var NAME_REPLACEMENTS = (_a = {}, _a[LEFT] = RIGHT, _a[RIGHT] = LEFT, _a);
  var VALUE_REPLACEMENTS = {
    "w-resize": "e-resize",
    "sw-resize": "se-resize",
    "nw-resize": "ne-resize"
  };
  function rtlifyRules(options, rulePairs, index2) {
    if (options.rtl) {
      var name_1 = rulePairs[index2];
      if (!name_1) {
        return;
      }
      var value = rulePairs[index2 + 1];
      if (typeof value === "string" && value.indexOf(NO_FLIP) >= 0) {
        rulePairs[index2 + 1] = value.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g, "");
      } else if (name_1.indexOf(LEFT) >= 0) {
        rulePairs[index2] = name_1.replace(LEFT, RIGHT);
      } else if (name_1.indexOf(RIGHT) >= 0) {
        rulePairs[index2] = name_1.replace(RIGHT, LEFT);
      } else if (String(value).indexOf(LEFT) >= 0) {
        rulePairs[index2 + 1] = value.replace(LEFT, RIGHT);
      } else if (String(value).indexOf(RIGHT) >= 0) {
        rulePairs[index2 + 1] = value.replace(RIGHT, LEFT);
      } else if (NAME_REPLACEMENTS[name_1]) {
        rulePairs[index2] = NAME_REPLACEMENTS[name_1];
      } else if (VALUE_REPLACEMENTS[value]) {
        rulePairs[index2 + 1] = VALUE_REPLACEMENTS[value];
      } else {
        switch (name_1) {
          case "margin":
          case "padding":
            rulePairs[index2 + 1] = flipQuad(value);
            break;
          case "box-shadow":
            rulePairs[index2 + 1] = negateNum(value, 0);
            break;
        }
      }
    }
  }
  function negateNum(value, partIndex) {
    var parts = value.split(" ");
    var numberVal = parseInt(parts[partIndex], 10);
    parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));
    return parts.join(" ");
  }
  function flipQuad(value) {
    if (typeof value === "string") {
      var parts = value.split(" ");
      if (parts.length === 4) {
        return "".concat(parts[0], " ").concat(parts[3], " ").concat(parts[2], " ").concat(parts[1]);
      }
    }
    return value;
  }

  // ../node_modules/@fluentui/merge-styles/lib/tokenizeWithParentheses.js
  function tokenizeWithParentheses(value) {
    var parts = [];
    var partStart = 0;
    var parens = 0;
    for (var i2 = 0; i2 < value.length; i2++) {
      switch (value[i2]) {
        case "(":
          parens++;
          break;
        case ")":
          if (parens) {
            parens--;
          }
          break;
        case "	":
        case " ":
          if (!parens) {
            if (i2 > partStart) {
              parts.push(value.substring(partStart, i2));
            }
            partStart = i2 + 1;
          }
          break;
      }
    }
    if (partStart < value.length) {
      parts.push(value.substring(partStart));
    }
    return parts;
  }

  // ../node_modules/@fluentui/merge-styles/lib/styleToClassName.js
  var DISPLAY_NAME = "displayName";
  function getDisplayName(rules2) {
    var rootStyle = rules2 && rules2["&"];
    return rootStyle ? rootStyle.displayName : void 0;
  }
  var globalSelectorRegExp = /\:global\((.+?)\)/g;
  function expandCommaSeparatedGlobals(selectorWithGlobals) {
    if (!globalSelectorRegExp.test(selectorWithGlobals)) {
      return selectorWithGlobals;
    }
    var replacementInfo = [];
    var findGlobal = /\:global\((.+?)\)/g;
    var match2 = null;
    while (match2 = findGlobal.exec(selectorWithGlobals)) {
      if (match2[1].indexOf(",") > -1) {
        replacementInfo.push([
          match2.index,
          match2.index + match2[0].length,
          // Wrap each of the found selectors in :global()
          match2[1].split(",").map(function(v2) {
            return ":global(".concat(v2.trim(), ")");
          }).join(", ")
        ]);
      }
    }
    return replacementInfo.reverse().reduce(function(selector, _a5) {
      var matchIndex = _a5[0], matchEndIndex = _a5[1], replacement = _a5[2];
      var prefix2 = selector.slice(0, matchIndex);
      var suffix = selector.slice(matchEndIndex);
      return prefix2 + replacement + suffix;
    }, selectorWithGlobals);
  }
  function expandSelector(newSelector, currentSelector) {
    if (newSelector.indexOf(":global(") >= 0) {
      return newSelector.replace(globalSelectorRegExp, "$1");
    } else if (newSelector.indexOf(":") === 0) {
      return currentSelector + newSelector;
    } else if (newSelector.indexOf("&") < 0) {
      return currentSelector + " " + newSelector;
    }
    return newSelector;
  }
  function extractSelector(currentSelector, rules2, selector, value) {
    if (rules2 === void 0) {
      rules2 = { __order: [] };
    }
    if (selector.indexOf("@") === 0) {
      selector = selector + "{" + currentSelector;
      extractRules([value], rules2, selector);
    } else if (selector.indexOf(",") > -1) {
      expandCommaSeparatedGlobals(selector).split(",").map(function(s2) {
        return s2.trim();
      }).forEach(function(separatedSelector) {
        return extractRules([value], rules2, expandSelector(separatedSelector, currentSelector));
      });
    } else {
      extractRules([value], rules2, expandSelector(selector, currentSelector));
    }
  }
  function extractRules(args, rules2, currentSelector) {
    if (rules2 === void 0) {
      rules2 = { __order: [] };
    }
    if (currentSelector === void 0) {
      currentSelector = "&";
    }
    var stylesheet3 = Stylesheet.getInstance();
    var currentRules = rules2[currentSelector];
    if (!currentRules) {
      currentRules = {};
      rules2[currentSelector] = currentRules;
      rules2.__order.push(currentSelector);
    }
    for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
      var arg = args_1[_i];
      if (typeof arg === "string") {
        var expandedRules = stylesheet3.argsFromClassName(arg);
        if (expandedRules) {
          extractRules(expandedRules, rules2, currentSelector);
        }
      } else if (Array.isArray(arg)) {
        extractRules(arg, rules2, currentSelector);
      } else {
        for (var prop in arg) {
          if (arg.hasOwnProperty(prop)) {
            var propValue = arg[prop];
            if (prop === "selectors") {
              var selectors2 = arg.selectors;
              for (var newSelector in selectors2) {
                if (selectors2.hasOwnProperty(newSelector)) {
                  extractSelector(currentSelector, rules2, newSelector, selectors2[newSelector]);
                }
              }
            } else if (typeof propValue === "object") {
              if (propValue !== null) {
                extractSelector(currentSelector, rules2, prop, propValue);
              }
            } else {
              if (propValue !== void 0) {
                if (prop === "margin" || prop === "padding") {
                  expandQuads(currentRules, prop, propValue);
                } else {
                  currentRules[prop] = propValue;
                }
              }
            }
          }
        }
      }
    }
    return rules2;
  }
  function expandQuads(currentRules, name, value) {
    var parts = typeof value === "string" ? tokenizeWithParentheses(value) : [value];
    if (parts.length === 0) {
      parts.push(value);
    }
    if (parts[parts.length - 1] === "!important") {
      parts = parts.slice(0, -1).map(function(p2) {
        return p2 + " !important";
      });
    }
    currentRules[name + "Top"] = parts[0];
    currentRules[name + "Right"] = parts[1] || parts[0];
    currentRules[name + "Bottom"] = parts[2] || parts[0];
    currentRules[name + "Left"] = parts[3] || parts[1] || parts[0];
  }
  function getKeyForRules(options, rules2) {
    var serialized = [options.rtl ? "rtl" : "ltr"];
    var hasProps = false;
    for (var _i = 0, _a5 = rules2.__order; _i < _a5.length; _i++) {
      var selector = _a5[_i];
      serialized.push(selector);
      var rulesForSelector = rules2[selector];
      for (var propName in rulesForSelector) {
        if (rulesForSelector.hasOwnProperty(propName) && rulesForSelector[propName] !== void 0) {
          hasProps = true;
          serialized.push(propName, rulesForSelector[propName]);
        }
      }
    }
    return hasProps ? serialized.join("") : void 0;
  }
  function repeatString(target, count) {
    if (count <= 0) {
      return "";
    }
    if (count === 1) {
      return target;
    }
    return target + repeatString(target, count - 1);
  }
  function serializeRuleEntries(options, ruleEntries) {
    if (!ruleEntries) {
      return "";
    }
    var allEntries = [];
    for (var entry in ruleEntries) {
      if (ruleEntries.hasOwnProperty(entry) && entry !== DISPLAY_NAME && ruleEntries[entry] !== void 0) {
        allEntries.push(entry, ruleEntries[entry]);
      }
    }
    for (var i2 = 0; i2 < allEntries.length; i2 += 2) {
      kebabRules(allEntries, i2);
      provideUnits(allEntries, i2);
      rtlifyRules(options, allEntries, i2);
      prefixRules(allEntries, i2);
    }
    for (var i2 = 1; i2 < allEntries.length; i2 += 4) {
      allEntries.splice(i2, 1, ":", allEntries[i2], ";");
    }
    return allEntries.join("");
  }
  function styleToRegistration(options) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var rules2 = extractRules(args);
    var key = getKeyForRules(options, rules2);
    if (key) {
      var stylesheet3 = Stylesheet.getInstance();
      var registration = {
        className: stylesheet3.classNameFromKey(key),
        key,
        args
      };
      if (!registration.className) {
        registration.className = stylesheet3.getClassName(getDisplayName(rules2));
        var rulesToInsert = [];
        for (var _a5 = 0, _b = rules2.__order; _a5 < _b.length; _a5++) {
          var selector = _b[_a5];
          rulesToInsert.push(selector, serializeRuleEntries(options, rules2[selector]));
        }
        registration.rulesToInsert = rulesToInsert;
      }
      return registration;
    }
    return void 0;
  }
  function applyRegistration(registration, specificityMultiplier) {
    if (specificityMultiplier === void 0) {
      specificityMultiplier = 1;
    }
    var stylesheet3 = Stylesheet.getInstance();
    var className = registration.className, key = registration.key, args = registration.args, rulesToInsert = registration.rulesToInsert;
    if (rulesToInsert) {
      for (var i2 = 0; i2 < rulesToInsert.length; i2 += 2) {
        var rules2 = rulesToInsert[i2 + 1];
        if (rules2) {
          var selector = rulesToInsert[i2];
          selector = selector.replace(/&/g, repeatString(".".concat(registration.className), specificityMultiplier));
          var processedRule = "".concat(selector, "{").concat(rules2, "}").concat(selector.indexOf("@") === 0 ? "}" : "");
          stylesheet3.insertRule(processedRule);
        }
      }
      stylesheet3.cacheClassName(className, key, args, rulesToInsert);
    }
  }
  function styleToClassName(options) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    var registration = styleToRegistration.apply(void 0, __spreadArray([options], args, false));
    if (registration) {
      applyRegistration(registration, options.specificityMultiplier);
      return registration.className;
    }
    return "";
  }

  // ../node_modules/@fluentui/merge-styles/lib/mergeStyles.js
  function mergeStyles() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return mergeCss(args, getStyleOptions());
  }
  function mergeCss(args, options) {
    var styleArgs = args instanceof Array ? args : [args];
    var _a5 = extractStyleParts(styleArgs), classes = _a5.classes, objects = _a5.objects;
    if (objects.length) {
      classes.push(styleToClassName(options || {}, objects));
    }
    return classes.join(" ");
  }

  // ../node_modules/@fluentui/merge-styles/lib/concatStyleSets.js
  function concatStyleSets() {
    var styleSets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styleSets[_i] = arguments[_i];
    }
    if (styleSets && styleSets.length === 1 && styleSets[0] && !styleSets[0].subComponentStyles) {
      return styleSets[0];
    }
    var mergedSet = {};
    var workingSubcomponentStyles = {};
    for (var _a5 = 0, styleSets_1 = styleSets; _a5 < styleSets_1.length; _a5++) {
      var currentSet = styleSets_1[_a5];
      if (currentSet) {
        for (var prop in currentSet) {
          if (currentSet.hasOwnProperty(prop)) {
            if (prop === "subComponentStyles" && currentSet.subComponentStyles !== void 0) {
              var currentComponentStyles = currentSet.subComponentStyles;
              for (var subCompProp in currentComponentStyles) {
                if (currentComponentStyles.hasOwnProperty(subCompProp)) {
                  if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {
                    workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);
                  } else {
                    workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];
                  }
                }
              }
              continue;
            }
            var mergedValue = mergedSet[prop];
            var currentValue = currentSet[prop];
            if (mergedValue === void 0) {
              mergedSet[prop] = currentValue;
            } else {
              mergedSet[prop] = __spreadArray(__spreadArray([], Array.isArray(mergedValue) ? mergedValue : [mergedValue], true), Array.isArray(currentValue) ? currentValue : [currentValue], true);
            }
          }
        }
      }
    }
    if (Object.keys(workingSubcomponentStyles).length > 0) {
      mergedSet.subComponentStyles = {};
      var mergedSubStyles = mergedSet.subComponentStyles;
      var _loop_1 = function(subCompProp2) {
        if (workingSubcomponentStyles.hasOwnProperty(subCompProp2)) {
          var workingSet_1 = workingSubcomponentStyles[subCompProp2];
          mergedSubStyles[subCompProp2] = function(styleProps) {
            return concatStyleSets.apply(void 0, workingSet_1.map(function(styleFunctionOrObject) {
              return typeof styleFunctionOrObject === "function" ? styleFunctionOrObject(styleProps) : styleFunctionOrObject;
            }));
          };
        }
      };
      for (var subCompProp in workingSubcomponentStyles) {
        _loop_1(subCompProp);
      }
    }
    return mergedSet;
  }

  // ../node_modules/@fluentui/merge-styles/lib/mergeStyleSets.js
  function mergeStyleSets() {
    var styleSets = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styleSets[_i] = arguments[_i];
    }
    return mergeCssSets(styleSets, getStyleOptions());
  }
  function mergeCssSets(styleSets, options) {
    var classNameSet = { subComponentStyles: {} };
    var styleSet = styleSets[0];
    if (!styleSet && styleSets.length <= 1) {
      return { subComponentStyles: {} };
    }
    var concatenatedStyleSet = concatStyleSets.apply(void 0, styleSets);
    var registrations = [];
    for (var styleSetArea in concatenatedStyleSet) {
      if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {
        if (styleSetArea === "subComponentStyles") {
          classNameSet.subComponentStyles = concatenatedStyleSet.subComponentStyles || {};
          continue;
        }
        var styles2 = concatenatedStyleSet[styleSetArea];
        var _a5 = extractStyleParts(styles2), classes = _a5.classes, objects = _a5.objects;
        if (objects === null || objects === void 0 ? void 0 : objects.length) {
          var registration = styleToRegistration(options || {}, { displayName: styleSetArea }, objects);
          if (registration) {
            registrations.push(registration);
            classNameSet[styleSetArea] = classes.concat([registration.className]).join(" ");
          }
        } else {
          classNameSet[styleSetArea] = classes.join(" ");
        }
      }
    }
    for (var _i = 0, registrations_1 = registrations; _i < registrations_1.length; _i++) {
      var registration = registrations_1[_i];
      if (registration) {
        applyRegistration(registration, options === null || options === void 0 ? void 0 : options.specificityMultiplier);
      }
    }
    return classNameSet;
  }

  // ../node_modules/@fluentui/merge-styles/lib/concatStyleSetsWithProps.js
  function concatStyleSetsWithProps(styleProps) {
    var allStyles = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      allStyles[_i - 1] = arguments[_i];
    }
    var result = [];
    for (var _a5 = 0, allStyles_1 = allStyles; _a5 < allStyles_1.length; _a5++) {
      var styles2 = allStyles_1[_a5];
      if (styles2) {
        result.push(typeof styles2 === "function" ? styles2(styleProps) : styles2);
      }
    }
    if (result.length === 1) {
      return result[0];
    } else if (result.length) {
      return concatStyleSets.apply(void 0, result);
    }
    return {};
  }

  // ../node_modules/@fluentui/merge-styles/lib/fontFace.js
  function fontFace(font) {
    var stylesheet3 = Stylesheet.getInstance();
    var rule = serializeRuleEntries(getStyleOptions(), font);
    var className = stylesheet3.classNameFromKey(rule);
    if (className) {
      return;
    }
    var name = stylesheet3.getClassName();
    stylesheet3.insertRule("@font-face{".concat(rule, "}"), true);
    stylesheet3.cacheClassName(name, rule, [], ["font-face", rule]);
  }

  // ../node_modules/@fluentui/merge-styles/lib/keyframes.js
  function keyframes(timeline) {
    var stylesheet3 = Stylesheet.getInstance();
    var rulesArray = [];
    for (var prop in timeline) {
      if (timeline.hasOwnProperty(prop)) {
        rulesArray.push(prop, "{", serializeRuleEntries(getStyleOptions(), timeline[prop]), "}");
      }
    }
    var rules2 = rulesArray.join("");
    var className = stylesheet3.classNameFromKey(rules2);
    if (className) {
      return className;
    }
    var name = stylesheet3.getClassName();
    stylesheet3.insertRule("@keyframes ".concat(name, "{").concat(rules2, "}"), true);
    stylesheet3.cacheClassName(name, rules2, [], ["keyframes", rules2]);
    return name;
  }

  // ../node_modules/@fluentui/set-version/lib/setVersion.js
  var packagesCache = {};
  var _win = void 0;
  try {
    _win = window;
  } catch (e2) {
  }
  function setVersion(packageName, packageVersion) {
    if (typeof _win !== "undefined") {
      var packages = _win.__packages__ = _win.__packages__ || {};
      if (!packages[packageName] || !packagesCache[packageName]) {
        packagesCache[packageName] = packageVersion;
        var versions = packages[packageName] = packages[packageName] || [];
        versions.push(packageVersion);
      }
    }
  }

  // ../node_modules/@fluentui/set-version/lib/index.js
  setVersion("@fluentui/set-version", "6.0.0");

  // ../node_modules/@fluentui/merge-styles/lib/version.js
  setVersion("@fluentui/merge-styles", "8.5.12");

  // ../node_modules/@fluentui/style-utilities/lib/utilities/buildClassMap.js
  function buildClassMap(styles2) {
    var classes = {};
    var _loop_1 = function(styleName2) {
      if (styles2.hasOwnProperty(styleName2)) {
        var className_1;
        Object.defineProperty(classes, styleName2, {
          get: function() {
            if (className_1 === void 0) {
              className_1 = mergeStyles(styles2[styleName2]).toString();
            }
            return className_1;
          },
          enumerable: true,
          configurable: true
        });
      }
    };
    for (var styleName in styles2) {
      _loop_1(styleName);
    }
    return classes;
  }

  // ../node_modules/@fluentui/utilities/lib/dom/canUseDOM.js
  function canUseDOM3() {
    return typeof window !== "undefined" && !!(window.document && // eslint-disable-next-line deprecation/deprecation
    window.document.createElement);
  }

  // ../node_modules/@fluentui/utilities/lib/dom/getWindow.js
  var _window = void 0;
  try {
    _window = window;
  } catch (e2) {
  }
  function getWindow(rootElement) {
    if (!canUseDOM3() || typeof _window === "undefined") {
      return void 0;
    } else {
      var el = rootElement;
      return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;
    }
  }

  // ../node_modules/@fluentui/utilities/lib/Async.js
  var Async = (
    /** @class */
    function() {
      function Async2(parent, onError) {
        this._timeoutIds = null;
        this._immediateIds = null;
        this._intervalIds = null;
        this._animationFrameIds = null;
        this._isDisposed = false;
        this._parent = parent || null;
        this._onErrorHandler = onError;
        this._noop = function() {
        };
      }
      Async2.prototype.dispose = function() {
        var id;
        this._isDisposed = true;
        this._parent = null;
        if (this._timeoutIds) {
          for (id in this._timeoutIds) {
            if (this._timeoutIds.hasOwnProperty(id)) {
              this.clearTimeout(parseInt(id, 10));
            }
          }
          this._timeoutIds = null;
        }
        if (this._immediateIds) {
          for (id in this._immediateIds) {
            if (this._immediateIds.hasOwnProperty(id)) {
              this.clearImmediate(parseInt(id, 10));
            }
          }
          this._immediateIds = null;
        }
        if (this._intervalIds) {
          for (id in this._intervalIds) {
            if (this._intervalIds.hasOwnProperty(id)) {
              this.clearInterval(parseInt(id, 10));
            }
          }
          this._intervalIds = null;
        }
        if (this._animationFrameIds) {
          for (id in this._animationFrameIds) {
            if (this._animationFrameIds.hasOwnProperty(id)) {
              this.cancelAnimationFrame(parseInt(id, 10));
            }
          }
          this._animationFrameIds = null;
        }
      };
      Async2.prototype.setTimeout = function(callback, duration) {
        var _this = this;
        var timeoutId = 0;
        if (!this._isDisposed) {
          if (!this._timeoutIds) {
            this._timeoutIds = {};
          }
          timeoutId = setTimeout(function() {
            try {
              if (_this._timeoutIds) {
                delete _this._timeoutIds[timeoutId];
              }
              callback.apply(_this._parent);
            } catch (e2) {
              _this._logError(e2);
            }
          }, duration);
          this._timeoutIds[timeoutId] = true;
        }
        return timeoutId;
      };
      Async2.prototype.clearTimeout = function(id) {
        if (this._timeoutIds && this._timeoutIds[id]) {
          clearTimeout(id);
          delete this._timeoutIds[id];
        }
      };
      Async2.prototype.setImmediate = function(callback, targetElement) {
        var _this = this;
        var immediateId = 0;
        var win2 = getWindow(targetElement);
        if (!this._isDisposed) {
          if (!this._immediateIds) {
            this._immediateIds = {};
          }
          var setImmediateCallback = function() {
            try {
              if (_this._immediateIds) {
                delete _this._immediateIds[immediateId];
              }
              callback.apply(_this._parent);
            } catch (e2) {
              _this._logError(e2);
            }
          };
          immediateId = win2.setTimeout(setImmediateCallback, 0);
          this._immediateIds[immediateId] = true;
        }
        return immediateId;
      };
      Async2.prototype.clearImmediate = function(id, targetElement) {
        var win2 = getWindow(targetElement);
        if (this._immediateIds && this._immediateIds[id]) {
          win2.clearTimeout(id);
          delete this._immediateIds[id];
        }
      };
      Async2.prototype.setInterval = function(callback, duration) {
        var _this = this;
        var intervalId = 0;
        if (!this._isDisposed) {
          if (!this._intervalIds) {
            this._intervalIds = {};
          }
          intervalId = setInterval(function() {
            try {
              callback.apply(_this._parent);
            } catch (e2) {
              _this._logError(e2);
            }
          }, duration);
          this._intervalIds[intervalId] = true;
        }
        return intervalId;
      };
      Async2.prototype.clearInterval = function(id) {
        if (this._intervalIds && this._intervalIds[id]) {
          clearInterval(id);
          delete this._intervalIds[id];
        }
      };
      Async2.prototype.throttle = function(func3, wait, options) {
        var _this = this;
        if (this._isDisposed) {
          return this._noop;
        }
        var waitMS = wait || 0;
        var leading = true;
        var trailing = true;
        var lastExecuteTime = 0;
        var lastResult;
        var lastArgs;
        var timeoutId = null;
        if (options && typeof options.leading === "boolean") {
          leading = options.leading;
        }
        if (options && typeof options.trailing === "boolean") {
          trailing = options.trailing;
        }
        var callback = function(userCall) {
          var now = Date.now();
          var delta = now - lastExecuteTime;
          var waitLength = leading ? waitMS - delta : waitMS;
          if (delta >= waitMS && (!userCall || leading)) {
            lastExecuteTime = now;
            if (timeoutId) {
              _this.clearTimeout(timeoutId);
              timeoutId = null;
            }
            lastResult = func3.apply(_this._parent, lastArgs);
          } else if (timeoutId === null && trailing) {
            timeoutId = _this.setTimeout(callback, waitLength);
          }
          return lastResult;
        };
        var resultFunction = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          lastArgs = args;
          return callback(true);
        };
        return resultFunction;
      };
      Async2.prototype.debounce = function(func3, wait, options) {
        var _this = this;
        if (this._isDisposed) {
          var noOpFunction = function() {
          };
          noOpFunction.cancel = function() {
            return;
          };
          noOpFunction.flush = function() {
            return null;
          };
          noOpFunction.pending = function() {
            return false;
          };
          return noOpFunction;
        }
        var waitMS = wait || 0;
        var leading = false;
        var trailing = true;
        var maxWait = null;
        var lastCallTime = 0;
        var lastExecuteTime = Date.now();
        var lastResult;
        var lastArgs;
        var timeoutId = null;
        if (options && typeof options.leading === "boolean") {
          leading = options.leading;
        }
        if (options && typeof options.trailing === "boolean") {
          trailing = options.trailing;
        }
        if (options && typeof options.maxWait === "number" && !isNaN(options.maxWait)) {
          maxWait = options.maxWait;
        }
        var markExecuted = function(time) {
          if (timeoutId) {
            _this.clearTimeout(timeoutId);
            timeoutId = null;
          }
          lastExecuteTime = time;
        };
        var invokeFunction = function(time) {
          markExecuted(time);
          lastResult = func3.apply(_this._parent, lastArgs);
        };
        var callback = function(userCall) {
          var now = Date.now();
          var executeImmediately = false;
          if (userCall) {
            if (leading && now - lastCallTime >= waitMS) {
              executeImmediately = true;
            }
            lastCallTime = now;
          }
          var delta = now - lastCallTime;
          var waitLength = waitMS - delta;
          var maxWaitDelta = now - lastExecuteTime;
          var maxWaitExpired = false;
          if (maxWait !== null) {
            if (maxWaitDelta >= maxWait && timeoutId) {
              maxWaitExpired = true;
            } else {
              waitLength = Math.min(waitLength, maxWait - maxWaitDelta);
            }
          }
          if (delta >= waitMS || maxWaitExpired || executeImmediately) {
            invokeFunction(now);
          } else if ((timeoutId === null || !userCall) && trailing) {
            timeoutId = _this.setTimeout(callback, waitLength);
          }
          return lastResult;
        };
        var pending = function() {
          return !!timeoutId;
        };
        var cancel = function() {
          if (pending()) {
            markExecuted(Date.now());
          }
        };
        var flush2 = function() {
          if (pending()) {
            invokeFunction(Date.now());
          }
          return lastResult;
        };
        var resultFunction = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          lastArgs = args;
          return callback(true);
        };
        resultFunction.cancel = cancel;
        resultFunction.flush = flush2;
        resultFunction.pending = pending;
        return resultFunction;
      };
      Async2.prototype.requestAnimationFrame = function(callback, targetElement) {
        var _this = this;
        var animationFrameId = 0;
        var win2 = getWindow(targetElement);
        if (!this._isDisposed) {
          if (!this._animationFrameIds) {
            this._animationFrameIds = {};
          }
          var animationFrameCallback = function() {
            try {
              if (_this._animationFrameIds) {
                delete _this._animationFrameIds[animationFrameId];
              }
              callback.apply(_this._parent);
            } catch (e2) {
              _this._logError(e2);
            }
          };
          animationFrameId = win2.requestAnimationFrame ? win2.requestAnimationFrame(animationFrameCallback) : win2.setTimeout(animationFrameCallback, 0);
          this._animationFrameIds[animationFrameId] = true;
        }
        return animationFrameId;
      };
      Async2.prototype.cancelAnimationFrame = function(id, targetElement) {
        var win2 = getWindow(targetElement);
        if (this._animationFrameIds && this._animationFrameIds[id]) {
          win2.cancelAnimationFrame ? win2.cancelAnimationFrame(id) : win2.clearTimeout(id);
          delete this._animationFrameIds[id];
        }
      };
      Async2.prototype._logError = function(e2) {
        if (this._onErrorHandler) {
          this._onErrorHandler(e2);
        }
      };
      return Async2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/object.js
  function shallowCompare(a2, b3) {
    if (!a2 || !b3) {
      return !a2 && !b3;
    }
    for (var propName in a2) {
      if (a2.hasOwnProperty(propName)) {
        if (!b3.hasOwnProperty(propName) || b3[propName] !== a2[propName]) {
          return false;
        }
      }
    }
    for (var propName in b3) {
      if (b3.hasOwnProperty(propName)) {
        if (!a2.hasOwnProperty(propName)) {
          return false;
        }
      }
    }
    return true;
  }
  function assign(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    return filteredAssign.apply(this, [null, target].concat(args));
  }
  function filteredAssign(isAllowed, target) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    target = target || {};
    for (var _a5 = 0, args_1 = args; _a5 < args_1.length; _a5++) {
      var sourceObject = args_1[_a5];
      if (sourceObject) {
        for (var propName in sourceObject) {
          if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {
            target[propName] = sourceObject[propName];
          }
        }
      }
    }
    return target;
  }

  // ../node_modules/@fluentui/utilities/lib/EventGroup.js
  var EventGroup = (
    /** @class */
    function() {
      function EventGroup2(parent) {
        this._id = EventGroup2._uniqueId++;
        this._parent = parent;
        this._eventRecords = [];
      }
      EventGroup2.raise = function(target, eventName, eventArgs, bubbleEvent) {
        var retVal2;
        if (EventGroup2._isElement(target)) {
          if (typeof document !== "undefined" && document.createEvent) {
            var ev = document.createEvent("HTMLEvents");
            ev.initEvent(eventName, bubbleEvent || false, true);
            assign(ev, eventArgs);
            retVal2 = target.dispatchEvent(ev);
          } else if (typeof document !== "undefined" && document.createEventObject) {
            var evObj = document.createEventObject(eventArgs);
            target.fireEvent("on" + eventName, evObj);
          }
        } else {
          while (target && retVal2 !== false) {
            var events = target.__events__;
            var eventRecords = events ? events[eventName] : null;
            if (eventRecords) {
              for (var id in eventRecords) {
                if (eventRecords.hasOwnProperty(id)) {
                  var eventRecordList = eventRecords[id];
                  for (var listIndex = 0; retVal2 !== false && listIndex < eventRecordList.length; listIndex++) {
                    var record = eventRecordList[listIndex];
                    if (record.objectCallback) {
                      retVal2 = record.objectCallback.call(record.parent, eventArgs);
                    }
                  }
                }
              }
            }
            target = bubbleEvent ? target.parent : null;
          }
        }
        return retVal2;
      };
      EventGroup2.isObserved = function(target, eventName) {
        var events = target && target.__events__;
        return !!events && !!events[eventName];
      };
      EventGroup2.isDeclared = function(target, eventName) {
        var declaredEvents = target && target.__declaredEvents;
        return !!declaredEvents && !!declaredEvents[eventName];
      };
      EventGroup2.stopPropagation = function(event) {
        if (event.stopPropagation) {
          event.stopPropagation();
        } else {
          event.cancelBubble = true;
        }
      };
      EventGroup2._isElement = function(target) {
        return !!target && (!!target.addEventListener || typeof HTMLElement !== "undefined" && target instanceof HTMLElement);
      };
      EventGroup2.prototype.dispose = function() {
        if (!this._isDisposed) {
          this._isDisposed = true;
          this.off();
          this._parent = null;
        }
      };
      EventGroup2.prototype.onAll = function(target, events, useCapture) {
        for (var eventName in events) {
          if (events.hasOwnProperty(eventName)) {
            this.on(target, eventName, events[eventName], useCapture);
          }
        }
      };
      EventGroup2.prototype.on = function(target, eventName, callback, options) {
        var _this = this;
        if (eventName.indexOf(",") > -1) {
          var events = eventName.split(/[ ,]+/);
          for (var i2 = 0; i2 < events.length; i2++) {
            this.on(target, events[i2], callback, options);
          }
        } else {
          var parent_1 = this._parent;
          var eventRecord = {
            target,
            eventName,
            parent: parent_1,
            callback,
            options
          };
          var events = target.__events__ = target.__events__ || {};
          events[eventName] = events[eventName] || {
            count: 0
          };
          events[eventName][this._id] = events[eventName][this._id] || [];
          events[eventName][this._id].push(eventRecord);
          events[eventName].count++;
          if (EventGroup2._isElement(target)) {
            var processElementEvent = function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              if (_this._isDisposed) {
                return;
              }
              var result;
              try {
                result = callback.apply(parent_1, args);
                if (result === false && args[0]) {
                  var e2 = args[0];
                  if (e2.preventDefault) {
                    e2.preventDefault();
                  }
                  if (e2.stopPropagation) {
                    e2.stopPropagation();
                  }
                  e2.cancelBubble = true;
                }
              } catch (e3) {
              }
              return result;
            };
            eventRecord.elementCallback = processElementEvent;
            if (target.addEventListener) {
              target.addEventListener(eventName, processElementEvent, options);
            } else if (target.attachEvent) {
              target.attachEvent("on" + eventName, processElementEvent);
            }
          } else {
            var processObjectEvent = function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              if (_this._isDisposed) {
                return;
              }
              return callback.apply(parent_1, args);
            };
            eventRecord.objectCallback = processObjectEvent;
          }
          this._eventRecords.push(eventRecord);
        }
      };
      EventGroup2.prototype.off = function(target, eventName, callback, options) {
        for (var i2 = 0; i2 < this._eventRecords.length; i2++) {
          var eventRecord = this._eventRecords[i2];
          if ((!target || target === eventRecord.target) && (!eventName || eventName === eventRecord.eventName) && (!callback || callback === eventRecord.callback) && (typeof options !== "boolean" || options === eventRecord.options)) {
            var events = eventRecord.target.__events__;
            var targetArrayLookup = events[eventRecord.eventName];
            var targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;
            if (targetArray) {
              if (targetArray.length === 1 || !callback) {
                targetArrayLookup.count -= targetArray.length;
                delete events[eventRecord.eventName][this._id];
              } else {
                targetArrayLookup.count--;
                targetArray.splice(targetArray.indexOf(eventRecord), 1);
              }
              if (!targetArrayLookup.count) {
                delete events[eventRecord.eventName];
              }
            }
            if (eventRecord.elementCallback) {
              if (eventRecord.target.removeEventListener) {
                eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.options);
              } else if (eventRecord.target.detachEvent) {
                eventRecord.target.detachEvent("on" + eventRecord.eventName, eventRecord.elementCallback);
              }
            }
            this._eventRecords.splice(i2--, 1);
          }
        }
      };
      EventGroup2.prototype.raise = function(eventName, eventArgs, bubbleEvent) {
        return EventGroup2.raise(this._parent, eventName, eventArgs, bubbleEvent);
      };
      EventGroup2.prototype.declare = function(event) {
        var declaredEvents = this._parent.__declaredEvents = this._parent.__declaredEvents || {};
        if (typeof event === "string") {
          declaredEvents[event] = true;
        } else {
          for (var i2 = 0; i2 < event.length; i2++) {
            declaredEvents[event[i2]] = true;
          }
        }
      };
      EventGroup2._uniqueId = 0;
      return EventGroup2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/dom/getDocument.js
  function getDocument(rootElement) {
    if (!canUseDOM3() || typeof document === "undefined") {
      return void 0;
    } else {
      var el = rootElement;
      return el && el.ownerDocument ? el.ownerDocument : document;
    }
  }

  // ../node_modules/@fluentui/utilities/lib/scroll.js
  var _scrollbarWidth;
  var DisabledScrollClassName = mergeStyles({
    overflow: "hidden !important"
  });
  var DATA_IS_SCROLLABLE_ATTRIBUTE = "data-is-scrollable";
  function getScrollbarWidth() {
    if (_scrollbarWidth === void 0) {
      var scrollDiv = document.createElement("div");
      scrollDiv.style.setProperty("width", "100px");
      scrollDiv.style.setProperty("height", "100px");
      scrollDiv.style.setProperty("overflow", "scroll");
      scrollDiv.style.setProperty("position", "absolute");
      scrollDiv.style.setProperty("top", "-9999px");
      document.body.appendChild(scrollDiv);
      _scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
    return _scrollbarWidth;
  }
  function findScrollableParent(startingElement) {
    var el = startingElement;
    var doc = getDocument(startingElement);
    while (el && el !== doc.body) {
      if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) === "true") {
        return el;
      }
      el = el.parentElement;
    }
    el = startingElement;
    while (el && el !== doc.body) {
      if (el.getAttribute(DATA_IS_SCROLLABLE_ATTRIBUTE) !== "false") {
        var computedStyles = getComputedStyle(el);
        var overflowY = computedStyles ? computedStyles.getPropertyValue("overflow-y") : "";
        if (overflowY && (overflowY === "scroll" || overflowY === "auto")) {
          return el;
        }
      }
      el = el.parentElement;
    }
    if (!el || el === doc.body) {
      el = getWindow(startingElement);
    }
    return el;
  }

  // ../node_modules/@fluentui/utilities/lib/BaseComponent.js
  var React114 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/warn/warn.js
  var _warningCallback = void 0;
  function warn(message5) {
    if (_warningCallback && true) {
      _warningCallback(message5);
    } else if (console && console.warn) {
      console.warn(message5);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnConditionallyRequiredProps.js
  function warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition) {
    if (condition === true && true) {
      for (var _i = 0, requiredProps_1 = requiredProps; _i < requiredProps_1.length; _i++) {
        var requiredPropName = requiredProps_1[_i];
        if (!(requiredPropName in props)) {
          warn("".concat(componentName, " property '").concat(requiredPropName, "' is required when '").concat(conditionalPropName, "' is used.'"));
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnMutuallyExclusive.js
  function warnMutuallyExclusive(componentName, props, exclusiveMap) {
    if (true) {
      for (var propName in exclusiveMap) {
        if (props && props[propName] !== void 0) {
          var propInExclusiveMapValue = exclusiveMap[propName];
          if (propInExclusiveMapValue && props[propInExclusiveMapValue] !== void 0) {
            warn("".concat(componentName, " property '").concat(propName, "' is mutually exclusive with '").concat(exclusiveMap[propName], "'. ") + "Use one or the other.");
          }
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnDeprecations.js
  function warnDeprecations(componentName, props, deprecationMap) {
    if (true) {
      for (var propName in deprecationMap) {
        if (props && propName in props) {
          var deprecationMessage = "".concat(componentName, " property '").concat(propName, "' was used but has been deprecated.");
          var replacementPropName = deprecationMap[propName];
          if (replacementPropName) {
            deprecationMessage += " Use '".concat(replacementPropName, "' instead.");
          }
          warn(deprecationMessage);
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/BaseComponent.js
  var BaseComponent = (
    /** @class */
    function(_super) {
      __extends(BaseComponent2, _super);
      function BaseComponent2(props, context) {
        var _this = _super.call(this, props, context) || this;
        _makeAllSafe(_this, BaseComponent2.prototype, [
          "componentDidMount",
          "shouldComponentUpdate",
          "getSnapshotBeforeUpdate",
          "render",
          "componentDidUpdate",
          "componentWillUnmount"
        ]);
        return _this;
      }
      BaseComponent2.prototype.componentDidUpdate = function(prevProps, prevState) {
        this._updateComponentRef(prevProps, this.props);
      };
      BaseComponent2.prototype.componentDidMount = function() {
        this._setComponentRef(this.props.componentRef, this);
      };
      BaseComponent2.prototype.componentWillUnmount = function() {
        this._setComponentRef(this.props.componentRef, null);
        if (this.__disposables) {
          for (var i2 = 0, len = this._disposables.length; i2 < len; i2++) {
            var disposable = this.__disposables[i2];
            if (disposable.dispose) {
              disposable.dispose();
            }
          }
          this.__disposables = null;
        }
      };
      Object.defineProperty(BaseComponent2.prototype, "className", {
        /**
         * Gets the object's class name.
         */
        get: function() {
          if (!this.__className) {
            var funcNameRegex = /function (.{1,})\(/;
            var results = funcNameRegex.exec(this.constructor.toString());
            this.__className = results && results.length > 1 ? results[1] : "";
          }
          return this.__className;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseComponent2.prototype, "_disposables", {
        /**
         * Allows subclasses to push things to this._disposables to be auto disposed.
         */
        get: function() {
          if (!this.__disposables) {
            this.__disposables = [];
          }
          return this.__disposables;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseComponent2.prototype, "_async", {
        /**
         * Gets the async instance associated with the component, created on demand. The async instance gives
         * subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks
         * will be cleared/ignored automatically after unmounting. The helpers within the async object also
         * preserve the this pointer so that you don't need to "bind" the callbacks.
         */
        get: function() {
          if (!this.__async) {
            this.__async = new Async(this);
            this._disposables.push(this.__async);
          }
          return this.__async;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BaseComponent2.prototype, "_events", {
        /**
         * Gets the event group instance assocaited with the component, created on demand. The event instance
         * provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks
         * will be automatically disconnected after unmounting. The helpers within the events object also
         * preserve the this reference so that you don't need to "bind" the callbacks.
         */
        get: function() {
          if (!this.__events) {
            this.__events = new EventGroup(this);
            this._disposables.push(this.__events);
          }
          return this.__events;
        },
        enumerable: false,
        configurable: true
      });
      BaseComponent2.prototype._resolveRef = function(refName) {
        var _this = this;
        if (!this.__resolves) {
          this.__resolves = {};
        }
        if (!this.__resolves[refName]) {
          this.__resolves[refName] = function(ref) {
            return _this[refName] = ref;
          };
        }
        return this.__resolves[refName];
      };
      BaseComponent2.prototype._updateComponentRef = function(currentProps, newProps) {
        if (newProps === void 0) {
          newProps = {};
        }
        if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {
          this._setComponentRef(currentProps.componentRef, null);
          this._setComponentRef(newProps.componentRef, this);
        }
      };
      BaseComponent2.prototype._warnDeprecations = function(deprecationMap) {
        warnDeprecations(this.className, this.props, deprecationMap);
      };
      BaseComponent2.prototype._warnMutuallyExclusive = function(mutuallyExclusiveMap) {
        warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);
      };
      BaseComponent2.prototype._warnConditionallyRequiredProps = function(requiredProps, conditionalPropName, condition) {
        warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);
      };
      BaseComponent2.prototype._setComponentRef = function(ref, value) {
        if (!this._skipComponentRefResolution && ref) {
          if (typeof ref === "function") {
            ref(value);
          }
          if (typeof ref === "object") {
            ref.current = value;
          }
        }
      };
      return BaseComponent2;
    }(React114.Component)
  );
  function _makeAllSafe(obj, prototype, methodNames) {
    for (var i2 = 0, len = methodNames.length; i2 < len; i2++) {
      _makeSafe(obj, prototype, methodNames[i2]);
    }
  }
  function _makeSafe(obj, prototype, methodName) {
    var classMethod = obj[methodName];
    var prototypeMethod = prototype[methodName];
    if (classMethod || prototypeMethod) {
      obj[methodName] = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var retVal2;
        if (prototypeMethod) {
          retVal2 = prototypeMethod.apply(this, args);
        }
        if (classMethod !== prototypeMethod) {
          retVal2 = classMethod.apply(this, args);
        }
        return retVal2;
      };
    }
  }
  function nullRender() {
    return null;
  }

  // ../node_modules/@fluentui/utilities/lib/DelayedRender.js
  var React115 = __toESM(require_react());
  var DelayedRender = (
    /** @class */
    function(_super) {
      __extends(DelayedRender2, _super);
      function DelayedRender2(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
          isRendered: getWindow() === void 0
        };
        return _this;
      }
      DelayedRender2.prototype.componentDidMount = function() {
        var _this = this;
        var delay = this.props.delay;
        this._timeoutId = window.setTimeout(function() {
          _this.setState({
            isRendered: true
          });
        }, delay);
      };
      DelayedRender2.prototype.componentWillUnmount = function() {
        if (this._timeoutId) {
          clearTimeout(this._timeoutId);
        }
      };
      DelayedRender2.prototype.render = function() {
        return this.state.isRendered ? React115.Children.only(this.props.children) : null;
      };
      DelayedRender2.defaultProps = {
        delay: 0
      };
      return DelayedRender2;
    }(React115.Component)
  );

  // ../node_modules/@fluentui/utilities/lib/GlobalSettings.js
  var GLOBAL_SETTINGS_PROP_NAME = "__globalSettings__";
  var CALLBACK_STATE_PROP_NAME = "__callbacks__";
  var _counter = 0;
  var GlobalSettings = (
    /** @class */
    function() {
      function GlobalSettings2() {
      }
      GlobalSettings2.getValue = function(key, defaultValue2) {
        var globalSettings = _getGlobalSettings();
        if (globalSettings[key] === void 0) {
          globalSettings[key] = typeof defaultValue2 === "function" ? defaultValue2() : defaultValue2;
        }
        return globalSettings[key];
      };
      GlobalSettings2.setValue = function(key, value) {
        var globalSettings = _getGlobalSettings();
        var callbacks = globalSettings[CALLBACK_STATE_PROP_NAME];
        var oldValue = globalSettings[key];
        if (value !== oldValue) {
          globalSettings[key] = value;
          var changeDescription = {
            oldValue,
            value,
            key
          };
          for (var id in callbacks) {
            if (callbacks.hasOwnProperty(id)) {
              callbacks[id](changeDescription);
            }
          }
        }
        return value;
      };
      GlobalSettings2.addChangeListener = function(cb) {
        var id = cb.__id__;
        var callbacks = _getCallbacks();
        if (!id) {
          id = cb.__id__ = String(_counter++);
        }
        callbacks[id] = cb;
      };
      GlobalSettings2.removeChangeListener = function(cb) {
        var callbacks = _getCallbacks();
        delete callbacks[cb.__id__];
      };
      return GlobalSettings2;
    }()
  );
  function _getGlobalSettings() {
    var _a5;
    var win2 = getWindow();
    var globalObj = win2 || {};
    if (!globalObj[GLOBAL_SETTINGS_PROP_NAME]) {
      globalObj[GLOBAL_SETTINGS_PROP_NAME] = (_a5 = {}, _a5[CALLBACK_STATE_PROP_NAME] = {}, _a5);
    }
    return globalObj[GLOBAL_SETTINGS_PROP_NAME];
  }
  function _getCallbacks() {
    var globalSettings = _getGlobalSettings();
    return globalSettings[CALLBACK_STATE_PROP_NAME];
  }

  // ../node_modules/@fluentui/utilities/lib/KeyCodes.js
  var KeyCodes = {
    backspace: 8,
    tab: 9,
    enter: 13,
    shift: 16,
    ctrl: 17,
    alt: 18,
    pauseBreak: 19,
    capslock: 20,
    escape: 27,
    space: 32,
    pageUp: 33,
    pageDown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    insert: 45,
    del: 46,
    zero: 48,
    one: 49,
    two: 50,
    three: 51,
    four: 52,
    five: 53,
    six: 54,
    seven: 55,
    eight: 56,
    nine: 57,
    colon: 58,
    a: 65,
    b: 66,
    c: 67,
    d: 68,
    e: 69,
    f: 70,
    g: 71,
    h: 72,
    i: 73,
    j: 74,
    k: 75,
    l: 76,
    m: 77,
    n: 78,
    o: 79,
    p: 80,
    q: 81,
    r: 82,
    s: 83,
    t: 84,
    u: 85,
    v: 86,
    w: 87,
    x: 88,
    y: 89,
    z: 90,
    leftWindow: 91,
    rightWindow: 92,
    select: 93,
    /* eslint-disable @typescript-eslint/naming-convention */
    zero_numpad: 96,
    one_numpad: 97,
    two_numpad: 98,
    three_numpad: 99,
    four_numpad: 100,
    five_numpad: 101,
    six_numpad: 102,
    seven_numpad: 103,
    eight_numpad: 104,
    nine_numpad: 105,
    /* eslint-enable @typescript-eslint/naming-convention */
    multiply: 106,
    add: 107,
    subtract: 109,
    decimalPoint: 110,
    divide: 111,
    f1: 112,
    f2: 113,
    f3: 114,
    f4: 115,
    f5: 116,
    f6: 117,
    f7: 118,
    f8: 119,
    f9: 120,
    f10: 121,
    f11: 122,
    f12: 123,
    numlock: 144,
    scrollLock: 145,
    semicolon: 186,
    equalSign: 187,
    comma: 188,
    dash: 189,
    period: 190,
    forwardSlash: 191,
    graveAccent: 192,
    openBracket: 219,
    backSlash: 220,
    closeBracket: 221,
    singleQuote: 222
  };

  // ../node_modules/@fluentui/utilities/lib/Rectangle.js
  var Rectangle = (
    /** @class */
    function() {
      function Rectangle2(left, right, top, bottom) {
        if (left === void 0) {
          left = 0;
        }
        if (right === void 0) {
          right = 0;
        }
        if (top === void 0) {
          top = 0;
        }
        if (bottom === void 0) {
          bottom = 0;
        }
        this.top = top;
        this.bottom = bottom;
        this.left = left;
        this.right = right;
      }
      Object.defineProperty(Rectangle2.prototype, "width", {
        /**
         * Calculated automatically by subtracting the right from left
         */
        get: function() {
          return this.right - this.left;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Rectangle2.prototype, "height", {
        /**
         * Calculated automatically by subtracting the bottom from top.
         */
        get: function() {
          return this.bottom - this.top;
        },
        enumerable: false,
        configurable: true
      });
      Rectangle2.prototype.equals = function(rect) {
        return parseFloat(this.top.toFixed(4)) === parseFloat(rect.top.toFixed(4)) && parseFloat(this.bottom.toFixed(4)) === parseFloat(rect.bottom.toFixed(4)) && parseFloat(this.left.toFixed(4)) === parseFloat(rect.left.toFixed(4)) && parseFloat(this.right.toFixed(4)) === parseFloat(rect.right.toFixed(4));
      };
      return Rectangle2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/appendFunction.js
  function appendFunction(parent) {
    var functions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      functions[_i - 1] = arguments[_i];
    }
    if (functions.length < 2) {
      return functions[0];
    }
    return function() {
      var args = [];
      for (var _i2 = 0; _i2 < arguments.length; _i2++) {
        args[_i2] = arguments[_i2];
      }
      functions.forEach(function(f3) {
        return f3 && f3.apply(parent, args);
      });
    };
  }

  // ../node_modules/@fluentui/utilities/lib/aria.js
  function mergeAriaAttributeValues() {
    var ariaAttributes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      ariaAttributes[_i] = arguments[_i];
    }
    var mergedAttribute = ariaAttributes.filter(function(arg) {
      return arg;
    }).join(" ").trim();
    return mergedAttribute === "" ? void 0 : mergedAttribute;
  }

  // ../node_modules/@fluentui/utilities/lib/array.js
  function addElementAtIndex(array2, index2, itemToAdd) {
    var copy2 = array2.slice();
    copy2.splice(index2, 0, itemToAdd);
    return copy2;
  }
  function arraysEqual(array1, array2) {
    if (array1.length !== array2.length) {
      return false;
    }
    for (var i2 = 0; i2 < array1.length; i2++) {
      if (array1[i2] !== array2[i2]) {
        return false;
      }
    }
    return true;
  }

  // ../node_modules/@fluentui/utilities/lib/sessionStorage.js
  function getItem(key) {
    var result = null;
    try {
      var win2 = getWindow();
      result = win2 ? win2.sessionStorage.getItem(key) : null;
    } catch (e2) {
    }
    return result;
  }
  function setItem(key, data) {
    var _a5;
    try {
      (_a5 = getWindow()) === null || _a5 === void 0 ? void 0 : _a5.sessionStorage.setItem(key, data);
    } catch (e2) {
    }
  }

  // ../node_modules/@fluentui/utilities/lib/rtl.js
  var RTL_LOCAL_STORAGE_KEY = "isRTL";
  var _isRTL;
  function getRTL2(theme) {
    if (theme === void 0) {
      theme = {};
    }
    if (theme.rtl !== void 0) {
      return theme.rtl;
    }
    if (_isRTL === void 0) {
      var savedRTL = getItem(RTL_LOCAL_STORAGE_KEY);
      if (savedRTL !== null) {
        _isRTL = savedRTL === "1";
        setRTL2(_isRTL);
      }
      var doc = getDocument();
      if (_isRTL === void 0 && doc) {
        _isRTL = (doc.body && doc.body.getAttribute("dir") || doc.documentElement.getAttribute("dir")) === "rtl";
        setRTL(_isRTL);
      }
    }
    return !!_isRTL;
  }
  function setRTL2(isRTL, persistSetting) {
    if (persistSetting === void 0) {
      persistSetting = false;
    }
    var doc = getDocument();
    if (doc) {
      doc.documentElement.setAttribute("dir", isRTL ? "rtl" : "ltr");
    }
    if (persistSetting) {
      setItem(RTL_LOCAL_STORAGE_KEY, isRTL ? "1" : "0");
    }
    _isRTL = isRTL;
    setRTL(_isRTL);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/isVirtualElement.js
  function isVirtualElement(element2) {
    return element2 && !!element2._virtual;
  }

  // ../node_modules/@fluentui/dom-utilities/lib/getVirtualParent.js
  function getVirtualParent(child) {
    var parent;
    if (child && isVirtualElement(child)) {
      parent = child._virtual.parent;
    }
    return parent;
  }

  // ../node_modules/@fluentui/dom-utilities/lib/getParent.js
  function getParent(child, allowVirtualParents) {
    if (allowVirtualParents === void 0) {
      allowVirtualParents = true;
    }
    return child && (allowVirtualParents && getVirtualParent(child) || child.parentNode && child.parentNode);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/elementContains.js
  function elementContains(parent, child, allowVirtualParents) {
    if (allowVirtualParents === void 0) {
      allowVirtualParents = true;
    }
    var isContained = false;
    if (parent && child) {
      if (allowVirtualParents) {
        if (parent === child) {
          isContained = true;
        } else {
          isContained = false;
          while (child) {
            var nextParent = getParent(child);
            if (nextParent === parent) {
              isContained = true;
              break;
            }
            child = nextParent;
          }
        }
      } else if (parent.contains) {
        isContained = parent.contains(child);
      }
    }
    return isContained;
  }

  // ../node_modules/@fluentui/dom-utilities/lib/findElementRecursive.js
  function findElementRecursive(element2, matchFunction) {
    if (!element2 || element2 === document.body) {
      return null;
    }
    return matchFunction(element2) ? element2 : findElementRecursive(getParent(element2), matchFunction);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/elementContainsAttribute.js
  function elementContainsAttribute(element2, attribute) {
    var elementMatch = findElementRecursive(element2, function(testElement) {
      return testElement.hasAttribute(attribute);
    });
    return elementMatch && elementMatch.getAttribute(attribute);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/setPortalAttribute.js
  var DATA_PORTAL_ATTRIBUTE = "data-portal-element";
  function setPortalAttribute(element2) {
    element2.setAttribute(DATA_PORTAL_ATTRIBUTE, "true");
  }

  // ../node_modules/@fluentui/dom-utilities/lib/portalContainsElement.js
  function portalContainsElement(target, parent) {
    var elementMatch = findElementRecursive(target, function(testElement) {
      return parent === testElement || testElement.hasAttribute(DATA_PORTAL_ATTRIBUTE);
    });
    return elementMatch !== null && elementMatch.hasAttribute(DATA_PORTAL_ATTRIBUTE);
  }

  // ../node_modules/@fluentui/dom-utilities/lib/setVirtualParent.js
  function setVirtualParent2(child, parent) {
    var virtualChild = child;
    var virtualParent = parent;
    if (!virtualChild._virtual) {
      virtualChild._virtual = {
        children: []
      };
    }
    var oldParent = virtualChild._virtual.parent;
    if (oldParent && oldParent !== parent) {
      var index2 = oldParent._virtual.children.indexOf(virtualChild);
      if (index2 > -1) {
        oldParent._virtual.children.splice(index2, 1);
      }
    }
    virtualChild._virtual.parent = virtualParent || void 0;
    if (virtualParent) {
      if (!virtualParent._virtual) {
        virtualParent._virtual = {
          children: []
        };
      }
      virtualParent._virtual.children.push(virtualChild);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/focus.js
  var IS_FOCUSABLE_ATTRIBUTE = "data-is-focusable";
  var IS_VISIBLE_ATTRIBUTE = "data-is-visible";
  var FOCUSZONE_ID_ATTRIBUTE = "data-focuszone-id";
  var FOCUSZONE_SUB_ATTRIBUTE = "data-is-sub-focuszone";
  function getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {
    return getNextElement(rootElement, currentElement, true, false, false, includeElementsInFocusZones);
  }
  function getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {
    return getPreviousElement(rootElement, currentElement, true, false, true, includeElementsInFocusZones);
  }
  function focusFirstChild(rootElement, bypassHiddenElements) {
    var element2 = getNextElement(rootElement, rootElement, true, false, false, true, void 0, void 0, bypassHiddenElements);
    if (element2) {
      focusAsync(element2);
      return true;
    }
    return false;
  }
  function getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones, allowFocusRoot, tabbable) {
    if (!currentElement || !allowFocusRoot && currentElement === rootElement) {
      return null;
    }
    var isCurrentElementVisible = isElementVisible(currentElement);
    if (traverseChildren && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
      var childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
      if (childMatch) {
        if (tabbable && isElementTabbable(childMatch, true) || !tabbable) {
          return childMatch;
        }
        var childMatchSiblingMatch = getPreviousElement(rootElement, childMatch.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
        if (childMatchSiblingMatch) {
          return childMatchSiblingMatch;
        }
        var childMatchParent = childMatch.parentElement;
        while (childMatchParent && childMatchParent !== currentElement) {
          var childMatchParentMatch = getPreviousElement(rootElement, childMatchParent.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
          if (childMatchParentMatch) {
            return childMatchParentMatch;
          }
          childMatchParent = childMatchParent.parentElement;
        }
      }
    }
    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
      return currentElement;
    }
    var siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);
    if (siblingMatch) {
      return siblingMatch;
    }
    if (!suppressParentTraversal) {
      return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones, allowFocusRoot, tabbable);
    }
    return null;
  }
  function getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements) {
    if (!currentElement || currentElement === rootElement && suppressChildTraversal && !allowFocusRoot) {
      return null;
    }
    var checkElementVisibility = bypassHiddenElements ? isElementVisibleAndNotHidden : isElementVisible;
    var isCurrentElementVisible = checkElementVisibility(currentElement);
    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {
      return currentElement;
    }
    if (!suppressChildTraversal && isCurrentElementVisible && (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {
      var childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
      if (childMatch) {
        return childMatch;
      }
    }
    if (currentElement === rootElement) {
      return null;
    }
    var siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
    if (siblingMatch) {
      return siblingMatch;
    }
    if (!suppressParentTraversal) {
      return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones, allowFocusRoot, tabbable, bypassHiddenElements);
    }
    return null;
  }
  function isElementVisible(element2) {
    if (!element2 || !element2.getAttribute) {
      return false;
    }
    var visibilityAttribute = element2.getAttribute(IS_VISIBLE_ATTRIBUTE);
    if (visibilityAttribute !== null && visibilityAttribute !== void 0) {
      return visibilityAttribute === "true";
    }
    return element2.offsetHeight !== 0 || element2.offsetParent !== null || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    element2.isVisible === true;
  }
  function isElementVisibleAndNotHidden(element2) {
    return !!element2 && isElementVisible(element2) && !element2.hidden && window.getComputedStyle(element2).visibility !== "hidden";
  }
  function isElementTabbable(element2, checkTabIndex) {
    if (!element2 || element2.disabled) {
      return false;
    }
    var tabIndex = 0;
    var tabIndexAttributeValue = null;
    if (element2 && element2.getAttribute) {
      tabIndexAttributeValue = element2.getAttribute("tabIndex");
      if (tabIndexAttributeValue) {
        tabIndex = parseInt(tabIndexAttributeValue, 10);
      }
    }
    var isFocusableAttribute = element2.getAttribute ? element2.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;
    var isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;
    var result = !!element2 && isFocusableAttribute !== "false" && (element2.tagName === "A" || element2.tagName === "BUTTON" || element2.tagName === "INPUT" || element2.tagName === "TEXTAREA" || element2.tagName === "SELECT" || isFocusableAttribute === "true" || isTabIndexSet);
    return checkTabIndex ? tabIndex !== -1 && result : result;
  }
  function isElementFocusZone(element2) {
    return !!(element2 && element2.getAttribute && !!element2.getAttribute(FOCUSZONE_ID_ATTRIBUTE));
  }
  function isElementFocusSubZone(element2) {
    return !!(element2 && element2.getAttribute && element2.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === "true");
  }
  function doesElementContainFocus(element2) {
    var document4 = getDocument(element2);
    var currentActiveElement = document4 && document4.activeElement;
    if (currentActiveElement && elementContains(element2, currentActiveElement)) {
      return true;
    }
    return false;
  }
  function shouldWrapFocus(element2, noWrapDataAttribute) {
    return elementContainsAttribute(element2, noWrapDataAttribute) === "true" ? false : true;
  }
  var targetToFocusOnNextRepaint = void 0;
  function focusAsync(element2) {
    if (element2) {
      if (targetToFocusOnNextRepaint) {
        targetToFocusOnNextRepaint = element2;
        return;
      }
      targetToFocusOnNextRepaint = element2;
      var win2 = getWindow(element2);
      if (win2) {
        win2.requestAnimationFrame(function() {
          targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();
          targetToFocusOnNextRepaint = void 0;
        });
      }
    }
  }
  function getFocusableByIndexPath(parent, path2) {
    var element2 = parent;
    for (var _i = 0, path_1 = path2; _i < path_1.length; _i++) {
      var index2 = path_1[_i];
      var nextChild = element2.children[Math.min(index2, element2.children.length - 1)];
      if (!nextChild) {
        break;
      }
      element2 = nextChild;
    }
    element2 = isElementTabbable(element2) && isElementVisible(element2) ? element2 : getNextElement(parent, element2, true) || getPreviousElement(parent, element2);
    return element2;
  }
  function getElementIndexPath(fromElement, toElement) {
    var path2 = [];
    while (toElement && fromElement && toElement !== fromElement) {
      var parent_1 = getParent(toElement, true);
      if (parent_1 === null) {
        return [];
      }
      path2.unshift(Array.prototype.indexOf.call(parent_1.children, toElement));
      toElement = parent_1;
    }
    return path2;
  }

  // ../node_modules/@fluentui/utilities/lib/dom/on.js
  function on(element2, eventName, callback, options) {
    element2.addEventListener(eventName, callback, options);
    return function() {
      return element2.removeEventListener(eventName, callback, options);
    };
  }

  // ../node_modules/@fluentui/utilities/lib/classNamesFunction.js
  var MAX_CACHE_COUNT = 50;
  var DEFAULT_SPECIFICITY_MULTIPLIER = 5;
  var _memoizedClassNames = 0;
  var stylesheet = Stylesheet.getInstance();
  if (stylesheet && stylesheet.onReset) {
    stylesheet.onReset(function() {
      return _memoizedClassNames++;
    });
  }
  var retVal = "__retval__";
  function classNamesFunction(options) {
    if (options === void 0) {
      options = {};
    }
    var map = /* @__PURE__ */ new Map();
    var styleCalcCount = 0;
    var getClassNamesCount = 0;
    var currentMemoizedClassNames = _memoizedClassNames;
    var getClassNames10 = function(styleFunctionOrObject, styleProps) {
      var _a5;
      if (styleProps === void 0) {
        styleProps = {};
      }
      if (options.useStaticStyles && typeof styleFunctionOrObject === "function" && styleFunctionOrObject.__noStyleOverride__) {
        return styleFunctionOrObject(styleProps);
      }
      getClassNamesCount++;
      var current = map;
      var theme = styleProps.theme;
      var rtl2 = theme && theme.rtl !== void 0 ? theme.rtl : getRTL2();
      var disableCaching = options.disableCaching;
      if (currentMemoizedClassNames !== _memoizedClassNames) {
        currentMemoizedClassNames = _memoizedClassNames;
        map = /* @__PURE__ */ new Map();
        styleCalcCount = 0;
      }
      if (!options.disableCaching) {
        current = _traverseMap(map, styleFunctionOrObject);
        current = _traverseMap(current, styleProps);
      }
      if (disableCaching || !current[retVal]) {
        if (styleFunctionOrObject === void 0) {
          current[retVal] = {};
        } else {
          current[retVal] = mergeCssSets([
            typeof styleFunctionOrObject === "function" ? styleFunctionOrObject(styleProps) : styleFunctionOrObject
          ], { rtl: !!rtl2, specificityMultiplier: options.useStaticStyles ? DEFAULT_SPECIFICITY_MULTIPLIER : void 0 });
        }
        if (!disableCaching) {
          styleCalcCount++;
        }
      }
      if (styleCalcCount > (options.cacheSize || MAX_CACHE_COUNT)) {
        var win2 = getWindow();
        if ((_a5 = win2 === null || win2 === void 0 ? void 0 : win2.FabricConfig) === null || _a5 === void 0 ? void 0 : _a5.enableClassNameCacheFullWarning) {
          console.warn("Styles are being recalculated too frequently. Cache miss rate is ".concat(styleCalcCount, "/").concat(getClassNamesCount, "."));
          console.trace();
        }
        map.clear();
        styleCalcCount = 0;
        options.disableCaching = true;
      }
      return current[retVal];
    };
    return getClassNames10;
  }
  function _traverseEdge(current, value) {
    value = _normalizeValue(value);
    if (!current.has(value)) {
      current.set(value, /* @__PURE__ */ new Map());
    }
    return current.get(value);
  }
  function _traverseMap(current, inputs) {
    if (typeof inputs === "function") {
      var cachedInputsFromStyled = inputs.__cachedInputs__;
      if (cachedInputsFromStyled) {
        for (var _i = 0, _a5 = inputs.__cachedInputs__; _i < _a5.length; _i++) {
          var input4 = _a5[_i];
          current = _traverseEdge(current, input4);
        }
      } else {
        current = _traverseEdge(current, inputs);
      }
    } else if (typeof inputs === "object") {
      for (var propName in inputs) {
        if (inputs.hasOwnProperty(propName)) {
          current = _traverseEdge(current, inputs[propName]);
        }
      }
    }
    return current;
  }
  function _normalizeValue(value) {
    switch (value) {
      case void 0:
        return "__undefined__";
      case null:
        return "__null__";
      default:
        return value;
    }
  }

  // ../node_modules/@fluentui/utilities/lib/componentAs/composeComponentAs.js
  var React116 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/memoize.js
  var _initializedStylesheetResets = false;
  var _resetCounter = 0;
  var _emptyObject = { empty: true };
  var _dictionary = {};
  var _weakMap = typeof WeakMap === "undefined" ? null : WeakMap;
  function resetMemoizations() {
    _resetCounter++;
  }
  function memoizeFunction(cb, maxCacheSize, ignoreNullOrUndefinedResult) {
    if (maxCacheSize === void 0) {
      maxCacheSize = 100;
    }
    if (ignoreNullOrUndefinedResult === void 0) {
      ignoreNullOrUndefinedResult = false;
    }
    if (!_weakMap) {
      return cb;
    }
    if (!_initializedStylesheetResets) {
      var stylesheet3 = Stylesheet.getInstance();
      if (stylesheet3 && stylesheet3.onReset) {
        Stylesheet.getInstance().onReset(resetMemoizations);
      }
      _initializedStylesheetResets = true;
    }
    var rootNode;
    var cacheSize = 0;
    var localResetCounter = _resetCounter;
    return function memoizedFunction() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var currentNode = rootNode;
      if (rootNode === void 0 || localResetCounter !== _resetCounter || maxCacheSize > 0 && cacheSize > maxCacheSize) {
        rootNode = _createNode();
        cacheSize = 0;
        localResetCounter = _resetCounter;
      }
      currentNode = rootNode;
      for (var i2 = 0; i2 < args.length; i2++) {
        var arg = _normalizeArg(args[i2]);
        if (!currentNode.map.has(arg)) {
          currentNode.map.set(arg, _createNode());
        }
        currentNode = currentNode.map.get(arg);
      }
      if (!currentNode.hasOwnProperty("value")) {
        currentNode.value = cb.apply(void 0, args);
        cacheSize++;
      }
      if (ignoreNullOrUndefinedResult && (currentNode.value === null || currentNode.value === void 0)) {
        currentNode.value = cb.apply(void 0, args);
      }
      return currentNode.value;
    };
  }
  function createMemoizer(getValue) {
    if (!_weakMap) {
      return getValue;
    }
    var cache3 = new _weakMap();
    function memoizedGetValue(input4) {
      if (!input4 || typeof input4 !== "function" && typeof input4 !== "object") {
        return getValue(input4);
      }
      if (cache3.has(input4)) {
        return cache3.get(input4);
      }
      var value = getValue(input4);
      cache3.set(input4, value);
      return value;
    }
    return memoizedGetValue;
  }
  function _normalizeArg(val) {
    if (!val) {
      return _emptyObject;
    } else if (typeof val === "object" || typeof val === "function") {
      return val;
    } else if (!_dictionary[val]) {
      _dictionary[val] = { val };
    }
    return _dictionary[val];
  }
  function _createNode() {
    return {
      map: _weakMap ? new _weakMap() : null
    };
  }

  // ../node_modules/@fluentui/utilities/lib/componentAs/composeComponentAs.js
  function createComposedComponent(outer) {
    var Outer = outer;
    var outerMemoizer = createMemoizer(function(inner) {
      if (outer === inner) {
        throw new Error("Attempted to compose a component with itself.");
      }
      var Inner = inner;
      var innerMemoizer = createMemoizer(function(defaultRender) {
        var InnerWithDefaultRender = function(innerProps) {
          return React116.createElement(Inner, __assign({}, innerProps, { defaultRender }));
        };
        return InnerWithDefaultRender;
      });
      var OuterWithDefaultRender = function(outerProps) {
        var defaultRender = outerProps.defaultRender;
        return React116.createElement(Outer, __assign({}, outerProps, { defaultRender: defaultRender ? innerMemoizer(defaultRender) : Inner }));
      };
      return OuterWithDefaultRender;
    });
    return outerMemoizer;
  }
  var componentAsMemoizer = createMemoizer(createComposedComponent);
  function composeComponentAs(outer, inner) {
    return componentAsMemoizer(outer)(inner);
  }

  // ../node_modules/@fluentui/utilities/lib/controlled.js
  function isControlled(props, valueProp) {
    return props[valueProp] !== void 0 && props[valueProp] !== null;
  }

  // ../node_modules/@fluentui/utilities/lib/css.js
  function css() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var classes = [];
    for (var _a5 = 0, args_1 = args; _a5 < args_1.length; _a5++) {
      var arg = args_1[_a5];
      if (arg) {
        if (typeof arg === "string") {
          classes.push(arg);
        } else if (arg.hasOwnProperty("toString") && typeof arg.toString === "function") {
          classes.push(arg.toString());
        } else {
          for (var key in arg) {
            if (arg[key]) {
              classes.push(key);
            }
          }
        }
      }
    }
    return classes.join(" ");
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/Customizations.js
  var CustomizationsGlobalKey = "customizations";
  var NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };
  var _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {
    settings: {},
    scopedSettings: {},
    inCustomizerContext: false
  });
  var _events = [];
  var Customizations = (
    /** @class */
    function() {
      function Customizations2() {
      }
      Customizations2.reset = function() {
        _allSettings.settings = {};
        _allSettings.scopedSettings = {};
      };
      Customizations2.applySettings = function(settings) {
        _allSettings.settings = __assign(__assign({}, _allSettings.settings), settings);
        Customizations2._raiseChange();
      };
      Customizations2.applyScopedSettings = function(scopeName, settings) {
        _allSettings.scopedSettings[scopeName] = __assign(__assign({}, _allSettings.scopedSettings[scopeName]), settings);
        Customizations2._raiseChange();
      };
      Customizations2.getSettings = function(properties, scopeName, localSettings) {
        if (localSettings === void 0) {
          localSettings = NO_CUSTOMIZATIONS;
        }
        var settings = {};
        var localScopedSettings = scopeName && localSettings.scopedSettings[scopeName] || {};
        var globalScopedSettings = scopeName && _allSettings.scopedSettings[scopeName] || {};
        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {
          var property = properties_1[_i];
          settings[property] = localScopedSettings[property] || localSettings.settings[property] || globalScopedSettings[property] || _allSettings.settings[property];
        }
        return settings;
      };
      Customizations2.applyBatchedUpdates = function(code2, suppressUpdate) {
        Customizations2._suppressUpdates = true;
        try {
          code2();
        } catch (_a5) {
        }
        Customizations2._suppressUpdates = false;
        if (!suppressUpdate) {
          Customizations2._raiseChange();
        }
      };
      Customizations2.observe = function(onChange) {
        _events.push(onChange);
      };
      Customizations2.unobserve = function(onChange) {
        _events = _events.filter(function(cb) {
          return cb !== onChange;
        });
      };
      Customizations2._raiseChange = function() {
        if (!Customizations2._suppressUpdates) {
          _events.forEach(function(cb) {
            return cb();
          });
        }
      };
      return Customizations2;
    }()
  );

  // ../node_modules/@fluentui/utilities/lib/customizations/Customizer.js
  var React118 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/customizations/CustomizerContext.js
  var React117 = __toESM(require_react());
  var CustomizerContext = React117.createContext({
    customizations: {
      inCustomizerContext: false,
      settings: {},
      scopedSettings: {}
    }
  });

  // ../node_modules/@fluentui/utilities/lib/customizations/mergeSettings.js
  function mergeSettings(oldSettings, newSettings) {
    if (oldSettings === void 0) {
      oldSettings = {};
    }
    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _settingsMergeWith(newSettings);
    return mergeSettingsWith(oldSettings);
  }
  function mergeScopedSettings(oldSettings, newSettings) {
    if (oldSettings === void 0) {
      oldSettings = {};
    }
    var mergeSettingsWith = _isSettingsFunction(newSettings) ? newSettings : _scopedSettingsMergeWith(newSettings);
    return mergeSettingsWith(oldSettings);
  }
  function _isSettingsFunction(settings) {
    return typeof settings === "function";
  }
  function _settingsMergeWith(newSettings) {
    return function(settings) {
      return newSettings ? __assign(__assign({}, settings), newSettings) : settings;
    };
  }
  function _scopedSettingsMergeWith(scopedSettingsFromProps) {
    if (scopedSettingsFromProps === void 0) {
      scopedSettingsFromProps = {};
    }
    return function(oldScopedSettings) {
      var newScopedSettings = __assign({}, oldScopedSettings);
      for (var scopeName in scopedSettingsFromProps) {
        if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {
          newScopedSettings[scopeName] = __assign(__assign({}, oldScopedSettings[scopeName]), scopedSettingsFromProps[scopeName]);
        }
      }
      return newScopedSettings;
    };
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/mergeCustomizations.js
  function mergeCustomizations(props, parentContext) {
    var _a5 = (parentContext || {}).customizations, customizations = _a5 === void 0 ? { settings: {}, scopedSettings: {} } : _a5;
    return {
      customizations: {
        settings: mergeSettings(customizations.settings, props.settings),
        scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),
        inCustomizerContext: true
      }
    };
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/Customizer.js
  var Customizer = (
    /** @class */
    function(_super) {
      __extends(Customizer2, _super);
      function Customizer2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._onCustomizationChange = function() {
          return _this.forceUpdate();
        };
        return _this;
      }
      Customizer2.prototype.componentDidMount = function() {
        Customizations.observe(this._onCustomizationChange);
      };
      Customizer2.prototype.componentWillUnmount = function() {
        Customizations.unobserve(this._onCustomizationChange);
      };
      Customizer2.prototype.render = function() {
        var _this = this;
        var contextTransform = this.props.contextTransform;
        return React118.createElement(CustomizerContext.Consumer, null, function(parentContext) {
          var newContext = mergeCustomizations(_this.props, parentContext);
          if (contextTransform) {
            newContext = contextTransform(newContext);
          }
          return React118.createElement(CustomizerContext.Provider, { value: newContext }, _this.props.children);
        });
      };
      return Customizer2;
    }(React118.Component)
  );

  // ../node_modules/@fluentui/utilities/lib/customizations/customizable.js
  var React119 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/hoistStatics.js
  function hoistStatics(source, dest) {
    for (var name_1 in source) {
      if (source.hasOwnProperty(name_1)) {
        dest[name_1] = source[name_1];
      }
    }
    return dest;
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/customizable.js
  function customizable(scope, fields, concatStyles) {
    return function customizableFactory(ComposedComponent) {
      var _a5;
      var resultClass = (_a5 = /** @class */
      function(_super) {
        __extends(ComponentWithInjectedProps, _super);
        function ComponentWithInjectedProps(props) {
          var _this = _super.call(this, props) || this;
          _this._styleCache = {};
          _this._onSettingChanged = _this._onSettingChanged.bind(_this);
          return _this;
        }
        ComponentWithInjectedProps.prototype.componentDidMount = function() {
          Customizations.observe(this._onSettingChanged);
        };
        ComponentWithInjectedProps.prototype.componentWillUnmount = function() {
          Customizations.unobserve(this._onSettingChanged);
        };
        ComponentWithInjectedProps.prototype.render = function() {
          var _this = this;
          return React119.createElement(CustomizerContext.Consumer, null, function(context) {
            var defaultProps = Customizations.getSettings(fields, scope, context.customizations);
            var componentProps = _this.props;
            if (defaultProps.styles && typeof defaultProps.styles === "function") {
              defaultProps.styles = defaultProps.styles(__assign(__assign({}, defaultProps), componentProps));
            }
            if (concatStyles && defaultProps.styles) {
              if (_this._styleCache.default !== defaultProps.styles || _this._styleCache.component !== componentProps.styles) {
                var mergedStyles = concatStyleSets(defaultProps.styles, componentProps.styles);
                _this._styleCache.default = defaultProps.styles;
                _this._styleCache.component = componentProps.styles;
                _this._styleCache.merged = mergedStyles;
              }
              return React119.createElement(ComposedComponent, __assign({}, defaultProps, componentProps, { styles: _this._styleCache.merged }));
            }
            return React119.createElement(ComposedComponent, __assign({}, defaultProps, componentProps));
          });
        };
        ComponentWithInjectedProps.prototype._onSettingChanged = function() {
          this.forceUpdate();
        };
        return ComponentWithInjectedProps;
      }(React119.Component), _a5.displayName = "Customized" + scope, _a5);
      return hoistStatics(ComposedComponent, resultClass);
    };
  }

  // ../node_modules/@fluentui/utilities/lib/customizations/useCustomizationSettings.js
  var React120 = __toESM(require_react());
  function useCustomizationSettings(properties, scopeName) {
    var forceUpdate = useForceUpdate2();
    var customizations = React120.useContext(CustomizerContext).customizations;
    var inCustomizerContext = customizations.inCustomizerContext;
    React120.useEffect(function() {
      if (!inCustomizerContext) {
        Customizations.observe(forceUpdate);
      }
      return function() {
        if (!inCustomizerContext) {
          Customizations.unobserve(forceUpdate);
        }
      };
    }, [inCustomizerContext]);
    return Customizations.getSettings(properties, scopeName, customizations);
  }
  function useForceUpdate2() {
    var _a5 = React120.useState(0), setValue = _a5[1];
    return function() {
      return setValue(function(value) {
        return ++value;
      });
    };
  }

  // ../node_modules/@fluentui/utilities/lib/extendComponent.js
  function extendComponent(parent, methods) {
    for (var name_1 in methods) {
      if (methods.hasOwnProperty(name_1)) {
        parent[name_1] = appendFunction(parent, parent[name_1], methods[name_1]);
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/getId.js
  var CURRENT_ID_PROPERTY = "__currentId__";
  var DEFAULT_ID_STRING = "id__";
  var _global2 = getWindow() || {};
  if (_global2[CURRENT_ID_PROPERTY] === void 0) {
    _global2[CURRENT_ID_PROPERTY] = 0;
  }
  var _initializedStylesheetResets2 = false;
  function getId(prefix2) {
    if (!_initializedStylesheetResets2) {
      var stylesheet3 = Stylesheet.getInstance();
      if (stylesheet3 && stylesheet3.onReset) {
        stylesheet3.onReset(resetIds);
      }
      _initializedStylesheetResets2 = true;
    }
    var index2 = _global2[CURRENT_ID_PROPERTY]++;
    return (prefix2 === void 0 ? DEFAULT_ID_STRING : prefix2) + index2;
  }
  function resetIds(counter) {
    if (counter === void 0) {
      counter = 0;
    }
    _global2[CURRENT_ID_PROPERTY] = counter;
  }

  // ../node_modules/@fluentui/utilities/lib/properties.js
  var toObjectMap2 = function() {
    var items = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      items[_i] = arguments[_i];
    }
    var result = {};
    for (var _a5 = 0, items_1 = items; _a5 < items_1.length; _a5++) {
      var item = items_1[_a5];
      var keys2 = Array.isArray(item) ? item : Object.keys(item);
      for (var _b = 0, keys_1 = keys2; _b < keys_1.length; _b++) {
        var key = keys_1[_b];
        result[key] = 1;
      }
    }
    return result;
  };
  var baseElementEvents2 = toObjectMap2([
    "onCopy",
    "onCut",
    "onPaste",
    "onCompositionEnd",
    "onCompositionStart",
    "onCompositionUpdate",
    "onFocus",
    "onFocusCapture",
    "onBlur",
    "onBlurCapture",
    "onChange",
    "onInput",
    "onSubmit",
    "onLoad",
    "onError",
    "onKeyDown",
    "onKeyDownCapture",
    "onKeyPress",
    "onKeyUp",
    "onAbort",
    "onCanPlay",
    "onCanPlayThrough",
    "onDurationChange",
    "onEmptied",
    "onEncrypted",
    "onEnded",
    "onLoadedData",
    "onLoadedMetadata",
    "onLoadStart",
    "onPause",
    "onPlay",
    "onPlaying",
    "onProgress",
    "onRateChange",
    "onSeeked",
    "onSeeking",
    "onStalled",
    "onSuspend",
    "onTimeUpdate",
    "onVolumeChange",
    "onWaiting",
    "onClick",
    "onClickCapture",
    "onContextMenu",
    "onDoubleClick",
    "onDrag",
    "onDragEnd",
    "onDragEnter",
    "onDragExit",
    "onDragLeave",
    "onDragOver",
    "onDragStart",
    "onDrop",
    "onMouseDown",
    "onMouseDownCapture",
    "onMouseEnter",
    "onMouseLeave",
    "onMouseMove",
    "onMouseOut",
    "onMouseOver",
    "onMouseUp",
    "onMouseUpCapture",
    "onSelect",
    "onTouchCancel",
    "onTouchEnd",
    "onTouchMove",
    "onTouchStart",
    "onScroll",
    "onWheel",
    "onPointerCancel",
    "onPointerDown",
    "onPointerEnter",
    "onPointerLeave",
    "onPointerMove",
    "onPointerOut",
    "onPointerOver",
    "onPointerUp",
    "onGotPointerCapture",
    "onLostPointerCapture"
  ]);
  var baseElementProperties2 = toObjectMap2([
    "accessKey",
    "children",
    "className",
    "contentEditable",
    "dir",
    "draggable",
    "hidden",
    "htmlFor",
    "id",
    "lang",
    "ref",
    "role",
    "style",
    "tabIndex",
    "title",
    "translate",
    "spellCheck",
    "name"
    // global
  ]);
  var htmlElementProperties2 = toObjectMap2(baseElementProperties2, baseElementEvents2);
  var labelProperties2 = toObjectMap2(htmlElementProperties2, [
    "form"
    // button, fieldset, input, label, meter, object, output, select, textarea
  ]);
  var audioProperties2 = toObjectMap2(htmlElementProperties2, [
    "height",
    "loop",
    "muted",
    "preload",
    "src",
    "width"
    // canvas, embed, iframe, img, input, object, video
  ]);
  var videoProperties2 = toObjectMap2(audioProperties2, [
    "poster"
    // video
  ]);
  var olProperties2 = toObjectMap2(htmlElementProperties2, [
    "start"
    // ol
  ]);
  var liProperties2 = toObjectMap2(htmlElementProperties2, [
    "value"
    // button, input, li, option, meter, progress, param
  ]);
  var anchorProperties2 = toObjectMap2(htmlElementProperties2, [
    "download",
    "href",
    "hrefLang",
    "media",
    "rel",
    "target",
    "type"
    // a, button, input, link, menu, object, script, source, style
  ]);
  var buttonProperties2 = toObjectMap2(htmlElementProperties2, [
    "autoFocus",
    "disabled",
    "form",
    "formAction",
    "formEncType",
    "formMethod",
    "formNoValidate",
    "formTarget",
    "type",
    "value"
    // button, input, li, option, meter, progress, param,
  ]);
  var inputProperties2 = toObjectMap2(buttonProperties2, [
    "accept",
    "alt",
    "autoCapitalize",
    "autoComplete",
    "checked",
    "dirname",
    "form",
    "height",
    "inputMode",
    "list",
    "max",
    "maxLength",
    "min",
    "minLength",
    "multiple",
    "pattern",
    "placeholder",
    "readOnly",
    "required",
    "src",
    "step",
    "size",
    "type",
    "value",
    "width"
    // canvas, embed, iframe, img, input, object, video
  ]);
  var textAreaProperties2 = toObjectMap2(buttonProperties2, [
    "autoCapitalize",
    "cols",
    "dirname",
    "form",
    "maxLength",
    "minLength",
    "placeholder",
    "readOnly",
    "required",
    "rows",
    "wrap"
    // textarea
  ]);
  var selectProperties2 = toObjectMap2(buttonProperties2, [
    "form",
    "multiple",
    "required"
    // input, select, textarea
  ]);
  var optionProperties2 = toObjectMap2(htmlElementProperties2, [
    "selected",
    "value"
    // button, input, li, option, meter, progress, param
  ]);
  var tableProperties2 = toObjectMap2(htmlElementProperties2, [
    "cellPadding",
    "cellSpacing"
    // table
  ]);
  var thProperties2 = toObjectMap2(htmlElementProperties2, [
    "rowSpan",
    "scope"
    // th
  ]);
  var tdProperties2 = toObjectMap2(htmlElementProperties2, [
    "colSpan",
    "headers",
    "rowSpan",
    "scope"
    // th
  ]);
  var colGroupProperties2 = toObjectMap2(htmlElementProperties2, [
    "span"
    // col, colgroup
  ]);
  var colProperties2 = toObjectMap2(htmlElementProperties2, [
    "span"
    // col, colgroup
  ]);
  var formProperties2 = toObjectMap2(htmlElementProperties2, [
    "acceptCharset",
    "action",
    "encType",
    "encType",
    "method",
    "noValidate",
    "target"
    // form
  ]);
  var iframeProperties2 = toObjectMap2(htmlElementProperties2, [
    "allow",
    "allowFullScreen",
    "allowPaymentRequest",
    "allowTransparency",
    "csp",
    "height",
    "importance",
    "referrerPolicy",
    "sandbox",
    "src",
    "srcDoc",
    "width"
    // canvas, embed, iframe, img, input, object, video,
  ]);
  var imgProperties2 = toObjectMap2(htmlElementProperties2, [
    "alt",
    "crossOrigin",
    "height",
    "src",
    "srcSet",
    "useMap",
    "width"
    // canvas, embed, iframe, img, input, object, video
  ]);
  var divProperties = htmlElementProperties2;
  function getNativeProps2(props, allowedPropNames, excludedPropNames) {
    var isArray = Array.isArray(allowedPropNames);
    var result = {};
    var keys2 = Object.keys(props);
    for (var _i = 0, keys_2 = keys2; _i < keys_2.length; _i++) {
      var key = keys_2[_i];
      var isNativeProp = !isArray && allowedPropNames[key] || isArray && allowedPropNames.indexOf(key) >= 0 || key.indexOf("data-") === 0 || key.indexOf("aria-") === 0;
      if (isNativeProp && (!excludedPropNames || (excludedPropNames === null || excludedPropNames === void 0 ? void 0 : excludedPropNames.indexOf(key)) === -1)) {
        result[key] = props[key];
      }
    }
    return result;
  }

  // ../node_modules/@fluentui/utilities/lib/initializeComponentRef.js
  function initializeComponentRef(obj) {
    extendComponent(obj, {
      componentDidMount: _onMount,
      componentDidUpdate: _onUpdate,
      componentWillUnmount: _onUnmount
    });
  }
  function _onMount() {
    _setComponentRef(this.props.componentRef, this);
  }
  function _onUpdate(prevProps) {
    if (prevProps.componentRef !== this.props.componentRef) {
      _setComponentRef(prevProps.componentRef, null);
      _setComponentRef(this.props.componentRef, this);
    }
  }
  function _onUnmount() {
    _setComponentRef(this.props.componentRef, null);
  }
  function _setComponentRef(componentRef, value) {
    if (componentRef) {
      if (typeof componentRef === "object") {
        componentRef.current = value;
      } else if (typeof componentRef === "function") {
        componentRef(value);
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/keyboard.js
  var _a2;
  var DirectionalKeyCodes = (_a2 = {}, _a2[KeyCodes.up] = 1, _a2[KeyCodes.down] = 1, _a2[KeyCodes.left] = 1, _a2[KeyCodes.right] = 1, _a2[KeyCodes.home] = 1, _a2[KeyCodes.end] = 1, _a2[KeyCodes.tab] = 1, _a2[KeyCodes.pageUp] = 1, _a2[KeyCodes.pageDown] = 1, _a2);
  function isDirectionalKeyCode(which) {
    return !!DirectionalKeyCodes[which];
  }

  // ../node_modules/@fluentui/utilities/lib/setFocusVisibility.js
  var IsFocusVisibleClassName = "ms-Fabric--isFocusVisible";
  var IsFocusHiddenClassName = "ms-Fabric--isFocusHidden";
  function updateClassList(el, enabled) {
    if (el) {
      el.classList.add(enabled ? IsFocusVisibleClassName : IsFocusHiddenClassName);
      el.classList.remove(enabled ? IsFocusHiddenClassName : IsFocusVisibleClassName);
    }
  }
  function setFocusVisibility(enabled, target, registeredProviders) {
    var _a5;
    if (registeredProviders) {
      registeredProviders.forEach(function(ref) {
        return updateClassList(ref.current, enabled);
      });
    } else {
      updateClassList((_a5 = getWindow(target)) === null || _a5 === void 0 ? void 0 : _a5.document.body, enabled);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/FocusRectsProvider.js
  var React122 = __toESM(require_react());

  // ../node_modules/@fluentui/utilities/lib/useFocusRects.js
  var React121 = __toESM(require_react());
  var mountCounters = /* @__PURE__ */ new WeakMap();
  var callbackMap = /* @__PURE__ */ new WeakMap();
  function setMountCounters(key, delta) {
    var newValue;
    var currValue = mountCounters.get(key);
    if (currValue) {
      newValue = currValue + delta;
    } else {
      newValue = 1;
    }
    mountCounters.set(key, newValue);
    return newValue;
  }
  function setCallbackMap(context) {
    var callbacks = callbackMap.get(context);
    if (callbacks) {
      return callbacks;
    }
    var onMouseDown = function(ev) {
      return _onMouseDown(ev, context.registeredProviders);
    };
    var onPointerDown = function(ev) {
      return _onPointerDown(ev, context.registeredProviders);
    };
    var onKeyDown = function(ev) {
      return _onKeyDown(ev, context.registeredProviders);
    };
    var onKeyUp = function(ev) {
      return _onKeyUp(ev, context.registeredProviders);
    };
    callbacks = { onMouseDown, onPointerDown, onKeyDown, onKeyUp };
    callbackMap.set(context, callbacks);
    return callbacks;
  }
  var FocusRectsContext = React121.createContext(void 0);
  function useFocusRects(rootRef) {
    var context = React121.useContext(FocusRectsContext);
    React121.useEffect(function() {
      var _a5, _b, _c, _d;
      var win2 = getWindow(rootRef === null || rootRef === void 0 ? void 0 : rootRef.current);
      if (!win2 || ((_a5 = win2.FabricConfig) === null || _a5 === void 0 ? void 0 : _a5.disableFocusRects) === true) {
        return void 0;
      }
      var el = win2;
      var onMouseDown;
      var onPointerDown;
      var onKeyDown;
      var onKeyUp;
      if (((_b = context === null || context === void 0 ? void 0 : context.providerRef) === null || _b === void 0 ? void 0 : _b.current) && ((_d = (_c = context === null || context === void 0 ? void 0 : context.providerRef) === null || _c === void 0 ? void 0 : _c.current) === null || _d === void 0 ? void 0 : _d.addEventListener)) {
        el = context.providerRef.current;
        var callbacks = (
          /*@__NOINLINE__*/
          setCallbackMap(context)
        );
        onMouseDown = callbacks.onMouseDown;
        onPointerDown = callbacks.onPointerDown;
        onKeyDown = callbacks.onKeyDown;
        onKeyUp = callbacks.onKeyUp;
      } else {
        onMouseDown = _onMouseDown;
        onPointerDown = _onPointerDown;
        onKeyDown = _onKeyDown;
        onKeyUp = _onKeyUp;
      }
      var count = setMountCounters(el, 1);
      if (count <= 1) {
        el.addEventListener("mousedown", onMouseDown, true);
        el.addEventListener("pointerdown", onPointerDown, true);
        el.addEventListener("keydown", onKeyDown, true);
        el.addEventListener("keyup", onKeyUp, true);
      }
      return function() {
        var _a6;
        if (!win2 || ((_a6 = win2.FabricConfig) === null || _a6 === void 0 ? void 0 : _a6.disableFocusRects) === true) {
          return;
        }
        count = setMountCounters(el, -1);
        if (count === 0) {
          el.removeEventListener("mousedown", onMouseDown, true);
          el.removeEventListener("pointerdown", onPointerDown, true);
          el.removeEventListener("keydown", onKeyDown, true);
          el.removeEventListener("keyup", onKeyUp, true);
        }
      };
    }, [context, rootRef]);
  }
  var FocusRects = function(props) {
    useFocusRects(props.rootRef);
    return null;
  };
  function _onMouseDown(ev, registeredProviders) {
    setFocusVisibility(false, ev.target, registeredProviders);
  }
  function _onPointerDown(ev, registeredProviders) {
    if (ev.pointerType !== "mouse") {
      setFocusVisibility(false, ev.target, registeredProviders);
    }
  }
  function _onKeyDown(ev, registeredProviders) {
    if (isDirectionalKeyCode(ev.which)) {
      setFocusVisibility(true, ev.target, registeredProviders);
    }
  }
  function _onKeyUp(ev, registeredProviders) {
    if (isDirectionalKeyCode(ev.which)) {
      setFocusVisibility(true, ev.target, registeredProviders);
    }
  }

  // ../node_modules/@fluentui/utilities/lib/FocusRectsProvider.js
  var FocusRectsProvider = function(props) {
    var providerRef = props.providerRef, layerRoot = props.layerRoot;
    var registeredProviders = React122.useState([])[0];
    var parentContext = React122.useContext(FocusRectsContext);
    var inheritParentContext = parentContext !== void 0 && !layerRoot;
    var context = React122.useMemo(function() {
      return inheritParentContext ? void 0 : {
        providerRef,
        registeredProviders,
        registerProvider: function(ref) {
          registeredProviders.push(ref);
          parentContext === null || parentContext === void 0 ? void 0 : parentContext.registerProvider(ref);
        },
        unregisterProvider: function(ref) {
          parentContext === null || parentContext === void 0 ? void 0 : parentContext.unregisterProvider(ref);
          var i2 = registeredProviders.indexOf(ref);
          if (i2 >= 0) {
            registeredProviders.splice(i2, 1);
          }
        }
      };
    }, [providerRef, registeredProviders, parentContext, inheritParentContext]);
    React122.useEffect(function() {
      if (context) {
        context.registerProvider(context.providerRef);
        return function() {
          return context.unregisterProvider(context.providerRef);
        };
      }
    }, [context]);
    if (context) {
      return React122.createElement(FocusRectsContext.Provider, { value: context }, props.children);
    } else {
      return React122.createElement(React122.Fragment, null, props.children);
    }
  };

  // ../node_modules/@fluentui/utilities/lib/localStorage.js
  function getItem2(key) {
    var result = null;
    try {
      var win2 = getWindow();
      result = win2 ? win2.localStorage.getItem(key) : null;
    } catch (e2) {
    }
    return result;
  }

  // ../node_modules/@fluentui/utilities/lib/language.js
  var _language;
  var STORAGE_KEY = "language";
  function getLanguage(persistenceType) {
    if (persistenceType === void 0) {
      persistenceType = "sessionStorage";
    }
    if (_language === void 0) {
      var doc = getDocument();
      var savedLanguage = persistenceType === "localStorage" ? getItem2(STORAGE_KEY) : persistenceType === "sessionStorage" ? getItem(STORAGE_KEY) : void 0;
      if (savedLanguage) {
        _language = savedLanguage;
      }
      if (_language === void 0 && doc) {
        _language = doc.documentElement.getAttribute("lang");
      }
      if (_language === void 0) {
        _language = "en";
      }
    }
    return _language;
  }

  // ../node_modules/@fluentui/utilities/lib/merge.js
  function merge(target) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      args[_i - 1] = arguments[_i];
    }
    for (var _a5 = 0, args_1 = args; _a5 < args_1.length; _a5++) {
      var arg = args_1[_a5];
      _merge(target || {}, arg);
    }
    return target;
  }
  function _merge(target, source, circularReferences) {
    if (circularReferences === void 0) {
      circularReferences = [];
    }
    circularReferences.push(source);
    for (var name_1 in source) {
      if (source.hasOwnProperty(name_1)) {
        if (name_1 !== "__proto__" && name_1 !== "constructor" && name_1 !== "prototype") {
          var value = source[name_1];
          if (typeof value === "object" && value !== null && !Array.isArray(value)) {
            var isCircularReference = circularReferences.indexOf(value) > -1;
            target[name_1] = isCircularReference ? value : _merge(target[name_1] || {}, value, circularReferences);
          } else {
            target[name_1] = value;
          }
        }
      }
    }
    circularReferences.pop();
    return target;
  }

  // ../node_modules/@fluentui/utilities/lib/mobileDetector.js
  var isIOS = function() {
    if (!window || !window.navigator || !window.navigator.userAgent) {
      return false;
    }
    return /iPad|iPhone|iPod/i.test(window.navigator.userAgent);
  };

  // ../node_modules/@fluentui/utilities/lib/modalize.js
  var tagsToIgnore = ["TEMPLATE", "STYLE", "SCRIPT"];
  function modalize(target) {
    var targetDocument = getDocument(target);
    if (!targetDocument) {
      return function() {
        return void 0;
      };
    }
    var affectedNodes = [];
    while (target !== targetDocument.body && target.parentElement) {
      for (var _i = 0, _a5 = target.parentElement.children; _i < _a5.length; _i++) {
        var sibling = _a5[_i];
        var ariaHidden = sibling.getAttribute("aria-hidden");
        if (sibling !== target && (ariaHidden === null || ariaHidden === void 0 ? void 0 : ariaHidden.toLowerCase()) !== "true" && tagsToIgnore.indexOf(sibling.tagName) === -1) {
          affectedNodes.push([sibling, ariaHidden]);
        }
      }
      target = target.parentElement;
    }
    affectedNodes.forEach(function(_a6) {
      var node4 = _a6[0];
      node4.setAttribute("aria-hidden", "true");
    });
    return function() {
      unmodalize(affectedNodes);
      affectedNodes = [];
    };
  }
  function unmodalize(affectedNodes) {
    affectedNodes.forEach(function(_a5) {
      var node4 = _a5[0], originalValue = _a5[1];
      if (originalValue) {
        node4.setAttribute("aria-hidden", originalValue);
      } else {
        node4.removeAttribute("aria-hidden");
      }
    });
  }

  // ../node_modules/@fluentui/utilities/lib/osDetector.js
  var isMacResult;
  function isMac(reset) {
    var _a5;
    if (typeof isMacResult === "undefined" || reset) {
      var win2 = getWindow();
      var userAgent = (_a5 = win2 === null || win2 === void 0 ? void 0 : win2.navigator) === null || _a5 === void 0 ? void 0 : _a5.userAgent;
      isMacResult = !!userAgent && userAgent.indexOf("Macintosh") !== -1;
    }
    return !!isMacResult;
  }

  // ../node_modules/@fluentui/utilities/lib/renderFunction/composeRenderFunction.js
  function createComposedRenderFunction(outer) {
    var outerMemoizer = createMemoizer(function(inner) {
      var innerMemoizer = createMemoizer(function(defaultRender) {
        return function(innerProps) {
          return inner(innerProps, defaultRender);
        };
      });
      return function(outerProps, defaultRender) {
        return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);
      };
    });
    return outerMemoizer;
  }
  var memoizer = createMemoizer(createComposedRenderFunction);
  function composeRenderFunction(outer, inner) {
    return memoizer(outer)(inner);
  }

  // ../node_modules/@fluentui/utilities/lib/styled.js
  var React123 = __toESM(require_react());
  var DefaultFields = ["theme", "styles"];
  function styled(Component17, baseStyles, getProps, customizable2, pure) {
    customizable2 = customizable2 || { scope: "", fields: void 0 };
    var scope = customizable2.scope, _a5 = customizable2.fields, fields = _a5 === void 0 ? DefaultFields : _a5;
    var Wrapped = React123.forwardRef(function(props, forwardedRef) {
      var styles2 = React123.useRef();
      var settings = useCustomizationSettings(fields, scope);
      var customizedStyles = settings.styles, dir = settings.dir, rest = __rest(settings, ["styles", "dir"]);
      var additionalProps = getProps ? getProps(props) : void 0;
      var cache3 = styles2.current && styles2.current.__cachedInputs__ || [];
      var propStyles = props.styles;
      if (!styles2.current || customizedStyles !== cache3[1] || propStyles !== cache3[2]) {
        var concatenatedStyles = function(styleProps) {
          return concatStyleSetsWithProps(styleProps, baseStyles, customizedStyles, propStyles);
        };
        concatenatedStyles.__cachedInputs__ = [
          baseStyles,
          customizedStyles,
          propStyles
        ];
        concatenatedStyles.__noStyleOverride__ = !customizedStyles && !propStyles;
        styles2.current = concatenatedStyles;
      }
      return React123.createElement(Component17, __assign({ ref: forwardedRef }, rest, additionalProps, props, { styles: styles2.current }));
    });
    Wrapped.displayName = "Styled".concat(Component17.displayName || Component17.name);
    var pureComponent = pure ? React123.memo(Wrapped) : Wrapped;
    if (Wrapped.displayName) {
      pureComponent.displayName = Wrapped.displayName;
    }
    return pureComponent;
  }

  // ../node_modules/@fluentui/utilities/lib/warn/warnControlledUsage.js
  var warningsMap;
  if (true) {
    warningsMap = {
      valueOnChange: {},
      valueDefaultValue: {},
      controlledToUncontrolled: {},
      uncontrolledToControlled: {}
    };
  }
  function warnControlledUsage(params) {
    if (true) {
      var componentId = params.componentId, componentName = params.componentName, defaultValueProp = params.defaultValueProp, props = params.props, oldProps = params.oldProps, onChangeProp = params.onChangeProp, readOnlyProp = params.readOnlyProp, valueProp = params.valueProp;
      var oldIsControlled = oldProps ? isControlled(oldProps, valueProp) : void 0;
      var newIsControlled = isControlled(props, valueProp);
      if (newIsControlled) {
        var hasOnChange = !!props[onChangeProp];
        var isReadOnly = !!(readOnlyProp && props[readOnlyProp]);
        if (!(hasOnChange || isReadOnly) && !warningsMap.valueOnChange[componentId]) {
          warningsMap.valueOnChange[componentId] = true;
          warn("Warning: You provided a '".concat(String(valueProp), "' prop to a ").concat(String(componentName), " without an '").concat(String(onChangeProp), "' handler. ") + "This will render a read-only field. If the field should be mutable use '".concat(String(defaultValueProp), "'. ") + "Otherwise, set '".concat(String(onChangeProp), "'").concat(readOnlyProp ? " or '".concat(String(readOnlyProp), "'") : "", "."));
        }
        var defaultValue2 = props[defaultValueProp];
        if (defaultValue2 !== void 0 && defaultValue2 !== null && !warningsMap.valueDefaultValue[componentId]) {
          warningsMap.valueDefaultValue[componentId] = true;
          warn("Warning: You provided both '".concat(String(valueProp), "' and '").concat(String(defaultValueProp), "' to a ").concat(componentName, ". ") + "Form fields must be either controlled or uncontrolled (specify either the '".concat(String(valueProp), "' prop, ") + "or the '".concat(String(defaultValueProp), "' prop, but not both). Decide between using a controlled or uncontrolled ") + "".concat(componentName, " and remove one of these props. More info: https://fb.me/react-controlled-components"));
        }
      }
      if (oldProps && newIsControlled !== oldIsControlled) {
        var oldType = oldIsControlled ? "a controlled" : "an uncontrolled";
        var newType = oldIsControlled ? "uncontrolled" : "controlled";
        var warnMap = oldIsControlled ? warningsMap.controlledToUncontrolled : warningsMap.uncontrolledToControlled;
        if (!warnMap[componentId]) {
          warnMap[componentId] = true;
          warn("Warning: A component is changing ".concat(oldType, " ").concat(componentName, " to be ").concat(newType, ". ") + "".concat(componentName, "s should not switch from controlled to uncontrolled (or vice versa). ") + "Decide between using controlled or uncontrolled for the lifetime of the component. More info: https://fb.me/react-controlled-components");
        }
      }
    }
  }

  // ../node_modules/@fluentui/utilities/lib/ie11Detector.js
  var isIE11 = function() {
    var _a5;
    var win2 = getWindow();
    if (!((_a5 = win2 === null || win2 === void 0 ? void 0 : win2.navigator) === null || _a5 === void 0 ? void 0 : _a5.userAgent)) {
      return false;
    }
    return win2.navigator.userAgent.indexOf("rv:11.0") > -1;
  };

  // ../node_modules/@fluentui/utilities/lib/getPropsWithDefaults.js
  function getPropsWithDefaults(defaultProps, propsWithoutDefaults) {
    var props = __assign({}, propsWithoutDefaults);
    for (var _i = 0, _a5 = Object.keys(defaultProps); _i < _a5.length; _i++) {
      var key = _a5[_i];
      if (props[key] === void 0) {
        props[key] = defaultProps[key];
      }
    }
    return props;
  }

  // ../node_modules/@fluentui/utilities/lib/createMergedRef.js
  var createResolver = function(local) {
    return function(newValue) {
      for (var _i = 0, _a5 = local.refs; _i < _a5.length; _i++) {
        var ref = _a5[_i];
        if (typeof ref === "function") {
          ref(newValue);
        } else if (ref) {
          ref.current = newValue;
        }
      }
    };
  };
  var createMergedRef = function(value) {
    var local = {
      refs: []
    };
    return function() {
      var newRefs = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        newRefs[_i] = arguments[_i];
      }
      if (!local.resolver || !arraysEqual(local.refs, newRefs)) {
        local.resolver = createResolver(local);
      }
      local.refs = newRefs;
      return local.resolver;
    };
  };

  // ../node_modules/@fluentui/utilities/lib/useIsomorphicLayoutEffect.js
  var React124 = __toESM(require_react());
  var useIsomorphicLayoutEffect3 = canUseDOM3() ? React124.useLayoutEffect : React124.useEffect;

  // ../node_modules/@fluentui/utilities/lib/version.js
  setVersion("@fluentui/utilities", "8.13.18");

  // ../node_modules/@fluentui/style-utilities/lib/utilities/icons.js
  var ICON_SETTING_NAME = "icons";
  var _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {
    __options: {
      disableWarnings: false,
      warnOnMissingIcons: true
    },
    __remapped: {}
  });
  var stylesheet2 = Stylesheet.getInstance();
  if (stylesheet2 && stylesheet2.onReset) {
    stylesheet2.onReset(function() {
      for (var name_1 in _iconSettings) {
        if (_iconSettings.hasOwnProperty(name_1) && !!_iconSettings[name_1].subset) {
          _iconSettings[name_1].subset.className = void 0;
        }
      }
    });
  }
  var normalizeIconName = function(name) {
    return name.toLowerCase();
  };
  function registerIcons(iconSubset, options) {
    var subset = __assign(__assign({}, iconSubset), { isRegistered: false, className: void 0 });
    var icons = iconSubset.icons;
    options = options ? __assign(__assign({}, _iconSettings.__options), options) : _iconSettings.__options;
    for (var iconName in icons) {
      if (icons.hasOwnProperty(iconName)) {
        var code2 = icons[iconName];
        var normalizedIconName = normalizeIconName(iconName);
        if (_iconSettings[normalizedIconName]) {
          _warnDuplicateIcon(iconName);
        } else {
          _iconSettings[normalizedIconName] = {
            code: code2,
            subset
          };
        }
      }
    }
  }
  function registerIconAlias(iconName, mappedToName) {
    _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);
  }
  function getIcon(name) {
    var icon10 = void 0;
    var options = _iconSettings.__options;
    name = name ? normalizeIconName(name) : "";
    name = _iconSettings.__remapped[name] || name;
    if (name) {
      icon10 = _iconSettings[name];
      if (icon10) {
        var subset = icon10.subset;
        if (subset && subset.fontFace) {
          if (!subset.isRegistered) {
            fontFace(subset.fontFace);
            subset.isRegistered = true;
          }
          if (!subset.className) {
            subset.className = mergeStyles(subset.style, {
              fontFamily: subset.fontFace.fontFamily,
              fontWeight: subset.fontFace.fontWeight || "normal",
              fontStyle: subset.fontFace.fontStyle || "normal"
            });
          }
        }
      } else {
        if (!options.disableWarnings && options.warnOnMissingIcons) {
          warn('The icon "'.concat(name, '" was used but not registered. See https://github.com/microsoft/fluentui/wiki/Using-icons for more information.'));
        }
      }
    }
    return icon10;
  }
  var _missingIcons = [];
  var _missingIconsTimer = void 0;
  function _warnDuplicateIcon(iconName) {
    var options = _iconSettings.__options;
    var warningDelay = 2e3;
    var maxIconsInMessage = 10;
    if (!options.disableWarnings) {
      _missingIcons.push(iconName);
      if (_missingIconsTimer === void 0) {
        _missingIconsTimer = setTimeout(function() {
          warn("Some icons were re-registered. Applications should only call registerIcons for any given icon once. Redefining what an icon is may have unintended consequences. Duplicates include: \n" + _missingIcons.slice(0, maxIconsInMessage).join(", ") + (_missingIcons.length > maxIconsInMessage ? " (+ ".concat(_missingIcons.length - maxIconsInMessage, " more)") : ""));
          _missingIconsTimer = void 0;
          _missingIcons = [];
        }, warningDelay);
      }
    }
  }

  // ../node_modules/@fluentui/theme/lib/utilities/makeSemanticColors.js
  function makeSemanticColors(p2, e2, s2, isInverted, depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    var semanticColors = __assign({
      primaryButtonBorder: "transparent",
      errorText: !isInverted ? "#a4262c" : "#F1707B",
      messageText: !isInverted ? "#323130" : "#F3F2F1",
      messageLink: !isInverted ? "#005A9E" : "#6CB8F6",
      messageLinkHovered: !isInverted ? "#004578" : "#82C7FF",
      infoIcon: !isInverted ? "#605e5c" : "#C8C6C4",
      errorIcon: !isInverted ? "#A80000" : "#F1707B",
      blockingIcon: !isInverted ? "#FDE7E9" : "#442726",
      warningIcon: !isInverted ? "#797775" : "#C8C6C4",
      severeWarningIcon: !isInverted ? "#D83B01" : "#FCE100",
      successIcon: !isInverted ? "#107C10" : "#92C353",
      infoBackground: !isInverted ? "#f3f2f1" : "#323130",
      errorBackground: !isInverted ? "#FDE7E9" : "#442726",
      blockingBackground: !isInverted ? "#FDE7E9" : "#442726",
      warningBackground: !isInverted ? "#FFF4CE" : "#433519",
      severeWarningBackground: !isInverted ? "#FED9CC" : "#4F2A0F",
      successBackground: !isInverted ? "#DFF6DD" : "#393D1B",
      // deprecated
      warningHighlight: !isInverted ? "#ffb900" : "#fff100",
      successText: !isInverted ? "#107C10" : "#92c353"
    }, s2);
    var fullSemanticColors = getSemanticColors(p2, e2, semanticColors, isInverted);
    return _fixDeprecatedSlots(fullSemanticColors, depComments);
  }
  function getSemanticColors(p2, e2, s2, isInverted, depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    var result = {};
    var _a5 = p2 || {}, white2 = _a5.white, black2 = _a5.black, themePrimary = _a5.themePrimary, themeDark = _a5.themeDark, themeDarker = _a5.themeDarker, themeDarkAlt = _a5.themeDarkAlt, themeLighter = _a5.themeLighter, neutralLight = _a5.neutralLight, neutralLighter = _a5.neutralLighter, neutralDark = _a5.neutralDark, neutralQuaternary = _a5.neutralQuaternary, neutralQuaternaryAlt = _a5.neutralQuaternaryAlt, neutralPrimary = _a5.neutralPrimary, neutralSecondary = _a5.neutralSecondary, neutralSecondaryAlt = _a5.neutralSecondaryAlt, neutralTertiary = _a5.neutralTertiary, neutralTertiaryAlt = _a5.neutralTertiaryAlt, neutralLighterAlt = _a5.neutralLighterAlt, accent = _a5.accent;
    if (white2) {
      result.bodyBackground = white2;
      result.bodyFrameBackground = white2;
      result.accentButtonText = white2;
      result.buttonBackground = white2;
      result.primaryButtonText = white2;
      result.primaryButtonTextHovered = white2;
      result.primaryButtonTextPressed = white2;
      result.inputBackground = white2;
      result.inputForegroundChecked = white2;
      result.listBackground = white2;
      result.menuBackground = white2;
      result.cardStandoutBackground = white2;
    }
    if (black2) {
      result.bodyTextChecked = black2;
      result.buttonTextCheckedHovered = black2;
    }
    if (themePrimary) {
      result.link = themePrimary;
      result.primaryButtonBackground = themePrimary;
      result.inputBackgroundChecked = themePrimary;
      result.inputIcon = themePrimary;
      result.inputFocusBorderAlt = themePrimary;
      result.menuIcon = themePrimary;
      result.menuHeader = themePrimary;
      result.accentButtonBackground = themePrimary;
    }
    if (themeDark) {
      result.primaryButtonBackgroundPressed = themeDark;
      result.inputBackgroundCheckedHovered = themeDark;
      result.inputIconHovered = themeDark;
    }
    if (themeDarker) {
      result.linkHovered = themeDarker;
    }
    if (themeDarkAlt) {
      result.primaryButtonBackgroundHovered = themeDarkAlt;
    }
    if (themeLighter) {
      result.inputPlaceholderBackgroundChecked = themeLighter;
    }
    if (neutralLight) {
      result.bodyBackgroundChecked = neutralLight;
      result.bodyFrameDivider = neutralLight;
      result.bodyDivider = neutralLight;
      result.variantBorder = neutralLight;
      result.buttonBackgroundCheckedHovered = neutralLight;
      result.buttonBackgroundPressed = neutralLight;
      result.listItemBackgroundChecked = neutralLight;
      result.listHeaderBackgroundPressed = neutralLight;
      result.menuItemBackgroundPressed = neutralLight;
      result.menuItemBackgroundChecked = neutralLight;
    }
    if (neutralLighter) {
      result.bodyBackgroundHovered = neutralLighter;
      result.buttonBackgroundHovered = neutralLighter;
      result.buttonBackgroundDisabled = neutralLighter;
      result.buttonBorderDisabled = neutralLighter;
      result.primaryButtonBackgroundDisabled = neutralLighter;
      result.disabledBackground = neutralLighter;
      result.listItemBackgroundHovered = neutralLighter;
      result.listHeaderBackgroundHovered = neutralLighter;
      result.menuItemBackgroundHovered = neutralLighter;
    }
    if (neutralQuaternary) {
      result.primaryButtonTextDisabled = neutralQuaternary;
      result.disabledSubtext = neutralQuaternary;
    }
    if (neutralQuaternaryAlt) {
      result.listItemBackgroundCheckedHovered = neutralQuaternaryAlt;
    }
    if (neutralTertiary) {
      result.disabledBodyText = neutralTertiary;
      result.variantBorderHovered = (s2 === null || s2 === void 0 ? void 0 : s2.variantBorderHovered) || neutralTertiary;
      result.buttonTextDisabled = neutralTertiary;
      result.inputIconDisabled = neutralTertiary;
      result.disabledText = neutralTertiary;
    }
    if (neutralPrimary) {
      result.bodyText = neutralPrimary;
      result.actionLink = neutralPrimary;
      result.buttonText = neutralPrimary;
      result.inputBorderHovered = neutralPrimary;
      result.inputText = neutralPrimary;
      result.listText = neutralPrimary;
      result.menuItemText = neutralPrimary;
    }
    if (neutralLighterAlt) {
      result.bodyStandoutBackground = neutralLighterAlt;
      result.defaultStateBackground = neutralLighterAlt;
    }
    if (neutralDark) {
      result.actionLinkHovered = neutralDark;
      result.buttonTextHovered = neutralDark;
      result.buttonTextChecked = neutralDark;
      result.buttonTextPressed = neutralDark;
      result.inputTextHovered = neutralDark;
      result.menuItemTextHovered = neutralDark;
    }
    if (neutralSecondary) {
      result.bodySubtext = neutralSecondary;
      result.focusBorder = neutralSecondary;
      result.inputBorder = neutralSecondary;
      result.smallInputBorder = neutralSecondary;
      result.inputPlaceholderText = neutralSecondary;
    }
    if (neutralSecondaryAlt) {
      result.buttonBorder = neutralSecondaryAlt;
    }
    if (neutralTertiaryAlt) {
      result.disabledBodySubtext = neutralTertiaryAlt;
      result.disabledBorder = neutralTertiaryAlt;
      result.buttonBackgroundChecked = neutralTertiaryAlt;
      result.menuDivider = neutralTertiaryAlt;
    }
    if (accent) {
      result.accentButtonBackground = accent;
    }
    if (e2 === null || e2 === void 0 ? void 0 : e2.elevation4) {
      result.cardShadow = e2.elevation4;
    }
    if (!isInverted && (e2 === null || e2 === void 0 ? void 0 : e2.elevation8)) {
      result.cardShadowHovered = e2.elevation8;
    } else if (result.variantBorderHovered) {
      result.cardShadowHovered = "0 0 1px " + result.variantBorderHovered;
    }
    result = __assign(__assign({}, result), s2);
    return result;
  }
  function _fixDeprecatedSlots(s2, depComments) {
    var dep = "";
    if (depComments === true) {
      dep = " /* @deprecated */";
    }
    s2.listTextColor = s2.listText + dep;
    s2.menuItemBackgroundChecked += dep;
    s2.warningHighlight += dep;
    s2.warningText = s2.messageText + dep;
    s2.successText += dep;
    return s2;
  }

  // ../node_modules/@fluentui/theme/lib/mergeThemes.js
  function mergeThemes(theme, partialTheme) {
    var _a5, _b, _c;
    if (partialTheme === void 0) {
      partialTheme = {};
    }
    var mergedTheme = merge({}, theme, partialTheme, {
      semanticColors: getSemanticColors(partialTheme.palette, partialTheme.effects, partialTheme.semanticColors, partialTheme.isInverted === void 0 ? theme.isInverted : partialTheme.isInverted)
    });
    if (((_a5 = partialTheme.palette) === null || _a5 === void 0 ? void 0 : _a5.themePrimary) && !((_b = partialTheme.palette) === null || _b === void 0 ? void 0 : _b.accent)) {
      mergedTheme.palette.accent = partialTheme.palette.themePrimary;
    }
    if (partialTheme.defaultFontStyle) {
      for (var _i = 0, _d = Object.keys(mergedTheme.fonts); _i < _d.length; _i++) {
        var fontStyle = _d[_i];
        mergedTheme.fonts[fontStyle] = merge(mergedTheme.fonts[fontStyle], partialTheme.defaultFontStyle, (_c = partialTheme === null || partialTheme === void 0 ? void 0 : partialTheme.fonts) === null || _c === void 0 ? void 0 : _c[fontStyle]);
      }
    }
    return mergedTheme;
  }

  // ../node_modules/@fluentui/theme/lib/colors/DefaultPalette.js
  var DefaultPalette = {
    themeDarker: "#004578",
    themeDark: "#005a9e",
    themeDarkAlt: "#106ebe",
    themePrimary: "#0078d4",
    themeSecondary: "#2b88d8",
    themeTertiary: "#71afe5",
    themeLight: "#c7e0f4",
    themeLighter: "#deecf9",
    themeLighterAlt: "#eff6fc",
    black: "#000000",
    blackTranslucent40: "rgba(0,0,0,.4)",
    neutralDark: "#201f1e",
    neutralPrimary: "#323130",
    neutralPrimaryAlt: "#3b3a39",
    neutralSecondary: "#605e5c",
    neutralSecondaryAlt: "#8a8886",
    neutralTertiary: "#a19f9d",
    neutralTertiaryAlt: "#c8c6c4",
    neutralQuaternary: "#d2d0ce",
    neutralQuaternaryAlt: "#e1dfdd",
    neutralLight: "#edebe9",
    neutralLighter: "#f3f2f1",
    neutralLighterAlt: "#faf9f8",
    accent: "#0078d4",
    white: "#ffffff",
    whiteTranslucent40: "rgba(255,255,255,.4)",
    yellowDark: "#d29200",
    yellow: "#ffb900",
    yellowLight: "#fff100",
    orange: "#d83b01",
    orangeLight: "#ea4300",
    orangeLighter: "#ff8c00",
    redDark: "#a4262c",
    red: "#e81123",
    magentaDark: "#5c005c",
    magenta: "#b4009e",
    magentaLight: "#e3008c",
    purpleDark: "#32145a",
    purple: "#5c2d91",
    purpleLight: "#b4a0ff",
    blueDark: "#002050",
    blueMid: "#00188f",
    blue: "#0078d4",
    blueLight: "#00bcf2",
    tealDark: "#004b50",
    teal: "#008272",
    tealLight: "#00b294",
    greenDark: "#004b1c",
    green: "#107c10",
    greenLight: "#bad80a"
  };

  // ../node_modules/@fluentui/theme/lib/effects/FluentDepths.js
  var Depths;
  (function(Depths2) {
    Depths2.depth0 = "0 0 0 0 transparent";
    Depths2.depth4 = "0 1.6px 3.6px 0 rgba(0, 0, 0, 0.132), 0 0.3px 0.9px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth8 = "0 3.2px 7.2px 0 rgba(0, 0, 0, 0.132), 0 0.6px 1.8px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth16 = "0 6.4px 14.4px 0 rgba(0, 0, 0, 0.132), 0 1.2px 3.6px 0 rgba(0, 0, 0, 0.108)";
    Depths2.depth64 = "0 25.6px 57.6px 0 rgba(0, 0, 0, 0.22), 0 4.8px 14.4px 0 rgba(0, 0, 0, 0.18)";
  })(Depths || (Depths = {}));

  // ../node_modules/@fluentui/theme/lib/effects/DefaultEffects.js
  var DefaultEffects = {
    elevation4: Depths.depth4,
    elevation8: Depths.depth8,
    elevation16: Depths.depth16,
    elevation64: Depths.depth64,
    roundedCorner2: "2px",
    roundedCorner4: "4px",
    roundedCorner6: "6px"
  };

  // ../node_modules/@fluentui/theme/lib/spacing/DefaultSpacing.js
  var DefaultSpacing = {
    s2: "4px",
    s1: "8px",
    m: "16px",
    l1: "20px",
    l2: "32px"
  };

  // ../node_modules/@fluentui/theme/lib/motion/AnimationStyles.js
  var EASING_FUNCTION_1 = "cubic-bezier(.1,.9,.2,1)";
  var EASING_FUNCTION_2 = "cubic-bezier(.1,.25,.75,.9)";
  var DURATION_1 = "0.167s";
  var DURATION_2 = "0.267s";
  var DURATION_3 = "0.367s";
  var DURATION_4 = "0.467s";
  var FADE_IN = keyframes({
    from: { opacity: 0 },
    to: { opacity: 1 }
  });
  var FADE_OUT = keyframes({
    from: { opacity: 1 },
    to: { opacity: 0, visibility: "hidden" }
  });
  var SLIDE_RIGHT_IN10 = _createSlideInX(-10);
  var SLIDE_RIGHT_IN20 = _createSlideInX(-20);
  var SLIDE_RIGHT_IN40 = _createSlideInX(-40);
  var SLIDE_RIGHT_IN400 = _createSlideInX(-400);
  var SLIDE_LEFT_IN10 = _createSlideInX(10);
  var SLIDE_LEFT_IN20 = _createSlideInX(20);
  var SLIDE_LEFT_IN40 = _createSlideInX(40);
  var SLIDE_LEFT_IN400 = _createSlideInX(400);
  var SLIDE_UP_IN10 = _createSlideInY(10);
  var SLIDE_UP_IN20 = _createSlideInY(20);
  var SLIDE_DOWN_IN10 = _createSlideInY(-10);
  var SLIDE_DOWN_IN20 = _createSlideInY(-20);
  var SLIDE_RIGHT_OUT10 = _createSlideOutX(10);
  var SLIDE_RIGHT_OUT20 = _createSlideOutX(20);
  var SLIDE_RIGHT_OUT40 = _createSlideOutX(40);
  var SLIDE_RIGHT_OUT400 = _createSlideOutX(400);
  var SLIDE_LEFT_OUT10 = _createSlideOutX(-10);
  var SLIDE_LEFT_OUT20 = _createSlideOutX(-20);
  var SLIDE_LEFT_OUT40 = _createSlideOutX(-40);
  var SLIDE_LEFT_OUT400 = _createSlideOutX(-400);
  var SLIDE_UP_OUT10 = _createSlideOutY(-10);
  var SLIDE_UP_OUT20 = _createSlideOutY(-20);
  var SLIDE_DOWN_OUT10 = _createSlideOutY(10);
  var SLIDE_DOWN_OUT20 = _createSlideOutY(20);
  var SCALE_UP100 = keyframes({
    from: { transform: "scale3d(.98,.98,1)" },
    to: { transform: "scale3d(1,1,1)" }
  });
  var SCALE_DOWN98 = keyframes({
    from: { transform: "scale3d(1,1,1)" },
    to: { transform: "scale3d(.98,.98,1)" }
  });
  var SCALE_DOWN100 = keyframes({
    from: { transform: "scale3d(1.03,1.03,1)" },
    to: { transform: "scale3d(1,1,1)" }
  });
  var SCALE_UP103 = keyframes({
    from: { transform: "scale3d(1,1,1)" },
    to: { transform: "scale3d(1.03,1.03,1)" }
  });
  var ROTATE90 = keyframes({
    from: { transform: "rotateZ(0deg)" },
    to: { transform: "rotateZ(90deg)" }
  });
  var ROTATE_N90 = keyframes({
    from: { transform: "rotateZ(0deg)" },
    to: { transform: "rotateZ(-90deg)" }
  });
  var AnimationStyles = {
    slideRightIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN10), DURATION_3, EASING_FUNCTION_1),
    slideRightIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN20), DURATION_3, EASING_FUNCTION_1),
    slideRightIn40: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN40), DURATION_3, EASING_FUNCTION_1),
    slideRightIn400: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_RIGHT_IN400), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN10), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN20), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn40: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN40), DURATION_3, EASING_FUNCTION_1),
    slideLeftIn400: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_LEFT_IN400), DURATION_3, EASING_FUNCTION_1),
    slideUpIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_UP_IN10), DURATION_3, EASING_FUNCTION_1),
    slideUpIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_UP_IN20), DURATION_3, EASING_FUNCTION_1),
    slideDownIn10: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_DOWN_IN10), DURATION_3, EASING_FUNCTION_1),
    slideDownIn20: _createAnimation("".concat(FADE_IN, ",").concat(SLIDE_DOWN_IN20), DURATION_3, EASING_FUNCTION_1),
    slideRightOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideRightOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT20), DURATION_3, EASING_FUNCTION_1),
    slideRightOut40: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT40), DURATION_3, EASING_FUNCTION_1),
    slideRightOut400: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_RIGHT_OUT400), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT20), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut40: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT40), DURATION_3, EASING_FUNCTION_1),
    slideLeftOut400: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_LEFT_OUT400), DURATION_3, EASING_FUNCTION_1),
    slideUpOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_UP_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideUpOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_UP_OUT20), DURATION_3, EASING_FUNCTION_1),
    slideDownOut10: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_DOWN_OUT10), DURATION_3, EASING_FUNCTION_1),
    slideDownOut20: _createAnimation("".concat(FADE_OUT, ",").concat(SLIDE_DOWN_OUT20), DURATION_3, EASING_FUNCTION_1),
    scaleUpIn100: _createAnimation("".concat(FADE_IN, ",").concat(SCALE_UP100), DURATION_3, EASING_FUNCTION_1),
    scaleDownIn100: _createAnimation("".concat(FADE_IN, ",").concat(SCALE_DOWN100), DURATION_3, EASING_FUNCTION_1),
    scaleUpOut103: _createAnimation("".concat(FADE_OUT, ",").concat(SCALE_UP103), DURATION_1, EASING_FUNCTION_2),
    scaleDownOut98: _createAnimation("".concat(FADE_OUT, ",").concat(SCALE_DOWN98), DURATION_1, EASING_FUNCTION_2),
    fadeIn100: _createAnimation(FADE_IN, DURATION_1, EASING_FUNCTION_2),
    fadeIn200: _createAnimation(FADE_IN, DURATION_2, EASING_FUNCTION_2),
    fadeIn400: _createAnimation(FADE_IN, DURATION_3, EASING_FUNCTION_2),
    fadeIn500: _createAnimation(FADE_IN, DURATION_4, EASING_FUNCTION_2),
    fadeOut100: _createAnimation(FADE_OUT, DURATION_1, EASING_FUNCTION_2),
    fadeOut200: _createAnimation(FADE_OUT, DURATION_2, EASING_FUNCTION_2),
    fadeOut400: _createAnimation(FADE_OUT, DURATION_3, EASING_FUNCTION_2),
    fadeOut500: _createAnimation(FADE_OUT, DURATION_4, EASING_FUNCTION_2),
    rotate90deg: _createAnimation(ROTATE90, "0.1s", EASING_FUNCTION_2),
    rotateN90deg: _createAnimation(ROTATE_N90, "0.1s", EASING_FUNCTION_2)
    // expandCollapse 100/200/400, delay 100/200
  };
  function _createAnimation(animationName, animationDuration, animationTimingFunction) {
    return {
      animationName,
      animationDuration,
      animationTimingFunction,
      animationFillMode: "both"
    };
  }
  function _createSlideInX(fromX) {
    return keyframes({
      from: { transform: "translate3d(".concat(fromX, "px,0,0)"), pointerEvents: "none" },
      to: { transform: "translate3d(0,0,0)", pointerEvents: "auto" }
    });
  }
  function _createSlideInY(fromY) {
    return keyframes({
      from: { transform: "translate3d(0,".concat(fromY, "px,0)"), pointerEvents: "none" },
      to: { transform: "translate3d(0,0,0)", pointerEvents: "auto" }
    });
  }
  function _createSlideOutX(toX) {
    return keyframes({
      from: { transform: "translate3d(0,0,0)" },
      to: { transform: "translate3d(".concat(toX, "px,0,0)") }
    });
  }
  function _createSlideOutY(toY) {
    return keyframes({
      from: { transform: "translate3d(0,0,0)" },
      to: { transform: "translate3d(0,".concat(toY, "px,0)") }
    });
  }

  // ../node_modules/@fluentui/theme/lib/fonts/FluentFonts.js
  var LocalizedFontNames;
  (function(LocalizedFontNames2) {
    LocalizedFontNames2.Arabic = "Segoe UI Web (Arabic)";
    LocalizedFontNames2.Cyrillic = "Segoe UI Web (Cyrillic)";
    LocalizedFontNames2.EastEuropean = "Segoe UI Web (East European)";
    LocalizedFontNames2.Greek = "Segoe UI Web (Greek)";
    LocalizedFontNames2.Hebrew = "Segoe UI Web (Hebrew)";
    LocalizedFontNames2.Thai = "Leelawadee UI Web";
    LocalizedFontNames2.Vietnamese = "Segoe UI Web (Vietnamese)";
    LocalizedFontNames2.WestEuropean = "Segoe UI Web (West European)";
    LocalizedFontNames2.Selawik = "Selawik Web";
    LocalizedFontNames2.Armenian = "Segoe UI Web (Armenian)";
    LocalizedFontNames2.Georgian = "Segoe UI Web (Georgian)";
  })(LocalizedFontNames || (LocalizedFontNames = {}));
  var LocalizedFontFamilies;
  (function(LocalizedFontFamilies2) {
    LocalizedFontFamilies2.Arabic = "'".concat(LocalizedFontNames.Arabic, "'");
    LocalizedFontFamilies2.ChineseSimplified = "'Microsoft Yahei UI', Verdana, Simsun";
    LocalizedFontFamilies2.ChineseTraditional = "'Microsoft Jhenghei UI', Pmingliu";
    LocalizedFontFamilies2.Cyrillic = "'".concat(LocalizedFontNames.Cyrillic, "'");
    LocalizedFontFamilies2.EastEuropean = "'".concat(LocalizedFontNames.EastEuropean, "'");
    LocalizedFontFamilies2.Greek = "'".concat(LocalizedFontNames.Greek, "'");
    LocalizedFontFamilies2.Hebrew = "'".concat(LocalizedFontNames.Hebrew, "'");
    LocalizedFontFamilies2.Hindi = "'Nirmala UI'";
    LocalizedFontFamilies2.Japanese = "'Yu Gothic UI', 'Meiryo UI', Meiryo, 'MS Pgothic', Osaka";
    LocalizedFontFamilies2.Korean = "'Malgun Gothic', Gulim";
    LocalizedFontFamilies2.Selawik = "'".concat(LocalizedFontNames.Selawik, "'");
    LocalizedFontFamilies2.Thai = "'Leelawadee UI Web', 'Kmer UI'";
    LocalizedFontFamilies2.Vietnamese = "'".concat(LocalizedFontNames.Vietnamese, "'");
    LocalizedFontFamilies2.WestEuropean = "'".concat(LocalizedFontNames.WestEuropean, "'");
    LocalizedFontFamilies2.Armenian = "'".concat(LocalizedFontNames.Armenian, "'");
    LocalizedFontFamilies2.Georgian = "'".concat(LocalizedFontNames.Georgian, "'");
  })(LocalizedFontFamilies || (LocalizedFontFamilies = {}));
  var FontSizes;
  (function(FontSizes2) {
    FontSizes2.size10 = "10px";
    FontSizes2.size12 = "12px";
    FontSizes2.size14 = "14px";
    FontSizes2.size16 = "16px";
    FontSizes2.size18 = "18px";
    FontSizes2.size20 = "20px";
    FontSizes2.size24 = "24px";
    FontSizes2.size28 = "28px";
    FontSizes2.size32 = "32px";
    FontSizes2.size42 = "42px";
    FontSizes2.size68 = "68px";
    FontSizes2.mini = "10px";
    FontSizes2.xSmall = "10px";
    FontSizes2.small = "12px";
    FontSizes2.smallPlus = "12px";
    FontSizes2.medium = "14px";
    FontSizes2.mediumPlus = "16px";
    FontSizes2.icon = "16px";
    FontSizes2.large = "18px";
    FontSizes2.xLarge = "20px";
    FontSizes2.xLargePlus = "24px";
    FontSizes2.xxLarge = "28px";
    FontSizes2.xxLargePlus = "32px";
    FontSizes2.superLarge = "42px";
    FontSizes2.mega = "68px";
  })(FontSizes || (FontSizes = {}));
  var FontWeights;
  (function(FontWeights2) {
    FontWeights2.light = 100;
    FontWeights2.semilight = 300;
    FontWeights2.regular = 400;
    FontWeights2.semibold = 600;
    FontWeights2.bold = 700;
  })(FontWeights || (FontWeights = {}));
  var IconFontSizes;
  (function(IconFontSizes2) {
    IconFontSizes2.xSmall = "10px";
    IconFontSizes2.small = "12px";
    IconFontSizes2.medium = "16px";
    IconFontSizes2.large = "20px";
  })(IconFontSizes || (IconFontSizes = {}));

  // ../node_modules/@fluentui/theme/lib/fonts/createFontStyles.js
  var FontFamilyFallbacks = "'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif";
  var defaultFontFamily = "'Segoe UI', '".concat(LocalizedFontNames.WestEuropean, "'");
  var LanguageToFontMap = {
    ar: LocalizedFontFamilies.Arabic,
    bg: LocalizedFontFamilies.Cyrillic,
    cs: LocalizedFontFamilies.EastEuropean,
    el: LocalizedFontFamilies.Greek,
    et: LocalizedFontFamilies.EastEuropean,
    he: LocalizedFontFamilies.Hebrew,
    hi: LocalizedFontFamilies.Hindi,
    hr: LocalizedFontFamilies.EastEuropean,
    hu: LocalizedFontFamilies.EastEuropean,
    ja: LocalizedFontFamilies.Japanese,
    kk: LocalizedFontFamilies.EastEuropean,
    ko: LocalizedFontFamilies.Korean,
    lt: LocalizedFontFamilies.EastEuropean,
    lv: LocalizedFontFamilies.EastEuropean,
    pl: LocalizedFontFamilies.EastEuropean,
    ru: LocalizedFontFamilies.Cyrillic,
    sk: LocalizedFontFamilies.EastEuropean,
    "sr-latn": LocalizedFontFamilies.EastEuropean,
    th: LocalizedFontFamilies.Thai,
    tr: LocalizedFontFamilies.EastEuropean,
    uk: LocalizedFontFamilies.Cyrillic,
    vi: LocalizedFontFamilies.Vietnamese,
    "zh-hans": LocalizedFontFamilies.ChineseSimplified,
    "zh-hant": LocalizedFontFamilies.ChineseTraditional,
    hy: LocalizedFontFamilies.Armenian,
    ka: LocalizedFontFamilies.Georgian
  };
  function _fontFamilyWithFallbacks(fontFamily) {
    return "".concat(fontFamily, ", ").concat(FontFamilyFallbacks);
  }
  function _getLocalizedFontFamily(language) {
    for (var lang in LanguageToFontMap) {
      if (LanguageToFontMap.hasOwnProperty(lang) && language && lang.indexOf(language) === 0) {
        return LanguageToFontMap[lang];
      }
    }
    return defaultFontFamily;
  }
  function _createFont(size, weight, fontFamily) {
    return {
      fontFamily,
      MozOsxFontSmoothing: "grayscale",
      WebkitFontSmoothing: "antialiased",
      fontSize: size,
      fontWeight: weight
    };
  }
  function createFontStyles(localeCode) {
    var localizedFont = _getLocalizedFontFamily(localeCode);
    var fontFamilyWithFallback = _fontFamilyWithFallbacks(localizedFont);
    var fontStyles = {
      tiny: _createFont(FontSizes.mini, FontWeights.regular, fontFamilyWithFallback),
      xSmall: _createFont(FontSizes.xSmall, FontWeights.regular, fontFamilyWithFallback),
      small: _createFont(FontSizes.small, FontWeights.regular, fontFamilyWithFallback),
      smallPlus: _createFont(FontSizes.smallPlus, FontWeights.regular, fontFamilyWithFallback),
      medium: _createFont(FontSizes.medium, FontWeights.regular, fontFamilyWithFallback),
      mediumPlus: _createFont(FontSizes.mediumPlus, FontWeights.regular, fontFamilyWithFallback),
      large: _createFont(FontSizes.large, FontWeights.regular, fontFamilyWithFallback),
      xLarge: _createFont(FontSizes.xLarge, FontWeights.semibold, fontFamilyWithFallback),
      xLargePlus: _createFont(FontSizes.xLargePlus, FontWeights.semibold, fontFamilyWithFallback),
      xxLarge: _createFont(FontSizes.xxLarge, FontWeights.semibold, fontFamilyWithFallback),
      xxLargePlus: _createFont(FontSizes.xxLargePlus, FontWeights.semibold, fontFamilyWithFallback),
      superLarge: _createFont(FontSizes.superLarge, FontWeights.semibold, fontFamilyWithFallback),
      mega: _createFont(FontSizes.mega, FontWeights.semibold, fontFamilyWithFallback)
    };
    return fontStyles;
  }

  // ../node_modules/@fluentui/theme/lib/fonts/DefaultFontStyles.js
  var DefaultBaseUrl = "https://res-1.cdn.office.net/files/fabric-cdn-prod_20230815.002/assets";
  var DefaultFontStyles = createFontStyles(getLanguage());
  function _registerFontFace(fontFamily, url, fontWeight, localFontName) {
    fontFamily = "'".concat(fontFamily, "'");
    var localFontSrc = localFontName !== void 0 ? "local('".concat(localFontName, "'),") : "";
    fontFace({
      fontFamily,
      src: localFontSrc + "url('".concat(url, ".woff2') format('woff2'),") + "url('".concat(url, ".woff') format('woff')"),
      fontWeight,
      fontStyle: "normal",
      fontDisplay: "swap"
    });
  }
  function _registerFontFaceSet(baseUrl, fontFamily, cdnFolder, cdnFontName, localFontName) {
    if (cdnFontName === void 0) {
      cdnFontName = "segoeui";
    }
    var urlBase = "".concat(baseUrl, "/").concat(cdnFolder, "/").concat(cdnFontName);
    _registerFontFace(fontFamily, urlBase + "-light", FontWeights.light, localFontName && localFontName + " Light");
    _registerFontFace(fontFamily, urlBase + "-semilight", FontWeights.semilight, localFontName && localFontName + " SemiLight");
    _registerFontFace(fontFamily, urlBase + "-regular", FontWeights.regular, localFontName);
    _registerFontFace(fontFamily, urlBase + "-semibold", FontWeights.semibold, localFontName && localFontName + " SemiBold");
    _registerFontFace(fontFamily, urlBase + "-bold", FontWeights.bold, localFontName && localFontName + " Bold");
  }
  function registerDefaultFontFaces(baseUrl) {
    if (baseUrl) {
      var fontUrl = "".concat(baseUrl, "/fonts");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Thai, "leelawadeeui-thai", "leelawadeeui");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Arabic, "segoeui-arabic");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Cyrillic, "segoeui-cyrillic");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.EastEuropean, "segoeui-easteuropean");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Greek, "segoeui-greek");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Hebrew, "segoeui-hebrew");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Vietnamese, "segoeui-vietnamese");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.WestEuropean, "segoeui-westeuropean", "segoeui", "Segoe UI");
      _registerFontFaceSet(fontUrl, LocalizedFontFamilies.Selawik, "selawik", "selawik");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Armenian, "segoeui-armenian");
      _registerFontFaceSet(fontUrl, LocalizedFontNames.Georgian, "segoeui-georgian");
      _registerFontFace("Leelawadee UI Web", "".concat(fontUrl, "/leelawadeeui-thai/leelawadeeui-semilight"), FontWeights.light);
      _registerFontFace("Leelawadee UI Web", "".concat(fontUrl, "/leelawadeeui-thai/leelawadeeui-bold"), FontWeights.semibold);
    }
  }
  function _getFontBaseUrl() {
    var _a5, _b;
    var fabricConfig = (_a5 = getWindow()) === null || _a5 === void 0 ? void 0 : _a5.FabricConfig;
    return (_b = fabricConfig === null || fabricConfig === void 0 ? void 0 : fabricConfig.fontBaseUrl) !== null && _b !== void 0 ? _b : DefaultBaseUrl;
  }
  registerDefaultFontFaces(_getFontBaseUrl());

  // ../node_modules/@fluentui/theme/lib/createTheme.js
  function createTheme(theme, depComments) {
    if (theme === void 0) {
      theme = {};
    }
    if (depComments === void 0) {
      depComments = false;
    }
    var isInverted = !!theme.isInverted;
    var baseTheme = {
      palette: DefaultPalette,
      effects: DefaultEffects,
      fonts: DefaultFontStyles,
      spacing: DefaultSpacing,
      isInverted,
      disableGlobalClassNames: false,
      semanticColors: makeSemanticColors(DefaultPalette, DefaultEffects, void 0, isInverted, depComments),
      rtl: void 0
    };
    return mergeThemes(baseTheme, theme);
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/CommonStyles.js
  var HighContrastSelector = "@media screen and (-ms-high-contrast: active), screen and (forced-colors: active)";
  var ScreenWidthMinMedium = 480;
  var ScreenWidthMinLarge = 640;
  var ScreenWidthMinXLarge = 1024;
  var ScreenWidthMinXXLarge = 1366;
  var ScreenWidthMinXXXLarge = 1920;
  var ScreenWidthMaxSmall = ScreenWidthMinMedium - 1;
  var ScreenWidthMaxMedium = ScreenWidthMinLarge - 1;
  var ScreenWidthMaxLarge = ScreenWidthMinXLarge - 1;
  var ScreenWidthMaxXLarge = ScreenWidthMinXXLarge - 1;
  var ScreenWidthMaxXXLarge = ScreenWidthMinXXXLarge - 1;
  function getScreenSelector(min, max) {
    var minSelector = typeof min === "number" ? " and (min-width: ".concat(min, "px)") : "";
    var maxSelector = typeof max === "number" ? " and (max-width: ".concat(max, "px)") : "";
    return "@media only screen".concat(minSelector).concat(maxSelector);
  }
  function getHighContrastNoAdjustStyle() {
    return {
      forcedColorAdjust: "none",
      MsHighContrastAdjust: "none"
    };
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/zIndexes.js
  var ZIndexes;
  (function(ZIndexes2) {
    ZIndexes2.Nav = 1;
    ZIndexes2.ScrollablePane = 1;
    ZIndexes2.FocusStyle = 1;
    ZIndexes2.Coachmark = 1e3;
    ZIndexes2.Layer = 1e6;
    ZIndexes2.KeytipLayer = 1000001;
  })(ZIndexes || (ZIndexes = {}));

  // ../node_modules/@fluentui/style-utilities/lib/styles/getFocusStyle.js
  function getFocusStyle(theme, insetOrOptions, position4, highContrastStyle, borderColor3, outlineColor, isFocusedOnly, borderRadius3) {
    if (typeof insetOrOptions === "number" || !insetOrOptions) {
      return _getFocusStyleInternal(theme, {
        inset: insetOrOptions,
        position: position4,
        highContrastStyle,
        borderColor: borderColor3,
        outlineColor,
        isFocusedOnly,
        borderRadius: borderRadius3
      });
    } else {
      return _getFocusStyleInternal(theme, insetOrOptions);
    }
  }
  function _getFocusStyleInternal(theme, options) {
    var _a5, _b;
    if (options === void 0) {
      options = {};
    }
    var borderRadius3 = options.borderRadius, _c = options.inset, inset = _c === void 0 ? 0 : _c, _d = options.width, width = _d === void 0 ? 1 : _d, _e = options.position, position4 = _e === void 0 ? "relative" : _e, highContrastStyle = options.highContrastStyle, _f = options.borderColor, borderColor3 = _f === void 0 ? theme.palette.white : _f, _g = options.outlineColor, outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g, _h = options.isFocusedOnly, isFocusedOnly = _h === void 0 ? true : _h, pointerEvents = options.pointerEvents;
    return {
      // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.
      outline: "transparent",
      // Requirement because pseudo-element is absolutely positioned.
      position: position4,
      selectors: (_a5 = {
        // Clear the focus border in Firefox.
        // Reference: http://stackoverflow.com/a/199319/1436671
        "::-moz-focus-inner": {
          border: "0"
        }
      }, // When the element that uses this mixin is in a :focus state, add a pseudo-element to
      // create a border.
      _a5[".".concat(IsFocusVisibleClassName, " &").concat(isFocusedOnly ? ":focus" : "", ":after")] = {
        content: '""',
        position: "absolute",
        pointerEvents,
        left: inset + 1,
        top: inset + 1,
        bottom: inset + 1,
        right: inset + 1,
        border: "".concat(width, "px solid ").concat(borderColor3),
        outline: "".concat(width, "px solid ").concat(outlineColor),
        zIndex: ZIndexes.FocusStyle,
        borderRadius: borderRadius3,
        selectors: (_b = {}, _b[HighContrastSelector] = highContrastStyle, _b)
      }, _a5)
    };
  }
  function focusClear() {
    return {
      selectors: {
        "&::-moz-focus-inner": {
          // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671
          border: 0
        },
        "&": {
          // Clear browser specific focus styles and use transparent as placeholder for focus style
          outline: "transparent"
        }
      }
    };
  }
  var getInputFocusStyle = function(borderColor3, borderRadius3, borderType, borderPosition) {
    var _a5, _b, _c;
    if (borderType === void 0) {
      borderType = "border";
    }
    if (borderPosition === void 0) {
      borderPosition = -1;
    }
    var isBorderBottom = borderType === "borderBottom";
    return {
      borderColor: borderColor3,
      selectors: {
        ":after": (_a5 = {
          pointerEvents: "none",
          content: "''",
          position: "absolute",
          left: isBorderBottom ? 0 : borderPosition,
          top: borderPosition,
          bottom: borderPosition,
          right: isBorderBottom ? 0 : borderPosition
        }, _a5[borderType] = "2px solid ".concat(borderColor3), _a5.borderRadius = borderRadius3, _a5.width = borderType === "borderBottom" ? "100%" : void 0, _a5.selectors = (_b = {}, _b[HighContrastSelector] = (_c = {}, _c[borderType === "border" ? "borderColor" : "borderBottomColor"] = "Highlight", _c), _b), _a5)
      }
    };
  };

  // ../node_modules/@fluentui/style-utilities/lib/styles/hiddenContentStyle.js
  var hiddenContentStyle = {
    position: "absolute",
    width: 1,
    height: 1,
    margin: -1,
    padding: 0,
    border: 0,
    overflow: "hidden",
    whiteSpace: "nowrap"
  };

  // ../node_modules/@fluentui/style-utilities/lib/styles/getGlobalClassNames.js
  var _getGlobalClassNames = memoizeFunction(function(classNames2, disableGlobalClassNames) {
    var styleSheet = Stylesheet.getInstance();
    if (disableGlobalClassNames) {
      return Object.keys(classNames2).reduce(function(acc, className) {
        acc[className] = styleSheet.getClassName(classNames2[className]);
        return acc;
      }, {});
    }
    return classNames2;
  });
  function getGlobalClassNames(classNames2, theme, disableGlobalClassNames) {
    return _getGlobalClassNames(classNames2, disableGlobalClassNames !== void 0 ? disableGlobalClassNames : theme.disableGlobalClassNames);
  }

  // ../node_modules/@microsoft/load-themed-styles/lib-es6/index.js
  var __assign2 = function() {
    __assign2 = Object.assign || function(t2) {
      for (var s2, i2 = 1, n3 = arguments.length; i2 < n3; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign2.apply(this, arguments);
  };
  var _root = typeof window === "undefined" ? window : window;
  var _styleNonce = _root && _root.CSPSettings && _root.CSPSettings.nonce;
  var _themeState = initializeThemeState();
  function initializeThemeState() {
    var state = _root.__themeState__ || {
      theme: void 0,
      lastStyleElement: void 0,
      registeredStyles: []
    };
    if (!state.runState) {
      state = __assign2(__assign2({}, state), { perf: {
        count: 0,
        duration: 0
      }, runState: {
        flushTimer: 0,
        mode: 0,
        buffer: []
      } });
    }
    if (!state.registeredThemableStyles) {
      state = __assign2(__assign2({}, state), { registeredThemableStyles: [] });
    }
    _root.__themeState__ = state;
    return state;
  }
  function applyThemableStyles(stylesArray, styleRecord) {
    if (_themeState.loadStyles) {
      _themeState.loadStyles(resolveThemableArray(stylesArray).styleString, stylesArray);
    } else {
      registerStyles(stylesArray);
    }
  }
  function loadTheme(theme) {
    _themeState.theme = theme;
    reloadStyles();
  }
  function clearStyles(option) {
    if (option === void 0) {
      option = 3;
    }
    if (option === 3 || option === 2) {
      clearStylesInternal(_themeState.registeredStyles);
      _themeState.registeredStyles = [];
    }
    if (option === 3 || option === 1) {
      clearStylesInternal(_themeState.registeredThemableStyles);
      _themeState.registeredThemableStyles = [];
    }
  }
  function clearStylesInternal(records) {
    records.forEach(function(styleRecord) {
      var styleElement = styleRecord && styleRecord.styleElement;
      if (styleElement && styleElement.parentElement) {
        styleElement.parentElement.removeChild(styleElement);
      }
    });
  }
  function reloadStyles() {
    if (_themeState.theme) {
      var themableStyles = [];
      for (var _i = 0, _a5 = _themeState.registeredThemableStyles; _i < _a5.length; _i++) {
        var styleRecord = _a5[_i];
        themableStyles.push(styleRecord.themableStyle);
      }
      if (themableStyles.length > 0) {
        clearStyles(
          1
          /* ClearStyleOptions.onlyThemable */
        );
        applyThemableStyles([].concat.apply([], themableStyles));
      }
    }
  }
  function resolveThemableArray(splitStyleArray) {
    var theme = _themeState.theme;
    var themable = false;
    var resolvedArray = (splitStyleArray || []).map(function(currentValue) {
      var themeSlot = currentValue.theme;
      if (themeSlot) {
        themable = true;
        var themedValue = theme ? theme[themeSlot] : void 0;
        var defaultValue2 = currentValue.defaultValue || "inherit";
        if (theme && !themedValue && console && !(themeSlot in theme) && typeof DEBUG !== "undefined" && DEBUG) {
          console.warn('Theming value not provided for "'.concat(themeSlot, '". Falling back to "').concat(defaultValue2, '".'));
        }
        return themedValue || defaultValue2;
      } else {
        return currentValue.rawString;
      }
    });
    return {
      styleString: resolvedArray.join(""),
      themable
    };
  }
  function registerStyles(styleArray) {
    if (typeof document === "undefined") {
      return;
    }
    var head = document.getElementsByTagName("head")[0];
    var styleElement = document.createElement("style");
    var _a5 = resolveThemableArray(styleArray), styleString = _a5.styleString, themable = _a5.themable;
    styleElement.setAttribute("data-load-themed-styles", "true");
    if (_styleNonce) {
      styleElement.setAttribute("nonce", _styleNonce);
    }
    styleElement.appendChild(document.createTextNode(styleString));
    _themeState.perf.count++;
    head.appendChild(styleElement);
    var ev = document.createEvent("HTMLEvents");
    ev.initEvent(
      "styleinsert",
      true,
      false
      /* cancelable */
    );
    ev.args = {
      newStyle: styleElement
    };
    document.dispatchEvent(ev);
    var record = {
      styleElement,
      themableStyle: styleArray
    };
    if (themable) {
      _themeState.registeredThemableStyles.push(record);
    } else {
      _themeState.registeredStyles.push(record);
    }
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/theme.js
  var _theme = createTheme({});
  var _onThemeChangeCallbacks = [];
  var ThemeSettingName = "theme";
  function initializeThemeInCustomizations() {
    var _a5;
    var _b, _c;
    var win2 = getWindow();
    if ((_b = win2 === null || win2 === void 0 ? void 0 : win2.FabricConfig) === null || _b === void 0 ? void 0 : _b.legacyTheme) {
      loadTheme2(win2.FabricConfig.legacyTheme);
    } else if (!Customizations.getSettings([ThemeSettingName]).theme) {
      if ((_c = win2 === null || win2 === void 0 ? void 0 : win2.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {
        _theme = createTheme(win2.FabricConfig.theme);
      }
      Customizations.applySettings((_a5 = {}, _a5[ThemeSettingName] = _theme, _a5));
    }
  }
  initializeThemeInCustomizations();
  function getTheme(depComments) {
    if (depComments === void 0) {
      depComments = false;
    }
    if (depComments === true) {
      _theme = createTheme({}, depComments);
    }
    return _theme;
  }
  function loadTheme2(theme, depComments) {
    var _a5;
    if (depComments === void 0) {
      depComments = false;
    }
    _theme = createTheme(theme, depComments);
    loadTheme(__assign(__assign(__assign(__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));
    Customizations.applySettings((_a5 = {}, _a5[ThemeSettingName] = _theme, _a5));
    _onThemeChangeCallbacks.forEach(function(callback) {
      try {
        callback(_theme);
      } catch (e2) {
      }
    });
    return _theme;
  }
  function _loadFonts(theme) {
    var lines = {};
    for (var _i = 0, _a5 = Object.keys(theme.fonts); _i < _a5.length; _i++) {
      var fontName = _a5[_i];
      var font = theme.fonts[fontName];
      for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {
        var propName = _c[_b];
        var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);
        var value = font[propName];
        if (propName === "fontSize" && typeof value === "number") {
          value = value + "px";
        }
        lines[name_1] = value;
      }
    }
    return lines;
  }

  // ../node_modules/@fluentui/style-utilities/lib/styles/GeneralStyles.js
  var normalize2 = {
    boxShadow: "none",
    margin: 0,
    padding: 0,
    boxSizing: "border-box"
  };

  // ../node_modules/@fluentui/style-utilities/lib/styles/getPlaceholderStyles.js
  function getPlaceholderStyles(styles2) {
    return {
      selectors: {
        "::placeholder": styles2,
        ":-ms-input-placeholder": styles2,
        "::-ms-input-placeholder": styles2
        // Edge
      }
    };
  }

  // ../node_modules/@fluentui/style-utilities/lib/classNames/AnimationClassNames.js
  var AnimationClassNames = buildClassMap(AnimationStyles);

  // ../node_modules/@fluentui/style-utilities/lib/cdn.js
  var FLUENT_CDN_BASE_URL = "https://res.cdn.office.net/files/fabric-cdn-prod_20230815.002";

  // ../node_modules/@fluentui/style-utilities/lib/version.js
  setVersion("@fluentui/style-utilities", "8.9.17");

  // ../node_modules/@fluentui/style-utilities/lib/index.js
  initializeThemeInCustomizations();

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons.js
  function initializeIcons(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons"',
        src: "url('".concat(baseUrl, "fabric-icons-a13498cf.woff') format('woff')")
      },
      icons: {
        GlobalNavButton: "\uE700",
        ChevronDown: "\uE70D",
        ChevronUp: "\uE70E",
        Edit: "\uE70F",
        Add: "\uE710",
        Cancel: "\uE711",
        More: "\uE712",
        Settings: "\uE713",
        Mail: "\uE715",
        Filter: "\uE71C",
        Search: "\uE721",
        Share: "\uE72D",
        BlockedSite: "\uE72F",
        FavoriteStar: "\uE734",
        FavoriteStarFill: "\uE735",
        CheckMark: "\uE73E",
        Delete: "\uE74D",
        ChevronLeft: "\uE76B",
        ChevronRight: "\uE76C",
        Calendar: "\uE787",
        Megaphone: "\uE789",
        Undo: "\uE7A7",
        Flag: "\uE7C1",
        Page: "\uE7C3",
        Pinned: "\uE840",
        View: "\uE890",
        Clear: "\uE894",
        Download: "\uE896",
        Upload: "\uE898",
        Folder: "\uE8B7",
        Sort: "\uE8CB",
        AlignRight: "\uE8E2",
        AlignLeft: "\uE8E4",
        Tag: "\uE8EC",
        AddFriend: "\uE8FA",
        Info: "\uE946",
        SortLines: "\uE9D0",
        List: "\uEA37",
        CircleRing: "\uEA3A",
        Heart: "\uEB51",
        HeartFill: "\uEB52",
        Tiles: "\uECA5",
        Embed: "\uECCE",
        Glimmer: "\uECF4",
        Ascending: "\uEDC0",
        Descending: "\uEDC1",
        SortUp: "\uEE68",
        SortDown: "\uEE69",
        SyncToPC: "\uEE6E",
        LargeGrid: "\uEECB",
        SkypeCheck: "\uEF80",
        SkypeClock: "\uEF81",
        SkypeMinus: "\uEF82",
        ClearFilter: "\uEF8F",
        Flow: "\uEF90",
        StatusCircleCheckmark: "\uF13E",
        MoreVertical: "\uF2BC"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-0.js
  function initializeIcons2(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-0"',
        src: "url('".concat(baseUrl, "fabric-icons-0-467ee27f.woff') format('woff')")
      },
      icons: {
        "PageLink": "\uE302",
        "CommentSolid": "\uE30E",
        "ChangeEntitlements": "\uE310",
        "Installation": "\uE311",
        "WebAppBuilderModule": "\uE313",
        "WebAppBuilderFragment": "\uE314",
        "WebAppBuilderSlot": "\uE315",
        "BullseyeTargetEdit": "\uE319",
        "WebAppBuilderFragmentCreate": "\uE31B",
        "PageData": "\uE31C",
        "PageHeaderEdit": "\uE31D",
        "ProductList": "\uE31E",
        "UnpublishContent": "\uE31F",
        "DependencyAdd": "\uE344",
        "DependencyRemove": "\uE345",
        "EntitlementPolicy": "\uE346",
        "EntitlementRedemption": "\uE347",
        "SchoolDataSyncLogo": "\uE34C",
        "PinSolid12": "\uE352",
        "PinSolidOff12": "\uE353",
        "AddLink": "\uE35E",
        "SharepointAppIcon16": "\uE365",
        "DataflowsLink": "\uE366",
        "TimePicker": "\uE367",
        "UserWarning": "\uE368",
        "ComplianceAudit": "\uE369",
        "InternetSharing": "\uE704",
        "Brightness": "\uE706",
        "MapPin": "\uE707",
        "Airplane": "\uE709",
        "Tablet": "\uE70A",
        "QuickNote": "\uE70B",
        "Video": "\uE714",
        "People": "\uE716",
        "Phone": "\uE717",
        "Pin": "\uE718",
        "Shop": "\uE719",
        "Stop": "\uE71A",
        "Link": "\uE71B",
        "AllApps": "\uE71D",
        "Zoom": "\uE71E",
        "ZoomOut": "\uE71F",
        "Microphone": "\uE720",
        "Camera": "\uE722",
        "Attach": "\uE723",
        "Send": "\uE724",
        "FavoriteList": "\uE728",
        "PageSolid": "\uE729",
        "Forward": "\uE72A",
        "Back": "\uE72B",
        "Refresh": "\uE72C",
        "Lock": "\uE72E",
        "ReportHacked": "\uE730",
        "EMI": "\uE731",
        "MiniLink": "\uE732",
        "Blocked": "\uE733",
        "ReadingMode": "\uE736",
        "Favicon": "\uE737",
        "Remove": "\uE738",
        "Checkbox": "\uE739",
        "CheckboxComposite": "\uE73A",
        "CheckboxFill": "\uE73B",
        "CheckboxIndeterminate": "\uE73C",
        "CheckboxCompositeReversed": "\uE73D",
        "BackToWindow": "\uE73F",
        "FullScreen": "\uE740",
        "Print": "\uE749",
        "Up": "\uE74A",
        "Down": "\uE74B",
        "OEM": "\uE74C",
        "Save": "\uE74E",
        "ReturnKey": "\uE751",
        "Cloud": "\uE753",
        "Flashlight": "\uE754",
        "CommandPrompt": "\uE756",
        "Sad": "\uE757",
        "RealEstate": "\uE758",
        "SIPMove": "\uE759",
        "EraseTool": "\uE75C",
        "GripperTool": "\uE75E",
        "Dialpad": "\uE75F",
        "PageLeft": "\uE760",
        "PageRight": "\uE761",
        "MultiSelect": "\uE762",
        "KeyboardClassic": "\uE765",
        "Play": "\uE768",
        "Pause": "\uE769",
        "InkingTool": "\uE76D",
        "Emoji2": "\uE76E",
        "GripperBarHorizontal": "\uE76F",
        "System": "\uE770",
        "Personalize": "\uE771",
        "SearchAndApps": "\uE773",
        "Globe": "\uE774",
        "EaseOfAccess": "\uE776",
        "ContactInfo": "\uE779",
        "Unpin": "\uE77A",
        "Contact": "\uE77B",
        "Memo": "\uE77C",
        "IncomingCall": "\uE77E"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-1.js
  function initializeIcons3(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-1"',
        src: "url('".concat(baseUrl, "fabric-icons-1-4d521695.woff') format('woff')")
      },
      icons: {
        "Paste": "\uE77F",
        "WindowsLogo": "\uE782",
        "Error": "\uE783",
        "GripperBarVertical": "\uE784",
        "Unlock": "\uE785",
        "Slideshow": "\uE786",
        "Trim": "\uE78A",
        "AutoEnhanceOn": "\uE78D",
        "AutoEnhanceOff": "\uE78E",
        "Color": "\uE790",
        "SaveAs": "\uE792",
        "Light": "\uE793",
        "Filters": "\uE795",
        "AspectRatio": "\uE799",
        "Contrast": "\uE7A1",
        "Redo": "\uE7A6",
        "Crop": "\uE7A8",
        "PhotoCollection": "\uE7AA",
        "Album": "\uE7AB",
        "Rotate": "\uE7AD",
        "PanoIndicator": "\uE7B0",
        "Translate": "\uE7B2",
        "RedEye": "\uE7B3",
        "ViewOriginal": "\uE7B4",
        "ThumbnailView": "\uE7B6",
        "Package": "\uE7B8",
        "Telemarketer": "\uE7B9",
        "Warning": "\uE7BA",
        "Financial": "\uE7BB",
        "Education": "\uE7BE",
        "ShoppingCart": "\uE7BF",
        "Train": "\uE7C0",
        "Move": "\uE7C2",
        "TouchPointer": "\uE7C9",
        "Merge": "\uE7D5",
        "TurnRight": "\uE7DB",
        "Ferry": "\uE7E3",
        "Highlight": "\uE7E6",
        "PowerButton": "\uE7E8",
        "Tab": "\uE7E9",
        "Admin": "\uE7EF",
        "TVMonitor": "\uE7F4",
        "Speakers": "\uE7F5",
        "Game": "\uE7FC",
        "HorizontalTabKey": "\uE7FD",
        "UnstackSelected": "\uE7FE",
        "StackIndicator": "\uE7FF",
        "Nav2DMapView": "\uE800",
        "StreetsideSplitMinimize": "\uE802",
        "Car": "\uE804",
        "Bus": "\uE806",
        "EatDrink": "\uE807",
        "SeeDo": "\uE808",
        "LocationCircle": "\uE80E",
        "Home": "\uE80F",
        "SwitcherStartEnd": "\uE810",
        "ParkingLocation": "\uE811",
        "IncidentTriangle": "\uE814",
        "Touch": "\uE815",
        "MapDirections": "\uE816",
        "CaretHollow": "\uE817",
        "CaretSolid": "\uE818",
        "History": "\uE81C",
        "Location": "\uE81D",
        "MapLayers": "\uE81E",
        "SearchNearby": "\uE820",
        "Work": "\uE821",
        "Recent": "\uE823",
        "Hotel": "\uE824",
        "Bank": "\uE825",
        "LocationDot": "\uE827",
        "Dictionary": "\uE82D",
        "ChromeBack": "\uE830",
        "FolderOpen": "\uE838",
        "PinnedFill": "\uE842",
        "RevToggleKey": "\uE845",
        "USB": "\uE88E",
        "Previous": "\uE892",
        "Next": "\uE893",
        "Sync": "\uE895",
        "Help": "\uE897",
        "Emoji": "\uE899",
        "MailForward": "\uE89C",
        "ClosePane": "\uE89F",
        "OpenPane": "\uE8A0",
        "PreviewLink": "\uE8A1",
        "ZoomIn": "\uE8A3",
        "Bookmarks": "\uE8A4",
        "Document": "\uE8A5",
        "ProtectedDocument": "\uE8A6",
        "OpenInNewWindow": "\uE8A7",
        "MailFill": "\uE8A8",
        "ViewAll": "\uE8A9",
        "Switch": "\uE8AB",
        "Rename": "\uE8AC",
        "Go": "\uE8AD",
        "Remote": "\uE8AF",
        "SelectAll": "\uE8B3",
        "Orientation": "\uE8B4",
        "Import": "\uE8B5"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-2.js
  function initializeIcons4(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-2"',
        src: "url('".concat(baseUrl, "fabric-icons-2-63c99abf.woff') format('woff')")
      },
      icons: {
        "Picture": "\uE8B9",
        "ChromeClose": "\uE8BB",
        "ShowResults": "\uE8BC",
        "Message": "\uE8BD",
        "CalendarDay": "\uE8BF",
        "CalendarWeek": "\uE8C0",
        "MailReplyAll": "\uE8C2",
        "Read": "\uE8C3",
        "Cut": "\uE8C6",
        "PaymentCard": "\uE8C7",
        "Copy": "\uE8C8",
        "Important": "\uE8C9",
        "MailReply": "\uE8CA",
        "GotoToday": "\uE8D1",
        "Font": "\uE8D2",
        "FontColor": "\uE8D3",
        "FolderFill": "\uE8D5",
        "Permissions": "\uE8D7",
        "DisableUpdates": "\uE8D8",
        "Unfavorite": "\uE8D9",
        "Italic": "\uE8DB",
        "Underline": "\uE8DC",
        "Bold": "\uE8DD",
        "MoveToFolder": "\uE8DE",
        "Dislike": "\uE8E0",
        "Like": "\uE8E1",
        "AlignCenter": "\uE8E3",
        "OpenFile": "\uE8E5",
        "ClearSelection": "\uE8E6",
        "FontDecrease": "\uE8E7",
        "FontIncrease": "\uE8E8",
        "FontSize": "\uE8E9",
        "CellPhone": "\uE8EA",
        "RepeatOne": "\uE8ED",
        "RepeatAll": "\uE8EE",
        "Calculator": "\uE8EF",
        "Library": "\uE8F1",
        "PostUpdate": "\uE8F3",
        "NewFolder": "\uE8F4",
        "CalendarReply": "\uE8F5",
        "UnsyncFolder": "\uE8F6",
        "SyncFolder": "\uE8F7",
        "BlockContact": "\uE8F8",
        "Accept": "\uE8FB",
        "BulletedList": "\uE8FD",
        "Preview": "\uE8FF",
        "News": "\uE900",
        "Chat": "\uE901",
        "Group": "\uE902",
        "World": "\uE909",
        "Comment": "\uE90A",
        "DockLeft": "\uE90C",
        "DockRight": "\uE90D",
        "Repair": "\uE90F",
        "Accounts": "\uE910",
        "Street": "\uE913",
        "RadioBullet": "\uE915",
        "Stopwatch": "\uE916",
        "Clock": "\uE917",
        "WorldClock": "\uE918",
        "AlarmClock": "\uE919",
        "Photo": "\uE91B",
        "ActionCenter": "\uE91C",
        "Hospital": "\uE91D",
        "Timer": "\uE91E",
        "FullCircleMask": "\uE91F",
        "LocationFill": "\uE920",
        "ChromeMinimize": "\uE921",
        "ChromeRestore": "\uE923",
        "Annotation": "\uE924",
        "Fingerprint": "\uE928",
        "Handwriting": "\uE929",
        "ChromeFullScreen": "\uE92D",
        "Completed": "\uE930",
        "Label": "\uE932",
        "FlickDown": "\uE935",
        "FlickUp": "\uE936",
        "FlickLeft": "\uE937",
        "FlickRight": "\uE938",
        "MiniExpand": "\uE93A",
        "MiniContract": "\uE93B",
        "Streaming": "\uE93E",
        "MusicInCollection": "\uE940",
        "OneDriveLogo": "\uE941",
        "CompassNW": "\uE942",
        "Code": "\uE943",
        "LightningBolt": "\uE945",
        "CalculatorMultiply": "\uE947",
        "CalculatorAddition": "\uE948",
        "CalculatorSubtract": "\uE949",
        "CalculatorPercentage": "\uE94C",
        "CalculatorEqualTo": "\uE94E",
        "PrintfaxPrinterFile": "\uE956",
        "StorageOptical": "\uE958",
        "Communications": "\uE95A",
        "Headset": "\uE95B",
        "Health": "\uE95E",
        "Webcam2": "\uE960",
        "FrontCamera": "\uE96B",
        "ChevronUpSmall": "\uE96D"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-3.js
  function initializeIcons5(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-3"',
        src: "url('".concat(baseUrl, "fabric-icons-3-089e217a.woff') format('woff')")
      },
      icons: {
        "ChevronDownSmall": "\uE96E",
        "ChevronLeftSmall": "\uE96F",
        "ChevronRightSmall": "\uE970",
        "ChevronUpMed": "\uE971",
        "ChevronDownMed": "\uE972",
        "ChevronLeftMed": "\uE973",
        "ChevronRightMed": "\uE974",
        "Devices2": "\uE975",
        "PC1": "\uE977",
        "PresenceChickletVideo": "\uE979",
        "Reply": "\uE97A",
        "HalfAlpha": "\uE97E",
        "ConstructionCone": "\uE98F",
        "DoubleChevronLeftMed": "\uE991",
        "Volume0": "\uE992",
        "Volume1": "\uE993",
        "Volume2": "\uE994",
        "Volume3": "\uE995",
        "Chart": "\uE999",
        "Robot": "\uE99A",
        "Manufacturing": "\uE99C",
        "LockSolid": "\uE9A2",
        "FitPage": "\uE9A6",
        "FitWidth": "\uE9A7",
        "BidiLtr": "\uE9AA",
        "BidiRtl": "\uE9AB",
        "RightDoubleQuote": "\uE9B1",
        "Sunny": "\uE9BD",
        "CloudWeather": "\uE9BE",
        "Cloudy": "\uE9BF",
        "PartlyCloudyDay": "\uE9C0",
        "PartlyCloudyNight": "\uE9C1",
        "ClearNight": "\uE9C2",
        "RainShowersDay": "\uE9C3",
        "Rain": "\uE9C4",
        "Thunderstorms": "\uE9C6",
        "RainSnow": "\uE9C7",
        "Snow": "\uE9C8",
        "BlowingSnow": "\uE9C9",
        "Frigid": "\uE9CA",
        "Fog": "\uE9CB",
        "Squalls": "\uE9CC",
        "Duststorm": "\uE9CD",
        "Unknown": "\uE9CE",
        "Precipitation": "\uE9CF",
        "Ribbon": "\uE9D1",
        "AreaChart": "\uE9D2",
        "Assign": "\uE9D3",
        "FlowChart": "\uE9D4",
        "CheckList": "\uE9D5",
        "Diagnostic": "\uE9D9",
        "Generate": "\uE9DA",
        "LineChart": "\uE9E6",
        "Equalizer": "\uE9E9",
        "BarChartHorizontal": "\uE9EB",
        "BarChartVertical": "\uE9EC",
        "Freezing": "\uE9EF",
        "FunnelChart": "\uE9F1",
        "Processing": "\uE9F5",
        "Quantity": "\uE9F8",
        "ReportDocument": "\uE9F9",
        "StackColumnChart": "\uE9FC",
        "SnowShowerDay": "\uE9FD",
        "HailDay": "\uEA00",
        "WorkFlow": "\uEA01",
        "HourGlass": "\uEA03",
        "StoreLogoMed20": "\uEA04",
        "TimeSheet": "\uEA05",
        "TriangleSolid": "\uEA08",
        "UpgradeAnalysis": "\uEA0B",
        "VideoSolid": "\uEA0C",
        "RainShowersNight": "\uEA0F",
        "SnowShowerNight": "\uEA11",
        "Teamwork": "\uEA12",
        "HailNight": "\uEA13",
        "PeopleAdd": "\uEA15",
        "Glasses": "\uEA16",
        "DateTime2": "\uEA17",
        "Shield": "\uEA18",
        "Header1": "\uEA19",
        "PageAdd": "\uEA1A",
        "NumberedList": "\uEA1C",
        "PowerBILogo": "\uEA1E",
        "Info2": "\uEA1F",
        "MusicInCollectionFill": "\uEA36",
        "Asterisk": "\uEA38",
        "ErrorBadge": "\uEA39",
        "CircleFill": "\uEA3B",
        "Record2": "\uEA3F",
        "AllAppsMirrored": "\uEA40",
        "BookmarksMirrored": "\uEA41",
        "BulletedListMirrored": "\uEA42",
        "CaretHollowMirrored": "\uEA45",
        "CaretSolidMirrored": "\uEA46",
        "ChromeBackMirrored": "\uEA47",
        "ClearSelectionMirrored": "\uEA48",
        "ClosePaneMirrored": "\uEA49",
        "DockLeftMirrored": "\uEA4C",
        "DoubleChevronLeftMedMirrored": "\uEA4D",
        "GoMirrored": "\uEA4F"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-4.js
  function initializeIcons6(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-4"',
        src: "url('".concat(baseUrl, "fabric-icons-4-a656cc0a.woff') format('woff')")
      },
      icons: {
        "HelpMirrored": "\uEA51",
        "ImportMirrored": "\uEA52",
        "ImportAllMirrored": "\uEA53",
        "ListMirrored": "\uEA55",
        "MailForwardMirrored": "\uEA56",
        "MailReplyMirrored": "\uEA57",
        "MailReplyAllMirrored": "\uEA58",
        "MiniContractMirrored": "\uEA59",
        "MiniExpandMirrored": "\uEA5A",
        "OpenPaneMirrored": "\uEA5B",
        "ParkingLocationMirrored": "\uEA5E",
        "SendMirrored": "\uEA63",
        "ShowResultsMirrored": "\uEA65",
        "ThumbnailViewMirrored": "\uEA67",
        "Media": "\uEA69",
        "Devices3": "\uEA6C",
        "Focus": "\uEA6F",
        "VideoLightOff": "\uEA74",
        "Lightbulb": "\uEA80",
        "StatusTriangle": "\uEA82",
        "VolumeDisabled": "\uEA85",
        "Puzzle": "\uEA86",
        "EmojiNeutral": "\uEA87",
        "EmojiDisappointed": "\uEA88",
        "HomeSolid": "\uEA8A",
        "Ringer": "\uEA8F",
        "PDF": "\uEA90",
        "HeartBroken": "\uEA92",
        "StoreLogo16": "\uEA96",
        "MultiSelectMirrored": "\uEA98",
        "Broom": "\uEA99",
        "AddToShoppingList": "\uEA9A",
        "Cocktails": "\uEA9D",
        "Wines": "\uEABF",
        "Articles": "\uEAC1",
        "Cycling": "\uEAC7",
        "DietPlanNotebook": "\uEAC8",
        "Pill": "\uEACB",
        "ExerciseTracker": "\uEACC",
        "HandsFree": "\uEAD0",
        "Medical": "\uEAD4",
        "Running": "\uEADA",
        "Weights": "\uEADB",
        "Trackers": "\uEADF",
        "AddNotes": "\uEAE3",
        "AllCurrency": "\uEAE4",
        "BarChart4": "\uEAE7",
        "CirclePlus": "\uEAEE",
        "Coffee": "\uEAEF",
        "Cotton": "\uEAF3",
        "Market": "\uEAFC",
        "Money": "\uEAFD",
        "PieDouble": "\uEB04",
        "PieSingle": "\uEB05",
        "RemoveFilter": "\uEB08",
        "Savings": "\uEB0B",
        "Sell": "\uEB0C",
        "StockDown": "\uEB0F",
        "StockUp": "\uEB11",
        "Lamp": "\uEB19",
        "Source": "\uEB1B",
        "MSNVideos": "\uEB1C",
        "Cricket": "\uEB1E",
        "Golf": "\uEB1F",
        "Baseball": "\uEB20",
        "Soccer": "\uEB21",
        "MoreSports": "\uEB22",
        "AutoRacing": "\uEB24",
        "CollegeHoops": "\uEB25",
        "CollegeFootball": "\uEB26",
        "ProFootball": "\uEB27",
        "ProHockey": "\uEB28",
        "Rugby": "\uEB2D",
        "SubstitutionsIn": "\uEB31",
        "Tennis": "\uEB33",
        "Arrivals": "\uEB34",
        "Design": "\uEB3C",
        "Website": "\uEB41",
        "Drop": "\uEB42",
        "HistoricalWeather": "\uEB43",
        "SkiResorts": "\uEB45",
        "Snowflake": "\uEB46",
        "BusSolid": "\uEB47",
        "FerrySolid": "\uEB48",
        "AirplaneSolid": "\uEB4C",
        "TrainSolid": "\uEB4D",
        "Ticket": "\uEB54",
        "WifiWarning4": "\uEB63",
        "Devices4": "\uEB66",
        "AzureLogo": "\uEB6A",
        "BingLogo": "\uEB6B",
        "MSNLogo": "\uEB6C",
        "OutlookLogoInverse": "\uEB6D",
        "OfficeLogo": "\uEB6E",
        "SkypeLogo": "\uEB6F",
        "Door": "\uEB75",
        "EditMirrored": "\uEB7E",
        "GiftCard": "\uEB8E",
        "DoubleBookmark": "\uEB8F",
        "StatusErrorFull": "\uEB90"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-5.js
  function initializeIcons7(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-5"',
        src: "url('".concat(baseUrl, "fabric-icons-5-f95ba260.woff') format('woff')")
      },
      icons: {
        "Certificate": "\uEB95",
        "FastForward": "\uEB9D",
        "Rewind": "\uEB9E",
        "Photo2": "\uEB9F",
        "OpenSource": "\uEBC2",
        "Movers": "\uEBCD",
        "CloudDownload": "\uEBD3",
        "Family": "\uEBDA",
        "WindDirection": "\uEBE6",
        "Bug": "\uEBE8",
        "SiteScan": "\uEBEC",
        "BrowserScreenShot": "\uEBED",
        "F12DevTools": "\uEBEE",
        "CSS": "\uEBEF",
        "JS": "\uEBF0",
        "DeliveryTruck": "\uEBF4",
        "ReminderPerson": "\uEBF7",
        "ReminderGroup": "\uEBF8",
        "ReminderTime": "\uEBF9",
        "TabletMode": "\uEBFC",
        "Umbrella": "\uEC04",
        "NetworkTower": "\uEC05",
        "CityNext": "\uEC06",
        "CityNext2": "\uEC07",
        "Section": "\uEC0C",
        "OneNoteLogoInverse": "\uEC0D",
        "ToggleFilled": "\uEC11",
        "ToggleBorder": "\uEC12",
        "SliderThumb": "\uEC13",
        "ToggleThumb": "\uEC14",
        "Documentation": "\uEC17",
        "Badge": "\uEC1B",
        "Giftbox": "\uEC1F",
        "VisualStudioLogo": "\uEC22",
        "HomeGroup": "\uEC26",
        "ExcelLogoInverse": "\uEC28",
        "WordLogoInverse": "\uEC29",
        "PowerPointLogoInverse": "\uEC2A",
        "Cafe": "\uEC32",
        "SpeedHigh": "\uEC4A",
        "Commitments": "\uEC4D",
        "ThisPC": "\uEC4E",
        "MusicNote": "\uEC4F",
        "MicOff": "\uEC54",
        "PlaybackRate1x": "\uEC57",
        "EdgeLogo": "\uEC60",
        "CompletedSolid": "\uEC61",
        "AlbumRemove": "\uEC62",
        "MessageFill": "\uEC70",
        "TabletSelected": "\uEC74",
        "MobileSelected": "\uEC75",
        "LaptopSelected": "\uEC76",
        "TVMonitorSelected": "\uEC77",
        "DeveloperTools": "\uEC7A",
        "Shapes": "\uEC7C",
        "InsertTextBox": "\uEC7D",
        "LowerBrightness": "\uEC8A",
        "WebComponents": "\uEC8B",
        "OfflineStorage": "\uEC8C",
        "DOM": "\uEC8D",
        "CloudUpload": "\uEC8E",
        "ScrollUpDown": "\uEC8F",
        "DateTime": "\uEC92",
        "Event": "\uECA3",
        "Cake": "\uECA4",
        "Org": "\uECA6",
        "PartyLeader": "\uECA7",
        "DRM": "\uECA8",
        "CloudAdd": "\uECA9",
        "AppIconDefault": "\uECAA",
        "Photo2Add": "\uECAB",
        "Photo2Remove": "\uECAC",
        "Calories": "\uECAD",
        "POI": "\uECAF",
        "AddTo": "\uECC8",
        "RadioBtnOff": "\uECCA",
        "RadioBtnOn": "\uECCB",
        "ExploreContent": "\uECCD",
        "Product": "\uECDC",
        "ProgressLoopInner": "\uECDE",
        "ProgressLoopOuter": "\uECDF",
        "Blocked2": "\uECE4",
        "FangBody": "\uECEB",
        "Toolbox": "\uECED",
        "PageHeader": "\uECEE",
        "ChatInviteFriend": "\uECFE",
        "Brush": "\uECFF",
        "Shirt": "\uED00",
        "Crown": "\uED01",
        "Diamond": "\uED02",
        "ScaleUp": "\uED09",
        "QRCode": "\uED14",
        "Feedback": "\uED15",
        "SharepointLogoInverse": "\uED18",
        "YammerLogo": "\uED19",
        "Hide": "\uED1A",
        "Uneditable": "\uED1D",
        "ReturnToSession": "\uED24",
        "OpenFolderHorizontal": "\uED25",
        "CalendarMirrored": "\uED28"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-6.js
  function initializeIcons8(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-6"',
        src: "url('".concat(baseUrl, "fabric-icons-6-ef6fd590.woff') format('woff')")
      },
      icons: {
        "SwayLogoInverse": "\uED29",
        "OutOfOffice": "\uED34",
        "Trophy": "\uED3F",
        "ReopenPages": "\uED50",
        "EmojiTabSymbols": "\uED58",
        "AADLogo": "\uED68",
        "AccessLogo": "\uED69",
        "AdminALogoInverse32": "\uED6A",
        "AdminCLogoInverse32": "\uED6B",
        "AdminDLogoInverse32": "\uED6C",
        "AdminELogoInverse32": "\uED6D",
        "AdminLLogoInverse32": "\uED6E",
        "AdminMLogoInverse32": "\uED6F",
        "AdminOLogoInverse32": "\uED70",
        "AdminPLogoInverse32": "\uED71",
        "AdminSLogoInverse32": "\uED72",
        "AdminYLogoInverse32": "\uED73",
        "DelveLogoInverse": "\uED76",
        "ExchangeLogoInverse": "\uED78",
        "LyncLogo": "\uED79",
        "OfficeVideoLogoInverse": "\uED7A",
        "SocialListeningLogo": "\uED7C",
        "VisioLogoInverse": "\uED7D",
        "Balloons": "\uED7E",
        "Cat": "\uED7F",
        "MailAlert": "\uED80",
        "MailCheck": "\uED81",
        "MailLowImportance": "\uED82",
        "MailPause": "\uED83",
        "MailRepeat": "\uED84",
        "SecurityGroup": "\uED85",
        "Table": "\uED86",
        "VoicemailForward": "\uED87",
        "VoicemailReply": "\uED88",
        "Waffle": "\uED89",
        "RemoveEvent": "\uED8A",
        "EventInfo": "\uED8B",
        "ForwardEvent": "\uED8C",
        "WipePhone": "\uED8D",
        "AddOnlineMeeting": "\uED8E",
        "JoinOnlineMeeting": "\uED8F",
        "RemoveLink": "\uED90",
        "PeopleBlock": "\uED91",
        "PeopleRepeat": "\uED92",
        "PeopleAlert": "\uED93",
        "PeoplePause": "\uED94",
        "TransferCall": "\uED95",
        "AddPhone": "\uED96",
        "UnknownCall": "\uED97",
        "NoteReply": "\uED98",
        "NoteForward": "\uED99",
        "NotePinned": "\uED9A",
        "RemoveOccurrence": "\uED9B",
        "Timeline": "\uED9C",
        "EditNote": "\uED9D",
        "CircleHalfFull": "\uED9E",
        "Room": "\uED9F",
        "Unsubscribe": "\uEDA0",
        "Subscribe": "\uEDA1",
        "HardDrive": "\uEDA2",
        "RecurringTask": "\uEDB2",
        "TaskManager": "\uEDB7",
        "TaskManagerMirrored": "\uEDB8",
        "Combine": "\uEDBB",
        "Split": "\uEDBC",
        "DoubleChevronUp": "\uEDBD",
        "DoubleChevronLeft": "\uEDBE",
        "DoubleChevronRight": "\uEDBF",
        "TextBox": "\uEDC2",
        "TextField": "\uEDC3",
        "NumberField": "\uEDC4",
        "Dropdown": "\uEDC5",
        "PenWorkspace": "\uEDC6",
        "BookingsLogo": "\uEDC7",
        "ClassNotebookLogoInverse": "\uEDC8",
        "DelveAnalyticsLogo": "\uEDCA",
        "DocsLogoInverse": "\uEDCB",
        "Dynamics365Logo": "\uEDCC",
        "DynamicSMBLogo": "\uEDCD",
        "OfficeAssistantLogo": "\uEDCE",
        "OfficeStoreLogo": "\uEDCF",
        "OneNoteEduLogoInverse": "\uEDD0",
        "PlannerLogo": "\uEDD1",
        "PowerApps": "\uEDD2",
        "Suitcase": "\uEDD3",
        "ProjectLogoInverse": "\uEDD4",
        "CaretLeft8": "\uEDD5",
        "CaretRight8": "\uEDD6",
        "CaretUp8": "\uEDD7",
        "CaretDown8": "\uEDD8",
        "CaretLeftSolid8": "\uEDD9",
        "CaretRightSolid8": "\uEDDA",
        "CaretUpSolid8": "\uEDDB",
        "CaretDownSolid8": "\uEDDC",
        "ClearFormatting": "\uEDDD",
        "Superscript": "\uEDDE",
        "Subscript": "\uEDDF",
        "Strikethrough": "\uEDE0",
        "Export": "\uEDE1",
        "ExportMirrored": "\uEDE2"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-7.js
  function initializeIcons9(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-7"',
        src: "url('".concat(baseUrl, "fabric-icons-7-2b97bb99.woff') format('woff')")
      },
      icons: {
        "SingleBookmark": "\uEDFF",
        "SingleBookmarkSolid": "\uEE00",
        "DoubleChevronDown": "\uEE04",
        "FollowUser": "\uEE05",
        "ReplyAll": "\uEE0A",
        "WorkforceManagement": "\uEE0F",
        "RecruitmentManagement": "\uEE12",
        "Questionnaire": "\uEE19",
        "ManagerSelfService": "\uEE23",
        "ProductionFloorManagement": "\uEE29",
        "ProductRelease": "\uEE2E",
        "ProductVariant": "\uEE30",
        "ReplyMirrored": "\uEE35",
        "ReplyAllMirrored": "\uEE36",
        "Medal": "\uEE38",
        "AddGroup": "\uEE3D",
        "QuestionnaireMirrored": "\uEE4B",
        "CloudImportExport": "\uEE55",
        "TemporaryUser": "\uEE58",
        "CaretSolid16": "\uEE62",
        "GroupedDescending": "\uEE66",
        "GroupedAscending": "\uEE67",
        "AwayStatus": "\uEE6A",
        "MyMoviesTV": "\uEE6C",
        "GenericScan": "\uEE6F",
        "AustralianRules": "\uEE70",
        "WifiEthernet": "\uEE77",
        "TrackersMirrored": "\uEE92",
        "DateTimeMirrored": "\uEE93",
        "StopSolid": "\uEE95",
        "DoubleChevronUp12": "\uEE96",
        "DoubleChevronDown12": "\uEE97",
        "DoubleChevronLeft12": "\uEE98",
        "DoubleChevronRight12": "\uEE99",
        "CalendarAgenda": "\uEE9A",
        "ConnectVirtualMachine": "\uEE9D",
        "AddEvent": "\uEEB5",
        "AssetLibrary": "\uEEB6",
        "DataConnectionLibrary": "\uEEB7",
        "DocLibrary": "\uEEB8",
        "FormLibrary": "\uEEB9",
        "FormLibraryMirrored": "\uEEBA",
        "ReportLibrary": "\uEEBB",
        "ReportLibraryMirrored": "\uEEBC",
        "ContactCard": "\uEEBD",
        "CustomList": "\uEEBE",
        "CustomListMirrored": "\uEEBF",
        "IssueTracking": "\uEEC0",
        "IssueTrackingMirrored": "\uEEC1",
        "PictureLibrary": "\uEEC2",
        "OfficeAddinsLogo": "\uEEC7",
        "OfflineOneDriveParachute": "\uEEC8",
        "OfflineOneDriveParachuteDisabled": "\uEEC9",
        "TriangleSolidUp12": "\uEECC",
        "TriangleSolidDown12": "\uEECD",
        "TriangleSolidLeft12": "\uEECE",
        "TriangleSolidRight12": "\uEECF",
        "TriangleUp12": "\uEED0",
        "TriangleDown12": "\uEED1",
        "TriangleLeft12": "\uEED2",
        "TriangleRight12": "\uEED3",
        "ArrowUpRight8": "\uEED4",
        "ArrowDownRight8": "\uEED5",
        "DocumentSet": "\uEED6",
        "GoToDashboard": "\uEEED",
        "DelveAnalytics": "\uEEEE",
        "ArrowUpRightMirrored8": "\uEEEF",
        "ArrowDownRightMirrored8": "\uEEF0",
        "CompanyDirectory": "\uEF0D",
        "OpenEnrollment": "\uEF1C",
        "CompanyDirectoryMirrored": "\uEF2B",
        "OneDriveAdd": "\uEF32",
        "ProfileSearch": "\uEF35",
        "Header2": "\uEF36",
        "Header3": "\uEF37",
        "Header4": "\uEF38",
        "RingerSolid": "\uEF3A",
        "Eyedropper": "\uEF3C",
        "MarketDown": "\uEF42",
        "CalendarWorkWeek": "\uEF51",
        "SidePanel": "\uEF52",
        "GlobeFavorite": "\uEF53",
        "CaretTopLeftSolid8": "\uEF54",
        "CaretTopRightSolid8": "\uEF55",
        "ViewAll2": "\uEF56",
        "DocumentReply": "\uEF57",
        "PlayerSettings": "\uEF58",
        "ReceiptForward": "\uEF59",
        "ReceiptReply": "\uEF5A",
        "ReceiptCheck": "\uEF5B",
        "Fax": "\uEF5C",
        "RecurringEvent": "\uEF5D",
        "ReplyAlt": "\uEF5E",
        "ReplyAllAlt": "\uEF5F",
        "EditStyle": "\uEF60",
        "EditMail": "\uEF61",
        "Lifesaver": "\uEF62",
        "LifesaverLock": "\uEF63",
        "InboxCheck": "\uEF64",
        "FolderSearch": "\uEF65"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-8.js
  function initializeIcons10(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-8"',
        src: "url('".concat(baseUrl, "fabric-icons-8-6fdf1528.woff') format('woff')")
      },
      icons: {
        "CollapseMenu": "\uEF66",
        "ExpandMenu": "\uEF67",
        "Boards": "\uEF68",
        "SunAdd": "\uEF69",
        "SunQuestionMark": "\uEF6A",
        "LandscapeOrientation": "\uEF6B",
        "DocumentSearch": "\uEF6C",
        "PublicCalendar": "\uEF6D",
        "PublicContactCard": "\uEF6E",
        "PublicEmail": "\uEF6F",
        "PublicFolder": "\uEF70",
        "WordDocument": "\uEF71",
        "PowerPointDocument": "\uEF72",
        "ExcelDocument": "\uEF73",
        "GroupedList": "\uEF74",
        "ClassroomLogo": "\uEF75",
        "Sections": "\uEF76",
        "EditPhoto": "\uEF77",
        "Starburst": "\uEF78",
        "ShareiOS": "\uEF79",
        "AirTickets": "\uEF7A",
        "PencilReply": "\uEF7B",
        "Tiles2": "\uEF7C",
        "SkypeCircleCheck": "\uEF7D",
        "SkypeCircleClock": "\uEF7E",
        "SkypeCircleMinus": "\uEF7F",
        "SkypeMessage": "\uEF83",
        "ClosedCaption": "\uEF84",
        "ATPLogo": "\uEF85",
        "OfficeFormsLogoInverse": "\uEF86",
        "RecycleBin": "\uEF87",
        "EmptyRecycleBin": "\uEF88",
        "Hide2": "\uEF89",
        "Breadcrumb": "\uEF8C",
        "BirthdayCake": "\uEF8D",
        "TimeEntry": "\uEF95",
        "CRMProcesses": "\uEFB1",
        "PageEdit": "\uEFB6",
        "PageArrowRight": "\uEFB8",
        "PageRemove": "\uEFBA",
        "Database": "\uEFC7",
        "DataManagementSettings": "\uEFC8",
        "CRMServices": "\uEFD2",
        "EditContact": "\uEFD3",
        "ConnectContacts": "\uEFD4",
        "AppIconDefaultAdd": "\uEFDA",
        "AppIconDefaultList": "\uEFDE",
        "ActivateOrders": "\uEFE0",
        "DeactivateOrders": "\uEFE1",
        "ProductCatalog": "\uEFE8",
        "ScatterChart": "\uEFEB",
        "AccountActivity": "\uEFF4",
        "DocumentManagement": "\uEFFC",
        "CRMReport": "\uEFFE",
        "KnowledgeArticle": "\uF000",
        "Relationship": "\uF003",
        "HomeVerify": "\uF00E",
        "ZipFolder": "\uF012",
        "SurveyQuestions": "\uF01B",
        "TextDocument": "\uF029",
        "TextDocumentShared": "\uF02B",
        "PageCheckedOut": "\uF02C",
        "PageShared": "\uF02D",
        "SaveAndClose": "\uF038",
        "Script": "\uF03A",
        "Archive": "\uF03F",
        "ActivityFeed": "\uF056",
        "Compare": "\uF057",
        "EventDate": "\uF059",
        "ArrowUpRight": "\uF069",
        "CaretRight": "\uF06B",
        "SetAction": "\uF071",
        "ChatBot": "\uF08B",
        "CaretSolidLeft": "\uF08D",
        "CaretSolidDown": "\uF08E",
        "CaretSolidRight": "\uF08F",
        "CaretSolidUp": "\uF090",
        "PowerAppsLogo": "\uF091",
        "PowerApps2Logo": "\uF092",
        "SearchIssue": "\uF09A",
        "SearchIssueMirrored": "\uF09B",
        "FabricAssetLibrary": "\uF09C",
        "FabricDataConnectionLibrary": "\uF09D",
        "FabricDocLibrary": "\uF09E",
        "FabricFormLibrary": "\uF09F",
        "FabricFormLibraryMirrored": "\uF0A0",
        "FabricReportLibrary": "\uF0A1",
        "FabricReportLibraryMirrored": "\uF0A2",
        "FabricPublicFolder": "\uF0A3",
        "FabricFolderSearch": "\uF0A4",
        "FabricMovetoFolder": "\uF0A5",
        "FabricUnsyncFolder": "\uF0A6",
        "FabricSyncFolder": "\uF0A7",
        "FabricOpenFolderHorizontal": "\uF0A8",
        "FabricFolder": "\uF0A9",
        "FabricFolderFill": "\uF0AA",
        "FabricNewFolder": "\uF0AB",
        "FabricPictureLibrary": "\uF0AC",
        "PhotoVideoMedia": "\uF0B1",
        "AddFavorite": "\uF0C8"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-9.js
  function initializeIcons11(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-9"',
        src: "url('".concat(baseUrl, "fabric-icons-9-c6162b42.woff') format('woff')")
      },
      icons: {
        "AddFavoriteFill": "\uF0C9",
        "BufferTimeBefore": "\uF0CF",
        "BufferTimeAfter": "\uF0D0",
        "BufferTimeBoth": "\uF0D1",
        "PublishContent": "\uF0D4",
        "ClipboardList": "\uF0E3",
        "ClipboardListMirrored": "\uF0E4",
        "CannedChat": "\uF0F2",
        "SkypeForBusinessLogo": "\uF0FC",
        "TabCenter": "\uF100",
        "PageCheckedin": "\uF104",
        "PageList": "\uF106",
        "ReadOutLoud": "\uF112",
        "CaretBottomLeftSolid8": "\uF121",
        "CaretBottomRightSolid8": "\uF122",
        "FolderHorizontal": "\uF12B",
        "MicrosoftStaffhubLogo": "\uF130",
        "GiftboxOpen": "\uF133",
        "StatusCircleOuter": "\uF136",
        "StatusCircleInner": "\uF137",
        "StatusCircleRing": "\uF138",
        "StatusTriangleOuter": "\uF139",
        "StatusTriangleInner": "\uF13A",
        "StatusTriangleExclamation": "\uF13B",
        "StatusCircleExclamation": "\uF13C",
        "StatusCircleErrorX": "\uF13D",
        "StatusCircleInfo": "\uF13F",
        "StatusCircleBlock": "\uF140",
        "StatusCircleBlock2": "\uF141",
        "StatusCircleQuestionMark": "\uF142",
        "StatusCircleSync": "\uF143",
        "Toll": "\uF160",
        "ExploreContentSingle": "\uF164",
        "CollapseContent": "\uF165",
        "CollapseContentSingle": "\uF166",
        "InfoSolid": "\uF167",
        "GroupList": "\uF168",
        "ProgressRingDots": "\uF16A",
        "CaloriesAdd": "\uF172",
        "BranchFork": "\uF173",
        "MuteChat": "\uF17A",
        "AddHome": "\uF17B",
        "AddWork": "\uF17C",
        "MobileReport": "\uF18A",
        "ScaleVolume": "\uF18C",
        "HardDriveGroup": "\uF18F",
        "FastMode": "\uF19A",
        "ToggleLeft": "\uF19E",
        "ToggleRight": "\uF19F",
        "TriangleShape": "\uF1A7",
        "RectangleShape": "\uF1A9",
        "CubeShape": "\uF1AA",
        "Trophy2": "\uF1AE",
        "BucketColor": "\uF1B6",
        "BucketColorFill": "\uF1B7",
        "Taskboard": "\uF1C2",
        "SingleColumn": "\uF1D3",
        "DoubleColumn": "\uF1D4",
        "TripleColumn": "\uF1D5",
        "ColumnLeftTwoThirds": "\uF1D6",
        "ColumnRightTwoThirds": "\uF1D7",
        "AccessLogoFill": "\uF1DB",
        "AnalyticsLogo": "\uF1DE",
        "AnalyticsQuery": "\uF1DF",
        "NewAnalyticsQuery": "\uF1E0",
        "AnalyticsReport": "\uF1E1",
        "WordLogo": "\uF1E3",
        "WordLogoFill": "\uF1E4",
        "ExcelLogo": "\uF1E5",
        "ExcelLogoFill": "\uF1E6",
        "OneNoteLogo": "\uF1E7",
        "OneNoteLogoFill": "\uF1E8",
        "OutlookLogo": "\uF1E9",
        "OutlookLogoFill": "\uF1EA",
        "PowerPointLogo": "\uF1EB",
        "PowerPointLogoFill": "\uF1EC",
        "PublisherLogo": "\uF1ED",
        "PublisherLogoFill": "\uF1EE",
        "ScheduleEventAction": "\uF1EF",
        "FlameSolid": "\uF1F3",
        "ServerProcesses": "\uF1FE",
        "Server": "\uF201",
        "SaveAll": "\uF203",
        "LinkedInLogo": "\uF20A",
        "Decimals": "\uF218",
        "SidePanelMirrored": "\uF221",
        "ProtectRestrict": "\uF22A",
        "Blog": "\uF22B",
        "UnknownMirrored": "\uF22E",
        "PublicContactCardMirrored": "\uF230",
        "GridViewSmall": "\uF232",
        "GridViewMedium": "\uF233",
        "GridViewLarge": "\uF234",
        "Step": "\uF241",
        "StepInsert": "\uF242",
        "StepShared": "\uF243",
        "StepSharedAdd": "\uF244",
        "StepSharedInsert": "\uF245",
        "ViewDashboard": "\uF246",
        "ViewList": "\uF247"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-10.js
  function initializeIcons12(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-10"',
        src: "url('".concat(baseUrl, "fabric-icons-10-c4ded8e4.woff') format('woff')")
      },
      icons: {
        "ViewListGroup": "\uF248",
        "ViewListTree": "\uF249",
        "TriggerAuto": "\uF24A",
        "TriggerUser": "\uF24B",
        "PivotChart": "\uF24C",
        "StackedBarChart": "\uF24D",
        "StackedLineChart": "\uF24E",
        "BuildQueue": "\uF24F",
        "BuildQueueNew": "\uF250",
        "UserFollowed": "\uF25C",
        "ContactLink": "\uF25F",
        "Stack": "\uF26F",
        "Bullseye": "\uF272",
        "VennDiagram": "\uF273",
        "FiveTileGrid": "\uF274",
        "FocalPoint": "\uF277",
        "Insert": "\uF278",
        "RingerRemove": "\uF279",
        "TeamsLogoInverse": "\uF27A",
        "TeamsLogo": "\uF27B",
        "TeamsLogoFill": "\uF27C",
        "SkypeForBusinessLogoFill": "\uF27D",
        "SharepointLogo": "\uF27E",
        "SharepointLogoFill": "\uF27F",
        "DelveLogo": "\uF280",
        "DelveLogoFill": "\uF281",
        "OfficeVideoLogo": "\uF282",
        "OfficeVideoLogoFill": "\uF283",
        "ExchangeLogo": "\uF284",
        "ExchangeLogoFill": "\uF285",
        "Signin": "\uF286",
        "DocumentApproval": "\uF28B",
        "CloneToDesktop": "\uF28C",
        "InstallToDrive": "\uF28D",
        "Blur": "\uF28E",
        "Build": "\uF28F",
        "ProcessMetaTask": "\uF290",
        "BranchFork2": "\uF291",
        "BranchLocked": "\uF292",
        "BranchCommit": "\uF293",
        "BranchCompare": "\uF294",
        "BranchMerge": "\uF295",
        "BranchPullRequest": "\uF296",
        "BranchSearch": "\uF297",
        "BranchShelveset": "\uF298",
        "RawSource": "\uF299",
        "MergeDuplicate": "\uF29A",
        "RowsGroup": "\uF29B",
        "RowsChild": "\uF29C",
        "Deploy": "\uF29D",
        "Redeploy": "\uF29E",
        "ServerEnviroment": "\uF29F",
        "VisioDiagram": "\uF2A0",
        "HighlightMappedShapes": "\uF2A1",
        "TextCallout": "\uF2A2",
        "IconSetsFlag": "\uF2A4",
        "VisioLogo": "\uF2A7",
        "VisioLogoFill": "\uF2A8",
        "VisioDocument": "\uF2A9",
        "TimelineProgress": "\uF2AA",
        "TimelineDelivery": "\uF2AB",
        "Backlog": "\uF2AC",
        "TeamFavorite": "\uF2AD",
        "TaskGroup": "\uF2AE",
        "TaskGroupMirrored": "\uF2AF",
        "ScopeTemplate": "\uF2B0",
        "AssessmentGroupTemplate": "\uF2B1",
        "NewTeamProject": "\uF2B2",
        "CommentAdd": "\uF2B3",
        "CommentNext": "\uF2B4",
        "CommentPrevious": "\uF2B5",
        "ShopServer": "\uF2B6",
        "LocaleLanguage": "\uF2B7",
        "QueryList": "\uF2B8",
        "UserSync": "\uF2B9",
        "UserPause": "\uF2BA",
        "StreamingOff": "\uF2BB",
        "ArrowTallUpLeft": "\uF2BD",
        "ArrowTallUpRight": "\uF2BE",
        "ArrowTallDownLeft": "\uF2BF",
        "ArrowTallDownRight": "\uF2C0",
        "FieldEmpty": "\uF2C1",
        "FieldFilled": "\uF2C2",
        "FieldChanged": "\uF2C3",
        "FieldNotChanged": "\uF2C4",
        "RingerOff": "\uF2C5",
        "PlayResume": "\uF2C6",
        "BulletedList2": "\uF2C7",
        "BulletedList2Mirrored": "\uF2C8",
        "ImageCrosshair": "\uF2C9",
        "GitGraph": "\uF2CA",
        "Repo": "\uF2CB",
        "RepoSolid": "\uF2CC",
        "FolderQuery": "\uF2CD",
        "FolderList": "\uF2CE",
        "FolderListMirrored": "\uF2CF",
        "LocationOutline": "\uF2D0",
        "POISolid": "\uF2D1",
        "CalculatorNotEqualTo": "\uF2D2",
        "BoxSubtractSolid": "\uF2D3"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-11.js
  function initializeIcons13(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-11"',
        src: "url('".concat(baseUrl, "fabric-icons-11-2a8393d6.woff') format('woff')")
      },
      icons: {
        "BoxAdditionSolid": "\uF2D4",
        "BoxMultiplySolid": "\uF2D5",
        "BoxPlaySolid": "\uF2D6",
        "BoxCheckmarkSolid": "\uF2D7",
        "CirclePauseSolid": "\uF2D8",
        "CirclePause": "\uF2D9",
        "MSNVideosSolid": "\uF2DA",
        "CircleStopSolid": "\uF2DB",
        "CircleStop": "\uF2DC",
        "NavigateBack": "\uF2DD",
        "NavigateBackMirrored": "\uF2DE",
        "NavigateForward": "\uF2DF",
        "NavigateForwardMirrored": "\uF2E0",
        "UnknownSolid": "\uF2E1",
        "UnknownMirroredSolid": "\uF2E2",
        "CircleAddition": "\uF2E3",
        "CircleAdditionSolid": "\uF2E4",
        "FilePDB": "\uF2E5",
        "FileTemplate": "\uF2E6",
        "FileSQL": "\uF2E7",
        "FileJAVA": "\uF2E8",
        "FileASPX": "\uF2E9",
        "FileCSS": "\uF2EA",
        "FileSass": "\uF2EB",
        "FileLess": "\uF2EC",
        "FileHTML": "\uF2ED",
        "JavaScriptLanguage": "\uF2EE",
        "CSharpLanguage": "\uF2EF",
        "CSharp": "\uF2F0",
        "VisualBasicLanguage": "\uF2F1",
        "VB": "\uF2F2",
        "CPlusPlusLanguage": "\uF2F3",
        "CPlusPlus": "\uF2F4",
        "FSharpLanguage": "\uF2F5",
        "FSharp": "\uF2F6",
        "TypeScriptLanguage": "\uF2F7",
        "PythonLanguage": "\uF2F8",
        "PY": "\uF2F9",
        "CoffeeScript": "\uF2FA",
        "MarkDownLanguage": "\uF2FB",
        "FullWidth": "\uF2FE",
        "FullWidthEdit": "\uF2FF",
        "Plug": "\uF300",
        "PlugSolid": "\uF301",
        "PlugConnected": "\uF302",
        "PlugDisconnected": "\uF303",
        "UnlockSolid": "\uF304",
        "Variable": "\uF305",
        "Parameter": "\uF306",
        "CommentUrgent": "\uF307",
        "Storyboard": "\uF308",
        "DiffInline": "\uF309",
        "DiffSideBySide": "\uF30A",
        "ImageDiff": "\uF30B",
        "ImagePixel": "\uF30C",
        "FileBug": "\uF30D",
        "FileCode": "\uF30E",
        "FileComment": "\uF30F",
        "BusinessHoursSign": "\uF310",
        "FileImage": "\uF311",
        "FileSymlink": "\uF312",
        "AutoFillTemplate": "\uF313",
        "WorkItem": "\uF314",
        "WorkItemBug": "\uF315",
        "LogRemove": "\uF316",
        "ColumnOptions": "\uF317",
        "Packages": "\uF318",
        "BuildIssue": "\uF319",
        "AssessmentGroup": "\uF31A",
        "VariableGroup": "\uF31B",
        "FullHistory": "\uF31C",
        "Wheelchair": "\uF31F",
        "SingleColumnEdit": "\uF321",
        "DoubleColumnEdit": "\uF322",
        "TripleColumnEdit": "\uF323",
        "ColumnLeftTwoThirdsEdit": "\uF324",
        "ColumnRightTwoThirdsEdit": "\uF325",
        "StreamLogo": "\uF329",
        "PassiveAuthentication": "\uF32A",
        "AlertSolid": "\uF331",
        "MegaphoneSolid": "\uF332",
        "TaskSolid": "\uF333",
        "ConfigurationSolid": "\uF334",
        "BugSolid": "\uF335",
        "CrownSolid": "\uF336",
        "Trophy2Solid": "\uF337",
        "QuickNoteSolid": "\uF338",
        "ConstructionConeSolid": "\uF339",
        "PageListSolid": "\uF33A",
        "PageListMirroredSolid": "\uF33B",
        "StarburstSolid": "\uF33C",
        "ReadingModeSolid": "\uF33D",
        "SadSolid": "\uF33E",
        "HealthSolid": "\uF33F",
        "ShieldSolid": "\uF340",
        "GiftBoxSolid": "\uF341",
        "ShoppingCartSolid": "\uF342",
        "MailSolid": "\uF343",
        "ChatSolid": "\uF344",
        "RibbonSolid": "\uF345"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-12.js
  function initializeIcons14(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-12"',
        src: "url('".concat(baseUrl, "fabric-icons-12-7e945a1e.woff') format('woff')")
      },
      icons: {
        "FinancialSolid": "\uF346",
        "FinancialMirroredSolid": "\uF347",
        "HeadsetSolid": "\uF348",
        "PermissionsSolid": "\uF349",
        "ParkingSolid": "\uF34A",
        "ParkingMirroredSolid": "\uF34B",
        "DiamondSolid": "\uF34C",
        "AsteriskSolid": "\uF34D",
        "OfflineStorageSolid": "\uF34E",
        "BankSolid": "\uF34F",
        "DecisionSolid": "\uF350",
        "Parachute": "\uF351",
        "ParachuteSolid": "\uF352",
        "FiltersSolid": "\uF353",
        "ColorSolid": "\uF354",
        "ReviewSolid": "\uF355",
        "ReviewRequestSolid": "\uF356",
        "ReviewRequestMirroredSolid": "\uF357",
        "ReviewResponseSolid": "\uF358",
        "FeedbackRequestSolid": "\uF359",
        "FeedbackRequestMirroredSolid": "\uF35A",
        "FeedbackResponseSolid": "\uF35B",
        "WorkItemBar": "\uF35C",
        "WorkItemBarSolid": "\uF35D",
        "Separator": "\uF35E",
        "NavigateExternalInline": "\uF35F",
        "PlanView": "\uF360",
        "TimelineMatrixView": "\uF361",
        "EngineeringGroup": "\uF362",
        "ProjectCollection": "\uF363",
        "CaretBottomRightCenter8": "\uF364",
        "CaretBottomLeftCenter8": "\uF365",
        "CaretTopRightCenter8": "\uF366",
        "CaretTopLeftCenter8": "\uF367",
        "DonutChart": "\uF368",
        "ChevronUnfold10": "\uF369",
        "ChevronFold10": "\uF36A",
        "DoubleChevronDown8": "\uF36B",
        "DoubleChevronUp8": "\uF36C",
        "DoubleChevronLeft8": "\uF36D",
        "DoubleChevronRight8": "\uF36E",
        "ChevronDownEnd6": "\uF36F",
        "ChevronUpEnd6": "\uF370",
        "ChevronLeftEnd6": "\uF371",
        "ChevronRightEnd6": "\uF372",
        "ContextMenu": "\uF37C",
        "AzureAPIManagement": "\uF37F",
        "AzureServiceEndpoint": "\uF380",
        "VSTSLogo": "\uF381",
        "VSTSAltLogo1": "\uF382",
        "VSTSAltLogo2": "\uF383",
        "FileTypeSolution": "\uF387",
        "WordLogoInverse16": "\uF390",
        "WordLogo16": "\uF391",
        "WordLogoFill16": "\uF392",
        "PowerPointLogoInverse16": "\uF393",
        "PowerPointLogo16": "\uF394",
        "PowerPointLogoFill16": "\uF395",
        "ExcelLogoInverse16": "\uF396",
        "ExcelLogo16": "\uF397",
        "ExcelLogoFill16": "\uF398",
        "OneNoteLogoInverse16": "\uF399",
        "OneNoteLogo16": "\uF39A",
        "OneNoteLogoFill16": "\uF39B",
        "OutlookLogoInverse16": "\uF39C",
        "OutlookLogo16": "\uF39D",
        "OutlookLogoFill16": "\uF39E",
        "PublisherLogoInverse16": "\uF39F",
        "PublisherLogo16": "\uF3A0",
        "PublisherLogoFill16": "\uF3A1",
        "VisioLogoInverse16": "\uF3A2",
        "VisioLogo16": "\uF3A3",
        "VisioLogoFill16": "\uF3A4",
        "TestBeaker": "\uF3A5",
        "TestBeakerSolid": "\uF3A6",
        "TestExploreSolid": "\uF3A7",
        "TestAutoSolid": "\uF3A8",
        "TestUserSolid": "\uF3A9",
        "TestImpactSolid": "\uF3AA",
        "TestPlan": "\uF3AB",
        "TestStep": "\uF3AC",
        "TestParameter": "\uF3AD",
        "TestSuite": "\uF3AE",
        "TestCase": "\uF3AF",
        "Sprint": "\uF3B0",
        "SignOut": "\uF3B1",
        "TriggerApproval": "\uF3B2",
        "Rocket": "\uF3B3",
        "AzureKeyVault": "\uF3B4",
        "Onboarding": "\uF3BA",
        "Transition": "\uF3BC",
        "LikeSolid": "\uF3BF",
        "DislikeSolid": "\uF3C0",
        "CRMCustomerInsightsApp": "\uF3C8",
        "EditCreate": "\uF3C9",
        "PlayReverseResume": "\uF3E4",
        "PlayReverse": "\uF3E5",
        "SearchData": "\uF3F1",
        "UnSetColor": "\uF3F9",
        "DeclineCall": "\uF405"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-13.js
  function initializeIcons15(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-13"',
        src: "url('".concat(baseUrl, "fabric-icons-13-c3989a02.woff') format('woff')")
      },
      icons: {
        "RectangularClipping": "\uF407",
        "TeamsLogo16": "\uF40A",
        "TeamsLogoFill16": "\uF40B",
        "Spacer": "\uF40D",
        "SkypeLogo16": "\uF40E",
        "SkypeForBusinessLogo16": "\uF40F",
        "SkypeForBusinessLogoFill16": "\uF410",
        "FilterSolid": "\uF412",
        "MailUndelivered": "\uF415",
        "MailTentative": "\uF416",
        "MailTentativeMirrored": "\uF417",
        "MailReminder": "\uF418",
        "ReceiptUndelivered": "\uF419",
        "ReceiptTentative": "\uF41A",
        "ReceiptTentativeMirrored": "\uF41B",
        "Inbox": "\uF41C",
        "IRMReply": "\uF41D",
        "IRMReplyMirrored": "\uF41E",
        "IRMForward": "\uF41F",
        "IRMForwardMirrored": "\uF420",
        "VoicemailIRM": "\uF421",
        "EventAccepted": "\uF422",
        "EventTentative": "\uF423",
        "EventTentativeMirrored": "\uF424",
        "EventDeclined": "\uF425",
        "IDBadge": "\uF427",
        "BackgroundColor": "\uF42B",
        "OfficeFormsLogoInverse16": "\uF433",
        "OfficeFormsLogo": "\uF434",
        "OfficeFormsLogoFill": "\uF435",
        "OfficeFormsLogo16": "\uF436",
        "OfficeFormsLogoFill16": "\uF437",
        "OfficeFormsLogoInverse24": "\uF43A",
        "OfficeFormsLogo24": "\uF43B",
        "OfficeFormsLogoFill24": "\uF43C",
        "PageLock": "\uF43F",
        "NotExecuted": "\uF440",
        "NotImpactedSolid": "\uF441",
        "FieldReadOnly": "\uF442",
        "FieldRequired": "\uF443",
        "BacklogBoard": "\uF444",
        "ExternalBuild": "\uF445",
        "ExternalTFVC": "\uF446",
        "ExternalXAML": "\uF447",
        "IssueSolid": "\uF448",
        "DefectSolid": "\uF449",
        "LadybugSolid": "\uF44A",
        "NugetLogo": "\uF44C",
        "TFVCLogo": "\uF44D",
        "ProjectLogo32": "\uF47E",
        "ProjectLogoFill32": "\uF47F",
        "ProjectLogo16": "\uF480",
        "ProjectLogoFill16": "\uF481",
        "SwayLogo32": "\uF482",
        "SwayLogoFill32": "\uF483",
        "SwayLogo16": "\uF484",
        "SwayLogoFill16": "\uF485",
        "ClassNotebookLogo32": "\uF486",
        "ClassNotebookLogoFill32": "\uF487",
        "ClassNotebookLogo16": "\uF488",
        "ClassNotebookLogoFill16": "\uF489",
        "ClassNotebookLogoInverse32": "\uF48A",
        "ClassNotebookLogoInverse16": "\uF48B",
        "StaffNotebookLogo32": "\uF48C",
        "StaffNotebookLogoFill32": "\uF48D",
        "StaffNotebookLogo16": "\uF48E",
        "StaffNotebookLogoFill16": "\uF48F",
        "StaffNotebookLogoInverted32": "\uF490",
        "StaffNotebookLogoInverted16": "\uF491",
        "KaizalaLogo": "\uF492",
        "TaskLogo": "\uF493",
        "ProtectionCenterLogo32": "\uF494",
        "GallatinLogo": "\uF496",
        "Globe2": "\uF49A",
        "Guitar": "\uF49B",
        "Breakfast": "\uF49C",
        "Brunch": "\uF49D",
        "BeerMug": "\uF49E",
        "Vacation": "\uF49F",
        "Teeth": "\uF4A0",
        "Taxi": "\uF4A1",
        "Chopsticks": "\uF4A2",
        "SyncOccurence": "\uF4A3",
        "UnsyncOccurence": "\uF4A4",
        "GIF": "\uF4A9",
        "PrimaryCalendar": "\uF4AE",
        "SearchCalendar": "\uF4AF",
        "VideoOff": "\uF4B0",
        "MicrosoftFlowLogo": "\uF4B1",
        "BusinessCenterLogo": "\uF4B2",
        "ToDoLogoBottom": "\uF4B3",
        "ToDoLogoTop": "\uF4B4",
        "EditSolid12": "\uF4B5",
        "EditSolidMirrored12": "\uF4B6",
        "UneditableSolid12": "\uF4B7",
        "UneditableSolidMirrored12": "\uF4B8",
        "UneditableMirrored": "\uF4B9",
        "AdminALogo32": "\uF4BA",
        "AdminALogoFill32": "\uF4BB",
        "ToDoLogoInverse": "\uF4BC"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-14.js
  function initializeIcons16(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-14"',
        src: "url('".concat(baseUrl, "fabric-icons-14-5cf58db8.woff') format('woff')")
      },
      icons: {
        "Snooze": "\uF4BD",
        "WaffleOffice365": "\uF4E0",
        "ImageSearch": "\uF4E8",
        "NewsSearch": "\uF4E9",
        "VideoSearch": "\uF4EA",
        "R": "\uF4EB",
        "FontColorA": "\uF4EC",
        "FontColorSwatch": "\uF4ED",
        "LightWeight": "\uF4EE",
        "NormalWeight": "\uF4EF",
        "SemiboldWeight": "\uF4F0",
        "GroupObject": "\uF4F1",
        "UngroupObject": "\uF4F2",
        "AlignHorizontalLeft": "\uF4F3",
        "AlignHorizontalCenter": "\uF4F4",
        "AlignHorizontalRight": "\uF4F5",
        "AlignVerticalTop": "\uF4F6",
        "AlignVerticalCenter": "\uF4F7",
        "AlignVerticalBottom": "\uF4F8",
        "HorizontalDistributeCenter": "\uF4F9",
        "VerticalDistributeCenter": "\uF4FA",
        "Ellipse": "\uF4FB",
        "Line": "\uF4FC",
        "Octagon": "\uF4FD",
        "Hexagon": "\uF4FE",
        "Pentagon": "\uF4FF",
        "RightTriangle": "\uF500",
        "HalfCircle": "\uF501",
        "QuarterCircle": "\uF502",
        "ThreeQuarterCircle": "\uF503",
        "6PointStar": "\uF504",
        "12PointStar": "\uF505",
        "ArrangeBringToFront": "\uF506",
        "ArrangeSendToBack": "\uF507",
        "ArrangeSendBackward": "\uF508",
        "ArrangeBringForward": "\uF509",
        "BorderDash": "\uF50A",
        "BorderDot": "\uF50B",
        "LineStyle": "\uF50C",
        "LineThickness": "\uF50D",
        "WindowEdit": "\uF50E",
        "HintText": "\uF50F",
        "MediaAdd": "\uF510",
        "AnchorLock": "\uF511",
        "AutoHeight": "\uF512",
        "ChartSeries": "\uF513",
        "ChartXAngle": "\uF514",
        "ChartYAngle": "\uF515",
        "Combobox": "\uF516",
        "LineSpacing": "\uF517",
        "Padding": "\uF518",
        "PaddingTop": "\uF519",
        "PaddingBottom": "\uF51A",
        "PaddingLeft": "\uF51B",
        "PaddingRight": "\uF51C",
        "NavigationFlipper": "\uF51D",
        "AlignJustify": "\uF51E",
        "TextOverflow": "\uF51F",
        "VisualsFolder": "\uF520",
        "VisualsStore": "\uF521",
        "PictureCenter": "\uF522",
        "PictureFill": "\uF523",
        "PicturePosition": "\uF524",
        "PictureStretch": "\uF525",
        "PictureTile": "\uF526",
        "Slider": "\uF527",
        "SliderHandleSize": "\uF528",
        "DefaultRatio": "\uF529",
        "NumberSequence": "\uF52A",
        "GUID": "\uF52B",
        "ReportAdd": "\uF52C",
        "DashboardAdd": "\uF52D",
        "MapPinSolid": "\uF52E",
        "WebPublish": "\uF52F",
        "PieSingleSolid": "\uF530",
        "BlockedSolid": "\uF531",
        "DrillDown": "\uF532",
        "DrillDownSolid": "\uF533",
        "DrillExpand": "\uF534",
        "DrillShow": "\uF535",
        "SpecialEvent": "\uF536",
        "OneDriveFolder16": "\uF53B",
        "FunctionalManagerDashboard": "\uF542",
        "BIDashboard": "\uF543",
        "CodeEdit": "\uF544",
        "RenewalCurrent": "\uF545",
        "RenewalFuture": "\uF546",
        "SplitObject": "\uF547",
        "BulkUpload": "\uF548",
        "DownloadDocument": "\uF549",
        "GreetingCard": "\uF54B",
        "Flower": "\uF54E",
        "WaitlistConfirm": "\uF550",
        "WaitlistConfirmMirrored": "\uF551",
        "LaptopSecure": "\uF552",
        "DragObject": "\uF553",
        "EntryView": "\uF554",
        "EntryDecline": "\uF555",
        "ContactCardSettings": "\uF556",
        "ContactCardSettingsMirrored": "\uF557"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-15.js
  function initializeIcons17(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-15"',
        src: "url('".concat(baseUrl, "fabric-icons-15-3807251b.woff') format('woff')")
      },
      icons: {
        "CalendarSettings": "\uF558",
        "CalendarSettingsMirrored": "\uF559",
        "HardDriveLock": "\uF55A",
        "HardDriveUnlock": "\uF55B",
        "AccountManagement": "\uF55C",
        "ReportWarning": "\uF569",
        "TransitionPop": "\uF5B2",
        "TransitionPush": "\uF5B3",
        "TransitionEffect": "\uF5B4",
        "LookupEntities": "\uF5B5",
        "ExploreData": "\uF5B6",
        "AddBookmark": "\uF5B7",
        "SearchBookmark": "\uF5B8",
        "DrillThrough": "\uF5B9",
        "MasterDatabase": "\uF5BA",
        "CertifiedDatabase": "\uF5BB",
        "MaximumValue": "\uF5BC",
        "MinimumValue": "\uF5BD",
        "VisualStudioIDELogo32": "\uF5D0",
        "PasteAsText": "\uF5D5",
        "PasteAsCode": "\uF5D6",
        "BrowserTab": "\uF5D7",
        "BrowserTabScreenshot": "\uF5D8",
        "DesktopScreenshot": "\uF5D9",
        "FileYML": "\uF5DA",
        "ClipboardSolid": "\uF5DC",
        "FabricUserFolder": "\uF5E5",
        "FabricNetworkFolder": "\uF5E6",
        "BullseyeTarget": "\uF5F0",
        "AnalyticsView": "\uF5F1",
        "Video360Generic": "\uF609",
        "Untag": "\uF60B",
        "Leave": "\uF627",
        "Trending12": "\uF62D",
        "Blocked12": "\uF62E",
        "Warning12": "\uF62F",
        "CheckedOutByOther12": "\uF630",
        "CheckedOutByYou12": "\uF631",
        "CircleShapeSolid": "\uF63C",
        "SquareShapeSolid": "\uF63D",
        "TriangleShapeSolid": "\uF63E",
        "DropShapeSolid": "\uF63F",
        "RectangleShapeSolid": "\uF640",
        "ZoomToFit": "\uF649",
        "InsertColumnsLeft": "\uF64A",
        "InsertColumnsRight": "\uF64B",
        "InsertRowsAbove": "\uF64C",
        "InsertRowsBelow": "\uF64D",
        "DeleteColumns": "\uF64E",
        "DeleteRows": "\uF64F",
        "DeleteRowsMirrored": "\uF650",
        "DeleteTable": "\uF651",
        "AccountBrowser": "\uF652",
        "VersionControlPush": "\uF664",
        "StackedColumnChart2": "\uF666",
        "TripleColumnWide": "\uF66E",
        "QuadColumn": "\uF66F",
        "WhiteBoardApp16": "\uF673",
        "WhiteBoardApp32": "\uF674",
        "PinnedSolid": "\uF676",
        "InsertSignatureLine": "\uF677",
        "ArrangeByFrom": "\uF678",
        "Phishing": "\uF679",
        "CreateMailRule": "\uF67A",
        "PublishCourse": "\uF699",
        "DictionaryRemove": "\uF69A",
        "UserRemove": "\uF69B",
        "UserEvent": "\uF69C",
        "Encryption": "\uF69D",
        "PasswordField": "\uF6AA",
        "OpenInNewTab": "\uF6AB",
        "Hide3": "\uF6AC",
        "VerifiedBrandSolid": "\uF6AD",
        "MarkAsProtected": "\uF6AE",
        "AuthenticatorApp": "\uF6B1",
        "WebTemplate": "\uF6B2",
        "DefenderTVM": "\uF6B3",
        "MedalSolid": "\uF6B9",
        "D365TalentLearn": "\uF6BB",
        "D365TalentInsight": "\uF6BC",
        "D365TalentHRCore": "\uF6BD",
        "BacklogList": "\uF6BF",
        "ButtonControl": "\uF6C0",
        "TableGroup": "\uF6D9",
        "MountainClimbing": "\uF6DB",
        "TagUnknown": "\uF6DF",
        "TagUnknownMirror": "\uF6E0",
        "TagUnknown12": "\uF6E1",
        "TagUnknown12Mirror": "\uF6E2",
        "Link12": "\uF6E3",
        "Presentation": "\uF6E4",
        "Presentation12": "\uF6E5",
        "Lock12": "\uF6E6",
        "BuildDefinition": "\uF6E9",
        "ReleaseDefinition": "\uF6EA",
        "SaveTemplate": "\uF6EC",
        "UserGauge": "\uF6ED",
        "BlockedSiteSolid12": "\uF70A",
        "TagSolid": "\uF70E",
        "OfficeChat": "\uF70F"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-16.js
  function initializeIcons18(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-16"',
        src: "url('".concat(baseUrl, "fabric-icons-16-9cf93f3b.woff') format('woff')")
      },
      icons: {
        "OfficeChatSolid": "\uF710",
        "MailSchedule": "\uF72E",
        "WarningSolid": "\uF736",
        "Blocked2Solid": "\uF737",
        "SkypeCircleArrow": "\uF747",
        "SkypeArrow": "\uF748",
        "SyncStatus": "\uF751",
        "SyncStatusSolid": "\uF752",
        "ProjectDocument": "\uF759",
        "ToDoLogoOutline": "\uF75B",
        "VisioOnlineLogoFill32": "\uF75F",
        "VisioOnlineLogo32": "\uF760",
        "VisioOnlineLogoCloud32": "\uF761",
        "VisioDiagramSync": "\uF762",
        "Event12": "\uF763",
        "EventDateMissed12": "\uF764",
        "UserOptional": "\uF767",
        "ResponsesMenu": "\uF768",
        "DoubleDownArrow": "\uF769",
        "DistributeDown": "\uF76A",
        "BookmarkReport": "\uF76B",
        "FilterSettings": "\uF76C",
        "GripperDotsVertical": "\uF772",
        "MailAttached": "\uF774",
        "AddIn": "\uF775",
        "LinkedDatabase": "\uF779",
        "TableLink": "\uF77A",
        "PromotedDatabase": "\uF77D",
        "BarChartVerticalFilter": "\uF77E",
        "BarChartVerticalFilterSolid": "\uF77F",
        "MicOff2": "\uF781",
        "MicrosoftTranslatorLogo": "\uF782",
        "ShowTimeAs": "\uF787",
        "FileRequest": "\uF789",
        "WorkItemAlert": "\uF78F",
        "PowerBILogo16": "\uF790",
        "PowerBILogoBackplate16": "\uF791",
        "BulletedListText": "\uF792",
        "BulletedListBullet": "\uF793",
        "BulletedListTextMirrored": "\uF794",
        "BulletedListBulletMirrored": "\uF795",
        "NumberedListText": "\uF796",
        "NumberedListNumber": "\uF797",
        "NumberedListTextMirrored": "\uF798",
        "NumberedListNumberMirrored": "\uF799",
        "RemoveLinkChain": "\uF79A",
        "RemoveLinkX": "\uF79B",
        "FabricTextHighlight": "\uF79C",
        "ClearFormattingA": "\uF79D",
        "ClearFormattingEraser": "\uF79E",
        "Photo2Fill": "\uF79F",
        "IncreaseIndentText": "\uF7A0",
        "IncreaseIndentArrow": "\uF7A1",
        "DecreaseIndentText": "\uF7A2",
        "DecreaseIndentArrow": "\uF7A3",
        "IncreaseIndentTextMirrored": "\uF7A4",
        "IncreaseIndentArrowMirrored": "\uF7A5",
        "DecreaseIndentTextMirrored": "\uF7A6",
        "DecreaseIndentArrowMirrored": "\uF7A7",
        "CheckListText": "\uF7A8",
        "CheckListCheck": "\uF7A9",
        "CheckListTextMirrored": "\uF7AA",
        "CheckListCheckMirrored": "\uF7AB",
        "NumberSymbol": "\uF7AC",
        "Coupon": "\uF7BC",
        "VerifiedBrand": "\uF7BD",
        "ReleaseGate": "\uF7BE",
        "ReleaseGateCheck": "\uF7BF",
        "ReleaseGateError": "\uF7C0",
        "M365InvoicingLogo": "\uF7C1",
        "RemoveFromShoppingList": "\uF7D5",
        "ShieldAlert": "\uF7D7",
        "FabricTextHighlightComposite": "\uF7DA",
        "Dataflows": "\uF7DD",
        "GenericScanFilled": "\uF7DE",
        "DiagnosticDataBarTooltip": "\uF7DF",
        "SaveToMobile": "\uF7E0",
        "Orientation2": "\uF7E1",
        "ScreenCast": "\uF7E2",
        "ShowGrid": "\uF7E3",
        "SnapToGrid": "\uF7E4",
        "ContactList": "\uF7E5",
        "NewMail": "\uF7EA",
        "EyeShadow": "\uF7EB",
        "FabricFolderConfirm": "\uF7FF",
        "InformationBarriers": "\uF803",
        "CommentActive": "\uF804",
        "ColumnVerticalSectionEdit": "\uF806",
        "WavingHand": "\uF807",
        "ShakeDevice": "\uF80A",
        "SmartGlassRemote": "\uF80B",
        "Rotate90Clockwise": "\uF80D",
        "Rotate90CounterClockwise": "\uF80E",
        "CampaignTemplate": "\uF811",
        "ChartTemplate": "\uF812",
        "PageListFilter": "\uF813",
        "SecondaryNav": "\uF814",
        "ColumnVerticalSection": "\uF81E",
        "SkypeCircleSlash": "\uF825",
        "SkypeSlash": "\uF826"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/fabric-icons-17.js
  function initializeIcons19(baseUrl, options) {
    if (baseUrl === void 0) {
      baseUrl = "";
    }
    var subset = {
      style: {
        MozOsxFontSmoothing: "grayscale",
        WebkitFontSmoothing: "antialiased",
        fontStyle: "normal",
        fontWeight: "normal",
        speak: "none"
      },
      fontFace: {
        fontFamily: '"FabricMDL2Icons-17"',
        src: "url('".concat(baseUrl, "fabric-icons-17-0c4ed701.woff') format('woff')")
      },
      icons: {
        "CustomizeToolbar": "\uF828",
        "DuplicateRow": "\uF82A",
        "RemoveFromTrash": "\uF82B",
        "MailOptions": "\uF82C",
        "Childof": "\uF82D",
        "Footer": "\uF82E",
        "Header": "\uF82F",
        "BarChartVerticalFill": "\uF830",
        "StackedColumnChart2Fill": "\uF831",
        "PlainText": "\uF834",
        "AccessibiltyChecker": "\uF835",
        "DatabaseSync": "\uF842",
        "ReservationOrders": "\uF845",
        "TabOneColumn": "\uF849",
        "TabTwoColumn": "\uF84A",
        "TabThreeColumn": "\uF84B",
        "BulletedTreeList": "\uF84C",
        "MicrosoftTranslatorLogoGreen": "\uF852",
        "MicrosoftTranslatorLogoBlue": "\uF853",
        "InternalInvestigation": "\uF854",
        "AddReaction": "\uF85D",
        "ContactHeart": "\uF862",
        "VisuallyImpaired": "\uF866",
        "EventToDoLogo": "\uF869",
        "Variable2": "\uF86D",
        "ModelingView": "\uF871",
        "DisconnectVirtualMachine": "\uF873",
        "ReportLock": "\uF875",
        "Uneditable2": "\uF876",
        "Uneditable2Mirrored": "\uF877",
        "BarChartVerticalEdit": "\uF89D",
        "GlobalNavButtonActive": "\uF89F",
        "PollResults": "\uF8A0",
        "Rerun": "\uF8A1",
        "QandA": "\uF8A2",
        "QandAMirror": "\uF8A3",
        "BookAnswers": "\uF8A4",
        "AlertSettings": "\uF8B6",
        "TrimStart": "\uF8BB",
        "TrimEnd": "\uF8BC",
        "TableComputed": "\uF8F5",
        "DecreaseIndentLegacy": "\uE290",
        "IncreaseIndentLegacy": "\uE291",
        "SizeLegacy": "\uE2B2"
      }
    };
    registerIcons(subset, options);
  }

  // ../node_modules/@fluentui/font-icons-mdl2/lib/iconAliases.js
  var registerIconAliases = function() {
    registerIconAlias("trash", "delete");
    registerIconAlias("onedrive", "onedrivelogo");
    registerIconAlias("alertsolid12", "eventdatemissed12");
    registerIconAlias("sixpointstar", "6pointstar");
    registerIconAlias("twelvepointstar", "12pointstar");
    registerIconAlias("toggleon", "toggleleft");
    registerIconAlias("toggleoff", "toggleright");
  };

  // ../node_modules/@fluentui/font-icons-mdl2/lib/version.js
  setVersion("@fluentui/font-icons-mdl2", "8.5.24");

  // ../node_modules/@fluentui/font-icons-mdl2/lib/index.js
  var DEFAULT_BASE_URL = "".concat(FLUENT_CDN_BASE_URL, "/assets/icons/");
  var win = getWindow();
  function initializeIcons20(baseUrl, options) {
    var _a5, _b;
    if (baseUrl === void 0) {
      baseUrl = ((_a5 = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _a5 === void 0 ? void 0 : _a5.iconBaseUrl) || ((_b = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _b === void 0 ? void 0 : _b.fontBaseUrl) || DEFAULT_BASE_URL;
    }
    [initializeIcons, initializeIcons2, initializeIcons3, initializeIcons4, initializeIcons5, initializeIcons6, initializeIcons7, initializeIcons8, initializeIcons9, initializeIcons10, initializeIcons11, initializeIcons12, initializeIcons13, initializeIcons14, initializeIcons15, initializeIcons16, initializeIcons17, initializeIcons18, initializeIcons19].forEach(function(initialize) {
      return initialize(baseUrl, options);
    });
    registerIconAliases();
  }

  // ../node_modules/@fluentui/react/lib/version.js
  setVersion("@fluentui/react", "8.111.1");

  // ../node_modules/@fluentui/react/lib/components/Callout/Callout.js
  var React138 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.base.js
  var React134 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/common/DirectionalHint.js
  var DirectionalHint = {
    /**
     * Appear above the target element, with the left edges of the callout and target aligning.
     */
    topLeftEdge: 0,
    /**
     * Appear above the target element, with the centers of the callout and target aligning.
     */
    topCenter: 1,
    /**
     * Appear above the target element, with the right edges of the callout and target aligning.
     */
    topRightEdge: 2,
    /**
     * Appear above the target element, aligning with the target element such that the callout tends toward
     * the center of the screen.
     */
    topAutoEdge: 3,
    /**
     * Appear below the target element, with the left edges of the callout and target aligning.
     */
    bottomLeftEdge: 4,
    /**
     * Appear below the target element, with the centers of the callout and target aligning.
     */
    bottomCenter: 5,
    /**
     * Appear below the target element, with the right edges of the callout and target aligning.
     */
    bottomRightEdge: 6,
    /**
     * Appear below the target element, aligning with the target element such that the callout tends toward
     * the center of the screen.
     */
    bottomAutoEdge: 7,
    /**
     * Appear to the left of the target element, with the top edges of the callout and target aligning.
     */
    leftTopEdge: 8,
    /**
     * Appear to the left of the target element, with the centers of the callout and target aligning.
     */
    leftCenter: 9,
    /**
     * Appear to the left of the target element, with the bottom edges of the callout and target aligning.
     */
    leftBottomEdge: 10,
    /**
     * Appear to the right of the target element, with the top edges of the callout and target aligning.
     */
    rightTopEdge: 11,
    /**
     * Appear to the right of the target element, with the centers of the callout and target aligning.
     */
    rightCenter: 12,
    /**
     * Appear to the right of the target element, with the bottom edges of the callout and target aligning.
     */
    rightBottomEdge: 13
  };

  // ../node_modules/@fluentui/react/lib/utilities/positioning/positioning.types.js
  var RectangleEdge;
  (function(RectangleEdge2) {
    RectangleEdge2[RectangleEdge2["top"] = 1] = "top";
    RectangleEdge2[RectangleEdge2["bottom"] = -1] = "bottom";
    RectangleEdge2[RectangleEdge2["left"] = 2] = "left";
    RectangleEdge2[RectangleEdge2["right"] = -2] = "right";
  })(RectangleEdge || (RectangleEdge = {}));
  var Position;
  (function(Position2) {
    Position2[Position2["top"] = 0] = "top";
    Position2[Position2["bottom"] = 1] = "bottom";
    Position2[Position2["start"] = 2] = "start";
    Position2[Position2["end"] = 3] = "end";
  })(Position || (Position = {}));

  // ../node_modules/@fluentui/react/lib/utilities/positioning/positioning.js
  var _a3;
  function _createPositionData(targetEdge, alignmentEdge, isAuto) {
    return {
      targetEdge,
      alignmentEdge,
      isAuto
    };
  }
  var DirectionalDictionary = (_a3 = {}, _a3[DirectionalHint.topLeftEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.left), _a3[DirectionalHint.topCenter] = _createPositionData(RectangleEdge.top), _a3[DirectionalHint.topRightEdge] = _createPositionData(RectangleEdge.top, RectangleEdge.right), _a3[DirectionalHint.topAutoEdge] = _createPositionData(RectangleEdge.top, void 0, true), _a3[DirectionalHint.bottomLeftEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.left), _a3[DirectionalHint.bottomCenter] = _createPositionData(RectangleEdge.bottom), _a3[DirectionalHint.bottomRightEdge] = _createPositionData(RectangleEdge.bottom, RectangleEdge.right), _a3[DirectionalHint.bottomAutoEdge] = _createPositionData(RectangleEdge.bottom, void 0, true), _a3[DirectionalHint.leftTopEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.top), _a3[DirectionalHint.leftCenter] = _createPositionData(RectangleEdge.left), _a3[DirectionalHint.leftBottomEdge] = _createPositionData(RectangleEdge.left, RectangleEdge.bottom), _a3[DirectionalHint.rightTopEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.top), _a3[DirectionalHint.rightCenter] = _createPositionData(RectangleEdge.right), _a3[DirectionalHint.rightBottomEdge] = _createPositionData(RectangleEdge.right, RectangleEdge.bottom), _a3);
  function _isRectangleWithinBounds(rect, boundingRect) {
    if (rect.top < boundingRect.top) {
      return false;
    }
    if (rect.bottom > boundingRect.bottom) {
      return false;
    }
    if (rect.left < boundingRect.left) {
      return false;
    }
    if (rect.right > boundingRect.right) {
      return false;
    }
    return true;
  }
  function _getOutOfBoundsEdges(rect, boundingRect) {
    var outOfBounds = [];
    if (rect.top < boundingRect.top) {
      outOfBounds.push(RectangleEdge.top);
    }
    if (rect.bottom > boundingRect.bottom) {
      outOfBounds.push(RectangleEdge.bottom);
    }
    if (rect.left < boundingRect.left) {
      outOfBounds.push(RectangleEdge.left);
    }
    if (rect.right > boundingRect.right) {
      outOfBounds.push(RectangleEdge.right);
    }
    return outOfBounds;
  }
  function _getEdgeValue(rect, edge) {
    return rect[RectangleEdge[edge]];
  }
  function _setEdgeValue(rect, edge, value) {
    rect[RectangleEdge[edge]] = value;
    return rect;
  }
  function _getCenterValue(rect, edge) {
    var edges = _getFlankingEdges(edge);
    return (_getEdgeValue(rect, edges.positiveEdge) + _getEdgeValue(rect, edges.negativeEdge)) / 2;
  }
  function _getRelativeEdgeValue(edge, value) {
    if (edge > 0) {
      return value;
    } else {
      return value * -1;
    }
  }
  function _getRelativeRectEdgeValue(edge, rect) {
    return _getRelativeEdgeValue(edge, _getEdgeValue(rect, edge));
  }
  function _getRelativeEdgeDifference(rect, hostRect, edge) {
    var edgeDifference = _getEdgeValue(rect, edge) - _getEdgeValue(hostRect, edge);
    return _getRelativeEdgeValue(edge, edgeDifference);
  }
  function _moveEdge(rect, edge, newValue, maintainSize) {
    if (maintainSize === void 0) {
      maintainSize = true;
    }
    var difference = _getEdgeValue(rect, edge) - newValue;
    var returnRect = _setEdgeValue(rect, edge, newValue);
    if (maintainSize) {
      returnRect = _setEdgeValue(rect, edge * -1, _getEdgeValue(rect, edge * -1) - difference);
    }
    return returnRect;
  }
  function _alignEdges(rect, target, edge, gap2) {
    if (gap2 === void 0) {
      gap2 = 0;
    }
    return _moveEdge(rect, edge, _getEdgeValue(target, edge) + _getRelativeEdgeValue(edge, gap2));
  }
  function _alignOppositeEdges(rect, target, targetEdge, gap2) {
    if (gap2 === void 0) {
      gap2 = 0;
    }
    var oppositeEdge = targetEdge * -1;
    var adjustedGap = _getRelativeEdgeValue(oppositeEdge, gap2);
    return _moveEdge(rect, targetEdge * -1, _getEdgeValue(target, targetEdge) + adjustedGap);
  }
  function _isEdgeInBounds(rect, bounds, edge) {
    var adjustedRectValue = _getRelativeRectEdgeValue(edge, rect);
    return adjustedRectValue > _getRelativeRectEdgeValue(edge, bounds);
  }
  function _getOutOfBoundsDegree(rect, bounds) {
    var breakingEdges = _getOutOfBoundsEdges(rect, bounds);
    var total = 0;
    for (var _i = 0, breakingEdges_1 = breakingEdges; _i < breakingEdges_1.length; _i++) {
      var edge = breakingEdges_1[_i];
      total += Math.pow(_getRelativeEdgeDifference(rect, bounds, edge), 2);
    }
    return total;
  }
  function _flipToFit(rect, target, bounding, positionData, gap2) {
    if (gap2 === void 0) {
      gap2 = 0;
    }
    var directions = [
      RectangleEdge.left,
      RectangleEdge.right,
      RectangleEdge.bottom,
      RectangleEdge.top
    ];
    if (getRTL2()) {
      directions[0] *= -1;
      directions[1] *= -1;
    }
    var currentEstimate = rect;
    var currentEdge = positionData.targetEdge;
    var currentAlignment = positionData.alignmentEdge;
    var oobDegree;
    var bestEdge = currentEdge;
    var bestAlignment = currentAlignment;
    for (var i2 = 0; i2 < 4; i2++) {
      if (!_isEdgeInBounds(currentEstimate, bounding, currentEdge)) {
        var currentOOBDegree = _getOutOfBoundsDegree(currentEstimate, bounding);
        if (!oobDegree || currentOOBDegree < oobDegree) {
          oobDegree = currentOOBDegree;
          bestEdge = currentEdge;
          bestAlignment = currentAlignment;
        }
        directions.splice(directions.indexOf(currentEdge), 1);
        if (directions.length > 0) {
          if (directions.indexOf(currentEdge * -1) > -1) {
            currentEdge = currentEdge * -1;
          } else {
            currentAlignment = currentEdge;
            currentEdge = directions.slice(-1)[0];
          }
          currentEstimate = _estimatePosition(rect, target, { targetEdge: currentEdge, alignmentEdge: currentAlignment }, gap2);
        }
      } else {
        return {
          elementRectangle: currentEstimate,
          targetEdge: currentEdge,
          alignmentEdge: currentAlignment
        };
      }
    }
    currentEstimate = _estimatePosition(rect, target, { targetEdge: bestEdge, alignmentEdge: bestAlignment }, gap2);
    return {
      elementRectangle: currentEstimate,
      targetEdge: bestEdge,
      alignmentEdge: bestAlignment
    };
  }
  function _flipAlignmentEdge(elementEstimate, target, gap2, coverTarget) {
    var alignmentEdge = elementEstimate.alignmentEdge, targetEdge = elementEstimate.targetEdge, elementRectangle = elementEstimate.elementRectangle;
    var oppositeEdge = alignmentEdge * -1;
    var newEstimate = _estimatePosition(elementRectangle, target, { targetEdge, alignmentEdge: oppositeEdge }, gap2, coverTarget);
    return {
      elementRectangle: newEstimate,
      targetEdge,
      alignmentEdge: oppositeEdge
    };
  }
  function _adjustFitWithinBounds(element2, target, bounding, positionData, gap2, directionalHintFixed, coverTarget) {
    if (gap2 === void 0) {
      gap2 = 0;
    }
    var alignmentEdge = positionData.alignmentEdge, alignTargetEdge = positionData.alignTargetEdge;
    var elementEstimate = {
      elementRectangle: element2,
      targetEdge: positionData.targetEdge,
      alignmentEdge
    };
    if (!directionalHintFixed && !coverTarget) {
      elementEstimate = _flipToFit(element2, target, bounding, positionData, gap2);
    }
    var outOfBounds = _getOutOfBoundsEdges(elementEstimate.elementRectangle, bounding);
    var fixedEdge = directionalHintFixed ? -elementEstimate.targetEdge : void 0;
    if (outOfBounds.length > 0) {
      if (alignTargetEdge) {
        if (elementEstimate.alignmentEdge && outOfBounds.indexOf(elementEstimate.alignmentEdge * -1) > -1) {
          var flippedElementEstimate = _flipAlignmentEdge(elementEstimate, target, gap2, coverTarget);
          if (_isRectangleWithinBounds(flippedElementEstimate.elementRectangle, bounding)) {
            return flippedElementEstimate;
          } else {
            elementEstimate = _alignOutOfBoundsEdges(_getOutOfBoundsEdges(flippedElementEstimate.elementRectangle, bounding), elementEstimate, bounding, fixedEdge);
          }
        } else {
          elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);
        }
      } else {
        elementEstimate = _alignOutOfBoundsEdges(outOfBounds, elementEstimate, bounding, fixedEdge);
      }
    }
    return elementEstimate;
  }
  function _alignOutOfBoundsEdges(outOfBoundsEdges, elementEstimate, bounding, preserveEdge) {
    for (var _i = 0, outOfBoundsEdges_1 = outOfBoundsEdges; _i < outOfBoundsEdges_1.length; _i++) {
      var direction = outOfBoundsEdges_1[_i];
      var edgeAttempt = void 0;
      if (preserveEdge && preserveEdge === direction * -1) {
        edgeAttempt = _moveEdge(elementEstimate.elementRectangle, direction, _getEdgeValue(bounding, direction), false);
        elementEstimate.forcedInBounds = true;
      } else {
        edgeAttempt = _alignEdges(elementEstimate.elementRectangle, bounding, direction);
        var inBounds = _isEdgeInBounds(edgeAttempt, bounding, direction * -1);
        if (!inBounds) {
          edgeAttempt = _moveEdge(edgeAttempt, direction * -1, _getEdgeValue(bounding, direction * -1), false);
          elementEstimate.forcedInBounds = true;
        }
      }
      elementEstimate.elementRectangle = edgeAttempt;
    }
    return elementEstimate;
  }
  function _centerEdgeToPoint(rect, edge, point4) {
    var positiveEdge = _getFlankingEdges(edge).positiveEdge;
    var elementMiddle = _getCenterValue(rect, edge);
    var distanceToMiddle = elementMiddle - _getEdgeValue(rect, positiveEdge);
    return _moveEdge(rect, positiveEdge, point4 - distanceToMiddle);
  }
  function _estimatePosition(elementToPosition, target, positionData, gap2, coverTarget) {
    if (gap2 === void 0) {
      gap2 = 0;
    }
    var estimatedElementPosition = new Rectangle(elementToPosition.left, elementToPosition.right, elementToPosition.top, elementToPosition.bottom);
    var alignmentEdge = positionData.alignmentEdge, targetEdge = positionData.targetEdge;
    var elementEdge = coverTarget ? targetEdge : targetEdge * -1;
    estimatedElementPosition = coverTarget ? _alignEdges(estimatedElementPosition, target, targetEdge, gap2) : _alignOppositeEdges(estimatedElementPosition, target, targetEdge, gap2);
    if (!alignmentEdge) {
      var targetMiddlePoint = _getCenterValue(target, targetEdge);
      estimatedElementPosition = _centerEdgeToPoint(estimatedElementPosition, elementEdge, targetMiddlePoint);
    } else {
      estimatedElementPosition = _alignEdges(estimatedElementPosition, target, alignmentEdge);
    }
    return estimatedElementPosition;
  }
  function _getFlankingEdges(edge) {
    if (edge === RectangleEdge.top || edge === RectangleEdge.bottom) {
      return {
        positiveEdge: RectangleEdge.left,
        negativeEdge: RectangleEdge.right
      };
    } else {
      return {
        positiveEdge: RectangleEdge.top,
        negativeEdge: RectangleEdge.bottom
      };
    }
  }
  function _finalizeReturnEdge(elementRectangle, returnEdge, bounds) {
    if (bounds && Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge)) > Math.abs(_getRelativeEdgeDifference(elementRectangle, bounds, returnEdge * -1))) {
      return returnEdge * -1;
    }
    return returnEdge;
  }
  function _isEdgeOnBounds(elementRectangle, edge, bounds) {
    return bounds !== void 0 && _getEdgeValue(elementRectangle, edge) === _getEdgeValue(bounds, edge);
  }
  function _finalizeElementPosition(elementRectangle, hostElement, targetEdge, bounds, alignmentEdge, coverTarget, doNotFinalizeReturnEdge, forceWithinBounds) {
    var returnValue = {};
    var hostRect = _getRectangleFromElement(hostElement);
    var elementEdge = coverTarget ? targetEdge : targetEdge * -1;
    var returnEdge = alignmentEdge ? alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge;
    if (!doNotFinalizeReturnEdge || _isEdgeOnBounds(elementRectangle, getOppositeEdge(returnEdge), bounds)) {
      returnEdge = _finalizeReturnEdge(elementRectangle, returnEdge, bounds);
    }
    returnValue[RectangleEdge[elementEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge);
    returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge);
    if (forceWithinBounds) {
      returnValue[RectangleEdge[elementEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, elementEdge * -1);
      returnValue[RectangleEdge[returnEdge * -1]] = _getRelativeEdgeDifference(elementRectangle, hostRect, returnEdge * -1);
    }
    return returnValue;
  }
  function _calculateActualBeakWidthInPixels(beakWidth) {
    return Math.sqrt(beakWidth * beakWidth * 2);
  }
  function _getPositionData(directionalHint, directionalHintForRTL, previousPositions) {
    if (directionalHint === void 0) {
      directionalHint = DirectionalHint.bottomAutoEdge;
    }
    if (previousPositions) {
      return {
        alignmentEdge: previousPositions.alignmentEdge,
        isAuto: previousPositions.isAuto,
        targetEdge: previousPositions.targetEdge
      };
    }
    var positionInformation = __assign({}, DirectionalDictionary[directionalHint]);
    if (getRTL2()) {
      if (positionInformation.alignmentEdge && positionInformation.alignmentEdge % 2 === 0) {
        positionInformation.alignmentEdge = positionInformation.alignmentEdge * -1;
      }
      return directionalHintForRTL !== void 0 ? DirectionalDictionary[directionalHintForRTL] : positionInformation;
    }
    return positionInformation;
  }
  function _getAlignmentData(positionData, target, boundingRect, coverTarget, alignTargetEdge) {
    if (positionData.isAuto) {
      positionData.alignmentEdge = getClosestEdge(positionData.targetEdge, target, boundingRect);
    }
    positionData.alignTargetEdge = alignTargetEdge;
    return positionData;
  }
  function getClosestEdge(targetEdge, target, boundingRect) {
    var targetCenter = _getCenterValue(target, targetEdge);
    var boundingCenter = _getCenterValue(boundingRect, targetEdge);
    var _a5 = _getFlankingEdges(targetEdge), positiveEdge = _a5.positiveEdge, negativeEdge = _a5.negativeEdge;
    if (targetCenter <= boundingCenter) {
      return positiveEdge;
    } else {
      return negativeEdge;
    }
  }
  function _positionElementWithinBounds(elementToPosition, target, bounding, positionData, gap2, directionalHintFixed, coverTarget) {
    var estimatedElementPosition = _estimatePosition(elementToPosition, target, positionData, gap2, coverTarget);
    if (_isRectangleWithinBounds(estimatedElementPosition, bounding)) {
      return {
        elementRectangle: estimatedElementPosition,
        targetEdge: positionData.targetEdge,
        alignmentEdge: positionData.alignmentEdge
      };
    } else {
      return _adjustFitWithinBounds(estimatedElementPosition, target, bounding, positionData, gap2, directionalHintFixed, coverTarget);
    }
  }
  function _finalizeBeakPosition(elementPosition, positionedBeak, bounds) {
    var targetEdge = elementPosition.targetEdge * -1;
    var actualElement = new Rectangle(0, elementPosition.elementRectangle.width, 0, elementPosition.elementRectangle.height);
    var returnValue = {};
    var returnEdge = _finalizeReturnEdge(elementPosition.elementRectangle, elementPosition.alignmentEdge ? elementPosition.alignmentEdge : _getFlankingEdges(targetEdge).positiveEdge, bounds);
    var beakEdgeDifference = _getRelativeEdgeDifference(elementPosition.elementRectangle, elementPosition.targetRectangle, targetEdge);
    var showBeak = beakEdgeDifference > Math.abs(_getEdgeValue(positionedBeak, targetEdge));
    returnValue[RectangleEdge[targetEdge]] = _getEdgeValue(positionedBeak, targetEdge);
    returnValue[RectangleEdge[returnEdge]] = _getRelativeEdgeDifference(positionedBeak, actualElement, returnEdge);
    return {
      elementPosition: __assign({}, returnValue),
      closestEdge: getClosestEdge(elementPosition.targetEdge, positionedBeak, actualElement),
      targetEdge,
      hideBeak: !showBeak
    };
  }
  function _positionBeak(beakWidth, elementPosition) {
    var target = elementPosition.targetRectangle;
    var _a5 = _getFlankingEdges(elementPosition.targetEdge), positiveEdge = _a5.positiveEdge, negativeEdge = _a5.negativeEdge;
    var beakTargetPoint = _getCenterValue(target, elementPosition.targetEdge);
    var elementBounds = new Rectangle(beakWidth / 2, elementPosition.elementRectangle.width - beakWidth / 2, beakWidth / 2, elementPosition.elementRectangle.height - beakWidth / 2);
    var beakPosition = new Rectangle(0, beakWidth, 0, beakWidth);
    beakPosition = _moveEdge(beakPosition, elementPosition.targetEdge * -1, -beakWidth / 2);
    beakPosition = _centerEdgeToPoint(beakPosition, elementPosition.targetEdge * -1, beakTargetPoint - _getRelativeRectEdgeValue(positiveEdge, elementPosition.elementRectangle));
    if (!_isEdgeInBounds(beakPosition, elementBounds, positiveEdge)) {
      beakPosition = _alignEdges(beakPosition, elementBounds, positiveEdge);
    } else if (!_isEdgeInBounds(beakPosition, elementBounds, negativeEdge)) {
      beakPosition = _alignEdges(beakPosition, elementBounds, negativeEdge);
    }
    return beakPosition;
  }
  function _getRectangleFromElement(element2) {
    var clientRect = element2.getBoundingClientRect();
    return new Rectangle(clientRect.left, clientRect.right, clientRect.top, clientRect.bottom);
  }
  function _getRectangleFromIRect(rect) {
    return new Rectangle(rect.left, rect.right, rect.top, rect.bottom);
  }
  function _getTargetRect(bounds, target) {
    var targetRectangle;
    if (target) {
      if (!!target.preventDefault) {
        var ev = target;
        targetRectangle = new Rectangle(ev.clientX, ev.clientX, ev.clientY, ev.clientY);
      } else if (!!target.getBoundingClientRect) {
        targetRectangle = _getRectangleFromElement(target);
      } else {
        var rectOrPoint = target;
        var left = rectOrPoint.left || rectOrPoint.x;
        var top_1 = rectOrPoint.top || rectOrPoint.y;
        var right = rectOrPoint.right || left;
        var bottom = rectOrPoint.bottom || top_1;
        targetRectangle = new Rectangle(left, right, top_1, bottom);
      }
      if (!_isRectangleWithinBounds(targetRectangle, bounds)) {
        var outOfBounds = _getOutOfBoundsEdges(targetRectangle, bounds);
        for (var _i = 0, outOfBounds_1 = outOfBounds; _i < outOfBounds_1.length; _i++) {
          var direction = outOfBounds_1[_i];
          targetRectangle[RectangleEdge[direction]] = bounds[RectangleEdge[direction]];
        }
      }
    } else {
      targetRectangle = new Rectangle(0, 0, 0, 0);
    }
    return targetRectangle;
  }
  function _positionElementRelative(props, elementToPosition, boundingRect, previousPositions) {
    var gap2 = props.gapSpace ? props.gapSpace : 0;
    var targetRect = _getTargetRect(boundingRect, props.target);
    var positionData = _getAlignmentData(_getPositionData(props.directionalHint, props.directionalHintForRTL, previousPositions), targetRect, boundingRect, props.coverTarget, props.alignTargetEdge);
    var positionedElement = _positionElementWithinBounds(_getRectangleFromElement(elementToPosition), targetRect, boundingRect, positionData, gap2, props.directionalHintFixed, props.coverTarget);
    return __assign(__assign({}, positionedElement), { targetRectangle: targetRect });
  }
  function _finalizePositionData(positionedElement, hostElement, bounds, coverTarget, doNotFinalizeReturnEdge) {
    var finalizedElement = _finalizeElementPosition(positionedElement.elementRectangle, hostElement, positionedElement.targetEdge, bounds, positionedElement.alignmentEdge, coverTarget, doNotFinalizeReturnEdge, positionedElement.forcedInBounds);
    return {
      elementPosition: finalizedElement,
      targetEdge: positionedElement.targetEdge,
      alignmentEdge: positionedElement.alignmentEdge
    };
  }
  function _positionCallout(props, hostElement, callout, previousPositions, doNotFinalizeReturnEdge) {
    var beakWidth = props.isBeakVisible ? props.beakWidth || 0 : 0;
    var gap2 = _calculateActualBeakWidthInPixels(beakWidth) / 2 + (props.gapSpace ? props.gapSpace : 0);
    var positionProps = props;
    positionProps.gapSpace = gap2;
    var boundingRect = props.bounds ? _getRectangleFromIRect(props.bounds) : new Rectangle(0, window.innerWidth - getScrollbarWidth(), 0, window.innerHeight);
    var positionedElement = _positionElementRelative(positionProps, callout, boundingRect, previousPositions);
    var beakPositioned = _positionBeak(beakWidth, positionedElement);
    var finalizedBeakPosition = _finalizeBeakPosition(positionedElement, beakPositioned, boundingRect);
    return __assign(__assign({}, _finalizePositionData(positionedElement, hostElement, boundingRect, props.coverTarget, doNotFinalizeReturnEdge)), { beakPosition: finalizedBeakPosition });
  }
  function _positionCard(props, hostElement, callout, previousPositions) {
    return _positionCallout(props, hostElement, callout, previousPositions, true);
  }
  function positionCallout(props, hostElement, elementToPosition, previousPositions) {
    return _positionCallout(props, hostElement, elementToPosition, previousPositions);
  }
  function positionCard(props, hostElement, elementToPosition, previousPositions) {
    return _positionCard(props, hostElement, elementToPosition, previousPositions);
  }
  function getOppositeEdge(edge) {
    return edge * -1;
  }
  function _getBoundsFromTargetWindow(target, targetWindow) {
    var segments = void 0;
    if (targetWindow.getWindowSegments) {
      segments = targetWindow.getWindowSegments();
    }
    if (segments === void 0 || segments.length <= 1) {
      return {
        top: 0,
        left: 0,
        right: targetWindow.innerWidth,
        bottom: targetWindow.innerHeight,
        width: targetWindow.innerWidth,
        height: targetWindow.innerHeight
      };
    }
    var x = 0;
    var y2 = 0;
    if (target !== null && !!target.getBoundingClientRect) {
      var clientRect = target.getBoundingClientRect();
      x = (clientRect.left + clientRect.right) / 2;
      y2 = (clientRect.top + clientRect.bottom) / 2;
    } else if (target !== null) {
      x = target.left || target.x;
      y2 = target.top || target.y;
    }
    var bounds = { top: 0, left: 0, right: 0, bottom: 0, width: 0, height: 0 };
    for (var _i = 0, segments_1 = segments; _i < segments_1.length; _i++) {
      var segment = segments_1[_i];
      if (x && segment.left <= x && segment.right >= x && y2 && segment.top <= y2 && segment.bottom >= y2) {
        bounds = {
          top: segment.top,
          left: segment.left,
          right: segment.right,
          bottom: segment.bottom,
          width: segment.width,
          height: segment.height
        };
      }
    }
    return bounds;
  }
  function getBoundsFromTargetWindow(target, targetWindow) {
    return _getBoundsFromTargetWindow(target, targetWindow);
  }

  // ../node_modules/@fluentui/react/lib/components/Popup/Popup.js
  var React133 = __toESM(require_react());

  // ../node_modules/@fluentui/react-hooks/lib/version.js
  setVersion("@fluentui/react-hooks", "8.6.29");

  // ../node_modules/@fluentui/react-hooks/lib/useAsync.js
  var React125 = __toESM(require_react());
  function useAsync() {
    var asyncRef = React125.useRef();
    if (!asyncRef.current) {
      asyncRef.current = new Async();
    }
    React125.useEffect(function() {
      return function() {
        var _a5;
        (_a5 = asyncRef.current) === null || _a5 === void 0 ? void 0 : _a5.dispose();
        asyncRef.current = void 0;
      };
    }, []);
    return asyncRef.current;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useConst.js
  var React126 = __toESM(require_react());
  function useConst(initialValue) {
    var ref = React126.useRef();
    if (ref.current === void 0) {
      ref.current = {
        value: typeof initialValue === "function" ? initialValue() : initialValue
      };
    }
    return ref.current.value;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useId.js
  var React127 = __toESM(require_react());
  function useId3(prefix2, providedId) {
    var ref = React127.useRef(providedId);
    if (!ref.current) {
      ref.current = getId(prefix2);
    }
    return ref.current;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useMergedRefs.js
  var React128 = __toESM(require_react());
  function useMergedRefs2() {
    var refs = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      refs[_i] = arguments[_i];
    }
    var mergedCallback = React128.useCallback(function(value) {
      mergedCallback.current = value;
      for (var _i2 = 0, refs_1 = refs; _i2 < refs_1.length; _i2++) {
        var ref = refs_1[_i2];
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
      }
    }, __spreadArray([], refs, true));
    return mergedCallback;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useOnEvent.js
  var React129 = __toESM(require_react());
  function useOnEvent(element2, eventName, callback, useCapture) {
    var callbackRef = React129.useRef(callback);
    callbackRef.current = callback;
    React129.useEffect(function() {
      var actualElement = element2 && "current" in element2 ? element2.current : element2;
      if (!actualElement) {
        return;
      }
      var dispose = on(actualElement, eventName, function(ev) {
        return callbackRef.current(ev);
      }, useCapture);
      return dispose;
    }, [element2, eventName, useCapture]);
  }

  // ../node_modules/@fluentui/react-hooks/lib/usePrevious.js
  var import_react41 = __toESM(require_react());
  function usePrevious2(value) {
    var ref = (0, import_react41.useRef)();
    (0, import_react41.useEffect)(function() {
      ref.current = value;
    });
    return ref.current;
  }

  // ../node_modules/@fluentui/react-hooks/lib/useTarget.js
  var React131 = __toESM(require_react());

  // ../node_modules/@fluentui/react-window-provider/lib/WindowProvider.js
  var React130 = __toESM(require_react());
  var WindowContext = React130.createContext({
    window: typeof window === "object" ? window : void 0
  });
  var useWindow = function() {
    return React130.useContext(WindowContext).window;
  };

  // ../node_modules/@fluentui/react-hooks/lib/useTarget.js
  function useTarget(target, hostElement) {
    var previousTargetProp = React131.useRef();
    var targetRef = React131.useRef(null);
    var targetWindow = useWindow();
    if (!target || target !== previousTargetProp.current || typeof target === "string") {
      var currentElement = hostElement === null || hostElement === void 0 ? void 0 : hostElement.current;
      if (target) {
        if (typeof target === "string") {
          var currentDoc = getDocument(currentElement);
          targetRef.current = currentDoc ? currentDoc.querySelector(target) : null;
        } else if ("stopPropagation" in target) {
          targetRef.current = target;
        } else if ("getBoundingClientRect" in target) {
          targetRef.current = target;
        } else if ("current" in target) {
          targetRef.current = target.current;
        } else {
          targetRef.current = target;
        }
      }
      previousTargetProp.current = target;
    }
    return [targetRef, targetWindow];
  }

  // ../node_modules/@fluentui/react-hooks/lib/useWarnings.js
  var React132 = __toESM(require_react());
  var warningId = 0;
  function useWarnings(options) {
    if (true) {
      var name_1 = options.name, props = options.props, _a5 = options.other, other = _a5 === void 0 ? [] : _a5, conditionallyRequired = options.conditionallyRequired, deprecations = options.deprecations, mutuallyExclusive = options.mutuallyExclusive, controlledUsage = options.controlledUsage;
      var hasWarnedRef = React132.useRef(false);
      var componentId = useConst(function() {
        return "useWarnings_".concat(warningId++);
      });
      var oldProps = usePrevious2(props);
      if (!hasWarnedRef.current) {
        hasWarnedRef.current = true;
        for (var _i = 0, other_1 = other; _i < other_1.length; _i++) {
          var warning2 = other_1[_i];
          warn(warning2);
        }
        if (conditionallyRequired) {
          for (var _b = 0, conditionallyRequired_1 = conditionallyRequired; _b < conditionallyRequired_1.length; _b++) {
            var req = conditionallyRequired_1[_b];
            warnConditionallyRequiredProps(name_1, props, req.requiredProps, req.conditionalPropName, req.condition);
          }
        }
        deprecations && warnDeprecations(name_1, props, deprecations);
        mutuallyExclusive && warnMutuallyExclusive(name_1, props, mutuallyExclusive);
      }
      controlledUsage && warnControlledUsage(__assign(__assign({}, controlledUsage), { componentId, props, componentName: name_1, oldProps }));
    }
  }

  // ../node_modules/@fluentui/react/lib/components/Popup/Popup.js
  function useScrollbarAsync(props, root151) {
    var async = useAsync();
    var _a5 = React133.useState(false), needsVerticalScrollBarState = _a5[0], setNeedsVerticalScrollBar = _a5[1];
    React133.useEffect(function() {
      async.requestAnimationFrame(function() {
        var _a6;
        if (props.style && props.style.overflowY) {
          return;
        }
        var needsVerticalScrollBar = false;
        if (root151 && root151.current && ((_a6 = root151.current) === null || _a6 === void 0 ? void 0 : _a6.firstElementChild)) {
          var rootHeight = root151.current.clientHeight;
          var firstChildHeight = root151.current.firstElementChild.clientHeight;
          if (rootHeight > 0 && firstChildHeight > rootHeight) {
            needsVerticalScrollBar = firstChildHeight - rootHeight > 1;
          }
        }
        if (needsVerticalScrollBarState !== needsVerticalScrollBar) {
          setNeedsVerticalScrollBar(needsVerticalScrollBar);
        }
      });
      return function() {
        return async.dispose();
      };
    });
    return needsVerticalScrollBarState;
  }
  function defaultFocusRestorer(options) {
    var originalElement = options.originalElement, containsFocus = options.containsFocus;
    if (originalElement && containsFocus && originalElement !== getWindow()) {
      setTimeout(function() {
        var _a5;
        (_a5 = originalElement.focus) === null || _a5 === void 0 ? void 0 : _a5.call(originalElement);
      }, 0);
    }
  }
  function useRestoreFocus(props, root151) {
    var _a5 = props.onRestoreFocus, onRestoreFocus = _a5 === void 0 ? defaultFocusRestorer : _a5;
    var originalFocusedElement = React133.useRef();
    var containsFocus = React133.useRef(false);
    React133.useEffect(function() {
      originalFocusedElement.current = getDocument().activeElement;
      if (doesElementContainFocus(root151.current)) {
        containsFocus.current = true;
      }
      return function() {
        var _a6;
        onRestoreFocus === null || onRestoreFocus === void 0 ? void 0 : onRestoreFocus({
          originalElement: originalFocusedElement.current,
          containsFocus: containsFocus.current,
          documentContainsFocus: ((_a6 = getDocument()) === null || _a6 === void 0 ? void 0 : _a6.hasFocus()) || false
        });
        originalFocusedElement.current = void 0;
      };
    }, []);
    useOnEvent(root151, "focus", React133.useCallback(function() {
      containsFocus.current = true;
    }, []), true);
    useOnEvent(root151, "blur", React133.useCallback(function(ev) {
      if (root151.current && ev.relatedTarget && !root151.current.contains(ev.relatedTarget)) {
        containsFocus.current = false;
      }
    }, []), true);
  }
  function useHideSiblingNodes(props, root151) {
    var shouldHideSiblings = String(props["aria-modal"]).toLowerCase() === "true" && props.enableAriaHiddenSiblings;
    React133.useEffect(function() {
      if (!(shouldHideSiblings && root151.current)) {
        return;
      }
      var unmodalize2 = modalize(root151.current);
      return unmodalize2;
    }, [root151, shouldHideSiblings]);
  }
  var Popup = React133.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var props = getPropsWithDefaults({ shouldRestoreFocus: true, enableAriaHiddenSiblings: true }, propsWithoutDefaults);
    var root151 = React133.useRef();
    var mergedRootRef = useMergedRefs2(root151, forwardedRef);
    useHideSiblingNodes(props, root151);
    useRestoreFocus(props, root151);
    var role = props.role, className = props.className, ariaLabel = props.ariaLabel, ariaLabelledBy = props.ariaLabelledBy, ariaDescribedBy = props.ariaDescribedBy, style = props.style, children = props.children, onDismiss = props.onDismiss;
    var needsVerticalScrollBar = useScrollbarAsync(props, root151);
    var onKeyDown = React133.useCallback(function(ev) {
      switch (ev.which) {
        case KeyCodes.escape:
          if (onDismiss) {
            onDismiss(ev);
            ev.preventDefault();
            ev.stopPropagation();
          }
          break;
      }
    }, [onDismiss]);
    var win2 = useWindow();
    useOnEvent(win2, "keydown", onKeyDown);
    return React133.createElement("div", __assign({ ref: mergedRootRef }, getNativeProps2(props, divProperties), { className, role, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy, onKeyDown, style: __assign({ overflowY: needsVerticalScrollBar ? "scroll" : void 0, outline: "none" }, style) }), children);
  });
  Popup.displayName = "Popup";

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.base.js
  var _a4;
  var COMPONENT_NAME = "CalloutContentBase";
  var ANIMATIONS = (_a4 = {}, _a4[RectangleEdge.top] = AnimationClassNames.slideUpIn10, _a4[RectangleEdge.bottom] = AnimationClassNames.slideDownIn10, _a4[RectangleEdge.left] = AnimationClassNames.slideLeftIn10, _a4[RectangleEdge.right] = AnimationClassNames.slideRightIn10, _a4);
  var BEAK_ORIGIN_POSITION = { top: 0, left: 0 };
  var OFF_SCREEN_STYLE = {
    opacity: 0,
    filter: "opacity(0)",
    pointerEvents: "none"
  };
  var ARIA_ROLE_ATTRIBUTES = ["role", "aria-roledescription"];
  var DEFAULT_PROPS = {
    preventDismissOnLostFocus: false,
    preventDismissOnScroll: false,
    preventDismissOnResize: false,
    isBeakVisible: true,
    beakWidth: 16,
    gapSpace: 0,
    minPagePadding: 8,
    directionalHint: DirectionalHint.bottomAutoEdge
  };
  var getClassNames = classNamesFunction({
    disableCaching: true
    // disabling caching because stylesProp.position mutates often
  });
  function useBounds(_a5, targetRef, targetWindow) {
    var bounds = _a5.bounds, _b = _a5.minPagePadding, minPagePadding = _b === void 0 ? DEFAULT_PROPS.minPagePadding : _b, target = _a5.target;
    var _c = React134.useState(false), targetWindowResized = _c[0], setTargetWindowResized = _c[1];
    var cachedBounds = React134.useRef();
    var getBounds = React134.useCallback(function() {
      if (!cachedBounds.current || targetWindowResized) {
        var currentBounds = typeof bounds === "function" ? targetWindow ? bounds(target, targetWindow) : void 0 : bounds;
        if (!currentBounds && targetWindow) {
          currentBounds = getBoundsFromTargetWindow(targetRef.current, targetWindow);
          currentBounds = {
            top: currentBounds.top + minPagePadding,
            left: currentBounds.left + minPagePadding,
            right: currentBounds.right - minPagePadding,
            bottom: currentBounds.bottom - minPagePadding,
            width: currentBounds.width - minPagePadding * 2,
            height: currentBounds.height - minPagePadding * 2
          };
        }
        cachedBounds.current = currentBounds;
        targetWindowResized && setTargetWindowResized(false);
      }
      return cachedBounds.current;
    }, [bounds, minPagePadding, target, targetRef, targetWindow, targetWindowResized]);
    var async = useAsync();
    useOnEvent(targetWindow, "resize", async.debounce(function() {
      setTargetWindowResized(true);
    }, 500, { leading: true }));
    return getBounds;
  }
  function useMaxHeight(_a5, getBounds, positions) {
    var _b;
    var calloutMaxHeight = _a5.calloutMaxHeight, finalHeight = _a5.finalHeight, directionalHint = _a5.directionalHint, directionalHintFixed = _a5.directionalHintFixed, hidden = _a5.hidden;
    var _c = React134.useState(), maxHeight = _c[0], setMaxHeight = _c[1];
    var _d = (_b = positions === null || positions === void 0 ? void 0 : positions.elementPosition) !== null && _b !== void 0 ? _b : {}, top = _d.top, bottom = _d.bottom;
    React134.useEffect(function() {
      var _a6;
      var _b2 = (_a6 = getBounds()) !== null && _a6 !== void 0 ? _a6 : {}, topBounds = _b2.top, bottomBounds = _b2.bottom;
      var calculatedHeight;
      if (typeof top === "number" && bottomBounds) {
        calculatedHeight = bottomBounds - top;
      } else if (typeof bottom === "number" && typeof topBounds === "number" && bottomBounds) {
        calculatedHeight = bottomBounds - topBounds - bottom;
      }
      if (!calloutMaxHeight && !hidden || calloutMaxHeight && calculatedHeight && calloutMaxHeight > calculatedHeight) {
        setMaxHeight(calculatedHeight);
      } else if (calloutMaxHeight) {
        setMaxHeight(calloutMaxHeight);
      } else {
        setMaxHeight(void 0);
      }
    }, [bottom, calloutMaxHeight, finalHeight, directionalHint, directionalHintFixed, getBounds, hidden, positions, top]);
    return maxHeight;
  }
  function usePositions(props, hostElement, calloutElement, targetRef, getBounds) {
    var _a5 = React134.useState(), positions = _a5[0], setPositions = _a5[1];
    var positionAttempts = React134.useRef(0);
    var previousTarget = React134.useRef();
    var async = useAsync();
    var hidden = props.hidden, target = props.target, finalHeight = props.finalHeight, calloutMaxHeight = props.calloutMaxHeight, onPositioned = props.onPositioned, directionalHint = props.directionalHint;
    React134.useEffect(function() {
      if (!hidden) {
        var timerId_1 = async.requestAnimationFrame(function() {
          var _a6, _b;
          if (hostElement.current && calloutElement) {
            var currentProps = __assign(__assign({}, props), { target: targetRef.current, bounds: getBounds() });
            var dupeCalloutElement = calloutElement.cloneNode(true);
            dupeCalloutElement.style.maxHeight = calloutMaxHeight ? "".concat(calloutMaxHeight) : "";
            dupeCalloutElement.style.visibility = "hidden";
            (_a6 = calloutElement.parentElement) === null || _a6 === void 0 ? void 0 : _a6.appendChild(dupeCalloutElement);
            var previousPositions = previousTarget.current === target ? positions : void 0;
            var newPositions = finalHeight ? positionCard(currentProps, hostElement.current, dupeCalloutElement, previousPositions) : positionCallout(currentProps, hostElement.current, dupeCalloutElement, previousPositions);
            (_b = calloutElement.parentElement) === null || _b === void 0 ? void 0 : _b.removeChild(dupeCalloutElement);
            if (!positions && newPositions || positions && newPositions && !arePositionsEqual(positions, newPositions) && positionAttempts.current < 5) {
              positionAttempts.current++;
              setPositions(newPositions);
            } else if (positionAttempts.current > 0) {
              positionAttempts.current = 0;
              onPositioned === null || onPositioned === void 0 ? void 0 : onPositioned(positions);
            }
          }
        }, calloutElement);
        previousTarget.current = target;
        return function() {
          async.cancelAnimationFrame(timerId_1);
          previousTarget.current = void 0;
        };
      } else {
        setPositions(void 0);
        positionAttempts.current = 0;
      }
    }, [
      hidden,
      directionalHint,
      async,
      calloutElement,
      calloutMaxHeight,
      hostElement,
      targetRef,
      finalHeight,
      getBounds,
      onPositioned,
      positions,
      props,
      target
    ]);
    return positions;
  }
  function useAutoFocus(_a5, positions, calloutElement) {
    var hidden = _a5.hidden, setInitialFocus = _a5.setInitialFocus;
    var async = useAsync();
    var hasPositions = !!positions;
    React134.useEffect(function() {
      if (!hidden && setInitialFocus && hasPositions && calloutElement) {
        var timerId_2 = async.requestAnimationFrame(function() {
          return focusFirstChild(calloutElement);
        }, calloutElement);
        return function() {
          return async.cancelAnimationFrame(timerId_2);
        };
      }
    }, [hidden, hasPositions, async, calloutElement, setInitialFocus]);
  }
  function useDismissHandlers(_a5, positions, hostElement, targetRef, targetWindow) {
    var hidden = _a5.hidden, onDismiss = _a5.onDismiss, preventDismissOnScroll = _a5.preventDismissOnScroll, preventDismissOnResize = _a5.preventDismissOnResize, preventDismissOnLostFocus = _a5.preventDismissOnLostFocus, dismissOnTargetClick = _a5.dismissOnTargetClick, shouldDismissOnWindowFocus = _a5.shouldDismissOnWindowFocus, preventDismissOnEvent = _a5.preventDismissOnEvent;
    var isMouseDownOnPopup = React134.useRef(false);
    var async = useAsync();
    var mouseDownHandlers = useConst([
      function() {
        isMouseDownOnPopup.current = true;
      },
      function() {
        isMouseDownOnPopup.current = false;
      }
    ]);
    var positionsExists = !!positions;
    React134.useEffect(function() {
      var dismissOnScroll = function(ev) {
        if (positionsExists && !preventDismissOnScroll) {
          dismissOnClickOrScroll(ev);
        }
      };
      var dismissOnResize = function(ev) {
        if (!preventDismissOnResize && !(preventDismissOnEvent && preventDismissOnEvent(ev))) {
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var dismissOnLostFocus = function(ev) {
        if (!preventDismissOnLostFocus) {
          dismissOnClickOrScroll(ev);
        }
      };
      var dismissOnClickOrScroll = function(ev) {
        var eventPaths = ev.composedPath ? ev.composedPath() : [];
        var target = eventPaths.length > 0 ? eventPaths[0] : ev.target;
        var isEventTargetOutsideCallout = hostElement.current && !elementContains(hostElement.current, target);
        if (isEventTargetOutsideCallout && isMouseDownOnPopup.current) {
          isMouseDownOnPopup.current = false;
          return;
        }
        if (!targetRef.current && isEventTargetOutsideCallout || ev.target !== targetWindow && isEventTargetOutsideCallout && (!targetRef.current || "stopPropagation" in targetRef.current || dismissOnTargetClick || target !== targetRef.current && !elementContains(targetRef.current, target))) {
          if (preventDismissOnEvent && preventDismissOnEvent(ev)) {
            return;
          }
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var dismissOnTargetWindowBlur = function(ev) {
        if (!shouldDismissOnWindowFocus) {
          return;
        }
        if ((preventDismissOnEvent && !preventDismissOnEvent(ev) || !preventDismissOnEvent && !preventDismissOnLostFocus) && !(targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.hasFocus()) && ev.relatedTarget === null) {
          onDismiss === null || onDismiss === void 0 ? void 0 : onDismiss(ev);
        }
      };
      var disposablesPromise = new Promise(function(resolve2) {
        async.setTimeout(function() {
          if (!hidden && targetWindow) {
            var disposables_1 = [
              on(targetWindow, "scroll", dismissOnScroll, true),
              on(targetWindow, "resize", dismissOnResize, true),
              on(targetWindow.document.documentElement, "focus", dismissOnLostFocus, true),
              on(targetWindow.document.documentElement, "click", dismissOnLostFocus, true),
              on(targetWindow, "blur", dismissOnTargetWindowBlur, true)
            ];
            resolve2(function() {
              disposables_1.forEach(function(dispose) {
                return dispose();
              });
            });
          }
        }, 0);
      });
      return function() {
        disposablesPromise.then(function(dispose) {
          return dispose();
        });
      };
    }, [
      hidden,
      async,
      hostElement,
      targetRef,
      targetWindow,
      onDismiss,
      shouldDismissOnWindowFocus,
      dismissOnTargetClick,
      preventDismissOnLostFocus,
      preventDismissOnResize,
      preventDismissOnScroll,
      positionsExists,
      preventDismissOnEvent
    ]);
    return mouseDownHandlers;
  }
  var CalloutContentBase = React134.memo(React134.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var props = getPropsWithDefaults(DEFAULT_PROPS, propsWithoutDefaults);
    var styles2 = props.styles, style = props.style, ariaLabel = props.ariaLabel, ariaDescribedBy = props.ariaDescribedBy, ariaLabelledBy = props.ariaLabelledBy, className = props.className, isBeakVisible = props.isBeakVisible, children = props.children, beakWidth = props.beakWidth, calloutWidth = props.calloutWidth, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, doNotLayer = props.doNotLayer, finalHeight = props.finalHeight, _a5 = props.hideOverflow, hideOverflow = _a5 === void 0 ? !!finalHeight : _a5, backgroundColor = props.backgroundColor, calloutMaxHeight = props.calloutMaxHeight, onScroll = props.onScroll, _b = props.shouldRestoreFocus, shouldRestoreFocus = _b === void 0 ? true : _b, target = props.target, hidden = props.hidden, onLayerMounted = props.onLayerMounted, popupProps = props.popupProps;
    var hostElement = React134.useRef(null);
    var _c = React134.useState(null), calloutElement = _c[0], setCalloutElement = _c[1];
    var calloutCallback = React134.useCallback(function(calloutEl) {
      setCalloutElement(calloutEl);
    }, []);
    var rootRef = useMergedRefs2(hostElement, forwardedRef);
    var _d = useTarget(props.target, {
      current: calloutElement
    }), targetRef = _d[0], targetWindow = _d[1];
    var getBounds = useBounds(props, targetRef, targetWindow);
    var positions = usePositions(props, hostElement, calloutElement, targetRef, getBounds);
    var maxHeight = useMaxHeight(props, getBounds, positions);
    var _e = useDismissHandlers(props, positions, hostElement, targetRef, targetWindow), mouseDownOnPopup = _e[0], mouseUpOnPopup = _e[1];
    var isForcedInBounds = (positions === null || positions === void 0 ? void 0 : positions.elementPosition.top) && (positions === null || positions === void 0 ? void 0 : positions.elementPosition.bottom);
    var cssPositions = __assign(__assign({}, positions === null || positions === void 0 ? void 0 : positions.elementPosition), { maxHeight });
    if (isForcedInBounds) {
      cssPositions.bottom = void 0;
    }
    useAutoFocus(props, positions, calloutElement);
    React134.useEffect(function() {
      if (!hidden) {
        onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
      }
    }, [hidden]);
    if (!targetWindow) {
      return null;
    }
    var overflowYHidden = hideOverflow;
    var beakVisible = isBeakVisible && !!target;
    var classNames2 = getClassNames(styles2, {
      theme: props.theme,
      className,
      overflowYHidden,
      calloutWidth,
      positions,
      beakWidth,
      backgroundColor,
      calloutMaxWidth,
      calloutMinWidth,
      doNotLayer
    });
    var overflowStyle = __assign(__assign({ maxHeight: calloutMaxHeight ? calloutMaxHeight : "100%" }, style), overflowYHidden && { overflowY: "hidden" });
    var visibilityStyle = props.hidden ? { visibility: "hidden" } : void 0;
    return React134.createElement(
      "div",
      { ref: rootRef, className: classNames2.container, style: visibilityStyle },
      React134.createElement(
        "div",
        __assign({}, getNativeProps2(props, divProperties, ARIA_ROLE_ATTRIBUTES), {
          className: css(classNames2.root, positions && positions.targetEdge && ANIMATIONS[positions.targetEdge]),
          style: positions ? __assign({}, cssPositions) : OFF_SCREEN_STYLE,
          // Safari and Firefox on Mac OS requires this to back-stop click events so focus remains in the Callout.
          // See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus
          tabIndex: -1,
          ref: calloutCallback
        }),
        beakVisible && React134.createElement("div", { className: classNames2.beak, style: getBeakPosition(positions) }),
        beakVisible && React134.createElement("div", { className: classNames2.beakCurtain }),
        React134.createElement(
          Popup,
          __assign({
            // don't use getNativeElementProps for role and roledescription because it will also
            // pass through data-* props (resulting in them being used in two places)
            role: props.role,
            "aria-roledescription": props["aria-roledescription"],
            ariaDescribedBy,
            ariaLabel,
            ariaLabelledBy,
            className: classNames2.calloutMain,
            onDismiss: props.onDismiss,
            onMouseDown: mouseDownOnPopup,
            onMouseUp: mouseUpOnPopup,
            onRestoreFocus: props.onRestoreFocus,
            onScroll,
            shouldRestoreFocus,
            style: overflowStyle
          }, popupProps),
          children
        )
      )
    );
  }), function(previousProps, nextProps) {
    if (!nextProps.shouldUpdateWhenHidden && previousProps.hidden && nextProps.hidden) {
      return true;
    }
    return shallowCompare(previousProps, nextProps);
  });
  function getBeakPosition(positions) {
    var _a5, _b;
    var beakPositionStyle = __assign(__assign({}, (_a5 = positions === null || positions === void 0 ? void 0 : positions.beakPosition) === null || _a5 === void 0 ? void 0 : _a5.elementPosition), { display: ((_b = positions === null || positions === void 0 ? void 0 : positions.beakPosition) === null || _b === void 0 ? void 0 : _b.hideBeak) ? "none" : void 0 });
    if (!beakPositionStyle.top && !beakPositionStyle.bottom && !beakPositionStyle.left && !beakPositionStyle.right) {
      beakPositionStyle.left = BEAK_ORIGIN_POSITION.left;
      beakPositionStyle.top = BEAK_ORIGIN_POSITION.top;
    }
    return beakPositionStyle;
  }
  function arePositionsEqual(prevElementPositions, newElementPosition) {
    return comparePositions(prevElementPositions.elementPosition, newElementPosition.elementPosition) && comparePositions(prevElementPositions.beakPosition.elementPosition, newElementPosition.beakPosition.elementPosition);
  }
  function comparePositions(prevElementPositions, newElementPositions) {
    for (var key in newElementPositions) {
      if (newElementPositions.hasOwnProperty(key)) {
        var oldPositionEdge = prevElementPositions[key];
        var newPositionEdge = newElementPositions[key];
        if (oldPositionEdge !== void 0 && newPositionEdge !== void 0) {
          if (oldPositionEdge.toFixed(2) !== newPositionEdge.toFixed(2)) {
            return false;
          }
        } else {
          return false;
        }
      }
    }
    return true;
  }
  CalloutContentBase.displayName = COMPONENT_NAME;

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.styles.js
  function getBeakStyle(beakWidth) {
    return {
      height: beakWidth,
      width: beakWidth
    };
  }
  var GlobalClassNames = {
    container: "ms-Callout-container",
    root: "ms-Callout",
    beak: "ms-Callout-beak",
    beakCurtain: "ms-Callout-beakCurtain",
    calloutMain: "ms-Callout-main"
  };
  var getStyles = function(props) {
    var _a5;
    var theme = props.theme, className = props.className, overflowYHidden = props.overflowYHidden, calloutWidth = props.calloutWidth, beakWidth = props.beakWidth, backgroundColor = props.backgroundColor, calloutMaxWidth = props.calloutMaxWidth, calloutMinWidth = props.calloutMinWidth, doNotLayer = props.doNotLayer;
    var classNames2 = getGlobalClassNames(GlobalClassNames, theme);
    var semanticColors = theme.semanticColors, effects = theme.effects;
    return {
      container: [
        classNames2.container,
        {
          position: "relative"
        }
      ],
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          position: "absolute",
          display: "flex",
          zIndex: doNotLayer ? ZIndexes.Layer : void 0,
          boxSizing: "border-box",
          borderRadius: effects.roundedCorner2,
          boxShadow: effects.elevation16,
          selectors: (_a5 = {}, _a5[HighContrastSelector] = {
            borderWidth: 1,
            borderStyle: "solid",
            borderColor: "WindowText"
          }, _a5)
        },
        focusClear(),
        className,
        !!calloutWidth && { width: calloutWidth },
        !!calloutMaxWidth && { maxWidth: calloutMaxWidth },
        !!calloutMinWidth && { minWidth: calloutMinWidth }
      ],
      beak: [
        classNames2.beak,
        {
          position: "absolute",
          backgroundColor: semanticColors.menuBackground,
          boxShadow: "inherit",
          border: "inherit",
          boxSizing: "border-box",
          transform: "rotate(45deg)"
        },
        getBeakStyle(beakWidth),
        backgroundColor && {
          backgroundColor
        }
      ],
      beakCurtain: [
        classNames2.beakCurtain,
        {
          position: "absolute",
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          backgroundColor: semanticColors.menuBackground,
          borderRadius: effects.roundedCorner2
        }
      ],
      calloutMain: [
        classNames2.calloutMain,
        {
          backgroundColor: semanticColors.menuBackground,
          overflowX: "hidden",
          overflowY: "auto",
          position: "relative",
          width: "100%",
          borderRadius: effects.roundedCorner2
        },
        overflowYHidden && {
          overflowY: "hidden"
        },
        backgroundColor && {
          backgroundColor
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Callout/CalloutContent.js
  var CalloutContent = styled(CalloutContentBase, getStyles, void 0, {
    scope: "CalloutContent"
  });

  // ../node_modules/@fluentui/react-portal-compat-context/lib/PortalCompatContext.js
  var React135 = __toESM(require_react());
  var PortalCompatContext = /* @__PURE__ */ React135.createContext(void 0);
  var portalCompatContextDefaultValue = () => () => void 0;
  var PortalCompatContextProvider = PortalCompatContext.Provider;
  function usePortalCompat() {
    var _React_useContext4;
    return (_React_useContext4 = React135.useContext(PortalCompatContext)) !== null && _React_useContext4 !== void 0 ? _React_useContext4 : portalCompatContextDefaultValue;
  }

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.base.js
  var React137 = __toESM(require_react());
  var ReactDOM2 = __toESM(require_react_dom());

  // ../node_modules/@fluentui/react/lib/components/Fabric/Fabric.base.js
  var React136 = __toESM(require_react());
  var getClassNames2 = classNamesFunction();
  var getFabricTheme = memoizeFunction(function(theme, isRTL) {
    return createTheme(__assign(__assign({}, theme), { rtl: isRTL }));
  });
  var getDir = function(_a5) {
    var theme = _a5.theme, dir = _a5.dir;
    var contextDir = getRTL2(theme) ? "rtl" : "ltr";
    var pageDir = getRTL2() ? "rtl" : "ltr";
    var componentDir = dir ? dir : contextDir;
    return {
      // If Fabric dir !== contextDir
      // Or If contextDir !== pageDir
      // Then we need to set dir of the Fabric root
      rootDir: componentDir !== contextDir || componentDir !== pageDir ? componentDir : dir,
      // If dir !== contextDir || pageDir
      // then set contextual theme around content
      needsTheme: componentDir !== contextDir
    };
  };
  var FabricBase = React136.forwardRef(function(props, ref) {
    var className = props.className, theme = props.theme, applyTheme = props.applyTheme, applyThemeToBody = props.applyThemeToBody, styles2 = props.styles;
    var classNames2 = getClassNames2(styles2, {
      theme,
      applyTheme,
      className
    });
    var rootElement = React136.useRef(null);
    useApplyThemeToBody(applyThemeToBody, classNames2, rootElement);
    return React136.createElement(React136.Fragment, null, useRenderedContent(props, classNames2, rootElement, ref));
  });
  FabricBase.displayName = "FabricBase";
  function useRenderedContent(props, _a5, rootElement, ref) {
    var root151 = _a5.root;
    var _b = props.as, Root2 = _b === void 0 ? "div" : _b, dir = props.dir, theme = props.theme;
    var divProps = getNativeProps2(props, divProperties, ["dir"]);
    var _c = getDir(props), rootDir = _c.rootDir, needsTheme = _c.needsTheme;
    var renderedContent = React136.createElement(
      FocusRectsProvider,
      { providerRef: rootElement },
      React136.createElement(Root2, __assign({ dir: rootDir }, divProps, { className: root151, ref: useMergedRefs2(rootElement, ref) }))
    );
    if (needsTheme) {
      renderedContent = // eslint-disable-next-line deprecation/deprecation
      React136.createElement(Customizer, { settings: { theme: getFabricTheme(theme, dir === "rtl") } }, renderedContent);
    }
    return renderedContent;
  }
  function useApplyThemeToBody(applyThemeToBody, _a5, rootElement) {
    var bodyThemed = _a5.bodyThemed;
    React136.useEffect(function() {
      if (applyThemeToBody) {
        var currentDoc_1 = getDocument(rootElement.current);
        if (currentDoc_1) {
          currentDoc_1.body.classList.add(bodyThemed);
          return function() {
            currentDoc_1.body.classList.remove(bodyThemed);
          };
        }
      }
    }, [bodyThemed, applyThemeToBody, rootElement]);
    return rootElement;
  }

  // ../node_modules/@fluentui/react/lib/components/Fabric/Fabric.styles.js
  var inheritFont = { fontFamily: "inherit" };
  var GlobalClassNames2 = {
    root: "ms-Fabric",
    bodyThemed: "ms-Fabric-bodyThemed"
  };
  var getStyles2 = function(props) {
    var applyTheme = props.applyTheme, className = props.className, preventBlanketFontInheritance = props.preventBlanketFontInheritance, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames2, theme);
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          color: theme.palette.neutralPrimary
        },
        !preventBlanketFontInheritance && {
          "& button": inheritFont,
          "& input": inheritFont,
          "& textarea": inheritFont
        },
        // apply theme to only if applyTheme is true
        applyTheme && {
          color: theme.semanticColors.bodyText,
          backgroundColor: theme.semanticColors.bodyBackground
        },
        className
      ],
      bodyThemed: [
        {
          backgroundColor: theme.semanticColors.bodyBackground
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Fabric/Fabric.js
  var Fabric = styled(FabricBase, getStyles2, void 0, {
    scope: "Fabric"
  });

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.notification.js
  var _layersByHostId = {};
  var _layerHostsById = {};
  var defaultHostId = "fluent-default-layer-host";
  var _defaultHostSelector = "#".concat(defaultHostId);
  function registerLayer(hostId, callback) {
    if (!_layersByHostId[hostId]) {
      _layersByHostId[hostId] = [];
    }
    _layersByHostId[hostId].push(callback);
    var layerHosts = _layerHostsById[hostId];
    if (layerHosts) {
      for (var _i = 0, layerHosts_1 = layerHosts; _i < layerHosts_1.length; _i++) {
        var layerHost = layerHosts_1[_i];
        layerHost.notifyLayersChanged();
      }
    }
  }
  function unregisterLayer(hostId, callback) {
    var layers = _layersByHostId[hostId];
    if (layers) {
      var idx = layers.indexOf(callback);
      if (idx >= 0) {
        layers.splice(idx, 1);
        if (layers.length === 0) {
          delete _layersByHostId[hostId];
        }
      }
    }
    var layerHosts = _layerHostsById[hostId];
    if (layerHosts) {
      for (var _i = 0, layerHosts_2 = layerHosts; _i < layerHosts_2.length; _i++) {
        var layerHost = layerHosts_2[_i];
        layerHost.notifyLayersChanged();
      }
    }
  }
  function getLayerHost(hostId) {
    var layerHosts = _layerHostsById[hostId];
    return layerHosts && layerHosts[0] || void 0;
  }
  function createDefaultLayerHost(doc) {
    var host = doc.createElement("div");
    host.setAttribute("id", defaultHostId);
    host.style.cssText = "position:fixed;z-index:1000000";
    doc === null || doc === void 0 ? void 0 : doc.body.appendChild(host);
    return host;
  }
  function getDefaultTarget() {
    return _defaultHostSelector;
  }

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.base.js
  var getClassNames3 = classNamesFunction();
  var getFocusVisibility = function(providerRef) {
    if (providerRef === null || providerRef === void 0 ? void 0 : providerRef.current) {
      return providerRef.current.classList.contains(IsFocusVisibleClassName);
    }
    return false;
  };
  var LayerBase = React137.forwardRef(function(props, ref) {
    var registerPortalEl = usePortalCompat();
    var rootRef = React137.useRef(null);
    var mergedRef = useMergedRefs2(rootRef, ref);
    var layerRef = React137.useRef();
    var fabricElementRef = React137.useRef(null);
    var focusContext = React137.useContext(FocusRectsContext);
    var _a5 = React137.useState(false), needRaiseLayerMount = _a5[0], setNeedRaiseLayerMount = _a5[1];
    var focusRectsRef = React137.useCallback(function(el) {
      var isFocusVisible = getFocusVisibility(focusContext === null || focusContext === void 0 ? void 0 : focusContext.providerRef);
      if (el && isFocusVisible) {
        el.classList.add(IsFocusVisibleClassName);
      }
    }, [focusContext]);
    var children = props.children, className = props.className, eventBubblingEnabled = props.eventBubblingEnabled, fabricProps = props.fabricProps, hostId = props.hostId, insertFirst = props.insertFirst, _b = props.onLayerDidMount, onLayerDidMount = _b === void 0 ? function() {
      return void 0;
    } : _b, _c = props.onLayerMounted, onLayerMounted = _c === void 0 ? function() {
      return void 0;
    } : _c, onLayerWillUnmount = props.onLayerWillUnmount, styles2 = props.styles, theme = props.theme;
    var fabricRef = useMergedRefs2(fabricElementRef, fabricProps === null || fabricProps === void 0 ? void 0 : fabricProps.ref, focusRectsRef);
    var classNames2 = getClassNames3(styles2, {
      theme,
      className,
      isNotHost: !hostId
    });
    var getHost = function(doc) {
      var _a6, _b2;
      if (hostId) {
        var layerHost = getLayerHost(hostId);
        if (layerHost) {
          return (_a6 = layerHost.rootRef.current) !== null && _a6 !== void 0 ? _a6 : null;
        }
        return (_b2 = doc.getElementById(hostId)) !== null && _b2 !== void 0 ? _b2 : null;
      } else {
        var defaultHostSelector = getDefaultTarget();
        var host = defaultHostSelector ? doc.querySelector(defaultHostSelector) : null;
        if (!host) {
          host = createDefaultLayerHost(doc);
        }
        return host;
      }
    };
    var removeLayerElement = function() {
      onLayerWillUnmount === null || onLayerWillUnmount === void 0 ? void 0 : onLayerWillUnmount();
      var elem = layerRef.current;
      layerRef.current = void 0;
      if (elem && elem.parentNode) {
        elem.parentNode.removeChild(elem);
      }
    };
    var createLayerElement = function() {
      var _a6;
      var doc = getDocument(rootRef.current);
      if (!doc) {
        return;
      }
      var host = getHost(doc);
      if (!host) {
        return;
      }
      removeLayerElement();
      var el = ((_a6 = host.ownerDocument) !== null && _a6 !== void 0 ? _a6 : doc).createElement("div");
      el.className = classNames2.root;
      setPortalAttribute(el);
      setVirtualParent2(el, rootRef.current);
      insertFirst ? host.insertBefore(el, host.firstChild) : host.appendChild(el);
      layerRef.current = el;
      setNeedRaiseLayerMount(true);
    };
    useIsomorphicLayoutEffect3(function() {
      createLayerElement();
      if (hostId) {
        registerLayer(hostId, createLayerElement);
      }
      var unregisterPortalEl = layerRef.current ? registerPortalEl(layerRef.current) : void 0;
      return function() {
        if (unregisterPortalEl) {
          unregisterPortalEl();
        }
        removeLayerElement();
        if (hostId) {
          unregisterLayer(hostId, createLayerElement);
        }
      };
    }, [hostId]);
    React137.useEffect(function() {
      if (layerRef.current && needRaiseLayerMount) {
        onLayerMounted === null || onLayerMounted === void 0 ? void 0 : onLayerMounted();
        onLayerDidMount === null || onLayerDidMount === void 0 ? void 0 : onLayerDidMount();
        setNeedRaiseLayerMount(false);
      }
    }, [needRaiseLayerMount, onLayerMounted, onLayerDidMount]);
    useDebugWarnings(props);
    return React137.createElement("span", { className: "ms-layer", ref: mergedRef }, layerRef.current && ReactDOM2.createPortal(React137.createElement(
      FocusRectsProvider,
      { layerRoot: true, providerRef: fabricRef },
      React137.createElement(Fabric, __assign({}, !eventBubblingEnabled && getFilteredEvents(), fabricProps, { className: css(classNames2.content, fabricProps === null || fabricProps === void 0 ? void 0 : fabricProps.className), ref: fabricRef }), children)
    ), layerRef.current));
  });
  LayerBase.displayName = "LayerBase";
  var filteredEventProps;
  var onFilterEvent = function(ev) {
    if (ev.eventPhase === Event.BUBBLING_PHASE && ev.type !== "mouseenter" && ev.type !== "mouseleave" && ev.type !== "touchstart" && ev.type !== "touchend") {
      ev.stopPropagation();
    }
  };
  function getFilteredEvents() {
    if (!filteredEventProps) {
      filteredEventProps = {};
      [
        "onClick",
        "onContextMenu",
        "onDoubleClick",
        "onDrag",
        "onDragEnd",
        "onDragEnter",
        "onDragExit",
        "onDragLeave",
        "onDragOver",
        "onDragStart",
        "onDrop",
        "onMouseDown",
        "onMouseEnter",
        "onMouseLeave",
        "onMouseMove",
        "onMouseOver",
        "onMouseOut",
        "onMouseUp",
        "onTouchMove",
        "onTouchStart",
        "onTouchCancel",
        "onTouchEnd",
        "onKeyDown",
        "onKeyPress",
        "onKeyUp",
        "onFocus",
        "onBlur",
        "onChange",
        "onInput",
        "onInvalid",
        "onSubmit"
      ].forEach(function(name) {
        return filteredEventProps[name] = onFilterEvent;
      });
    }
    return filteredEventProps;
  }
  function useDebugWarnings(props) {
    if (true) {
      useWarnings({
        name: "Layer",
        props,
        deprecations: { onLayerMounted: "onLayerDidMount" }
      });
    }
  }

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.styles.js
  var GlobalClassNames3 = {
    root: "ms-Layer",
    rootNoHost: "ms-Layer--fixed",
    content: "ms-Layer-content"
  };
  var getStyles3 = function(props) {
    var className = props.className, isNotHost = props.isNotHost, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames3, theme);
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        isNotHost && [
          classNames2.rootNoHost,
          {
            position: "fixed",
            zIndex: ZIndexes.Layer,
            top: 0,
            left: 0,
            bottom: 0,
            right: 0,
            visibility: "hidden"
          }
        ],
        className
      ],
      content: [
        classNames2.content,
        {
          visibility: "visible"
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Layer/Layer.js
  var Layer = styled(LayerBase, getStyles3, void 0, {
    scope: "Layer",
    fields: ["hostId", "theme", "styles"]
  });

  // ../node_modules/@fluentui/react/lib/components/Callout/Callout.js
  var Callout = React138.forwardRef(function(_a5, forwardedRef) {
    var layerProps = _a5.layerProps, doNotLayer = _a5.doNotLayer, rest = __rest(_a5, ["layerProps", "doNotLayer"]);
    var content15 = React138.createElement(CalloutContent, __assign({}, rest, { doNotLayer, ref: forwardedRef }));
    return doNotLayer ? content15 : React138.createElement(Layer, __assign({}, layerProps), content15);
  });
  Callout.displayName = "Callout";

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.base.js
  var React141 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.types.js
  var IconType;
  (function(IconType2) {
    IconType2[IconType2["default"] = 0] = "default";
    IconType2[IconType2["image"] = 1] = "image";
    IconType2[IconType2["Default"] = 1e5] = "Default";
    IconType2[IconType2["Image"] = 100001] = "Image";
  })(IconType || (IconType = {}));

  // ../node_modules/@fluentui/react/lib/components/Image/Image.base.js
  var React139 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Image/Image.types.js
  var ImageFit;
  (function(ImageFit2) {
    ImageFit2[ImageFit2["center"] = 0] = "center";
    ImageFit2[ImageFit2["contain"] = 1] = "contain";
    ImageFit2[ImageFit2["cover"] = 2] = "cover";
    ImageFit2[ImageFit2["none"] = 3] = "none";
    ImageFit2[ImageFit2["centerCover"] = 4] = "centerCover";
    ImageFit2[ImageFit2["centerContain"] = 5] = "centerContain";
  })(ImageFit || (ImageFit = {}));
  var ImageCoverStyle;
  (function(ImageCoverStyle2) {
    ImageCoverStyle2[ImageCoverStyle2["landscape"] = 0] = "landscape";
    ImageCoverStyle2[ImageCoverStyle2["portrait"] = 1] = "portrait";
  })(ImageCoverStyle || (ImageCoverStyle = {}));
  var ImageLoadState;
  (function(ImageLoadState2) {
    ImageLoadState2[ImageLoadState2["notLoaded"] = 0] = "notLoaded";
    ImageLoadState2[ImageLoadState2["loaded"] = 1] = "loaded";
    ImageLoadState2[ImageLoadState2["error"] = 2] = "error";
    ImageLoadState2[ImageLoadState2["errorLoaded"] = 3] = "errorLoaded";
  })(ImageLoadState || (ImageLoadState = {}));

  // ../node_modules/@fluentui/react/lib/components/Image/Image.base.js
  var getClassNames4 = classNamesFunction();
  var SVG_REGEX = /\.svg$/i;
  var KEY_PREFIX = "fabricImage";
  function useLoadState(props, imageElement) {
    var onLoadingStateChange = props.onLoadingStateChange, onLoad = props.onLoad, onError = props.onError, src = props.src;
    var _a5 = React139.useState(ImageLoadState.notLoaded), loadState = _a5[0], setLoadState = _a5[1];
    useIsomorphicLayoutEffect3(function() {
      setLoadState(ImageLoadState.notLoaded);
    }, [src]);
    React139.useEffect(function() {
      if (loadState === ImageLoadState.notLoaded) {
        var isLoaded = imageElement.current ? src && imageElement.current.naturalWidth > 0 && imageElement.current.naturalHeight > 0 || imageElement.current.complete && SVG_REGEX.test(src) : false;
        if (isLoaded) {
          setLoadState(ImageLoadState.loaded);
        }
      }
    });
    React139.useEffect(function() {
      onLoadingStateChange === null || onLoadingStateChange === void 0 ? void 0 : onLoadingStateChange(loadState);
    }, [loadState]);
    var onImageLoaded = React139.useCallback(function(ev) {
      onLoad === null || onLoad === void 0 ? void 0 : onLoad(ev);
      if (src) {
        setLoadState(ImageLoadState.loaded);
      }
    }, [src, onLoad]);
    var onImageError = React139.useCallback(function(ev) {
      onError === null || onError === void 0 ? void 0 : onError(ev);
      setLoadState(ImageLoadState.error);
    }, [onError]);
    return [loadState, onImageLoaded, onImageError];
  }
  var ImageBase = React139.forwardRef(function(props, forwardedRef) {
    var frameElement = React139.useRef();
    var imageElement = React139.useRef();
    var _a5 = useLoadState(props, imageElement), loadState = _a5[0], onImageLoaded = _a5[1], onImageError = _a5[2];
    var imageProps = getNativeProps2(props, imgProperties2, [
      "width",
      "height"
    ]);
    var src = props.src, alt = props.alt, width = props.width, height = props.height, _b = props.shouldFadeIn, shouldFadeIn = _b === void 0 ? true : _b, shouldStartVisible = props.shouldStartVisible, className = props.className, imageFit = props.imageFit, role = props.role, maximizeFrame = props.maximizeFrame, styles2 = props.styles, theme = props.theme, loading = props.loading;
    var coverStyle = useCoverStyle(props, loadState, imageElement, frameElement);
    var classNames2 = getClassNames4(styles2, {
      theme,
      className,
      width,
      height,
      maximizeFrame,
      shouldFadeIn,
      shouldStartVisible,
      isLoaded: loadState === ImageLoadState.loaded || loadState === ImageLoadState.notLoaded && props.shouldStartVisible,
      isLandscape: coverStyle === ImageCoverStyle.landscape,
      isCenter: imageFit === ImageFit.center,
      isCenterContain: imageFit === ImageFit.centerContain,
      isCenterCover: imageFit === ImageFit.centerCover,
      isContain: imageFit === ImageFit.contain,
      isCover: imageFit === ImageFit.cover,
      isNone: imageFit === ImageFit.none,
      isError: loadState === ImageLoadState.error,
      isNotImageFit: imageFit === void 0
    });
    return React139.createElement(
      "div",
      { className: classNames2.root, style: { width, height }, ref: frameElement },
      React139.createElement("img", __assign({}, imageProps, { onLoad: onImageLoaded, onError: onImageError, key: KEY_PREFIX + props.src || "", className: classNames2.image, ref: useMergedRefs2(imageElement, forwardedRef), src, alt, role, loading }))
    );
  });
  ImageBase.displayName = "ImageBase";
  function useCoverStyle(props, loadState, imageElement, frameElement) {
    var previousLoadState = React139.useRef(loadState);
    var coverStyle = React139.useRef();
    if (coverStyle === void 0 || previousLoadState.current === ImageLoadState.notLoaded && loadState === ImageLoadState.loaded) {
      coverStyle.current = computeCoverStyle(props, loadState, imageElement, frameElement);
    }
    previousLoadState.current = loadState;
    return coverStyle.current;
  }
  function computeCoverStyle(props, loadState, imageElement, frameElement) {
    var imageFit = props.imageFit, width = props.width, height = props.height;
    if (props.coverStyle !== void 0) {
      return props.coverStyle;
    } else if (loadState === ImageLoadState.loaded && (imageFit === ImageFit.cover || imageFit === ImageFit.contain || imageFit === ImageFit.centerContain || imageFit === ImageFit.centerCover) && imageElement.current && frameElement.current) {
      var desiredRatio = void 0;
      if (typeof width === "number" && typeof height === "number" && imageFit !== ImageFit.centerContain && imageFit !== ImageFit.centerCover) {
        desiredRatio = width / height;
      } else {
        desiredRatio = frameElement.current.clientWidth / frameElement.current.clientHeight;
      }
      var naturalRatio = imageElement.current.naturalWidth / imageElement.current.naturalHeight;
      if (naturalRatio > desiredRatio) {
        return ImageCoverStyle.landscape;
      }
    }
    return ImageCoverStyle.portrait;
  }

  // ../node_modules/@fluentui/react/lib/components/Image/Image.styles.js
  var GlobalClassNames4 = {
    root: "ms-Image",
    rootMaximizeFrame: "ms-Image--maximizeFrame",
    image: "ms-Image-image",
    imageCenter: "ms-Image-image--center",
    imageContain: "ms-Image-image--contain",
    imageCover: "ms-Image-image--cover",
    imageCenterContain: "ms-Image-image--centerContain",
    imageCenterCover: "ms-Image-image--centerCover",
    imageNone: "ms-Image-image--none",
    imageLandscape: "ms-Image-image--landscape",
    imagePortrait: "ms-Image-image--portrait"
  };
  var getStyles4 = function(props) {
    var className = props.className, width = props.width, height = props.height, maximizeFrame = props.maximizeFrame, isLoaded = props.isLoaded, shouldFadeIn = props.shouldFadeIn, shouldStartVisible = props.shouldStartVisible, isLandscape = props.isLandscape, isCenter = props.isCenter, isContain = props.isContain, isCover = props.isCover, isCenterContain = props.isCenterContain, isCenterCover = props.isCenterCover, isNone = props.isNone, isError = props.isError, isNotImageFit = props.isNotImageFit, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames4, theme);
    var ImageFitStyles = {
      position: "absolute",
      left: "50% /* @noflip */",
      top: "50%",
      transform: "translate(-50%,-50%)"
      // @todo test RTL renders transform: translate(50%,-50%);
    };
    var window2 = getWindow();
    var supportsObjectFit = window2 !== void 0 && // eslint-disable-next-line @fluentui/max-len
    // cast needed as vendor prefixed `msMaxTouchPoints` api is no longer part of TS lib declaration - introduced with TS 4.4
    window2.navigator.msMaxTouchPoints === void 0;
    var fallbackObjectFitStyles = isContain && isLandscape || isCover && !isLandscape ? { width: "100%", height: "auto" } : { width: "auto", height: "100%" };
    return {
      root: [
        classNames2.root,
        theme.fonts.medium,
        {
          overflow: "hidden"
        },
        maximizeFrame && [
          classNames2.rootMaximizeFrame,
          {
            height: "100%",
            width: "100%"
          }
        ],
        isLoaded && shouldFadeIn && !shouldStartVisible && AnimationClassNames.fadeIn400,
        (isCenter || isContain || isCover || isCenterContain || isCenterCover) && {
          position: "relative"
        },
        className
      ],
      image: [
        classNames2.image,
        {
          display: "block",
          opacity: 0
        },
        isLoaded && [
          "is-loaded",
          {
            opacity: 1
          }
        ],
        isCenter && [classNames2.imageCenter, ImageFitStyles],
        isContain && [
          classNames2.imageContain,
          supportsObjectFit && {
            width: "100%",
            height: "100%",
            objectFit: "contain"
          },
          !supportsObjectFit && fallbackObjectFitStyles,
          !supportsObjectFit && ImageFitStyles
        ],
        isCover && [
          classNames2.imageCover,
          supportsObjectFit && {
            width: "100%",
            height: "100%",
            objectFit: "cover"
          },
          !supportsObjectFit && fallbackObjectFitStyles,
          !supportsObjectFit && ImageFitStyles
        ],
        isCenterContain && [
          classNames2.imageCenterContain,
          isLandscape && {
            maxWidth: "100%"
          },
          !isLandscape && {
            maxHeight: "100%"
          },
          ImageFitStyles
        ],
        isCenterCover && [
          classNames2.imageCenterCover,
          isLandscape && {
            maxHeight: "100%"
          },
          !isLandscape && {
            maxWidth: "100%"
          },
          ImageFitStyles
        ],
        isNone && [
          classNames2.imageNone,
          {
            width: "auto",
            height: "auto"
          }
        ],
        isNotImageFit && [
          !!width && !height && {
            height: "auto",
            width: "100%"
          },
          !width && !!height && {
            height: "100%",
            width: "auto"
          },
          !!width && !!height && {
            height: "100%",
            width: "100%"
          }
        ],
        isLandscape && classNames2.imageLandscape,
        !isLandscape && classNames2.imagePortrait,
        !isLoaded && "is-notLoaded",
        shouldFadeIn && "is-fadeIn",
        isError && "is-error"
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Image/Image.js
  var Image2 = styled(ImageBase, getStyles4, void 0, {
    scope: "Image"
  }, true);
  Image2.displayName = "Image";

  // ../node_modules/@fluentui/react/lib/components/Icon/FontIcon.js
  var React140 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.styles.js
  var classNames = mergeStyleSets({
    root: {
      display: "inline-block"
    },
    placeholder: [
      "ms-Icon-placeHolder",
      {
        width: "1em"
      }
    ],
    image: [
      "ms-Icon-imageContainer",
      {
        overflow: "hidden"
      }
    ]
  });
  var MS_ICON = "ms-Icon";
  var getStyles5 = function(props) {
    var className = props.className, iconClassName = props.iconClassName, isPlaceholder = props.isPlaceholder, isImage = props.isImage, styles2 = props.styles;
    return {
      root: [
        isPlaceholder && classNames.placeholder,
        classNames.root,
        isImage && classNames.image,
        iconClassName,
        className,
        styles2 && styles2.root,
        // eslint-disable-next-line deprecation/deprecation
        styles2 && styles2.imageContainer
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Icon/FontIcon.js
  var getIconContent = memoizeFunction(
    function(iconName) {
      var _a5 = getIcon(iconName) || {
        subset: {},
        code: void 0
      }, code2 = _a5.code, subset = _a5.subset;
      if (!code2) {
        return null;
      }
      return {
        children: code2,
        iconClassName: subset.className,
        fontFamily: subset.fontFace && subset.fontFace.fontFamily,
        mergeImageProps: subset.mergeImageProps
      };
    },
    void 0,
    true
    /*ignoreNullOrUndefinedResult */
  );
  var FontIcon = function(props) {
    var iconName = props.iconName, className = props.className, _a5 = props.style, style = _a5 === void 0 ? {} : _a5;
    var iconContent = getIconContent(iconName) || {};
    var iconClassName = iconContent.iconClassName, children = iconContent.children, fontFamily = iconContent.fontFamily, mergeImageProps = iconContent.mergeImageProps;
    var nativeProps = getNativeProps2(props, htmlElementProperties2);
    var accessibleName = props["aria-label"] || props.title;
    var containerProps = props["aria-label"] || props["aria-labelledby"] || props.title ? {
      role: mergeImageProps ? void 0 : "img"
    } : {
      "aria-hidden": true
    };
    var finalChildren = children;
    if (mergeImageProps) {
      if (typeof children === "object" && typeof children.props === "object" && accessibleName) {
        finalChildren = React140.cloneElement(children, { alt: accessibleName });
      }
    }
    return React140.createElement("i", __assign({ "data-icon-name": iconName }, containerProps, nativeProps, mergeImageProps ? {
      title: void 0,
      "aria-label": void 0
    } : {}, {
      className: css(MS_ICON, classNames.root, iconClassName, !iconName && classNames.placeholder, className),
      // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles
      // https://github.com/microsoft/fluentui/issues/10449
      style: __assign({ fontFamily }, style)
    }), finalChildren);
  };
  var getFontIcon = memoizeFunction(function(iconName, className, ariaLabel) {
    return FontIcon({ iconName, className, "aria-label": ariaLabel });
  });

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.base.js
  var getClassNames5 = classNamesFunction({
    // Icon is used a lot by other components.
    // It's likely to see expected cases which pass different className to the Icon.
    // Therefore setting a larger cache size.
    cacheSize: 100
  });
  var IconBase = (
    /** @class */
    function(_super) {
      __extends(IconBase2, _super);
      function IconBase2(props) {
        var _this = _super.call(this, props) || this;
        _this._onImageLoadingStateChange = function(state) {
          if (_this.props.imageProps && _this.props.imageProps.onLoadingStateChange) {
            _this.props.imageProps.onLoadingStateChange(state);
          }
          if (state === ImageLoadState.error) {
            _this.setState({ imageLoadError: true });
          }
        };
        _this.state = {
          imageLoadError: false
        };
        return _this;
      }
      IconBase2.prototype.render = function() {
        var _a5 = this.props, children = _a5.children, className = _a5.className, styles2 = _a5.styles, iconName = _a5.iconName, imageErrorAs = _a5.imageErrorAs, theme = _a5.theme;
        var isPlaceholder = typeof iconName === "string" && iconName.length === 0;
        var isImage = (
          // eslint-disable-next-line deprecation/deprecation
          !!this.props.imageProps || this.props.iconType === IconType.image || this.props.iconType === IconType.Image
        );
        var iconContent = getIconContent(iconName) || {};
        var iconClassName = iconContent.iconClassName, iconContentChildren = iconContent.children, mergeImageProps = iconContent.mergeImageProps;
        var classNames2 = getClassNames5(styles2, {
          theme,
          className,
          iconClassName,
          isImage,
          isPlaceholder
        });
        var RootType = isImage ? "span" : "i";
        var nativeProps = getNativeProps2(this.props, htmlElementProperties2, [
          "aria-label"
        ]);
        var imageLoadError = this.state.imageLoadError;
        var imageProps = __assign(__assign({}, this.props.imageProps), { onLoadingStateChange: this._onImageLoadingStateChange });
        var ImageType = imageLoadError && imageErrorAs || Image2;
        var ariaLabel = this.props["aria-label"] || this.props.ariaLabel;
        var accessibleName = imageProps.alt || ariaLabel || this.props.title;
        var hasName = !!(accessibleName || this.props["aria-labelledby"] || imageProps["aria-label"] || imageProps["aria-labelledby"]);
        var containerProps = hasName ? {
          role: isImage || mergeImageProps ? void 0 : "img",
          "aria-label": isImage || mergeImageProps ? void 0 : accessibleName
        } : {
          "aria-hidden": true
        };
        var finalIconContentChildren = iconContentChildren;
        if (mergeImageProps && iconContentChildren && typeof iconContentChildren === "object" && accessibleName) {
          finalIconContentChildren = React141.cloneElement(iconContentChildren, {
            alt: accessibleName
          });
        }
        return React141.createElement(RootType, __assign({ "data-icon-name": iconName }, containerProps, nativeProps, mergeImageProps ? {
          title: void 0,
          "aria-label": void 0
        } : {}, { className: classNames2.root }), isImage ? React141.createElement(ImageType, __assign({}, imageProps)) : children || finalIconContentChildren);
      };
      return IconBase2;
    }(React141.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Icon/Icon.js
  var Icon = styled(IconBase, getStyles5, void 0, {
    scope: "Icon"
  }, true);
  Icon.displayName = "Icon";

  // ../node_modules/@fluentui/react/lib/components/Icon/ImageIcon.js
  var React142 = __toESM(require_react());
  var ImageIcon = function(props) {
    var className = props.className, imageProps = props.imageProps;
    var nativeProps = getNativeProps2(props, htmlElementProperties2, [
      "aria-label",
      "aria-labelledby",
      "title",
      "aria-describedby"
    ]);
    var altText = imageProps.alt || props["aria-label"];
    var hasName = altText || props["aria-labelledby"] || props.title || imageProps["aria-label"] || imageProps["aria-labelledby"] || imageProps.title;
    var imageNameProps = {
      "aria-labelledby": props["aria-labelledby"],
      "aria-describedby": props["aria-describedby"],
      title: props.title
    };
    var containerProps = hasName ? {} : {
      "aria-hidden": true
    };
    return React142.createElement(
      "div",
      __assign({}, containerProps, nativeProps, { className: css(MS_ICON, classNames.root, classNames.image, className) }),
      React142.createElement(Image2, __assign({}, imageNameProps, imageProps, { alt: hasName ? altText : "" }))
    );
  };

  // ../node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js
  var React143 = __toESM(require_react());

  // ../node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.types.js
  var FocusZoneTabbableElements = {
    /** Tabbing is not allowed */
    none: 0,
    /** All tabbing action is allowed */
    all: 1,
    /** Tabbing is allowed only on input elements */
    inputOnly: 2
  };
  var FocusZoneDirection;
  (function(FocusZoneDirection2) {
    FocusZoneDirection2[FocusZoneDirection2["vertical"] = 0] = "vertical";
    FocusZoneDirection2[FocusZoneDirection2["horizontal"] = 1] = "horizontal";
    FocusZoneDirection2[FocusZoneDirection2["bidirectional"] = 2] = "bidirectional";
    FocusZoneDirection2[FocusZoneDirection2["domOrder"] = 3] = "domOrder";
  })(FocusZoneDirection || (FocusZoneDirection = {}));

  // ../node_modules/@fluentui/react-focus/lib/components/FocusZone/FocusZone.js
  var IS_FOCUSABLE_ATTRIBUTE2 = "data-is-focusable";
  var IS_ENTER_DISABLED_ATTRIBUTE = "data-disable-click-on-enter";
  var FOCUSZONE_ID_ATTRIBUTE2 = "data-focuszone-id";
  var TABINDEX = "tabindex";
  var NO_VERTICAL_WRAP = "data-no-vertical-wrap";
  var NO_HORIZONTAL_WRAP = "data-no-horizontal-wrap";
  var LARGE_DISTANCE_FROM_CENTER = 999999999;
  var LARGE_NEGATIVE_DISTANCE_FROM_CENTER = -999999999;
  var focusZoneStyles;
  var focusZoneClass = "ms-FocusZone";
  function raiseClickFromKeyboardEvent(target, ev) {
    var event;
    if (typeof MouseEvent === "function") {
      event = new MouseEvent("click", {
        ctrlKey: ev === null || ev === void 0 ? void 0 : ev.ctrlKey,
        metaKey: ev === null || ev === void 0 ? void 0 : ev.metaKey,
        shiftKey: ev === null || ev === void 0 ? void 0 : ev.shiftKey,
        altKey: ev === null || ev === void 0 ? void 0 : ev.altKey,
        bubbles: ev === null || ev === void 0 ? void 0 : ev.bubbles,
        cancelable: ev === null || ev === void 0 ? void 0 : ev.cancelable
      });
    } else {
      event = document.createEvent("MouseEvents");
      event.initMouseEvent(
        "click",
        ev ? ev.bubbles : false,
        ev ? ev.cancelable : false,
        window,
        // not using getWindow() since this can only be run client side
        0,
        // detail
        0,
        // screen x
        0,
        // screen y
        0,
        // client x
        0,
        // client y
        ev ? ev.ctrlKey : false,
        ev ? ev.altKey : false,
        ev ? ev.shiftKey : false,
        ev ? ev.metaKey : false,
        0,
        // button
        null
      );
    }
    target.dispatchEvent(event);
  }
  function getRootClass() {
    if (!focusZoneStyles) {
      focusZoneStyles = mergeStyles({
        selectors: {
          ":focus": {
            outline: "none"
          }
        }
      }, focusZoneClass);
    }
    return focusZoneStyles;
  }
  var _allInstances = {};
  var _outerZones = /* @__PURE__ */ new Set();
  var ALLOWED_INPUT_TYPES = ["text", "number", "password", "email", "tel", "url", "search", "textarea"];
  var ALLOW_VIRTUAL_ELEMENTS = false;
  var FocusZone = (
    /** @class */
    function(_super) {
      __extends(FocusZone2, _super);
      function FocusZone2(props) {
        var _this = this;
        var _a5, _b, _c, _d;
        _this = _super.call(this, props) || this;
        _this._root = React143.createRef();
        _this._mergedRef = createMergedRef();
        _this._onFocus = function(ev) {
          if (_this._portalContainsElement(ev.target)) {
            return;
          }
          var _a6 = _this.props, onActiveElementChanged = _a6.onActiveElementChanged, doNotAllowFocusEventToPropagate = _a6.doNotAllowFocusEventToPropagate, stopFocusPropagation = _a6.stopFocusPropagation, onFocusNotification = _a6.onFocusNotification, onFocus = _a6.onFocus, shouldFocusInnerElementWhenReceivedFocus = _a6.shouldFocusInnerElementWhenReceivedFocus, defaultTabbableElement = _a6.defaultTabbableElement;
          var isImmediateDescendant = _this._isImmediateDescendantOfZone(ev.target);
          var newActiveElement;
          if (isImmediateDescendant) {
            newActiveElement = ev.target;
          } else {
            var parentElement = ev.target;
            while (parentElement && parentElement !== _this._root.current) {
              if (isElementTabbable(parentElement) && _this._isImmediateDescendantOfZone(parentElement)) {
                newActiveElement = parentElement;
                break;
              }
              parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
            }
          }
          if (shouldFocusInnerElementWhenReceivedFocus && ev.target === _this._root.current) {
            var maybeElementToFocus = defaultTabbableElement && typeof defaultTabbableElement === "function" && _this._root.current && defaultTabbableElement(_this._root.current);
            if (maybeElementToFocus && isElementTabbable(maybeElementToFocus)) {
              newActiveElement = maybeElementToFocus;
              maybeElementToFocus.focus();
            } else {
              _this.focus(true);
              if (_this._activeElement) {
                newActiveElement = null;
              }
            }
          }
          var initialElementFocused = !_this._activeElement;
          if (newActiveElement && newActiveElement !== _this._activeElement) {
            if (isImmediateDescendant || initialElementFocused) {
              _this._setFocusAlignment(newActiveElement, true, true);
            }
            _this._activeElement = newActiveElement;
            if (initialElementFocused) {
              _this._updateTabIndexes();
            }
          }
          if (onActiveElementChanged) {
            onActiveElementChanged(_this._activeElement, ev);
          }
          if (stopFocusPropagation || doNotAllowFocusEventToPropagate) {
            ev.stopPropagation();
          }
          if (onFocus) {
            onFocus(ev);
          } else if (onFocusNotification) {
            onFocusNotification();
          }
        };
        _this._onBlur = function() {
          _this._setParkedFocus(false);
        };
        _this._onMouseDown = function(ev) {
          if (_this._portalContainsElement(ev.target)) {
            return;
          }
          var disabled = _this.props.disabled;
          if (disabled) {
            return;
          }
          var target = ev.target;
          var path2 = [];
          while (target && target !== _this._root.current) {
            path2.push(target);
            target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);
          }
          while (path2.length) {
            target = path2.pop();
            if (target && isElementTabbable(target)) {
              _this._setActiveElement(target, true);
            }
            if (isElementFocusZone(target)) {
              break;
            }
          }
        };
        _this._onKeyDown = function(ev, theme) {
          if (_this._portalContainsElement(ev.target)) {
            return;
          }
          var _a6 = _this.props, direction = _a6.direction, disabled = _a6.disabled, isInnerZoneKeystroke = _a6.isInnerZoneKeystroke, pagingSupportDisabled = _a6.pagingSupportDisabled, shouldEnterInnerZone = _a6.shouldEnterInnerZone;
          if (disabled) {
            return;
          }
          if (_this.props.onKeyDown) {
            _this.props.onKeyDown(ev);
          }
          if (ev.isDefaultPrevented()) {
            return;
          }
          if (_this._getDocument().activeElement === _this._root.current && _this._isInnerZone) {
            return;
          }
          if ((shouldEnterInnerZone && shouldEnterInnerZone(ev) || isInnerZoneKeystroke && isInnerZoneKeystroke(ev)) && _this._isImmediateDescendantOfZone(ev.target)) {
            var innerZone = _this._getFirstInnerZone();
            if (innerZone) {
              if (!innerZone.focus(true)) {
                return;
              }
            } else if (isElementFocusSubZone(ev.target)) {
              if (!_this.focusElement(getNextElement(ev.target, ev.target.firstChild, true))) {
                return;
              }
            } else {
              return;
            }
          } else if (ev.altKey) {
            return;
          } else {
            switch (ev.which) {
              case KeyCodes.space:
                if (_this._shouldRaiseClicksOnSpace && _this._tryInvokeClickForFocusable(ev.target, ev)) {
                  break;
                }
                return;
              case KeyCodes.left:
                if (direction !== FocusZoneDirection.vertical) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusLeft(theme)) {
                    break;
                  }
                }
                return;
              case KeyCodes.right:
                if (direction !== FocusZoneDirection.vertical) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusRight(theme)) {
                    break;
                  }
                }
                return;
              case KeyCodes.up:
                if (direction !== FocusZoneDirection.horizontal) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusUp()) {
                    break;
                  }
                }
                return;
              case KeyCodes.down:
                if (direction !== FocusZoneDirection.horizontal) {
                  _this._preventDefaultWhenHandled(ev);
                  if (_this._moveFocusDown()) {
                    break;
                  }
                }
                return;
              case KeyCodes.pageDown:
                if (!pagingSupportDisabled && _this._moveFocusPaging(true)) {
                  break;
                }
                return;
              case KeyCodes.pageUp:
                if (!pagingSupportDisabled && _this._moveFocusPaging(false)) {
                  break;
                }
                return;
              case KeyCodes.tab:
                if (
                  // eslint-disable-next-line deprecation/deprecation
                  _this.props.allowTabKey || _this.props.handleTabKey === FocusZoneTabbableElements.all || _this.props.handleTabKey === FocusZoneTabbableElements.inputOnly && _this._isElementInput(ev.target)
                ) {
                  var focusChanged = false;
                  _this._processingTabKey = true;
                  if (direction === FocusZoneDirection.vertical || !_this._shouldWrapFocus(_this._activeElement, NO_HORIZONTAL_WRAP)) {
                    focusChanged = ev.shiftKey ? _this._moveFocusUp() : _this._moveFocusDown();
                  } else {
                    var tabWithDirection = getRTL2(theme) ? !ev.shiftKey : ev.shiftKey;
                    focusChanged = tabWithDirection ? _this._moveFocusLeft(theme) : _this._moveFocusRight(theme);
                  }
                  _this._processingTabKey = false;
                  if (focusChanged) {
                    break;
                  } else if (_this.props.shouldResetActiveElementWhenTabFromZone) {
                    _this._activeElement = null;
                  }
                }
                return;
              case KeyCodes.home:
                if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, false)) {
                  return false;
                }
                var firstChild = _this._root.current && _this._root.current.firstChild;
                if (_this._root.current && firstChild && _this.focusElement(getNextElement(_this._root.current, firstChild, true))) {
                  break;
                }
                return;
              case KeyCodes.end:
                if (_this._isContentEditableElement(ev.target) || _this._isElementInput(ev.target) && !_this._shouldInputLoseFocus(ev.target, true)) {
                  return false;
                }
                var lastChild = _this._root.current && _this._root.current.lastChild;
                if (_this._root.current && _this.focusElement(getPreviousElement(_this._root.current, lastChild, true, true, true))) {
                  break;
                }
                return;
              case KeyCodes.enter:
                if (_this._shouldRaiseClicksOnEnter && _this._tryInvokeClickForFocusable(ev.target, ev)) {
                  break;
                }
                return;
              default:
                return;
            }
          }
          ev.preventDefault();
          ev.stopPropagation();
        };
        _this._getHorizontalDistanceFromCenter = function(isForward, activeRect, targetRect) {
          var leftAlignment = _this._focusAlignment.left || _this._focusAlignment.x || 0;
          var targetRectTop = Math.floor(targetRect.top);
          var activeRectBottom = Math.floor(activeRect.bottom);
          var targetRectBottom = Math.floor(targetRect.bottom);
          var activeRectTop = Math.floor(activeRect.top);
          var isValidCandidateOnpagingDown = isForward && targetRectTop > activeRectBottom;
          var isValidCandidateOnpagingUp = !isForward && targetRectBottom < activeRectTop;
          if (isValidCandidateOnpagingDown || isValidCandidateOnpagingUp) {
            if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
              return 0;
            }
            return Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
          }
          if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
            return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
          }
          return LARGE_DISTANCE_FROM_CENTER;
        };
        initializeComponentRef(_this);
        if (true) {
          warnDeprecations("FocusZone", props, {
            rootProps: void 0,
            allowTabKey: "handleTabKey",
            elementType: "as",
            ariaDescribedBy: "aria-describedby",
            ariaLabelledBy: "aria-labelledby"
          });
        }
        _this._id = getId("FocusZone");
        _this._focusAlignment = {
          left: 0,
          top: 0
        };
        _this._processingTabKey = false;
        var shouldRaiseClicksFallback = (_b = (_a5 = props.shouldRaiseClicks) !== null && _a5 !== void 0 ? _a5 : FocusZone2.defaultProps.shouldRaiseClicks) !== null && _b !== void 0 ? _b : true;
        _this._shouldRaiseClicksOnEnter = (_c = props.shouldRaiseClicksOnEnter) !== null && _c !== void 0 ? _c : shouldRaiseClicksFallback;
        _this._shouldRaiseClicksOnSpace = (_d = props.shouldRaiseClicksOnSpace) !== null && _d !== void 0 ? _d : shouldRaiseClicksFallback;
        return _this;
      }
      FocusZone2.getOuterZones = function() {
        return _outerZones.size;
      };
      FocusZone2._onKeyDownCapture = function(ev) {
        if (ev.which === KeyCodes.tab) {
          _outerZones.forEach(function(zone) {
            return zone._updateTabIndexes();
          });
        }
      };
      FocusZone2.prototype.componentDidMount = function() {
        var root151 = this._root.current;
        _allInstances[this._id] = this;
        if (root151) {
          var parentElement = getParent(root151, ALLOW_VIRTUAL_ELEMENTS);
          while (parentElement && parentElement !== this._getDocument().body && parentElement.nodeType === 1) {
            if (isElementFocusZone(parentElement)) {
              this._isInnerZone = true;
              break;
            }
            parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
          }
          if (!this._isInnerZone) {
            _outerZones.add(this);
            this._root.current && this._root.current.addEventListener("keydown", FocusZone2._onKeyDownCapture, true);
          }
          this._root.current && this._root.current.addEventListener("blur", this._onBlur, true);
          this._updateTabIndexes();
          if (this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === "string") {
            this._activeElement = this._getDocument().querySelector(this.props.defaultTabbableElement);
          } else if (this.props.defaultActiveElement) {
            this._activeElement = this._getDocument().querySelector(this.props.defaultActiveElement);
          }
          if (this.props.shouldFocusOnMount) {
            this.focus();
          }
        }
      };
      FocusZone2.prototype.componentDidUpdate = function() {
        var root151 = this._root.current;
        var doc = this._getDocument();
        if (this._activeElement && !elementContains(this._root.current, this._activeElement, ALLOW_VIRTUAL_ELEMENTS) || this._defaultFocusElement && !elementContains(this._root.current, this._defaultFocusElement, ALLOW_VIRTUAL_ELEMENTS)) {
          this._activeElement = null;
          this._defaultFocusElement = null;
          this._updateTabIndexes();
        }
        if (!this.props.preventFocusRestoration && doc && this._lastIndexPath && (doc.activeElement === doc.body || doc.activeElement === null || doc.activeElement === root151)) {
          var elementToFocus = getFocusableByIndexPath(root151, this._lastIndexPath);
          if (elementToFocus) {
            this._setActiveElement(elementToFocus, true);
            elementToFocus.focus();
            this._setParkedFocus(false);
          } else {
            this._setParkedFocus(true);
          }
        }
      };
      FocusZone2.prototype.componentWillUnmount = function() {
        delete _allInstances[this._id];
        if (!this._isInnerZone) {
          _outerZones.delete(this);
          this._root.current && this._root.current.removeEventListener("keydown", FocusZone2._onKeyDownCapture, true);
        }
        if (this._root.current) {
          this._root.current.removeEventListener("blur", this._onBlur, true);
        }
        this._activeElement = null;
        this._defaultFocusElement = null;
      };
      FocusZone2.prototype.render = function() {
        var _this = this;
        var _a5 = this.props, tag = _a5.as, elementType2 = _a5.elementType, rootProps = _a5.rootProps, ariaDescribedBy = _a5.ariaDescribedBy, ariaLabelledBy = _a5.ariaLabelledBy, className = _a5.className;
        var divProps = getNativeProps2(this.props, htmlElementProperties2);
        var Tag = tag || elementType2 || "div";
        this._evaluateFocusBeforeRender();
        var theme = getTheme();
        return React143.createElement(Tag, __assign({ "aria-labelledby": ariaLabelledBy, "aria-describedby": ariaDescribedBy }, divProps, rootProps, {
          // Once the getClassName correctly memoizes inputs this should
          // be replaced so that className is passed to getRootClass and is included there so
          // the class names will always be in the same order.
          className: css(getRootClass(), className),
          // eslint-disable-next-line deprecation/deprecation
          ref: this._mergedRef(this.props.elementRef, this._root),
          "data-focuszone-id": this._id,
          // eslint-disable-next-line react/jsx-no-bind
          onKeyDown: function(ev) {
            return _this._onKeyDown(ev, theme);
          },
          onFocus: this._onFocus,
          onMouseDownCapture: this._onMouseDown
        }), this.props.children);
      };
      FocusZone2.prototype.focus = function(forceIntoFirstElement, bypassHiddenElements) {
        if (forceIntoFirstElement === void 0) {
          forceIntoFirstElement = false;
        }
        if (bypassHiddenElements === void 0) {
          bypassHiddenElements = false;
        }
        if (this._root.current) {
          if (!forceIntoFirstElement && this._root.current.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true" && this._isInnerZone) {
            var ownerZoneElement = this._getOwnerZone(this._root.current);
            if (ownerZoneElement !== this._root.current) {
              var ownerZone = _allInstances[ownerZoneElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
              return !!ownerZone && ownerZone.focusElement(this._root.current);
            }
            return false;
          } else if (!forceIntoFirstElement && this._activeElement && elementContains(this._root.current, this._activeElement) && isElementTabbable(this._activeElement) && (!bypassHiddenElements || isElementVisibleAndNotHidden(this._activeElement))) {
            this._activeElement.focus();
            return true;
          } else {
            var firstChild = this._root.current.firstChild;
            return this.focusElement(getNextElement(this._root.current, firstChild, true, void 0, void 0, void 0, void 0, void 0, bypassHiddenElements));
          }
        }
        return false;
      };
      FocusZone2.prototype.focusLast = function() {
        if (this._root.current) {
          var lastChild = this._root.current && this._root.current.lastChild;
          return this.focusElement(getPreviousElement(this._root.current, lastChild, true, true, true));
        }
        return false;
      };
      FocusZone2.prototype.focusElement = function(element2, forceAlignment) {
        var _a5 = this.props, onBeforeFocus = _a5.onBeforeFocus, shouldReceiveFocus = _a5.shouldReceiveFocus;
        if (shouldReceiveFocus && !shouldReceiveFocus(element2) || onBeforeFocus && !onBeforeFocus(element2)) {
          return false;
        }
        if (element2) {
          this._setActiveElement(element2, forceAlignment);
          if (this._activeElement) {
            this._activeElement.focus();
          }
          return true;
        }
        return false;
      };
      FocusZone2.prototype.setFocusAlignment = function(point4) {
        this._focusAlignment = point4;
      };
      Object.defineProperty(FocusZone2.prototype, "defaultFocusElement", {
        get: function() {
          return this._defaultFocusElement;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FocusZone2.prototype, "activeElement", {
        get: function() {
          return this._activeElement;
        },
        enumerable: false,
        configurable: true
      });
      FocusZone2.prototype._evaluateFocusBeforeRender = function() {
        var root151 = this._root.current;
        var doc = this._getDocument();
        if (doc) {
          var focusedElement = doc.activeElement;
          if (focusedElement !== root151) {
            var shouldRestoreFocus = elementContains(root151, focusedElement, false);
            this._lastIndexPath = shouldRestoreFocus ? getElementIndexPath(root151, focusedElement) : void 0;
          }
        }
      };
      FocusZone2.prototype._setParkedFocus = function(isParked) {
        var root151 = this._root.current;
        if (root151 && this._isParked !== isParked) {
          this._isParked = isParked;
          if (isParked) {
            if (!this.props.allowFocusRoot) {
              this._parkedTabIndex = root151.getAttribute("tabindex");
              root151.setAttribute("tabindex", "-1");
            }
            root151.focus();
          } else if (!this.props.allowFocusRoot) {
            if (this._parkedTabIndex) {
              root151.setAttribute("tabindex", this._parkedTabIndex);
              this._parkedTabIndex = void 0;
            } else {
              root151.removeAttribute("tabindex");
            }
          }
        }
      };
      FocusZone2.prototype._setActiveElement = function(element2, forceAlignment) {
        var previousActiveElement = this._activeElement;
        this._activeElement = element2;
        if (previousActiveElement) {
          if (isElementFocusZone(previousActiveElement)) {
            this._updateTabIndexes(previousActiveElement);
          }
          previousActiveElement.tabIndex = -1;
        }
        if (this._activeElement) {
          if (!this._focusAlignment || forceAlignment) {
            this._setFocusAlignment(element2, true, true);
          }
          this._activeElement.tabIndex = 0;
        }
      };
      FocusZone2.prototype._preventDefaultWhenHandled = function(ev) {
        this.props.preventDefaultWhenHandled && ev.preventDefault();
      };
      FocusZone2.prototype._tryInvokeClickForFocusable = function(targetElement, ev) {
        var target = targetElement;
        if (target === this._root.current) {
          return false;
        }
        do {
          if (target.tagName === "BUTTON" || target.tagName === "A" || target.tagName === "INPUT" || target.tagName === "TEXTAREA" || target.tagName === "SUMMARY") {
            return false;
          }
          if (this._isImmediateDescendantOfZone(target) && target.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true" && target.getAttribute(IS_ENTER_DISABLED_ATTRIBUTE) !== "true") {
            raiseClickFromKeyboardEvent(target, ev);
            return true;
          }
          target = getParent(target, ALLOW_VIRTUAL_ELEMENTS);
        } while (target !== this._root.current);
        return false;
      };
      FocusZone2.prototype._getFirstInnerZone = function(rootElement) {
        rootElement = rootElement || this._activeElement || this._root.current;
        if (!rootElement) {
          return null;
        }
        if (isElementFocusZone(rootElement)) {
          return _allInstances[rootElement.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
        }
        var child = rootElement.firstElementChild;
        while (child) {
          if (isElementFocusZone(child)) {
            return _allInstances[child.getAttribute(FOCUSZONE_ID_ATTRIBUTE2)];
          }
          var match2 = this._getFirstInnerZone(child);
          if (match2) {
            return match2;
          }
          child = child.nextElementSibling;
        }
        return null;
      };
      FocusZone2.prototype._moveFocus = function(isForward, getDistanceFromCenter, ev, useDefaultWrap) {
        if (useDefaultWrap === void 0) {
          useDefaultWrap = true;
        }
        var element2 = this._activeElement;
        var candidateDistance = -1;
        var candidateElement = void 0;
        var changedFocus = false;
        var isBidirectional = this.props.direction === FocusZoneDirection.bidirectional;
        if (!element2 || !this._root.current) {
          return false;
        }
        if (this._isElementInput(element2)) {
          if (!this._shouldInputLoseFocus(element2, isForward)) {
            return false;
          }
        }
        var activeRect = isBidirectional ? element2.getBoundingClientRect() : null;
        do {
          element2 = isForward ? getNextElement(this._root.current, element2) : getPreviousElement(this._root.current, element2);
          if (isBidirectional) {
            if (element2) {
              var targetRect = element2.getBoundingClientRect();
              var elementDistance = getDistanceFromCenter(activeRect, targetRect);
              if (elementDistance === -1 && candidateDistance === -1) {
                candidateElement = element2;
                break;
              }
              if (elementDistance > -1 && (candidateDistance === -1 || elementDistance < candidateDistance)) {
                candidateDistance = elementDistance;
                candidateElement = element2;
              }
              if (candidateDistance >= 0 && elementDistance < 0) {
                break;
              }
            }
          } else {
            candidateElement = element2;
            break;
          }
        } while (element2);
        if (candidateElement && candidateElement !== this._activeElement) {
          changedFocus = true;
          this.focusElement(candidateElement);
        } else if (this.props.isCircularNavigation && useDefaultWrap) {
          if (isForward) {
            return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));
          } else {
            return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
          }
        }
        return changedFocus;
      };
      FocusZone2.prototype._moveFocusDown = function() {
        var _this = this;
        var targetTop = -1;
        var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
        if (
          // eslint-disable-next-line deprecation/deprecation
          this._moveFocus(true, function(activeRect, targetRect) {
            var distance = -1;
            var targetRectTop = Math.floor(targetRect.top);
            var activeRectBottom = Math.floor(activeRect.bottom);
            if (targetRectTop < activeRectBottom) {
              if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
                return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
              }
              return LARGE_DISTANCE_FROM_CENTER;
            }
            if (targetTop === -1 && targetRectTop >= activeRectBottom || targetRectTop === targetTop) {
              targetTop = targetRectTop;
              if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
                distance = 0;
              } else {
                distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
              }
            }
            return distance;
          })
        ) {
          this._setFocusAlignment(this._activeElement, false, true);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusUp = function() {
        var _this = this;
        var targetTop = -1;
        var leftAlignment = this._focusAlignment.left || this._focusAlignment.x || 0;
        if (
          // eslint-disable-next-line deprecation/deprecation
          this._moveFocus(false, function(activeRect, targetRect) {
            var distance = -1;
            var targetRectBottom = Math.floor(targetRect.bottom);
            var targetRectTop = Math.floor(targetRect.top);
            var activeRectTop = Math.floor(activeRect.top);
            if (targetRectBottom > activeRectTop) {
              if (!_this._shouldWrapFocus(_this._activeElement, NO_VERTICAL_WRAP)) {
                return LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
              }
              return LARGE_DISTANCE_FROM_CENTER;
            }
            if (targetTop === -1 && targetRectBottom <= activeRectTop || targetRectTop === targetTop) {
              targetTop = targetRectTop;
              if (leftAlignment >= targetRect.left && leftAlignment <= targetRect.left + targetRect.width) {
                distance = 0;
              } else {
                distance = Math.abs(targetRect.left + targetRect.width / 2 - leftAlignment);
              }
            }
            return distance;
          })
        ) {
          this._setFocusAlignment(this._activeElement, false, true);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusLeft = function(theme) {
        var _this = this;
        var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
        if (this._moveFocus(
          getRTL2(theme),
          // eslint-disable-next-line deprecation/deprecation
          function(activeRect, targetRect) {
            var distance = -1;
            var topBottomComparison;
            if (getRTL2(theme)) {
              topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
            } else {
              topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
            }
            if (topBottomComparison && targetRect.right <= activeRect.right && _this.props.direction !== FocusZoneDirection.vertical) {
              distance = activeRect.right - targetRect.right;
            } else if (!shouldWrap) {
              distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
            }
            return distance;
          },
          void 0,
          shouldWrap
        )) {
          this._setFocusAlignment(this._activeElement, true, false);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusRight = function(theme) {
        var _this = this;
        var shouldWrap = this._shouldWrapFocus(this._activeElement, NO_HORIZONTAL_WRAP);
        if (this._moveFocus(
          !getRTL2(theme),
          // eslint-disable-next-line deprecation/deprecation
          function(activeRect, targetRect) {
            var distance = -1;
            var topBottomComparison;
            if (getRTL2(theme)) {
              topBottomComparison = parseFloat(targetRect.bottom.toFixed(3)) > parseFloat(activeRect.top.toFixed(3));
            } else {
              topBottomComparison = parseFloat(targetRect.top.toFixed(3)) < parseFloat(activeRect.bottom.toFixed(3));
            }
            if (topBottomComparison && targetRect.left >= activeRect.left && _this.props.direction !== FocusZoneDirection.vertical) {
              distance = targetRect.left - activeRect.left;
            } else if (!shouldWrap) {
              distance = LARGE_NEGATIVE_DISTANCE_FROM_CENTER;
            }
            return distance;
          },
          void 0,
          shouldWrap
        )) {
          this._setFocusAlignment(this._activeElement, true, false);
          return true;
        }
        return false;
      };
      FocusZone2.prototype._moveFocusPaging = function(isForward, useDefaultWrap) {
        if (useDefaultWrap === void 0) {
          useDefaultWrap = true;
        }
        var element2 = this._activeElement;
        if (!element2 || !this._root.current) {
          return false;
        }
        if (this._isElementInput(element2)) {
          if (!this._shouldInputLoseFocus(element2, isForward)) {
            return false;
          }
        }
        var scrollableParent = findScrollableParent(element2);
        if (!scrollableParent) {
          return false;
        }
        var candidateDistance = -1;
        var candidateElement = void 0;
        var targetTop = -1;
        var targetBottom = -1;
        var pagesize = scrollableParent.clientHeight;
        var activeRect = element2.getBoundingClientRect();
        do {
          element2 = isForward ? getNextElement(this._root.current, element2) : getPreviousElement(this._root.current, element2);
          if (element2) {
            var targetRect = element2.getBoundingClientRect();
            var targetRectTop = Math.floor(targetRect.top);
            var activeRectBottom = Math.floor(activeRect.bottom);
            var targetRectBottom = Math.floor(targetRect.bottom);
            var activeRectTop = Math.floor(activeRect.top);
            var elementDistance = this._getHorizontalDistanceFromCenter(isForward, activeRect, targetRect);
            var isElementPassedPageSizeOnPagingDown = isForward && targetRectTop > activeRectBottom + pagesize;
            var isElementPassedPageSizeOnPagingUp = !isForward && targetRectBottom < activeRectTop - pagesize;
            if (isElementPassedPageSizeOnPagingDown || isElementPassedPageSizeOnPagingUp) {
              break;
            }
            if (elementDistance > -1) {
              if (isForward && targetRectTop > targetTop) {
                targetTop = targetRectTop;
                candidateDistance = elementDistance;
                candidateElement = element2;
              } else if (!isForward && targetRectBottom < targetBottom) {
                targetBottom = targetRectBottom;
                candidateDistance = elementDistance;
                candidateElement = element2;
              } else if (candidateDistance === -1 || elementDistance <= candidateDistance) {
                candidateDistance = elementDistance;
                candidateElement = element2;
              }
            }
          }
        } while (element2);
        var changedFocus = false;
        if (candidateElement && candidateElement !== this._activeElement) {
          changedFocus = true;
          this.focusElement(candidateElement);
          this._setFocusAlignment(candidateElement, false, true);
        } else if (this.props.isCircularNavigation && useDefaultWrap) {
          if (isForward) {
            return this.focusElement(getNextElement(this._root.current, this._root.current.firstElementChild, true));
          }
          return this.focusElement(getPreviousElement(this._root.current, this._root.current.lastElementChild, true, true, true));
        }
        return changedFocus;
      };
      FocusZone2.prototype._setFocusAlignment = function(element2, isHorizontal, isVertical) {
        if (this.props.direction === FocusZoneDirection.bidirectional && (!this._focusAlignment || isHorizontal || isVertical)) {
          var rect = element2.getBoundingClientRect();
          var left = rect.left + rect.width / 2;
          var top_1 = rect.top + rect.height / 2;
          if (!this._focusAlignment) {
            this._focusAlignment = { left, top: top_1 };
          }
          if (isHorizontal) {
            this._focusAlignment.left = left;
          }
          if (isVertical) {
            this._focusAlignment.top = top_1;
          }
        }
      };
      FocusZone2.prototype._isImmediateDescendantOfZone = function(element2) {
        return this._getOwnerZone(element2) === this._root.current;
      };
      FocusZone2.prototype._getOwnerZone = function(element2) {
        var parentElement = getParent(element2, ALLOW_VIRTUAL_ELEMENTS);
        while (parentElement && parentElement !== this._root.current && parentElement !== this._getDocument().body) {
          if (isElementFocusZone(parentElement)) {
            return parentElement;
          }
          parentElement = getParent(parentElement, ALLOW_VIRTUAL_ELEMENTS);
        }
        return parentElement;
      };
      FocusZone2.prototype._updateTabIndexes = function(element2) {
        if (!this._activeElement && this.props.defaultTabbableElement && typeof this.props.defaultTabbableElement === "function") {
          this._activeElement = this.props.defaultTabbableElement(this._root.current);
        }
        if (!element2 && this._root.current) {
          this._defaultFocusElement = null;
          element2 = this._root.current;
          if (this._activeElement && !elementContains(element2, this._activeElement)) {
            this._activeElement = null;
          }
        }
        if (this._activeElement && !isElementTabbable(this._activeElement)) {
          this._activeElement = null;
        }
        var childNodes = element2 && element2.children;
        for (var childIndex = 0; childNodes && childIndex < childNodes.length; childIndex++) {
          var child = childNodes[childIndex];
          if (!isElementFocusZone(child)) {
            if (child.getAttribute && child.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "false") {
              child.setAttribute(TABINDEX, "-1");
            }
            if (isElementTabbable(child)) {
              if (this.props.disabled) {
                child.setAttribute(TABINDEX, "-1");
              } else if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {
                this._defaultFocusElement = child;
                if (child.getAttribute(TABINDEX) !== "0") {
                  child.setAttribute(TABINDEX, "0");
                }
              } else if (child.getAttribute(TABINDEX) !== "-1") {
                child.setAttribute(TABINDEX, "-1");
              }
            } else if (child.tagName === "svg" && child.getAttribute("focusable") !== "false") {
              child.setAttribute("focusable", "false");
            }
          } else if (child.getAttribute(IS_FOCUSABLE_ATTRIBUTE2) === "true") {
            if (!this._isInnerZone && (!this._activeElement && !this._defaultFocusElement || this._activeElement === child)) {
              this._defaultFocusElement = child;
              if (child.getAttribute(TABINDEX) !== "0") {
                child.setAttribute(TABINDEX, "0");
              }
            } else if (child.getAttribute(TABINDEX) !== "-1") {
              child.setAttribute(TABINDEX, "-1");
            }
          }
          this._updateTabIndexes(child);
        }
      };
      FocusZone2.prototype._isContentEditableElement = function(element2) {
        return element2 && element2.getAttribute("contenteditable") === "true";
      };
      FocusZone2.prototype._isElementInput = function(element2) {
        if (element2 && element2.tagName && (element2.tagName.toLowerCase() === "input" || element2.tagName.toLowerCase() === "textarea")) {
          return true;
        }
        return false;
      };
      FocusZone2.prototype._shouldInputLoseFocus = function(element2, isForward) {
        if (!this._processingTabKey && element2 && element2.type && ALLOWED_INPUT_TYPES.indexOf(element2.type.toLowerCase()) > -1) {
          var selectionStart = element2.selectionStart;
          var selectionEnd = element2.selectionEnd;
          var isRangeSelected = selectionStart !== selectionEnd;
          var inputValue = element2.value;
          var isReadonly = element2.readOnly;
          if (isRangeSelected || selectionStart > 0 && !isForward && !isReadonly || selectionStart !== inputValue.length && isForward && !isReadonly || !!this.props.handleTabKey && !(this.props.shouldInputLoseFocusOnArrowKey && this.props.shouldInputLoseFocusOnArrowKey(element2))) {
            return false;
          }
        }
        return true;
      };
      FocusZone2.prototype._shouldWrapFocus = function(element2, noWrapDataAttribute) {
        return this.props.checkForNoWrap ? shouldWrapFocus(element2, noWrapDataAttribute) : true;
      };
      FocusZone2.prototype._portalContainsElement = function(element2) {
        return element2 && !!this._root.current && portalContainsElement(element2, this._root.current);
      };
      FocusZone2.prototype._getDocument = function() {
        return getDocument(this._root.current);
      };
      FocusZone2.defaultProps = {
        isCircularNavigation: false,
        direction: FocusZoneDirection.bidirectional,
        shouldRaiseClicks: true
      };
      return FocusZone2;
    }(React143.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.js
  var React156 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.js
  var React155 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.base.js
  var React154 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.types.js
  var ContextualMenuItemType;
  (function(ContextualMenuItemType2) {
    ContextualMenuItemType2[ContextualMenuItemType2["Normal"] = 0] = "Normal";
    ContextualMenuItemType2[ContextualMenuItemType2["Divider"] = 1] = "Divider";
    ContextualMenuItemType2[ContextualMenuItemType2["Header"] = 2] = "Header";
    ContextualMenuItemType2[ContextualMenuItemType2["Section"] = 3] = "Section";
  })(ContextualMenuItemType || (ContextualMenuItemType = {}));

  // ../node_modules/@fluentui/react/lib/utilities/contextualMenu/contextualMenuUtility.js
  function getIsChecked(item) {
    if (item.canCheck) {
      return !!(item.isChecked || item.checked);
    }
    if (typeof item.isChecked === "boolean") {
      return item.isChecked;
    }
    if (typeof item.checked === "boolean") {
      return item.checked;
    }
    return null;
  }
  function hasSubmenu(item) {
    return !!(item.subMenuProps || item.items);
  }
  function isItemDisabled(item) {
    return !!(item.isDisabled || item.disabled);
  }
  function getMenuItemAriaRole(item) {
    var isChecked = getIsChecked(item);
    var canCheck = isChecked !== null;
    return canCheck ? "menuitemcheckbox" : "menuitem";
  }

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItem.base.js
  var React144 = __toESM(require_react());
  var defaultIconRenderer = function(props) {
    var item = props.item, classNames2 = props.classNames;
    var iconProps = item.iconProps;
    return React144.createElement(Icon, __assign({}, iconProps, { className: classNames2.icon }));
  };
  var renderItemIcon = function(props) {
    var item = props.item, hasIcons = props.hasIcons;
    if (!hasIcons) {
      return null;
    }
    if (item.onRenderIcon) {
      return item.onRenderIcon(props, defaultIconRenderer);
    }
    return defaultIconRenderer(props);
  };
  var renderCheckMarkIcon = function(_a5) {
    var onCheckmarkClick = _a5.onCheckmarkClick, item = _a5.item, classNames2 = _a5.classNames;
    var isItemChecked = getIsChecked(item);
    if (onCheckmarkClick) {
      var onClick = function(e2) {
        return onCheckmarkClick(item, e2);
      };
      return React144.createElement(Icon, {
        iconName: item.canCheck !== false && isItemChecked ? "CheckMark" : "",
        className: classNames2.checkmarkIcon,
        // eslint-disable-next-line react/jsx-no-bind
        onClick
      });
    }
    return null;
  };
  var renderItemName = function(_a5) {
    var item = _a5.item, classNames2 = _a5.classNames;
    if (item.text || item.name) {
      return React144.createElement("span", { className: classNames2.label }, item.text || item.name);
    }
    return null;
  };
  var renderSecondaryText = function(_a5) {
    var item = _a5.item, classNames2 = _a5.classNames;
    if (item.secondaryText) {
      return React144.createElement("span", { className: classNames2.secondaryText }, item.secondaryText);
    }
    return null;
  };
  var renderSubMenuIcon = function(_a5) {
    var item = _a5.item, classNames2 = _a5.classNames, theme = _a5.theme;
    if (hasSubmenu(item)) {
      return React144.createElement(Icon, __assign({ iconName: getRTL2(theme) ? "ChevronLeft" : "ChevronRight" }, item.submenuIconProps, { className: classNames2.subMenuIcon }));
    }
    return null;
  };
  var ContextualMenuItemBase = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuItemBase2, _super);
      function ContextualMenuItemBase2(props) {
        var _this = _super.call(this, props) || this;
        _this.openSubMenu = function() {
          var _a5 = _this.props, item = _a5.item, openSubMenu = _a5.openSubMenu, getSubmenuTarget = _a5.getSubmenuTarget;
          if (getSubmenuTarget) {
            var submenuTarget = getSubmenuTarget();
            if (hasSubmenu(item) && openSubMenu && submenuTarget) {
              openSubMenu(item, submenuTarget);
            }
          }
        };
        _this.dismissSubMenu = function() {
          var _a5 = _this.props, item = _a5.item, dismissSubMenu = _a5.dismissSubMenu;
          if (hasSubmenu(item) && dismissSubMenu) {
            dismissSubMenu();
          }
        };
        _this.dismissMenu = function(dismissAll) {
          var dismissMenu = _this.props.dismissMenu;
          if (dismissMenu) {
            dismissMenu(void 0, dismissAll);
          }
        };
        initializeComponentRef(_this);
        return _this;
      }
      ContextualMenuItemBase2.prototype.render = function() {
        var _a5 = this.props, item = _a5.item, classNames2 = _a5.classNames;
        var renderContent = item.onRenderContent || this._renderLayout;
        return React144.createElement("div", { className: item.split ? classNames2.linkContentMenu : classNames2.linkContent }, renderContent(this.props, {
          renderCheckMarkIcon,
          renderItemIcon,
          renderItemName,
          renderSecondaryText,
          renderSubMenuIcon
        }));
      };
      ContextualMenuItemBase2.prototype._renderLayout = function(props, defaultRenders) {
        return React144.createElement(
          React144.Fragment,
          null,
          defaultRenders.renderCheckMarkIcon(props),
          defaultRenders.renderItemIcon(props),
          defaultRenders.renderItemName(props),
          defaultRenders.renderSecondaryText(props),
          defaultRenders.renderSubMenuIcon(props)
        );
      };
      return ContextualMenuItemBase2;
    }(React144.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.classNames.js
  var getDividerClassNames = memoizeFunction(
    // eslint-disable-next-line deprecation/deprecation
    function(theme) {
      return mergeStyleSets({
        wrapper: {
          display: "inline-flex",
          height: "100%",
          alignItems: "center"
        },
        divider: {
          width: 1,
          height: "100%",
          backgroundColor: theme.palette.neutralTertiaryAlt
        }
      });
    }
  );

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.cnstyles.js
  var CONTEXTUAL_MENU_ITEM_HEIGHT = 36;
  var MediumScreenSelector = getScreenSelector(0, ScreenWidthMaxMedium);
  var getMenuItemStyles = memoizeFunction(function(theme) {
    var _a5, _b, _c, _d, _e;
    var semanticColors = theme.semanticColors, fonts = theme.fonts, palette = theme.palette;
    var ContextualMenuItemBackgroundHoverColor = semanticColors.menuItemBackgroundHovered;
    var ContextualMenuItemTextHoverColor = semanticColors.menuItemTextHovered;
    var ContextualMenuItemBackgroundSelectedColor = semanticColors.menuItemBackgroundPressed;
    var ContextualMenuItemDividerColor = semanticColors.bodyDivider;
    var menuItemStyles2 = {
      item: [
        fonts.medium,
        {
          color: semanticColors.bodyText,
          position: "relative",
          boxSizing: "border-box"
        }
      ],
      divider: {
        display: "block",
        height: "1px",
        backgroundColor: ContextualMenuItemDividerColor,
        position: "relative"
      },
      root: [
        getFocusStyle(theme),
        fonts.medium,
        {
          color: semanticColors.bodyText,
          backgroundColor: "transparent",
          border: "none",
          width: "100%",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
          display: "block",
          cursor: "pointer",
          padding: "0px 8px 0 4px",
          textAlign: "left"
        }
      ],
      rootDisabled: {
        color: semanticColors.disabledBodyText,
        cursor: "default",
        pointerEvents: "none",
        selectors: (_a5 = {}, _a5[HighContrastSelector] = {
          // ensure disabled text looks different than enabled
          color: "GrayText",
          opacity: 1
        }, _a5)
      },
      rootHovered: {
        backgroundColor: ContextualMenuItemBackgroundHoverColor,
        color: ContextualMenuItemTextHoverColor,
        selectors: {
          ".ms-ContextualMenu-icon": {
            color: palette.themeDarkAlt
          },
          ".ms-ContextualMenu-submenuIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootFocused: {
        backgroundColor: palette.white
      },
      rootChecked: {
        selectors: {
          ".ms-ContextualMenu-checkmarkIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootPressed: {
        backgroundColor: ContextualMenuItemBackgroundSelectedColor,
        selectors: {
          ".ms-ContextualMenu-icon": {
            color: palette.themeDark
          },
          ".ms-ContextualMenu-submenuIcon": {
            color: palette.neutralPrimary
          }
        }
      },
      rootExpanded: {
        backgroundColor: ContextualMenuItemBackgroundSelectedColor,
        color: semanticColors.bodyTextChecked,
        selectors: (_b = {
          ".ms-ContextualMenu-submenuIcon": (_c = {}, _c[HighContrastSelector] = {
            // icons inside of anchor tags are not properly inheriting color in high contrast
            color: "inherit"
          }, _c)
        }, _b[HighContrastSelector] = __assign({}, getHighContrastNoAdjustStyle()), _b)
      },
      linkContent: {
        whiteSpace: "nowrap",
        height: "inherit",
        display: "flex",
        alignItems: "center",
        maxWidth: "100%"
      },
      anchorLink: {
        padding: "0px 8px 0 4px",
        textRendering: "auto",
        color: "inherit",
        letterSpacing: "normal",
        wordSpacing: "normal",
        textTransform: "none",
        textIndent: "0px",
        textShadow: "none",
        textDecoration: "none",
        boxSizing: "border-box"
      },
      label: {
        margin: "0 4px",
        verticalAlign: "middle",
        display: "inline-block",
        flexGrow: "1",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        overflow: "hidden"
      },
      secondaryText: {
        color: theme.palette.neutralSecondary,
        paddingLeft: "20px",
        textAlign: "right"
      },
      icon: {
        display: "inline-block",
        minHeight: "1px",
        maxHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
        fontSize: IconFontSizes.medium,
        width: IconFontSizes.medium,
        margin: "0 4px",
        verticalAlign: "middle",
        flexShrink: "0",
        selectors: (_d = {}, _d[MediumScreenSelector] = {
          fontSize: IconFontSizes.large,
          width: IconFontSizes.large
        }, _d)
      },
      iconColor: {
        color: semanticColors.menuIcon
      },
      iconDisabled: {
        color: semanticColors.disabledBodyText
      },
      checkmarkIcon: {
        color: semanticColors.bodySubtext
      },
      subMenuIcon: {
        height: CONTEXTUAL_MENU_ITEM_HEIGHT,
        lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
        color: palette.neutralSecondary,
        textAlign: "center",
        display: "inline-block",
        verticalAlign: "middle",
        flexShrink: "0",
        fontSize: IconFontSizes.small,
        selectors: (_e = {
          ":hover": {
            color: palette.neutralPrimary
          },
          ":active": {
            color: palette.neutralPrimary
          }
        }, _e[MediumScreenSelector] = {
          fontSize: IconFontSizes.medium
          // 16px
        }, _e)
      },
      splitButtonFlexContainer: [
        getFocusStyle(theme),
        {
          display: "flex",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          flexWrap: "nowrap",
          justifyContent: "center",
          alignItems: "flex-start"
        }
      ]
    };
    return concatStyleSets(menuItemStyles2);
  });

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.classNames.js
  var CONTEXTUAL_SPLIT_MENU_MINWIDTH = "28px";
  var MediumScreenSelector2 = getScreenSelector(0, ScreenWidthMaxMedium);
  var getSplitButtonVerticalDividerClassNames = memoizeFunction(
    /* eslint-disable deprecation/deprecation */
    function(theme) {
      var _a5;
      return mergeStyleSets(getDividerClassNames(theme), {
        /* eslint-enable deprecation/deprecation */
        wrapper: {
          position: "absolute",
          right: 28,
          selectors: (_a5 = {}, _a5[MediumScreenSelector2] = {
            right: 32
            // fontSize of the icon increased from 12px to 16px
          }, _a5)
        },
        divider: {
          height: 16,
          width: 1
        }
      });
    }
  );
  var GlobalClassNames5 = {
    item: "ms-ContextualMenu-item",
    divider: "ms-ContextualMenu-divider",
    root: "ms-ContextualMenu-link",
    isChecked: "is-checked",
    isExpanded: "is-expanded",
    isDisabled: "is-disabled",
    linkContent: "ms-ContextualMenu-linkContent",
    linkContentMenu: "ms-ContextualMenu-linkContent",
    icon: "ms-ContextualMenu-icon",
    iconColor: "ms-ContextualMenu-iconColor",
    checkmarkIcon: "ms-ContextualMenu-checkmarkIcon",
    subMenuIcon: "ms-ContextualMenu-submenuIcon",
    label: "ms-ContextualMenu-itemText",
    secondaryText: "ms-ContextualMenu-secondaryText",
    splitMenu: "ms-ContextualMenu-splitMenu",
    screenReaderText: "ms-ContextualMenu-screenReaderText"
  };
  var getItemClassNames = memoizeFunction(function(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className) {
    var _a5, _b, _c, _d;
    var styles2 = getMenuItemStyles(theme);
    var classNames2 = getGlobalClassNames(GlobalClassNames5, theme);
    return mergeStyleSets({
      item: [classNames2.item, styles2.item, itemClassName],
      divider: [classNames2.divider, styles2.divider, dividerClassName],
      root: [
        classNames2.root,
        styles2.root,
        checked && [classNames2.isChecked, styles2.rootChecked],
        isAnchorLink && styles2.anchorLink,
        expanded && [classNames2.isExpanded, styles2.rootExpanded],
        disabled && [classNames2.isDisabled, styles2.rootDisabled],
        !disabled && !expanded && [
          {
            selectors: (_a5 = {
              ":hover": styles2.rootHovered,
              ":active": styles2.rootPressed
            }, _a5[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles2.rootFocused, _a5[".".concat(IsFocusVisibleClassName, " &:hover")] = { background: "inherit;" }, _a5)
          }
        ],
        className
      ],
      splitPrimary: [
        styles2.root,
        {
          width: "calc(100% - ".concat(CONTEXTUAL_SPLIT_MENU_MINWIDTH, ")")
        },
        checked && ["is-checked", styles2.rootChecked],
        (disabled || primaryDisabled) && ["is-disabled", styles2.rootDisabled],
        !(disabled || primaryDisabled) && !checked && [
          {
            selectors: (_b = {
              ":hover": styles2.rootHovered
            }, // when hovering over the splitPrimary also affect the splitMenu
            _b[":hover ~ .".concat(classNames2.splitMenu)] = styles2.rootHovered, _b[":active"] = styles2.rootPressed, _b[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles2.rootFocused, _b[".".concat(IsFocusVisibleClassName, " &:hover")] = { background: "inherit;" }, _b)
          }
        ]
      ],
      splitMenu: [
        classNames2.splitMenu,
        styles2.root,
        {
          flexBasis: "0",
          padding: "0 8px",
          minWidth: CONTEXTUAL_SPLIT_MENU_MINWIDTH
        },
        expanded && ["is-expanded", styles2.rootExpanded],
        disabled && ["is-disabled", styles2.rootDisabled],
        !disabled && !expanded && [
          {
            selectors: (_c = {
              ":hover": styles2.rootHovered,
              ":active": styles2.rootPressed
            }, _c[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles2.rootFocused, _c[".".concat(IsFocusVisibleClassName, " &:hover")] = { background: "inherit;" }, _c)
          }
        ]
      ],
      anchorLink: styles2.anchorLink,
      linkContent: [classNames2.linkContent, styles2.linkContent],
      linkContentMenu: [
        classNames2.linkContentMenu,
        styles2.linkContent,
        {
          justifyContent: "center"
        }
      ],
      icon: [
        classNames2.icon,
        knownIcon && styles2.iconColor,
        styles2.icon,
        iconClassName,
        disabled && [classNames2.isDisabled, styles2.iconDisabled]
      ],
      iconColor: styles2.iconColor,
      checkmarkIcon: [classNames2.checkmarkIcon, knownIcon && styles2.checkmarkIcon, styles2.icon, iconClassName],
      subMenuIcon: [
        classNames2.subMenuIcon,
        styles2.subMenuIcon,
        subMenuClassName,
        expanded && { color: theme.palette.neutralPrimary },
        disabled && [styles2.iconDisabled]
      ],
      label: [classNames2.label, styles2.label],
      secondaryText: [classNames2.secondaryText, styles2.secondaryText],
      splitContainer: [
        styles2.splitButtonFlexContainer,
        !disabled && !checked && [
          {
            selectors: (_d = {}, _d[".".concat(IsFocusVisibleClassName, " &:focus, .").concat(IsFocusVisibleClassName, " &:focus:hover")] = styles2.rootFocused, _d)
          }
        ]
      ],
      screenReaderText: [
        classNames2.screenReaderText,
        styles2.screenReaderText,
        hiddenContentStyle,
        { visibility: "hidden" }
      ]
    });
  });
  var getItemStyles = function(props) {
    var theme = props.theme, disabled = props.disabled, expanded = props.expanded, checked = props.checked, isAnchorLink = props.isAnchorLink, knownIcon = props.knownIcon, itemClassName = props.itemClassName, dividerClassName = props.dividerClassName, iconClassName = props.iconClassName, subMenuClassName = props.subMenuClassName, primaryDisabled = props.primaryDisabled, className = props.className;
    return getItemClassNames(theme, disabled, expanded, checked, isAnchorLink, knownIcon, itemClassName, dividerClassName, iconClassName, subMenuClassName, primaryDisabled, className);
  };

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItem.js
  var ContextualMenuItem = styled(ContextualMenuItemBase, getItemStyles, void 0, { scope: "ContextualMenuItem" });

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.js
  var React147 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuItemWrapper.js
  var React145 = __toESM(require_react());
  var ContextualMenuItemWrapper = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuItemWrapper2, _super);
      function ContextualMenuItemWrapper2(props) {
        var _this = _super.call(this, props) || this;
        _this._onItemMouseEnter = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseEnter = _a5.onItemMouseEnter;
          if (onItemMouseEnter) {
            onItemMouseEnter(item, ev, ev.currentTarget);
          }
        };
        _this._onItemClick = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemClickBase = _a5.onItemClickBase;
          if (onItemClickBase) {
            onItemClickBase(item, ev, ev.currentTarget);
          }
        };
        _this._onItemMouseLeave = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseLeave = _a5.onItemMouseLeave;
          if (onItemMouseLeave) {
            onItemMouseLeave(item, ev);
          }
        };
        _this._onItemKeyDown = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemKeyDown = _a5.onItemKeyDown;
          if (onItemKeyDown) {
            onItemKeyDown(item, ev);
          }
        };
        _this._onItemMouseMove = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseMove = _a5.onItemMouseMove;
          if (onItemMouseMove) {
            onItemMouseMove(item, ev, ev.currentTarget);
          }
        };
        _this._getSubmenuTarget = function() {
          return void 0;
        };
        initializeComponentRef(_this);
        return _this;
      }
      ContextualMenuItemWrapper2.prototype.shouldComponentUpdate = function(newProps) {
        return !shallowCompare(newProps, this.props);
      };
      return ContextualMenuItemWrapper2;
    }(React145.Component)
  );

  // ../node_modules/@fluentui/react/lib/utilities/keytips/KeytipConstants.js
  var KTP_PREFIX = "ktp";
  var KTP_SEPARATOR = "-";
  var KTP_FULL_PREFIX = KTP_PREFIX + KTP_SEPARATOR;
  var DATAKTP_TARGET = "data-ktp-target";
  var DATAKTP_EXECUTE_TARGET = "data-ktp-execute-target";
  var KTP_LAYER_ID = "ktp-layer-id";
  var KeytipEvents;
  (function(KeytipEvents2) {
    KeytipEvents2.KEYTIP_ADDED = "keytipAdded";
    KeytipEvents2.KEYTIP_REMOVED = "keytipRemoved";
    KeytipEvents2.KEYTIP_UPDATED = "keytipUpdated";
    KeytipEvents2.PERSISTED_KEYTIP_ADDED = "persistedKeytipAdded";
    KeytipEvents2.PERSISTED_KEYTIP_REMOVED = "persistedKeytipRemoved";
    KeytipEvents2.PERSISTED_KEYTIP_EXECUTE = "persistedKeytipExecute";
    KeytipEvents2.ENTER_KEYTIP_MODE = "enterKeytipMode";
    KeytipEvents2.EXIT_KEYTIP_MODE = "exitKeytipMode";
  })(KeytipEvents || (KeytipEvents = {}));

  // ../node_modules/@fluentui/react/lib/utilities/keytips/KeytipManager.js
  var KeytipManager = (
    /** @class */
    function() {
      function KeytipManager2() {
        this.keytips = {};
        this.persistedKeytips = {};
        this.sequenceMapping = {};
        this.inKeytipMode = false;
        this.shouldEnterKeytipMode = true;
        this.delayUpdatingKeytipChange = false;
      }
      KeytipManager2.getInstance = function() {
        return this._instance;
      };
      KeytipManager2.prototype.init = function(delayUpdatingKeytipChange) {
        this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;
      };
      KeytipManager2.prototype.register = function(keytipProps, persisted) {
        if (persisted === void 0) {
          persisted = false;
        }
        var props = keytipProps;
        if (!persisted) {
          props = this.addParentOverflow(keytipProps);
          this.sequenceMapping[props.keySequences.toString()] = props;
        }
        var uniqueKeytip = this._getUniqueKtp(props);
        persisted ? this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip : this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip;
        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
          var event_1 = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;
          EventGroup.raise(this, event_1, {
            keytip: props,
            uniqueID: uniqueKeytip.uniqueID
          });
        }
        return uniqueKeytip.uniqueID;
      };
      KeytipManager2.prototype.update = function(keytipProps, uniqueID) {
        var newKeytipProps = this.addParentOverflow(keytipProps);
        var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);
        var oldKeyTip = this.keytips[uniqueID];
        if (oldKeyTip) {
          uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;
          this.keytips[uniqueID] = uniqueKeytip;
          delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];
          this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;
          if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
            EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {
              keytip: uniqueKeytip.keytip,
              uniqueID: uniqueKeytip.uniqueID
            });
          }
        }
      };
      KeytipManager2.prototype.unregister = function(keytipToRemove, uniqueID, persisted) {
        if (persisted === void 0) {
          persisted = false;
        }
        persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];
        !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];
        var event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;
        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {
          EventGroup.raise(this, event, {
            keytip: keytipToRemove,
            uniqueID
          });
        }
      };
      KeytipManager2.prototype.enterKeytipMode = function() {
        EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);
      };
      KeytipManager2.prototype.exitKeytipMode = function() {
        EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);
      };
      KeytipManager2.prototype.getKeytips = function() {
        var _this = this;
        return Object.keys(this.keytips).map(function(key) {
          return _this.keytips[key].keytip;
        });
      };
      KeytipManager2.prototype.addParentOverflow = function(keytipProps) {
        var fullSequence = __spreadArray([], keytipProps.keySequences, true);
        fullSequence.pop();
        if (fullSequence.length !== 0) {
          var parentKeytip = this.sequenceMapping[fullSequence.toString()];
          if (parentKeytip && parentKeytip.overflowSetSequence) {
            return __assign(__assign({}, keytipProps), { overflowSetSequence: parentKeytip.overflowSetSequence });
          }
        }
        return keytipProps;
      };
      KeytipManager2.prototype.menuExecute = function(overflowButtonSequences, keytipSequences) {
        EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {
          overflowButtonSequences,
          keytipSequences
        });
      };
      KeytipManager2.prototype._getUniqueKtp = function(keytipProps, uniqueID) {
        if (uniqueID === void 0) {
          uniqueID = getId();
        }
        return { keytip: __assign({}, keytipProps), uniqueID };
      };
      KeytipManager2._instance = new KeytipManager2();
      return KeytipManager2;
    }()
  );

  // ../node_modules/@fluentui/react/lib/utilities/keytips/KeytipUtils.js
  function sequencesToID(keySequences) {
    return keySequences.reduce(function(prevValue, keySequence) {
      return prevValue + KTP_SEPARATOR + keySequence.split("").join(KTP_SEPARATOR);
    }, KTP_PREFIX);
  }
  function mergeOverflows(keySequences, overflowKeySequences) {
    var overflowSequenceLen = overflowKeySequences.length;
    var overflowSequence = __spreadArray([], overflowKeySequences, true).pop();
    var newKeySequences = __spreadArray([], keySequences, true);
    return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);
  }
  function getAriaDescribedBy(keySequences) {
    var describedby = " " + KTP_LAYER_ID;
    if (!keySequences.length) {
      return describedby;
    }
    return describedby + " " + sequencesToID(keySequences);
  }

  // ../node_modules/@fluentui/react/lib/components/KeytipData/useKeytipData.js
  var React146 = __toESM(require_react());
  function useKeytipData(options) {
    var uniqueId = React146.useRef();
    var keytipProps = options.keytipProps ? __assign({ disabled: options.disabled }, options.keytipProps) : void 0;
    var keytipManager = useConst(KeytipManager.getInstance());
    var prevOptions = usePrevious2(options);
    useIsomorphicLayoutEffect3(function() {
      if (uniqueId.current && keytipProps && ((prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.keytipProps) !== options.keytipProps || (prevOptions === null || prevOptions === void 0 ? void 0 : prevOptions.disabled) !== options.disabled)) {
        keytipManager.update(keytipProps, uniqueId.current);
      }
    });
    useIsomorphicLayoutEffect3(function() {
      if (keytipProps) {
        uniqueId.current = keytipManager.register(keytipProps);
      }
      return function() {
        keytipProps && keytipManager.unregister(keytipProps, uniqueId.current);
      };
    }, []);
    var nativeKeytipProps = {
      ariaDescribedBy: void 0,
      keytipId: void 0
    };
    if (keytipProps) {
      nativeKeytipProps = getKeytipData(keytipManager, keytipProps, options.ariaDescribedBy);
    }
    return nativeKeytipProps;
  }
  function getKeytipData(keytipManager, keytipProps, describedByPrepend) {
    var newKeytipProps = keytipManager.addParentOverflow(keytipProps);
    var ariaDescribedBy = mergeAriaAttributeValues(describedByPrepend, getAriaDescribedBy(newKeytipProps.keySequences));
    var keySequences = __spreadArray([], newKeytipProps.keySequences, true);
    if (newKeytipProps.overflowSetSequence) {
      keySequences = mergeOverflows(keySequences, newKeytipProps.overflowSetSequence);
    }
    var keytipId = sequencesToID(keySequences);
    return {
      ariaDescribedBy,
      keytipId
    };
  }

  // ../node_modules/@fluentui/react/lib/components/KeytipData/KeytipData.js
  var KeytipData = function(props) {
    var _a5;
    var children = props.children, keytipDataProps = __rest(props, ["children"]);
    var _b = useKeytipData(keytipDataProps), keytipId = _b.keytipId, ariaDescribedBy = _b.ariaDescribedBy;
    return children((_a5 = {}, _a5[DATAKTP_TARGET] = keytipId, _a5[DATAKTP_EXECUTE_TARGET] = keytipId, _a5["aria-describedby"] = ariaDescribedBy, _a5));
  };

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuAnchor.js
  var ContextualMenuAnchor = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuAnchor2, _super);
      function ContextualMenuAnchor2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._anchor = React147.createRef();
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._getSubmenuTarget = function() {
          return _this._anchor.current ? _this._anchor.current : void 0;
        };
        _this._onItemClick = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemClick = _a5.onItemClick;
          if (onItemClick) {
            onItemClick(item, ev);
          }
        };
        _this._renderAriaDescription = function(ariaDescription, className) {
          return ariaDescription ? React147.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
        };
        return _this;
      }
      ContextualMenuAnchor2.prototype.render = function() {
        var _this = this;
        var _a5 = this.props, item = _a5.item, classNames2 = _a5.classNames, index2 = _a5.index, focusableElementIndex = _a5.focusableElementIndex, totalItemCount = _a5.totalItemCount, hasCheckmarks = _a5.hasCheckmarks, hasIcons = _a5.hasIcons, _b = _a5.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, expandedMenuItemKey = _a5.expandedMenuItemKey, onItemClick = _a5.onItemClick, openSubMenu = _a5.openSubMenu, dismissSubMenu = _a5.dismissSubMenu, dismissMenu = _a5.dismissMenu;
        var anchorRel = item.rel;
        if (item.target && item.target.toLowerCase() === "_blank") {
          anchorRel = anchorRel ? anchorRel : "nofollow noopener noreferrer";
        }
        var itemHasSubmenu = hasSubmenu(item);
        var nativeProps = getNativeProps2(item, anchorProperties2);
        var disabled = isItemDisabled(item);
        var itemProps = item.itemProps, ariaDescription = item.ariaDescription;
        var keytipProps = item.keytipProps;
        if (keytipProps && itemHasSubmenu) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        if (ariaDescription) {
          this._ariaDescriptionId = getId();
        }
        var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : void 0, nativeProps["aria-describedby"]);
        var additionalItemProperties = {
          "aria-describedby": ariaDescribedByIds
        };
        return React147.createElement(
          "div",
          null,
          React147.createElement(KeytipData, { keytipProps: item.keytipProps, ariaDescribedBy: ariaDescribedByIds, disabled }, function(keytipAttributes) {
            return React147.createElement(
              "a",
              __assign({}, additionalItemProperties, nativeProps, keytipAttributes, {
                ref: _this._anchor,
                href: item.href,
                target: item.target,
                rel: anchorRel,
                className: classNames2.root,
                role: "menuitem",
                "aria-haspopup": itemHasSubmenu || void 0,
                "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0,
                "aria-posinset": focusableElementIndex + 1,
                "aria-setsize": totalItemCount,
                "aria-disabled": isItemDisabled(item),
                // eslint-disable-next-line deprecation/deprecation
                style: item.style,
                onClick: _this._onItemClick,
                onMouseEnter: _this._onItemMouseEnter,
                onMouseLeave: _this._onItemMouseLeave,
                onMouseMove: _this._onItemMouseMove,
                onKeyDown: itemHasSubmenu ? _this._onItemKeyDown : void 0
              }),
              React147.createElement(ChildrenRenderer, __assign({ componentRef: item.componentRef, item, classNames: classNames2, index: index2, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)),
              _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
            );
          })
        );
      };
      return ContextualMenuAnchor2;
    }(ContextualMenuItemWrapper)
  );

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuButton.js
  var React148 = __toESM(require_react());
  var ContextualMenuButton = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuButton2, _super);
      function ContextualMenuButton2() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._btn = React148.createRef();
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._renderAriaDescription = function(ariaDescription, className) {
          return ariaDescription ? React148.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
        };
        _this._getSubmenuTarget = function() {
          return _this._btn.current ? _this._btn.current : void 0;
        };
        return _this;
      }
      ContextualMenuButton2.prototype.render = function() {
        var _this = this;
        var _a5 = this.props, item = _a5.item, classNames2 = _a5.classNames, index2 = _a5.index, focusableElementIndex = _a5.focusableElementIndex, totalItemCount = _a5.totalItemCount, hasCheckmarks = _a5.hasCheckmarks, hasIcons = _a5.hasIcons, _b = _a5.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, expandedMenuItemKey = _a5.expandedMenuItemKey, onItemMouseDown2 = _a5.onItemMouseDown, onItemClick = _a5.onItemClick, openSubMenu = _a5.openSubMenu, dismissSubMenu = _a5.dismissSubMenu, dismissMenu = _a5.dismissMenu;
        var isChecked = getIsChecked(item);
        var canCheck = isChecked !== null;
        var defaultRole = getMenuItemAriaRole(item);
        var itemHasSubmenu = hasSubmenu(item);
        var itemProps = item.itemProps, ariaLabel = item.ariaLabel, ariaDescription = item.ariaDescription;
        var buttonNativeProperties = getNativeProps2(item, buttonProperties2);
        delete buttonNativeProperties.disabled;
        var itemRole = item.role || defaultRole;
        if (ariaDescription) {
          this._ariaDescriptionId = getId();
        }
        var ariaDescribedByIds = mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? this._ariaDescriptionId : void 0, buttonNativeProperties["aria-describedby"]);
        var itemButtonProperties = {
          className: classNames2.root,
          onClick: this._onItemClick,
          onKeyDown: itemHasSubmenu ? this._onItemKeyDown : void 0,
          onMouseEnter: this._onItemMouseEnter,
          onMouseLeave: this._onItemMouseLeave,
          onMouseDown: function(ev) {
            return onItemMouseDown2 ? onItemMouseDown2(item, ev) : void 0;
          },
          onMouseMove: this._onItemMouseMove,
          href: item.href,
          title: item.title,
          "aria-label": ariaLabel,
          "aria-describedby": ariaDescribedByIds,
          "aria-haspopup": itemHasSubmenu || void 0,
          "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0,
          "aria-posinset": focusableElementIndex + 1,
          "aria-setsize": totalItemCount,
          "aria-disabled": isItemDisabled(item),
          "aria-checked": (itemRole === "menuitemcheckbox" || itemRole === "menuitemradio") && canCheck ? !!isChecked : void 0,
          "aria-selected": itemRole === "menuitem" && canCheck ? !!isChecked : void 0,
          role: itemRole,
          // eslint-disable-next-line deprecation/deprecation
          style: item.style
        };
        var keytipProps = item.keytipProps;
        if (keytipProps && itemHasSubmenu) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        return React148.createElement(KeytipData, { keytipProps, ariaDescribedBy: ariaDescribedByIds, disabled: isItemDisabled(item) }, function(keytipAttributes) {
          return React148.createElement(
            "button",
            __assign({ ref: _this._btn }, buttonNativeProperties, itemButtonProperties, keytipAttributes),
            React148.createElement(ChildrenRenderer, __assign({ componentRef: item.componentRef, item, classNames: classNames2, index: index2, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: _this._getSubmenuTarget }, itemProps)),
            _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
          );
        });
      };
      return ContextualMenuButton2;
    }(ContextualMenuItemWrapper)
  );

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.js
  var React150 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.styles.js
  var getStyles6 = function(props) {
    var theme = props.theme, getClassNames10 = props.getClassNames, className = props.className;
    if (!theme) {
      throw new Error("Theme is undefined or null.");
    }
    if (getClassNames10) {
      var names = getClassNames10(theme);
      return {
        wrapper: [names.wrapper],
        divider: [names.divider]
      };
    }
    return {
      wrapper: [
        {
          display: "inline-flex",
          height: "100%",
          alignItems: "center"
        },
        className
      ],
      divider: [
        {
          width: 1,
          height: "100%",
          backgroundColor: theme.palette.neutralTertiaryAlt
        }
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.base.js
  var React149 = __toESM(require_react());
  var getClassNames6 = classNamesFunction();
  var VerticalDividerBase = React149.forwardRef(function(props, ref) {
    var styles2 = props.styles, theme = props.theme, deprecatedGetClassNames = props.getClassNames, className = props.className;
    var classNames2 = getClassNames6(styles2, { theme, getClassNames: deprecatedGetClassNames, className });
    return React149.createElement(
      "span",
      { className: classNames2.wrapper, ref },
      React149.createElement("span", { className: classNames2.divider })
    );
  });
  VerticalDividerBase.displayName = "VerticalDividerBase";

  // ../node_modules/@fluentui/react/lib/components/Divider/VerticalDivider.js
  var VerticalDivider = styled(VerticalDividerBase, getStyles6, void 0, {
    scope: "VerticalDivider"
  });

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenuItemWrapper/ContextualMenuSplitButton.js
  var TouchIdleDelay = 500;
  var ContextualMenuSplitButton = (
    /** @class */
    function(_super) {
      __extends(ContextualMenuSplitButton2, _super);
      function ContextualMenuSplitButton2(props) {
        var _this = _super.call(this, props) || this;
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._onItemKeyDown = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemKeyDown = _a5.onItemKeyDown;
          if (ev.which === KeyCodes.enter) {
            _this._executeItemClick(ev);
            ev.preventDefault();
            ev.stopPropagation();
          } else if (onItemKeyDown) {
            onItemKeyDown(item, ev);
          }
        };
        _this._getSubmenuTarget = function() {
          return _this._splitButton;
        };
        _this._renderAriaDescription = function(ariaDescription, className) {
          return ariaDescription ? React150.createElement("span", { id: _this._ariaDescriptionId, className }, ariaDescription) : null;
        };
        _this._onItemMouseEnterPrimary = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseEnter = _a5.onItemMouseEnter;
          if (onItemMouseEnter) {
            onItemMouseEnter(__assign(__assign({}, item), { subMenuProps: void 0, items: void 0 }), ev, _this._splitButton);
          }
        };
        _this._onItemMouseEnterIcon = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseEnter = _a5.onItemMouseEnter;
          if (onItemMouseEnter) {
            onItemMouseEnter(item, ev, _this._splitButton);
          }
        };
        _this._onItemMouseMovePrimary = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseMove = _a5.onItemMouseMove;
          if (onItemMouseMove) {
            onItemMouseMove(__assign(__assign({}, item), { subMenuProps: void 0, items: void 0 }), ev, _this._splitButton);
          }
        };
        _this._onItemMouseMoveIcon = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemMouseMove = _a5.onItemMouseMove;
          if (onItemMouseMove) {
            onItemMouseMove(item, ev, _this._splitButton);
          }
        };
        _this._onIconItemClick = function(ev) {
          var _a5 = _this.props, item = _a5.item, onItemClickBase = _a5.onItemClickBase;
          if (onItemClickBase) {
            onItemClickBase(item, ev, _this._splitButton ? _this._splitButton : ev.currentTarget);
          }
        };
        _this._executeItemClick = function(ev) {
          var _a5 = _this.props, item = _a5.item, executeItemClick = _a5.executeItemClick, onItemClick = _a5.onItemClick;
          if (item.disabled || item.isDisabled) {
            return;
          }
          if (_this._processingTouch && !item.canCheck && onItemClick) {
            return onItemClick(item, ev);
          }
          if (executeItemClick) {
            executeItemClick(item, ev);
          }
        };
        _this._onTouchStart = function(ev) {
          if (_this._splitButton && !("onpointerdown" in _this._splitButton)) {
            _this._handleTouchAndPointerEvent(ev);
          }
        };
        _this._onPointerDown = function(ev) {
          if (ev.pointerType === "touch") {
            _this._handleTouchAndPointerEvent(ev);
            ev.preventDefault();
            ev.stopImmediatePropagation();
          }
        };
        _this._async = new Async(_this);
        _this._events = new EventGroup(_this);
        _this._dismissLabelId = getId();
        return _this;
      }
      ContextualMenuSplitButton2.prototype.componentDidMount = function() {
        if (this._splitButton && "onpointerdown" in this._splitButton) {
          this._events.on(this._splitButton, "pointerdown", this._onPointerDown, true);
        }
      };
      ContextualMenuSplitButton2.prototype.componentWillUnmount = function() {
        this._async.dispose();
        this._events.dispose();
      };
      ContextualMenuSplitButton2.prototype.render = function() {
        var _this = this;
        var _a5;
        var _b = this.props, item = _b.item, classNames2 = _b.classNames, index2 = _b.index, focusableElementIndex = _b.focusableElementIndex, totalItemCount = _b.totalItemCount, hasCheckmarks = _b.hasCheckmarks, hasIcons = _b.hasIcons, onItemMouseLeave = _b.onItemMouseLeave, expandedMenuItemKey = _b.expandedMenuItemKey;
        var itemHasSubmenu = hasSubmenu(item);
        var keytipProps = item.keytipProps;
        if (keytipProps) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        var ariaDescription = item.ariaDescription;
        if (ariaDescription) {
          this._ariaDescriptionId = getId();
        }
        var ariaChecked = (_a5 = getIsChecked(item)) !== null && _a5 !== void 0 ? _a5 : void 0;
        return React150.createElement(KeytipData, { keytipProps, disabled: isItemDisabled(item) }, function(keytipAttributes) {
          return React150.createElement(
            "div",
            { "data-ktp-target": keytipAttributes["data-ktp-target"], ref: function(splitButton) {
              return _this._splitButton = splitButton;
            }, role: getMenuItemAriaRole(item), "aria-label": item.ariaLabel, className: classNames2.splitContainer, "aria-disabled": isItemDisabled(item), "aria-expanded": itemHasSubmenu ? item.key === expandedMenuItemKey : void 0, "aria-haspopup": true, "aria-describedby": mergeAriaAttributeValues(item.ariaDescribedBy, ariaDescription ? _this._ariaDescriptionId : void 0, keytipAttributes["aria-describedby"]), "aria-checked": ariaChecked, "aria-posinset": focusableElementIndex + 1, "aria-setsize": totalItemCount, onMouseEnter: _this._onItemMouseEnterPrimary, onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(_this, __assign(__assign({}, item), { subMenuProps: null, items: null })) : void 0, onMouseMove: _this._onItemMouseMovePrimary, onKeyDown: _this._onItemKeyDown, onClick: _this._executeItemClick, onTouchStart: _this._onTouchStart, tabIndex: 0, "data-is-focusable": true, "aria-roledescription": item["aria-roledescription"] },
            _this._renderSplitPrimaryButton(item, classNames2, index2, hasCheckmarks, hasIcons),
            _this._renderSplitDivider(item),
            _this._renderSplitIconButton(item, classNames2, index2, keytipAttributes),
            _this._renderAriaDescription(ariaDescription, classNames2.screenReaderText)
          );
        });
      };
      ContextualMenuSplitButton2.prototype._renderSplitPrimaryButton = function(item, classNames2, index2, hasCheckmarks, hasIcons) {
        var _a5 = this.props, _b = _a5.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, onItemClick = _a5.onItemClick;
        var itemProps = {
          key: item.key,
          disabled: isItemDisabled(item) || item.primaryDisabled,
          /* eslint-disable deprecation/deprecation */
          name: item.name,
          text: item.text || item.name,
          secondaryText: item.secondaryText,
          /* eslint-enable deprecation/deprecation */
          className: classNames2.splitPrimary,
          canCheck: item.canCheck,
          isChecked: item.isChecked,
          checked: item.checked,
          iconProps: item.iconProps,
          id: this._dismissLabelId,
          onRenderIcon: item.onRenderIcon,
          data: item.data,
          "data-is-focusable": false
        };
        var itemComponentProps = item.itemProps;
        return React150.createElement(
          "button",
          __assign({}, getNativeProps2(itemProps, buttonProperties2)),
          React150.createElement(ChildrenRenderer, __assign({ "data-is-focusable": false, item: itemProps, classNames: classNames2, index: index2, onCheckmarkClick: hasCheckmarks && onItemClick ? onItemClick : void 0, hasIcons }, itemComponentProps))
        );
      };
      ContextualMenuSplitButton2.prototype._renderSplitDivider = function(item) {
        var getDividerClassNames2 = item.getSplitButtonVerticalDividerClassNames || getSplitButtonVerticalDividerClassNames;
        return React150.createElement(VerticalDivider, { getClassNames: getDividerClassNames2 });
      };
      ContextualMenuSplitButton2.prototype._renderSplitIconButton = function(item, classNames2, index2, keytipAttributes) {
        var _a5 = this.props, _b = _a5.contextualMenuItemAs, ChildrenRenderer = _b === void 0 ? ContextualMenuItem : _b, onItemMouseLeave = _a5.onItemMouseLeave, onItemMouseDown2 = _a5.onItemMouseDown, openSubMenu = _a5.openSubMenu, dismissSubMenu = _a5.dismissSubMenu, dismissMenu = _a5.dismissMenu;
        var itemProps = {
          onClick: this._onIconItemClick,
          disabled: isItemDisabled(item),
          className: classNames2.splitMenu,
          subMenuProps: item.subMenuProps,
          submenuIconProps: item.submenuIconProps,
          split: true,
          key: item.key,
          "aria-labelledby": this._dismissLabelId
        };
        var buttonProps = __assign(__assign({}, getNativeProps2(itemProps, buttonProperties2)), {
          onMouseEnter: this._onItemMouseEnterIcon,
          onMouseLeave: onItemMouseLeave ? onItemMouseLeave.bind(this, item) : void 0,
          onMouseDown: function(ev) {
            return onItemMouseDown2 ? onItemMouseDown2(item, ev) : void 0;
          },
          onMouseMove: this._onItemMouseMoveIcon,
          "data-is-focusable": false,
          "data-ktp-execute-target": keytipAttributes["data-ktp-execute-target"],
          "aria-haspopup": true
        });
        var itemComponentProps = item.itemProps;
        return React150.createElement(
          "button",
          __assign({}, buttonProps),
          React150.createElement(ChildrenRenderer, __assign({ componentRef: item.componentRef, item: itemProps, classNames: classNames2, index: index2, hasIcons: false, openSubMenu, dismissSubMenu, dismissMenu, getSubmenuTarget: this._getSubmenuTarget }, itemComponentProps))
        );
      };
      ContextualMenuSplitButton2.prototype._handleTouchAndPointerEvent = function(ev) {
        var _this = this;
        var onTap = this.props.onTap;
        if (onTap) {
          onTap(ev);
        }
        if (this._lastTouchTimeoutId) {
          this._async.clearTimeout(this._lastTouchTimeoutId);
          this._lastTouchTimeoutId = void 0;
        }
        this._processingTouch = true;
        this._lastTouchTimeoutId = this._async.setTimeout(function() {
          _this._processingTouch = false;
          _this._lastTouchTimeoutId = void 0;
        }, TouchIdleDelay);
      };
      return ContextualMenuSplitButton2;
    }(ContextualMenuItemWrapper)
  );

  // ../node_modules/@fluentui/react/lib/utilities/hooks/useResponsiveMode.js
  var React152 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/utilities/decorators/withResponsiveMode.js
  var React151 = __toESM(require_react());
  var ResponsiveMode;
  (function(ResponsiveMode2) {
    ResponsiveMode2[ResponsiveMode2["small"] = 0] = "small";
    ResponsiveMode2[ResponsiveMode2["medium"] = 1] = "medium";
    ResponsiveMode2[ResponsiveMode2["large"] = 2] = "large";
    ResponsiveMode2[ResponsiveMode2["xLarge"] = 3] = "xLarge";
    ResponsiveMode2[ResponsiveMode2["xxLarge"] = 4] = "xxLarge";
    ResponsiveMode2[ResponsiveMode2["xxxLarge"] = 5] = "xxxLarge";
    ResponsiveMode2[ResponsiveMode2["unknown"] = 999] = "unknown";
  })(ResponsiveMode || (ResponsiveMode = {}));
  var RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];
  var _defaultMode;
  var _lastMode;
  function getInitialResponsiveMode() {
    var _a5;
    return (_a5 = _defaultMode !== null && _defaultMode !== void 0 ? _defaultMode : _lastMode) !== null && _a5 !== void 0 ? _a5 : ResponsiveMode.large;
  }
  function getWidthOfCurrentWindow(currentWindow) {
    try {
      return currentWindow.document.documentElement.clientWidth;
    } catch (e2) {
      return currentWindow.innerWidth;
    }
  }
  function getResponsiveMode(currentWindow) {
    var responsiveMode = ResponsiveMode.small;
    if (currentWindow) {
      try {
        while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {
          responsiveMode++;
        }
      } catch (e2) {
        responsiveMode = getInitialResponsiveMode();
      }
      _lastMode = responsiveMode;
    } else {
      if (_defaultMode !== void 0) {
        responsiveMode = _defaultMode;
      } else {
        throw new Error("Content was rendered in a server environment without providing a default responsive mode. Call setResponsiveMode to define what the responsive mode is.");
      }
    }
    return responsiveMode;
  }

  // ../node_modules/@fluentui/react/lib/utilities/hooks/useResponsiveMode.js
  var useResponsiveMode = function(elementRef, overrideResponsiveMode) {
    var _a5 = React152.useState(getInitialResponsiveMode()), lastResponsiveMode = _a5[0], setLastResponsiveMode = _a5[1];
    var onResize = React152.useCallback(function() {
      var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));
      if (lastResponsiveMode !== newResponsiveMode) {
        setLastResponsiveMode(newResponsiveMode);
      }
    }, [elementRef, lastResponsiveMode]);
    var win2 = useWindow();
    useOnEvent(win2, "resize", onResize);
    React152.useEffect(function() {
      if (overrideResponsiveMode === void 0) {
        onResize();
      }
    }, [overrideResponsiveMode]);
    return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;
  };

  // ../node_modules/@fluentui/react/lib/utilities/MenuContext/MenuContext.js
  var React153 = __toESM(require_react());
  var MenuContext = React153.createContext({});

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.base.js
  var getClassNames7 = classNamesFunction();
  var getContextualMenuItemClassNames = classNamesFunction();
  var DEFAULT_PROPS2 = {
    items: [],
    shouldFocusOnMount: true,
    gapSpace: 0,
    directionalHint: DirectionalHint.bottomAutoEdge,
    beakWidth: 16
  };
  function getItemCount(items) {
    var totalItemCount = 0;
    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
      var item = items_1[_i];
      if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {
        var itemCount = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
        totalItemCount += itemCount;
      }
    }
    return totalItemCount;
  }
  function getSubmenuItems(item, options) {
    var target = options === null || options === void 0 ? void 0 : options.target;
    var items = item.subMenuProps ? item.subMenuProps.items : item.items;
    if (items) {
      var overrideItems = [];
      for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
        var subItem = items_2[_i];
        if (subItem.preferMenuTargetAsEventTarget) {
          var onClick = subItem.onClick, contextItem = __rest(subItem, ["onClick"]);
          overrideItems.push(__assign(__assign({}, contextItem), { onClick: getOnClickWithOverrideTarget(onClick, target) }));
        } else {
          overrideItems.push(subItem);
        }
      }
      return overrideItems;
    }
  }
  function canAnyMenuItemsCheck(items) {
    return items.some(function(item) {
      if (item.canCheck) {
        return true;
      }
      if (item.sectionProps && item.sectionProps.items.some(function(submenuItem) {
        return submenuItem.canCheck === true;
      })) {
        return true;
      }
      return false;
    });
  }
  var NavigationIdleDelay = 250;
  var COMPONENT_NAME2 = "ContextualMenu";
  var _getMenuItemStylesFunction = memoizeFunction(function() {
    var styles2 = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      styles2[_i] = arguments[_i];
    }
    return function(styleProps) {
      return concatStyleSetsWithProps.apply(void 0, __spreadArray([styleProps, getItemStyles], styles2, false));
    };
  });
  function useVisibility(props, targetWindow) {
    var _a5 = props.hidden, hidden = _a5 === void 0 ? false : _a5, onMenuDismissed = props.onMenuDismissed, onMenuOpened = props.onMenuOpened;
    var previousHidden = usePrevious2(hidden);
    var onMenuOpenedRef = React154.useRef(onMenuOpened);
    var onMenuClosedRef = React154.useRef(onMenuDismissed);
    var propsRef = React154.useRef(props);
    onMenuOpenedRef.current = onMenuOpened;
    onMenuClosedRef.current = onMenuDismissed;
    propsRef.current = props;
    React154.useEffect(function() {
      var _a6, _b;
      if (hidden && previousHidden === false) {
        (_a6 = onMenuClosedRef.current) === null || _a6 === void 0 ? void 0 : _a6.call(onMenuClosedRef, propsRef.current);
      } else if (!hidden && previousHidden !== false) {
        (_b = onMenuOpenedRef.current) === null || _b === void 0 ? void 0 : _b.call(onMenuOpenedRef, propsRef.current);
      }
    }, [hidden, previousHidden]);
    React154.useEffect(function() {
      return function() {
        var _a6;
        return (_a6 = onMenuClosedRef.current) === null || _a6 === void 0 ? void 0 : _a6.call(onMenuClosedRef, propsRef.current);
      };
    }, []);
  }
  function useSubMenuState(_a5, dismiss) {
    var hidden = _a5.hidden, items = _a5.items, theme = _a5.theme, className = _a5.className, id = _a5.id, menuTarget = _a5.target;
    var _b = React154.useState(), expandedMenuItemKey = _b[0], setExpandedMenuItemKey = _b[1];
    var _c = React154.useState(), submenuTarget = _c[0], setSubmenuTarget = _c[1];
    var _d = React154.useState(), shouldFocusOnContainer = _d[0], setShouldFocusOnContainer = _d[1];
    var subMenuId = useId3(COMPONENT_NAME2, id);
    var closeSubMenu = React154.useCallback(function() {
      setShouldFocusOnContainer(void 0);
      setExpandedMenuItemKey(void 0);
      setSubmenuTarget(void 0);
    }, []);
    var openSubMenu = React154.useCallback(function(_a6, target, focusContainer) {
      var submenuItemKey = _a6.key;
      if (expandedMenuItemKey === submenuItemKey) {
        return;
      }
      target.focus();
      setShouldFocusOnContainer(focusContainer);
      setExpandedMenuItemKey(submenuItemKey);
      setSubmenuTarget(target);
    }, [expandedMenuItemKey]);
    React154.useEffect(function() {
      if (hidden) {
        closeSubMenu();
      }
    }, [hidden, closeSubMenu]);
    var onSubMenuDismiss = useOnSubmenuDismiss(dismiss, closeSubMenu);
    var getSubmenuProps = function() {
      var item = findItemByKeyFromItems(expandedMenuItemKey, items);
      var submenuProps = null;
      if (item) {
        submenuProps = {
          items: getSubmenuItems(item, { target: menuTarget }),
          target: submenuTarget,
          onDismiss: onSubMenuDismiss,
          isSubMenu: true,
          id: subMenuId,
          shouldFocusOnMount: true,
          shouldFocusOnContainer,
          directionalHint: getRTL2(theme) ? DirectionalHint.leftTopEdge : DirectionalHint.rightTopEdge,
          className,
          gapSpace: 0,
          isBeakVisible: false
        };
        if (item.subMenuProps) {
          assign(submenuProps, item.subMenuProps);
        }
        if (item.preferMenuTargetAsEventTarget) {
          var onItemClick = item.onItemClick;
          submenuProps.onItemClick = getOnClickWithOverrideTarget(onItemClick, menuTarget);
        }
      }
      return submenuProps;
    };
    return [expandedMenuItemKey, openSubMenu, getSubmenuProps, onSubMenuDismiss];
  }
  function useShouldUpdateFocusOnMouseMove(_a5) {
    var delayUpdateFocusOnHover = _a5.delayUpdateFocusOnHover, hidden = _a5.hidden;
    var shouldUpdateFocusOnMouseEvent = React154.useRef(!delayUpdateFocusOnHover);
    var gotMouseMove = React154.useRef(false);
    React154.useEffect(function() {
      shouldUpdateFocusOnMouseEvent.current = !delayUpdateFocusOnHover;
      gotMouseMove.current = hidden ? false : !delayUpdateFocusOnHover && gotMouseMove.current;
    }, [delayUpdateFocusOnHover, hidden]);
    var onMenuFocusCapture = React154.useCallback(function() {
      if (delayUpdateFocusOnHover) {
        shouldUpdateFocusOnMouseEvent.current = false;
      }
    }, [delayUpdateFocusOnHover]);
    return [shouldUpdateFocusOnMouseEvent, gotMouseMove, onMenuFocusCapture];
  }
  function usePreviousActiveElement(_a5, targetWindow, hostElement) {
    var hidden = _a5.hidden, onRestoreFocus = _a5.onRestoreFocus;
    var previousActiveElement = React154.useRef();
    var tryFocusPreviousActiveElement = React154.useCallback(function(options) {
      var _a6, _b;
      if (onRestoreFocus) {
        onRestoreFocus(options);
      } else if (options === null || options === void 0 ? void 0 : options.documentContainsFocus) {
        (_b = (_a6 = previousActiveElement.current) === null || _a6 === void 0 ? void 0 : _a6.focus) === null || _b === void 0 ? void 0 : _b.call(_a6);
      }
    }, [onRestoreFocus]);
    useIsomorphicLayoutEffect3(function() {
      var _a6, _b;
      if (!hidden) {
        var newElement = targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement;
        if (!((_a6 = hostElement.current) === null || _a6 === void 0 ? void 0 : _a6.contains(newElement)) && newElement.tagName !== "BODY") {
          previousActiveElement.current = newElement;
        }
      } else if (previousActiveElement.current) {
        tryFocusPreviousActiveElement({
          originalElement: previousActiveElement.current,
          containsFocus: true,
          documentContainsFocus: ((_b = getDocument()) === null || _b === void 0 ? void 0 : _b.hasFocus()) || false
        });
        previousActiveElement.current = void 0;
      }
    }, [hidden, targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement, tryFocusPreviousActiveElement, hostElement]);
    return [tryFocusPreviousActiveElement];
  }
  function useKeyHandlers(_a5, dismiss, hostElement, openSubMenu) {
    var theme = _a5.theme, isSubMenu = _a5.isSubMenu, _b = _a5.focusZoneProps, _c = _b === void 0 ? {} : _b, checkForNoWrap = _c.checkForNoWrap, _d = _c.direction, focusZoneDirection = _d === void 0 ? FocusZoneDirection.vertical : _d;
    var lastKeyDownWasAltOrMeta = React154.useRef();
    var keyHandler = function(ev, shouldHandleKey, dismissAllMenus) {
      var handled = false;
      if (shouldHandleKey(ev)) {
        dismiss(ev, dismissAllMenus);
        ev.preventDefault();
        ev.stopPropagation();
        handled = true;
      }
      return handled;
    };
    var shouldCloseSubMenu = function(ev) {
      var submenuCloseKey = getRTL2(theme) ? KeyCodes.right : KeyCodes.left;
      if (ev.which !== submenuCloseKey || !isSubMenu) {
        return false;
      }
      return !!(focusZoneDirection === FocusZoneDirection.vertical || checkForNoWrap && !shouldWrapFocus(ev.target, "data-no-horizontal-wrap"));
    };
    var shouldHandleKeyDown = function(ev) {
      return (
        // eslint-disable-next-line deprecation/deprecation
        ev.which === KeyCodes.escape || shouldCloseSubMenu(ev) || // eslint-disable-next-line deprecation/deprecation
        ev.which === KeyCodes.up && (ev.altKey || ev.metaKey)
      );
    };
    var onKeyDown = function(ev) {
      lastKeyDownWasAltOrMeta.current = isAltOrMeta(ev);
      var dismissAllMenus = ev.which === KeyCodes.escape && (isMac() || isIOS());
      return keyHandler(ev, shouldHandleKeyDown, dismissAllMenus);
    };
    var shouldHandleKeyUp = function(ev) {
      var keyPressIsAltOrMetaAlone = lastKeyDownWasAltOrMeta.current && isAltOrMeta(ev);
      lastKeyDownWasAltOrMeta.current = false;
      return !!keyPressIsAltOrMetaAlone && !(isIOS() || isMac());
    };
    var onKeyUp = function(ev) {
      return keyHandler(
        ev,
        shouldHandleKeyUp,
        true
        /* dismissAllMenus */
      );
    };
    var onMenuKeyDown = function(ev) {
      var handled = onKeyDown(ev);
      if (handled || !hostElement.current) {
        return;
      }
      var hasModifier = !!(ev.altKey || ev.metaKey);
      var isUp = ev.which === KeyCodes.up;
      var isDown = ev.which === KeyCodes.down;
      if (!hasModifier && (isUp || isDown)) {
        var elementToFocus = isUp ? getLastFocusable(hostElement.current, hostElement.current.lastChild, true) : getFirstFocusable(hostElement.current, hostElement.current.firstChild, true);
        if (elementToFocus) {
          elementToFocus.focus();
          ev.preventDefault();
          ev.stopPropagation();
        }
      }
    };
    var onItemKeyDown = function(item, ev) {
      var openKey = getRTL2(theme) ? KeyCodes.left : KeyCodes.right;
      if (!item.disabled && // eslint-disable-next-line deprecation/deprecation
      (ev.which === openKey || ev.which === KeyCodes.enter || ev.which === KeyCodes.down && (ev.altKey || ev.metaKey))) {
        openSubMenu(item, ev.currentTarget);
        ev.preventDefault();
      }
    };
    return [onKeyDown, onKeyUp, onMenuKeyDown, onItemKeyDown];
  }
  function useScrollHandler(asyncTracker) {
    var isScrollIdle = React154.useRef(true);
    var scrollIdleTimeoutId = React154.useRef();
    var onScroll = function() {
      if (!isScrollIdle.current && scrollIdleTimeoutId.current !== void 0) {
        asyncTracker.clearTimeout(scrollIdleTimeoutId.current);
        scrollIdleTimeoutId.current = void 0;
      } else {
        isScrollIdle.current = false;
      }
      scrollIdleTimeoutId.current = asyncTracker.setTimeout(function() {
        isScrollIdle.current = true;
      }, NavigationIdleDelay);
    };
    return [onScroll, isScrollIdle];
  }
  function useOnSubmenuDismiss(dismiss, closeSubMenu) {
    var isMountedRef = React154.useRef(false);
    React154.useEffect(function() {
      isMountedRef.current = true;
      return function() {
        isMountedRef.current = false;
      };
    }, []);
    var onSubMenuDismiss = function(ev, dismissAll) {
      if (dismissAll) {
        dismiss(ev, dismissAll);
      } else if (isMountedRef.current) {
        closeSubMenu();
      }
    };
    return onSubMenuDismiss;
  }
  function useSubmenuEnterTimer(_a5, asyncTracker) {
    var _b = _a5.subMenuHoverDelay, subMenuHoverDelay = _b === void 0 ? NavigationIdleDelay : _b;
    var enterTimerRef = React154.useRef(void 0);
    var cancelSubMenuTimer = function() {
      if (enterTimerRef.current !== void 0) {
        asyncTracker.clearTimeout(enterTimerRef.current);
        enterTimerRef.current = void 0;
      }
    };
    var startSubmenuTimer = function(onTimerExpired) {
      enterTimerRef.current = asyncTracker.setTimeout(function() {
        onTimerExpired();
        cancelSubMenuTimer();
      }, subMenuHoverDelay);
    };
    return [cancelSubMenuTimer, startSubmenuTimer, enterTimerRef];
  }
  function useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss) {
    var menuTarget = props.target;
    var onItemMouseEnterBase = function(item, ev, target) {
      if (shouldUpdateFocusOnMouseEvent.current) {
        gotMouseMove.current = true;
      }
      if (shouldIgnoreMouseEvent()) {
        return;
      }
      updateFocusOnMouseEvent(item, ev, target);
    };
    var onItemMouseMoveBase = function(item, ev, target) {
      var targetElement = ev.currentTarget;
      if (shouldUpdateFocusOnMouseEvent.current) {
        gotMouseMove.current = true;
      } else {
        return;
      }
      if (!isScrollIdle.current || subMenuEntryTimer.current !== void 0 || targetElement === (targetWindow === null || targetWindow === void 0 ? void 0 : targetWindow.document.activeElement)) {
        return;
      }
      updateFocusOnMouseEvent(item, ev, target);
    };
    var shouldIgnoreMouseEvent = function() {
      return !isScrollIdle.current || !gotMouseMove.current;
    };
    var onMouseItemLeave = function(item, ev) {
      var _a5;
      if (shouldIgnoreMouseEvent()) {
        return;
      }
      cancelSubMenuTimer();
      if (expandedMenuItemKey !== void 0) {
        return;
      }
      if (hostElement.current.setActive) {
        try {
          hostElement.current.setActive();
        } catch (e2) {
        }
      } else {
        (_a5 = hostElement.current) === null || _a5 === void 0 ? void 0 : _a5.focus();
      }
    };
    var updateFocusOnMouseEvent = function(item, ev, target) {
      var targetElement = target ? target : ev.currentTarget;
      if (item.key === expandedMenuItemKey) {
        return;
      }
      cancelSubMenuTimer();
      if (expandedMenuItemKey === void 0) {
        targetElement.focus();
      }
      if (hasSubmenu(item)) {
        ev.stopPropagation();
        startSubmenuTimer(function() {
          targetElement.focus();
          openSubMenu(item, targetElement, true);
        });
      } else {
        startSubmenuTimer(function() {
          onSubMenuDismiss(ev);
          targetElement.focus();
        });
      }
    };
    var onItemClick = function(item, ev) {
      onItemClickBase(item, ev, ev.currentTarget);
    };
    var onItemClickBase = function(item, ev, target) {
      var items = getSubmenuItems(item, { target: menuTarget });
      cancelSubMenuTimer();
      if (!hasSubmenu(item) && (!items || !items.length)) {
        executeItemClick(item, ev);
      } else {
        if (item.key !== expandedMenuItemKey) {
          var shouldFocusOnContainer = typeof props.shouldFocusOnContainer === "boolean" ? props.shouldFocusOnContainer : ev.nativeEvent.pointerType === "mouse";
          openSubMenu(item, target, shouldFocusOnContainer);
        }
      }
      ev.stopPropagation();
      ev.preventDefault();
    };
    var onAnchorClick = function(item, ev) {
      executeItemClick(item, ev);
      ev.stopPropagation();
    };
    var executeItemClick = function(item, ev) {
      if (item.disabled || item.isDisabled) {
        return;
      }
      if (item.preferMenuTargetAsEventTarget) {
        overrideTarget(ev, menuTarget);
      }
      var shouldDismiss = false;
      if (item.onClick) {
        shouldDismiss = !!item.onClick(ev, item);
      } else if (props.onItemClick) {
        shouldDismiss = !!props.onItemClick(ev, item);
      }
      if (shouldDismiss || !ev.defaultPrevented) {
        dismiss(ev, true);
      }
    };
    return [
      onItemMouseEnterBase,
      onItemMouseMoveBase,
      onMouseItemLeave,
      onItemClick,
      onAnchorClick,
      executeItemClick,
      onItemClickBase
    ];
  }
  var ContextualMenuBase = React154.memo(React154.forwardRef(function(propsWithoutDefaults, forwardedRef) {
    var _a5;
    var _b = getPropsWithDefaults(DEFAULT_PROPS2, propsWithoutDefaults), ref = _b.ref, props = __rest(_b, ["ref"]);
    var hostElement = React154.useRef(null);
    var asyncTracker = useAsync();
    var menuId = useId3(COMPONENT_NAME2, props.id);
    useWarnings({
      name: COMPONENT_NAME2,
      props,
      deprecations: {
        getMenuClassNames: "styles"
      }
    });
    var dismiss = function(ev, dismissAll) {
      var _a6;
      return (_a6 = props.onDismiss) === null || _a6 === void 0 ? void 0 : _a6.call(props, ev, dismissAll);
    };
    var _c = useTarget(props.target, hostElement), targetRef = _c[0], targetWindow = _c[1];
    var tryFocusPreviousActiveElement = usePreviousActiveElement(props, targetWindow, hostElement)[0];
    var _d = useSubMenuState(props, dismiss), expandedMenuItemKey = _d[0], openSubMenu = _d[1], getSubmenuProps = _d[2], onSubMenuDismiss = _d[3];
    var _e = useShouldUpdateFocusOnMouseMove(props), shouldUpdateFocusOnMouseEvent = _e[0], gotMouseMove = _e[1], onMenuFocusCapture = _e[2];
    var _f = useScrollHandler(asyncTracker), onScroll = _f[0], isScrollIdle = _f[1];
    var _g = useSubmenuEnterTimer(props, asyncTracker), cancelSubMenuTimer = _g[0], startSubmenuTimer = _g[1], subMenuEntryTimer = _g[2];
    var responsiveMode = useResponsiveMode(hostElement, props.responsiveMode);
    useVisibility(props, targetWindow);
    var _h = useKeyHandlers(props, dismiss, hostElement, openSubMenu), onKeyDown = _h[0], onKeyUp = _h[1], onMenuKeyDown = _h[2], onItemKeyDown = _h[3];
    var _j = useMouseHandlers(props, isScrollIdle, subMenuEntryTimer, targetWindow, shouldUpdateFocusOnMouseEvent, gotMouseMove, expandedMenuItemKey, hostElement, startSubmenuTimer, cancelSubMenuTimer, openSubMenu, onSubMenuDismiss, dismiss), onItemMouseEnterBase = _j[0], onItemMouseMoveBase = _j[1], onMouseItemLeave = _j[2], onItemClick = _j[3], onAnchorClick = _j[4], executeItemClick = _j[5], onItemClickBase = _j[6];
    var onDefaultRenderMenuList = function(menuListProps, menuClassNames, defaultRender) {
      var indexCorrection = 0;
      var items2 = menuListProps.items, totalItemCount = menuListProps.totalItemCount, hasCheckmarks2 = menuListProps.hasCheckmarks, hasIcons2 = menuListProps.hasIcons;
      return React154.createElement("ul", { className: menuClassNames.list, onKeyDown, onKeyUp, role: "presentation" }, items2.map(function(item, index2) {
        var menuItem = renderMenuItem(item, index2, indexCorrection, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames);
        if (item.itemType !== ContextualMenuItemType.Divider && item.itemType !== ContextualMenuItemType.Header) {
          var indexIncrease = item.customOnRenderListLength ? item.customOnRenderListLength : 1;
          indexCorrection += indexIncrease;
        }
        return menuItem;
      }));
    };
    var renderFocusZone = function(children, adjustedFocusZoneProps2) {
      var _a6 = props.focusZoneAs, ChildrenRenderer = _a6 === void 0 ? FocusZone : _a6;
      return React154.createElement(ChildrenRenderer, __assign({}, adjustedFocusZoneProps2), children);
    };
    var renderMenuItem = function(item, index2, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames) {
      var _a6;
      var renderedItems = [];
      var iconProps = item.iconProps || { iconName: "None" };
      var getItemClassNames2 = item.getItemClassNames, itemProps = item.itemProps;
      var styles3 = itemProps ? itemProps.styles : void 0;
      var dividerClassName = item.itemType === ContextualMenuItemType.Divider ? item.className : void 0;
      var subMenuIconClassName = item.submenuIconProps ? item.submenuIconProps.className : "";
      var itemClassNames;
      if (getItemClassNames2) {
        itemClassNames = getItemClassNames2(props.theme, isItemDisabled(item), expandedMenuItemKey === item.key, !!getIsChecked(item), !!item.href, iconProps.iconName !== "None", item.className, dividerClassName, iconProps.className, subMenuIconClassName, item.primaryDisabled);
      } else {
        var itemStyleProps = {
          theme: props.theme,
          disabled: isItemDisabled(item),
          expanded: expandedMenuItemKey === item.key,
          checked: !!getIsChecked(item),
          isAnchorLink: !!item.href,
          knownIcon: iconProps.iconName !== "None",
          itemClassName: item.className,
          dividerClassName,
          iconClassName: iconProps.className,
          subMenuClassName: subMenuIconClassName,
          primaryDisabled: item.primaryDisabled
        };
        itemClassNames = getContextualMenuItemClassNames(_getMenuItemStylesFunction((_a6 = menuClassNames.subComponentStyles) === null || _a6 === void 0 ? void 0 : _a6.menuItem, styles3), itemStyleProps);
      }
      if (item.text === "-" || item.name === "-") {
        item.itemType = ContextualMenuItemType.Divider;
      }
      switch (item.itemType) {
        case ContextualMenuItemType.Divider:
          renderedItems.push(renderSeparator(index2, itemClassNames));
          break;
        case ContextualMenuItemType.Header:
          renderedItems.push(renderSeparator(index2, itemClassNames));
          var headerItem = renderHeaderMenuItem(item, itemClassNames, menuClassNames, index2, hasCheckmarks2, hasIcons2);
          renderedItems.push(renderListItem(headerItem, item.key || index2, itemClassNames, item.title));
          break;
        case ContextualMenuItemType.Section:
          renderedItems.push(renderSectionItem(item, itemClassNames, menuClassNames, index2, hasCheckmarks2, hasIcons2));
          break;
        default:
          var defaultRenderNormalItem = function() {
            return renderNormalItem(item, itemClassNames, index2, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2);
          };
          var menuItem = props.onRenderContextualMenuItem ? props.onRenderContextualMenuItem(item, defaultRenderNormalItem) : defaultRenderNormalItem();
          renderedItems.push(renderListItem(menuItem, item.key || index2, itemClassNames, item.title));
          break;
      }
      return React154.createElement(React154.Fragment, { key: item.key }, renderedItems);
    };
    var defaultMenuItemRenderer = function(item, menuClassNames) {
      var index2 = item.index, focusableElementIndex = item.focusableElementIndex, totalItemCount = item.totalItemCount, hasCheckmarks2 = item.hasCheckmarks, hasIcons2 = item.hasIcons;
      return renderMenuItem(item, index2, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2, menuClassNames);
    };
    var renderSectionItem = function(sectionItem, itemClassNames, menuClassNames, index2, hasCheckmarks2, hasIcons2) {
      var sectionProps = sectionItem.sectionProps;
      if (!sectionProps) {
        return;
      }
      var headerItem;
      var groupProps;
      if (sectionProps.title) {
        var headerContextualMenuItem = void 0;
        var ariaLabelledby = "";
        if (typeof sectionProps.title === "string") {
          var id_1 = menuId + sectionProps.title.replace(/\s/g, "");
          headerContextualMenuItem = {
            key: "section-".concat(sectionProps.title, "-title"),
            itemType: ContextualMenuItemType.Header,
            text: sectionProps.title,
            id: id_1
          };
          ariaLabelledby = id_1;
        } else {
          var id_2 = sectionProps.title.id || menuId + sectionProps.title.key.replace(/\s/g, "");
          headerContextualMenuItem = __assign(__assign({}, sectionProps.title), { id: id_2 });
          ariaLabelledby = id_2;
        }
        if (headerContextualMenuItem) {
          groupProps = {
            role: "group",
            "aria-labelledby": ariaLabelledby
          };
          headerItem = renderHeaderMenuItem(headerContextualMenuItem, itemClassNames, menuClassNames, index2, hasCheckmarks2, hasIcons2);
        }
      }
      if (sectionProps.items && sectionProps.items.length > 0) {
        var correctedIndex_1 = 0;
        return React154.createElement(
          "li",
          { role: "presentation", key: sectionProps.key || sectionItem.key || "section-".concat(index2) },
          React154.createElement(
            "div",
            __assign({}, groupProps),
            React154.createElement(
              "ul",
              { className: menuClassNames.list, role: "presentation" },
              sectionProps.topDivider && renderSeparator(index2, itemClassNames, true, true),
              headerItem && renderListItem(headerItem, sectionItem.key || index2, itemClassNames, sectionItem.title),
              sectionProps.items.map(function(contextualMenuItem, itemsIndex) {
                var menuItem = renderMenuItem(contextualMenuItem, itemsIndex, correctedIndex_1, getItemCount(sectionProps.items), hasCheckmarks2, hasIcons2, menuClassNames);
                if (contextualMenuItem.itemType !== ContextualMenuItemType.Divider && contextualMenuItem.itemType !== ContextualMenuItemType.Header) {
                  var indexIncrease = contextualMenuItem.customOnRenderListLength ? contextualMenuItem.customOnRenderListLength : 1;
                  correctedIndex_1 += indexIncrease;
                }
                return menuItem;
              }),
              sectionProps.bottomDivider && renderSeparator(index2, itemClassNames, false, true)
            )
          )
        );
      }
    };
    var renderListItem = function(content15, key, classNames3, title2) {
      return React154.createElement("li", { role: "presentation", title: title2, key, className: classNames3.item }, content15);
    };
    var renderSeparator = function(index2, classNames3, top, fromSection) {
      if (fromSection || index2 > 0) {
        return React154.createElement("li", { role: "separator", key: "separator-" + index2 + (top === void 0 ? "" : top ? "-top" : "-bottom"), className: classNames3.divider, "aria-hidden": "true" });
      }
      return null;
    };
    var renderNormalItem = function(item, classNames3, index2, focusableElementIndex, totalItemCount, hasCheckmarks2, hasIcons2) {
      if (item.onRender) {
        return item.onRender(__assign({ "aria-posinset": focusableElementIndex + 1, "aria-setsize": totalItemCount }, item), dismiss);
      }
      var contextualMenuItemAs = props.contextualMenuItemAs;
      var commonProps = {
        item,
        classNames: classNames3,
        index: index2,
        focusableElementIndex,
        totalItemCount,
        hasCheckmarks: hasCheckmarks2,
        hasIcons: hasIcons2,
        contextualMenuItemAs,
        onItemMouseEnter: onItemMouseEnterBase,
        onItemMouseLeave: onMouseItemLeave,
        onItemMouseMove: onItemMouseMoveBase,
        onItemMouseDown,
        executeItemClick,
        onItemKeyDown,
        expandedMenuItemKey,
        openSubMenu,
        dismissSubMenu: onSubMenuDismiss,
        dismissMenu: dismiss
      };
      if (item.href) {
        return React154.createElement(ContextualMenuAnchor, __assign({}, commonProps, { onItemClick: onAnchorClick }));
      }
      if (item.split && hasSubmenu(item)) {
        return React154.createElement(ContextualMenuSplitButton, __assign({}, commonProps, { onItemClick, onItemClickBase, onTap: cancelSubMenuTimer }));
      }
      return React154.createElement(ContextualMenuButton, __assign({}, commonProps, { onItemClick, onItemClickBase }));
    };
    var renderHeaderMenuItem = function(item, itemClassNames, menuClassNames, index2, hasCheckmarks2, hasIcons2) {
      var _a6 = props.contextualMenuItemAs, ChildrenRenderer = _a6 === void 0 ? ContextualMenuItem : _a6;
      var itemProps = item.itemProps, id2 = item.id;
      var divHtmlProperties = itemProps && getNativeProps2(itemProps, divProperties);
      return (
        // eslint-disable-next-line deprecation/deprecation
        React154.createElement(
          "div",
          __assign({ id: id2, className: menuClassNames.header }, divHtmlProperties, { style: item.style }),
          React154.createElement(ChildrenRenderer, __assign({ item, classNames: itemClassNames, index: index2, onCheckmarkClick: hasCheckmarks2 ? onItemClick : void 0, hasIcons: hasIcons2 }, itemProps))
        )
      );
    };
    var isBeakVisible = props.isBeakVisible;
    var items = props.items, labelElementId = props.labelElementId, id = props.id, className = props.className, beakWidth = props.beakWidth, directionalHint = props.directionalHint, directionalHintForRTL = props.directionalHintForRTL, alignTargetEdge = props.alignTargetEdge, gapSpace = props.gapSpace, coverTarget = props.coverTarget, ariaLabel = props.ariaLabel, doNotLayer = props.doNotLayer, target = props.target, bounds = props.bounds, useTargetWidth = props.useTargetWidth, useTargetAsMinWidth = props.useTargetAsMinWidth, directionalHintFixed = props.directionalHintFixed, shouldFocusOnMount = props.shouldFocusOnMount, shouldFocusOnContainer = props.shouldFocusOnContainer, title = props.title, styles2 = props.styles, theme = props.theme, calloutProps = props.calloutProps, _k = props.onRenderSubMenu, onRenderSubMenu2 = _k === void 0 ? onDefaultRenderSubMenu : _k, _l = props.onRenderMenuList, onRenderMenuList = _l === void 0 ? function(menuListProps, defaultRender) {
      return onDefaultRenderMenuList(menuListProps, classNames2, defaultRender);
    } : _l, focusZoneProps = props.focusZoneProps, getMenuClassNames = props.getMenuClassNames;
    var classNames2 = getMenuClassNames ? getMenuClassNames(theme, className) : getClassNames7(styles2, {
      theme,
      className
    });
    var hasIcons = itemsHaveIcons(items);
    function itemsHaveIcons(contextualMenuItems) {
      for (var _i = 0, contextualMenuItems_1 = contextualMenuItems; _i < contextualMenuItems_1.length; _i++) {
        var item = contextualMenuItems_1[_i];
        if (item.iconProps) {
          return true;
        }
        if (item.itemType === ContextualMenuItemType.Section && item.sectionProps && itemsHaveIcons(item.sectionProps.items)) {
          return true;
        }
      }
      return false;
    }
    var adjustedFocusZoneProps = __assign(__assign({ direction: FocusZoneDirection.vertical, handleTabKey: FocusZoneTabbableElements.all, isCircularNavigation: true }, focusZoneProps), { className: css(classNames2.root, (_a5 = props.focusZoneProps) === null || _a5 === void 0 ? void 0 : _a5.className) });
    var hasCheckmarks = canAnyMenuItemsCheck(items);
    var submenuProps = expandedMenuItemKey && props.hidden !== true ? getSubmenuProps() : null;
    isBeakVisible = isBeakVisible === void 0 ? responsiveMode <= ResponsiveMode.medium : isBeakVisible;
    var contextMenuStyle;
    var targetAsHtmlElement = targetRef.current;
    if ((useTargetWidth || useTargetAsMinWidth) && targetAsHtmlElement && targetAsHtmlElement.offsetWidth) {
      var targetBoundingRect = targetAsHtmlElement.getBoundingClientRect();
      var targetWidth = targetBoundingRect.width - 2;
      if (useTargetWidth) {
        contextMenuStyle = {
          width: targetWidth
        };
      } else if (useTargetAsMinWidth) {
        contextMenuStyle = {
          minWidth: targetWidth
        };
      }
    }
    if (items && items.length > 0) {
      var totalItemCount_1 = getItemCount(items);
      var calloutStyles_1 = classNames2.subComponentStyles ? classNames2.subComponentStyles.callout : void 0;
      return React154.createElement(MenuContext.Consumer, null, function(menuContext) {
        return React154.createElement(
          Callout,
          __assign({ styles: calloutStyles_1, onRestoreFocus: tryFocusPreviousActiveElement }, calloutProps, { target: target || menuContext.target, isBeakVisible, beakWidth, directionalHint, directionalHintForRTL, gapSpace, coverTarget, doNotLayer, className: css("ms-ContextualMenu-Callout", calloutProps && calloutProps.className), setInitialFocus: shouldFocusOnMount, onDismiss: props.onDismiss || menuContext.onDismiss, onScroll, bounds, directionalHintFixed, alignTargetEdge, hidden: props.hidden || menuContext.hidden, ref: forwardedRef }),
          React154.createElement(
            "div",
            { style: contextMenuStyle, ref: hostElement, id, className: classNames2.container, tabIndex: shouldFocusOnContainer ? 0 : -1, onKeyDown: onMenuKeyDown, onKeyUp, onFocusCapture: onMenuFocusCapture, "aria-label": ariaLabel, "aria-labelledby": labelElementId, role: "menu" },
            title && React154.createElement(
              "div",
              { className: classNames2.title },
              " ",
              title,
              " "
            ),
            items && items.length ? renderFocusZone(onRenderMenuList({
              ariaLabel,
              items,
              totalItemCount: totalItemCount_1,
              hasCheckmarks,
              hasIcons,
              defaultMenuItemRenderer: function(item) {
                return defaultMenuItemRenderer(item, classNames2);
              },
              labelElementId
            }, function(menuListProps, defaultRender) {
              return onDefaultRenderMenuList(menuListProps, classNames2, defaultRender);
            }), adjustedFocusZoneProps) : null,
            submenuProps && onRenderSubMenu2(submenuProps, onDefaultRenderSubMenu)
          ),
          React154.createElement(FocusRects, null)
        );
      });
    } else {
      return null;
    }
  }), function(prevProps, newProps) {
    if (!newProps.shouldUpdateWhenHidden && prevProps.hidden && newProps.hidden) {
      return true;
    }
    return shallowCompare(prevProps, newProps);
  });
  ContextualMenuBase.displayName = "ContextualMenuBase";
  function isAltOrMeta(ev) {
    return ev.which === KeyCodes.alt || ev.key === "Meta";
  }
  function onItemMouseDown(item, ev) {
    var _a5;
    (_a5 = item.onMouseDown) === null || _a5 === void 0 ? void 0 : _a5.call(item, item, ev);
  }
  function onDefaultRenderSubMenu(subMenuProps, defaultRender) {
    throw Error("ContextualMenuBase: onRenderSubMenu callback is null or undefined. Please ensure to set `onRenderSubMenu` property either manually or with `styled` helper.");
  }
  function findItemByKeyFromItems(key, items) {
    for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
      var item = items_3[_i];
      if (item.itemType === ContextualMenuItemType.Section && item.sectionProps) {
        var match2 = findItemByKeyFromItems(key, item.sectionProps.items);
        if (match2) {
          return match2;
        }
      } else if (item.key && item.key === key) {
        return item;
      }
    }
  }
  function getOnClickWithOverrideTarget(onClick, target) {
    return onClick ? function(ev, item) {
      overrideTarget(ev, target);
      return onClick(ev, item);
    } : onClick;
  }
  function overrideTarget(ev, target) {
    if (ev && target) {
      ev.persist();
      if (target instanceof Event) {
        ev.target = target.target;
      } else if (target instanceof Element) {
        ev.target = target;
      }
    }
  }

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.styles.js
  var GlobalClassNames6 = {
    root: "ms-ContextualMenu",
    container: "ms-ContextualMenu-container",
    list: "ms-ContextualMenu-list",
    header: "ms-ContextualMenu-header",
    title: "ms-ContextualMenu-title",
    isopen: "is-open"
  };
  var getStyles7 = function(props) {
    var className = props.className, theme = props.theme;
    var classNames2 = getGlobalClassNames(GlobalClassNames6, theme);
    var fonts = theme.fonts, semanticColors = theme.semanticColors, effects = theme.effects;
    return {
      root: [
        theme.fonts.medium,
        classNames2.root,
        classNames2.isopen,
        {
          backgroundColor: semanticColors.menuBackground,
          minWidth: "180px"
        },
        className
      ],
      container: [
        classNames2.container,
        {
          selectors: {
            ":focus": { outline: 0 }
          }
        }
      ],
      list: [
        classNames2.list,
        classNames2.isopen,
        {
          listStyleType: "none",
          margin: "0",
          padding: "0"
        }
      ],
      header: [
        classNames2.header,
        fonts.small,
        {
          fontWeight: FontWeights.semibold,
          color: semanticColors.menuHeader,
          background: "none",
          backgroundColor: "transparent",
          border: "none",
          height: CONTEXTUAL_MENU_ITEM_HEIGHT,
          lineHeight: CONTEXTUAL_MENU_ITEM_HEIGHT,
          cursor: "default",
          padding: "0px 6px",
          userSelect: "none",
          textAlign: "left"
        }
      ],
      title: [
        classNames2.title,
        {
          fontSize: fonts.mediumPlus.fontSize,
          paddingRight: "14px",
          paddingLeft: "14px",
          paddingBottom: "5px",
          paddingTop: "5px",
          backgroundColor: semanticColors.menuItemBackgroundPressed
        }
      ],
      subComponentStyles: {
        callout: {
          root: {
            boxShadow: effects.elevation8
          }
        },
        menuItem: {}
      }
    };
  };

  // ../node_modules/@fluentui/react/lib/components/ContextualMenu/ContextualMenu.js
  function onRenderSubMenu(subMenuProps) {
    return React155.createElement(LocalContextualMenu, __assign({}, subMenuProps));
  }
  var LocalContextualMenu = styled(ContextualMenuBase, getStyles7, function(props) {
    return {
      onRenderSubMenu: props.onRenderSubMenu ? composeRenderFunction(props.onRenderSubMenu, onRenderSubMenu) : onRenderSubMenu
    };
  }, { scope: "ContextualMenu" });
  var ContextualMenu = LocalContextualMenu;
  ContextualMenu.displayName = "ContextualMenu";

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.classNames.js
  var ButtonGlobalClassNames = {
    msButton: "ms-Button",
    msButtonHasMenu: "ms-Button--hasMenu",
    msButtonIcon: "ms-Button-icon",
    msButtonMenuIcon: "ms-Button-menuIcon",
    msButtonLabel: "ms-Button-label",
    msButtonDescription: "ms-Button-description",
    msButtonScreenReaderText: "ms-Button-screenReaderText",
    msButtonFlexContainer: "ms-Button-flexContainer",
    msButtonTextContainer: "ms-Button-textContainer"
  };
  var getBaseButtonClassNames = memoizeFunction(function(theme, styles2, className, variantClassName, iconClassName, menuIconClassName, disabled, hasMenu, checked, expanded, isSplit) {
    var _a5, _b;
    var classNames2 = getGlobalClassNames(ButtonGlobalClassNames, theme || {});
    var isExpanded = expanded && !isSplit;
    return mergeStyleSets({
      root: [
        classNames2.msButton,
        styles2.root,
        variantClassName,
        checked && ["is-checked", styles2.rootChecked],
        isExpanded && [
          "is-expanded",
          styles2.rootExpanded,
          {
            selectors: (_a5 = {}, _a5[":hover .".concat(classNames2.msButtonIcon)] = styles2.iconExpandedHovered, // menuIcon falls back to rootExpandedHovered to support original behavior
            _a5[":hover .".concat(classNames2.msButtonMenuIcon)] = styles2.menuIconExpandedHovered || styles2.rootExpandedHovered, _a5[":hover"] = styles2.rootExpandedHovered, _a5)
          }
        ],
        hasMenu && [ButtonGlobalClassNames.msButtonHasMenu, styles2.rootHasMenu],
        disabled && ["is-disabled", styles2.rootDisabled],
        !disabled && !isExpanded && !checked && {
          selectors: (_b = {
            ":hover": styles2.rootHovered
          }, _b[":hover .".concat(classNames2.msButtonLabel)] = styles2.labelHovered, _b[":hover .".concat(classNames2.msButtonIcon)] = styles2.iconHovered, _b[":hover .".concat(classNames2.msButtonDescription)] = styles2.descriptionHovered, _b[":hover .".concat(classNames2.msButtonMenuIcon)] = styles2.menuIconHovered, _b[":focus"] = styles2.rootFocused, _b[":active"] = styles2.rootPressed, _b[":active .".concat(classNames2.msButtonIcon)] = styles2.iconPressed, _b[":active .".concat(classNames2.msButtonDescription)] = styles2.descriptionPressed, _b[":active .".concat(classNames2.msButtonMenuIcon)] = styles2.menuIconPressed, _b)
        },
        disabled && checked && [styles2.rootCheckedDisabled],
        !disabled && checked && {
          selectors: {
            ":hover": styles2.rootCheckedHovered,
            ":active": styles2.rootCheckedPressed
          }
        },
        className
      ],
      flexContainer: [classNames2.msButtonFlexContainer, styles2.flexContainer],
      textContainer: [classNames2.msButtonTextContainer, styles2.textContainer],
      icon: [
        classNames2.msButtonIcon,
        iconClassName,
        styles2.icon,
        isExpanded && styles2.iconExpanded,
        checked && styles2.iconChecked,
        disabled && styles2.iconDisabled
      ],
      label: [classNames2.msButtonLabel, styles2.label, checked && styles2.labelChecked, disabled && styles2.labelDisabled],
      menuIcon: [
        classNames2.msButtonMenuIcon,
        menuIconClassName,
        styles2.menuIcon,
        checked && styles2.menuIconChecked,
        disabled && !isSplit && styles2.menuIconDisabled,
        !disabled && !isExpanded && !checked && {
          selectors: {
            ":hover": styles2.menuIconHovered,
            ":active": styles2.menuIconPressed
          }
        },
        isExpanded && ["is-expanded", styles2.menuIconExpanded]
      ],
      description: [
        classNames2.msButtonDescription,
        styles2.description,
        checked && styles2.descriptionChecked,
        disabled && styles2.descriptionDisabled
      ],
      screenReaderText: [classNames2.msButtonScreenReaderText, styles2.screenReaderText]
    });
  });

  // ../node_modules/@fluentui/react/lib/components/Button/SplitButton/SplitButton.classNames.js
  var getSplitButtonClassNames = memoizeFunction(function(styles2, disabled, expanded, checked, primaryDisabled) {
    return {
      root: mergeStyles(styles2.splitButtonMenuButton, expanded && [styles2.splitButtonMenuButtonExpanded], disabled && [styles2.splitButtonMenuButtonDisabled], checked && !disabled && [styles2.splitButtonMenuButtonChecked], primaryDisabled && !disabled && [
        {
          selectors: {
            ":focus": styles2.splitButtonMenuFocused
          }
        }
      ]),
      splitButtonContainer: mergeStyles(styles2.splitButtonContainer, !disabled && checked && [
        styles2.splitButtonContainerChecked,
        {
          selectors: {
            ":hover": styles2.splitButtonContainerCheckedHovered
          }
        }
      ], !disabled && !checked && [
        {
          selectors: {
            ":hover": styles2.splitButtonContainerHovered,
            ":focus": styles2.splitButtonContainerFocused
          }
        }
      ], disabled && styles2.splitButtonContainerDisabled),
      icon: mergeStyles(styles2.splitButtonMenuIcon, disabled && styles2.splitButtonMenuIconDisabled, !disabled && primaryDisabled && styles2.splitButtonMenuIcon),
      flexContainer: mergeStyles(styles2.splitButtonFlexContainer),
      divider: mergeStyles(styles2.splitButtonDivider, (primaryDisabled || disabled) && styles2.splitButtonDividerDisabled)
    };
  });

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.js
  var TouchIdleDelay2 = 500;
  var COMPONENT_NAME3 = "BaseButton";
  var BaseButton = (
    /** @class */
    function(_super) {
      __extends(BaseButton2, _super);
      function BaseButton2(props) {
        var _this = _super.call(this, props) || this;
        _this._buttonElement = React156.createRef();
        _this._splitButtonContainer = React156.createRef();
        _this._mergedRef = createMergedRef();
        _this._renderedVisibleMenu = false;
        _this._getMemoizedMenuButtonKeytipProps = memoizeFunction(function(keytipProps) {
          return __assign(__assign({}, keytipProps), { hasMenu: true });
        });
        _this._onRenderIcon = function(buttonProps, defaultRender) {
          var iconProps = _this.props.iconProps;
          if (iconProps && (iconProps.iconName !== void 0 || iconProps.imageProps)) {
            var className = iconProps.className, imageProps = iconProps.imageProps, rest = __rest(iconProps, ["className", "imageProps"]);
            if (iconProps.styles) {
              return React156.createElement(Icon, __assign({ className: css(_this._classNames.icon, className), imageProps }, rest));
            }
            if (iconProps.iconName) {
              return React156.createElement(FontIcon, __assign({ className: css(_this._classNames.icon, className) }, rest));
            }
            if (imageProps) {
              return React156.createElement(ImageIcon, __assign({ className: css(_this._classNames.icon, className), imageProps }, rest));
            }
          }
          return null;
        };
        _this._onRenderTextContents = function() {
          var _a5 = _this.props, text4 = _a5.text, children = _a5.children, _b = _a5.secondaryText, secondaryText = _b === void 0 ? _this.props.description : _b, _c = _a5.onRenderText, onRenderText = _c === void 0 ? _this._onRenderText : _c, _d = _a5.onRenderDescription, onRenderDescription = _d === void 0 ? _this._onRenderDescription : _d;
          if (text4 || typeof children === "string" || secondaryText) {
            return React156.createElement(
              "span",
              { className: _this._classNames.textContainer },
              onRenderText(_this.props, _this._onRenderText),
              onRenderDescription(_this.props, _this._onRenderDescription)
            );
          }
          return [onRenderText(_this.props, _this._onRenderText), onRenderDescription(_this.props, _this._onRenderDescription)];
        };
        _this._onRenderText = function() {
          var text4 = _this.props.text;
          var children = _this.props.children;
          if (text4 === void 0 && typeof children === "string") {
            text4 = children;
          }
          if (_this._hasText()) {
            return React156.createElement("span", { key: _this._labelId, className: _this._classNames.label, id: _this._labelId }, text4);
          }
          return null;
        };
        _this._onRenderChildren = function() {
          var children = _this.props.children;
          if (typeof children === "string") {
            return null;
          }
          return children;
        };
        _this._onRenderDescription = function(props2) {
          var _a5 = props2.secondaryText, secondaryText = _a5 === void 0 ? _this.props.description : _a5;
          return secondaryText ? React156.createElement("span", { key: _this._descriptionId, className: _this._classNames.description, id: _this._descriptionId }, secondaryText) : null;
        };
        _this._onRenderAriaDescription = function() {
          var ariaDescription = _this.props.ariaDescription;
          return ariaDescription ? React156.createElement("span", { className: _this._classNames.screenReaderText, id: _this._ariaDescriptionId }, ariaDescription) : null;
        };
        _this._onRenderMenuIcon = function(props2) {
          var menuIconProps = _this.props.menuIconProps;
          return React156.createElement(FontIcon, __assign({ iconName: "ChevronDown" }, menuIconProps, { className: _this._classNames.menuIcon }));
        };
        _this._onRenderMenu = function(menuProps) {
          var MenuType = _this.props.menuAs ? composeComponentAs(_this.props.menuAs, ContextualMenu) : ContextualMenu;
          return React156.createElement(MenuType, __assign({}, menuProps));
        };
        _this._onDismissMenu = function(ev) {
          var menuProps = _this.props.menuProps;
          if (menuProps && menuProps.onDismiss) {
            menuProps.onDismiss(ev);
          }
          if (!ev || !ev.defaultPrevented) {
            _this._dismissMenu();
          }
        };
        _this._dismissMenu = function() {
          _this._menuShouldFocusOnMount = void 0;
          _this._menuShouldFocusOnContainer = void 0;
          _this.setState({ menuHidden: true });
        };
        _this._openMenu = function(shouldFocusOnContainer, shouldFocusOnMount) {
          if (shouldFocusOnMount === void 0) {
            shouldFocusOnMount = true;
          }
          if (_this.props.menuProps) {
            _this._menuShouldFocusOnContainer = shouldFocusOnContainer;
            _this._menuShouldFocusOnMount = shouldFocusOnMount;
            _this._renderedVisibleMenu = true;
            _this.setState({ menuHidden: false });
          }
        };
        _this._onToggleMenu = function(shouldFocusOnContainer) {
          var shouldFocusOnMount = true;
          if (_this.props.menuProps && _this.props.menuProps.shouldFocusOnMount === false) {
            shouldFocusOnMount = false;
          }
          _this.state.menuHidden ? _this._openMenu(shouldFocusOnContainer, shouldFocusOnMount) : _this._dismissMenu();
        };
        _this._onSplitContainerFocusCapture = function(ev) {
          var container2 = _this._splitButtonContainer.current;
          if (!container2 || ev.target && portalContainsElement(ev.target, container2)) {
            return;
          }
          container2.focus();
        };
        _this._onSplitButtonPrimaryClick = function(ev) {
          if (!_this.state.menuHidden) {
            _this._dismissMenu();
          }
          var singleTouchTarget = _this._processingTouch && !_this.props.toggle;
          if (!singleTouchTarget && _this.props.onClick) {
            _this.props.onClick(ev);
          } else if (singleTouchTarget) {
            _this._onMenuClick(ev);
          }
        };
        _this._onKeyDown = function(ev) {
          if (_this.props.disabled && (ev.which === KeyCodes.enter || ev.which === KeyCodes.space)) {
            ev.preventDefault();
            ev.stopPropagation();
          } else if (!_this.props.disabled) {
            if (_this.props.menuProps) {
              _this._onMenuKeyDown(ev);
            } else if (_this.props.onKeyDown !== void 0) {
              _this.props.onKeyDown(ev);
            }
          }
        };
        _this._onKeyUp = function(ev) {
          if (!_this.props.disabled && _this.props.onKeyUp !== void 0) {
            _this.props.onKeyUp(ev);
          }
        };
        _this._onKeyPress = function(ev) {
          if (!_this.props.disabled && _this.props.onKeyPress !== void 0) {
            _this.props.onKeyPress(ev);
          }
        };
        _this._onMouseUp = function(ev) {
          if (!_this.props.disabled && _this.props.onMouseUp !== void 0) {
            _this.props.onMouseUp(ev);
          }
        };
        _this._onMouseDown = function(ev) {
          if (!_this.props.disabled && _this.props.onMouseDown !== void 0) {
            _this.props.onMouseDown(ev);
          }
        };
        _this._onClick = function(ev) {
          if (!_this.props.disabled) {
            if (_this.props.menuProps) {
              _this._onMenuClick(ev);
            } else if (_this.props.onClick !== void 0) {
              _this.props.onClick(ev);
            }
          }
        };
        _this._onSplitButtonContainerKeyDown = function(ev) {
          if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
            if (_this._buttonElement.current) {
              _this._buttonElement.current.click();
              ev.preventDefault();
              ev.stopPropagation();
            }
          } else {
            _this._onMenuKeyDown(ev);
          }
        };
        _this._onMenuKeyDown = function(ev) {
          var _a5;
          if (_this.props.disabled) {
            return;
          }
          if (_this.props.onKeyDown) {
            _this.props.onKeyDown(ev);
          }
          var isUp = ev.which === KeyCodes.up;
          var isDown = ev.which === KeyCodes.down;
          if (!ev.defaultPrevented && _this._isValidMenuOpenKey(ev)) {
            var onMenuClick = _this.props.onMenuClick;
            if (onMenuClick) {
              onMenuClick(ev, _this.props);
            }
            _this._onToggleMenu(false);
            ev.preventDefault();
            ev.stopPropagation();
          }
          if (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) {
            setFocusVisibility(true, ev.target, (_a5 = _this.context) === null || _a5 === void 0 ? void 0 : _a5.registeredProviders);
          }
          if (!(ev.altKey || ev.metaKey) && (isUp || isDown)) {
            if (!_this.state.menuHidden && _this.props.menuProps) {
              var currentShouldFocusOnMount = _this._menuShouldFocusOnMount !== void 0 ? _this._menuShouldFocusOnMount : _this.props.menuProps.shouldFocusOnMount;
              if (!currentShouldFocusOnMount) {
                ev.preventDefault();
                ev.stopPropagation();
                _this._menuShouldFocusOnMount = true;
                _this.forceUpdate();
              }
            }
          }
        };
        _this._onTouchStart = function() {
          if (_this._isSplitButton && _this._splitButtonContainer.current && !("onpointerdown" in _this._splitButtonContainer.current)) {
            _this._handleTouchAndPointerEvent();
          }
        };
        _this._onMenuClick = function(ev) {
          var _a5 = _this.props, onMenuClick = _a5.onMenuClick, menuProps = _a5.menuProps;
          if (onMenuClick) {
            onMenuClick(ev, _this.props);
          }
          var shouldFocusOnContainer = typeof (menuProps === null || menuProps === void 0 ? void 0 : menuProps.shouldFocusOnContainer) === "boolean" ? menuProps.shouldFocusOnContainer : ev.nativeEvent.pointerType === "mouse";
          if (!ev.defaultPrevented) {
            _this._onToggleMenu(shouldFocusOnContainer);
            ev.preventDefault();
            ev.stopPropagation();
          }
        };
        initializeComponentRef(_this);
        _this._async = new Async(_this);
        _this._events = new EventGroup(_this);
        warnConditionallyRequiredProps(COMPONENT_NAME3, props, ["menuProps", "onClick"], "split", _this.props.split);
        warnDeprecations(COMPONENT_NAME3, props, {
          rootProps: void 0,
          description: "secondaryText",
          toggled: "checked"
        });
        _this._labelId = getId();
        _this._descriptionId = getId();
        _this._ariaDescriptionId = getId();
        _this.state = {
          menuHidden: true
        };
        return _this;
      }
      Object.defineProperty(BaseButton2.prototype, "_isSplitButton", {
        get: function() {
          return !!this.props.menuProps && !!this.props.onClick && this.props.split === true;
        },
        enumerable: false,
        configurable: true
      });
      BaseButton2.prototype.render = function() {
        var _a5;
        var _b = this.props, ariaDescription = _b.ariaDescription, ariaLabel = _b.ariaLabel, ariaHidden = _b.ariaHidden, className = _b.className, disabled = _b.disabled, allowDisabledFocus = _b.allowDisabledFocus, primaryDisabled = _b.primaryDisabled, _c = _b.secondaryText, secondaryText = _c === void 0 ? this.props.description : _c, href = _b.href, iconProps = _b.iconProps, menuIconProps = _b.menuIconProps, styles2 = _b.styles, checked = _b.checked, variantClassName = _b.variantClassName, theme = _b.theme, toggle2 = _b.toggle, getClassNames10 = _b.getClassNames, role = _b.role;
        var menuHidden = this.state.menuHidden;
        var isPrimaryButtonDisabled = disabled || primaryDisabled;
        this._classNames = getClassNames10 ? getClassNames10(theme, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, checked, !menuHidden, !!this.props.menuProps, this.props.split, !!allowDisabledFocus) : getBaseButtonClassNames(theme, styles2, className, variantClassName, iconProps && iconProps.className, menuIconProps && menuIconProps.className, isPrimaryButtonDisabled, !!this.props.menuProps, checked, !menuHidden, this.props.split);
        var _d = this, _ariaDescriptionId = _d._ariaDescriptionId, _labelId = _d._labelId, _descriptionId = _d._descriptionId;
        var renderAsAnchor = !isPrimaryButtonDisabled && !!href;
        var tag = renderAsAnchor ? "a" : "button";
        var nativeProps = getNativeProps2(
          // eslint-disable-next-line deprecation/deprecation
          assign(renderAsAnchor ? {} : { type: "button" }, this.props.rootProps, this.props),
          renderAsAnchor ? anchorProperties2 : buttonProperties2,
          [
            "disabled"
            // let disabled buttons be focused and styled as disabled.
          ]
        );
        var resolvedAriaLabel = ariaLabel || nativeProps["aria-label"];
        var ariaDescribedBy = void 0;
        if (ariaDescription) {
          ariaDescribedBy = _ariaDescriptionId;
        } else if (secondaryText && this.props.onRenderDescription !== nullRender) {
          ariaDescribedBy = _descriptionId;
        } else if (nativeProps["aria-describedby"]) {
          ariaDescribedBy = nativeProps["aria-describedby"];
        }
        var ariaLabelledBy = void 0;
        if (nativeProps["aria-labelledby"]) {
          ariaLabelledBy = nativeProps["aria-labelledby"];
        } else if (ariaDescribedBy && !resolvedAriaLabel) {
          ariaLabelledBy = this._hasText() ? _labelId : void 0;
        }
        var dataIsFocusable = this.props["data-is-focusable"] === false || disabled && !allowDisabledFocus || this._isSplitButton ? false : true;
        var isCheckboxTypeRole = role === "menuitemcheckbox" || role === "checkbox";
        var checkedOrPressedValue = isCheckboxTypeRole ? !!checked : toggle2 === true ? !!checked : void 0;
        var buttonProps = assign(nativeProps, (_a5 = {
          className: this._classNames.root,
          // eslint-disable-next-line deprecation/deprecation
          ref: this._mergedRef(this.props.elementRef, this._buttonElement),
          disabled: isPrimaryButtonDisabled && !allowDisabledFocus,
          onKeyDown: this._onKeyDown,
          onKeyPress: this._onKeyPress,
          onKeyUp: this._onKeyUp,
          onMouseDown: this._onMouseDown,
          onMouseUp: this._onMouseUp,
          onClick: this._onClick,
          "aria-label": resolvedAriaLabel,
          "aria-labelledby": ariaLabelledBy,
          "aria-describedby": ariaDescribedBy,
          "aria-disabled": isPrimaryButtonDisabled,
          "data-is-focusable": dataIsFocusable
        }, // aria-pressed attribute should only be present for toggle buttons
        // aria-checked attribute should only be present for toggle buttons with checkbox type role
        _a5[isCheckboxTypeRole ? "aria-checked" : "aria-pressed"] = checkedOrPressedValue, _a5));
        if (ariaHidden) {
          buttonProps["aria-hidden"] = true;
        }
        if (this._isSplitButton) {
          return this._onRenderSplitButtonContent(tag, buttonProps);
        } else if (this.props.menuProps) {
          var _e = this.props.menuProps.id, id = _e === void 0 ? "".concat(this._labelId, "-menu") : _e;
          assign(buttonProps, {
            "aria-expanded": !menuHidden,
            "aria-controls": !menuHidden ? id : null,
            "aria-haspopup": true
          });
        }
        return this._onRenderContent(tag, buttonProps);
      };
      BaseButton2.prototype.componentDidMount = function() {
        if (this._isSplitButton && this._splitButtonContainer.current) {
          if ("onpointerdown" in this._splitButtonContainer.current) {
            this._events.on(this._splitButtonContainer.current, "pointerdown", this._onPointerDown, true);
          }
          if ("onpointerup" in this._splitButtonContainer.current && this.props.onPointerUp) {
            this._events.on(this._splitButtonContainer.current, "pointerup", this.props.onPointerUp, true);
          }
        }
      };
      BaseButton2.prototype.componentDidUpdate = function(prevProps, prevState) {
        if (this.props.onAfterMenuDismiss && !prevState.menuHidden && this.state.menuHidden) {
          this.props.onAfterMenuDismiss();
        }
      };
      BaseButton2.prototype.componentWillUnmount = function() {
        this._async.dispose();
        this._events.dispose();
      };
      BaseButton2.prototype.focus = function() {
        var _a5, _b;
        if (this._isSplitButton && this._splitButtonContainer.current) {
          setFocusVisibility(true, void 0, (_a5 = this.context) === null || _a5 === void 0 ? void 0 : _a5.registeredProviders);
          this._splitButtonContainer.current.focus();
        } else if (this._buttonElement.current) {
          setFocusVisibility(true, void 0, (_b = this.context) === null || _b === void 0 ? void 0 : _b.registeredProviders);
          this._buttonElement.current.focus();
        }
      };
      BaseButton2.prototype.dismissMenu = function() {
        this._dismissMenu();
      };
      BaseButton2.prototype.openMenu = function(shouldFocusOnContainer, shouldFocusOnMount) {
        this._openMenu(shouldFocusOnContainer, shouldFocusOnMount);
      };
      BaseButton2.prototype._onRenderContent = function(tag, buttonProps) {
        var _this = this;
        var props = this.props;
        var Tag = tag;
        var menuIconProps = props.menuIconProps, menuProps = props.menuProps, _a5 = props.onRenderIcon, onRenderIcon = _a5 === void 0 ? this._onRenderIcon : _a5, _b = props.onRenderAriaDescription, onRenderAriaDescription = _b === void 0 ? this._onRenderAriaDescription : _b, _c = props.onRenderChildren, onRenderChildren = _c === void 0 ? this._onRenderChildren : _c, _d = props.onRenderMenu, onRenderMenu = _d === void 0 ? this._onRenderMenu : _d, _e = props.onRenderMenuIcon, onRenderMenuIcon = _e === void 0 ? this._onRenderMenuIcon : _e, disabled = props.disabled;
        var keytipProps = props.keytipProps;
        if (keytipProps && menuProps) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        var Button5 = function(keytipAttributes) {
          return React156.createElement(
            Tag,
            __assign({}, buttonProps, keytipAttributes),
            React156.createElement(
              "span",
              { className: _this._classNames.flexContainer, "data-automationid": "splitbuttonprimary" },
              onRenderIcon(props, _this._onRenderIcon),
              _this._onRenderTextContents(),
              onRenderAriaDescription(props, _this._onRenderAriaDescription),
              onRenderChildren(props, _this._onRenderChildren),
              !_this._isSplitButton && (menuProps || menuIconProps || _this.props.onRenderMenuIcon) && onRenderMenuIcon(_this.props, _this._onRenderMenuIcon),
              menuProps && !menuProps.doNotLayer && _this._shouldRenderMenu() && onRenderMenu(_this._getMenuProps(menuProps), _this._onRenderMenu)
            )
          );
        };
        var Content2 = keytipProps ? (
          // If we're making a split button, we won't put the keytip here
          React156.createElement(KeytipData, { keytipProps: !this._isSplitButton ? keytipProps : void 0, ariaDescribedBy: buttonProps["aria-describedby"], disabled }, function(keytipAttributes) {
            return Button5(keytipAttributes);
          })
        ) : Button5();
        if (menuProps && menuProps.doNotLayer) {
          return React156.createElement(
            React156.Fragment,
            null,
            Content2,
            this._shouldRenderMenu() && onRenderMenu(this._getMenuProps(menuProps), this._onRenderMenu)
          );
        }
        return React156.createElement(
          React156.Fragment,
          null,
          Content2,
          React156.createElement(FocusRects, null)
        );
      };
      BaseButton2.prototype._shouldRenderMenu = function() {
        var menuHidden = this.state.menuHidden;
        var _a5 = this.props, persistMenu = _a5.persistMenu, renderPersistedMenuHiddenOnMount = _a5.renderPersistedMenuHiddenOnMount;
        if (!menuHidden) {
          return true;
        } else if (persistMenu && (this._renderedVisibleMenu || renderPersistedMenuHiddenOnMount)) {
          return true;
        }
        return false;
      };
      BaseButton2.prototype._hasText = function() {
        return this.props.text !== null && (this.props.text !== void 0 || typeof this.props.children === "string");
      };
      BaseButton2.prototype._getMenuProps = function(menuProps) {
        var persistMenu = this.props.persistMenu;
        var menuHidden = this.state.menuHidden;
        if (!menuProps.ariaLabel && !menuProps.labelElementId && this._hasText()) {
          menuProps = __assign(__assign({}, menuProps), { labelElementId: this._labelId });
        }
        return __assign(__assign({ id: this._labelId + "-menu", directionalHint: DirectionalHint.bottomLeftEdge }, menuProps), { shouldFocusOnContainer: this._menuShouldFocusOnContainer, shouldFocusOnMount: this._menuShouldFocusOnMount, hidden: persistMenu ? menuHidden : void 0, className: css("ms-BaseButton-menuhost", menuProps.className), target: this._isSplitButton ? this._splitButtonContainer.current : this._buttonElement.current, onDismiss: this._onDismissMenu });
      };
      BaseButton2.prototype._onRenderSplitButtonContent = function(tag, buttonProps) {
        var _this = this;
        var _a5 = this.props, _b = _a5.styles, styles2 = _b === void 0 ? {} : _b, disabled = _a5.disabled, allowDisabledFocus = _a5.allowDisabledFocus, checked = _a5.checked, getSplitButtonClassNames2 = _a5.getSplitButtonClassNames, primaryDisabled = _a5.primaryDisabled, menuProps = _a5.menuProps, toggle2 = _a5.toggle, role = _a5.role, primaryActionButtonProps = _a5.primaryActionButtonProps;
        var keytipProps = this.props.keytipProps;
        var menuHidden = this.state.menuHidden;
        var classNames2 = getSplitButtonClassNames2 ? getSplitButtonClassNames2(!!disabled, !menuHidden, !!checked, !!allowDisabledFocus) : styles2 && getSplitButtonClassNames(styles2, !!disabled, !menuHidden, !!checked, !!primaryDisabled);
        assign(buttonProps, {
          onClick: void 0,
          onPointerDown: void 0,
          onPointerUp: void 0,
          tabIndex: -1,
          "data-is-focusable": false
        });
        if (keytipProps && menuProps) {
          keytipProps = this._getMemoizedMenuButtonKeytipProps(keytipProps);
        }
        var containerProps = getNativeProps2(buttonProps, [], ["disabled"]);
        if (primaryActionButtonProps) {
          assign(buttonProps, primaryActionButtonProps);
        }
        var SplitButton2 = function(keytipAttributes) {
          return React156.createElement(
            "div",
            __assign({}, containerProps, { "data-ktp-target": keytipAttributes ? keytipAttributes["data-ktp-target"] : void 0, role: role ? role : "button", "aria-disabled": disabled, "aria-haspopup": true, "aria-expanded": !menuHidden, "aria-pressed": toggle2 ? !!checked : void 0, "aria-describedby": mergeAriaAttributeValues(buttonProps["aria-describedby"], keytipAttributes ? keytipAttributes["aria-describedby"] : void 0), className: classNames2 && classNames2.splitButtonContainer, onKeyDown: _this._onSplitButtonContainerKeyDown, onTouchStart: _this._onTouchStart, ref: _this._splitButtonContainer, "data-is-focusable": true, onClick: !disabled && !primaryDisabled ? _this._onSplitButtonPrimaryClick : void 0, tabIndex: !disabled && !primaryDisabled || allowDisabledFocus ? 0 : void 0, "aria-roledescription": buttonProps["aria-roledescription"], onFocusCapture: _this._onSplitContainerFocusCapture }),
            React156.createElement(
              "span",
              { style: { display: "flex", width: "100%" } },
              _this._onRenderContent(tag, buttonProps),
              _this._onRenderSplitButtonMenuButton(classNames2, keytipAttributes),
              _this._onRenderSplitButtonDivider(classNames2)
            )
          );
        };
        return keytipProps ? React156.createElement(KeytipData, { keytipProps, disabled }, function(keytipAttributes) {
          return SplitButton2(keytipAttributes);
        }) : SplitButton2();
      };
      BaseButton2.prototype._onRenderSplitButtonDivider = function(classNames2) {
        if (classNames2 && classNames2.divider) {
          var onClick = function(ev) {
            ev.stopPropagation();
          };
          return React156.createElement("span", { className: classNames2.divider, "aria-hidden": true, onClick });
        }
        return null;
      };
      BaseButton2.prototype._onRenderSplitButtonMenuButton = function(classNames2, keytipAttributes) {
        var _a5 = this.props, allowDisabledFocus = _a5.allowDisabledFocus, checked = _a5.checked, disabled = _a5.disabled, splitButtonMenuProps = _a5.splitButtonMenuProps, splitButtonAriaLabel = _a5.splitButtonAriaLabel, primaryDisabled = _a5.primaryDisabled;
        var menuHidden = this.state.menuHidden;
        var menuIconProps = this.props.menuIconProps;
        if (menuIconProps === void 0) {
          menuIconProps = {
            iconName: "ChevronDown"
          };
        }
        var splitButtonProps = __assign(__assign({}, splitButtonMenuProps), { styles: classNames2, checked, disabled, allowDisabledFocus, onClick: this._onMenuClick, menuProps: void 0, iconProps: __assign(__assign({}, menuIconProps), { className: this._classNames.menuIcon }), ariaLabel: splitButtonAriaLabel, "aria-haspopup": true, "aria-expanded": !menuHidden, "data-is-focusable": false });
        return React156.createElement(BaseButton2, __assign({}, splitButtonProps, { "data-ktp-execute-target": keytipAttributes ? keytipAttributes["data-ktp-execute-target"] : keytipAttributes, onMouseDown: this._onMouseDown, tabIndex: primaryDisabled && !allowDisabledFocus ? 0 : -1 }));
      };
      BaseButton2.prototype._onPointerDown = function(ev) {
        var onPointerDown = this.props.onPointerDown;
        if (onPointerDown) {
          onPointerDown(ev);
        }
        if (ev.pointerType === "touch") {
          this._handleTouchAndPointerEvent();
          ev.preventDefault();
          ev.stopImmediatePropagation();
        }
      };
      BaseButton2.prototype._handleTouchAndPointerEvent = function() {
        var _this = this;
        if (this._lastTouchTimeoutId !== void 0) {
          this._async.clearTimeout(this._lastTouchTimeoutId);
          this._lastTouchTimeoutId = void 0;
        }
        this._processingTouch = true;
        this._lastTouchTimeoutId = this._async.setTimeout(function() {
          _this._processingTouch = false;
          _this._lastTouchTimeoutId = void 0;
          if (_this.state.menuHidden) {
            _this.focus();
          }
        }, TouchIdleDelay2);
      };
      BaseButton2.prototype._isValidMenuOpenKey = function(ev) {
        if (this.props.menuTriggerKeyCode) {
          return ev.which === this.props.menuTriggerKeyCode;
        } else if (this.props.menuProps) {
          return ev.which === KeyCodes.down && (ev.altKey || ev.metaKey);
        }
        return false;
      };
      BaseButton2.defaultProps = {
        baseClassName: "ms-Button",
        styles: {},
        split: false
      };
      BaseButton2.contextType = FocusRectsContext;
      return BaseButton2;
    }(React156.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.js
  var React157 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Button/BaseButton.styles.js
  var noOutline = {
    outline: 0
  };
  var iconStyle = function(fontSize) {
    return {
      fontSize,
      margin: "0 4px",
      height: "16px",
      lineHeight: "16px",
      textAlign: "center",
      flexShrink: 0
    };
  };
  var getStyles8 = memoizeFunction(function(theme) {
    var _a5, _b;
    var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
    var border = semanticColors.buttonBorder;
    var disabledBackground = semanticColors.disabledBackground;
    var disabledText = semanticColors.disabledText;
    var buttonHighContrastFocus = {
      left: -2,
      top: -2,
      bottom: -2,
      right: -2,
      outlineColor: "ButtonText"
    };
    return {
      root: [
        getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: "transparent" }),
        theme.fonts.medium,
        {
          border: "1px solid " + border,
          borderRadius: effects.roundedCorner2,
          boxSizing: "border-box",
          cursor: "pointer",
          display: "inline-block",
          padding: "0 16px",
          textDecoration: "none",
          textAlign: "center",
          userSelect: "none",
          selectors: {
            // IE11 workaround for preventing shift of child elements of a button when active.
            ":active > span": {
              position: "relative",
              left: 0,
              top: 0
            }
          }
        }
      ],
      rootDisabled: [
        getFocusStyle(theme, { inset: 1, highContrastStyle: buttonHighContrastFocus, borderColor: "transparent" }),
        {
          backgroundColor: disabledBackground,
          borderColor: disabledBackground,
          color: disabledText,
          cursor: "default",
          selectors: {
            ":hover": noOutline,
            ":focus": noOutline
          }
        }
      ],
      iconDisabled: {
        color: disabledText,
        selectors: (_a5 = {}, _a5[HighContrastSelector] = {
          color: "GrayText"
        }, _a5)
      },
      menuIconDisabled: {
        color: disabledText,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "GrayText"
        }, _b)
      },
      flexContainer: {
        display: "flex",
        height: "100%",
        flexWrap: "nowrap",
        justifyContent: "center",
        alignItems: "center"
      },
      description: {
        display: "block"
      },
      textContainer: {
        flexGrow: 1,
        display: "block"
      },
      icon: iconStyle(fonts.mediumPlus.fontSize),
      menuIcon: iconStyle(fonts.small.fontSize),
      label: {
        margin: "0 4px",
        lineHeight: "100%",
        display: "block"
      },
      screenReaderText: hiddenContentStyle
    };
  });

  // ../node_modules/@fluentui/react/lib/components/Button/SplitButton/SplitButton.styles.js
  var getStyles9 = memoizeFunction(function(theme, customStyles) {
    var _a5, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    var effects = theme.effects, palette = theme.palette, semanticColors = theme.semanticColors;
    var buttonHighContrastFocus = {
      left: -2,
      top: -2,
      bottom: -2,
      right: -2,
      border: "none"
    };
    var splitButtonDividerBaseStyles2 = {
      position: "absolute",
      width: 1,
      right: 31,
      top: 8,
      bottom: 8
    };
    var splitButtonStyles2 = {
      splitButtonContainer: [
        getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2, pointerEvents: "none" }),
        {
          display: "inline-flex",
          selectors: {
            ".ms-Button--default": {
              borderTopRightRadius: "0",
              borderBottomRightRadius: "0",
              borderRight: "none",
              flexGrow: "1"
            },
            ".ms-Button--primary": {
              borderTopRightRadius: "0",
              borderBottomRightRadius: "0",
              border: "none",
              flexGrow: "1",
              selectors: (_a5 = {}, _a5[HighContrastSelector] = __assign({ color: "WindowText", backgroundColor: "Window", border: "1px solid WindowText", borderRightWidth: "0" }, getHighContrastNoAdjustStyle()), _a5[":hover"] = {
                border: "none"
              }, _a5[":active"] = {
                border: "none"
              }, _a5)
            },
            ".ms-Button--primary + .ms-Button": {
              border: "none",
              selectors: (_b = {}, _b[HighContrastSelector] = {
                border: "1px solid WindowText",
                borderLeftWidth: "0"
              }, _b)
            }
          }
        }
      ],
      splitButtonContainerHovered: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_c = {}, _c[HighContrastSelector] = {
              color: "Window",
              backgroundColor: "Highlight"
            }, _c)
          },
          ".ms-Button.is-disabled": {
            color: semanticColors.buttonTextDisabled,
            selectors: (_d = {}, _d[HighContrastSelector] = {
              color: "GrayText",
              borderColor: "GrayText",
              backgroundColor: "Window"
            }, _d)
          }
        }
      },
      splitButtonContainerChecked: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_e = {}, _e[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText" }, getHighContrastNoAdjustStyle()), _e)
          }
        }
      },
      splitButtonContainerCheckedHovered: {
        selectors: {
          ".ms-Button--primary": {
            selectors: (_f = {}, _f[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText" }, getHighContrastNoAdjustStyle()), _f)
          }
        }
      },
      splitButtonContainerFocused: {
        outline: "none!important"
      },
      splitButtonMenuButton: (_g = {
        padding: 6,
        height: "auto",
        boxSizing: "border-box",
        borderRadius: 0,
        borderTopRightRadius: effects.roundedCorner2,
        borderBottomRightRadius: effects.roundedCorner2,
        border: "1px solid ".concat(palette.neutralSecondaryAlt),
        borderLeft: "none",
        outline: "transparent",
        userSelect: "none",
        display: "inline-block",
        textDecoration: "none",
        textAlign: "center",
        cursor: "pointer",
        verticalAlign: "top",
        width: 32,
        marginLeft: -1,
        marginTop: 0,
        marginRight: 0,
        marginBottom: 0
      }, _g[HighContrastSelector] = {
        ".ms-Button-menuIcon": {
          color: "WindowText"
        }
      }, _g),
      splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles2), { selectors: (_h = {}, _h[HighContrastSelector] = {
        backgroundColor: "WindowText"
      }, _h) }),
      splitButtonDividerDisabled: __assign(__assign({}, splitButtonDividerBaseStyles2), { selectors: (_j = {}, _j[HighContrastSelector] = {
        backgroundColor: "GrayText"
      }, _j) }),
      splitButtonMenuButtonDisabled: {
        pointerEvents: "none",
        border: "none",
        selectors: (_k = {
          ":hover": {
            cursor: "default"
          },
          ".ms-Button--primary": {
            selectors: (_l = {}, _l[HighContrastSelector] = {
              color: "GrayText",
              borderColor: "GrayText",
              backgroundColor: "Window"
            }, _l)
          },
          ".ms-Button-menuIcon": {
            selectors: (_m = {}, _m[HighContrastSelector] = {
              color: "GrayText"
            }, _m)
          }
        }, _k[HighContrastSelector] = {
          color: "GrayText",
          border: "1px solid GrayText",
          backgroundColor: "Window"
        }, _k)
      },
      splitButtonFlexContainer: {
        display: "flex",
        height: "100%",
        flexWrap: "nowrap",
        justifyContent: "center",
        alignItems: "center"
      },
      splitButtonContainerDisabled: {
        outline: "none",
        border: "none",
        selectors: (_o = {}, _o[HighContrastSelector] = __assign({ color: "GrayText", borderColor: "GrayText", backgroundColor: "Window" }, getHighContrastNoAdjustStyle()), _o)
      },
      splitButtonMenuFocused: __assign({}, getFocusStyle(theme, { highContrastStyle: buttonHighContrastFocus, inset: 2 }))
    };
    return concatStyleSets(splitButtonStyles2, customStyles);
  });

  // ../node_modules/@fluentui/react/lib/components/Button/ButtonThemes.js
  var splitButtonDividerBaseStyles = function() {
    return {
      position: "absolute",
      width: 1,
      right: 31,
      top: 8,
      bottom: 8
    };
  };
  function standardStyles(theme) {
    var _a5, _b, _c, _d, _e;
    var s2 = theme.semanticColors, p2 = theme.palette;
    var buttonBackground = s2.buttonBackground;
    var buttonBackgroundPressed = s2.buttonBackgroundPressed;
    var buttonBackgroundHovered = s2.buttonBackgroundHovered;
    var buttonBackgroundDisabled = s2.buttonBackgroundDisabled;
    var buttonText = s2.buttonText;
    var buttonTextHovered = s2.buttonTextHovered;
    var buttonTextDisabled = s2.buttonTextDisabled;
    var buttonTextChecked = s2.buttonTextChecked;
    var buttonTextCheckedHovered = s2.buttonTextCheckedHovered;
    return {
      root: {
        backgroundColor: buttonBackground,
        color: buttonText
      },
      rootHovered: {
        backgroundColor: buttonBackgroundHovered,
        color: buttonTextHovered,
        selectors: (_a5 = {}, _a5[HighContrastSelector] = {
          borderColor: "Highlight",
          color: "Highlight"
        }, _a5)
      },
      rootPressed: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootExpanded: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootChecked: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextChecked
      },
      rootCheckedHovered: {
        backgroundColor: buttonBackgroundPressed,
        color: buttonTextCheckedHovered
      },
      rootDisabled: {
        color: buttonTextDisabled,
        backgroundColor: buttonBackgroundDisabled,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "GrayText",
          borderColor: "GrayText",
          backgroundColor: "Window"
        }, _b)
      },
      // Split button styles
      splitButtonContainer: {
        selectors: (_c = {}, _c[HighContrastSelector] = {
          border: "none"
        }, _c)
      },
      splitButtonMenuButton: {
        color: p2.white,
        backgroundColor: "transparent",
        selectors: {
          ":hover": {
            backgroundColor: p2.neutralLight,
            selectors: (_d = {}, _d[HighContrastSelector] = {
              color: "Highlight"
            }, _d)
          }
        }
      },
      splitButtonMenuButtonDisabled: {
        backgroundColor: s2.buttonBackgroundDisabled,
        selectors: {
          ":hover": {
            backgroundColor: s2.buttonBackgroundDisabled
          }
        }
      },
      splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles()), { backgroundColor: p2.neutralTertiaryAlt, selectors: (_e = {}, _e[HighContrastSelector] = {
        backgroundColor: "WindowText"
      }, _e) }),
      splitButtonDividerDisabled: {
        backgroundColor: theme.palette.neutralTertiaryAlt
      },
      splitButtonMenuButtonChecked: {
        backgroundColor: p2.neutralQuaternaryAlt,
        selectors: {
          ":hover": {
            backgroundColor: p2.neutralQuaternaryAlt
          }
        }
      },
      splitButtonMenuButtonExpanded: {
        backgroundColor: p2.neutralQuaternaryAlt,
        selectors: {
          ":hover": {
            backgroundColor: p2.neutralQuaternaryAlt
          }
        }
      },
      splitButtonMenuIcon: {
        color: s2.buttonText
      },
      splitButtonMenuIconDisabled: {
        color: s2.buttonTextDisabled
      }
    };
  }
  function primaryStyles(theme) {
    var _a5, _b, _c, _d, _e, _f, _g, _h, _j;
    var p2 = theme.palette, s2 = theme.semanticColors;
    return {
      root: {
        backgroundColor: s2.primaryButtonBackground,
        border: "1px solid ".concat(s2.primaryButtonBackground),
        color: s2.primaryButtonText,
        selectors: (_a5 = {}, _a5[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText", borderColor: "WindowText" }, getHighContrastNoAdjustStyle()), _a5[".".concat(IsFocusVisibleClassName, " &:focus")] = {
          selectors: {
            ":after": {
              border: "none",
              outlineColor: p2.white
            }
          }
        }, _a5)
      },
      rootHovered: {
        backgroundColor: s2.primaryButtonBackgroundHovered,
        border: "1px solid ".concat(s2.primaryButtonBackgroundHovered),
        color: s2.primaryButtonTextHovered,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "Window",
          backgroundColor: "Highlight",
          borderColor: "Highlight"
        }, _b)
      },
      rootPressed: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        border: "1px solid ".concat(s2.primaryButtonBackgroundPressed),
        color: s2.primaryButtonTextPressed,
        selectors: (_c = {}, _c[HighContrastSelector] = __assign({ color: "Window", backgroundColor: "WindowText", borderColor: "WindowText" }, getHighContrastNoAdjustStyle()), _c)
      },
      rootExpanded: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        color: s2.primaryButtonTextPressed
      },
      rootChecked: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        color: s2.primaryButtonTextPressed
      },
      rootCheckedHovered: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        color: s2.primaryButtonTextPressed
      },
      rootDisabled: {
        color: s2.primaryButtonTextDisabled,
        backgroundColor: s2.primaryButtonBackgroundDisabled,
        selectors: (_d = {}, _d[HighContrastSelector] = {
          color: "GrayText",
          borderColor: "GrayText",
          backgroundColor: "Window"
        }, _d)
      },
      // Split button styles
      splitButtonContainer: {
        selectors: (_e = {}, _e[HighContrastSelector] = {
          border: "none"
        }, _e)
      },
      splitButtonDivider: __assign(__assign({}, splitButtonDividerBaseStyles()), { backgroundColor: p2.white, selectors: (_f = {}, _f[HighContrastSelector] = {
        backgroundColor: "Window"
      }, _f) }),
      splitButtonMenuButton: {
        backgroundColor: s2.primaryButtonBackground,
        color: s2.primaryButtonText,
        selectors: (_g = {}, _g[HighContrastSelector] = {
          backgroundColor: "Canvas"
        }, _g[":hover"] = {
          backgroundColor: s2.primaryButtonBackgroundHovered,
          selectors: (_h = {}, _h[HighContrastSelector] = {
            color: "Highlight"
          }, _h)
        }, _g)
      },
      splitButtonMenuButtonDisabled: {
        backgroundColor: s2.primaryButtonBackgroundDisabled,
        selectors: {
          ":hover": {
            backgroundColor: s2.primaryButtonBackgroundDisabled
          }
        }
      },
      splitButtonMenuButtonChecked: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        selectors: {
          ":hover": {
            backgroundColor: s2.primaryButtonBackgroundPressed
          }
        }
      },
      splitButtonMenuButtonExpanded: {
        backgroundColor: s2.primaryButtonBackgroundPressed,
        selectors: {
          ":hover": {
            backgroundColor: s2.primaryButtonBackgroundPressed
          }
        }
      },
      splitButtonMenuIcon: {
        color: s2.primaryButtonText
      },
      splitButtonMenuIconDisabled: {
        color: p2.neutralTertiary,
        selectors: (_j = {}, _j[HighContrastSelector] = {
          color: "GrayText"
        }, _j)
      }
    };
  }

  // ../node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.styles.js
  var DEFAULT_BUTTON_HEIGHT = "32px";
  var DEFAULT_BUTTON_MIN_WIDTH = "80px";
  var getStyles10 = memoizeFunction(function(theme, customStyles, primary) {
    var baseButtonStyles = getStyles8(theme);
    var splitButtonStyles2 = getStyles9(theme);
    var defaultButtonStyles = {
      root: {
        minWidth: DEFAULT_BUTTON_MIN_WIDTH,
        height: DEFAULT_BUTTON_HEIGHT
      },
      label: {
        fontWeight: FontWeights.semibold
      }
    };
    return concatStyleSets(baseButtonStyles, defaultButtonStyles, primary ? primaryStyles(theme) : standardStyles(theme), splitButtonStyles2, customStyles);
  });

  // ../node_modules/@fluentui/react/lib/components/Button/DefaultButton/DefaultButton.js
  var DefaultButton = (
    /** @class */
    function(_super) {
      __extends(DefaultButton2, _super);
      function DefaultButton2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      DefaultButton2.prototype.render = function() {
        var _a5 = this.props, _b = _a5.primary, primary = _b === void 0 ? false : _b, styles2 = _a5.styles, theme = _a5.theme;
        return React157.createElement(BaseButton, __assign({}, this.props, { variantClassName: primary ? "ms-Button--primary" : "ms-Button--default", styles: getStyles10(theme, styles2, primary), onRenderDescription: nullRender }));
      };
      DefaultButton2 = __decorate([
        customizable("DefaultButton", ["theme", "styles"], true)
      ], DefaultButton2);
      return DefaultButton2;
    }(React157.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Button/PrimaryButton/PrimaryButton.js
  var React158 = __toESM(require_react());
  var PrimaryButton = (
    /** @class */
    function(_super) {
      __extends(PrimaryButton3, _super);
      function PrimaryButton3() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      PrimaryButton3.prototype.render = function() {
        return React158.createElement(DefaultButton, __assign({}, this.props, { primary: true, onRenderDescription: nullRender }));
      };
      PrimaryButton3 = __decorate([
        customizable("PrimaryButton", ["theme", "styles"], true)
      ], PrimaryButton3);
      return PrimaryButton3;
    }(React158.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Label/Label.base.js
  var React159 = __toESM(require_react());
  var getClassNames8 = classNamesFunction({
    // Label is used a lot by other components.
    // It's likely to see expected cases which pass different className to the Label.
    // Therefore setting a larger cache size.
    cacheSize: 100
  });
  var LabelBase = (
    /** @class */
    function(_super) {
      __extends(LabelBase2, _super);
      function LabelBase2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      LabelBase2.prototype.render = function() {
        var _a5 = this.props, _b = _a5.as, RootType = _b === void 0 ? "label" : _b, children = _a5.children, className = _a5.className, disabled = _a5.disabled, styles2 = _a5.styles, required = _a5.required, theme = _a5.theme;
        var classNames2 = getClassNames8(styles2, {
          className,
          disabled,
          required,
          theme
        });
        return React159.createElement(RootType, __assign({}, getNativeProps2(this.props, divProperties), { className: classNames2.root }), children);
      };
      return LabelBase2;
    }(React159.Component)
  );

  // ../node_modules/@fluentui/react/lib/components/Label/Label.styles.js
  var getStyles11 = function(props) {
    var _a5;
    var theme = props.theme, className = props.className, disabled = props.disabled, required = props.required;
    var semanticColors = theme.semanticColors;
    var labelFontWeight = FontWeights.semibold;
    var labelColor = semanticColors.bodyText;
    var labelDisabledColor = semanticColors.disabledBodyText;
    var labelRequiredStarColor = semanticColors.errorText;
    return {
      root: [
        "ms-Label",
        theme.fonts.medium,
        {
          fontWeight: labelFontWeight,
          color: labelColor,
          boxSizing: "border-box",
          boxShadow: "none",
          margin: 0,
          display: "block",
          padding: "5px 0",
          wordWrap: "break-word",
          overflowWrap: "break-word"
        },
        disabled && {
          color: labelDisabledColor,
          selectors: (_a5 = {}, _a5[HighContrastSelector] = __assign({ color: "GrayText" }, getHighContrastNoAdjustStyle()), _a5)
        },
        required && {
          selectors: {
            "::after": {
              content: "' *'",
              color: labelRequiredStarColor,
              paddingRight: 12
            }
          }
        },
        className
      ]
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Label/Label.js
  var Label2 = styled(LabelBase, getStyles11, void 0, {
    scope: "Label"
  });

  // ../node_modules/@fluentui/react/lib/components/TextField/TextField.base.js
  var React160 = __toESM(require_react());
  var getClassNames9 = classNamesFunction();
  var DEFAULT_STATE_VALUE = "";
  var COMPONENT_NAME4 = "TextField";
  var REVEAL_ICON_NAME = "RedEye";
  var HIDE_ICON_NAME = "Hide";
  var TextFieldBase = (
    /** @class */
    function(_super) {
      __extends(TextFieldBase2, _super);
      function TextFieldBase2(props) {
        var _this = _super.call(this, props) || this;
        _this._textElement = React160.createRef();
        _this._onFocus = function(ev) {
          if (_this.props.onFocus) {
            _this.props.onFocus(ev);
          }
          _this.setState({ isFocused: true }, function() {
            if (_this.props.validateOnFocusIn) {
              _this._validate(_this.value);
            }
          });
        };
        _this._onBlur = function(ev) {
          if (_this.props.onBlur) {
            _this.props.onBlur(ev);
          }
          _this.setState({ isFocused: false }, function() {
            if (_this.props.validateOnFocusOut) {
              _this._validate(_this.value);
            }
          });
        };
        _this._onRenderLabel = function(props2) {
          var label6 = props2.label, required = props2.required;
          var labelStyles2 = _this._classNames.subComponentStyles ? _this._classNames.subComponentStyles.label : void 0;
          if (label6) {
            return React160.createElement(Label2, { required, htmlFor: _this._id, styles: labelStyles2, disabled: props2.disabled, id: _this._labelId }, props2.label);
          }
          return null;
        };
        _this._onRenderDescription = function(props2) {
          if (props2.description) {
            return React160.createElement("span", { className: _this._classNames.description }, props2.description);
          }
          return null;
        };
        _this._onRevealButtonClick = function(event) {
          _this.setState(function(prevState) {
            return { isRevealingPassword: !prevState.isRevealingPassword };
          });
        };
        _this._onInputChange = function(event) {
          var _a6, _b;
          var element2 = event.target;
          var value = element2.value;
          var previousValue = _getValue(_this.props, _this.state) || "";
          if (value === void 0 || value === _this._lastChangeValue || value === previousValue) {
            _this._lastChangeValue = void 0;
            return;
          }
          _this._lastChangeValue = value;
          (_b = (_a6 = _this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a6, event, value);
          if (!_this._isControlled) {
            _this.setState({ uncontrolledValue: value });
          }
        };
        initializeComponentRef(_this);
        _this._async = new Async(_this);
        if (true) {
          warnMutuallyExclusive(COMPONENT_NAME4, props, {
            errorMessage: "onGetErrorMessage"
          });
        }
        _this._fallbackId = getId(COMPONENT_NAME4);
        _this._descriptionId = getId(COMPONENT_NAME4 + "Description");
        _this._labelId = getId(COMPONENT_NAME4 + "Label");
        _this._prefixId = getId(COMPONENT_NAME4 + "Prefix");
        _this._suffixId = getId(COMPONENT_NAME4 + "Suffix");
        _this._warnControlledUsage();
        var _a5 = props.defaultValue, defaultValue2 = _a5 === void 0 ? DEFAULT_STATE_VALUE : _a5;
        if (typeof defaultValue2 === "number") {
          defaultValue2 = String(defaultValue2);
        }
        _this.state = {
          uncontrolledValue: _this._isControlled ? void 0 : defaultValue2,
          isFocused: false,
          errorMessage: ""
        };
        _this._delayedValidate = _this._async.debounce(_this._validate, _this.props.deferredValidationTime);
        _this._lastValidation = 0;
        return _this;
      }
      Object.defineProperty(TextFieldBase2.prototype, "value", {
        /**
         * Gets the current value of the text field.
         */
        get: function() {
          return _getValue(this.props, this.state);
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype.componentDidMount = function() {
        this._adjustInputHeight();
        if (this.props.validateOnLoad) {
          this._validate(this.value);
        }
      };
      TextFieldBase2.prototype.componentWillUnmount = function() {
        this._async.dispose();
      };
      TextFieldBase2.prototype.getSnapshotBeforeUpdate = function(prevProps, prevState) {
        return {
          selection: [this.selectionStart, this.selectionEnd]
        };
      };
      TextFieldBase2.prototype.componentDidUpdate = function(prevProps, prevState, snapshot) {
        var props = this.props;
        var _a5 = (snapshot || {}).selection, selection = _a5 === void 0 ? [null, null] : _a5;
        var start2 = selection[0], end2 = selection[1];
        if (!!prevProps.multiline !== !!props.multiline && prevState.isFocused) {
          this.focus();
          if (start2 !== null && end2 !== null && start2 >= 0 && end2 >= 0) {
            this.setSelectionRange(start2, end2);
          }
        }
        if (prevProps.value !== props.value) {
          this._lastChangeValue = void 0;
        }
        var prevValue = _getValue(prevProps, prevState);
        var value = this.value;
        if (prevValue !== value) {
          this._warnControlledUsage(prevProps);
          if (this.state.errorMessage && !props.errorMessage) {
            this.setState({ errorMessage: "" });
          }
          this._adjustInputHeight();
          if (_shouldValidateAllChanges(props)) {
            this._delayedValidate(value);
          }
        }
      };
      TextFieldBase2.prototype.render = function() {
        var _a5 = this.props, borderless = _a5.borderless, className = _a5.className, disabled = _a5.disabled, invalid = _a5.invalid, iconProps = _a5.iconProps, inputClassName2 = _a5.inputClassName, label6 = _a5.label, multiline = _a5.multiline, required = _a5.required, underlined = _a5.underlined, prefix2 = _a5.prefix, resizable = _a5.resizable, suffix = _a5.suffix, theme = _a5.theme, styles2 = _a5.styles, autoAdjustHeight = _a5.autoAdjustHeight, canRevealPassword = _a5.canRevealPassword, revealPasswordAriaLabel = _a5.revealPasswordAriaLabel, type = _a5.type, _b = _a5.onRenderPrefix, onRenderPrefix = _b === void 0 ? this._onRenderPrefix : _b, _c = _a5.onRenderSuffix, onRenderSuffix = _c === void 0 ? this._onRenderSuffix : _c, _d = _a5.onRenderLabel, onRenderLabel = _d === void 0 ? this._onRenderLabel : _d, _e = _a5.onRenderDescription, onRenderDescription = _e === void 0 ? this._onRenderDescription : _e;
        var _f = this.state, isFocused = _f.isFocused, isRevealingPassword = _f.isRevealingPassword;
        var errorMessage = this._errorMessage;
        var isInvalid = typeof invalid === "boolean" ? invalid : !!errorMessage;
        var hasRevealButton = !!canRevealPassword && type === "password" && _browserNeedsRevealButton();
        var classNames2 = this._classNames = getClassNames9(styles2, {
          theme,
          className,
          disabled,
          focused: isFocused,
          required,
          multiline,
          hasLabel: !!label6,
          hasErrorMessage: isInvalid,
          borderless,
          resizable,
          hasIcon: !!iconProps,
          underlined,
          inputClassName: inputClassName2,
          autoAdjustHeight,
          hasRevealButton
        });
        return (
          // eslint-disable-next-line deprecation/deprecation
          React160.createElement(
            "div",
            { ref: this.props.elementRef, className: classNames2.root },
            React160.createElement(
              "div",
              { className: classNames2.wrapper },
              onRenderLabel(this.props, this._onRenderLabel),
              React160.createElement(
                "div",
                { className: classNames2.fieldGroup },
                (prefix2 !== void 0 || this.props.onRenderPrefix) && React160.createElement("div", { className: classNames2.prefix, id: this._prefixId }, onRenderPrefix(this.props, this._onRenderPrefix)),
                multiline ? this._renderTextArea() : this._renderInput(),
                iconProps && React160.createElement(Icon, __assign({ className: classNames2.icon }, iconProps)),
                hasRevealButton && // Explicitly set type="button" since the default button type within a form is "submit"
                React160.createElement(
                  "button",
                  { "aria-label": revealPasswordAriaLabel, className: classNames2.revealButton, onClick: this._onRevealButtonClick, "aria-pressed": !!isRevealingPassword, type: "button" },
                  React160.createElement(
                    "span",
                    { className: classNames2.revealSpan },
                    React160.createElement(Icon, { className: classNames2.revealIcon, iconName: isRevealingPassword ? HIDE_ICON_NAME : REVEAL_ICON_NAME })
                  )
                ),
                (suffix !== void 0 || this.props.onRenderSuffix) && React160.createElement("div", { className: classNames2.suffix, id: this._suffixId }, onRenderSuffix(this.props, this._onRenderSuffix))
              )
            ),
            this._isDescriptionAvailable && React160.createElement(
              "span",
              { id: this._descriptionId },
              onRenderDescription(this.props, this._onRenderDescription),
              errorMessage && React160.createElement(
                "div",
                { role: "alert" },
                React160.createElement(DelayedRender, null, this._renderErrorMessage())
              )
            )
          )
        );
      };
      TextFieldBase2.prototype.focus = function() {
        if (this._textElement.current) {
          this._textElement.current.focus();
        }
      };
      TextFieldBase2.prototype.blur = function() {
        if (this._textElement.current) {
          this._textElement.current.blur();
        }
      };
      TextFieldBase2.prototype.select = function() {
        if (this._textElement.current) {
          this._textElement.current.select();
        }
      };
      TextFieldBase2.prototype.setSelectionStart = function(value) {
        if (this._textElement.current) {
          this._textElement.current.selectionStart = value;
        }
      };
      TextFieldBase2.prototype.setSelectionEnd = function(value) {
        if (this._textElement.current) {
          this._textElement.current.selectionEnd = value;
        }
      };
      Object.defineProperty(TextFieldBase2.prototype, "selectionStart", {
        /**
         * Gets the selection start of the text field
         */
        get: function() {
          return this._textElement.current ? this._textElement.current.selectionStart : -1;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextFieldBase2.prototype, "selectionEnd", {
        /**
         * Gets the selection end of the text field
         */
        get: function() {
          return this._textElement.current ? this._textElement.current.selectionEnd : -1;
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype.setSelectionRange = function(start2, end2) {
        if (this._textElement.current) {
          this._textElement.current.setSelectionRange(start2, end2);
        }
      };
      TextFieldBase2.prototype._warnControlledUsage = function(prevProps) {
        warnControlledUsage({
          componentId: this._id,
          componentName: COMPONENT_NAME4,
          props: this.props,
          oldProps: prevProps,
          valueProp: "value",
          defaultValueProp: "defaultValue",
          onChangeProp: "onChange",
          readOnlyProp: "readOnly"
        });
        if (this.props.value === null && !this._hasWarnedNullValue) {
          this._hasWarnedNullValue = true;
          warn("Warning: 'value' prop on '".concat(COMPONENT_NAME4, "' should not be null. Consider using an ") + "empty string to clear the component or undefined to indicate an uncontrolled component.");
        }
      };
      Object.defineProperty(TextFieldBase2.prototype, "_id", {
        /** Returns `props.id` if available, or a fallback if not. */
        get: function() {
          return this.props.id || this._fallbackId;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(TextFieldBase2.prototype, "_isControlled", {
        get: function() {
          return isControlled(this.props, "value");
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype._onRenderPrefix = function(props) {
        var prefix2 = props.prefix;
        return React160.createElement("span", { style: { paddingBottom: "1px" } }, prefix2);
      };
      TextFieldBase2.prototype._onRenderSuffix = function(props) {
        var suffix = props.suffix;
        return React160.createElement("span", { style: { paddingBottom: "1px" } }, suffix);
      };
      Object.defineProperty(TextFieldBase2.prototype, "_errorMessage", {
        /**
         * Current error message from either `props.errorMessage` or the result of `props.onGetErrorMessage`.
         *
         * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.
         * - If we have done the validation and there is validation error, errorMessage is the validation error message.
         */
        get: function() {
          var _a5 = this.props.errorMessage, errorMessage = _a5 === void 0 ? this.state.errorMessage : _a5;
          return errorMessage || "";
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype._renderErrorMessage = function() {
        var errorMessage = this._errorMessage;
        return errorMessage ? typeof errorMessage === "string" ? React160.createElement(
          "p",
          { className: this._classNames.errorMessage },
          React160.createElement("span", { "data-automation-id": "error-message" }, errorMessage)
        ) : React160.createElement("div", { className: this._classNames.errorMessage, "data-automation-id": "error-message" }, errorMessage) : null;
      };
      Object.defineProperty(TextFieldBase2.prototype, "_isDescriptionAvailable", {
        /**
         * If a custom description render function is supplied then treat description as always available.
         * Otherwise defer to the presence of description or error message text.
         */
        get: function() {
          var props = this.props;
          return !!(props.onRenderDescription || props.description || this._errorMessage);
        },
        enumerable: false,
        configurable: true
      });
      TextFieldBase2.prototype._renderTextArea = function() {
        var _a5 = this.props.invalid, invalid = _a5 === void 0 ? !!this._errorMessage : _a5;
        var textAreaProps = getNativeProps2(this.props, textAreaProperties2, ["defaultValue"]);
        var ariaLabelledBy = this.props["aria-labelledby"] || (this.props.label ? this._labelId : void 0);
        return React160.createElement("textarea", __assign({ id: this._id }, textAreaProps, { ref: this._textElement, value: this.value || "", onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, "aria-labelledby": ariaLabelledBy, "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : this.props["aria-describedby"], "aria-invalid": invalid, "aria-label": this.props.ariaLabel, readOnly: this.props.readOnly, onFocus: this._onFocus, onBlur: this._onBlur }));
      };
      TextFieldBase2.prototype._renderInput = function() {
        var _a5 = this.props, ariaLabel = _a5.ariaLabel, _b = _a5.invalid, invalid = _b === void 0 ? !!this._errorMessage : _b, onRenderPrefix = _a5.onRenderPrefix, onRenderSuffix = _a5.onRenderSuffix, prefix2 = _a5.prefix, suffix = _a5.suffix, _c = _a5.type, type = _c === void 0 ? "text" : _c, label6 = _a5.label;
        var labelIds = [];
        label6 && labelIds.push(this._labelId);
        (prefix2 !== void 0 || onRenderPrefix) && labelIds.push(this._prefixId);
        (suffix !== void 0 || onRenderSuffix) && labelIds.push(this._suffixId);
        var inputProps = __assign(__assign({ type: this.state.isRevealingPassword ? "text" : type, id: this._id }, getNativeProps2(this.props, inputProperties2, ["defaultValue", "type"])), { "aria-labelledby": this.props["aria-labelledby"] || (labelIds.length > 0 ? labelIds.join(" ") : void 0), ref: this._textElement, value: this.value || "", onInput: this._onInputChange, onChange: this._onInputChange, className: this._classNames.field, "aria-label": ariaLabel, "aria-describedby": this._isDescriptionAvailable ? this._descriptionId : this.props["aria-describedby"], "aria-invalid": invalid, onFocus: this._onFocus, onBlur: this._onBlur });
        var defaultRender = function(updatedInputProps) {
          return React160.createElement("input", __assign({}, updatedInputProps));
        };
        var onRenderInput = this.props.onRenderInput || defaultRender;
        return onRenderInput(inputProps, defaultRender);
      };
      TextFieldBase2.prototype._validate = function(value) {
        var _this = this;
        if (this._latestValidateValue === value && _shouldValidateAllChanges(this.props)) {
          return;
        }
        this._latestValidateValue = value;
        var onGetErrorMessage = this.props.onGetErrorMessage;
        var result = onGetErrorMessage && onGetErrorMessage(value || "");
        if (result !== void 0) {
          if (typeof result === "string" || !("then" in result)) {
            this.setState({ errorMessage: result });
            this._notifyAfterValidate(value, result);
          } else {
            var currentValidation_1 = ++this._lastValidation;
            result.then(function(errorMessage) {
              if (currentValidation_1 === _this._lastValidation) {
                _this.setState({ errorMessage });
              }
              _this._notifyAfterValidate(value, errorMessage);
            });
          }
        } else {
          this._notifyAfterValidate(value, "");
        }
      };
      TextFieldBase2.prototype._notifyAfterValidate = function(value, errorMessage) {
        if (value === this.value && this.props.onNotifyValidationResult) {
          this.props.onNotifyValidationResult(errorMessage, value);
        }
      };
      TextFieldBase2.prototype._adjustInputHeight = function() {
        if (this._textElement.current && this.props.autoAdjustHeight && this.props.multiline) {
          var textField = this._textElement.current;
          textField.style.height = "";
          textField.style.height = textField.scrollHeight + "px";
        }
      };
      TextFieldBase2.defaultProps = {
        resizable: true,
        deferredValidationTime: 200,
        validateOnLoad: true
      };
      return TextFieldBase2;
    }(React160.Component)
  );
  function _getValue(props, state) {
    var _a5 = props.value, value = _a5 === void 0 ? state.uncontrolledValue : _a5;
    if (typeof value === "number") {
      return String(value);
    }
    return value;
  }
  function _shouldValidateAllChanges(props) {
    return !(props.validateOnFocusIn || props.validateOnFocusOut);
  }
  var __browserNeedsRevealButton;
  function _browserNeedsRevealButton() {
    if (typeof __browserNeedsRevealButton !== "boolean") {
      var win2 = getWindow();
      if (win2 === null || win2 === void 0 ? void 0 : win2.navigator) {
        var isEdge = /Edg/.test(win2.navigator.userAgent || "");
        __browserNeedsRevealButton = !(isIE11() || isEdge);
      } else {
        __browserNeedsRevealButton = true;
      }
    }
    return __browserNeedsRevealButton;
  }

  // ../node_modules/@fluentui/react/lib/components/TextField/TextField.styles.js
  var globalClassNames = {
    root: "ms-TextField",
    description: "ms-TextField-description",
    errorMessage: "ms-TextField-errorMessage",
    field: "ms-TextField-field",
    fieldGroup: "ms-TextField-fieldGroup",
    prefix: "ms-TextField-prefix",
    suffix: "ms-TextField-suffix",
    wrapper: "ms-TextField-wrapper",
    revealButton: "ms-TextField-reveal",
    multiline: "ms-TextField--multiline",
    borderless: "ms-TextField--borderless",
    underlined: "ms-TextField--underlined",
    unresizable: "ms-TextField--unresizable",
    required: "is-required",
    disabled: "is-disabled",
    active: "is-active"
  };
  function getLabelStyles(props) {
    var underlined = props.underlined, disabled = props.disabled, focused = props.focused, theme = props.theme;
    var palette = theme.palette, fonts = theme.fonts;
    return function() {
      var _a5;
      return {
        root: [
          underlined && disabled && {
            color: palette.neutralTertiary
          },
          underlined && {
            fontSize: fonts.medium.fontSize,
            marginRight: 8,
            paddingLeft: 12,
            paddingRight: 0,
            lineHeight: "22px",
            height: 32
          },
          underlined && focused && {
            selectors: (_a5 = {}, _a5[HighContrastSelector] = {
              height: 31
              // -1px to prevent jumpiness in HC with the increased border-width to 2px
            }, _a5)
          }
        ]
      };
    };
  }
  function getStyles12(props) {
    var _a5, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    var theme = props.theme, className = props.className, disabled = props.disabled, focused = props.focused, required = props.required, multiline = props.multiline, hasLabel = props.hasLabel, borderless = props.borderless, underlined = props.underlined, hasIcon = props.hasIcon, resizable = props.resizable, hasErrorMessage = props.hasErrorMessage, inputClassName2 = props.inputClassName, autoAdjustHeight = props.autoAdjustHeight, hasRevealButton = props.hasRevealButton;
    var semanticColors = theme.semanticColors, effects = theme.effects, fonts = theme.fonts;
    var classNames2 = getGlobalClassNames(globalClassNames, theme);
    var fieldPrefixSuffix = {
      // Suffix/Prefix are not editable so the disabled slot perfectly fits.
      background: semanticColors.disabledBackground,
      color: !disabled ? semanticColors.inputPlaceholderText : semanticColors.disabledText,
      display: "flex",
      alignItems: "center",
      padding: "0 10px",
      lineHeight: 1,
      whiteSpace: "nowrap",
      flexShrink: 0,
      selectors: (_a5 = {}, _a5[HighContrastSelector] = {
        background: "Window",
        color: disabled ? "GrayText" : "WindowText"
      }, _a5)
    };
    var placeholderStyles = [
      {
        color: semanticColors.inputPlaceholderText,
        opacity: 1,
        selectors: (_b = {}, _b[HighContrastSelector] = {
          color: "GrayText"
        }, _b)
      }
    ];
    var disabledPlaceholderStyles = {
      color: semanticColors.disabledText,
      selectors: (_c = {}, _c[HighContrastSelector] = {
        color: "GrayText"
      }, _c)
    };
    return {
      root: [
        classNames2.root,
        fonts.medium,
        required && classNames2.required,
        disabled && classNames2.disabled,
        focused && classNames2.active,
        multiline && classNames2.multiline,
        borderless && classNames2.borderless,
        underlined && classNames2.underlined,
        normalize2,
        {
          position: "relative"
        },
        className
      ],
      wrapper: [
        classNames2.wrapper,
        underlined && [
          {
            display: "flex",
            borderBottom: "1px solid ".concat(!hasErrorMessage ? semanticColors.inputBorder : semanticColors.errorText),
            width: "100%"
          },
          disabled && {
            borderBottomColor: semanticColors.disabledBackground,
            selectors: (_d = {}, _d[HighContrastSelector] = __assign({ borderColor: "GrayText" }, getHighContrastNoAdjustStyle()), _d)
          },
          !disabled && {
            selectors: {
              ":hover": {
                borderBottomColor: !hasErrorMessage ? semanticColors.inputBorderHovered : semanticColors.errorText,
                selectors: (_e = {}, _e[HighContrastSelector] = __assign({ borderBottomColor: "Highlight" }, getHighContrastNoAdjustStyle()), _e)
              }
            }
          },
          focused && [
            {
              position: "relative"
            },
            getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, 0, "borderBottom")
          ]
        ]
      ],
      fieldGroup: [
        classNames2.fieldGroup,
        normalize2,
        {
          border: "1px solid ".concat(semanticColors.inputBorder),
          borderRadius: effects.roundedCorner2,
          background: semanticColors.inputBackground,
          cursor: "text",
          height: 32,
          display: "flex",
          flexDirection: "row",
          alignItems: "stretch",
          position: "relative"
        },
        multiline && {
          minHeight: "60px",
          height: "auto",
          display: "flex"
        },
        !focused && !disabled && {
          selectors: {
            ":hover": {
              borderColor: semanticColors.inputBorderHovered,
              selectors: (_f = {}, _f[HighContrastSelector] = __assign({ borderColor: "Highlight" }, getHighContrastNoAdjustStyle()), _f)
            }
          }
        },
        focused && !underlined && getInputFocusStyle(!hasErrorMessage ? semanticColors.inputFocusBorderAlt : semanticColors.errorText, effects.roundedCorner2),
        disabled && {
          borderColor: semanticColors.disabledBackground,
          selectors: (_g = {}, _g[HighContrastSelector] = __assign({ borderColor: "GrayText" }, getHighContrastNoAdjustStyle()), _g),
          cursor: "default"
        },
        borderless && {
          border: "none"
        },
        borderless && focused && {
          border: "none",
          selectors: {
            ":after": {
              border: "none"
            }
          }
        },
        underlined && {
          flex: "1 1 0px",
          border: "none",
          textAlign: "left"
        },
        underlined && disabled && {
          backgroundColor: "transparent"
        },
        hasErrorMessage && !underlined && {
          borderColor: semanticColors.errorText,
          selectors: {
            "&:hover": {
              borderColor: semanticColors.errorText
            }
          }
        },
        !hasLabel && required && {
          selectors: (_h = {
            ":before": {
              content: "'*'",
              color: semanticColors.errorText,
              position: "absolute",
              top: -5,
              right: -10
            }
          }, _h[HighContrastSelector] = {
            selectors: {
              ":before": {
                color: "WindowText",
                right: -14
                // moving the * 4 pixel to right to alleviate border clipping in HC mode.
              }
            }
          }, _h)
        }
      ],
      field: [
        fonts.medium,
        classNames2.field,
        normalize2,
        {
          borderRadius: 0,
          border: "none",
          background: "none",
          backgroundColor: "transparent",
          color: semanticColors.inputText,
          padding: "0 8px",
          width: "100%",
          minWidth: 0,
          textOverflow: "ellipsis",
          outline: 0,
          selectors: (_j = {
            "&:active, &:focus, &:hover": { outline: 0 },
            "::-ms-clear": {
              display: "none"
            }
          }, _j[HighContrastSelector] = {
            background: "Window",
            color: disabled ? "GrayText" : "WindowText"
          }, _j)
        },
        getPlaceholderStyles(placeholderStyles),
        multiline && !resizable && [
          classNames2.unresizable,
          {
            resize: "none"
          }
        ],
        multiline && {
          minHeight: "inherit",
          lineHeight: 17,
          flexGrow: 1,
          paddingTop: 6,
          paddingBottom: 6,
          overflow: "auto",
          width: "100%"
        },
        multiline && autoAdjustHeight && {
          overflow: "hidden"
        },
        hasIcon && !hasRevealButton && {
          paddingRight: 24
        },
        multiline && hasIcon && {
          paddingRight: 40
        },
        disabled && [
          {
            backgroundColor: semanticColors.disabledBackground,
            color: semanticColors.disabledText,
            borderColor: semanticColors.disabledBackground
          },
          getPlaceholderStyles(disabledPlaceholderStyles)
        ],
        underlined && {
          textAlign: "left"
        },
        focused && !borderless && {
          selectors: (_k = {}, _k[HighContrastSelector] = {
            paddingLeft: 11,
            paddingRight: 11
          }, _k)
        },
        focused && multiline && !borderless && {
          selectors: (_l = {}, _l[HighContrastSelector] = {
            paddingTop: 4
            // take into consideration the 2px increased border-width (not when borderless).
          }, _l)
        },
        inputClassName2
      ],
      icon: [
        multiline && {
          paddingRight: 24,
          alignItems: "flex-end"
        },
        {
          pointerEvents: "none",
          position: "absolute",
          bottom: 6,
          right: 8,
          top: "auto",
          fontSize: IconFontSizes.medium,
          lineHeight: 18
        },
        disabled && {
          color: semanticColors.disabledText
        }
      ],
      description: [
        classNames2.description,
        {
          color: semanticColors.bodySubtext,
          fontSize: fonts.xSmall.fontSize
        }
      ],
      errorMessage: [
        classNames2.errorMessage,
        AnimationClassNames.slideDownIn20,
        fonts.small,
        {
          color: semanticColors.errorText,
          margin: 0,
          paddingTop: 5,
          display: "flex",
          alignItems: "center"
        }
      ],
      prefix: [classNames2.prefix, fieldPrefixSuffix],
      suffix: [classNames2.suffix, fieldPrefixSuffix],
      revealButton: [
        classNames2.revealButton,
        "ms-Button",
        "ms-Button--icon",
        getFocusStyle(theme, { inset: 1 }),
        {
          height: 30,
          width: 32,
          border: "none",
          padding: "0px 4px",
          backgroundColor: "transparent",
          color: semanticColors.link,
          selectors: {
            ":hover": {
              outline: 0,
              color: semanticColors.primaryButtonBackgroundHovered,
              backgroundColor: semanticColors.buttonBackgroundHovered,
              selectors: (_m = {}, _m[HighContrastSelector] = {
                borderColor: "Highlight",
                color: "Highlight"
              }, _m)
            },
            ":focus": { outline: 0 }
          }
        },
        hasIcon && {
          marginRight: 28
        }
      ],
      revealSpan: {
        display: "flex",
        height: "100%",
        alignItems: "center"
      },
      revealIcon: {
        margin: "0px 4px",
        pointerEvents: "none",
        bottom: 6,
        right: 8,
        top: "auto",
        fontSize: IconFontSizes.medium,
        lineHeight: 18
      },
      subComponentStyles: {
        label: getLabelStyles(props)
      }
    };
  }

  // ../node_modules/@fluentui/react/lib/components/TextField/TextField.js
  var TextField = styled(TextFieldBase, getStyles12, void 0, {
    scope: "TextField"
  });

  // ../node_modules/@fluentui/foundation-legacy/lib/createComponent.js
  var React162 = __toESM(require_react());

  // ../node_modules/@fluentui/foundation-legacy/lib/slots.js
  var React161 = __toESM(require_react());

  // ../node_modules/@fluentui/foundation-legacy/lib/utilities.js
  var assign2 = __assign;

  // ../node_modules/@fluentui/foundation-legacy/lib/slots.js
  function withSlots(type, props) {
    var children = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      children[_i - 2] = arguments[_i];
    }
    var slotType = type;
    if (slotType.isSlot) {
      children = React161.Children.toArray(children);
      if (children.length === 0) {
        return slotType(props);
      }
      return slotType(__assign(__assign({}, props), { children }));
    } else {
      return React161.createElement.apply(React161, __spreadArray([type, props], children, false));
    }
  }
  function createFactory(DefaultComponent, options) {
    if (options === void 0) {
      options = {};
    }
    var _a5 = options.defaultProp, defaultProp = _a5 === void 0 ? "children" : _a5;
    var result = function(componentProps, userProps, userSlotOptions, defaultStyles, theme) {
      if (React161.isValidElement(userProps)) {
        return userProps;
      }
      var flattenedUserProps = _translateShorthand(defaultProp, userProps);
      var finalProps = _constructFinalProps(defaultStyles, theme, componentProps, flattenedUserProps);
      if (userSlotOptions) {
        if (userSlotOptions.component) {
          var UserComponent = userSlotOptions.component;
          return React161.createElement(UserComponent, __assign({}, finalProps));
        }
        if (userSlotOptions.render) {
          return userSlotOptions.render(finalProps, DefaultComponent);
        }
      }
      return React161.createElement(DefaultComponent, __assign({}, finalProps));
    };
    return result;
  }
  var defaultFactory = memoizeFunction(function(type) {
    return createFactory(type);
  });
  function getSlots2(userProps, slots) {
    var result = {};
    var mixedProps = userProps;
    var _loop_1 = function(name_12) {
      if (slots.hasOwnProperty(name_12)) {
        var slot = function(componentProps) {
          var args = [];
          for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
          }
          if (args.length > 0) {
            throw new Error("Any module using getSlots must use withSlots. Please see withSlots javadoc for more info.");
          }
          return _renderSlot(
            slots[name_12],
            // TODO: this cast to any is hiding a relationship issue between the first two args
            componentProps,
            mixedProps[name_12],
            mixedProps.slots && mixedProps.slots[name_12],
            // _defaultStyles should always be present, but a check for existence is added to make view tests
            // easier to use.
            mixedProps._defaultStyles && mixedProps._defaultStyles[name_12],
            mixedProps.theme
          );
        };
        slot.isSlot = true;
        result[name_12] = slot;
      }
    };
    for (var name_1 in slots) {
      _loop_1(name_1);
    }
    return result;
  }
  function _translateShorthand(defaultProp, slotProps) {
    var _a5;
    var transformedProps;
    if (typeof slotProps === "string" || typeof slotProps === "number" || typeof slotProps === "boolean") {
      transformedProps = (_a5 = {}, _a5[defaultProp] = slotProps, _a5);
    } else {
      transformedProps = slotProps;
    }
    return transformedProps;
  }
  function _constructFinalProps(defaultStyles, theme) {
    var allProps = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      allProps[_i - 2] = arguments[_i];
    }
    var finalProps = {};
    var classNames2 = [];
    for (var _a5 = 0, allProps_1 = allProps; _a5 < allProps_1.length; _a5++) {
      var props = allProps_1[_a5];
      classNames2.push(props && props.className);
      assign2(finalProps, props);
    }
    finalProps.className = mergeCss([defaultStyles, classNames2], { rtl: getRTL2(theme) });
    return finalProps;
  }
  function _renderSlot(ComponentType, componentProps, userProps, slotOptions, defaultStyles, theme) {
    if (ComponentType.create !== void 0) {
      return ComponentType.create(componentProps, userProps, slotOptions, defaultStyles);
    } else {
      return defaultFactory(ComponentType)(componentProps, userProps, slotOptions, defaultStyles, theme);
    }
  }

  // ../node_modules/@fluentui/foundation-legacy/lib/createComponent.js
  function createComponent(view, options) {
    if (options === void 0) {
      options = {};
    }
    var _a5 = options.factoryOptions, factoryOptions = _a5 === void 0 ? {} : _a5;
    var defaultProp = factoryOptions.defaultProp;
    var ResultComponent = function(componentProps) {
      var settings = _getCustomizations(options.displayName, React162.useContext(CustomizerContext), options.fields);
      var stateReducer = options.state;
      if (stateReducer) {
        componentProps = __assign(__assign({}, componentProps), stateReducer(componentProps));
      }
      var theme = componentProps.theme || settings.theme;
      var tokens2 = _resolveTokens(componentProps, theme, options.tokens, settings.tokens, componentProps.tokens);
      var styles2 = _resolveStyles(componentProps, theme, tokens2, options.styles, settings.styles, componentProps.styles);
      var viewProps = __assign(__assign({}, componentProps), { styles: styles2, tokens: tokens2, _defaultStyles: styles2, theme });
      return view(viewProps);
    };
    ResultComponent.displayName = options.displayName || view.name;
    if (defaultProp) {
      ResultComponent.create = createFactory(ResultComponent, { defaultProp });
    }
    assign2(ResultComponent, options.statics);
    return ResultComponent;
  }
  function _resolveStyles(props, theme, tokens2) {
    var allStyles = [];
    for (var _i = 3; _i < arguments.length; _i++) {
      allStyles[_i - 3] = arguments[_i];
    }
    return concatStyleSets.apply(void 0, allStyles.map(function(styles2) {
      return typeof styles2 === "function" ? styles2(props, theme, tokens2) : styles2;
    }));
  }
  function _resolveTokens(props, theme) {
    var allTokens = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      allTokens[_i - 2] = arguments[_i];
    }
    var tokens2 = {};
    for (var _a5 = 0, allTokens_1 = allTokens; _a5 < allTokens_1.length; _a5++) {
      var currentTokens = allTokens_1[_a5];
      if (currentTokens) {
        currentTokens = typeof currentTokens === "function" ? currentTokens(props, theme) : currentTokens;
        if (Array.isArray(currentTokens)) {
          currentTokens = _resolveTokens.apply(void 0, __spreadArray([props, theme], currentTokens, false));
        }
        assign2(tokens2, currentTokens);
      }
    }
    return tokens2;
  }
  function _getCustomizations(displayName, context, fields) {
    var DefaultFields2 = ["theme", "styles", "tokens"];
    return Customizations.getSettings(fields || DefaultFields2, displayName, context.customizations);
  }

  // ../node_modules/@fluentui/react/lib/components/Stack/StackItem/StackItem.styles.js
  var GlobalClassNames7 = {
    root: "ms-StackItem"
  };
  var alignMap = {
    start: "flex-start",
    end: "flex-end"
  };
  var StackItemStyles = function(props, theme, tokens2) {
    var grow = props.grow, shrink = props.shrink, disableShrink = props.disableShrink, align = props.align, verticalFill = props.verticalFill, order2 = props.order, className = props.className, _a5 = props.basis, basis = _a5 === void 0 ? "auto" : _a5;
    var classNames2 = getGlobalClassNames(GlobalClassNames7, theme);
    return {
      root: [
        theme.fonts.medium,
        classNames2.root,
        {
          flexBasis: basis,
          margin: tokens2.margin,
          padding: tokens2.padding,
          height: verticalFill ? "100%" : "auto",
          width: "auto"
        },
        grow && {
          flexGrow: grow === true ? 1 : grow
        },
        (disableShrink || !grow && !shrink) && {
          flexShrink: 0
        },
        shrink && !disableShrink && {
          flexShrink: 1
        },
        align && {
          alignSelf: alignMap[align] || align
        },
        order2 && {
          order: order2
        },
        className
      ]
      // TODO: this cast may be hiding some potential issues with styling and name
      //        lookups and should be removed
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Stack/StackItem/StackItem.js
  var StackItemView = function(props) {
    var children = props.children;
    var nativeProps = getNativeProps2(props, htmlElementProperties2);
    if (children == null) {
      return null;
    }
    var Slots = getSlots2(props, {
      root: "div"
    });
    return withSlots(Slots.root, __assign({}, nativeProps), children);
  };
  var StackItem = createComponent(StackItemView, {
    displayName: "StackItem",
    styles: StackItemStyles
  });

  // ../node_modules/@fluentui/react/lib/components/Stack/Stack.js
  var React163 = __toESM(require_react());

  // ../node_modules/@fluentui/react/lib/components/Stack/StackUtils.js
  var _getThemedSpacing = function(space2, theme) {
    if (theme.spacing.hasOwnProperty(space2)) {
      return theme.spacing[space2];
    }
    return space2;
  };
  var _getValueUnitGap = function(gap2) {
    var numericalPart = parseFloat(gap2);
    var numericalValue = isNaN(numericalPart) ? 0 : numericalPart;
    var numericalString = isNaN(numericalPart) ? "" : numericalPart.toString();
    var unitPart = gap2.substring(numericalString.toString().length);
    return {
      value: numericalValue,
      unit: unitPart || "px"
    };
  };
  var parseGap = function(gap2, theme) {
    if (gap2 === void 0 || gap2 === "") {
      return {
        rowGap: {
          value: 0,
          unit: "px"
        },
        columnGap: {
          value: 0,
          unit: "px"
        }
      };
    }
    if (typeof gap2 === "number") {
      return {
        rowGap: {
          value: gap2,
          unit: "px"
        },
        columnGap: {
          value: gap2,
          unit: "px"
        }
      };
    }
    var splitGap = gap2.split(" ");
    if (splitGap.length > 2) {
      return {
        rowGap: {
          value: 0,
          unit: "px"
        },
        columnGap: {
          value: 0,
          unit: "px"
        }
      };
    }
    if (splitGap.length === 2) {
      return {
        rowGap: _getValueUnitGap(_getThemedSpacing(splitGap[0], theme)),
        columnGap: _getValueUnitGap(_getThemedSpacing(splitGap[1], theme))
      };
    }
    var calculatedGap = _getValueUnitGap(_getThemedSpacing(gap2, theme));
    return {
      rowGap: calculatedGap,
      columnGap: calculatedGap
    };
  };
  var parsePadding = function(padding4, theme) {
    if (padding4 === void 0 || typeof padding4 === "number" || padding4 === "") {
      return padding4;
    }
    var paddingValues = padding4.split(" ");
    if (paddingValues.length < 2) {
      return _getThemedSpacing(padding4, theme);
    }
    return paddingValues.reduce(function(padding1, padding22) {
      return _getThemedSpacing(padding1, theme) + " " + _getThemedSpacing(padding22, theme);
    });
  };

  // ../node_modules/@fluentui/react/lib/components/Stack/Stack.styles.js
  var nameMap = {
    start: "flex-start",
    end: "flex-end"
  };
  var GlobalClassNames8 = {
    root: "ms-Stack",
    inner: "ms-Stack-inner",
    child: "ms-Stack-child"
  };
  var styles = function(props, theme, tokens2) {
    var _a5, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    var className = props.className, disableShrink = props.disableShrink, enableScopedSelectors = props.enableScopedSelectors, grow = props.grow, horizontal = props.horizontal, horizontalAlign = props.horizontalAlign, reversed = props.reversed, verticalAlign = props.verticalAlign, verticalFill = props.verticalFill, wrap3 = props.wrap;
    var classNames2 = getGlobalClassNames(GlobalClassNames8, theme);
    var childrenGap = tokens2 && tokens2.childrenGap ? tokens2.childrenGap : props.gap;
    var maxHeight = tokens2 && tokens2.maxHeight ? tokens2.maxHeight : props.maxHeight;
    var maxWidth = tokens2 && tokens2.maxWidth ? tokens2.maxWidth : props.maxWidth;
    var padding4 = tokens2 && tokens2.padding ? tokens2.padding : props.padding;
    var _p = parseGap(childrenGap, theme), rowGap = _p.rowGap, columnGap = _p.columnGap;
    var horizontalMargin = "".concat(-0.5 * columnGap.value).concat(columnGap.unit);
    var verticalMargin = "".concat(-0.5 * rowGap.value).concat(rowGap.unit);
    var childStyles = {
      textOverflow: "ellipsis"
    };
    var childSelector = "> " + (enableScopedSelectors ? "." + GlobalClassNames8.child : "*");
    var disableShrinkStyles = (_a5 = {}, // flexShrink styles are applied by the StackItem
    _a5["".concat(childSelector, ":not(.").concat(GlobalClassNames7.root, ")")] = {
      flexShrink: 0
    }, _a5);
    if (wrap3) {
      return {
        root: [
          classNames2.root,
          {
            flexWrap: "wrap",
            maxWidth,
            maxHeight,
            width: "auto",
            overflow: "visible",
            height: "100%"
          },
          horizontalAlign && (_b = {}, _b[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _b),
          verticalAlign && (_c = {}, _c[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _c),
          className,
          {
            // not allowed to be overridden by className
            // since this is necessary in order to prevent collapsing margins
            display: "flex"
          },
          horizontal && {
            height: verticalFill ? "100%" : "auto"
          }
        ],
        inner: [
          classNames2.inner,
          (_d = {
            display: "flex",
            flexWrap: "wrap",
            marginLeft: horizontalMargin,
            marginRight: horizontalMargin,
            marginTop: verticalMargin,
            marginBottom: verticalMargin,
            overflow: "visible",
            boxSizing: "border-box",
            padding: parsePadding(padding4, theme),
            // avoid unnecessary calc() calls if horizontal gap is 0
            width: columnGap.value === 0 ? "100%" : "calc(100% + ".concat(columnGap.value).concat(columnGap.unit, ")"),
            maxWidth: "100vw"
          }, _d[childSelector] = __assign({ margin: "".concat(0.5 * rowGap.value).concat(rowGap.unit, " ").concat(0.5 * columnGap.value).concat(columnGap.unit) }, childStyles), _d),
          disableShrink && disableShrinkStyles,
          horizontalAlign && (_e = {}, _e[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _e),
          verticalAlign && (_f = {}, _f[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _f),
          horizontal && (_g = {
            flexDirection: reversed ? "row-reverse" : "row",
            // avoid unnecessary calc() calls if vertical gap is 0
            height: rowGap.value === 0 ? "100%" : "calc(100% + ".concat(rowGap.value).concat(rowGap.unit, ")")
          }, _g[childSelector] = {
            maxWidth: columnGap.value === 0 ? "100%" : "calc(100% - ".concat(columnGap.value).concat(columnGap.unit, ")")
          }, _g),
          !horizontal && (_h = {
            flexDirection: reversed ? "column-reverse" : "column",
            height: "calc(100% + ".concat(rowGap.value).concat(rowGap.unit, ")")
          }, _h[childSelector] = {
            maxHeight: rowGap.value === 0 ? "100%" : "calc(100% - ".concat(rowGap.value).concat(rowGap.unit, ")")
          }, _h)
        ]
      };
    }
    return {
      root: [
        classNames2.root,
        (_j = {
          display: "flex",
          flexDirection: horizontal ? reversed ? "row-reverse" : "row" : reversed ? "column-reverse" : "column",
          flexWrap: "nowrap",
          width: "auto",
          height: verticalFill ? "100%" : "auto",
          maxWidth,
          maxHeight,
          padding: parsePadding(padding4, theme),
          boxSizing: "border-box"
        }, _j[childSelector] = childStyles, _j),
        disableShrink && disableShrinkStyles,
        grow && {
          flexGrow: grow === true ? 1 : grow
        },
        horizontalAlign && (_k = {}, _k[horizontal ? "justifyContent" : "alignItems"] = nameMap[horizontalAlign] || horizontalAlign, _k),
        verticalAlign && (_l = {}, _l[horizontal ? "alignItems" : "justifyContent"] = nameMap[verticalAlign] || verticalAlign, _l),
        horizontal && columnGap.value > 0 && (_m = {}, // apply gap margin to every direct child except the first direct child if the direction is not reversed,
        // and the last direct one if it is
        _m[reversed ? "".concat(childSelector, ":not(:last-child)") : "".concat(childSelector, ":not(:first-child)")] = {
          marginLeft: "".concat(columnGap.value).concat(columnGap.unit)
        }, _m),
        !horizontal && rowGap.value > 0 && (_o = {}, // apply gap margin to every direct child except the first direct child if the direction is not reversed,
        // and the last direct one if it is
        _o[reversed ? "".concat(childSelector, ":not(:last-child)") : "".concat(childSelector, ":not(:first-child)")] = {
          marginTop: "".concat(rowGap.value).concat(rowGap.unit)
        }, _o),
        className
      ]
      // TODO: this cast may be hiding some potential issues with styling and name
      //        lookups and should be removed
    };
  };

  // ../node_modules/@fluentui/react/lib/components/Stack/Stack.js
  var StackView = function(props) {
    var _a5 = props.as, RootType = _a5 === void 0 ? "div" : _a5, _b = props.disableShrink, disableShrink = _b === void 0 ? false : _b, _c = props.doNotRenderFalsyValues, doNotRenderFalsyValues = _c === void 0 ? false : _c, _d = props.enableScopedSelectors, enableScopedSelectors = _d === void 0 ? false : _d, wrap3 = props.wrap, rest = __rest(props, ["as", "disableShrink", "doNotRenderFalsyValues", "enableScopedSelectors", "wrap"]);
    warnDeprecations("Stack", props, {
      gap: "tokens.childrenGap",
      maxHeight: "tokens.maxHeight",
      maxWidth: "tokens.maxWidth",
      padding: "tokens.padding"
    });
    var stackChildren = _processStackChildren(props.children, {
      disableShrink,
      enableScopedSelectors,
      doNotRenderFalsyValues
    });
    var nativeProps = getNativeProps2(rest, htmlElementProperties2);
    var Slots = getSlots2(props, {
      root: RootType,
      inner: "div"
    });
    if (wrap3) {
      return withSlots(
        Slots.root,
        __assign({}, nativeProps),
        withSlots(Slots.inner, null, stackChildren)
      );
    }
    return withSlots(Slots.root, __assign({}, nativeProps), stackChildren);
  };
  function _processStackChildren(children, _a5) {
    var disableShrink = _a5.disableShrink, enableScopedSelectors = _a5.enableScopedSelectors, doNotRenderFalsyValues = _a5.doNotRenderFalsyValues;
    var childrenArray = React163.Children.toArray(children);
    childrenArray = React163.Children.map(childrenArray, function(child) {
      if (!child || !React163.isValidElement(child)) {
        return doNotRenderFalsyValues ? null : child;
      }
      if (child.type === React163.Fragment) {
        return child.props.children ? _processStackChildren(child.props.children, { disableShrink, enableScopedSelectors, doNotRenderFalsyValues }) : null;
      }
      var childAsReactElement = child;
      var defaultItemProps = {};
      if (_isStackItem(child)) {
        defaultItemProps = { shrink: !disableShrink };
      }
      var childClassName = childAsReactElement.props.className;
      return React163.cloneElement(childAsReactElement, __assign(__assign(__assign(__assign({}, defaultItemProps), childAsReactElement.props), childClassName && { className: childClassName }), enableScopedSelectors && { className: css(GlobalClassNames8.child, childClassName) }));
    });
    return childrenArray;
  }
  function _isStackItem(item) {
    return !!item && typeof item === "object" && !!item.type && // StackItem is generated by createComponent, so we need to check its displayName instead of name
    item.type.displayName === StackItem.displayName;
  }
  var StackStatics = {
    Item: StackItem
  };
  var Stack = createComponent(StackView, {
    displayName: "Stack",
    styles,
    statics: StackStatics
  });

  // src/components/FileDrop.tsx
  var import_react42 = __toESM(require_react(), 1);
  var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
  var FileDrop = ({ children }) => {
    const [isDragging, setIsDragging] = (0, import_react42.useState)(false);
    const { streamMessages, loading, setLoading } = useProjectContext();
    const onDrop = (0, import_react42.useCallback)(async (event) => {
      event.preventDefault();
      setIsDragging(false);
      const file = event.dataTransfer.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e2) => {
          try {
            const fileAsArrayBuffer = e2.target.result;
            if (fileAsArrayBuffer) {
              const fileBytes = new Uint8Array(fileAsArrayBuffer);
              setLoading(true);
              const res = projectService.uploadContent({
                content: {
                  options: {
                    case: "fileOptions",
                    value: {
                      file: file.name,
                      data: fileBytes
                    }
                  }
                }
              }, {
                timeoutMs: void 0
              });
              void streamMessages(res);
            }
          } catch (e3) {
            console.error(e3);
          }
        };
        reader.readAsArrayBuffer(file);
      }
    }, []);
    const onDragLeave = (event) => {
      event.preventDefault();
      setIsDragging(false);
    };
    const onDragOver = (0, import_react42.useCallback)((event) => {
      event.preventDefault();
      setIsDragging(true);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(
      "div",
      {
        onDrop,
        onDragOver,
        onDragLeave,
        style: {
          border: isDragging ? "2px dashed #cccccc" : ""
        },
        children
      }
    );
  };

  // src/pages/Chat/Sidebar.tsx
  var import_react52 = __toESM(require_react(), 1);

  // src/pages/Chat/CollectPanel.tsx
  var import_react45 = __toESM(require_react(), 1);

  // src/components/AudioRecorder.tsx
  var import_react43 = __toESM(require_react(), 1);
  var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
  var AudioRecorder = () => {
    const { streamMessages, setLoading, loading } = useProjectContext();
    const [recording, setRecording] = (0, import_react43.useState)(false);
    const [audioUrl, setAudioUrl] = (0, import_react43.useState)(null);
    const mediaRecorder = (0, import_react43.useRef)(null);
    const audioChunks = (0, import_react43.useRef)([]);
    const startRecording = () => {
      navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {
        mediaRecorder.current = new MediaRecorder(stream, { mimeType: "audio/wav" });
        mediaRecorder.current.ondataavailable = (event) => {
          if (event.data.size > 0) {
            audioChunks.current.push(event.data);
          }
        };
        mediaRecorder.current.start();
        setRecording(true);
      }).catch((err) => console.error("Error accessing media devices.", err));
    };
    const stopRecording = () => {
      if (mediaRecorder.current) {
        mediaRecorder.current.stop();
        setRecording(false);
      }
    };
    const uploadAudio = async () => {
      if (audioChunks.current.length > 0) {
        const audioBlob = new Blob(audioChunks.current, { type: "audio/wav" });
        setAudioUrl(URL.createObjectURL(audioBlob));
        try {
          const fileBytes = new Uint8Array(await audioBlob.arrayBuffer());
          setLoading(true);
          const res = projectService.uploadContent({
            content: {
              options: {
                case: "fileOptions",
                value: {
                  file: (/* @__PURE__ */ new Date()).toISOString() + ".wav",
                  data: fileBytes
                }
              }
            }
          }, {
            timeoutMs: void 0
          });
          streamMessages(res);
        } catch (e2) {
          console.error(e2);
          _t.error(e2.message);
        }
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Button, { onClick: recording ? stopRecording : startRecording, children: recording ? "Stop Recording" : "Start Recording" }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Button, { onClick: uploadAudio, disabled: audioChunks.current.length === 0, children: "Upload Audio" }),
      audioUrl && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("audio", { controls: true, src: audioUrl, children: "Your browser does not support the audio element." })
    ] });
  };

  // src/components/FileUpload.tsx
  var import_react44 = __toESM(require_react(), 1);
  var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
  var FileUpload = () => {
    const { streamMessages, loading, setLoading } = useProjectContext();
    const [selectedFile, setSelectedFile] = (0, import_react44.useState)(null);
    const [fileName, setFileName] = (0, import_react44.useState)(null);
    const handleFileChange = (event) => {
      const file = event.target.files ? event.target.files[0] : null;
      setSelectedFile(file);
      setFileName(file ? file.name : null);
    };
    const handleFileUpload = () => {
      if (!selectedFile) {
        return;
      }
      const reader = new FileReader();
      reader.onload = (e2) => {
        const fileAsArrayBuffer = e2.target.result;
        if (fileAsArrayBuffer) {
          const fileBytes = new Uint8Array(fileAsArrayBuffer);
          try {
            setLoading(true);
            const res = projectService.uploadContent({
              content: {
                options: {
                  case: "fileOptions",
                  value: {
                    file: selectedFile.name,
                    data: fileBytes
                  }
                }
              }
            }, {
              timeoutMs: void 0
            });
            streamMessages(res);
          } catch (e3) {
            console.log(e3);
            _t.error(e3.message);
          }
        }
      };
      reader.readAsArrayBuffer(selectedFile);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("input", { type: "file", onChange: handleFileChange }),
      fileName && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { children: [
        "Selected File: ",
        fileName
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(Button, { onClick: handleFileUpload, disabled: !selectedFile, children: "Upload" })
    ] });
  };

  // src/pages/Chat/CollectPanel.tsx
  var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
  var CollectYouTube = () => {
    const { streamMessages, setMedia } = useProjectContext();
    const [url, setUrl] = (0, import_react45.useState)("");
    const onChange = (ev, data) => {
      setUrl(data.value);
    };
    const submitURL = async () => {
      try {
        setMedia({
          type: "youtube",
          url
        });
        const res = projectService.uploadContent({
          content: {
            options: {
              case: "urlOptions",
              value: {
                url
              }
            }
          }
        });
        streamMessages(res);
      } catch (e2) {
        console.error(e2);
        _t.error("Failed to upload content: " + e2.message);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Label2, { style: { color: "white" }, htmlFor: "url", children: "URL" }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Input, { id: "url", onChange }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Button, { onClick: submitURL, children: "Submit" })
    ] });
  };
  var CollectPanel = () => {
    const [sessions, setSessions] = (0, import_react45.useState)([]);
    const { user, setSelectedValue, selectedValue, setIsRecording } = useProjectContext();
    const onTabSelect = (event, data) => {
      setSelectedValue(data.value);
    };
    (0, import_react45.useEffect)(() => {
      if (!user) {
        return;
      }
      (async () => {
        try {
          const sessions2 = await projectService.getSessions({});
          setSessions(sessions2.sessions);
        } catch (e2) {
          _t.error("Failed to load sessions: " + e2.message);
          console.error(e2);
        }
      })();
    }, [user, setSessions]);
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(import_jsx_runtime30.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Button, { onClick: () => setIsRecording(true), children: "Live Transcribe" }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Divider, { style: { margin: "10px" } }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(CollectYouTube, {}),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Divider, { style: { margin: "10px" } }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(AudioRecorder, {}),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Divider, { style: { margin: "10px" } }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(FileUpload, {}),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Divider, { style: { margin: "10px" } }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(TabList, { vertical: true, size: "medium", selectedValue, onTabSelect, children: [
        sessions.length === 0 && /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Tab2, { value: "", children: "No Sessions" }),
        sessions.map((s2) => {
          return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(Tab2, { value: s2.id, style: { textOverflow: "ellipsis", whiteSpace: "nowrap" }, children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { style: { color: "red" }, onClick: () => {
              projectService.deleteSession({ id: s2.id });
            }, children: "x" }),
            s2.name
          ] }, s2.id);
        })
      ] })
    ] });
  };

  // src/pages/Chat/PromptPanel.tsx
  var import_react47 = __toESM(require_react(), 1);
  var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
  var PromptPanel = ({}) => {
    const [prompts, setPrompts] = (0, import_react47.useState)([]);
    const [prompt, setPrompt] = (0, import_react47.useState)("");
    const { setSelectedValue, selectedValue, inferFromMessages } = useProjectContext();
    const onTabSelect = (event, data) => {
      inferFromMessages(data.value);
    };
    (0, import_react47.useEffect)(() => {
      (async () => {
        try {
          const prompts2 = await projectService.getPrompts({});
          setPrompts(prompts2.prompts);
        } catch (e2) {
          _t.error("Failed to load prompts: " + e2.message);
          console.error(e2);
        }
      })();
    }, [setPrompts]);
    const onChange = (ev, data) => {
      setPrompt(data.value);
    };
    const submitURL = async () => {
      const res = projectService.newPrompt({
        text: prompt
      });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { style: { overflowY: "auto", height: "100%" }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Label2, { style: { color: "white" }, htmlFor: "url", children: "Prompt" }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Input, { id: "url", onChange }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Button, { onClick: submitURL, children: "Submit" }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(TabList, { vertical: true, size: "medium", selectedValue, onTabSelect, children: prompts.map((s2) => {
        return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(Tab2, { value: s2.text, style: { textOverflow: "ellipsis", whiteSpace: "nowrap" }, children: s2.text }, s2.id);
      }) })
    ] });
  };

  // src/components/AccountCard.tsx
  var import_react51 = __toESM(require_react(), 1);

  // src/components/AuthForm.tsx
  var import_react49 = __toESM(require_react(), 1);
  var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
  var Login = ({ email, password, setEmail, setPassword }) => {
    const { setUser } = useProjectContext();
    const handleLogin = async () => {
      try {
        const res = await projectService.login({
          email,
          password
        });
        setUser(res);
        _t.success("Successful login!");
      } catch (e2) {
        console.error(e2);
        _t.error("Failed to login: " + e2.message);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(Stack, { tokens: { childrenGap: 10 }, styles: { root: { margin: "0 auto" } }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Input, { placeholder: "email", value: email, onChange: (e2, val) => setEmail(val.value) }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Input, { placeholder: "password", type: "password", value: password, onChange: (e2, val) => setPassword(val.value) }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(PrimaryButton, { text: "Login", onClick: handleLogin })
    ] });
  };
  var Register = ({ email, password, setEmail, setPassword }) => {
    const { setUser } = useProjectContext();
    const handleRegister = async () => {
      try {
        const res = await projectService.register({
          email,
          password
        });
        setUser(res);
        _t.success("Successfully registered!");
      } catch (e2) {
        console.error(e2);
        _t.error("Failed to register: " + e2.message);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(Stack, { tokens: { childrenGap: 10 }, styles: { root: { margin: "0 auto" } }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Input, { placeholder: "email", value: email, onChange: (e2, val) => setEmail(val.value) }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Input, { placeholder: "password", type: "password", value: password, onChange: (e2, val) => setPassword(val.value) }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(PrimaryButton, { text: "Register", onClick: handleRegister })
    ] });
  };
  var AuthForm = () => {
    const [email, setEmail] = (0, import_react49.useState)("");
    const [password, setPassword] = (0, import_react49.useState)("");
    const [selectedValue, setSelectedValue] = import_react49.default.useState("login");
    const onTabSelect = (event, data) => {
      setSelectedValue(data.value);
    };
    const authFormProps = {
      email,
      password,
      setEmail,
      setPassword
    };
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(import_jsx_runtime32.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(TabList, { selectedValue, onTabSelect, children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Tab2, { value: "login", children: "Login" }),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Tab2, { value: "register", children: "Register" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
        selectedValue === "login" && /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Login, { ...authFormProps }),
        selectedValue === "register" && /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(Register, { ...authFormProps })
      ] })
    ] });
  };

  // src/components/AccountCard.tsx
  var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
  var AccountCard = () => {
    const { user, setUser } = useProjectContext();
    const [showAuthForm, setShowAuthForm] = (0, import_react51.useState)(false);
    (0, import_react51.useEffect)(() => {
      (async () => {
        try {
          const res = await projectService.login({});
          setUser(res);
        } catch (e2) {
          console.error(e2);
        }
      })();
    }, []);
    const logout = async () => {
      try {
        await projectService.logout({});
        setUser(void 0);
        _t.success("Successfully logged out!");
      } catch (e2) {
        console.error(e2);
        _t.error("Failed to logout: " + e2.message);
      }
    };
    if (showAuthForm && !user) {
      return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(AuthForm, {});
    }
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { children: user ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Card, { children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
      CardHeader,
      {
        header: user.email,
        action: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Button, { onClick: logout, children: "logout" })
      }
    ) }) : /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Button, { onClick: () => setShowAuthForm(true), children: "Login" }) });
  };

  // src/pages/Chat/Sidebar.tsx
  var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
  var Sidebar = ({}) => {
    const [selectedValue, setSelectedValue] = (0, import_react52.useState)("collect");
    const onTabSelect = (event, data) => {
      setSelectedValue(data.value);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(import_jsx_runtime34.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(AccountCard, {}),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Divider, { style: { marginTop: "10px", marginBottom: "10px" } }),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(TabList, { selectedValue, onTabSelect, children: [
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Tab2, { value: "collect", children: "Collect" }),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(Tab2, { value: "prompts", children: "Prompts" })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { style: { marginTop: "10px" }, children: [
        selectedValue === "collect" && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(CollectPanel, {}),
        selectedValue === "prompts" && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(PromptPanel, {})
      ] })
    ] });
  };

  // src/pages/Chat/Window.tsx
  var import_react60 = __toESM(require_react(), 1);

  // src/pages/Chat/MessageList.tsx
  var React174 = __toESM(require_react(), 1);
  var import_react55 = __toESM(require_react(), 1);

  // ../node_modules/react-markdown/lib/uri-transformer.js
  var protocols = ["http", "https", "mailto", "tel"];
  function uriTransformer(uri) {
    const url = (uri || "").trim();
    const first = url.charAt(0);
    if (first === "#" || first === "/") {
      return url;
    }
    const colon = url.indexOf(":");
    if (colon === -1) {
      return url;
    }
    let index2 = -1;
    while (++index2 < protocols.length) {
      const protocol = protocols[index2];
      if (colon === protocol.length && url.slice(0, protocol.length).toLowerCase() === protocol) {
        return url;
      }
    }
    index2 = url.indexOf("?");
    if (index2 !== -1 && colon > index2) {
      return url;
    }
    index2 = url.indexOf("#");
    if (index2 !== -1 && colon > index2) {
      return url;
    }
    return "javascript:void(0)";
  }

  // ../node_modules/react-markdown/lib/react-markdown.js
  var import_react54 = __toESM(require_react(), 1);

  // ../node_modules/vfile/lib/index.js
  var import_is_buffer = __toESM(require_is_buffer(), 1);

  // ../node_modules/unist-util-stringify-position/lib/index.js
  function stringifyPosition(value) {
    if (!value || typeof value !== "object") {
      return "";
    }
    if ("position" in value || "type" in value) {
      return position(value.position);
    }
    if ("start" in value || "end" in value) {
      return position(value);
    }
    if ("line" in value || "column" in value) {
      return point(value);
    }
    return "";
  }
  function point(point4) {
    return index(point4 && point4.line) + ":" + index(point4 && point4.column);
  }
  function position(pos) {
    return point(pos && pos.start) + "-" + point(pos && pos.end);
  }
  function index(value) {
    return value && typeof value === "number" ? value : 1;
  }

  // ../node_modules/vfile-message/lib/index.js
  var VFileMessage = class extends Error {
    /**
     * Create a message for `reason` at `place` from `origin`.
     *
     * When an error is passed in as `reason`, the `stack` is copied.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     *
     *   > 👉 **Note**: you should use markdown.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns
     *   Instance of `VFileMessage`.
     */
    // To do: next major: expose `undefined` everywhere instead of `null`.
    constructor(reason, place, origin) {
      const parts = [null, null];
      let position4 = {
        // @ts-expect-error: we always follows the structure of `position`.
        start: { line: null, column: null },
        // @ts-expect-error: "
        end: { line: null, column: null }
      };
      super();
      if (typeof place === "string") {
        origin = place;
        place = void 0;
      }
      if (typeof origin === "string") {
        const index2 = origin.indexOf(":");
        if (index2 === -1) {
          parts[1] = origin;
        } else {
          parts[0] = origin.slice(0, index2);
          parts[1] = origin.slice(index2 + 1);
        }
      }
      if (place) {
        if ("type" in place || "position" in place) {
          if (place.position) {
            position4 = place.position;
          }
        } else if ("start" in place || "end" in place) {
          position4 = place;
        } else if ("line" in place || "column" in place) {
          position4.start = place;
        }
      }
      this.name = stringifyPosition(place) || "1:1";
      this.message = typeof reason === "object" ? reason.message : reason;
      this.stack = "";
      if (typeof reason === "object" && reason.stack) {
        this.stack = reason.stack;
      }
      this.reason = this.message;
      this.fatal;
      this.line = position4.start.line;
      this.column = position4.start.column;
      this.position = position4;
      this.source = parts[0];
      this.ruleId = parts[1];
      this.file;
      this.actual;
      this.expected;
      this.url;
      this.note;
    }
  };
  VFileMessage.prototype.file = "";
  VFileMessage.prototype.name = "";
  VFileMessage.prototype.reason = "";
  VFileMessage.prototype.message = "";
  VFileMessage.prototype.stack = "";
  VFileMessage.prototype.fatal = null;
  VFileMessage.prototype.column = null;
  VFileMessage.prototype.line = null;
  VFileMessage.prototype.source = null;
  VFileMessage.prototype.ruleId = null;
  VFileMessage.prototype.position = null;

  // ../node_modules/vfile/lib/minpath.browser.js
  var path = { basename, dirname, extname, join, sep: "/" };
  function basename(path2, ext) {
    if (ext !== void 0 && typeof ext !== "string") {
      throw new TypeError('"ext" argument must be a string');
    }
    assertPath(path2);
    let start2 = 0;
    let end2 = -1;
    let index2 = path2.length;
    let seenNonSlash;
    if (ext === void 0 || ext.length === 0 || ext.length > path2.length) {
      while (index2--) {
        if (path2.charCodeAt(index2) === 47) {
          if (seenNonSlash) {
            start2 = index2 + 1;
            break;
          }
        } else if (end2 < 0) {
          seenNonSlash = true;
          end2 = index2 + 1;
        }
      }
      return end2 < 0 ? "" : path2.slice(start2, end2);
    }
    if (ext === path2) {
      return "";
    }
    let firstNonSlashEnd = -1;
    let extIndex = ext.length - 1;
    while (index2--) {
      if (path2.charCodeAt(index2) === 47) {
        if (seenNonSlash) {
          start2 = index2 + 1;
          break;
        }
      } else {
        if (firstNonSlashEnd < 0) {
          seenNonSlash = true;
          firstNonSlashEnd = index2 + 1;
        }
        if (extIndex > -1) {
          if (path2.charCodeAt(index2) === ext.charCodeAt(extIndex--)) {
            if (extIndex < 0) {
              end2 = index2;
            }
          } else {
            extIndex = -1;
            end2 = firstNonSlashEnd;
          }
        }
      }
    }
    if (start2 === end2) {
      end2 = firstNonSlashEnd;
    } else if (end2 < 0) {
      end2 = path2.length;
    }
    return path2.slice(start2, end2);
  }
  function dirname(path2) {
    assertPath(path2);
    if (path2.length === 0) {
      return ".";
    }
    let end2 = -1;
    let index2 = path2.length;
    let unmatchedSlash;
    while (--index2) {
      if (path2.charCodeAt(index2) === 47) {
        if (unmatchedSlash) {
          end2 = index2;
          break;
        }
      } else if (!unmatchedSlash) {
        unmatchedSlash = true;
      }
    }
    return end2 < 0 ? path2.charCodeAt(0) === 47 ? "/" : "." : end2 === 1 && path2.charCodeAt(0) === 47 ? "//" : path2.slice(0, end2);
  }
  function extname(path2) {
    assertPath(path2);
    let index2 = path2.length;
    let end2 = -1;
    let startPart = 0;
    let startDot = -1;
    let preDotState = 0;
    let unmatchedSlash;
    while (index2--) {
      const code2 = path2.charCodeAt(index2);
      if (code2 === 47) {
        if (unmatchedSlash) {
          startPart = index2 + 1;
          break;
        }
        continue;
      }
      if (end2 < 0) {
        unmatchedSlash = true;
        end2 = index2 + 1;
      }
      if (code2 === 46) {
        if (startDot < 0) {
          startDot = index2;
        } else if (preDotState !== 1) {
          preDotState = 1;
        }
      } else if (startDot > -1) {
        preDotState = -1;
      }
    }
    if (startDot < 0 || end2 < 0 || // We saw a non-dot character immediately before the dot.
    preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
    preDotState === 1 && startDot === end2 - 1 && startDot === startPart + 1) {
      return "";
    }
    return path2.slice(startDot, end2);
  }
  function join(...segments) {
    let index2 = -1;
    let joined;
    while (++index2 < segments.length) {
      assertPath(segments[index2]);
      if (segments[index2]) {
        joined = joined === void 0 ? segments[index2] : joined + "/" + segments[index2];
      }
    }
    return joined === void 0 ? "." : normalize3(joined);
  }
  function normalize3(path2) {
    assertPath(path2);
    const absolute = path2.charCodeAt(0) === 47;
    let value = normalizeString(path2, !absolute);
    if (value.length === 0 && !absolute) {
      value = ".";
    }
    if (value.length > 0 && path2.charCodeAt(path2.length - 1) === 47) {
      value += "/";
    }
    return absolute ? "/" + value : value;
  }
  function normalizeString(path2, allowAboveRoot) {
    let result = "";
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let index2 = -1;
    let code2;
    let lastSlashIndex;
    while (++index2 <= path2.length) {
      if (index2 < path2.length) {
        code2 = path2.charCodeAt(index2);
      } else if (code2 === 47) {
        break;
      } else {
        code2 = 47;
      }
      if (code2 === 47) {
        if (lastSlash === index2 - 1 || dots === 1) {
        } else if (lastSlash !== index2 - 1 && dots === 2) {
          if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 || result.charCodeAt(result.length - 2) !== 46) {
            if (result.length > 2) {
              lastSlashIndex = result.lastIndexOf("/");
              if (lastSlashIndex !== result.length - 1) {
                if (lastSlashIndex < 0) {
                  result = "";
                  lastSegmentLength = 0;
                } else {
                  result = result.slice(0, lastSlashIndex);
                  lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
                }
                lastSlash = index2;
                dots = 0;
                continue;
              }
            } else if (result.length > 0) {
              result = "";
              lastSegmentLength = 0;
              lastSlash = index2;
              dots = 0;
              continue;
            }
          }
          if (allowAboveRoot) {
            result = result.length > 0 ? result + "/.." : "..";
            lastSegmentLength = 2;
          }
        } else {
          if (result.length > 0) {
            result += "/" + path2.slice(lastSlash + 1, index2);
          } else {
            result = path2.slice(lastSlash + 1, index2);
          }
          lastSegmentLength = index2 - lastSlash - 1;
        }
        lastSlash = index2;
        dots = 0;
      } else if (code2 === 46 && dots > -1) {
        dots++;
      } else {
        dots = -1;
      }
    }
    return result;
  }
  function assertPath(path2) {
    if (typeof path2 !== "string") {
      throw new TypeError(
        "Path must be a string. Received " + JSON.stringify(path2)
      );
    }
  }

  // ../node_modules/vfile/lib/minproc.browser.js
  var proc = { cwd };
  function cwd() {
    return "/";
  }

  // ../node_modules/vfile/lib/minurl.shared.js
  function isUrl(fileUrlOrPath) {
    return fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && // @ts-expect-error: indexable.
    fileUrlOrPath.href && // @ts-expect-error: indexable.
    fileUrlOrPath.origin;
  }

  // ../node_modules/vfile/lib/minurl.browser.js
  function urlToPath(path2) {
    if (typeof path2 === "string") {
      path2 = new URL(path2);
    } else if (!isUrl(path2)) {
      const error = new TypeError(
        'The "path" argument must be of type string or an instance of URL. Received `' + path2 + "`"
      );
      error.code = "ERR_INVALID_ARG_TYPE";
      throw error;
    }
    if (path2.protocol !== "file:") {
      const error = new TypeError("The URL must be of scheme file");
      error.code = "ERR_INVALID_URL_SCHEME";
      throw error;
    }
    return getPathFromURLPosix(path2);
  }
  function getPathFromURLPosix(url) {
    if (url.hostname !== "") {
      const error = new TypeError(
        'File URL host must be "localhost" or empty on darwin'
      );
      error.code = "ERR_INVALID_FILE_URL_HOST";
      throw error;
    }
    const pathname = url.pathname;
    let index2 = -1;
    while (++index2 < pathname.length) {
      if (pathname.charCodeAt(index2) === 37 && pathname.charCodeAt(index2 + 1) === 50) {
        const third = pathname.charCodeAt(index2 + 2);
        if (third === 70 || third === 102) {
          const error = new TypeError(
            "File URL path must not include encoded / characters"
          );
          error.code = "ERR_INVALID_FILE_URL_PATH";
          throw error;
        }
      }
    }
    return decodeURIComponent(pathname);
  }

  // ../node_modules/vfile/lib/index.js
  var order = ["history", "path", "basename", "stem", "extname", "dirname"];
  var VFile = class {
    /**
     * Create a new virtual file.
     *
     * `options` is treated as:
     *
     * *   `string` or `Buffer` — `{value: options}`
     * *   `URL` — `{path: options}`
     * *   `VFile` — shallow copies its data over to the new file
     * *   `object` — all fields are shallow copied over to the new file
     *
     * Path related fields are set in the following order (least specific to
     * most specific): `history`, `path`, `basename`, `stem`, `extname`,
     * `dirname`.
     *
     * You cannot set `dirname` or `extname` without setting either `history`,
     * `path`, `basename`, or `stem` too.
     *
     * @param {Compatible | null | undefined} [value]
     *   File value.
     * @returns
     *   New instance.
     */
    constructor(value) {
      let options;
      if (!value) {
        options = {};
      } else if (typeof value === "string" || buffer(value)) {
        options = { value };
      } else if (isUrl(value)) {
        options = { path: value };
      } else {
        options = value;
      }
      this.data = {};
      this.messages = [];
      this.history = [];
      this.cwd = proc.cwd();
      this.value;
      this.stored;
      this.result;
      this.map;
      let index2 = -1;
      while (++index2 < order.length) {
        const prop2 = order[index2];
        if (prop2 in options && options[prop2] !== void 0 && options[prop2] !== null) {
          this[prop2] = prop2 === "history" ? [...options[prop2]] : options[prop2];
        }
      }
      let prop;
      for (prop in options) {
        if (!order.includes(prop)) {
          this[prop] = options[prop];
        }
      }
    }
    /**
     * Get the full path (example: `'~/index.min.js'`).
     *
     * @returns {string}
     */
    get path() {
      return this.history[this.history.length - 1];
    }
    /**
     * Set the full path (example: `'~/index.min.js'`).
     *
     * Cannot be nullified.
     * You can set a file URL (a `URL` object with a `file:` protocol) which will
     * be turned into a path with `url.fileURLToPath`.
     *
     * @param {string | URL} path
     */
    set path(path2) {
      if (isUrl(path2)) {
        path2 = urlToPath(path2);
      }
      assertNonEmpty(path2, "path");
      if (this.path !== path2) {
        this.history.push(path2);
      }
    }
    /**
     * Get the parent path (example: `'~'`).
     */
    get dirname() {
      return typeof this.path === "string" ? path.dirname(this.path) : void 0;
    }
    /**
     * Set the parent path (example: `'~'`).
     *
     * Cannot be set if there’s no `path` yet.
     */
    set dirname(dirname3) {
      assertPath2(this.basename, "dirname");
      this.path = path.join(dirname3 || "", this.basename);
    }
    /**
     * Get the basename (including extname) (example: `'index.min.js'`).
     */
    get basename() {
      return typeof this.path === "string" ? path.basename(this.path) : void 0;
    }
    /**
     * Set basename (including extname) (`'index.min.js'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be nullified (use `file.path = file.dirname` instead).
     */
    set basename(basename3) {
      assertNonEmpty(basename3, "basename");
      assertPart(basename3, "basename");
      this.path = path.join(this.dirname || "", basename3);
    }
    /**
     * Get the extname (including dot) (example: `'.js'`).
     */
    get extname() {
      return typeof this.path === "string" ? path.extname(this.path) : void 0;
    }
    /**
     * Set the extname (including dot) (example: `'.js'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be set if there’s no `path` yet.
     */
    set extname(extname3) {
      assertPart(extname3, "extname");
      assertPath2(this.dirname, "extname");
      if (extname3) {
        if (extname3.charCodeAt(0) !== 46) {
          throw new Error("`extname` must start with `.`");
        }
        if (extname3.includes(".", 1)) {
          throw new Error("`extname` cannot contain multiple dots");
        }
      }
      this.path = path.join(this.dirname, this.stem + (extname3 || ""));
    }
    /**
     * Get the stem (basename w/o extname) (example: `'index.min'`).
     */
    get stem() {
      return typeof this.path === "string" ? path.basename(this.path, this.extname) : void 0;
    }
    /**
     * Set the stem (basename w/o extname) (example: `'index.min'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be nullified (use `file.path = file.dirname` instead).
     */
    set stem(stem) {
      assertNonEmpty(stem, "stem");
      assertPart(stem, "stem");
      this.path = path.join(this.dirname || "", stem + (this.extname || ""));
    }
    /**
     * Serialize the file.
     *
     * @param {BufferEncoding | null | undefined} [encoding='utf8']
     *   Character encoding to understand `value` as when it’s a `Buffer`
     *   (default: `'utf8'`).
     * @returns {string}
     *   Serialized file.
     */
    toString(encoding) {
      return (this.value || "").toString(encoding || void 0);
    }
    /**
     * Create a warning message associated with the file.
     *
     * Its `fatal` is set to `false` and `file` is set to the current file path.
     * Its added to `file.messages`.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {VFileMessage}
     *   Message.
     */
    message(reason, place, origin) {
      const message5 = new VFileMessage(reason, place, origin);
      if (this.path) {
        message5.name = this.path + ":" + message5.name;
        message5.file = this.path;
      }
      message5.fatal = false;
      this.messages.push(message5);
      return message5;
    }
    /**
     * Create an info message associated with the file.
     *
     * Its `fatal` is set to `null` and `file` is set to the current file path.
     * Its added to `file.messages`.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {VFileMessage}
     *   Message.
     */
    info(reason, place, origin) {
      const message5 = this.message(reason, place, origin);
      message5.fatal = null;
      return message5;
    }
    /**
     * Create a fatal error associated with the file.
     *
     * Its `fatal` is set to `true` and `file` is set to the current file path.
     * Its added to `file.messages`.
     *
     * > 👉 **Note**: a fatal error means that a file is no longer processable.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {never}
     *   Message.
     * @throws {VFileMessage}
     *   Message.
     */
    fail(reason, place, origin) {
      const message5 = this.message(reason, place, origin);
      message5.fatal = true;
      throw message5;
    }
  };
  function assertPart(part, name) {
    if (part && part.includes(path.sep)) {
      throw new Error(
        "`" + name + "` cannot be a path: did not expect `" + path.sep + "`"
      );
    }
  }
  function assertNonEmpty(part, name) {
    if (!part) {
      throw new Error("`" + name + "` cannot be empty");
    }
  }
  function assertPath2(path2, name) {
    if (!path2) {
      throw new Error("Setting `" + name + "` requires `path` to be set too");
    }
  }
  function buffer(value) {
    return (0, import_is_buffer.default)(value);
  }

  // ../node_modules/bail/index.js
  function bail(error) {
    if (error) {
      throw error;
    }
  }

  // ../node_modules/unified/lib/index.js
  var import_is_buffer2 = __toESM(require_is_buffer(), 1);
  var import_extend = __toESM(require_extend(), 1);

  // ../node_modules/is-plain-obj/index.js
  function isPlainObject(value) {
    if (typeof value !== "object" || value === null) {
      return false;
    }
    const prototype = Object.getPrototypeOf(value);
    return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
  }

  // ../node_modules/trough/index.js
  function trough() {
    const fns = [];
    const pipeline = { run, use };
    return pipeline;
    function run(...values2) {
      let middlewareIndex = -1;
      const callback = values2.pop();
      if (typeof callback !== "function") {
        throw new TypeError("Expected function as last argument, not " + callback);
      }
      next2(null, ...values2);
      function next2(error, ...output) {
        const fn = fns[++middlewareIndex];
        let index2 = -1;
        if (error) {
          callback(error);
          return;
        }
        while (++index2 < values2.length) {
          if (output[index2] === null || output[index2] === void 0) {
            output[index2] = values2[index2];
          }
        }
        values2 = output;
        if (fn) {
          wrap(fn, next2)(...output);
        } else {
          callback(null, ...output);
        }
      }
    }
    function use(middelware) {
      if (typeof middelware !== "function") {
        throw new TypeError(
          "Expected `middelware` to be a function, not " + middelware
        );
      }
      fns.push(middelware);
      return pipeline;
    }
  }
  function wrap(middleware2, callback) {
    let called;
    return wrapped;
    function wrapped(...parameters) {
      const fnExpectsCallback = middleware2.length > parameters.length;
      let result;
      if (fnExpectsCallback) {
        parameters.push(done);
      }
      try {
        result = middleware2.apply(this, parameters);
      } catch (error) {
        const exception = (
          /** @type {Error} */
          error
        );
        if (fnExpectsCallback && called) {
          throw exception;
        }
        return done(exception);
      }
      if (!fnExpectsCallback) {
        if (result instanceof Promise) {
          result.then(then, done);
        } else if (result instanceof Error) {
          done(result);
        } else {
          then(result);
        }
      }
    }
    function done(error, ...output) {
      if (!called) {
        called = true;
        callback(error, ...output);
      }
    }
    function then(value) {
      done(null, value);
    }
  }

  // ../node_modules/unified/lib/index.js
  var unified = base().freeze();
  var own = {}.hasOwnProperty;
  function base() {
    const transformers = trough();
    const attachers = [];
    let namespace = {};
    let frozen;
    let freezeIndex = -1;
    processor.data = data;
    processor.Parser = void 0;
    processor.Compiler = void 0;
    processor.freeze = freeze;
    processor.attachers = attachers;
    processor.use = use;
    processor.parse = parse3;
    processor.stringify = stringify4;
    processor.run = run;
    processor.runSync = runSync;
    processor.process = process2;
    processor.processSync = processSync;
    return processor;
    function processor() {
      const destination = base();
      let index2 = -1;
      while (++index2 < attachers.length) {
        destination.use(...attachers[index2]);
      }
      destination.data((0, import_extend.default)(true, {}, namespace));
      return destination;
    }
    function data(key, value) {
      if (typeof key === "string") {
        if (arguments.length === 2) {
          assertUnfrozen("data", frozen);
          namespace[key] = value;
          return processor;
        }
        return own.call(namespace, key) && namespace[key] || null;
      }
      if (key) {
        assertUnfrozen("data", frozen);
        namespace = key;
        return processor;
      }
      return namespace;
    }
    function freeze() {
      if (frozen) {
        return processor;
      }
      while (++freezeIndex < attachers.length) {
        const [attacher, ...options] = attachers[freezeIndex];
        if (options[0] === false) {
          continue;
        }
        if (options[0] === true) {
          options[0] = void 0;
        }
        const transformer = attacher.call(processor, ...options);
        if (typeof transformer === "function") {
          transformers.use(transformer);
        }
      }
      frozen = true;
      freezeIndex = Number.POSITIVE_INFINITY;
      return processor;
    }
    function use(value, ...options) {
      let settings;
      assertUnfrozen("use", frozen);
      if (value === null || value === void 0) {
      } else if (typeof value === "function") {
        addPlugin(value, ...options);
      } else if (typeof value === "object") {
        if (Array.isArray(value)) {
          addList(value);
        } else {
          addPreset(value);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value + "`");
      }
      if (settings) {
        namespace.settings = Object.assign(namespace.settings || {}, settings);
      }
      return processor;
      function add(value2) {
        if (typeof value2 === "function") {
          addPlugin(value2);
        } else if (typeof value2 === "object") {
          if (Array.isArray(value2)) {
            const [plugin, ...options2] = value2;
            addPlugin(plugin, ...options2);
          } else {
            addPreset(value2);
          }
        } else {
          throw new TypeError("Expected usable value, not `" + value2 + "`");
        }
      }
      function addPreset(result) {
        addList(result.plugins);
        if (result.settings) {
          settings = Object.assign(settings || {}, result.settings);
        }
      }
      function addList(plugins) {
        let index2 = -1;
        if (plugins === null || plugins === void 0) {
        } else if (Array.isArray(plugins)) {
          while (++index2 < plugins.length) {
            const thing = plugins[index2];
            add(thing);
          }
        } else {
          throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
        }
      }
      function addPlugin(plugin, value2) {
        let index2 = -1;
        let entry;
        while (++index2 < attachers.length) {
          if (attachers[index2][0] === plugin) {
            entry = attachers[index2];
            break;
          }
        }
        if (entry) {
          if (isPlainObject(entry[1]) && isPlainObject(value2)) {
            value2 = (0, import_extend.default)(true, entry[1], value2);
          }
          entry[1] = value2;
        } else {
          attachers.push([...arguments]);
        }
      }
    }
    function parse3(doc) {
      processor.freeze();
      const file = vfile(doc);
      const Parser = processor.Parser;
      assertParser("parse", Parser);
      if (newable(Parser, "parse")) {
        return new Parser(String(file), file).parse();
      }
      return Parser(String(file), file);
    }
    function stringify4(node4, doc) {
      processor.freeze();
      const file = vfile(doc);
      const Compiler = processor.Compiler;
      assertCompiler("stringify", Compiler);
      assertNode(node4);
      if (newable(Compiler, "compile")) {
        return new Compiler(node4, file).compile();
      }
      return Compiler(node4, file);
    }
    function run(node4, doc, callback) {
      assertNode(node4);
      processor.freeze();
      if (!callback && typeof doc === "function") {
        callback = doc;
        doc = void 0;
      }
      if (!callback) {
        return new Promise(executor);
      }
      executor(null, callback);
      function executor(resolve2, reject) {
        transformers.run(node4, vfile(doc), done);
        function done(error, tree, file) {
          tree = tree || node4;
          if (error) {
            reject(error);
          } else if (resolve2) {
            resolve2(tree);
          } else {
            callback(null, tree, file);
          }
        }
      }
    }
    function runSync(node4, file) {
      let result;
      let complete;
      processor.run(node4, file, done);
      assertDone("runSync", "run", complete);
      return result;
      function done(error, tree) {
        bail(error);
        result = tree;
        complete = true;
      }
    }
    function process2(doc, callback) {
      processor.freeze();
      assertParser("process", processor.Parser);
      assertCompiler("process", processor.Compiler);
      if (!callback) {
        return new Promise(executor);
      }
      executor(null, callback);
      function executor(resolve2, reject) {
        const file = vfile(doc);
        processor.run(processor.parse(file), file, (error, tree, file2) => {
          if (error || !tree || !file2) {
            done(error);
          } else {
            const result = processor.stringify(tree, file2);
            if (result === void 0 || result === null) {
            } else if (looksLikeAVFileValue(result)) {
              file2.value = result;
            } else {
              file2.result = result;
            }
            done(error, file2);
          }
        });
        function done(error, file2) {
          if (error || !file2) {
            reject(error);
          } else if (resolve2) {
            resolve2(file2);
          } else {
            callback(null, file2);
          }
        }
      }
    }
    function processSync(doc) {
      let complete;
      processor.freeze();
      assertParser("processSync", processor.Parser);
      assertCompiler("processSync", processor.Compiler);
      const file = vfile(doc);
      processor.process(file, done);
      assertDone("processSync", "process", complete);
      return file;
      function done(error) {
        complete = true;
        bail(error);
      }
    }
  }
  function newable(value, name) {
    return typeof value === "function" && // Prototypes do exist.
    // type-coverage:ignore-next-line
    value.prototype && // A function with keys in its prototype is probably a constructor.
    // Classes’ prototype methods are not enumerable, so we check if some value
    // exists in the prototype.
    // type-coverage:ignore-next-line
    (keys(value.prototype) || name in value.prototype);
  }
  function keys(value) {
    let key;
    for (key in value) {
      if (own.call(value, key)) {
        return true;
      }
    }
    return false;
  }
  function assertParser(name, value) {
    if (typeof value !== "function") {
      throw new TypeError("Cannot `" + name + "` without `Parser`");
    }
  }
  function assertCompiler(name, value) {
    if (typeof value !== "function") {
      throw new TypeError("Cannot `" + name + "` without `Compiler`");
    }
  }
  function assertUnfrozen(name, frozen) {
    if (frozen) {
      throw new Error(
        "Cannot call `" + name + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
      );
    }
  }
  function assertNode(node4) {
    if (!isPlainObject(node4) || typeof node4.type !== "string") {
      throw new TypeError("Expected node, got `" + node4 + "`");
    }
  }
  function assertDone(name, asyncName, complete) {
    if (!complete) {
      throw new Error(
        "`" + name + "` finished async. Use `" + asyncName + "` instead"
      );
    }
  }
  function vfile(value) {
    return looksLikeAVFile(value) ? value : new VFile(value);
  }
  function looksLikeAVFile(value) {
    return Boolean(
      value && typeof value === "object" && "message" in value && "messages" in value
    );
  }
  function looksLikeAVFileValue(value) {
    return typeof value === "string" || (0, import_is_buffer2.default)(value);
  }

  // ../node_modules/mdast-util-to-string/lib/index.js
  var emptyOptions = {};
  function toString(value, options) {
    const settings = options || emptyOptions;
    const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
    const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
    return one(value, includeImageAlt, includeHtml);
  }
  function one(value, includeImageAlt, includeHtml) {
    if (node(value)) {
      if ("value" in value) {
        return value.type === "html" && !includeHtml ? "" : value.value;
      }
      if (includeImageAlt && "alt" in value && value.alt) {
        return value.alt;
      }
      if ("children" in value) {
        return all(value.children, includeImageAlt, includeHtml);
      }
    }
    if (Array.isArray(value)) {
      return all(value, includeImageAlt, includeHtml);
    }
    return "";
  }
  function all(values2, includeImageAlt, includeHtml) {
    const result = [];
    let index2 = -1;
    while (++index2 < values2.length) {
      result[index2] = one(values2[index2], includeImageAlt, includeHtml);
    }
    return result.join("");
  }
  function node(value) {
    return Boolean(value && typeof value === "object");
  }

  // ../node_modules/micromark-util-chunked/index.js
  function splice(list4, start2, remove, items) {
    const end2 = list4.length;
    let chunkStart = 0;
    let parameters;
    if (start2 < 0) {
      start2 = -start2 > end2 ? 0 : end2 + start2;
    } else {
      start2 = start2 > end2 ? end2 : start2;
    }
    remove = remove > 0 ? remove : 0;
    if (items.length < 1e4) {
      parameters = Array.from(items);
      parameters.unshift(start2, remove);
      list4.splice(...parameters);
    } else {
      if (remove)
        list4.splice(start2, remove);
      while (chunkStart < items.length) {
        parameters = items.slice(chunkStart, chunkStart + 1e4);
        parameters.unshift(start2, 0);
        list4.splice(...parameters);
        chunkStart += 1e4;
        start2 += 1e4;
      }
    }
  }
  function push(list4, items) {
    if (list4.length > 0) {
      splice(list4, list4.length, 0, items);
      return list4;
    }
    return items;
  }

  // ../node_modules/micromark-util-combine-extensions/index.js
  var hasOwnProperty = {}.hasOwnProperty;
  function combineExtensions(extensions) {
    const all3 = {};
    let index2 = -1;
    while (++index2 < extensions.length) {
      syntaxExtension(all3, extensions[index2]);
    }
    return all3;
  }
  function syntaxExtension(all3, extension2) {
    let hook;
    for (hook in extension2) {
      const maybe = hasOwnProperty.call(all3, hook) ? all3[hook] : void 0;
      const left = maybe || (all3[hook] = {});
      const right = extension2[hook];
      let code2;
      if (right) {
        for (code2 in right) {
          if (!hasOwnProperty.call(left, code2))
            left[code2] = [];
          const value = right[code2];
          constructs(
            // @ts-expect-error Looks like a list.
            left[code2],
            Array.isArray(value) ? value : value ? [value] : []
          );
        }
      }
    }
  }
  function constructs(existing, list4) {
    let index2 = -1;
    const before = [];
    while (++index2 < list4.length) {
      ;
      (list4[index2].add === "after" ? existing : before).push(list4[index2]);
    }
    splice(existing, 0, 0, before);
  }

  // ../node_modules/micromark-util-character/lib/unicode-punctuation-regex.js
  var unicodePunctuationRegex = /[!-\/:-@\[-`\{-~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

  // ../node_modules/micromark-util-character/index.js
  var asciiAlpha = regexCheck(/[A-Za-z]/);
  var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
  var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
  function asciiControl(code2) {
    return (
      // Special whitespace codes (which have negative values), C0 and Control
      // character DEL
      code2 !== null && (code2 < 32 || code2 === 127)
    );
  }
  var asciiDigit = regexCheck(/\d/);
  var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
  var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
  function markdownLineEnding(code2) {
    return code2 !== null && code2 < -2;
  }
  function markdownLineEndingOrSpace(code2) {
    return code2 !== null && (code2 < 0 || code2 === 32);
  }
  function markdownSpace(code2) {
    return code2 === -2 || code2 === -1 || code2 === 32;
  }
  var unicodePunctuation = regexCheck(unicodePunctuationRegex);
  var unicodeWhitespace = regexCheck(/\s/);
  function regexCheck(regex3) {
    return check;
    function check(code2) {
      return code2 !== null && regex3.test(String.fromCharCode(code2));
    }
  }

  // ../node_modules/micromark-factory-space/index.js
  function factorySpace(effects, ok2, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size = 0;
    return start2;
    function start2(code2) {
      if (markdownSpace(code2)) {
        effects.enter(type);
        return prefix2(code2);
      }
      return ok2(code2);
    }
    function prefix2(code2) {
      if (markdownSpace(code2) && size++ < limit) {
        effects.consume(code2);
        return prefix2;
      }
      effects.exit(type);
      return ok2(code2);
    }
  }

  // ../node_modules/micromark/lib/initialize/content.js
  var content = {
    tokenize: initializeContent
  };
  function initializeContent(effects) {
    const contentStart = effects.attempt(
      this.parser.constructs.contentInitial,
      afterContentStartConstruct,
      paragraphInitial
    );
    let previous2;
    return contentStart;
    function afterContentStartConstruct(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, contentStart, "linePrefix");
    }
    function paragraphInitial(code2) {
      effects.enter("paragraph");
      return lineStart(code2);
    }
    function lineStart(code2) {
      const token2 = effects.enter("chunkText", {
        contentType: "text",
        previous: previous2
      });
      if (previous2) {
        previous2.next = token2;
      }
      previous2 = token2;
      return data(code2);
    }
    function data(code2) {
      if (code2 === null) {
        effects.exit("chunkText");
        effects.exit("paragraph");
        effects.consume(code2);
        return;
      }
      if (markdownLineEnding(code2)) {
        effects.consume(code2);
        effects.exit("chunkText");
        return lineStart;
      }
      effects.consume(code2);
      return data;
    }
  }

  // ../node_modules/micromark/lib/initialize/document.js
  var document2 = {
    tokenize: initializeDocument
  };
  var containerConstruct = {
    tokenize: tokenizeContainer
  };
  function initializeDocument(effects) {
    const self2 = this;
    const stack = [];
    let continued = 0;
    let childFlow;
    let childToken;
    let lineStartOffset;
    return start2;
    function start2(code2) {
      if (continued < stack.length) {
        const item = stack[continued];
        self2.containerState = item[1];
        return effects.attempt(
          item[0].continuation,
          documentContinue,
          checkNewContainers
        )(code2);
      }
      return checkNewContainers(code2);
    }
    function documentContinue(code2) {
      continued++;
      if (self2.containerState._closeFlow) {
        self2.containerState._closeFlow = void 0;
        if (childFlow) {
          closeFlow();
        }
        const indexBeforeExits = self2.events.length;
        let indexBeforeFlow = indexBeforeExits;
        let point4;
        while (indexBeforeFlow--) {
          if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
            point4 = self2.events[indexBeforeFlow][1].end;
            break;
          }
        }
        exitContainers(continued);
        let index2 = indexBeforeExits;
        while (index2 < self2.events.length) {
          self2.events[index2][1].end = Object.assign({}, point4);
          index2++;
        }
        splice(
          self2.events,
          indexBeforeFlow + 1,
          0,
          self2.events.slice(indexBeforeExits)
        );
        self2.events.length = index2;
        return checkNewContainers(code2);
      }
      return start2(code2);
    }
    function checkNewContainers(code2) {
      if (continued === stack.length) {
        if (!childFlow) {
          return documentContinued(code2);
        }
        if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
          return flowStart(code2);
        }
        self2.interrupt = Boolean(
          childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
        );
      }
      self2.containerState = {};
      return effects.check(
        containerConstruct,
        thereIsANewContainer,
        thereIsNoNewContainer
      )(code2);
    }
    function thereIsANewContainer(code2) {
      if (childFlow)
        closeFlow();
      exitContainers(continued);
      return documentContinued(code2);
    }
    function thereIsNoNewContainer(code2) {
      self2.parser.lazy[self2.now().line] = continued !== stack.length;
      lineStartOffset = self2.now().offset;
      return flowStart(code2);
    }
    function documentContinued(code2) {
      self2.containerState = {};
      return effects.attempt(
        containerConstruct,
        containerContinue,
        flowStart
      )(code2);
    }
    function containerContinue(code2) {
      continued++;
      stack.push([self2.currentConstruct, self2.containerState]);
      return documentContinued(code2);
    }
    function flowStart(code2) {
      if (code2 === null) {
        if (childFlow)
          closeFlow();
        exitContainers(0);
        effects.consume(code2);
        return;
      }
      childFlow = childFlow || self2.parser.flow(self2.now());
      effects.enter("chunkFlow", {
        contentType: "flow",
        previous: childToken,
        _tokenizer: childFlow
      });
      return flowContinue(code2);
    }
    function flowContinue(code2) {
      if (code2 === null) {
        writeToChild(effects.exit("chunkFlow"), true);
        exitContainers(0);
        effects.consume(code2);
        return;
      }
      if (markdownLineEnding(code2)) {
        effects.consume(code2);
        writeToChild(effects.exit("chunkFlow"));
        continued = 0;
        self2.interrupt = void 0;
        return start2;
      }
      effects.consume(code2);
      return flowContinue;
    }
    function writeToChild(token2, eof) {
      const stream = self2.sliceStream(token2);
      if (eof)
        stream.push(null);
      token2.previous = childToken;
      if (childToken)
        childToken.next = token2;
      childToken = token2;
      childFlow.defineSkip(token2.start);
      childFlow.write(stream);
      if (self2.parser.lazy[token2.start.line]) {
        let index2 = childFlow.events.length;
        while (index2--) {
          if (
            // The token starts before the line ending…
            childFlow.events[index2][1].start.offset < lineStartOffset && // …and either is not ended yet…
            (!childFlow.events[index2][1].end || // …or ends after it.
            childFlow.events[index2][1].end.offset > lineStartOffset)
          ) {
            return;
          }
        }
        const indexBeforeExits = self2.events.length;
        let indexBeforeFlow = indexBeforeExits;
        let seen;
        let point4;
        while (indexBeforeFlow--) {
          if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === "chunkFlow") {
            if (seen) {
              point4 = self2.events[indexBeforeFlow][1].end;
              break;
            }
            seen = true;
          }
        }
        exitContainers(continued);
        index2 = indexBeforeExits;
        while (index2 < self2.events.length) {
          self2.events[index2][1].end = Object.assign({}, point4);
          index2++;
        }
        splice(
          self2.events,
          indexBeforeFlow + 1,
          0,
          self2.events.slice(indexBeforeExits)
        );
        self2.events.length = index2;
      }
    }
    function exitContainers(size) {
      let index2 = stack.length;
      while (index2-- > size) {
        const entry = stack[index2];
        self2.containerState = entry[1];
        entry[0].exit.call(self2, effects);
      }
      stack.length = size;
    }
    function closeFlow() {
      childFlow.write([null]);
      childToken = void 0;
      childFlow = void 0;
      self2.containerState._closeFlow = void 0;
    }
  }
  function tokenizeContainer(effects, ok2, nok) {
    return factorySpace(
      effects,
      effects.attempt(this.parser.constructs.document, ok2, nok),
      "linePrefix",
      this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
    );
  }

  // ../node_modules/micromark-util-classify-character/index.js
  function classifyCharacter(code2) {
    if (code2 === null || markdownLineEndingOrSpace(code2) || unicodeWhitespace(code2)) {
      return 1;
    }
    if (unicodePunctuation(code2)) {
      return 2;
    }
  }

  // ../node_modules/micromark-util-resolve-all/index.js
  function resolveAll(constructs2, events, context) {
    const called = [];
    let index2 = -1;
    while (++index2 < constructs2.length) {
      const resolve2 = constructs2[index2].resolveAll;
      if (resolve2 && !called.includes(resolve2)) {
        events = resolve2(events, context);
        called.push(resolve2);
      }
    }
    return events;
  }

  // ../node_modules/micromark-core-commonmark/lib/attention.js
  var attention = {
    name: "attention",
    tokenize: tokenizeAttention,
    resolveAll: resolveAllAttention
  };
  function resolveAllAttention(events, context) {
    let index2 = -1;
    let open;
    let group;
    let text4;
    let openingSequence;
    let closingSequence;
    let use;
    let nextEvents;
    let offset;
    while (++index2 < events.length) {
      if (events[index2][0] === "enter" && events[index2][1].type === "attentionSequence" && events[index2][1]._close) {
        open = index2;
        while (open--) {
          if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
          context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index2][1]).charCodeAt(0)) {
            if ((events[open][1]._close || events[index2][1]._open) && (events[index2][1].end.offset - events[index2][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index2][1].end.offset - events[index2][1].start.offset) % 3)) {
              continue;
            }
            use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index2][1].end.offset - events[index2][1].start.offset > 1 ? 2 : 1;
            const start2 = Object.assign({}, events[open][1].end);
            const end2 = Object.assign({}, events[index2][1].start);
            movePoint(start2, -use);
            movePoint(end2, use);
            openingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start: start2,
              end: Object.assign({}, events[open][1].end)
            };
            closingSequence = {
              type: use > 1 ? "strongSequence" : "emphasisSequence",
              start: Object.assign({}, events[index2][1].start),
              end: end2
            };
            text4 = {
              type: use > 1 ? "strongText" : "emphasisText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index2][1].start)
            };
            group = {
              type: use > 1 ? "strong" : "emphasis",
              start: Object.assign({}, openingSequence.start),
              end: Object.assign({}, closingSequence.end)
            };
            events[open][1].end = Object.assign({}, openingSequence.start);
            events[index2][1].start = Object.assign({}, closingSequence.end);
            nextEvents = [];
            if (events[open][1].end.offset - events[open][1].start.offset) {
              nextEvents = push(nextEvents, [
                ["enter", events[open][1], context],
                ["exit", events[open][1], context]
              ]);
            }
            nextEvents = push(nextEvents, [
              ["enter", group, context],
              ["enter", openingSequence, context],
              ["exit", openingSequence, context],
              ["enter", text4, context]
            ]);
            nextEvents = push(
              nextEvents,
              resolveAll(
                context.parser.constructs.insideSpan.null,
                events.slice(open + 1, index2),
                context
              )
            );
            nextEvents = push(nextEvents, [
              ["exit", text4, context],
              ["enter", closingSequence, context],
              ["exit", closingSequence, context],
              ["exit", group, context]
            ]);
            if (events[index2][1].end.offset - events[index2][1].start.offset) {
              offset = 2;
              nextEvents = push(nextEvents, [
                ["enter", events[index2][1], context],
                ["exit", events[index2][1], context]
              ]);
            } else {
              offset = 0;
            }
            splice(events, open - 1, index2 - open + 3, nextEvents);
            index2 = open + nextEvents.length - offset - 2;
            break;
          }
        }
      }
    }
    index2 = -1;
    while (++index2 < events.length) {
      if (events[index2][1].type === "attentionSequence") {
        events[index2][1].type = "data";
      }
    }
    return events;
  }
  function tokenizeAttention(effects, ok2) {
    const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
    const previous2 = this.previous;
    const before = classifyCharacter(previous2);
    let marker;
    return start2;
    function start2(code2) {
      marker = code2;
      effects.enter("attentionSequence");
      return inside(code2);
    }
    function inside(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        return inside;
      }
      const token2 = effects.exit("attentionSequence");
      const after = classifyCharacter(code2);
      const open = !after || after === 2 && before || attentionMarkers2.includes(code2);
      const close = !before || before === 2 && after || attentionMarkers2.includes(previous2);
      token2._open = Boolean(marker === 42 ? open : open && (before || !close));
      token2._close = Boolean(marker === 42 ? close : close && (after || !open));
      return ok2(code2);
    }
  }
  function movePoint(point4, offset) {
    point4.column += offset;
    point4.offset += offset;
    point4._bufferIndex += offset;
  }

  // ../node_modules/micromark-core-commonmark/lib/autolink.js
  var autolink = {
    name: "autolink",
    tokenize: tokenizeAutolink
  };
  function tokenizeAutolink(effects, ok2, nok) {
    let size = 0;
    return start2;
    function start2(code2) {
      effects.enter("autolink");
      effects.enter("autolinkMarker");
      effects.consume(code2);
      effects.exit("autolinkMarker");
      effects.enter("autolinkProtocol");
      return open;
    }
    function open(code2) {
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return schemeOrEmailAtext;
      }
      return emailAtext(code2);
    }
    function schemeOrEmailAtext(code2) {
      if (code2 === 43 || code2 === 45 || code2 === 46 || asciiAlphanumeric(code2)) {
        size = 1;
        return schemeInsideOrEmailAtext(code2);
      }
      return emailAtext(code2);
    }
    function schemeInsideOrEmailAtext(code2) {
      if (code2 === 58) {
        effects.consume(code2);
        size = 0;
        return urlInside;
      }
      if ((code2 === 43 || code2 === 45 || code2 === 46 || asciiAlphanumeric(code2)) && size++ < 32) {
        effects.consume(code2);
        return schemeInsideOrEmailAtext;
      }
      size = 0;
      return emailAtext(code2);
    }
    function urlInside(code2) {
      if (code2 === 62) {
        effects.exit("autolinkProtocol");
        effects.enter("autolinkMarker");
        effects.consume(code2);
        effects.exit("autolinkMarker");
        effects.exit("autolink");
        return ok2;
      }
      if (code2 === null || code2 === 32 || code2 === 60 || asciiControl(code2)) {
        return nok(code2);
      }
      effects.consume(code2);
      return urlInside;
    }
    function emailAtext(code2) {
      if (code2 === 64) {
        effects.consume(code2);
        return emailAtSignOrDot;
      }
      if (asciiAtext(code2)) {
        effects.consume(code2);
        return emailAtext;
      }
      return nok(code2);
    }
    function emailAtSignOrDot(code2) {
      return asciiAlphanumeric(code2) ? emailLabel(code2) : nok(code2);
    }
    function emailLabel(code2) {
      if (code2 === 46) {
        effects.consume(code2);
        size = 0;
        return emailAtSignOrDot;
      }
      if (code2 === 62) {
        effects.exit("autolinkProtocol").type = "autolinkEmail";
        effects.enter("autolinkMarker");
        effects.consume(code2);
        effects.exit("autolinkMarker");
        effects.exit("autolink");
        return ok2;
      }
      return emailValue(code2);
    }
    function emailValue(code2) {
      if ((code2 === 45 || asciiAlphanumeric(code2)) && size++ < 63) {
        const next2 = code2 === 45 ? emailValue : emailLabel;
        effects.consume(code2);
        return next2;
      }
      return nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/blank-line.js
  var blankLine = {
    tokenize: tokenizeBlankLine,
    partial: true
  };
  function tokenizeBlankLine(effects, ok2, nok) {
    return start2;
    function start2(code2) {
      return markdownSpace(code2) ? factorySpace(effects, after, "linePrefix")(code2) : after(code2);
    }
    function after(code2) {
      return code2 === null || markdownLineEnding(code2) ? ok2(code2) : nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/block-quote.js
  var blockQuote = {
    name: "blockQuote",
    tokenize: tokenizeBlockQuoteStart,
    continuation: {
      tokenize: tokenizeBlockQuoteContinuation
    },
    exit
  };
  function tokenizeBlockQuoteStart(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      if (code2 === 62) {
        const state = self2.containerState;
        if (!state.open) {
          effects.enter("blockQuote", {
            _container: true
          });
          state.open = true;
        }
        effects.enter("blockQuotePrefix");
        effects.enter("blockQuoteMarker");
        effects.consume(code2);
        effects.exit("blockQuoteMarker");
        return after;
      }
      return nok(code2);
    }
    function after(code2) {
      if (markdownSpace(code2)) {
        effects.enter("blockQuotePrefixWhitespace");
        effects.consume(code2);
        effects.exit("blockQuotePrefixWhitespace");
        effects.exit("blockQuotePrefix");
        return ok2;
      }
      effects.exit("blockQuotePrefix");
      return ok2(code2);
    }
  }
  function tokenizeBlockQuoteContinuation(effects, ok2, nok) {
    const self2 = this;
    return contStart;
    function contStart(code2) {
      if (markdownSpace(code2)) {
        return factorySpace(
          effects,
          contBefore,
          "linePrefix",
          self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
        )(code2);
      }
      return contBefore(code2);
    }
    function contBefore(code2) {
      return effects.attempt(blockQuote, ok2, nok)(code2);
    }
  }
  function exit(effects) {
    effects.exit("blockQuote");
  }

  // ../node_modules/micromark-core-commonmark/lib/character-escape.js
  var characterEscape = {
    name: "characterEscape",
    tokenize: tokenizeCharacterEscape
  };
  function tokenizeCharacterEscape(effects, ok2, nok) {
    return start2;
    function start2(code2) {
      effects.enter("characterEscape");
      effects.enter("escapeMarker");
      effects.consume(code2);
      effects.exit("escapeMarker");
      return inside;
    }
    function inside(code2) {
      if (asciiPunctuation(code2)) {
        effects.enter("characterEscapeValue");
        effects.consume(code2);
        effects.exit("characterEscapeValue");
        effects.exit("characterEscape");
        return ok2;
      }
      return nok(code2);
    }
  }

  // ../node_modules/decode-named-character-reference/index.dom.js
  var element = document.createElement("i");
  function decodeNamedCharacterReference(value) {
    const characterReference2 = "&" + value + ";";
    element.innerHTML = characterReference2;
    const char2 = element.textContent;
    if (char2.charCodeAt(char2.length - 1) === 59 && value !== "semi") {
      return false;
    }
    return char2 === characterReference2 ? false : char2;
  }

  // ../node_modules/micromark-core-commonmark/lib/character-reference.js
  var characterReference = {
    name: "characterReference",
    tokenize: tokenizeCharacterReference
  };
  function tokenizeCharacterReference(effects, ok2, nok) {
    const self2 = this;
    let size = 0;
    let max;
    let test;
    return start2;
    function start2(code2) {
      effects.enter("characterReference");
      effects.enter("characterReferenceMarker");
      effects.consume(code2);
      effects.exit("characterReferenceMarker");
      return open;
    }
    function open(code2) {
      if (code2 === 35) {
        effects.enter("characterReferenceMarkerNumeric");
        effects.consume(code2);
        effects.exit("characterReferenceMarkerNumeric");
        return numeric;
      }
      effects.enter("characterReferenceValue");
      max = 31;
      test = asciiAlphanumeric;
      return value(code2);
    }
    function numeric(code2) {
      if (code2 === 88 || code2 === 120) {
        effects.enter("characterReferenceMarkerHexadecimal");
        effects.consume(code2);
        effects.exit("characterReferenceMarkerHexadecimal");
        effects.enter("characterReferenceValue");
        max = 6;
        test = asciiHexDigit;
        return value;
      }
      effects.enter("characterReferenceValue");
      max = 7;
      test = asciiDigit;
      return value(code2);
    }
    function value(code2) {
      if (code2 === 59 && size) {
        const token2 = effects.exit("characterReferenceValue");
        if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token2))) {
          return nok(code2);
        }
        effects.enter("characterReferenceMarker");
        effects.consume(code2);
        effects.exit("characterReferenceMarker");
        effects.exit("characterReference");
        return ok2;
      }
      if (test(code2) && size++ < max) {
        effects.consume(code2);
        return value;
      }
      return nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/code-fenced.js
  var nonLazyContinuation = {
    tokenize: tokenizeNonLazyContinuation,
    partial: true
  };
  var codeFenced = {
    name: "codeFenced",
    tokenize: tokenizeCodeFenced,
    concrete: true
  };
  function tokenizeCodeFenced(effects, ok2, nok) {
    const self2 = this;
    const closeStart = {
      tokenize: tokenizeCloseStart,
      partial: true
    };
    let initialPrefix = 0;
    let sizeOpen = 0;
    let marker;
    return start2;
    function start2(code2) {
      return beforeSequenceOpen(code2);
    }
    function beforeSequenceOpen(code2) {
      const tail = self2.events[self2.events.length - 1];
      initialPrefix = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
      marker = code2;
      effects.enter("codeFenced");
      effects.enter("codeFencedFence");
      effects.enter("codeFencedFenceSequence");
      return sequenceOpen(code2);
    }
    function sequenceOpen(code2) {
      if (code2 === marker) {
        sizeOpen++;
        effects.consume(code2);
        return sequenceOpen;
      }
      if (sizeOpen < 3) {
        return nok(code2);
      }
      effects.exit("codeFencedFenceSequence");
      return markdownSpace(code2) ? factorySpace(effects, infoBefore, "whitespace")(code2) : infoBefore(code2);
    }
    function infoBefore(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("codeFencedFence");
        return self2.interrupt ? ok2(code2) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code2);
      }
      effects.enter("codeFencedFenceInfo");
      effects.enter("chunkString", {
        contentType: "string"
      });
      return info(code2);
    }
    function info(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceInfo");
        return infoBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceInfo");
        return factorySpace(effects, metaBefore, "whitespace")(code2);
      }
      if (code2 === 96 && code2 === marker) {
        return nok(code2);
      }
      effects.consume(code2);
      return info;
    }
    function metaBefore(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return infoBefore(code2);
      }
      effects.enter("codeFencedFenceMeta");
      effects.enter("chunkString", {
        contentType: "string"
      });
      return meta(code2);
    }
    function meta(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("chunkString");
        effects.exit("codeFencedFenceMeta");
        return infoBefore(code2);
      }
      if (code2 === 96 && code2 === marker) {
        return nok(code2);
      }
      effects.consume(code2);
      return meta;
    }
    function atNonLazyBreak(code2) {
      return effects.attempt(closeStart, after, contentBefore)(code2);
    }
    function contentBefore(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return contentStart;
    }
    function contentStart(code2) {
      return initialPrefix > 0 && markdownSpace(code2) ? factorySpace(
        effects,
        beforeContentChunk,
        "linePrefix",
        initialPrefix + 1
      )(code2) : beforeContentChunk(code2);
    }
    function beforeContentChunk(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code2);
      }
      effects.enter("codeFlowValue");
      return contentChunk(code2);
    }
    function contentChunk(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("codeFlowValue");
        return beforeContentChunk(code2);
      }
      effects.consume(code2);
      return contentChunk;
    }
    function after(code2) {
      effects.exit("codeFenced");
      return ok2(code2);
    }
    function tokenizeCloseStart(effects2, ok3, nok2) {
      let size = 0;
      return startBefore;
      function startBefore(code2) {
        effects2.enter("lineEnding");
        effects2.consume(code2);
        effects2.exit("lineEnding");
        return start3;
      }
      function start3(code2) {
        effects2.enter("codeFencedFence");
        return markdownSpace(code2) ? factorySpace(
          effects2,
          beforeSequenceClose,
          "linePrefix",
          self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
        )(code2) : beforeSequenceClose(code2);
      }
      function beforeSequenceClose(code2) {
        if (code2 === marker) {
          effects2.enter("codeFencedFenceSequence");
          return sequenceClose(code2);
        }
        return nok2(code2);
      }
      function sequenceClose(code2) {
        if (code2 === marker) {
          size++;
          effects2.consume(code2);
          return sequenceClose;
        }
        if (size >= sizeOpen) {
          effects2.exit("codeFencedFenceSequence");
          return markdownSpace(code2) ? factorySpace(effects2, sequenceCloseAfter, "whitespace")(code2) : sequenceCloseAfter(code2);
        }
        return nok2(code2);
      }
      function sequenceCloseAfter(code2) {
        if (code2 === null || markdownLineEnding(code2)) {
          effects2.exit("codeFencedFence");
          return ok3(code2);
        }
        return nok2(code2);
      }
    }
  }
  function tokenizeNonLazyContinuation(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return lineStart;
    }
    function lineStart(code2) {
      return self2.parser.lazy[self2.now().line] ? nok(code2) : ok2(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/code-indented.js
  var codeIndented = {
    name: "codeIndented",
    tokenize: tokenizeCodeIndented
  };
  var furtherStart = {
    tokenize: tokenizeFurtherStart,
    partial: true
  };
  function tokenizeCodeIndented(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      effects.enter("codeIndented");
      return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code2);
    }
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code2) : nok(code2);
    }
    function atBreak(code2) {
      if (code2 === null) {
        return after(code2);
      }
      if (markdownLineEnding(code2)) {
        return effects.attempt(furtherStart, atBreak, after)(code2);
      }
      effects.enter("codeFlowValue");
      return inside(code2);
    }
    function inside(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("codeFlowValue");
        return atBreak(code2);
      }
      effects.consume(code2);
      return inside;
    }
    function after(code2) {
      effects.exit("codeIndented");
      return ok2(code2);
    }
  }
  function tokenizeFurtherStart(effects, ok2, nok) {
    const self2 = this;
    return furtherStart2;
    function furtherStart2(code2) {
      if (self2.parser.lazy[self2.now().line]) {
        return nok(code2);
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return furtherStart2;
      }
      return factorySpace(effects, afterPrefix, "linePrefix", 4 + 1)(code2);
    }
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok2(code2) : markdownLineEnding(code2) ? furtherStart2(code2) : nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/code-text.js
  var codeText = {
    name: "codeText",
    tokenize: tokenizeCodeText,
    resolve: resolveCodeText,
    previous
  };
  function resolveCodeText(events) {
    let tailExitIndex = events.length - 4;
    let headEnterIndex = 3;
    let index2;
    let enter;
    if ((events[headEnterIndex][1].type === "lineEnding" || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === "lineEnding" || events[tailExitIndex][1].type === "space")) {
      index2 = headEnterIndex;
      while (++index2 < tailExitIndex) {
        if (events[index2][1].type === "codeTextData") {
          events[headEnterIndex][1].type = "codeTextPadding";
          events[tailExitIndex][1].type = "codeTextPadding";
          headEnterIndex += 2;
          tailExitIndex -= 2;
          break;
        }
      }
    }
    index2 = headEnterIndex - 1;
    tailExitIndex++;
    while (++index2 <= tailExitIndex) {
      if (enter === void 0) {
        if (index2 !== tailExitIndex && events[index2][1].type !== "lineEnding") {
          enter = index2;
        }
      } else if (index2 === tailExitIndex || events[index2][1].type === "lineEnding") {
        events[enter][1].type = "codeTextData";
        if (index2 !== enter + 2) {
          events[enter][1].end = events[index2 - 1][1].end;
          events.splice(enter + 2, index2 - enter - 2);
          tailExitIndex -= index2 - enter - 2;
          index2 = enter + 2;
        }
        enter = void 0;
      }
    }
    return events;
  }
  function previous(code2) {
    return code2 !== 96 || this.events[this.events.length - 1][1].type === "characterEscape";
  }
  function tokenizeCodeText(effects, ok2, nok) {
    const self2 = this;
    let sizeOpen = 0;
    let size;
    let token2;
    return start2;
    function start2(code2) {
      effects.enter("codeText");
      effects.enter("codeTextSequence");
      return sequenceOpen(code2);
    }
    function sequenceOpen(code2) {
      if (code2 === 96) {
        effects.consume(code2);
        sizeOpen++;
        return sequenceOpen;
      }
      effects.exit("codeTextSequence");
      return between(code2);
    }
    function between(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 32) {
        effects.enter("space");
        effects.consume(code2);
        effects.exit("space");
        return between;
      }
      if (code2 === 96) {
        token2 = effects.enter("codeTextSequence");
        size = 0;
        return sequenceClose(code2);
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return between;
      }
      effects.enter("codeTextData");
      return data(code2);
    }
    function data(code2) {
      if (code2 === null || code2 === 32 || code2 === 96 || markdownLineEnding(code2)) {
        effects.exit("codeTextData");
        return between(code2);
      }
      effects.consume(code2);
      return data;
    }
    function sequenceClose(code2) {
      if (code2 === 96) {
        effects.consume(code2);
        size++;
        return sequenceClose;
      }
      if (size === sizeOpen) {
        effects.exit("codeTextSequence");
        effects.exit("codeText");
        return ok2(code2);
      }
      token2.type = "codeTextData";
      return data(code2);
    }
  }

  // ../node_modules/micromark-util-subtokenize/index.js
  function subtokenize(events) {
    const jumps = {};
    let index2 = -1;
    let event;
    let lineIndex;
    let otherIndex;
    let otherEvent;
    let parameters;
    let subevents;
    let more;
    while (++index2 < events.length) {
      while (index2 in jumps) {
        index2 = jumps[index2];
      }
      event = events[index2];
      if (index2 && event[1].type === "chunkFlow" && events[index2 - 1][1].type === "listItemPrefix") {
        subevents = event[1]._tokenizer.events;
        otherIndex = 0;
        if (otherIndex < subevents.length && subevents[otherIndex][1].type === "lineEndingBlank") {
          otherIndex += 2;
        }
        if (otherIndex < subevents.length && subevents[otherIndex][1].type === "content") {
          while (++otherIndex < subevents.length) {
            if (subevents[otherIndex][1].type === "content") {
              break;
            }
            if (subevents[otherIndex][1].type === "chunkText") {
              subevents[otherIndex][1]._isInFirstContentOfListItem = true;
              otherIndex++;
            }
          }
        }
      }
      if (event[0] === "enter") {
        if (event[1].contentType) {
          Object.assign(jumps, subcontent(events, index2));
          index2 = jumps[index2];
          more = true;
        }
      } else if (event[1]._container) {
        otherIndex = index2;
        lineIndex = void 0;
        while (otherIndex--) {
          otherEvent = events[otherIndex];
          if (otherEvent[1].type === "lineEnding" || otherEvent[1].type === "lineEndingBlank") {
            if (otherEvent[0] === "enter") {
              if (lineIndex) {
                events[lineIndex][1].type = "lineEndingBlank";
              }
              otherEvent[1].type = "lineEnding";
              lineIndex = otherIndex;
            }
          } else {
            break;
          }
        }
        if (lineIndex) {
          event[1].end = Object.assign({}, events[lineIndex][1].start);
          parameters = events.slice(lineIndex, index2);
          parameters.unshift(event);
          splice(events, lineIndex, index2 - lineIndex + 1, parameters);
        }
      }
    }
    return !more;
  }
  function subcontent(events, eventIndex) {
    const token2 = events[eventIndex][1];
    const context = events[eventIndex][2];
    let startPosition = eventIndex - 1;
    const startPositions = [];
    const tokenizer = token2._tokenizer || context.parser[token2.contentType](token2.start);
    const childEvents = tokenizer.events;
    const jumps = [];
    const gaps = {};
    let stream;
    let previous2;
    let index2 = -1;
    let current = token2;
    let adjust = 0;
    let start2 = 0;
    const breaks = [start2];
    while (current) {
      while (events[++startPosition][1] !== current) {
      }
      startPositions.push(startPosition);
      if (!current._tokenizer) {
        stream = context.sliceStream(current);
        if (!current.next) {
          stream.push(null);
        }
        if (previous2) {
          tokenizer.defineSkip(current.start);
        }
        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = true;
        }
        tokenizer.write(stream);
        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = void 0;
        }
      }
      previous2 = current;
      current = current.next;
    }
    current = token2;
    while (++index2 < childEvents.length) {
      if (
        // Find a void token that includes a break.
        childEvents[index2][0] === "exit" && childEvents[index2 - 1][0] === "enter" && childEvents[index2][1].type === childEvents[index2 - 1][1].type && childEvents[index2][1].start.line !== childEvents[index2][1].end.line
      ) {
        start2 = index2 + 1;
        breaks.push(start2);
        current._tokenizer = void 0;
        current.previous = void 0;
        current = current.next;
      }
    }
    tokenizer.events = [];
    if (current) {
      current._tokenizer = void 0;
      current.previous = void 0;
    } else {
      breaks.pop();
    }
    index2 = breaks.length;
    while (index2--) {
      const slice2 = childEvents.slice(breaks[index2], breaks[index2 + 1]);
      const start3 = startPositions.pop();
      jumps.unshift([start3, start3 + slice2.length - 1]);
      splice(events, start3, 2, slice2);
    }
    index2 = -1;
    while (++index2 < jumps.length) {
      gaps[adjust + jumps[index2][0]] = adjust + jumps[index2][1];
      adjust += jumps[index2][1] - jumps[index2][0] - 1;
    }
    return gaps;
  }

  // ../node_modules/micromark-core-commonmark/lib/content.js
  var content2 = {
    tokenize: tokenizeContent,
    resolve: resolveContent
  };
  var continuationConstruct = {
    tokenize: tokenizeContinuation,
    partial: true
  };
  function resolveContent(events) {
    subtokenize(events);
    return events;
  }
  function tokenizeContent(effects, ok2) {
    let previous2;
    return chunkStart;
    function chunkStart(code2) {
      effects.enter("content");
      previous2 = effects.enter("chunkContent", {
        contentType: "content"
      });
      return chunkInside(code2);
    }
    function chunkInside(code2) {
      if (code2 === null) {
        return contentEnd(code2);
      }
      if (markdownLineEnding(code2)) {
        return effects.check(
          continuationConstruct,
          contentContinue,
          contentEnd
        )(code2);
      }
      effects.consume(code2);
      return chunkInside;
    }
    function contentEnd(code2) {
      effects.exit("chunkContent");
      effects.exit("content");
      return ok2(code2);
    }
    function contentContinue(code2) {
      effects.consume(code2);
      effects.exit("chunkContent");
      previous2.next = effects.enter("chunkContent", {
        contentType: "content",
        previous: previous2
      });
      previous2 = previous2.next;
      return chunkInside;
    }
  }
  function tokenizeContinuation(effects, ok2, nok) {
    const self2 = this;
    return startLookahead;
    function startLookahead(code2) {
      effects.exit("chunkContent");
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, prefixed, "linePrefix");
    }
    function prefixed(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return nok(code2);
      }
      const tail = self2.events[self2.events.length - 1];
      if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === "linePrefix" && tail[2].sliceSerialize(tail[1], true).length >= 4) {
        return ok2(code2);
      }
      return effects.interrupt(self2.parser.constructs.flow, nok, ok2)(code2);
    }
  }

  // ../node_modules/micromark-factory-destination/index.js
  function factoryDestination(effects, ok2, nok, type, literalType, literalMarkerType, rawType, stringType, max) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start2;
    function start2(code2) {
      if (code2 === 60) {
        effects.enter(type);
        effects.enter(literalType);
        effects.enter(literalMarkerType);
        effects.consume(code2);
        effects.exit(literalMarkerType);
        return enclosedBefore;
      }
      if (code2 === null || code2 === 32 || code2 === 41 || asciiControl(code2)) {
        return nok(code2);
      }
      effects.enter(type);
      effects.enter(rawType);
      effects.enter(stringType);
      effects.enter("chunkString", {
        contentType: "string"
      });
      return raw(code2);
    }
    function enclosedBefore(code2) {
      if (code2 === 62) {
        effects.enter(literalMarkerType);
        effects.consume(code2);
        effects.exit(literalMarkerType);
        effects.exit(literalType);
        effects.exit(type);
        return ok2;
      }
      effects.enter(stringType);
      effects.enter("chunkString", {
        contentType: "string"
      });
      return enclosed(code2);
    }
    function enclosed(code2) {
      if (code2 === 62) {
        effects.exit("chunkString");
        effects.exit(stringType);
        return enclosedBefore(code2);
      }
      if (code2 === null || code2 === 60 || markdownLineEnding(code2)) {
        return nok(code2);
      }
      effects.consume(code2);
      return code2 === 92 ? enclosedEscape : enclosed;
    }
    function enclosedEscape(code2) {
      if (code2 === 60 || code2 === 62 || code2 === 92) {
        effects.consume(code2);
        return enclosed;
      }
      return enclosed(code2);
    }
    function raw(code2) {
      if (!balance && (code2 === null || code2 === 41 || markdownLineEndingOrSpace(code2))) {
        effects.exit("chunkString");
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok2(code2);
      }
      if (balance < limit && code2 === 40) {
        effects.consume(code2);
        balance++;
        return raw;
      }
      if (code2 === 41) {
        effects.consume(code2);
        balance--;
        return raw;
      }
      if (code2 === null || code2 === 32 || code2 === 40 || asciiControl(code2)) {
        return nok(code2);
      }
      effects.consume(code2);
      return code2 === 92 ? rawEscape : raw;
    }
    function rawEscape(code2) {
      if (code2 === 40 || code2 === 41 || code2 === 92) {
        effects.consume(code2);
        return raw;
      }
      return raw(code2);
    }
  }

  // ../node_modules/micromark-factory-label/index.js
  function factoryLabel(effects, ok2, nok, type, markerType, stringType) {
    const self2 = this;
    let size = 0;
    let seen;
    return start2;
    function start2(code2) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code2);
      effects.exit(markerType);
      effects.enter(stringType);
      return atBreak;
    }
    function atBreak(code2) {
      if (size > 999 || code2 === null || code2 === 91 || code2 === 93 && !seen || // To do: remove in the future once we’ve switched from
      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
      // which doesn’t need this.
      // Hidden footnotes hook.
      /* c8 ignore next 3 */
      code2 === 94 && !size && "_hiddenFootnoteSupport" in self2.parser.constructs) {
        return nok(code2);
      }
      if (code2 === 93) {
        effects.exit(stringType);
        effects.enter(markerType);
        effects.consume(code2);
        effects.exit(markerType);
        effects.exit(type);
        return ok2;
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return atBreak;
      }
      effects.enter("chunkString", {
        contentType: "string"
      });
      return labelInside(code2);
    }
    function labelInside(code2) {
      if (code2 === null || code2 === 91 || code2 === 93 || markdownLineEnding(code2) || size++ > 999) {
        effects.exit("chunkString");
        return atBreak(code2);
      }
      effects.consume(code2);
      if (!seen)
        seen = !markdownSpace(code2);
      return code2 === 92 ? labelEscape : labelInside;
    }
    function labelEscape(code2) {
      if (code2 === 91 || code2 === 92 || code2 === 93) {
        effects.consume(code2);
        size++;
        return labelInside;
      }
      return labelInside(code2);
    }
  }

  // ../node_modules/micromark-factory-title/index.js
  function factoryTitle(effects, ok2, nok, type, markerType, stringType) {
    let marker;
    return start2;
    function start2(code2) {
      if (code2 === 34 || code2 === 39 || code2 === 40) {
        effects.enter(type);
        effects.enter(markerType);
        effects.consume(code2);
        effects.exit(markerType);
        marker = code2 === 40 ? 41 : code2;
        return begin;
      }
      return nok(code2);
    }
    function begin(code2) {
      if (code2 === marker) {
        effects.enter(markerType);
        effects.consume(code2);
        effects.exit(markerType);
        effects.exit(type);
        return ok2;
      }
      effects.enter(stringType);
      return atBreak(code2);
    }
    function atBreak(code2) {
      if (code2 === marker) {
        effects.exit(stringType);
        return begin(marker);
      }
      if (code2 === null) {
        return nok(code2);
      }
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return factorySpace(effects, atBreak, "linePrefix");
      }
      effects.enter("chunkString", {
        contentType: "string"
      });
      return inside(code2);
    }
    function inside(code2) {
      if (code2 === marker || code2 === null || markdownLineEnding(code2)) {
        effects.exit("chunkString");
        return atBreak(code2);
      }
      effects.consume(code2);
      return code2 === 92 ? escape2 : inside;
    }
    function escape2(code2) {
      if (code2 === marker || code2 === 92) {
        effects.consume(code2);
        return inside;
      }
      return inside(code2);
    }
  }

  // ../node_modules/micromark-factory-whitespace/index.js
  function factoryWhitespace(effects, ok2) {
    let seen;
    return start2;
    function start2(code2) {
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        seen = true;
        return start2;
      }
      if (markdownSpace(code2)) {
        return factorySpace(
          effects,
          start2,
          seen ? "linePrefix" : "lineSuffix"
        )(code2);
      }
      return ok2(code2);
    }
  }

  // ../node_modules/micromark-util-normalize-identifier/index.js
  function normalizeIdentifier(value) {
    return value.replace(/[\t\n\r ]+/g, " ").replace(/^ | $/g, "").toLowerCase().toUpperCase();
  }

  // ../node_modules/micromark-core-commonmark/lib/definition.js
  var definition = {
    name: "definition",
    tokenize: tokenizeDefinition
  };
  var titleBefore = {
    tokenize: tokenizeTitleBefore,
    partial: true
  };
  function tokenizeDefinition(effects, ok2, nok) {
    const self2 = this;
    let identifier2;
    return start2;
    function start2(code2) {
      effects.enter("definition");
      return before(code2);
    }
    function before(code2) {
      return factoryLabel.call(
        self2,
        effects,
        labelAfter,
        // Note: we don’t need to reset the way `markdown-rs` does.
        nok,
        "definitionLabel",
        "definitionLabelMarker",
        "definitionLabelString"
      )(code2);
    }
    function labelAfter(code2) {
      identifier2 = normalizeIdentifier(
        self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
      );
      if (code2 === 58) {
        effects.enter("definitionMarker");
        effects.consume(code2);
        effects.exit("definitionMarker");
        return markerAfter;
      }
      return nok(code2);
    }
    function markerAfter(code2) {
      return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, destinationBefore)(code2) : destinationBefore(code2);
    }
    function destinationBefore(code2) {
      return factoryDestination(
        effects,
        destinationAfter,
        // Note: we don’t need to reset the way `markdown-rs` does.
        nok,
        "definitionDestination",
        "definitionDestinationLiteral",
        "definitionDestinationLiteralMarker",
        "definitionDestinationRaw",
        "definitionDestinationString"
      )(code2);
    }
    function destinationAfter(code2) {
      return effects.attempt(titleBefore, after, after)(code2);
    }
    function after(code2) {
      return markdownSpace(code2) ? factorySpace(effects, afterWhitespace, "whitespace")(code2) : afterWhitespace(code2);
    }
    function afterWhitespace(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("definition");
        self2.parser.defined.push(identifier2);
        return ok2(code2);
      }
      return nok(code2);
    }
  }
  function tokenizeTitleBefore(effects, ok2, nok) {
    return titleBefore2;
    function titleBefore2(code2) {
      return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, beforeMarker)(code2) : nok(code2);
    }
    function beforeMarker(code2) {
      return factoryTitle(
        effects,
        titleAfter,
        nok,
        "definitionTitle",
        "definitionTitleMarker",
        "definitionTitleString"
      )(code2);
    }
    function titleAfter(code2) {
      return markdownSpace(code2) ? factorySpace(effects, titleAfterOptionalWhitespace, "whitespace")(code2) : titleAfterOptionalWhitespace(code2);
    }
    function titleAfterOptionalWhitespace(code2) {
      return code2 === null || markdownLineEnding(code2) ? ok2(code2) : nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/hard-break-escape.js
  var hardBreakEscape = {
    name: "hardBreakEscape",
    tokenize: tokenizeHardBreakEscape
  };
  function tokenizeHardBreakEscape(effects, ok2, nok) {
    return start2;
    function start2(code2) {
      effects.enter("hardBreakEscape");
      effects.consume(code2);
      return after;
    }
    function after(code2) {
      if (markdownLineEnding(code2)) {
        effects.exit("hardBreakEscape");
        return ok2(code2);
      }
      return nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/heading-atx.js
  var headingAtx = {
    name: "headingAtx",
    tokenize: tokenizeHeadingAtx,
    resolve: resolveHeadingAtx
  };
  function resolveHeadingAtx(events, context) {
    let contentEnd = events.length - 2;
    let contentStart = 3;
    let content15;
    let text4;
    if (events[contentStart][1].type === "whitespace") {
      contentStart += 2;
    }
    if (contentEnd - 2 > contentStart && events[contentEnd][1].type === "whitespace") {
      contentEnd -= 2;
    }
    if (events[contentEnd][1].type === "atxHeadingSequence" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === "whitespace")) {
      contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
    }
    if (contentEnd > contentStart) {
      content15 = {
        type: "atxHeadingText",
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end
      };
      text4 = {
        type: "chunkText",
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end,
        contentType: "text"
      };
      splice(events, contentStart, contentEnd - contentStart + 1, [
        ["enter", content15, context],
        ["enter", text4, context],
        ["exit", text4, context],
        ["exit", content15, context]
      ]);
    }
    return events;
  }
  function tokenizeHeadingAtx(effects, ok2, nok) {
    let size = 0;
    return start2;
    function start2(code2) {
      effects.enter("atxHeading");
      return before(code2);
    }
    function before(code2) {
      effects.enter("atxHeadingSequence");
      return sequenceOpen(code2);
    }
    function sequenceOpen(code2) {
      if (code2 === 35 && size++ < 6) {
        effects.consume(code2);
        return sequenceOpen;
      }
      if (code2 === null || markdownLineEndingOrSpace(code2)) {
        effects.exit("atxHeadingSequence");
        return atBreak(code2);
      }
      return nok(code2);
    }
    function atBreak(code2) {
      if (code2 === 35) {
        effects.enter("atxHeadingSequence");
        return sequenceFurther(code2);
      }
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("atxHeading");
        return ok2(code2);
      }
      if (markdownSpace(code2)) {
        return factorySpace(effects, atBreak, "whitespace")(code2);
      }
      effects.enter("atxHeadingText");
      return data(code2);
    }
    function sequenceFurther(code2) {
      if (code2 === 35) {
        effects.consume(code2);
        return sequenceFurther;
      }
      effects.exit("atxHeadingSequence");
      return atBreak(code2);
    }
    function data(code2) {
      if (code2 === null || code2 === 35 || markdownLineEndingOrSpace(code2)) {
        effects.exit("atxHeadingText");
        return atBreak(code2);
      }
      effects.consume(code2);
      return data;
    }
  }

  // ../node_modules/micromark-util-html-tag-name/index.js
  var htmlBlockNames = [
    "address",
    "article",
    "aside",
    "base",
    "basefont",
    "blockquote",
    "body",
    "caption",
    "center",
    "col",
    "colgroup",
    "dd",
    "details",
    "dialog",
    "dir",
    "div",
    "dl",
    "dt",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "frame",
    "frameset",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hr",
    "html",
    "iframe",
    "legend",
    "li",
    "link",
    "main",
    "menu",
    "menuitem",
    "nav",
    "noframes",
    "ol",
    "optgroup",
    "option",
    "p",
    "param",
    "search",
    "section",
    "summary",
    "table",
    "tbody",
    "td",
    "tfoot",
    "th",
    "thead",
    "title",
    "tr",
    "track",
    "ul"
  ];
  var htmlRawNames = ["pre", "script", "style", "textarea"];

  // ../node_modules/micromark-core-commonmark/lib/html-flow.js
  var htmlFlow = {
    name: "htmlFlow",
    tokenize: tokenizeHtmlFlow,
    resolveTo: resolveToHtmlFlow,
    concrete: true
  };
  var blankLineBefore = {
    tokenize: tokenizeBlankLineBefore,
    partial: true
  };
  var nonLazyContinuationStart = {
    tokenize: tokenizeNonLazyContinuationStart,
    partial: true
  };
  function resolveToHtmlFlow(events) {
    let index2 = events.length;
    while (index2--) {
      if (events[index2][0] === "enter" && events[index2][1].type === "htmlFlow") {
        break;
      }
    }
    if (index2 > 1 && events[index2 - 2][1].type === "linePrefix") {
      events[index2][1].start = events[index2 - 2][1].start;
      events[index2 + 1][1].start = events[index2 - 2][1].start;
      events.splice(index2 - 2, 2);
    }
    return events;
  }
  function tokenizeHtmlFlow(effects, ok2, nok) {
    const self2 = this;
    let marker;
    let closingTag;
    let buffer2;
    let index2;
    let markerB;
    return start2;
    function start2(code2) {
      return before(code2);
    }
    function before(code2) {
      effects.enter("htmlFlow");
      effects.enter("htmlFlowData");
      effects.consume(code2);
      return open;
    }
    function open(code2) {
      if (code2 === 33) {
        effects.consume(code2);
        return declarationOpen;
      }
      if (code2 === 47) {
        effects.consume(code2);
        closingTag = true;
        return tagCloseStart;
      }
      if (code2 === 63) {
        effects.consume(code2);
        marker = 3;
        return self2.interrupt ? ok2 : continuationDeclarationInside;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        buffer2 = String.fromCharCode(code2);
        return tagName;
      }
      return nok(code2);
    }
    function declarationOpen(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        marker = 2;
        return commentOpenInside;
      }
      if (code2 === 91) {
        effects.consume(code2);
        marker = 5;
        index2 = 0;
        return cdataOpenInside;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        marker = 4;
        return self2.interrupt ? ok2 : continuationDeclarationInside;
      }
      return nok(code2);
    }
    function commentOpenInside(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return self2.interrupt ? ok2 : continuationDeclarationInside;
      }
      return nok(code2);
    }
    function cdataOpenInside(code2) {
      const value = "CDATA[";
      if (code2 === value.charCodeAt(index2++)) {
        effects.consume(code2);
        if (index2 === value.length) {
          return self2.interrupt ? ok2 : continuation;
        }
        return cdataOpenInside;
      }
      return nok(code2);
    }
    function tagCloseStart(code2) {
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        buffer2 = String.fromCharCode(code2);
        return tagName;
      }
      return nok(code2);
    }
    function tagName(code2) {
      if (code2 === null || code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        const slash = code2 === 47;
        const name = buffer2.toLowerCase();
        if (!slash && !closingTag && htmlRawNames.includes(name)) {
          marker = 1;
          return self2.interrupt ? ok2(code2) : continuation(code2);
        }
        if (htmlBlockNames.includes(buffer2.toLowerCase())) {
          marker = 6;
          if (slash) {
            effects.consume(code2);
            return basicSelfClosing;
          }
          return self2.interrupt ? ok2(code2) : continuation(code2);
        }
        marker = 7;
        return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code2) : closingTag ? completeClosingTagAfter(code2) : completeAttributeNameBefore(code2);
      }
      if (code2 === 45 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        buffer2 += String.fromCharCode(code2);
        return tagName;
      }
      return nok(code2);
    }
    function basicSelfClosing(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        return self2.interrupt ? ok2 : continuation;
      }
      return nok(code2);
    }
    function completeClosingTagAfter(code2) {
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeClosingTagAfter;
      }
      return completeEnd(code2);
    }
    function completeAttributeNameBefore(code2) {
      if (code2 === 47) {
        effects.consume(code2);
        return completeEnd;
      }
      if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
        effects.consume(code2);
        return completeAttributeName;
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAttributeNameBefore;
      }
      return completeEnd(code2);
    }
    function completeAttributeName(code2) {
      if (code2 === 45 || code2 === 46 || code2 === 58 || code2 === 95 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        return completeAttributeName;
      }
      return completeAttributeNameAfter(code2);
    }
    function completeAttributeNameAfter(code2) {
      if (code2 === 61) {
        effects.consume(code2);
        return completeAttributeValueBefore;
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAttributeNameAfter;
      }
      return completeAttributeNameBefore(code2);
    }
    function completeAttributeValueBefore(code2) {
      if (code2 === null || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96) {
        return nok(code2);
      }
      if (code2 === 34 || code2 === 39) {
        effects.consume(code2);
        markerB = code2;
        return completeAttributeValueQuoted;
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAttributeValueBefore;
      }
      return completeAttributeValueUnquoted(code2);
    }
    function completeAttributeValueQuoted(code2) {
      if (code2 === markerB) {
        effects.consume(code2);
        markerB = null;
        return completeAttributeValueQuotedAfter;
      }
      if (code2 === null || markdownLineEnding(code2)) {
        return nok(code2);
      }
      effects.consume(code2);
      return completeAttributeValueQuoted;
    }
    function completeAttributeValueUnquoted(code2) {
      if (code2 === null || code2 === 34 || code2 === 39 || code2 === 47 || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96 || markdownLineEndingOrSpace(code2)) {
        return completeAttributeNameAfter(code2);
      }
      effects.consume(code2);
      return completeAttributeValueUnquoted;
    }
    function completeAttributeValueQuotedAfter(code2) {
      if (code2 === 47 || code2 === 62 || markdownSpace(code2)) {
        return completeAttributeNameBefore(code2);
      }
      return nok(code2);
    }
    function completeEnd(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        return completeAfter;
      }
      return nok(code2);
    }
    function completeAfter(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return continuation(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return completeAfter;
      }
      return nok(code2);
    }
    function continuation(code2) {
      if (code2 === 45 && marker === 2) {
        effects.consume(code2);
        return continuationCommentInside;
      }
      if (code2 === 60 && marker === 1) {
        effects.consume(code2);
        return continuationRawTagOpen;
      }
      if (code2 === 62 && marker === 4) {
        effects.consume(code2);
        return continuationClose;
      }
      if (code2 === 63 && marker === 3) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      if (code2 === 93 && marker === 5) {
        effects.consume(code2);
        return continuationCdataInside;
      }
      if (markdownLineEnding(code2) && (marker === 6 || marker === 7)) {
        effects.exit("htmlFlowData");
        return effects.check(
          blankLineBefore,
          continuationAfter,
          continuationStart
        )(code2);
      }
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("htmlFlowData");
        return continuationStart(code2);
      }
      effects.consume(code2);
      return continuation;
    }
    function continuationStart(code2) {
      return effects.check(
        nonLazyContinuationStart,
        continuationStartNonLazy,
        continuationAfter
      )(code2);
    }
    function continuationStartNonLazy(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return continuationBefore;
    }
    function continuationBefore(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        return continuationStart(code2);
      }
      effects.enter("htmlFlowData");
      return continuation(code2);
    }
    function continuationCommentInside(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      return continuation(code2);
    }
    function continuationRawTagOpen(code2) {
      if (code2 === 47) {
        effects.consume(code2);
        buffer2 = "";
        return continuationRawEndTag;
      }
      return continuation(code2);
    }
    function continuationRawEndTag(code2) {
      if (code2 === 62) {
        const name = buffer2.toLowerCase();
        if (htmlRawNames.includes(name)) {
          effects.consume(code2);
          return continuationClose;
        }
        return continuation(code2);
      }
      if (asciiAlpha(code2) && buffer2.length < 8) {
        effects.consume(code2);
        buffer2 += String.fromCharCode(code2);
        return continuationRawEndTag;
      }
      return continuation(code2);
    }
    function continuationCdataInside(code2) {
      if (code2 === 93) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      return continuation(code2);
    }
    function continuationDeclarationInside(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        return continuationClose;
      }
      if (code2 === 45 && marker === 2) {
        effects.consume(code2);
        return continuationDeclarationInside;
      }
      return continuation(code2);
    }
    function continuationClose(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("htmlFlowData");
        return continuationAfter(code2);
      }
      effects.consume(code2);
      return continuationClose;
    }
    function continuationAfter(code2) {
      effects.exit("htmlFlow");
      return ok2(code2);
    }
  }
  function tokenizeNonLazyContinuationStart(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      if (markdownLineEnding(code2)) {
        effects.enter("lineEnding");
        effects.consume(code2);
        effects.exit("lineEnding");
        return after;
      }
      return nok(code2);
    }
    function after(code2) {
      return self2.parser.lazy[self2.now().line] ? nok(code2) : ok2(code2);
    }
  }
  function tokenizeBlankLineBefore(effects, ok2, nok) {
    return start2;
    function start2(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return effects.attempt(blankLine, ok2, nok);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/html-text.js
  var htmlText = {
    name: "htmlText",
    tokenize: tokenizeHtmlText
  };
  function tokenizeHtmlText(effects, ok2, nok) {
    const self2 = this;
    let marker;
    let index2;
    let returnState;
    return start2;
    function start2(code2) {
      effects.enter("htmlText");
      effects.enter("htmlTextData");
      effects.consume(code2);
      return open;
    }
    function open(code2) {
      if (code2 === 33) {
        effects.consume(code2);
        return declarationOpen;
      }
      if (code2 === 47) {
        effects.consume(code2);
        return tagCloseStart;
      }
      if (code2 === 63) {
        effects.consume(code2);
        return instruction;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return tagOpen;
      }
      return nok(code2);
    }
    function declarationOpen(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return commentOpenInside;
      }
      if (code2 === 91) {
        effects.consume(code2);
        index2 = 0;
        return cdataOpenInside;
      }
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return declaration2;
      }
      return nok(code2);
    }
    function commentOpenInside(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return commentEnd;
      }
      return nok(code2);
    }
    function comment2(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 45) {
        effects.consume(code2);
        return commentClose;
      }
      if (markdownLineEnding(code2)) {
        returnState = comment2;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return comment2;
    }
    function commentClose(code2) {
      if (code2 === 45) {
        effects.consume(code2);
        return commentEnd;
      }
      return comment2(code2);
    }
    function commentEnd(code2) {
      return code2 === 62 ? end2(code2) : code2 === 45 ? commentClose(code2) : comment2(code2);
    }
    function cdataOpenInside(code2) {
      const value = "CDATA[";
      if (code2 === value.charCodeAt(index2++)) {
        effects.consume(code2);
        return index2 === value.length ? cdata : cdataOpenInside;
      }
      return nok(code2);
    }
    function cdata(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 93) {
        effects.consume(code2);
        return cdataClose;
      }
      if (markdownLineEnding(code2)) {
        returnState = cdata;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return cdata;
    }
    function cdataClose(code2) {
      if (code2 === 93) {
        effects.consume(code2);
        return cdataEnd;
      }
      return cdata(code2);
    }
    function cdataEnd(code2) {
      if (code2 === 62) {
        return end2(code2);
      }
      if (code2 === 93) {
        effects.consume(code2);
        return cdataEnd;
      }
      return cdata(code2);
    }
    function declaration2(code2) {
      if (code2 === null || code2 === 62) {
        return end2(code2);
      }
      if (markdownLineEnding(code2)) {
        returnState = declaration2;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return declaration2;
    }
    function instruction(code2) {
      if (code2 === null) {
        return nok(code2);
      }
      if (code2 === 63) {
        effects.consume(code2);
        return instructionClose;
      }
      if (markdownLineEnding(code2)) {
        returnState = instruction;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return instruction;
    }
    function instructionClose(code2) {
      return code2 === 62 ? end2(code2) : instruction(code2);
    }
    function tagCloseStart(code2) {
      if (asciiAlpha(code2)) {
        effects.consume(code2);
        return tagClose;
      }
      return nok(code2);
    }
    function tagClose(code2) {
      if (code2 === 45 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        return tagClose;
      }
      return tagCloseBetween(code2);
    }
    function tagCloseBetween(code2) {
      if (markdownLineEnding(code2)) {
        returnState = tagCloseBetween;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagCloseBetween;
      }
      return end2(code2);
    }
    function tagOpen(code2) {
      if (code2 === 45 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        return tagOpen;
      }
      if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        return tagOpenBetween(code2);
      }
      return nok(code2);
    }
    function tagOpenBetween(code2) {
      if (code2 === 47) {
        effects.consume(code2);
        return end2;
      }
      if (code2 === 58 || code2 === 95 || asciiAlpha(code2)) {
        effects.consume(code2);
        return tagOpenAttributeName;
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenBetween;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagOpenBetween;
      }
      return end2(code2);
    }
    function tagOpenAttributeName(code2) {
      if (code2 === 45 || code2 === 46 || code2 === 58 || code2 === 95 || asciiAlphanumeric(code2)) {
        effects.consume(code2);
        return tagOpenAttributeName;
      }
      return tagOpenAttributeNameAfter(code2);
    }
    function tagOpenAttributeNameAfter(code2) {
      if (code2 === 61) {
        effects.consume(code2);
        return tagOpenAttributeValueBefore;
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenAttributeNameAfter;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagOpenAttributeNameAfter;
      }
      return tagOpenBetween(code2);
    }
    function tagOpenAttributeValueBefore(code2) {
      if (code2 === null || code2 === 60 || code2 === 61 || code2 === 62 || code2 === 96) {
        return nok(code2);
      }
      if (code2 === 34 || code2 === 39) {
        effects.consume(code2);
        marker = code2;
        return tagOpenAttributeValueQuoted;
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenAttributeValueBefore;
        return lineEndingBefore(code2);
      }
      if (markdownSpace(code2)) {
        effects.consume(code2);
        return tagOpenAttributeValueBefore;
      }
      effects.consume(code2);
      return tagOpenAttributeValueUnquoted;
    }
    function tagOpenAttributeValueQuoted(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        marker = void 0;
        return tagOpenAttributeValueQuotedAfter;
      }
      if (code2 === null) {
        return nok(code2);
      }
      if (markdownLineEnding(code2)) {
        returnState = tagOpenAttributeValueQuoted;
        return lineEndingBefore(code2);
      }
      effects.consume(code2);
      return tagOpenAttributeValueQuoted;
    }
    function tagOpenAttributeValueUnquoted(code2) {
      if (code2 === null || code2 === 34 || code2 === 39 || code2 === 60 || code2 === 61 || code2 === 96) {
        return nok(code2);
      }
      if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        return tagOpenBetween(code2);
      }
      effects.consume(code2);
      return tagOpenAttributeValueUnquoted;
    }
    function tagOpenAttributeValueQuotedAfter(code2) {
      if (code2 === 47 || code2 === 62 || markdownLineEndingOrSpace(code2)) {
        return tagOpenBetween(code2);
      }
      return nok(code2);
    }
    function end2(code2) {
      if (code2 === 62) {
        effects.consume(code2);
        effects.exit("htmlTextData");
        effects.exit("htmlText");
        return ok2;
      }
      return nok(code2);
    }
    function lineEndingBefore(code2) {
      effects.exit("htmlTextData");
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return lineEndingAfter;
    }
    function lineEndingAfter(code2) {
      return markdownSpace(code2) ? factorySpace(
        effects,
        lineEndingAfterPrefix,
        "linePrefix",
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      )(code2) : lineEndingAfterPrefix(code2);
    }
    function lineEndingAfterPrefix(code2) {
      effects.enter("htmlTextData");
      return returnState(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/label-end.js
  var labelEnd = {
    name: "labelEnd",
    tokenize: tokenizeLabelEnd,
    resolveTo: resolveToLabelEnd,
    resolveAll: resolveAllLabelEnd
  };
  var resourceConstruct = {
    tokenize: tokenizeResource
  };
  var referenceFullConstruct = {
    tokenize: tokenizeReferenceFull
  };
  var referenceCollapsedConstruct = {
    tokenize: tokenizeReferenceCollapsed
  };
  function resolveAllLabelEnd(events) {
    let index2 = -1;
    while (++index2 < events.length) {
      const token2 = events[index2][1];
      if (token2.type === "labelImage" || token2.type === "labelLink" || token2.type === "labelEnd") {
        events.splice(index2 + 1, token2.type === "labelImage" ? 4 : 2);
        token2.type = "data";
        index2++;
      }
    }
    return events;
  }
  function resolveToLabelEnd(events, context) {
    let index2 = events.length;
    let offset = 0;
    let token2;
    let open;
    let close;
    let media;
    while (index2--) {
      token2 = events[index2][1];
      if (open) {
        if (token2.type === "link" || token2.type === "labelLink" && token2._inactive) {
          break;
        }
        if (events[index2][0] === "enter" && token2.type === "labelLink") {
          token2._inactive = true;
        }
      } else if (close) {
        if (events[index2][0] === "enter" && (token2.type === "labelImage" || token2.type === "labelLink") && !token2._balanced) {
          open = index2;
          if (token2.type !== "labelLink") {
            offset = 2;
            break;
          }
        }
      } else if (token2.type === "labelEnd") {
        close = index2;
      }
    }
    const group = {
      type: events[open][1].type === "labelLink" ? "link" : "image",
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    };
    const label6 = {
      type: "label",
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[close][1].end)
    };
    const text4 = {
      type: "labelText",
      start: Object.assign({}, events[open + offset + 2][1].end),
      end: Object.assign({}, events[close - 2][1].start)
    };
    media = [
      ["enter", group, context],
      ["enter", label6, context]
    ];
    media = push(media, events.slice(open + 1, open + offset + 3));
    media = push(media, [["enter", text4, context]]);
    media = push(
      media,
      resolveAll(
        context.parser.constructs.insideSpan.null,
        events.slice(open + offset + 4, close - 3),
        context
      )
    );
    media = push(media, [
      ["exit", text4, context],
      events[close - 2],
      events[close - 1],
      ["exit", label6, context]
    ]);
    media = push(media, events.slice(close + 1));
    media = push(media, [["exit", group, context]]);
    splice(events, open, events.length, media);
    return events;
  }
  function tokenizeLabelEnd(effects, ok2, nok) {
    const self2 = this;
    let index2 = self2.events.length;
    let labelStart;
    let defined;
    while (index2--) {
      if ((self2.events[index2][1].type === "labelImage" || self2.events[index2][1].type === "labelLink") && !self2.events[index2][1]._balanced) {
        labelStart = self2.events[index2][1];
        break;
      }
    }
    return start2;
    function start2(code2) {
      if (!labelStart) {
        return nok(code2);
      }
      if (labelStart._inactive) {
        return labelEndNok(code2);
      }
      defined = self2.parser.defined.includes(
        normalizeIdentifier(
          self2.sliceSerialize({
            start: labelStart.end,
            end: self2.now()
          })
        )
      );
      effects.enter("labelEnd");
      effects.enter("labelMarker");
      effects.consume(code2);
      effects.exit("labelMarker");
      effects.exit("labelEnd");
      return after;
    }
    function after(code2) {
      if (code2 === 40) {
        return effects.attempt(
          resourceConstruct,
          labelEndOk,
          defined ? labelEndOk : labelEndNok
        )(code2);
      }
      if (code2 === 91) {
        return effects.attempt(
          referenceFullConstruct,
          labelEndOk,
          defined ? referenceNotFull : labelEndNok
        )(code2);
      }
      return defined ? labelEndOk(code2) : labelEndNok(code2);
    }
    function referenceNotFull(code2) {
      return effects.attempt(
        referenceCollapsedConstruct,
        labelEndOk,
        labelEndNok
      )(code2);
    }
    function labelEndOk(code2) {
      return ok2(code2);
    }
    function labelEndNok(code2) {
      labelStart._balanced = true;
      return nok(code2);
    }
  }
  function tokenizeResource(effects, ok2, nok) {
    return resourceStart;
    function resourceStart(code2) {
      effects.enter("resource");
      effects.enter("resourceMarker");
      effects.consume(code2);
      effects.exit("resourceMarker");
      return resourceBefore;
    }
    function resourceBefore(code2) {
      return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceOpen)(code2) : resourceOpen(code2);
    }
    function resourceOpen(code2) {
      if (code2 === 41) {
        return resourceEnd(code2);
      }
      return factoryDestination(
        effects,
        resourceDestinationAfter,
        resourceDestinationMissing,
        "resourceDestination",
        "resourceDestinationLiteral",
        "resourceDestinationLiteralMarker",
        "resourceDestinationRaw",
        "resourceDestinationString",
        32
      )(code2);
    }
    function resourceDestinationAfter(code2) {
      return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceBetween)(code2) : resourceEnd(code2);
    }
    function resourceDestinationMissing(code2) {
      return nok(code2);
    }
    function resourceBetween(code2) {
      if (code2 === 34 || code2 === 39 || code2 === 40) {
        return factoryTitle(
          effects,
          resourceTitleAfter,
          nok,
          "resourceTitle",
          "resourceTitleMarker",
          "resourceTitleString"
        )(code2);
      }
      return resourceEnd(code2);
    }
    function resourceTitleAfter(code2) {
      return markdownLineEndingOrSpace(code2) ? factoryWhitespace(effects, resourceEnd)(code2) : resourceEnd(code2);
    }
    function resourceEnd(code2) {
      if (code2 === 41) {
        effects.enter("resourceMarker");
        effects.consume(code2);
        effects.exit("resourceMarker");
        effects.exit("resource");
        return ok2;
      }
      return nok(code2);
    }
  }
  function tokenizeReferenceFull(effects, ok2, nok) {
    const self2 = this;
    return referenceFull;
    function referenceFull(code2) {
      return factoryLabel.call(
        self2,
        effects,
        referenceFullAfter,
        referenceFullMissing,
        "reference",
        "referenceMarker",
        "referenceString"
      )(code2);
    }
    function referenceFullAfter(code2) {
      return self2.parser.defined.includes(
        normalizeIdentifier(
          self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
        )
      ) ? ok2(code2) : nok(code2);
    }
    function referenceFullMissing(code2) {
      return nok(code2);
    }
  }
  function tokenizeReferenceCollapsed(effects, ok2, nok) {
    return referenceCollapsedStart;
    function referenceCollapsedStart(code2) {
      effects.enter("reference");
      effects.enter("referenceMarker");
      effects.consume(code2);
      effects.exit("referenceMarker");
      return referenceCollapsedOpen;
    }
    function referenceCollapsedOpen(code2) {
      if (code2 === 93) {
        effects.enter("referenceMarker");
        effects.consume(code2);
        effects.exit("referenceMarker");
        effects.exit("reference");
        return ok2;
      }
      return nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/label-start-image.js
  var labelStartImage = {
    name: "labelStartImage",
    tokenize: tokenizeLabelStartImage,
    resolveAll: labelEnd.resolveAll
  };
  function tokenizeLabelStartImage(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      effects.enter("labelImage");
      effects.enter("labelImageMarker");
      effects.consume(code2);
      effects.exit("labelImageMarker");
      return open;
    }
    function open(code2) {
      if (code2 === 91) {
        effects.enter("labelMarker");
        effects.consume(code2);
        effects.exit("labelMarker");
        effects.exit("labelImage");
        return after;
      }
      return nok(code2);
    }
    function after(code2) {
      return code2 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code2) : ok2(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/label-start-link.js
  var labelStartLink = {
    name: "labelStartLink",
    tokenize: tokenizeLabelStartLink,
    resolveAll: labelEnd.resolveAll
  };
  function tokenizeLabelStartLink(effects, ok2, nok) {
    const self2 = this;
    return start2;
    function start2(code2) {
      effects.enter("labelLink");
      effects.enter("labelMarker");
      effects.consume(code2);
      effects.exit("labelMarker");
      effects.exit("labelLink");
      return after;
    }
    function after(code2) {
      return code2 === 94 && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code2) : ok2(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/line-ending.js
  var lineEnding = {
    name: "lineEnding",
    tokenize: tokenizeLineEnding
  };
  function tokenizeLineEnding(effects, ok2) {
    return start2;
    function start2(code2) {
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      return factorySpace(effects, ok2, "linePrefix");
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/thematic-break.js
  var thematicBreak = {
    name: "thematicBreak",
    tokenize: tokenizeThematicBreak
  };
  function tokenizeThematicBreak(effects, ok2, nok) {
    let size = 0;
    let marker;
    return start2;
    function start2(code2) {
      effects.enter("thematicBreak");
      return before(code2);
    }
    function before(code2) {
      marker = code2;
      return atBreak(code2);
    }
    function atBreak(code2) {
      if (code2 === marker) {
        effects.enter("thematicBreakSequence");
        return sequence(code2);
      }
      if (size >= 3 && (code2 === null || markdownLineEnding(code2))) {
        effects.exit("thematicBreak");
        return ok2(code2);
      }
      return nok(code2);
    }
    function sequence(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        size++;
        return sequence;
      }
      effects.exit("thematicBreakSequence");
      return markdownSpace(code2) ? factorySpace(effects, atBreak, "whitespace")(code2) : atBreak(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/list.js
  var list = {
    name: "list",
    tokenize: tokenizeListStart,
    continuation: {
      tokenize: tokenizeListContinuation
    },
    exit: tokenizeListEnd
  };
  var listItemPrefixWhitespaceConstruct = {
    tokenize: tokenizeListItemPrefixWhitespace,
    partial: true
  };
  var indentConstruct = {
    tokenize: tokenizeIndent,
    partial: true
  };
  function tokenizeListStart(effects, ok2, nok) {
    const self2 = this;
    const tail = self2.events[self2.events.length - 1];
    let initialSize = tail && tail[1].type === "linePrefix" ? tail[2].sliceSerialize(tail[1], true).length : 0;
    let size = 0;
    return start2;
    function start2(code2) {
      const kind = self2.containerState.type || (code2 === 42 || code2 === 43 || code2 === 45 ? "listUnordered" : "listOrdered");
      if (kind === "listUnordered" ? !self2.containerState.marker || code2 === self2.containerState.marker : asciiDigit(code2)) {
        if (!self2.containerState.type) {
          self2.containerState.type = kind;
          effects.enter(kind, {
            _container: true
          });
        }
        if (kind === "listUnordered") {
          effects.enter("listItemPrefix");
          return code2 === 42 || code2 === 45 ? effects.check(thematicBreak, nok, atMarker)(code2) : atMarker(code2);
        }
        if (!self2.interrupt || code2 === 49) {
          effects.enter("listItemPrefix");
          effects.enter("listItemValue");
          return inside(code2);
        }
      }
      return nok(code2);
    }
    function inside(code2) {
      if (asciiDigit(code2) && ++size < 10) {
        effects.consume(code2);
        return inside;
      }
      if ((!self2.interrupt || size < 2) && (self2.containerState.marker ? code2 === self2.containerState.marker : code2 === 41 || code2 === 46)) {
        effects.exit("listItemValue");
        return atMarker(code2);
      }
      return nok(code2);
    }
    function atMarker(code2) {
      effects.enter("listItemMarker");
      effects.consume(code2);
      effects.exit("listItemMarker");
      self2.containerState.marker = self2.containerState.marker || code2;
      return effects.check(
        blankLine,
        // Can’t be empty when interrupting.
        self2.interrupt ? nok : onBlank,
        effects.attempt(
          listItemPrefixWhitespaceConstruct,
          endOfPrefix,
          otherPrefix
        )
      );
    }
    function onBlank(code2) {
      self2.containerState.initialBlankLine = true;
      initialSize++;
      return endOfPrefix(code2);
    }
    function otherPrefix(code2) {
      if (markdownSpace(code2)) {
        effects.enter("listItemPrefixWhitespace");
        effects.consume(code2);
        effects.exit("listItemPrefixWhitespace");
        return endOfPrefix;
      }
      return nok(code2);
    }
    function endOfPrefix(code2) {
      self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit("listItemPrefix"), true).length;
      return ok2(code2);
    }
  }
  function tokenizeListContinuation(effects, ok2, nok) {
    const self2 = this;
    self2.containerState._closeFlow = void 0;
    return effects.check(blankLine, onBlank, notBlank);
    function onBlank(code2) {
      self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
      return factorySpace(
        effects,
        ok2,
        "listItemIndent",
        self2.containerState.size + 1
      )(code2);
    }
    function notBlank(code2) {
      if (self2.containerState.furtherBlankLines || !markdownSpace(code2)) {
        self2.containerState.furtherBlankLines = void 0;
        self2.containerState.initialBlankLine = void 0;
        return notInCurrentItem(code2);
      }
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return effects.attempt(indentConstruct, ok2, notInCurrentItem)(code2);
    }
    function notInCurrentItem(code2) {
      self2.containerState._closeFlow = true;
      self2.interrupt = void 0;
      return factorySpace(
        effects,
        effects.attempt(list, ok2, nok),
        "linePrefix",
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4
      )(code2);
    }
  }
  function tokenizeIndent(effects, ok2, nok) {
    const self2 = this;
    return factorySpace(
      effects,
      afterPrefix,
      "listItemIndent",
      self2.containerState.size + 1
    );
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return tail && tail[1].type === "listItemIndent" && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok2(code2) : nok(code2);
    }
  }
  function tokenizeListEnd(effects) {
    effects.exit(this.containerState.type);
  }
  function tokenizeListItemPrefixWhitespace(effects, ok2, nok) {
    const self2 = this;
    return factorySpace(
      effects,
      afterPrefix,
      "listItemPrefixWhitespace",
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : 4 + 1
    );
    function afterPrefix(code2) {
      const tail = self2.events[self2.events.length - 1];
      return !markdownSpace(code2) && tail && tail[1].type === "listItemPrefixWhitespace" ? ok2(code2) : nok(code2);
    }
  }

  // ../node_modules/micromark-core-commonmark/lib/setext-underline.js
  var setextUnderline = {
    name: "setextUnderline",
    tokenize: tokenizeSetextUnderline,
    resolveTo: resolveToSetextUnderline
  };
  function resolveToSetextUnderline(events, context) {
    let index2 = events.length;
    let content15;
    let text4;
    let definition2;
    while (index2--) {
      if (events[index2][0] === "enter") {
        if (events[index2][1].type === "content") {
          content15 = index2;
          break;
        }
        if (events[index2][1].type === "paragraph") {
          text4 = index2;
        }
      } else {
        if (events[index2][1].type === "content") {
          events.splice(index2, 1);
        }
        if (!definition2 && events[index2][1].type === "definition") {
          definition2 = index2;
        }
      }
    }
    const heading2 = {
      type: "setextHeading",
      start: Object.assign({}, events[text4][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    };
    events[text4][1].type = "setextHeadingText";
    if (definition2) {
      events.splice(text4, 0, ["enter", heading2, context]);
      events.splice(definition2 + 1, 0, ["exit", events[content15][1], context]);
      events[content15][1].end = Object.assign({}, events[definition2][1].end);
    } else {
      events[content15][1] = heading2;
    }
    events.push(["exit", heading2, context]);
    return events;
  }
  function tokenizeSetextUnderline(effects, ok2, nok) {
    const self2 = this;
    let marker;
    return start2;
    function start2(code2) {
      let index2 = self2.events.length;
      let paragraph2;
      while (index2--) {
        if (self2.events[index2][1].type !== "lineEnding" && self2.events[index2][1].type !== "linePrefix" && self2.events[index2][1].type !== "content") {
          paragraph2 = self2.events[index2][1].type === "paragraph";
          break;
        }
      }
      if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph2)) {
        effects.enter("setextHeadingLine");
        marker = code2;
        return before(code2);
      }
      return nok(code2);
    }
    function before(code2) {
      effects.enter("setextHeadingLineSequence");
      return inside(code2);
    }
    function inside(code2) {
      if (code2 === marker) {
        effects.consume(code2);
        return inside;
      }
      effects.exit("setextHeadingLineSequence");
      return markdownSpace(code2) ? factorySpace(effects, after, "lineSuffix")(code2) : after(code2);
    }
    function after(code2) {
      if (code2 === null || markdownLineEnding(code2)) {
        effects.exit("setextHeadingLine");
        return ok2(code2);
      }
      return nok(code2);
    }
  }

  // ../node_modules/micromark/lib/initialize/flow.js
  var flow = {
    tokenize: initializeFlow
  };
  function initializeFlow(effects) {
    const self2 = this;
    const initial = effects.attempt(
      // Try to parse a blank line.
      blankLine,
      atBlankEnding,
      // Try to parse initial flow (essentially, only code).
      effects.attempt(
        this.parser.constructs.flowInitial,
        afterConstruct,
        factorySpace(
          effects,
          effects.attempt(
            this.parser.constructs.flow,
            afterConstruct,
            effects.attempt(content2, afterConstruct)
          ),
          "linePrefix"
        )
      )
    );
    return initial;
    function atBlankEnding(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("lineEndingBlank");
      effects.consume(code2);
      effects.exit("lineEndingBlank");
      self2.currentConstruct = void 0;
      return initial;
    }
    function afterConstruct(code2) {
      if (code2 === null) {
        effects.consume(code2);
        return;
      }
      effects.enter("lineEnding");
      effects.consume(code2);
      effects.exit("lineEnding");
      self2.currentConstruct = void 0;
      return initial;
    }
  }

  // ../node_modules/micromark/lib/initialize/text.js
  var resolver = {
    resolveAll: createResolver2()
  };
  var string = initializeFactory("string");
  var text = initializeFactory("text");
  function initializeFactory(field) {
    return {
      tokenize: initializeText,
      resolveAll: createResolver2(
        field === "text" ? resolveAllLineSuffixes : void 0
      )
    };
    function initializeText(effects) {
      const self2 = this;
      const constructs2 = this.parser.constructs[field];
      const text4 = effects.attempt(constructs2, start2, notText);
      return start2;
      function start2(code2) {
        return atBreak(code2) ? text4(code2) : notText(code2);
      }
      function notText(code2) {
        if (code2 === null) {
          effects.consume(code2);
          return;
        }
        effects.enter("data");
        effects.consume(code2);
        return data;
      }
      function data(code2) {
        if (atBreak(code2)) {
          effects.exit("data");
          return text4(code2);
        }
        effects.consume(code2);
        return data;
      }
      function atBreak(code2) {
        if (code2 === null) {
          return true;
        }
        const list4 = constructs2[code2];
        let index2 = -1;
        if (list4) {
          while (++index2 < list4.length) {
            const item = list4[index2];
            if (!item.previous || item.previous.call(self2, self2.previous)) {
              return true;
            }
          }
        }
        return false;
      }
    }
  }
  function createResolver2(extraResolver) {
    return resolveAllText;
    function resolveAllText(events, context) {
      let index2 = -1;
      let enter;
      while (++index2 <= events.length) {
        if (enter === void 0) {
          if (events[index2] && events[index2][1].type === "data") {
            enter = index2;
            index2++;
          }
        } else if (!events[index2] || events[index2][1].type !== "data") {
          if (index2 !== enter + 2) {
            events[enter][1].end = events[index2 - 1][1].end;
            events.splice(enter + 2, index2 - enter - 2);
            index2 = enter + 2;
          }
          enter = void 0;
        }
      }
      return extraResolver ? extraResolver(events, context) : events;
    }
  }
  function resolveAllLineSuffixes(events, context) {
    let eventIndex = 0;
    while (++eventIndex <= events.length) {
      if ((eventIndex === events.length || events[eventIndex][1].type === "lineEnding") && events[eventIndex - 1][1].type === "data") {
        const data = events[eventIndex - 1][1];
        const chunks = context.sliceStream(data);
        let index2 = chunks.length;
        let bufferIndex = -1;
        let size = 0;
        let tabs;
        while (index2--) {
          const chunk = chunks[index2];
          if (typeof chunk === "string") {
            bufferIndex = chunk.length;
            while (chunk.charCodeAt(bufferIndex - 1) === 32) {
              size++;
              bufferIndex--;
            }
            if (bufferIndex)
              break;
            bufferIndex = -1;
          } else if (chunk === -2) {
            tabs = true;
            size++;
          } else if (chunk === -1) {
          } else {
            index2++;
            break;
          }
        }
        if (size) {
          const token2 = {
            type: eventIndex === events.length || tabs || size < 2 ? "lineSuffix" : "hardBreakTrailing",
            start: {
              line: data.end.line,
              column: data.end.column - size,
              offset: data.end.offset - size,
              _index: data.start._index + index2,
              _bufferIndex: index2 ? bufferIndex : data.start._bufferIndex + bufferIndex
            },
            end: Object.assign({}, data.end)
          };
          data.end = Object.assign({}, token2.start);
          if (data.start.offset === data.end.offset) {
            Object.assign(data, token2);
          } else {
            events.splice(
              eventIndex,
              0,
              ["enter", token2, context],
              ["exit", token2, context]
            );
            eventIndex += 2;
          }
        }
        eventIndex++;
      }
    }
    return events;
  }

  // ../node_modules/micromark/lib/create-tokenizer.js
  function createTokenizer(parser, initialize, from2) {
    let point4 = Object.assign(
      from2 ? Object.assign({}, from2) : {
        line: 1,
        column: 1,
        offset: 0
      },
      {
        _index: 0,
        _bufferIndex: -1
      }
    );
    const columnStart = {};
    const resolveAllConstructs = [];
    let chunks = [];
    let stack = [];
    let consumed = true;
    const effects = {
      consume,
      enter,
      exit: exit2,
      attempt: constructFactory(onsuccessfulconstruct),
      check: constructFactory(onsuccessfulcheck),
      interrupt: constructFactory(onsuccessfulcheck, {
        interrupt: true
      })
    };
    const context = {
      previous: null,
      code: null,
      containerState: {},
      events: [],
      parser,
      sliceStream,
      sliceSerialize,
      now,
      defineSkip,
      write
    };
    let state = initialize.tokenize.call(context, effects);
    let expectedCode;
    if (initialize.resolveAll) {
      resolveAllConstructs.push(initialize);
    }
    return context;
    function write(slice2) {
      chunks = push(chunks, slice2);
      main4();
      if (chunks[chunks.length - 1] !== null) {
        return [];
      }
      addResult(initialize, 0);
      context.events = resolveAll(resolveAllConstructs, context.events, context);
      return context.events;
    }
    function sliceSerialize(token2, expandTabs) {
      return serializeChunks(sliceStream(token2), expandTabs);
    }
    function sliceStream(token2) {
      return sliceChunks(chunks, token2);
    }
    function now() {
      const { line: line2, column: column2, offset, _index, _bufferIndex } = point4;
      return {
        line: line2,
        column: column2,
        offset,
        _index,
        _bufferIndex
      };
    }
    function defineSkip(value) {
      columnStart[value.line] = value.column;
      accountForPotentialSkip();
    }
    function main4() {
      let chunkIndex;
      while (point4._index < chunks.length) {
        const chunk = chunks[point4._index];
        if (typeof chunk === "string") {
          chunkIndex = point4._index;
          if (point4._bufferIndex < 0) {
            point4._bufferIndex = 0;
          }
          while (point4._index === chunkIndex && point4._bufferIndex < chunk.length) {
            go(chunk.charCodeAt(point4._bufferIndex));
          }
        } else {
          go(chunk);
        }
      }
    }
    function go(code2) {
      consumed = void 0;
      expectedCode = code2;
      state = state(code2);
    }
    function consume(code2) {
      if (markdownLineEnding(code2)) {
        point4.line++;
        point4.column = 1;
        point4.offset += code2 === -3 ? 2 : 1;
        accountForPotentialSkip();
      } else if (code2 !== -1) {
        point4.column++;
        point4.offset++;
      }
      if (point4._bufferIndex < 0) {
        point4._index++;
      } else {
        point4._bufferIndex++;
        if (point4._bufferIndex === chunks[point4._index].length) {
          point4._bufferIndex = -1;
          point4._index++;
        }
      }
      context.previous = code2;
      consumed = true;
    }
    function enter(type, fields) {
      const token2 = fields || {};
      token2.type = type;
      token2.start = now();
      context.events.push(["enter", token2, context]);
      stack.push(token2);
      return token2;
    }
    function exit2(type) {
      const token2 = stack.pop();
      token2.end = now();
      context.events.push(["exit", token2, context]);
      return token2;
    }
    function onsuccessfulconstruct(construct, info) {
      addResult(construct, info.from);
    }
    function onsuccessfulcheck(_2, info) {
      info.restore();
    }
    function constructFactory(onreturn, fields) {
      return hook;
      function hook(constructs2, returnState, bogusState) {
        let listOfConstructs;
        let constructIndex;
        let currentConstruct;
        let info;
        return Array.isArray(constructs2) ? handleListOfConstructs(constructs2) : "tokenize" in constructs2 ? (
          // @ts-expect-error Looks like a construct.
          handleListOfConstructs([constructs2])
        ) : handleMapOfConstructs(constructs2);
        function handleMapOfConstructs(map) {
          return start2;
          function start2(code2) {
            const def = code2 !== null && map[code2];
            const all3 = code2 !== null && map.null;
            const list4 = [
              // To do: add more extension tests.
              /* c8 ignore next 2 */
              ...Array.isArray(def) ? def : def ? [def] : [],
              ...Array.isArray(all3) ? all3 : all3 ? [all3] : []
            ];
            return handleListOfConstructs(list4)(code2);
          }
        }
        function handleListOfConstructs(list4) {
          listOfConstructs = list4;
          constructIndex = 0;
          if (list4.length === 0) {
            return bogusState;
          }
          return handleConstruct(list4[constructIndex]);
        }
        function handleConstruct(construct) {
          return start2;
          function start2(code2) {
            info = store();
            currentConstruct = construct;
            if (!construct.partial) {
              context.currentConstruct = construct;
            }
            if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
              return nok(code2);
            }
            return construct.tokenize.call(
              // If we do have fields, create an object w/ `context` as its
              // prototype.
              // This allows a “live binding”, which is needed for `interrupt`.
              fields ? Object.assign(Object.create(context), fields) : context,
              effects,
              ok2,
              nok
            )(code2);
          }
        }
        function ok2(code2) {
          consumed = true;
          onreturn(currentConstruct, info);
          return returnState;
        }
        function nok(code2) {
          consumed = true;
          info.restore();
          if (++constructIndex < listOfConstructs.length) {
            return handleConstruct(listOfConstructs[constructIndex]);
          }
          return bogusState;
        }
      }
    }
    function addResult(construct, from3) {
      if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
        resolveAllConstructs.push(construct);
      }
      if (construct.resolve) {
        splice(
          context.events,
          from3,
          context.events.length - from3,
          construct.resolve(context.events.slice(from3), context)
        );
      }
      if (construct.resolveTo) {
        context.events = construct.resolveTo(context.events, context);
      }
    }
    function store() {
      const startPoint = now();
      const startPrevious = context.previous;
      const startCurrentConstruct = context.currentConstruct;
      const startEventsIndex = context.events.length;
      const startStack = Array.from(stack);
      return {
        restore,
        from: startEventsIndex
      };
      function restore() {
        point4 = startPoint;
        context.previous = startPrevious;
        context.currentConstruct = startCurrentConstruct;
        context.events.length = startEventsIndex;
        stack = startStack;
        accountForPotentialSkip();
      }
    }
    function accountForPotentialSkip() {
      if (point4.line in columnStart && point4.column < 2) {
        point4.column = columnStart[point4.line];
        point4.offset += columnStart[point4.line] - 1;
      }
    }
  }
  function sliceChunks(chunks, token2) {
    const startIndex = token2.start._index;
    const startBufferIndex = token2.start._bufferIndex;
    const endIndex = token2.end._index;
    const endBufferIndex = token2.end._bufferIndex;
    let view;
    if (startIndex === endIndex) {
      view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
    } else {
      view = chunks.slice(startIndex, endIndex);
      if (startBufferIndex > -1) {
        const head = view[0];
        if (typeof head === "string") {
          view[0] = head.slice(startBufferIndex);
        } else {
          view.shift();
        }
      }
      if (endBufferIndex > 0) {
        view.push(chunks[endIndex].slice(0, endBufferIndex));
      }
    }
    return view;
  }
  function serializeChunks(chunks, expandTabs) {
    let index2 = -1;
    const result = [];
    let atTab;
    while (++index2 < chunks.length) {
      const chunk = chunks[index2];
      let value;
      if (typeof chunk === "string") {
        value = chunk;
      } else
        switch (chunk) {
          case -5: {
            value = "\r";
            break;
          }
          case -4: {
            value = "\n";
            break;
          }
          case -3: {
            value = "\r\n";
            break;
          }
          case -2: {
            value = expandTabs ? " " : "	";
            break;
          }
          case -1: {
            if (!expandTabs && atTab)
              continue;
            value = " ";
            break;
          }
          default: {
            value = String.fromCharCode(chunk);
          }
        }
      atTab = chunk === -2;
      result.push(value);
    }
    return result.join("");
  }

  // ../node_modules/micromark/lib/constructs.js
  var constructs_exports = {};
  __export(constructs_exports, {
    attentionMarkers: () => attentionMarkers,
    contentInitial: () => contentInitial,
    disable: () => disable,
    document: () => document3,
    flow: () => flow2,
    flowInitial: () => flowInitial,
    insideSpan: () => insideSpan,
    string: () => string2,
    text: () => text2
  });
  var document3 = {
    [42]: list,
    [43]: list,
    [45]: list,
    [48]: list,
    [49]: list,
    [50]: list,
    [51]: list,
    [52]: list,
    [53]: list,
    [54]: list,
    [55]: list,
    [56]: list,
    [57]: list,
    [62]: blockQuote
  };
  var contentInitial = {
    [91]: definition
  };
  var flowInitial = {
    [-2]: codeIndented,
    [-1]: codeIndented,
    [32]: codeIndented
  };
  var flow2 = {
    [35]: headingAtx,
    [42]: thematicBreak,
    [45]: [setextUnderline, thematicBreak],
    [60]: htmlFlow,
    [61]: setextUnderline,
    [95]: thematicBreak,
    [96]: codeFenced,
    [126]: codeFenced
  };
  var string2 = {
    [38]: characterReference,
    [92]: characterEscape
  };
  var text2 = {
    [-5]: lineEnding,
    [-4]: lineEnding,
    [-3]: lineEnding,
    [33]: labelStartImage,
    [38]: characterReference,
    [42]: attention,
    [60]: [autolink, htmlText],
    [91]: labelStartLink,
    [92]: [hardBreakEscape, characterEscape],
    [93]: labelEnd,
    [95]: attention,
    [96]: codeText
  };
  var insideSpan = {
    null: [attention, resolver]
  };
  var attentionMarkers = {
    null: [42, 95]
  };
  var disable = {
    null: []
  };

  // ../node_modules/micromark/lib/parse.js
  function parse(options) {
    const settings = options || {};
    const constructs2 = (
      /** @type {FullNormalizedExtension} */
      combineExtensions([constructs_exports, ...settings.extensions || []])
    );
    const parser = {
      defined: [],
      lazy: {},
      constructs: constructs2,
      content: create2(content),
      document: create2(document2),
      flow: create2(flow),
      string: create2(string),
      text: create2(text)
    };
    return parser;
    function create2(initial) {
      return creator;
      function creator(from2) {
        return createTokenizer(parser, initial, from2);
      }
    }
  }

  // ../node_modules/micromark/lib/preprocess.js
  var search = /[\0\t\n\r]/g;
  function preprocess() {
    let column2 = 1;
    let buffer2 = "";
    let start2 = true;
    let atCarriageReturn;
    return preprocessor;
    function preprocessor(value, encoding, end2) {
      const chunks = [];
      let match2;
      let next2;
      let startPosition;
      let endPosition;
      let code2;
      value = buffer2 + value.toString(encoding);
      startPosition = 0;
      buffer2 = "";
      if (start2) {
        if (value.charCodeAt(0) === 65279) {
          startPosition++;
        }
        start2 = void 0;
      }
      while (startPosition < value.length) {
        search.lastIndex = startPosition;
        match2 = search.exec(value);
        endPosition = match2 && match2.index !== void 0 ? match2.index : value.length;
        code2 = value.charCodeAt(endPosition);
        if (!match2) {
          buffer2 = value.slice(startPosition);
          break;
        }
        if (code2 === 10 && startPosition === endPosition && atCarriageReturn) {
          chunks.push(-3);
          atCarriageReturn = void 0;
        } else {
          if (atCarriageReturn) {
            chunks.push(-5);
            atCarriageReturn = void 0;
          }
          if (startPosition < endPosition) {
            chunks.push(value.slice(startPosition, endPosition));
            column2 += endPosition - startPosition;
          }
          switch (code2) {
            case 0: {
              chunks.push(65533);
              column2++;
              break;
            }
            case 9: {
              next2 = Math.ceil(column2 / 4) * 4;
              chunks.push(-2);
              while (column2++ < next2)
                chunks.push(-1);
              break;
            }
            case 10: {
              chunks.push(-4);
              column2 = 1;
              break;
            }
            default: {
              atCarriageReturn = true;
              column2 = 1;
            }
          }
        }
        startPosition = endPosition + 1;
      }
      if (end2) {
        if (atCarriageReturn)
          chunks.push(-5);
        if (buffer2)
          chunks.push(buffer2);
        chunks.push(null);
      }
      return chunks;
    }
  }

  // ../node_modules/micromark/lib/postprocess.js
  function postprocess(events) {
    while (!subtokenize(events)) {
    }
    return events;
  }

  // ../node_modules/micromark-util-decode-numeric-character-reference/index.js
  function decodeNumericCharacterReference(value, base2) {
    const code2 = Number.parseInt(value, base2);
    if (
      // C0 except for HT, LF, FF, CR, space.
      code2 < 9 || code2 === 11 || code2 > 13 && code2 < 32 || // Control character (DEL) of C0, and C1 controls.
      code2 > 126 && code2 < 160 || // Lone high surrogates and low surrogates.
      code2 > 55295 && code2 < 57344 || // Noncharacters.
      code2 > 64975 && code2 < 65008 || (code2 & 65535) === 65535 || (code2 & 65535) === 65534 || // Out of range
      code2 > 1114111
    ) {
      return "\uFFFD";
    }
    return String.fromCharCode(code2);
  }

  // ../node_modules/micromark-util-decode-string/index.js
  var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
  function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode);
  }
  function decode($0, $1, $2) {
    if ($1) {
      return $1;
    }
    const head = $2.charCodeAt(0);
    if (head === 35) {
      const head2 = $2.charCodeAt(1);
      const hex = head2 === 120 || head2 === 88;
      return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);
    }
    return decodeNamedCharacterReference($2) || $0;
  }

  // ../node_modules/mdast-util-from-markdown/lib/index.js
  var own2 = {}.hasOwnProperty;
  var fromMarkdown = (
    /**
     * @type {(
     *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
     *   ((value: Value, options?: Options | null | undefined) => Root)
     * )}
     */
    /**
     * @param {Value} value
     * @param {Encoding | Options | null | undefined} [encoding]
     * @param {Options | null | undefined} [options]
     * @returns {Root}
     */
    function(value, encoding, options) {
      if (typeof encoding !== "string") {
        options = encoding;
        encoding = void 0;
      }
      return compiler(options)(
        postprocess(
          parse(options).document().write(preprocess()(value, encoding, true))
        )
      );
    }
  );
  function compiler(options) {
    const config = {
      transforms: [],
      canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
      enter: {
        autolink: opener(link2),
        autolinkProtocol: onenterdata,
        autolinkEmail: onenterdata,
        atxHeading: opener(heading2),
        blockQuote: opener(blockQuote2),
        characterEscape: onenterdata,
        characterReference: onenterdata,
        codeFenced: opener(codeFlow),
        codeFencedFenceInfo: buffer2,
        codeFencedFenceMeta: buffer2,
        codeIndented: opener(codeFlow, buffer2),
        codeText: opener(codeText2, buffer2),
        codeTextData: onenterdata,
        data: onenterdata,
        codeFlowValue: onenterdata,
        definition: opener(definition2),
        definitionDestinationString: buffer2,
        definitionLabelString: buffer2,
        definitionTitleString: buffer2,
        emphasis: opener(emphasis2),
        hardBreakEscape: opener(hardBreak2),
        hardBreakTrailing: opener(hardBreak2),
        htmlFlow: opener(html4, buffer2),
        htmlFlowData: onenterdata,
        htmlText: opener(html4, buffer2),
        htmlTextData: onenterdata,
        image: opener(image5),
        label: buffer2,
        link: opener(link2),
        listItem: opener(listItem2),
        listItemValue: onenterlistitemvalue,
        listOrdered: opener(list4, onenterlistordered),
        listUnordered: opener(list4),
        paragraph: opener(paragraph2),
        reference: onenterreference,
        referenceString: buffer2,
        resourceDestinationString: buffer2,
        resourceTitleString: buffer2,
        setextHeading: opener(heading2),
        strong: opener(strong2),
        thematicBreak: opener(thematicBreak3)
      },
      exit: {
        atxHeading: closer(),
        atxHeadingSequence: onexitatxheadingsequence,
        autolink: closer(),
        autolinkEmail: onexitautolinkemail,
        autolinkProtocol: onexitautolinkprotocol,
        blockQuote: closer(),
        characterEscapeValue: onexitdata,
        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
        characterReferenceValue: onexitcharacterreferencevalue,
        codeFenced: closer(onexitcodefenced),
        codeFencedFence: onexitcodefencedfence,
        codeFencedFenceInfo: onexitcodefencedfenceinfo,
        codeFencedFenceMeta: onexitcodefencedfencemeta,
        codeFlowValue: onexitdata,
        codeIndented: closer(onexitcodeindented),
        codeText: closer(onexitcodetext),
        codeTextData: onexitdata,
        data: onexitdata,
        definition: closer(),
        definitionDestinationString: onexitdefinitiondestinationstring,
        definitionLabelString: onexitdefinitionlabelstring,
        definitionTitleString: onexitdefinitiontitlestring,
        emphasis: closer(),
        hardBreakEscape: closer(onexithardbreak),
        hardBreakTrailing: closer(onexithardbreak),
        htmlFlow: closer(onexithtmlflow),
        htmlFlowData: onexitdata,
        htmlText: closer(onexithtmltext),
        htmlTextData: onexitdata,
        image: closer(onexitimage),
        label: onexitlabel,
        labelText: onexitlabeltext,
        lineEnding: onexitlineending,
        link: closer(onexitlink),
        listItem: closer(),
        listOrdered: closer(),
        listUnordered: closer(),
        paragraph: closer(),
        referenceString: onexitreferencestring,
        resourceDestinationString: onexitresourcedestinationstring,
        resourceTitleString: onexitresourcetitlestring,
        resource: onexitresource,
        setextHeading: closer(onexitsetextheading),
        setextHeadingLineSequence: onexitsetextheadinglinesequence,
        setextHeadingText: onexitsetextheadingtext,
        strong: closer(),
        thematicBreak: closer()
      }
    };
    configure(config, (options || {}).mdastExtensions || []);
    const data = {};
    return compile2;
    function compile2(events) {
      let tree = {
        type: "root",
        children: []
      };
      const context = {
        stack: [tree],
        tokenStack: [],
        config,
        enter,
        exit: exit2,
        buffer: buffer2,
        resume,
        setData,
        getData
      };
      const listStack = [];
      let index2 = -1;
      while (++index2 < events.length) {
        if (events[index2][1].type === "listOrdered" || events[index2][1].type === "listUnordered") {
          if (events[index2][0] === "enter") {
            listStack.push(index2);
          } else {
            const tail = listStack.pop();
            index2 = prepareList(events, tail, index2);
          }
        }
      }
      index2 = -1;
      while (++index2 < events.length) {
        const handler = config[events[index2][0]];
        if (own2.call(handler, events[index2][1].type)) {
          handler[events[index2][1].type].call(
            Object.assign(
              {
                sliceSerialize: events[index2][2].sliceSerialize
              },
              context
            ),
            events[index2][1]
          );
        }
      }
      if (context.tokenStack.length > 0) {
        const tail = context.tokenStack[context.tokenStack.length - 1];
        const handler = tail[1] || defaultOnError;
        handler.call(context, void 0, tail[0]);
      }
      tree.position = {
        start: point2(
          events.length > 0 ? events[0][1].start : {
            line: 1,
            column: 1,
            offset: 0
          }
        ),
        end: point2(
          events.length > 0 ? events[events.length - 2][1].end : {
            line: 1,
            column: 1,
            offset: 0
          }
        )
      };
      index2 = -1;
      while (++index2 < config.transforms.length) {
        tree = config.transforms[index2](tree) || tree;
      }
      return tree;
    }
    function prepareList(events, start2, length2) {
      let index2 = start2 - 1;
      let containerBalance = -1;
      let listSpread = false;
      let listItem3;
      let lineIndex;
      let firstBlankLineIndex;
      let atMarker;
      while (++index2 <= length2) {
        const event = events[index2];
        if (event[1].type === "listUnordered" || event[1].type === "listOrdered" || event[1].type === "blockQuote") {
          if (event[0] === "enter") {
            containerBalance++;
          } else {
            containerBalance--;
          }
          atMarker = void 0;
        } else if (event[1].type === "lineEndingBlank") {
          if (event[0] === "enter") {
            if (listItem3 && !atMarker && !containerBalance && !firstBlankLineIndex) {
              firstBlankLineIndex = index2;
            }
            atMarker = void 0;
          }
        } else if (event[1].type === "linePrefix" || event[1].type === "listItemValue" || event[1].type === "listItemMarker" || event[1].type === "listItemPrefix" || event[1].type === "listItemPrefixWhitespace") {
        } else {
          atMarker = void 0;
        }
        if (!containerBalance && event[0] === "enter" && event[1].type === "listItemPrefix" || containerBalance === -1 && event[0] === "exit" && (event[1].type === "listUnordered" || event[1].type === "listOrdered")) {
          if (listItem3) {
            let tailIndex = index2;
            lineIndex = void 0;
            while (tailIndex--) {
              const tailEvent = events[tailIndex];
              if (tailEvent[1].type === "lineEnding" || tailEvent[1].type === "lineEndingBlank") {
                if (tailEvent[0] === "exit")
                  continue;
                if (lineIndex) {
                  events[lineIndex][1].type = "lineEndingBlank";
                  listSpread = true;
                }
                tailEvent[1].type = "lineEnding";
                lineIndex = tailIndex;
              } else if (tailEvent[1].type === "linePrefix" || tailEvent[1].type === "blockQuotePrefix" || tailEvent[1].type === "blockQuotePrefixWhitespace" || tailEvent[1].type === "blockQuoteMarker" || tailEvent[1].type === "listItemIndent") {
              } else {
                break;
              }
            }
            if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
              listItem3._spread = true;
            }
            listItem3.end = Object.assign(
              {},
              lineIndex ? events[lineIndex][1].start : event[1].end
            );
            events.splice(lineIndex || index2, 0, ["exit", listItem3, event[2]]);
            index2++;
            length2++;
          }
          if (event[1].type === "listItemPrefix") {
            listItem3 = {
              type: "listItem",
              _spread: false,
              start: Object.assign({}, event[1].start),
              // @ts-expect-error: we’ll add `end` in a second.
              end: void 0
            };
            events.splice(index2, 0, ["enter", listItem3, event[2]]);
            index2++;
            length2++;
            firstBlankLineIndex = void 0;
            atMarker = true;
          }
        }
      }
      events[start2][1]._spread = listSpread;
      return length2;
    }
    function setData(key, value) {
      data[key] = value;
    }
    function getData(key) {
      return data[key];
    }
    function opener(create2, and) {
      return open;
      function open(token2) {
        enter.call(this, create2(token2), token2);
        if (and)
          and.call(this, token2);
      }
    }
    function buffer2() {
      this.stack.push({
        type: "fragment",
        children: []
      });
    }
    function enter(node4, token2, errorHandler) {
      const parent = this.stack[this.stack.length - 1];
      parent.children.push(node4);
      this.stack.push(node4);
      this.tokenStack.push([token2, errorHandler]);
      node4.position = {
        start: point2(token2.start)
      };
      return node4;
    }
    function closer(and) {
      return close;
      function close(token2) {
        if (and)
          and.call(this, token2);
        exit2.call(this, token2);
      }
    }
    function exit2(token2, onExitError) {
      const node4 = this.stack.pop();
      const open = this.tokenStack.pop();
      if (!open) {
        throw new Error(
          "Cannot close `" + token2.type + "` (" + stringifyPosition({
            start: token2.start,
            end: token2.end
          }) + "): it\u2019s not open"
        );
      } else if (open[0].type !== token2.type) {
        if (onExitError) {
          onExitError.call(this, token2, open[0]);
        } else {
          const handler = open[1] || defaultOnError;
          handler.call(this, token2, open[0]);
        }
      }
      node4.position.end = point2(token2.end);
      return node4;
    }
    function resume() {
      return toString(this.stack.pop());
    }
    function onenterlistordered() {
      setData("expectingFirstListItemValue", true);
    }
    function onenterlistitemvalue(token2) {
      if (getData("expectingFirstListItemValue")) {
        const ancestor = this.stack[this.stack.length - 2];
        ancestor.start = Number.parseInt(this.sliceSerialize(token2), 10);
        setData("expectingFirstListItemValue");
      }
    }
    function onexitcodefencedfenceinfo() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.lang = data2;
    }
    function onexitcodefencedfencemeta() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.meta = data2;
    }
    function onexitcodefencedfence() {
      if (getData("flowCodeInside"))
        return;
      this.buffer();
      setData("flowCodeInside", true);
    }
    function onexitcodefenced() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
      setData("flowCodeInside");
    }
    function onexitcodeindented() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.value = data2.replace(/(\r?\n|\r)$/g, "");
    }
    function onexitdefinitionlabelstring(token2) {
      const label6 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.label = label6;
      node4.identifier = normalizeIdentifier(
        this.sliceSerialize(token2)
      ).toLowerCase();
    }
    function onexitdefinitiontitlestring() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.title = data2;
    }
    function onexitdefinitiondestinationstring() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.url = data2;
    }
    function onexitatxheadingsequence(token2) {
      const node4 = this.stack[this.stack.length - 1];
      if (!node4.depth) {
        const depth = this.sliceSerialize(token2).length;
        node4.depth = depth;
      }
    }
    function onexitsetextheadingtext() {
      setData("setextHeadingSlurpLineEnding", true);
    }
    function onexitsetextheadinglinesequence(token2) {
      const node4 = this.stack[this.stack.length - 1];
      node4.depth = this.sliceSerialize(token2).charCodeAt(0) === 61 ? 1 : 2;
    }
    function onexitsetextheading() {
      setData("setextHeadingSlurpLineEnding");
    }
    function onenterdata(token2) {
      const node4 = this.stack[this.stack.length - 1];
      let tail = node4.children[node4.children.length - 1];
      if (!tail || tail.type !== "text") {
        tail = text4();
        tail.position = {
          start: point2(token2.start)
        };
        node4.children.push(tail);
      }
      this.stack.push(tail);
    }
    function onexitdata(token2) {
      const tail = this.stack.pop();
      tail.value += this.sliceSerialize(token2);
      tail.position.end = point2(token2.end);
    }
    function onexitlineending(token2) {
      const context = this.stack[this.stack.length - 1];
      if (getData("atHardBreak")) {
        const tail = context.children[context.children.length - 1];
        tail.position.end = point2(token2.end);
        setData("atHardBreak");
        return;
      }
      if (!getData("setextHeadingSlurpLineEnding") && config.canContainEols.includes(context.type)) {
        onenterdata.call(this, token2);
        onexitdata.call(this, token2);
      }
    }
    function onexithardbreak() {
      setData("atHardBreak", true);
    }
    function onexithtmlflow() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.value = data2;
    }
    function onexithtmltext() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.value = data2;
    }
    function onexitcodetext() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.value = data2;
    }
    function onexitlink() {
      const node4 = this.stack[this.stack.length - 1];
      if (getData("inReference")) {
        const referenceType = getData("referenceType") || "shortcut";
        node4.type += "Reference";
        node4.referenceType = referenceType;
        delete node4.url;
        delete node4.title;
      } else {
        delete node4.identifier;
        delete node4.label;
      }
      setData("referenceType");
    }
    function onexitimage() {
      const node4 = this.stack[this.stack.length - 1];
      if (getData("inReference")) {
        const referenceType = getData("referenceType") || "shortcut";
        node4.type += "Reference";
        node4.referenceType = referenceType;
        delete node4.url;
        delete node4.title;
      } else {
        delete node4.identifier;
        delete node4.label;
      }
      setData("referenceType");
    }
    function onexitlabeltext(token2) {
      const string4 = this.sliceSerialize(token2);
      const ancestor = this.stack[this.stack.length - 2];
      ancestor.label = decodeString(string4);
      ancestor.identifier = normalizeIdentifier(string4).toLowerCase();
    }
    function onexitlabel() {
      const fragment = this.stack[this.stack.length - 1];
      const value = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      setData("inReference", true);
      if (node4.type === "link") {
        const children = fragment.children;
        node4.children = children;
      } else {
        node4.alt = value;
      }
    }
    function onexitresourcedestinationstring() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.url = data2;
    }
    function onexitresourcetitlestring() {
      const data2 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.title = data2;
    }
    function onexitresource() {
      setData("inReference");
    }
    function onenterreference() {
      setData("referenceType", "collapsed");
    }
    function onexitreferencestring(token2) {
      const label6 = this.resume();
      const node4 = this.stack[this.stack.length - 1];
      node4.label = label6;
      node4.identifier = normalizeIdentifier(
        this.sliceSerialize(token2)
      ).toLowerCase();
      setData("referenceType", "full");
    }
    function onexitcharacterreferencemarker(token2) {
      setData("characterReferenceType", token2.type);
    }
    function onexitcharacterreferencevalue(token2) {
      const data2 = this.sliceSerialize(token2);
      const type = getData("characterReferenceType");
      let value;
      if (type) {
        value = decodeNumericCharacterReference(
          data2,
          type === "characterReferenceMarkerNumeric" ? 10 : 16
        );
        setData("characterReferenceType");
      } else {
        const result = decodeNamedCharacterReference(data2);
        value = result;
      }
      const tail = this.stack.pop();
      tail.value += value;
      tail.position.end = point2(token2.end);
    }
    function onexitautolinkprotocol(token2) {
      onexitdata.call(this, token2);
      const node4 = this.stack[this.stack.length - 1];
      node4.url = this.sliceSerialize(token2);
    }
    function onexitautolinkemail(token2) {
      onexitdata.call(this, token2);
      const node4 = this.stack[this.stack.length - 1];
      node4.url = "mailto:" + this.sliceSerialize(token2);
    }
    function blockQuote2() {
      return {
        type: "blockquote",
        children: []
      };
    }
    function codeFlow() {
      return {
        type: "code",
        lang: null,
        meta: null,
        value: ""
      };
    }
    function codeText2() {
      return {
        type: "inlineCode",
        value: ""
      };
    }
    function definition2() {
      return {
        type: "definition",
        identifier: "",
        label: null,
        title: null,
        url: ""
      };
    }
    function emphasis2() {
      return {
        type: "emphasis",
        children: []
      };
    }
    function heading2() {
      return {
        type: "heading",
        depth: void 0,
        children: []
      };
    }
    function hardBreak2() {
      return {
        type: "break"
      };
    }
    function html4() {
      return {
        type: "html",
        value: ""
      };
    }
    function image5() {
      return {
        type: "image",
        title: null,
        url: "",
        alt: null
      };
    }
    function link2() {
      return {
        type: "link",
        title: null,
        url: "",
        children: []
      };
    }
    function list4(token2) {
      return {
        type: "list",
        ordered: token2.type === "listOrdered",
        start: null,
        spread: token2._spread,
        children: []
      };
    }
    function listItem2(token2) {
      return {
        type: "listItem",
        spread: token2._spread,
        checked: null,
        children: []
      };
    }
    function paragraph2() {
      return {
        type: "paragraph",
        children: []
      };
    }
    function strong2() {
      return {
        type: "strong",
        children: []
      };
    }
    function text4() {
      return {
        type: "text",
        value: ""
      };
    }
    function thematicBreak3() {
      return {
        type: "thematicBreak"
      };
    }
  }
  function point2(d2) {
    return {
      line: d2.line,
      column: d2.column,
      offset: d2.offset
    };
  }
  function configure(combined, extensions) {
    let index2 = -1;
    while (++index2 < extensions.length) {
      const value = extensions[index2];
      if (Array.isArray(value)) {
        configure(combined, value);
      } else {
        extension(combined, value);
      }
    }
  }
  function extension(combined, extension2) {
    let key;
    for (key in extension2) {
      if (own2.call(extension2, key)) {
        if (key === "canContainEols") {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
        } else if (key === "transforms") {
          const right = extension2[key];
          if (right) {
            combined[key].push(...right);
          }
        } else if (key === "enter" || key === "exit") {
          const right = extension2[key];
          if (right) {
            Object.assign(combined[key], right);
          }
        }
      }
    }
  }
  function defaultOnError(left, right) {
    if (left) {
      throw new Error(
        "Cannot close `" + left.type + "` (" + stringifyPosition({
          start: left.start,
          end: left.end
        }) + "): a different token (`" + right.type + "`, " + stringifyPosition({
          start: right.start,
          end: right.end
        }) + ") is open"
      );
    } else {
      throw new Error(
        "Cannot close document, a token (`" + right.type + "`, " + stringifyPosition({
          start: right.start,
          end: right.end
        }) + ") is still open"
      );
    }
  }

  // ../node_modules/remark-parse/lib/index.js
  function remarkParse(options) {
    const parser = (doc) => {
      const settings = (
        /** @type {Options} */
        this.data("settings")
      );
      return fromMarkdown(
        doc,
        Object.assign({}, settings, options, {
          // Note: these options are not in the readme.
          // The goal is for them to be set by plugins on `data` instead of being
          // passed by users.
          extensions: this.data("micromarkExtensions") || [],
          mdastExtensions: this.data("fromMarkdownExtensions") || []
        })
      );
    };
    Object.assign(this, { Parser: parser });
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
  function blockquote(state, node4) {
    const result = {
      type: "element",
      tagName: "blockquote",
      properties: {},
      children: state.wrap(state.all(node4), true)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/break.js
  function hardBreak(state, node4) {
    const result = { type: "element", tagName: "br", properties: {}, children: [] };
    state.patch(node4, result);
    return [state.applyData(node4, result), { type: "text", value: "\n" }];
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/code.js
  function code(state, node4) {
    const value = node4.value ? node4.value + "\n" : "";
    const lang = node4.lang ? node4.lang.match(/^[^ \t]+(?=[ \t]|$)/) : null;
    const properties = {};
    if (lang) {
      properties.className = ["language-" + lang];
    }
    let result = {
      type: "element",
      tagName: "code",
      properties,
      children: [{ type: "text", value }]
    };
    if (node4.meta) {
      result.data = { meta: node4.meta };
    }
    state.patch(node4, result);
    result = state.applyData(node4, result);
    result = { type: "element", tagName: "pre", properties: {}, children: [result] };
    state.patch(node4, result);
    return result;
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/delete.js
  function strikethrough(state, node4) {
    const result = {
      type: "element",
      tagName: "del",
      properties: {},
      children: state.all(node4)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
  function emphasis(state, node4) {
    const result = {
      type: "element",
      tagName: "em",
      properties: {},
      children: state.all(node4)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/micromark-util-sanitize-uri/index.js
  function normalizeUri(value) {
    const result = [];
    let index2 = -1;
    let start2 = 0;
    let skip = 0;
    while (++index2 < value.length) {
      const code2 = value.charCodeAt(index2);
      let replace2 = "";
      if (code2 === 37 && asciiAlphanumeric(value.charCodeAt(index2 + 1)) && asciiAlphanumeric(value.charCodeAt(index2 + 2))) {
        skip = 2;
      } else if (code2 < 128) {
        if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code2))) {
          replace2 = String.fromCharCode(code2);
        }
      } else if (code2 > 55295 && code2 < 57344) {
        const next2 = value.charCodeAt(index2 + 1);
        if (code2 < 56320 && next2 > 56319 && next2 < 57344) {
          replace2 = String.fromCharCode(code2, next2);
          skip = 1;
        } else {
          replace2 = "\uFFFD";
        }
      } else {
        replace2 = String.fromCharCode(code2);
      }
      if (replace2) {
        result.push(value.slice(start2, index2), encodeURIComponent(replace2));
        start2 = index2 + skip + 1;
        replace2 = "";
      }
      if (skip) {
        index2 += skip;
        skip = 0;
      }
    }
    return result.join("") + value.slice(start2);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
  function footnoteReference(state, node4) {
    const id = String(node4.identifier).toUpperCase();
    const safeId = normalizeUri(id.toLowerCase());
    const index2 = state.footnoteOrder.indexOf(id);
    let counter;
    if (index2 === -1) {
      state.footnoteOrder.push(id);
      state.footnoteCounts[id] = 1;
      counter = state.footnoteOrder.length;
    } else {
      state.footnoteCounts[id]++;
      counter = index2 + 1;
    }
    const reuseCounter = state.footnoteCounts[id];
    const link2 = {
      type: "element",
      tagName: "a",
      properties: {
        href: "#" + state.clobberPrefix + "fn-" + safeId,
        id: state.clobberPrefix + "fnref-" + safeId + (reuseCounter > 1 ? "-" + reuseCounter : ""),
        dataFootnoteRef: true,
        ariaDescribedBy: ["footnote-label"]
      },
      children: [{ type: "text", value: String(counter) }]
    };
    state.patch(node4, link2);
    const sup = {
      type: "element",
      tagName: "sup",
      properties: {},
      children: [link2]
    };
    state.patch(node4, sup);
    return state.applyData(node4, sup);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/footnote.js
  function footnote(state, node4) {
    const footnoteById = state.footnoteById;
    let no = 1;
    while (no in footnoteById)
      no++;
    const identifier2 = String(no);
    footnoteById[identifier2] = {
      type: "footnoteDefinition",
      identifier: identifier2,
      children: [{ type: "paragraph", children: node4.children }],
      position: node4.position
    };
    return footnoteReference(state, {
      type: "footnoteReference",
      identifier: identifier2,
      position: node4.position
    });
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/heading.js
  function heading(state, node4) {
    const result = {
      type: "element",
      tagName: "h" + node4.depth,
      properties: {},
      children: state.all(node4)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/html.js
  function html(state, node4) {
    if (state.dangerous) {
      const result = { type: "raw", value: node4.value };
      state.patch(node4, result);
      return state.applyData(node4, result);
    }
    return null;
  }

  // ../node_modules/mdast-util-to-hast/lib/revert.js
  function revert(state, node4) {
    const subtype = node4.referenceType;
    let suffix = "]";
    if (subtype === "collapsed") {
      suffix += "[]";
    } else if (subtype === "full") {
      suffix += "[" + (node4.label || node4.identifier) + "]";
    }
    if (node4.type === "imageReference") {
      return { type: "text", value: "![" + node4.alt + suffix };
    }
    const contents = state.all(node4);
    const head = contents[0];
    if (head && head.type === "text") {
      head.value = "[" + head.value;
    } else {
      contents.unshift({ type: "text", value: "[" });
    }
    const tail = contents[contents.length - 1];
    if (tail && tail.type === "text") {
      tail.value += suffix;
    } else {
      contents.push({ type: "text", value: suffix });
    }
    return contents;
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
  function imageReference(state, node4) {
    const def = state.definition(node4.identifier);
    if (!def) {
      return revert(state, node4);
    }
    const properties = { src: normalizeUri(def.url || ""), alt: node4.alt };
    if (def.title !== null && def.title !== void 0) {
      properties.title = def.title;
    }
    const result = { type: "element", tagName: "img", properties, children: [] };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/image.js
  function image(state, node4) {
    const properties = { src: normalizeUri(node4.url) };
    if (node4.alt !== null && node4.alt !== void 0) {
      properties.alt = node4.alt;
    }
    if (node4.title !== null && node4.title !== void 0) {
      properties.title = node4.title;
    }
    const result = { type: "element", tagName: "img", properties, children: [] };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
  function inlineCode(state, node4) {
    const text4 = { type: "text", value: node4.value.replace(/\r?\n|\r/g, " ") };
    state.patch(node4, text4);
    const result = {
      type: "element",
      tagName: "code",
      properties: {},
      children: [text4]
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
  function linkReference(state, node4) {
    const def = state.definition(node4.identifier);
    if (!def) {
      return revert(state, node4);
    }
    const properties = { href: normalizeUri(def.url || "") };
    if (def.title !== null && def.title !== void 0) {
      properties.title = def.title;
    }
    const result = {
      type: "element",
      tagName: "a",
      properties,
      children: state.all(node4)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/link.js
  function link(state, node4) {
    const properties = { href: normalizeUri(node4.url) };
    if (node4.title !== null && node4.title !== void 0) {
      properties.title = node4.title;
    }
    const result = {
      type: "element",
      tagName: "a",
      properties,
      children: state.all(node4)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/list-item.js
  function listItem(state, node4, parent) {
    const results = state.all(node4);
    const loose = parent ? listLoose(parent) : listItemLoose(node4);
    const properties = {};
    const children = [];
    if (typeof node4.checked === "boolean") {
      const head = results[0];
      let paragraph2;
      if (head && head.type === "element" && head.tagName === "p") {
        paragraph2 = head;
      } else {
        paragraph2 = { type: "element", tagName: "p", properties: {}, children: [] };
        results.unshift(paragraph2);
      }
      if (paragraph2.children.length > 0) {
        paragraph2.children.unshift({ type: "text", value: " " });
      }
      paragraph2.children.unshift({
        type: "element",
        tagName: "input",
        properties: { type: "checkbox", checked: node4.checked, disabled: true },
        children: []
      });
      properties.className = ["task-list-item"];
    }
    let index2 = -1;
    while (++index2 < results.length) {
      const child = results[index2];
      if (loose || index2 !== 0 || child.type !== "element" || child.tagName !== "p") {
        children.push({ type: "text", value: "\n" });
      }
      if (child.type === "element" && child.tagName === "p" && !loose) {
        children.push(...child.children);
      } else {
        children.push(child);
      }
    }
    const tail = results[results.length - 1];
    if (tail && (loose || tail.type !== "element" || tail.tagName !== "p")) {
      children.push({ type: "text", value: "\n" });
    }
    const result = { type: "element", tagName: "li", properties, children };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }
  function listLoose(node4) {
    let loose = false;
    if (node4.type === "list") {
      loose = node4.spread || false;
      const children = node4.children;
      let index2 = -1;
      while (!loose && ++index2 < children.length) {
        loose = listItemLoose(children[index2]);
      }
    }
    return loose;
  }
  function listItemLoose(node4) {
    const spread = node4.spread;
    return spread === void 0 || spread === null ? node4.children.length > 1 : spread;
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/list.js
  function list2(state, node4) {
    const properties = {};
    const results = state.all(node4);
    let index2 = -1;
    if (typeof node4.start === "number" && node4.start !== 1) {
      properties.start = node4.start;
    }
    while (++index2 < results.length) {
      const child = results[index2];
      if (child.type === "element" && child.tagName === "li" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes("task-list-item")) {
        properties.className = ["contains-task-list"];
        break;
      }
    }
    const result = {
      type: "element",
      tagName: node4.ordered ? "ol" : "ul",
      properties,
      children: state.wrap(results, true)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
  function paragraph(state, node4) {
    const result = {
      type: "element",
      tagName: "p",
      properties: {},
      children: state.all(node4)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/root.js
  function root(state, node4) {
    const result = { type: "root", children: state.wrap(state.all(node4)) };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/strong.js
  function strong(state, node4) {
    const result = {
      type: "element",
      tagName: "strong",
      properties: {},
      children: state.all(node4)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/unist-util-position/lib/index.js
  var pointStart = point3("start");
  var pointEnd = point3("end");
  function position2(node4) {
    return { start: pointStart(node4), end: pointEnd(node4) };
  }
  function point3(type) {
    return point4;
    function point4(node4) {
      const point5 = node4 && node4.position && node4.position[type] || {};
      return {
        // @ts-expect-error: in practice, null is allowed.
        line: point5.line || null,
        // @ts-expect-error: in practice, null is allowed.
        column: point5.column || null,
        // @ts-expect-error: in practice, null is allowed.
        offset: point5.offset > -1 ? point5.offset : null
      };
    }
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/table.js
  function table(state, node4) {
    const rows = state.all(node4);
    const firstRow = rows.shift();
    const tableContent = [];
    if (firstRow) {
      const head = {
        type: "element",
        tagName: "thead",
        properties: {},
        children: state.wrap([firstRow], true)
      };
      state.patch(node4.children[0], head);
      tableContent.push(head);
    }
    if (rows.length > 0) {
      const body4 = {
        type: "element",
        tagName: "tbody",
        properties: {},
        children: state.wrap(rows, true)
      };
      const start2 = pointStart(node4.children[1]);
      const end2 = pointEnd(node4.children[node4.children.length - 1]);
      if (start2.line && end2.line)
        body4.position = { start: start2, end: end2 };
      tableContent.push(body4);
    }
    const result = {
      type: "element",
      tagName: "table",
      properties: {},
      children: state.wrap(tableContent, true)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/table-row.js
  function tableRow(state, node4, parent) {
    const siblings = parent ? parent.children : void 0;
    const rowIndex = siblings ? siblings.indexOf(node4) : 1;
    const tagName = rowIndex === 0 ? "th" : "td";
    const align = parent && parent.type === "table" ? parent.align : void 0;
    const length2 = align ? align.length : node4.children.length;
    let cellIndex = -1;
    const cells = [];
    while (++cellIndex < length2) {
      const cell = node4.children[cellIndex];
      const properties = {};
      const alignValue = align ? align[cellIndex] : void 0;
      if (alignValue) {
        properties.align = alignValue;
      }
      let result2 = { type: "element", tagName, properties, children: [] };
      if (cell) {
        result2.children = state.all(cell);
        state.patch(cell, result2);
        result2 = state.applyData(node4, result2);
      }
      cells.push(result2);
    }
    const result = {
      type: "element",
      tagName: "tr",
      properties: {},
      children: state.wrap(cells, true)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js
  function tableCell(state, node4) {
    const result = {
      type: "element",
      tagName: "td",
      // Assume body cell.
      properties: {},
      children: state.all(node4)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/trim-lines/index.js
  var tab = 9;
  var space = 32;
  function trimLines(value) {
    const source = String(value);
    const search2 = /\r?\n|\r/g;
    let match2 = search2.exec(source);
    let last = 0;
    const lines = [];
    while (match2) {
      lines.push(
        trimLine(source.slice(last, match2.index), last > 0, true),
        match2[0]
      );
      last = match2.index + match2[0].length;
      match2 = search2.exec(source);
    }
    lines.push(trimLine(source.slice(last), last > 0, false));
    return lines.join("");
  }
  function trimLine(value, start2, end2) {
    let startIndex = 0;
    let endIndex = value.length;
    if (start2) {
      let code2 = value.codePointAt(startIndex);
      while (code2 === tab || code2 === space) {
        startIndex++;
        code2 = value.codePointAt(startIndex);
      }
    }
    if (end2) {
      let code2 = value.codePointAt(endIndex - 1);
      while (code2 === tab || code2 === space) {
        endIndex--;
        code2 = value.codePointAt(endIndex - 1);
      }
    }
    return endIndex > startIndex ? value.slice(startIndex, endIndex) : "";
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/text.js
  function text3(state, node4) {
    const result = { type: "text", value: trimLines(String(node4.value)) };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
  function thematicBreak2(state, node4) {
    const result = {
      type: "element",
      tagName: "hr",
      properties: {},
      children: []
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }

  // ../node_modules/mdast-util-to-hast/lib/handlers/index.js
  var handlers = {
    blockquote,
    break: hardBreak,
    code,
    delete: strikethrough,
    emphasis,
    footnoteReference,
    footnote,
    heading,
    html,
    imageReference,
    image,
    inlineCode,
    linkReference,
    link,
    listItem,
    list: list2,
    paragraph,
    root,
    strong,
    table,
    tableCell,
    tableRow,
    text: text3,
    thematicBreak: thematicBreak2,
    toml: ignore,
    yaml: ignore,
    definition: ignore,
    footnoteDefinition: ignore
  };
  function ignore() {
    return null;
  }

  // ../node_modules/unist-util-is/lib/index.js
  var convert2 = (
    /**
     * @type {(
     *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
     *   ((test?: Test) => AssertAnything)
     * )}
     */
    /**
     * @param {Test} [test]
     * @returns {AssertAnything}
     */
    function(test) {
      if (test === void 0 || test === null) {
        return ok;
      }
      if (typeof test === "string") {
        return typeFactory(test);
      }
      if (typeof test === "object") {
        return Array.isArray(test) ? anyFactory(test) : propsFactory(test);
      }
      if (typeof test === "function") {
        return castFactory(test);
      }
      throw new Error("Expected function, string, or object as test");
    }
  );
  function anyFactory(tests) {
    const checks2 = [];
    let index2 = -1;
    while (++index2 < tests.length) {
      checks2[index2] = convert2(tests[index2]);
    }
    return castFactory(any2);
    function any2(...parameters) {
      let index3 = -1;
      while (++index3 < checks2.length) {
        if (checks2[index3].call(this, ...parameters))
          return true;
      }
      return false;
    }
  }
  function propsFactory(check) {
    return castFactory(all3);
    function all3(node4) {
      let key;
      for (key in check) {
        if (node4[key] !== check[key])
          return false;
      }
      return true;
    }
  }
  function typeFactory(check) {
    return castFactory(type);
    function type(node4) {
      return node4 && node4.type === check;
    }
  }
  function castFactory(check) {
    return assertion;
    function assertion(node4, ...parameters) {
      return Boolean(
        node4 && typeof node4 === "object" && "type" in node4 && // @ts-expect-error: fine.
        Boolean(check.call(this, node4, ...parameters))
      );
    }
  }
  function ok() {
    return true;
  }

  // ../node_modules/unist-util-visit-parents/lib/color.browser.js
  function color(d2) {
    return d2;
  }

  // ../node_modules/unist-util-visit-parents/lib/index.js
  var CONTINUE = true;
  var EXIT = false;
  var SKIP = "skip";
  var visitParents = (
    /**
     * @type {(
     *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
     *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
     * )}
     */
    /**
     * @param {Node} tree
     * @param {Test} test
     * @param {Visitor<Node>} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {void}
     */
    function(tree, test, visitor, reverse) {
      if (typeof test === "function" && typeof visitor !== "function") {
        reverse = visitor;
        visitor = test;
        test = null;
      }
      const is3 = convert2(test);
      const step = reverse ? -1 : 1;
      factory(tree, void 0, [])();
      function factory(node4, index2, parents) {
        const value = node4 && typeof node4 === "object" ? node4 : {};
        if (typeof value.type === "string") {
          const name = (
            // `hast`
            typeof value.tagName === "string" ? value.tagName : (
              // `xast`
              typeof value.name === "string" ? value.name : void 0
            )
          );
          Object.defineProperty(visit2, "name", {
            value: "node (" + color(node4.type + (name ? "<" + name + ">" : "")) + ")"
          });
        }
        return visit2;
        function visit2() {
          let result = [];
          let subresult;
          let offset;
          let grandparents;
          if (!test || is3(node4, index2, parents[parents.length - 1] || null)) {
            result = toResult(visitor(node4, parents));
            if (result[0] === EXIT) {
              return result;
            }
          }
          if (node4.children && result[0] !== SKIP) {
            offset = (reverse ? node4.children.length : -1) + step;
            grandparents = parents.concat(node4);
            while (offset > -1 && offset < node4.children.length) {
              subresult = factory(node4.children[offset], offset, grandparents)();
              if (subresult[0] === EXIT) {
                return subresult;
              }
              offset = typeof subresult[1] === "number" ? subresult[1] : offset + step;
            }
          }
          return result;
        }
      }
    }
  );
  function toResult(value) {
    if (Array.isArray(value)) {
      return value;
    }
    if (typeof value === "number") {
      return [CONTINUE, value];
    }
    return [value];
  }

  // ../node_modules/unist-util-visit/lib/index.js
  var visit = (
    /**
     * @type {(
     *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
     *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
     * )}
     */
    /**
     * @param {Node} tree
     * @param {Test} test
     * @param {Visitor} visitor
     * @param {boolean | null | undefined} [reverse]
     * @returns {void}
     */
    function(tree, test, visitor, reverse) {
      if (typeof test === "function" && typeof visitor !== "function") {
        reverse = visitor;
        visitor = test;
        test = null;
      }
      visitParents(tree, test, overload, reverse);
      function overload(node4, parents) {
        const parent = parents[parents.length - 1];
        return visitor(
          node4,
          parent ? parent.children.indexOf(node4) : null,
          parent
        );
      }
    }
  );

  // ../node_modules/unist-util-generated/lib/index.js
  function generated(node4) {
    return !node4 || !node4.position || !node4.position.start || !node4.position.start.line || !node4.position.start.column || !node4.position.end || !node4.position.end.line || !node4.position.end.column;
  }

  // ../node_modules/mdast-util-definitions/lib/index.js
  var own3 = {}.hasOwnProperty;
  function definitions(tree) {
    const cache3 = /* @__PURE__ */ Object.create(null);
    if (!tree || !tree.type) {
      throw new Error("mdast-util-definitions expected node");
    }
    visit(tree, "definition", (definition3) => {
      const id = clean(definition3.identifier);
      if (id && !own3.call(cache3, id)) {
        cache3[id] = definition3;
      }
    });
    return definition2;
    function definition2(identifier2) {
      const id = clean(identifier2);
      return id && own3.call(cache3, id) ? cache3[id] : null;
    }
  }
  function clean(value) {
    return String(value || "").toUpperCase();
  }

  // ../node_modules/mdast-util-to-hast/lib/state.js
  var own4 = {}.hasOwnProperty;
  function createState(tree, options) {
    const settings = options || {};
    const dangerous = settings.allowDangerousHtml || false;
    const footnoteById = {};
    state.dangerous = dangerous;
    state.clobberPrefix = settings.clobberPrefix === void 0 || settings.clobberPrefix === null ? "user-content-" : settings.clobberPrefix;
    state.footnoteLabel = settings.footnoteLabel || "Footnotes";
    state.footnoteLabelTagName = settings.footnoteLabelTagName || "h2";
    state.footnoteLabelProperties = settings.footnoteLabelProperties || {
      className: ["sr-only"]
    };
    state.footnoteBackLabel = settings.footnoteBackLabel || "Back to content";
    state.unknownHandler = settings.unknownHandler;
    state.passThrough = settings.passThrough;
    state.handlers = { ...handlers, ...settings.handlers };
    state.definition = definitions(tree);
    state.footnoteById = footnoteById;
    state.footnoteOrder = [];
    state.footnoteCounts = {};
    state.patch = patch;
    state.applyData = applyData;
    state.one = oneBound;
    state.all = allBound;
    state.wrap = wrap2;
    state.augment = augment;
    visit(tree, "footnoteDefinition", (definition2) => {
      const id = String(definition2.identifier).toUpperCase();
      if (!own4.call(footnoteById, id)) {
        footnoteById[id] = definition2;
      }
    });
    return state;
    function augment(left, right) {
      if (left && "data" in left && left.data) {
        const data = left.data;
        if (data.hName) {
          if (right.type !== "element") {
            right = {
              type: "element",
              tagName: "",
              properties: {},
              children: []
            };
          }
          right.tagName = data.hName;
        }
        if (right.type === "element" && data.hProperties) {
          right.properties = { ...right.properties, ...data.hProperties };
        }
        if ("children" in right && right.children && data.hChildren) {
          right.children = data.hChildren;
        }
      }
      if (left) {
        const ctx = "type" in left ? left : { position: left };
        if (!generated(ctx)) {
          right.position = { start: pointStart(ctx), end: pointEnd(ctx) };
        }
      }
      return right;
    }
    function state(node4, tagName, props, children) {
      if (Array.isArray(props)) {
        children = props;
        props = {};
      }
      return augment(node4, {
        type: "element",
        tagName,
        properties: props || {},
        children: children || []
      });
    }
    function oneBound(node4, parent) {
      return one2(state, node4, parent);
    }
    function allBound(parent) {
      return all2(state, parent);
    }
  }
  function patch(from2, to) {
    if (from2.position)
      to.position = position2(from2);
  }
  function applyData(from2, to) {
    let result = to;
    if (from2 && from2.data) {
      const hName = from2.data.hName;
      const hChildren = from2.data.hChildren;
      const hProperties = from2.data.hProperties;
      if (typeof hName === "string") {
        if (result.type === "element") {
          result.tagName = hName;
        } else {
          result = {
            type: "element",
            tagName: hName,
            properties: {},
            children: []
          };
        }
      }
      if (result.type === "element" && hProperties) {
        result.properties = { ...result.properties, ...hProperties };
      }
      if ("children" in result && result.children && hChildren !== null && hChildren !== void 0) {
        result.children = hChildren;
      }
    }
    return result;
  }
  function one2(state, node4, parent) {
    const type = node4 && node4.type;
    if (!type) {
      throw new Error("Expected node, got `" + node4 + "`");
    }
    if (own4.call(state.handlers, type)) {
      return state.handlers[type](state, node4, parent);
    }
    if (state.passThrough && state.passThrough.includes(type)) {
      return "children" in node4 ? { ...node4, children: all2(state, node4) } : node4;
    }
    if (state.unknownHandler) {
      return state.unknownHandler(state, node4, parent);
    }
    return defaultUnknownHandler(state, node4);
  }
  function all2(state, parent) {
    const values2 = [];
    if ("children" in parent) {
      const nodes = parent.children;
      let index2 = -1;
      while (++index2 < nodes.length) {
        const result = one2(state, nodes[index2], parent);
        if (result) {
          if (index2 && nodes[index2 - 1].type === "break") {
            if (!Array.isArray(result) && result.type === "text") {
              result.value = result.value.replace(/^\s+/, "");
            }
            if (!Array.isArray(result) && result.type === "element") {
              const head = result.children[0];
              if (head && head.type === "text") {
                head.value = head.value.replace(/^\s+/, "");
              }
            }
          }
          if (Array.isArray(result)) {
            values2.push(...result);
          } else {
            values2.push(result);
          }
        }
      }
    }
    return values2;
  }
  function defaultUnknownHandler(state, node4) {
    const data = node4.data || {};
    const result = "value" in node4 && !(own4.call(data, "hProperties") || own4.call(data, "hChildren")) ? { type: "text", value: node4.value } : {
      type: "element",
      tagName: "div",
      properties: {},
      children: all2(state, node4)
    };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }
  function wrap2(nodes, loose) {
    const result = [];
    let index2 = -1;
    if (loose) {
      result.push({ type: "text", value: "\n" });
    }
    while (++index2 < nodes.length) {
      if (index2)
        result.push({ type: "text", value: "\n" });
      result.push(nodes[index2]);
    }
    if (loose && nodes.length > 0) {
      result.push({ type: "text", value: "\n" });
    }
    return result;
  }

  // ../node_modules/mdast-util-to-hast/lib/footer.js
  function footer(state) {
    const listItems = [];
    let index2 = -1;
    while (++index2 < state.footnoteOrder.length) {
      const def = state.footnoteById[state.footnoteOrder[index2]];
      if (!def) {
        continue;
      }
      const content15 = state.all(def);
      const id = String(def.identifier).toUpperCase();
      const safeId = normalizeUri(id.toLowerCase());
      let referenceIndex = 0;
      const backReferences = [];
      while (++referenceIndex <= state.footnoteCounts[id]) {
        const backReference = {
          type: "element",
          tagName: "a",
          properties: {
            href: "#" + state.clobberPrefix + "fnref-" + safeId + (referenceIndex > 1 ? "-" + referenceIndex : ""),
            dataFootnoteBackref: true,
            className: ["data-footnote-backref"],
            ariaLabel: state.footnoteBackLabel
          },
          children: [{ type: "text", value: "\u21A9" }]
        };
        if (referenceIndex > 1) {
          backReference.children.push({
            type: "element",
            tagName: "sup",
            children: [{ type: "text", value: String(referenceIndex) }]
          });
        }
        if (backReferences.length > 0) {
          backReferences.push({ type: "text", value: " " });
        }
        backReferences.push(backReference);
      }
      const tail = content15[content15.length - 1];
      if (tail && tail.type === "element" && tail.tagName === "p") {
        const tailTail = tail.children[tail.children.length - 1];
        if (tailTail && tailTail.type === "text") {
          tailTail.value += " ";
        } else {
          tail.children.push({ type: "text", value: " " });
        }
        tail.children.push(...backReferences);
      } else {
        content15.push(...backReferences);
      }
      const listItem2 = {
        type: "element",
        tagName: "li",
        properties: { id: state.clobberPrefix + "fn-" + safeId },
        children: state.wrap(content15, true)
      };
      state.patch(def, listItem2);
      listItems.push(listItem2);
    }
    if (listItems.length === 0) {
      return;
    }
    return {
      type: "element",
      tagName: "section",
      properties: { dataFootnotes: true, className: ["footnotes"] },
      children: [
        {
          type: "element",
          tagName: state.footnoteLabelTagName,
          properties: {
            // To do: use structured clone.
            ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),
            id: "footnote-label"
          },
          children: [{ type: "text", value: state.footnoteLabel }]
        },
        { type: "text", value: "\n" },
        {
          type: "element",
          tagName: "ol",
          properties: {},
          children: state.wrap(listItems, true)
        },
        { type: "text", value: "\n" }
      ]
    };
  }

  // ../node_modules/mdast-util-to-hast/lib/index.js
  function toHast(tree, options) {
    const state = createState(tree, options);
    const node4 = state.one(tree, null);
    const foot = footer(state);
    if (foot) {
      node4.children.push({ type: "text", value: "\n" }, foot);
    }
    return Array.isArray(node4) ? { type: "root", children: node4 } : node4;
  }

  // ../node_modules/remark-rehype/lib/index.js
  var remarkRehype = (
    /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */
    function(destination, options) {
      return destination && "run" in destination ? bridge(destination, options) : mutate(destination || options);
    }
  );
  var lib_default = remarkRehype;
  function bridge(destination, options) {
    return (node4, file, next2) => {
      destination.run(toHast(node4, options), file, (error) => {
        next2(error);
      });
    };
  }
  function mutate(options) {
    return (node4) => toHast(node4, options);
  }

  // ../node_modules/react-markdown/lib/react-markdown.js
  var import_prop_types = __toESM(require_prop_types(), 1);

  // ../node_modules/property-information/lib/util/schema.js
  var Schema = class {
    /**
     * @constructor
     * @param {Properties} property
     * @param {Normal} normal
     * @param {string} [space]
     */
    constructor(property, normal2, space2) {
      this.property = property;
      this.normal = normal2;
      if (space2) {
        this.space = space2;
      }
    }
  };
  Schema.prototype.property = {};
  Schema.prototype.normal = {};
  Schema.prototype.space = null;

  // ../node_modules/property-information/lib/util/merge.js
  function merge2(definitions2, space2) {
    const property = {};
    const normal2 = {};
    let index2 = -1;
    while (++index2 < definitions2.length) {
      Object.assign(property, definitions2[index2].property);
      Object.assign(normal2, definitions2[index2].normal);
    }
    return new Schema(property, normal2, space2);
  }

  // ../node_modules/property-information/lib/normalize.js
  function normalize4(value) {
    return value.toLowerCase();
  }

  // ../node_modules/property-information/lib/util/info.js
  var Info2 = class {
    /**
     * @constructor
     * @param {string} property
     * @param {string} attribute
     */
    constructor(property, attribute) {
      this.property = property;
      this.attribute = attribute;
    }
  };
  Info2.prototype.space = null;
  Info2.prototype.boolean = false;
  Info2.prototype.booleanish = false;
  Info2.prototype.overloadedBoolean = false;
  Info2.prototype.number = false;
  Info2.prototype.commaSeparated = false;
  Info2.prototype.spaceSeparated = false;
  Info2.prototype.commaOrSpaceSeparated = false;
  Info2.prototype.mustUseProperty = false;
  Info2.prototype.defined = false;

  // ../node_modules/property-information/lib/util/types.js
  var types_exports = {};
  __export(types_exports, {
    boolean: () => boolean,
    booleanish: () => booleanish,
    commaOrSpaceSeparated: () => commaOrSpaceSeparated,
    commaSeparated: () => commaSeparated,
    number: () => number,
    overloadedBoolean: () => overloadedBoolean,
    spaceSeparated: () => spaceSeparated
  });
  var powers = 0;
  var boolean = increment();
  var booleanish = increment();
  var overloadedBoolean = increment();
  var number = increment();
  var spaceSeparated = increment();
  var commaSeparated = increment();
  var commaOrSpaceSeparated = increment();
  function increment() {
    return 2 ** ++powers;
  }

  // ../node_modules/property-information/lib/util/defined-info.js
  var checks = Object.keys(types_exports);
  var DefinedInfo = class extends Info2 {
    /**
     * @constructor
     * @param {string} property
     * @param {string} attribute
     * @param {number|null} [mask]
     * @param {string} [space]
     */
    constructor(property, attribute, mask, space2) {
      let index2 = -1;
      super(property, attribute);
      mark(this, "space", space2);
      if (typeof mask === "number") {
        while (++index2 < checks.length) {
          const check = checks[index2];
          mark(this, checks[index2], (mask & types_exports[check]) === types_exports[check]);
        }
      }
    }
  };
  DefinedInfo.prototype.defined = true;
  function mark(values2, key, value) {
    if (value) {
      values2[key] = value;
    }
  }

  // ../node_modules/property-information/lib/util/create.js
  var own5 = {}.hasOwnProperty;
  function create(definition2) {
    const property = {};
    const normal2 = {};
    let prop;
    for (prop in definition2.properties) {
      if (own5.call(definition2.properties, prop)) {
        const value = definition2.properties[prop];
        const info = new DefinedInfo(
          prop,
          definition2.transform(definition2.attributes || {}, prop),
          value,
          definition2.space
        );
        if (definition2.mustUseProperty && definition2.mustUseProperty.includes(prop)) {
          info.mustUseProperty = true;
        }
        property[prop] = info;
        normal2[normalize4(prop)] = prop;
        normal2[normalize4(info.attribute)] = prop;
      }
    }
    return new Schema(property, normal2, definition2.space);
  }

  // ../node_modules/property-information/lib/xlink.js
  var xlink = create({
    space: "xlink",
    transform(_2, prop) {
      return "xlink:" + prop.slice(5).toLowerCase();
    },
    properties: {
      xLinkActuate: null,
      xLinkArcRole: null,
      xLinkHref: null,
      xLinkRole: null,
      xLinkShow: null,
      xLinkTitle: null,
      xLinkType: null
    }
  });

  // ../node_modules/property-information/lib/xml.js
  var xml = create({
    space: "xml",
    transform(_2, prop) {
      return "xml:" + prop.slice(3).toLowerCase();
    },
    properties: { xmlLang: null, xmlBase: null, xmlSpace: null }
  });

  // ../node_modules/property-information/lib/util/case-sensitive-transform.js
  function caseSensitiveTransform(attributes, attribute) {
    return attribute in attributes ? attributes[attribute] : attribute;
  }

  // ../node_modules/property-information/lib/util/case-insensitive-transform.js
  function caseInsensitiveTransform(attributes, property) {
    return caseSensitiveTransform(attributes, property.toLowerCase());
  }

  // ../node_modules/property-information/lib/xmlns.js
  var xmlns = create({
    space: "xmlns",
    attributes: { xmlnsxlink: "xmlns:xlink" },
    transform: caseInsensitiveTransform,
    properties: { xmlns: null, xmlnsXLink: null }
  });

  // ../node_modules/property-information/lib/aria.js
  var aria = create({
    transform(_2, prop) {
      return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
    },
    properties: {
      ariaActiveDescendant: null,
      ariaAtomic: booleanish,
      ariaAutoComplete: null,
      ariaBusy: booleanish,
      ariaChecked: booleanish,
      ariaColCount: number,
      ariaColIndex: number,
      ariaColSpan: number,
      ariaControls: spaceSeparated,
      ariaCurrent: null,
      ariaDescribedBy: spaceSeparated,
      ariaDetails: null,
      ariaDisabled: booleanish,
      ariaDropEffect: spaceSeparated,
      ariaErrorMessage: null,
      ariaExpanded: booleanish,
      ariaFlowTo: spaceSeparated,
      ariaGrabbed: booleanish,
      ariaHasPopup: null,
      ariaHidden: booleanish,
      ariaInvalid: null,
      ariaKeyShortcuts: null,
      ariaLabel: null,
      ariaLabelledBy: spaceSeparated,
      ariaLevel: number,
      ariaLive: null,
      ariaModal: booleanish,
      ariaMultiLine: booleanish,
      ariaMultiSelectable: booleanish,
      ariaOrientation: null,
      ariaOwns: spaceSeparated,
      ariaPlaceholder: null,
      ariaPosInSet: number,
      ariaPressed: booleanish,
      ariaReadOnly: booleanish,
      ariaRelevant: null,
      ariaRequired: booleanish,
      ariaRoleDescription: spaceSeparated,
      ariaRowCount: number,
      ariaRowIndex: number,
      ariaRowSpan: number,
      ariaSelected: booleanish,
      ariaSetSize: number,
      ariaSort: null,
      ariaValueMax: number,
      ariaValueMin: number,
      ariaValueNow: number,
      ariaValueText: null,
      role: null
    }
  });

  // ../node_modules/property-information/lib/html.js
  var html2 = create({
    space: "html",
    attributes: {
      acceptcharset: "accept-charset",
      classname: "class",
      htmlfor: "for",
      httpequiv: "http-equiv"
    },
    transform: caseInsensitiveTransform,
    mustUseProperty: ["checked", "multiple", "muted", "selected"],
    properties: {
      // Standard Properties.
      abbr: null,
      accept: commaSeparated,
      acceptCharset: spaceSeparated,
      accessKey: spaceSeparated,
      action: null,
      allow: null,
      allowFullScreen: boolean,
      allowPaymentRequest: boolean,
      allowUserMedia: boolean,
      alt: null,
      as: null,
      async: boolean,
      autoCapitalize: null,
      autoComplete: spaceSeparated,
      autoFocus: boolean,
      autoPlay: boolean,
      capture: boolean,
      charSet: null,
      checked: boolean,
      cite: null,
      className: spaceSeparated,
      cols: number,
      colSpan: null,
      content: null,
      contentEditable: booleanish,
      controls: boolean,
      controlsList: spaceSeparated,
      coords: number | commaSeparated,
      crossOrigin: null,
      data: null,
      dateTime: null,
      decoding: null,
      default: boolean,
      defer: boolean,
      dir: null,
      dirName: null,
      disabled: boolean,
      download: overloadedBoolean,
      draggable: booleanish,
      encType: null,
      enterKeyHint: null,
      form: null,
      formAction: null,
      formEncType: null,
      formMethod: null,
      formNoValidate: boolean,
      formTarget: null,
      headers: spaceSeparated,
      height: number,
      hidden: boolean,
      high: number,
      href: null,
      hrefLang: null,
      htmlFor: spaceSeparated,
      httpEquiv: spaceSeparated,
      id: null,
      imageSizes: null,
      imageSrcSet: null,
      inputMode: null,
      integrity: null,
      is: null,
      isMap: boolean,
      itemId: null,
      itemProp: spaceSeparated,
      itemRef: spaceSeparated,
      itemScope: boolean,
      itemType: spaceSeparated,
      kind: null,
      label: null,
      lang: null,
      language: null,
      list: null,
      loading: null,
      loop: boolean,
      low: number,
      manifest: null,
      max: null,
      maxLength: number,
      media: null,
      method: null,
      min: null,
      minLength: number,
      multiple: boolean,
      muted: boolean,
      name: null,
      nonce: null,
      noModule: boolean,
      noValidate: boolean,
      onAbort: null,
      onAfterPrint: null,
      onAuxClick: null,
      onBeforeMatch: null,
      onBeforePrint: null,
      onBeforeUnload: null,
      onBlur: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onContextLost: null,
      onContextMenu: null,
      onContextRestored: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFormData: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLanguageChange: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadEnd: null,
      onLoadStart: null,
      onMessage: null,
      onMessageError: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRejectionHandled: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onScrollEnd: null,
      onSecurityPolicyViolation: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onSlotChange: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnhandledRejection: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onWheel: null,
      open: boolean,
      optimum: number,
      pattern: null,
      ping: spaceSeparated,
      placeholder: null,
      playsInline: boolean,
      poster: null,
      preload: null,
      readOnly: boolean,
      referrerPolicy: null,
      rel: spaceSeparated,
      required: boolean,
      reversed: boolean,
      rows: number,
      rowSpan: number,
      sandbox: spaceSeparated,
      scope: null,
      scoped: boolean,
      seamless: boolean,
      selected: boolean,
      shape: null,
      size: number,
      sizes: null,
      slot: null,
      span: number,
      spellCheck: booleanish,
      src: null,
      srcDoc: null,
      srcLang: null,
      srcSet: null,
      start: number,
      step: null,
      style: null,
      tabIndex: number,
      target: null,
      title: null,
      translate: null,
      type: null,
      typeMustMatch: boolean,
      useMap: null,
      value: booleanish,
      width: number,
      wrap: null,
      // Legacy.
      // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
      align: null,
      // Several. Use CSS `text-align` instead,
      aLink: null,
      // `<body>`. Use CSS `a:active {color}` instead
      archive: spaceSeparated,
      // `<object>`. List of URIs to archives
      axis: null,
      // `<td>` and `<th>`. Use `scope` on `<th>`
      background: null,
      // `<body>`. Use CSS `background-image` instead
      bgColor: null,
      // `<body>` and table elements. Use CSS `background-color` instead
      border: number,
      // `<table>`. Use CSS `border-width` instead,
      borderColor: null,
      // `<table>`. Use CSS `border-color` instead,
      bottomMargin: number,
      // `<body>`
      cellPadding: null,
      // `<table>`
      cellSpacing: null,
      // `<table>`
      char: null,
      // Several table elements. When `align=char`, sets the character to align on
      charOff: null,
      // Several table elements. When `char`, offsets the alignment
      classId: null,
      // `<object>`
      clear: null,
      // `<br>`. Use CSS `clear` instead
      code: null,
      // `<object>`
      codeBase: null,
      // `<object>`
      codeType: null,
      // `<object>`
      color: null,
      // `<font>` and `<hr>`. Use CSS instead
      compact: boolean,
      // Lists. Use CSS to reduce space between items instead
      declare: boolean,
      // `<object>`
      event: null,
      // `<script>`
      face: null,
      // `<font>`. Use CSS instead
      frame: null,
      // `<table>`
      frameBorder: null,
      // `<iframe>`. Use CSS `border` instead
      hSpace: number,
      // `<img>` and `<object>`
      leftMargin: number,
      // `<body>`
      link: null,
      // `<body>`. Use CSS `a:link {color: *}` instead
      longDesc: null,
      // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
      lowSrc: null,
      // `<img>`. Use a `<picture>`
      marginHeight: number,
      // `<body>`
      marginWidth: number,
      // `<body>`
      noResize: boolean,
      // `<frame>`
      noHref: boolean,
      // `<area>`. Use no href instead of an explicit `nohref`
      noShade: boolean,
      // `<hr>`. Use background-color and height instead of borders
      noWrap: boolean,
      // `<td>` and `<th>`
      object: null,
      // `<applet>`
      profile: null,
      // `<head>`
      prompt: null,
      // `<isindex>`
      rev: null,
      // `<link>`
      rightMargin: number,
      // `<body>`
      rules: null,
      // `<table>`
      scheme: null,
      // `<meta>`
      scrolling: booleanish,
      // `<frame>`. Use overflow in the child context
      standby: null,
      // `<object>`
      summary: null,
      // `<table>`
      text: null,
      // `<body>`. Use CSS `color` instead
      topMargin: number,
      // `<body>`
      valueType: null,
      // `<param>`
      version: null,
      // `<html>`. Use a doctype.
      vAlign: null,
      // Several. Use CSS `vertical-align` instead
      vLink: null,
      // `<body>`. Use CSS `a:visited {color}` instead
      vSpace: number,
      // `<img>` and `<object>`
      // Non-standard Properties.
      allowTransparency: null,
      autoCorrect: null,
      autoSave: null,
      disablePictureInPicture: boolean,
      disableRemotePlayback: boolean,
      prefix: null,
      property: null,
      results: number,
      security: null,
      unselectable: null
    }
  });

  // ../node_modules/property-information/lib/svg.js
  var svg = create({
    space: "svg",
    attributes: {
      accentHeight: "accent-height",
      alignmentBaseline: "alignment-baseline",
      arabicForm: "arabic-form",
      baselineShift: "baseline-shift",
      capHeight: "cap-height",
      className: "class",
      clipPath: "clip-path",
      clipRule: "clip-rule",
      colorInterpolation: "color-interpolation",
      colorInterpolationFilters: "color-interpolation-filters",
      colorProfile: "color-profile",
      colorRendering: "color-rendering",
      crossOrigin: "crossorigin",
      dataType: "datatype",
      dominantBaseline: "dominant-baseline",
      enableBackground: "enable-background",
      fillOpacity: "fill-opacity",
      fillRule: "fill-rule",
      floodColor: "flood-color",
      floodOpacity: "flood-opacity",
      fontFamily: "font-family",
      fontSize: "font-size",
      fontSizeAdjust: "font-size-adjust",
      fontStretch: "font-stretch",
      fontStyle: "font-style",
      fontVariant: "font-variant",
      fontWeight: "font-weight",
      glyphName: "glyph-name",
      glyphOrientationHorizontal: "glyph-orientation-horizontal",
      glyphOrientationVertical: "glyph-orientation-vertical",
      hrefLang: "hreflang",
      horizAdvX: "horiz-adv-x",
      horizOriginX: "horiz-origin-x",
      horizOriginY: "horiz-origin-y",
      imageRendering: "image-rendering",
      letterSpacing: "letter-spacing",
      lightingColor: "lighting-color",
      markerEnd: "marker-end",
      markerMid: "marker-mid",
      markerStart: "marker-start",
      navDown: "nav-down",
      navDownLeft: "nav-down-left",
      navDownRight: "nav-down-right",
      navLeft: "nav-left",
      navNext: "nav-next",
      navPrev: "nav-prev",
      navRight: "nav-right",
      navUp: "nav-up",
      navUpLeft: "nav-up-left",
      navUpRight: "nav-up-right",
      onAbort: "onabort",
      onActivate: "onactivate",
      onAfterPrint: "onafterprint",
      onBeforePrint: "onbeforeprint",
      onBegin: "onbegin",
      onCancel: "oncancel",
      onCanPlay: "oncanplay",
      onCanPlayThrough: "oncanplaythrough",
      onChange: "onchange",
      onClick: "onclick",
      onClose: "onclose",
      onCopy: "oncopy",
      onCueChange: "oncuechange",
      onCut: "oncut",
      onDblClick: "ondblclick",
      onDrag: "ondrag",
      onDragEnd: "ondragend",
      onDragEnter: "ondragenter",
      onDragExit: "ondragexit",
      onDragLeave: "ondragleave",
      onDragOver: "ondragover",
      onDragStart: "ondragstart",
      onDrop: "ondrop",
      onDurationChange: "ondurationchange",
      onEmptied: "onemptied",
      onEnd: "onend",
      onEnded: "onended",
      onError: "onerror",
      onFocus: "onfocus",
      onFocusIn: "onfocusin",
      onFocusOut: "onfocusout",
      onHashChange: "onhashchange",
      onInput: "oninput",
      onInvalid: "oninvalid",
      onKeyDown: "onkeydown",
      onKeyPress: "onkeypress",
      onKeyUp: "onkeyup",
      onLoad: "onload",
      onLoadedData: "onloadeddata",
      onLoadedMetadata: "onloadedmetadata",
      onLoadStart: "onloadstart",
      onMessage: "onmessage",
      onMouseDown: "onmousedown",
      onMouseEnter: "onmouseenter",
      onMouseLeave: "onmouseleave",
      onMouseMove: "onmousemove",
      onMouseOut: "onmouseout",
      onMouseOver: "onmouseover",
      onMouseUp: "onmouseup",
      onMouseWheel: "onmousewheel",
      onOffline: "onoffline",
      onOnline: "ononline",
      onPageHide: "onpagehide",
      onPageShow: "onpageshow",
      onPaste: "onpaste",
      onPause: "onpause",
      onPlay: "onplay",
      onPlaying: "onplaying",
      onPopState: "onpopstate",
      onProgress: "onprogress",
      onRateChange: "onratechange",
      onRepeat: "onrepeat",
      onReset: "onreset",
      onResize: "onresize",
      onScroll: "onscroll",
      onSeeked: "onseeked",
      onSeeking: "onseeking",
      onSelect: "onselect",
      onShow: "onshow",
      onStalled: "onstalled",
      onStorage: "onstorage",
      onSubmit: "onsubmit",
      onSuspend: "onsuspend",
      onTimeUpdate: "ontimeupdate",
      onToggle: "ontoggle",
      onUnload: "onunload",
      onVolumeChange: "onvolumechange",
      onWaiting: "onwaiting",
      onZoom: "onzoom",
      overlinePosition: "overline-position",
      overlineThickness: "overline-thickness",
      paintOrder: "paint-order",
      panose1: "panose-1",
      pointerEvents: "pointer-events",
      referrerPolicy: "referrerpolicy",
      renderingIntent: "rendering-intent",
      shapeRendering: "shape-rendering",
      stopColor: "stop-color",
      stopOpacity: "stop-opacity",
      strikethroughPosition: "strikethrough-position",
      strikethroughThickness: "strikethrough-thickness",
      strokeDashArray: "stroke-dasharray",
      strokeDashOffset: "stroke-dashoffset",
      strokeLineCap: "stroke-linecap",
      strokeLineJoin: "stroke-linejoin",
      strokeMiterLimit: "stroke-miterlimit",
      strokeOpacity: "stroke-opacity",
      strokeWidth: "stroke-width",
      tabIndex: "tabindex",
      textAnchor: "text-anchor",
      textDecoration: "text-decoration",
      textRendering: "text-rendering",
      typeOf: "typeof",
      underlinePosition: "underline-position",
      underlineThickness: "underline-thickness",
      unicodeBidi: "unicode-bidi",
      unicodeRange: "unicode-range",
      unitsPerEm: "units-per-em",
      vAlphabetic: "v-alphabetic",
      vHanging: "v-hanging",
      vIdeographic: "v-ideographic",
      vMathematical: "v-mathematical",
      vectorEffect: "vector-effect",
      vertAdvY: "vert-adv-y",
      vertOriginX: "vert-origin-x",
      vertOriginY: "vert-origin-y",
      wordSpacing: "word-spacing",
      writingMode: "writing-mode",
      xHeight: "x-height",
      // These were camelcased in Tiny. Now lowercased in SVG 2
      playbackOrder: "playbackorder",
      timelineBegin: "timelinebegin"
    },
    transform: caseSensitiveTransform,
    properties: {
      about: commaOrSpaceSeparated,
      accentHeight: number,
      accumulate: null,
      additive: null,
      alignmentBaseline: null,
      alphabetic: number,
      amplitude: number,
      arabicForm: null,
      ascent: number,
      attributeName: null,
      attributeType: null,
      azimuth: number,
      bandwidth: null,
      baselineShift: null,
      baseFrequency: null,
      baseProfile: null,
      bbox: null,
      begin: null,
      bias: number,
      by: null,
      calcMode: null,
      capHeight: number,
      className: spaceSeparated,
      clip: null,
      clipPath: null,
      clipPathUnits: null,
      clipRule: null,
      color: null,
      colorInterpolation: null,
      colorInterpolationFilters: null,
      colorProfile: null,
      colorRendering: null,
      content: null,
      contentScriptType: null,
      contentStyleType: null,
      crossOrigin: null,
      cursor: null,
      cx: null,
      cy: null,
      d: null,
      dataType: null,
      defaultAction: null,
      descent: number,
      diffuseConstant: number,
      direction: null,
      display: null,
      dur: null,
      divisor: number,
      dominantBaseline: null,
      download: boolean,
      dx: null,
      dy: null,
      edgeMode: null,
      editable: null,
      elevation: number,
      enableBackground: null,
      end: null,
      event: null,
      exponent: number,
      externalResourcesRequired: null,
      fill: null,
      fillOpacity: number,
      fillRule: null,
      filter: null,
      filterRes: null,
      filterUnits: null,
      floodColor: null,
      floodOpacity: null,
      focusable: null,
      focusHighlight: null,
      fontFamily: null,
      fontSize: null,
      fontSizeAdjust: null,
      fontStretch: null,
      fontStyle: null,
      fontVariant: null,
      fontWeight: null,
      format: null,
      fr: null,
      from: null,
      fx: null,
      fy: null,
      g1: commaSeparated,
      g2: commaSeparated,
      glyphName: commaSeparated,
      glyphOrientationHorizontal: null,
      glyphOrientationVertical: null,
      glyphRef: null,
      gradientTransform: null,
      gradientUnits: null,
      handler: null,
      hanging: number,
      hatchContentUnits: null,
      hatchUnits: null,
      height: null,
      href: null,
      hrefLang: null,
      horizAdvX: number,
      horizOriginX: number,
      horizOriginY: number,
      id: null,
      ideographic: number,
      imageRendering: null,
      initialVisibility: null,
      in: null,
      in2: null,
      intercept: number,
      k: number,
      k1: number,
      k2: number,
      k3: number,
      k4: number,
      kernelMatrix: commaOrSpaceSeparated,
      kernelUnitLength: null,
      keyPoints: null,
      // SEMI_COLON_SEPARATED
      keySplines: null,
      // SEMI_COLON_SEPARATED
      keyTimes: null,
      // SEMI_COLON_SEPARATED
      kerning: null,
      lang: null,
      lengthAdjust: null,
      letterSpacing: null,
      lightingColor: null,
      limitingConeAngle: number,
      local: null,
      markerEnd: null,
      markerMid: null,
      markerStart: null,
      markerHeight: null,
      markerUnits: null,
      markerWidth: null,
      mask: null,
      maskContentUnits: null,
      maskUnits: null,
      mathematical: null,
      max: null,
      media: null,
      mediaCharacterEncoding: null,
      mediaContentEncodings: null,
      mediaSize: number,
      mediaTime: null,
      method: null,
      min: null,
      mode: null,
      name: null,
      navDown: null,
      navDownLeft: null,
      navDownRight: null,
      navLeft: null,
      navNext: null,
      navPrev: null,
      navRight: null,
      navUp: null,
      navUpLeft: null,
      navUpRight: null,
      numOctaves: null,
      observer: null,
      offset: null,
      onAbort: null,
      onActivate: null,
      onAfterPrint: null,
      onBeforePrint: null,
      onBegin: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnd: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFocusIn: null,
      onFocusOut: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadStart: null,
      onMessage: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onMouseWheel: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRepeat: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onShow: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onZoom: null,
      opacity: null,
      operator: null,
      order: null,
      orient: null,
      orientation: null,
      origin: null,
      overflow: null,
      overlay: null,
      overlinePosition: number,
      overlineThickness: number,
      paintOrder: null,
      panose1: null,
      path: null,
      pathLength: number,
      patternContentUnits: null,
      patternTransform: null,
      patternUnits: null,
      phase: null,
      ping: spaceSeparated,
      pitch: null,
      playbackOrder: null,
      pointerEvents: null,
      points: null,
      pointsAtX: number,
      pointsAtY: number,
      pointsAtZ: number,
      preserveAlpha: null,
      preserveAspectRatio: null,
      primitiveUnits: null,
      propagate: null,
      property: commaOrSpaceSeparated,
      r: null,
      radius: null,
      referrerPolicy: null,
      refX: null,
      refY: null,
      rel: commaOrSpaceSeparated,
      rev: commaOrSpaceSeparated,
      renderingIntent: null,
      repeatCount: null,
      repeatDur: null,
      requiredExtensions: commaOrSpaceSeparated,
      requiredFeatures: commaOrSpaceSeparated,
      requiredFonts: commaOrSpaceSeparated,
      requiredFormats: commaOrSpaceSeparated,
      resource: null,
      restart: null,
      result: null,
      rotate: null,
      rx: null,
      ry: null,
      scale: null,
      seed: null,
      shapeRendering: null,
      side: null,
      slope: null,
      snapshotTime: null,
      specularConstant: number,
      specularExponent: number,
      spreadMethod: null,
      spacing: null,
      startOffset: null,
      stdDeviation: null,
      stemh: null,
      stemv: null,
      stitchTiles: null,
      stopColor: null,
      stopOpacity: null,
      strikethroughPosition: number,
      strikethroughThickness: number,
      string: null,
      stroke: null,
      strokeDashArray: commaOrSpaceSeparated,
      strokeDashOffset: null,
      strokeLineCap: null,
      strokeLineJoin: null,
      strokeMiterLimit: number,
      strokeOpacity: number,
      strokeWidth: null,
      style: null,
      surfaceScale: number,
      syncBehavior: null,
      syncBehaviorDefault: null,
      syncMaster: null,
      syncTolerance: null,
      syncToleranceDefault: null,
      systemLanguage: commaOrSpaceSeparated,
      tabIndex: number,
      tableValues: null,
      target: null,
      targetX: number,
      targetY: number,
      textAnchor: null,
      textDecoration: null,
      textRendering: null,
      textLength: null,
      timelineBegin: null,
      title: null,
      transformBehavior: null,
      type: null,
      typeOf: commaOrSpaceSeparated,
      to: null,
      transform: null,
      u1: null,
      u2: null,
      underlinePosition: number,
      underlineThickness: number,
      unicode: null,
      unicodeBidi: null,
      unicodeRange: null,
      unitsPerEm: number,
      values: null,
      vAlphabetic: number,
      vMathematical: number,
      vectorEffect: null,
      vHanging: number,
      vIdeographic: number,
      version: null,
      vertAdvY: number,
      vertOriginX: number,
      vertOriginY: number,
      viewBox: null,
      viewTarget: null,
      visibility: null,
      width: null,
      widths: null,
      wordSpacing: null,
      writingMode: null,
      x: null,
      x1: null,
      x2: null,
      xChannelSelector: null,
      xHeight: number,
      y: null,
      y1: null,
      y2: null,
      yChannelSelector: null,
      z: null,
      zoomAndPan: null
    }
  });

  // ../node_modules/property-information/lib/find.js
  var valid = /^data[-\w.:]+$/i;
  var dash = /-[a-z]/g;
  var cap = /[A-Z]/g;
  function find2(schema, value) {
    const normal2 = normalize4(value);
    let prop = value;
    let Type = Info2;
    if (normal2 in schema.normal) {
      return schema.property[schema.normal[normal2]];
    }
    if (normal2.length > 4 && normal2.slice(0, 4) === "data" && valid.test(value)) {
      if (value.charAt(4) === "-") {
        const rest = value.slice(5).replace(dash, camelcase);
        prop = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
      } else {
        const rest = value.slice(4);
        if (!dash.test(rest)) {
          let dashes = rest.replace(cap, kebab);
          if (dashes.charAt(0) !== "-") {
            dashes = "-" + dashes;
          }
          value = "data" + dashes;
        }
      }
      Type = DefinedInfo;
    }
    return new Type(prop, value);
  }
  function kebab($0) {
    return "-" + $0.toLowerCase();
  }
  function camelcase($0) {
    return $0.charAt(1).toUpperCase();
  }

  // ../node_modules/property-information/lib/hast-to-react.js
  var hastToReact = {
    classId: "classID",
    dataType: "datatype",
    itemId: "itemID",
    strokeDashArray: "strokeDasharray",
    strokeDashOffset: "strokeDashoffset",
    strokeLineCap: "strokeLinecap",
    strokeLineJoin: "strokeLinejoin",
    strokeMiterLimit: "strokeMiterlimit",
    typeOf: "typeof",
    xLinkActuate: "xlinkActuate",
    xLinkArcRole: "xlinkArcrole",
    xLinkHref: "xlinkHref",
    xLinkRole: "xlinkRole",
    xLinkShow: "xlinkShow",
    xLinkTitle: "xlinkTitle",
    xLinkType: "xlinkType",
    xmlnsXLink: "xmlnsXlink"
  };

  // ../node_modules/property-information/index.js
  var html3 = merge2([xml, xlink, xmlns, aria, html2], "html");
  var svg2 = merge2([xml, xlink, xmlns, aria, svg], "svg");

  // ../node_modules/react-markdown/lib/rehype-filter.js
  function rehypeFilter(options) {
    if (options.allowedElements && options.disallowedElements) {
      throw new TypeError(
        "Only one of `allowedElements` and `disallowedElements` should be defined"
      );
    }
    if (options.allowedElements || options.disallowedElements || options.allowElement) {
      return (tree) => {
        visit(tree, "element", (node4, index2, parent_) => {
          const parent = (
            /** @type {Element|Root} */
            parent_
          );
          let remove;
          if (options.allowedElements) {
            remove = !options.allowedElements.includes(node4.tagName);
          } else if (options.disallowedElements) {
            remove = options.disallowedElements.includes(node4.tagName);
          }
          if (!remove && options.allowElement && typeof index2 === "number") {
            remove = !options.allowElement(node4, index2, parent);
          }
          if (remove && typeof index2 === "number") {
            if (options.unwrapDisallowed && node4.children) {
              parent.children.splice(index2, 1, ...node4.children);
            } else {
              parent.children.splice(index2, 1);
            }
            return index2;
          }
          return void 0;
        });
      };
    }
  }

  // ../node_modules/react-markdown/lib/ast-to-react.js
  var import_react53 = __toESM(require_react(), 1);
  var import_react_is = __toESM(require_react_is2(), 1);

  // ../node_modules/hast-util-whitespace/index.js
  function whitespace(thing) {
    const value = (
      // @ts-expect-error looks like a node.
      thing && typeof thing === "object" && thing.type === "text" ? (
        // @ts-expect-error looks like a text.
        thing.value || ""
      ) : thing
    );
    return typeof value === "string" && value.replace(/[ \t\n\f\r]/g, "") === "";
  }

  // ../node_modules/space-separated-tokens/index.js
  function stringify(values2) {
    return values2.join(" ").trim();
  }

  // ../node_modules/comma-separated-tokens/index.js
  function stringify2(values2, options) {
    const settings = options || {};
    const input4 = values2[values2.length - 1] === "" ? [...values2, ""] : values2;
    return input4.join(
      (settings.padRight ? " " : "") + "," + (settings.padLeft === false ? "" : " ")
    ).trim();
  }

  // ../node_modules/style-to-object/index.mjs
  var import_index2 = __toESM(require_style_to_object(), 1);
  var style_to_object_default = import_index2.default;

  // ../node_modules/react-markdown/lib/ast-to-react.js
  var own6 = {}.hasOwnProperty;
  var tableElements = /* @__PURE__ */ new Set(["table", "thead", "tbody", "tfoot", "tr"]);
  function childrenToReact(context, node4) {
    const children = [];
    let childIndex = -1;
    let child;
    while (++childIndex < node4.children.length) {
      child = node4.children[childIndex];
      if (child.type === "element") {
        children.push(toReact(context, child, childIndex, node4));
      } else if (child.type === "text") {
        if (node4.type !== "element" || !tableElements.has(node4.tagName) || !whitespace(child)) {
          children.push(child.value);
        }
      } else if (child.type === "raw" && !context.options.skipHtml) {
        children.push(child.value);
      }
    }
    return children;
  }
  function toReact(context, node4, index2, parent) {
    const options = context.options;
    const transform2 = options.transformLinkUri === void 0 ? uriTransformer : options.transformLinkUri;
    const parentSchema = context.schema;
    const name = node4.tagName;
    const properties = {};
    let schema = parentSchema;
    let property;
    if (parentSchema.space === "html" && name === "svg") {
      schema = svg2;
      context.schema = schema;
    }
    if (node4.properties) {
      for (property in node4.properties) {
        if (own6.call(node4.properties, property)) {
          addProperty(properties, property, node4.properties[property], context);
        }
      }
    }
    if (name === "ol" || name === "ul") {
      context.listDepth++;
    }
    const children = childrenToReact(context, node4);
    if (name === "ol" || name === "ul") {
      context.listDepth--;
    }
    context.schema = parentSchema;
    const position4 = node4.position || {
      start: { line: null, column: null, offset: null },
      end: { line: null, column: null, offset: null }
    };
    const component = options.components && own6.call(options.components, name) ? options.components[name] : name;
    const basic = typeof component === "string" || component === import_react53.default.Fragment;
    if (!import_react_is.default.isValidElementType(component)) {
      throw new TypeError(
        `Component for name \`${name}\` not defined or is not renderable`
      );
    }
    properties.key = index2;
    if (name === "a" && options.linkTarget) {
      properties.target = typeof options.linkTarget === "function" ? options.linkTarget(
        String(properties.href || ""),
        node4.children,
        typeof properties.title === "string" ? properties.title : null
      ) : options.linkTarget;
    }
    if (name === "a" && transform2) {
      properties.href = transform2(
        String(properties.href || ""),
        node4.children,
        typeof properties.title === "string" ? properties.title : null
      );
    }
    if (!basic && name === "code" && parent.type === "element" && parent.tagName !== "pre") {
      properties.inline = true;
    }
    if (!basic && (name === "h1" || name === "h2" || name === "h3" || name === "h4" || name === "h5" || name === "h6")) {
      properties.level = Number.parseInt(name.charAt(1), 10);
    }
    if (name === "img" && options.transformImageUri) {
      properties.src = options.transformImageUri(
        String(properties.src || ""),
        String(properties.alt || ""),
        typeof properties.title === "string" ? properties.title : null
      );
    }
    if (!basic && name === "li" && parent.type === "element") {
      const input4 = getInputElement(node4);
      properties.checked = input4 && input4.properties ? Boolean(input4.properties.checked) : null;
      properties.index = getElementsBeforeCount(parent, node4);
      properties.ordered = parent.tagName === "ol";
    }
    if (!basic && (name === "ol" || name === "ul")) {
      properties.ordered = name === "ol";
      properties.depth = context.listDepth;
    }
    if (name === "td" || name === "th") {
      if (properties.align) {
        if (!properties.style)
          properties.style = {};
        properties.style.textAlign = properties.align;
        delete properties.align;
      }
      if (!basic) {
        properties.isHeader = name === "th";
      }
    }
    if (!basic && name === "tr" && parent.type === "element") {
      properties.isHeader = Boolean(parent.tagName === "thead");
    }
    if (options.sourcePos) {
      properties["data-sourcepos"] = flattenPosition(position4);
    }
    if (!basic && options.rawSourcePos) {
      properties.sourcePosition = node4.position;
    }
    if (!basic && options.includeElementIndex) {
      properties.index = getElementsBeforeCount(parent, node4);
      properties.siblingCount = getElementsBeforeCount(parent);
    }
    if (!basic) {
      properties.node = node4;
    }
    return children.length > 0 ? import_react53.default.createElement(component, properties, children) : import_react53.default.createElement(component, properties);
  }
  function getInputElement(node4) {
    let index2 = -1;
    while (++index2 < node4.children.length) {
      const child = node4.children[index2];
      if (child.type === "element" && child.tagName === "input") {
        return child;
      }
    }
    return null;
  }
  function getElementsBeforeCount(parent, node4) {
    let index2 = -1;
    let count = 0;
    while (++index2 < parent.children.length) {
      if (parent.children[index2] === node4)
        break;
      if (parent.children[index2].type === "element")
        count++;
    }
    return count;
  }
  function addProperty(props, prop, value, ctx) {
    const info = find2(ctx.schema, prop);
    let result = value;
    if (result === null || result === void 0 || result !== result) {
      return;
    }
    if (Array.isArray(result)) {
      result = info.commaSeparated ? stringify2(result) : stringify(result);
    }
    if (info.property === "style" && typeof result === "string") {
      result = parseStyle(result);
    }
    if (info.space && info.property) {
      props[own6.call(hastToReact, info.property) ? hastToReact[info.property] : info.property] = result;
    } else if (info.attribute) {
      props[info.attribute] = result;
    }
  }
  function parseStyle(value) {
    const result = {};
    try {
      style_to_object_default(value, iterator);
    } catch {
    }
    return result;
    function iterator(name, v2) {
      const k = name.slice(0, 4) === "-ms-" ? `ms-${name.slice(4)}` : name;
      result[k.replace(/-([a-z])/g, styleReplacer)] = v2;
    }
  }
  function styleReplacer(_2, $1) {
    return $1.toUpperCase();
  }
  function flattenPosition(pos) {
    return [
      pos.start.line,
      ":",
      pos.start.column,
      "-",
      pos.end.line,
      ":",
      pos.end.column
    ].map(String).join("");
  }

  // ../node_modules/react-markdown/lib/react-markdown.js
  var own7 = {}.hasOwnProperty;
  var changelog = "https://github.com/remarkjs/react-markdown/blob/main/changelog.md";
  var deprecated = {
    plugins: { to: "remarkPlugins", id: "change-plugins-to-remarkplugins" },
    renderers: { to: "components", id: "change-renderers-to-components" },
    astPlugins: { id: "remove-buggy-html-in-markdown-parser" },
    allowDangerousHtml: { id: "remove-buggy-html-in-markdown-parser" },
    escapeHtml: { id: "remove-buggy-html-in-markdown-parser" },
    source: { to: "children", id: "change-source-to-children" },
    allowNode: {
      to: "allowElement",
      id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    allowedTypes: {
      to: "allowedElements",
      id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    disallowedTypes: {
      to: "disallowedElements",
      id: "replace-allownode-allowedtypes-and-disallowedtypes"
    },
    includeNodeIndex: {
      to: "includeElementIndex",
      id: "change-includenodeindex-to-includeelementindex"
    }
  };
  function ReactMarkdown(options) {
    for (const key in deprecated) {
      if (own7.call(deprecated, key) && own7.call(options, key)) {
        const deprecation = deprecated[key];
        console.warn(
          `[react-markdown] Warning: please ${deprecation.to ? `use \`${deprecation.to}\` instead of` : "remove"} \`${key}\` (see <${changelog}#${deprecation.id}> for more info)`
        );
        delete deprecated[key];
      }
    }
    const processor = unified().use(remarkParse).use(options.remarkPlugins || []).use(lib_default, {
      ...options.remarkRehypeOptions,
      allowDangerousHtml: true
    }).use(options.rehypePlugins || []).use(rehypeFilter, options);
    const file = new VFile();
    if (typeof options.children === "string") {
      file.value = options.children;
    } else if (options.children !== void 0 && options.children !== null) {
      console.warn(
        `[react-markdown] Warning: please pass a string as \`children\` (not: \`${options.children}\`)`
      );
    }
    const hastNode = processor.runSync(processor.parse(file), file);
    if (hastNode.type !== "root") {
      throw new TypeError("Expected a `root` node");
    }
    let result = import_react54.default.createElement(
      import_react54.default.Fragment,
      {},
      childrenToReact({ options, schema: html3, listDepth: 0 }, hastNode)
    );
    if (options.className) {
      result = import_react54.default.createElement("div", { className: options.className }, result);
    }
    return result;
  }
  ReactMarkdown.propTypes = {
    // Core options:
    children: import_prop_types.default.string,
    // Layout options:
    className: import_prop_types.default.string,
    // Filter options:
    allowElement: import_prop_types.default.func,
    allowedElements: import_prop_types.default.arrayOf(import_prop_types.default.string),
    disallowedElements: import_prop_types.default.arrayOf(import_prop_types.default.string),
    unwrapDisallowed: import_prop_types.default.bool,
    // Plugin options:
    remarkPlugins: import_prop_types.default.arrayOf(
      import_prop_types.default.oneOfType([
        import_prop_types.default.object,
        import_prop_types.default.func,
        import_prop_types.default.arrayOf(
          import_prop_types.default.oneOfType([
            import_prop_types.default.bool,
            import_prop_types.default.string,
            import_prop_types.default.object,
            import_prop_types.default.func,
            import_prop_types.default.arrayOf(
              // prettier-ignore
              // type-coverage:ignore-next-line
              import_prop_types.default.any
            )
          ])
        )
      ])
    ),
    rehypePlugins: import_prop_types.default.arrayOf(
      import_prop_types.default.oneOfType([
        import_prop_types.default.object,
        import_prop_types.default.func,
        import_prop_types.default.arrayOf(
          import_prop_types.default.oneOfType([
            import_prop_types.default.bool,
            import_prop_types.default.string,
            import_prop_types.default.object,
            import_prop_types.default.func,
            import_prop_types.default.arrayOf(
              // prettier-ignore
              // type-coverage:ignore-next-line
              import_prop_types.default.any
            )
          ])
        )
      ])
    ),
    // Transform options:
    sourcePos: import_prop_types.default.bool,
    rawSourcePos: import_prop_types.default.bool,
    skipHtml: import_prop_types.default.bool,
    includeElementIndex: import_prop_types.default.bool,
    transformLinkUri: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.bool]),
    linkTarget: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.string]),
    transformImageUri: import_prop_types.default.func,
    components: import_prop_types.default.object
  };

  // src/pages/Chat/MessageList.tsx
  var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
  var messageColumns = [
    createTableColumn({
      columnId: "text"
    })
  ];
  var MessageList = ({ style }) => {
    const messagesEndRef = (0, import_react55.useRef)(null);
    const { inference, messages } = useProjectContext();
    (0, import_react55.useEffect)(() => {
      if (messagesEndRef.current) {
        messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
      }
    }, [messages, inference]);
    const {
      getRows,
      selection: {
        allRowsSelected,
        someRowsSelected,
        toggleAllRows,
        toggleRow,
        isRowSelected
      }
    } = useTableFeatures(
      {
        columns: messageColumns,
        items: messages
      },
      [
        useTableSelection({
          selectionMode: "multiselect",
          defaultSelectedItems: /* @__PURE__ */ new Set([])
        })
      ]
    );
    const rows = getRows((row) => {
      const selected = isRowSelected(row.rowId);
      return {
        ...row,
        onClick: (e2) => toggleRow(e2, row.rowId),
        onKeyDown: (e2) => {
          if (e2.key === " ") {
            e2.preventDefault();
            toggleRow(e2, row.rowId);
          }
        },
        selected,
        appearance: selected ? "brand" : "none"
      };
    });
    const toggleAllKeydown = React174.useCallback(
      (e2) => {
        if (e2.key === " ") {
          toggleAllRows(e2);
          e2.preventDefault();
        }
      },
      [toggleAllRows]
    );
    const tc = (item) => {
      if (item.segment.tokens.length === 0) {
        if (item.segment.startTime && item.segment.endTime) {
          return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", { children: item.segment.text });
        }
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ReactMarkdown, { children: item.text });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(import_jsx_runtime35.Fragment, { children: item.segment.tokens.map((t2, idx) => {
        if (/\[.*\]/.test(t2.text) || "<|endoftext|>" === t2.text) {
          return null;
        }
        const time = Number(t2.startTime) / 1e3;
        return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", { children: t2.text }, item.segment.startTime.toString() + t2.startTime.toString() + idx);
      }) });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(Table, { style, "aria-label": "Table with subtle selection", children: [
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(TableHeader, { children: /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(TableRow, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
          TableSelectionCell,
          {
            checked: allRowsSelected ? true : someRowsSelected ? "mixed" : false,
            onClick: toggleAllRows,
            onKeyDown: toggleAllKeydown,
            checkboxIndicator: { "aria-label": "Select all rows " }
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(TableHeaderCell, { children: "Message" })
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(TableBody, { style: { overflowY: "auto" }, children: [
        rows.map(({ item, selected, onClick, onKeyDown, appearance, rowId }) => /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
          TableRow,
          {
            onClick,
            onKeyDown,
            "aria-selected": selected,
            appearance,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
                TableSelectionCell,
                {
                  subtle: true,
                  checked: selected,
                  checkboxIndicator: { "aria-label": "Select row" }
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(TableCell, { children: tc(item) })
            ]
          },
          rowId
        )),
        inference !== "" && /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(TableRow, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
            TableSelectionCell,
            {
              subtle: true
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(TableCell, { children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ReactMarkdown, { children: inference }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("tr", { ref: messagesEndRef })
      ] })
    ] });
  };

  // src/components/Editor/MarkdownEditor.tsx
  var import_react58 = __toESM(require_react(), 1);

  // src/components/Editor/HoveringToolbar.tsx
  var import_react57 = __toESM(require_react(), 1);

  // ../node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i2 = 0; i2 < document.styleSheets.length; i2++) {
      if (document.styleSheets[i2].ownerNode === tag) {
        return document.styleSheets[i2];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate2(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (true) {
        var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
          console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
      }
      if (this.isSpeedy) {
        var sheet2 = sheetForTag(tag);
        try {
          sheet2.insertRule(rule, sheet2.cssRules.length);
        } catch (e2) {
          if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
            console.error('There was a problem inserting the following rule: "' + rule + '"', e2);
          }
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush2() {
      this.tags.forEach(function(tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
      if (true) {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };
    return StyleSheet2;
  }();

  // ../node_modules/@emotion/cache/node_modules/stylis/src/Enum.js
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";
  var LAYER = "@layer";

  // ../node_modules/@emotion/cache/node_modules/stylis/src/Utility.js
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign3 = Object.assign;
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search2) {
    return value.indexOf(search2);
  }
  function charat(value, index2) {
    return value.charCodeAt(index2) | 0;
  }
  function substr(value, begin, end2) {
    return value.slice(begin, end2);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array2) {
    return array2.push(value), value;
  }
  function combine(array2, callback) {
    return array2.map(callback).join("");
  }

  // ../node_modules/@emotion/cache/node_modules/stylis/src/Tokenizer.js
  var line = 1;
  var column = 1;
  var length = 0;
  var position3 = 0;
  var character = 0;
  var characters = "";
  function node2(value, root151, parent, type, props, children, length2) {
    return { value, root: root151, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root151, props) {
    return assign3(node2("", null, null, "", null, null, 0), root151, { length: -root151.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position3 > 0 ? charat(characters, --position3) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position3 < length ? charat(characters, position3++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position3);
  }
  function caret() {
    return position3;
  }
  function slice(begin, end2) {
    return substr(characters, begin, end2);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position3 = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position3 - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace2(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index2, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index2, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position3;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position3;
  }
  function commenter(type, index2) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index2, position3 - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index2) {
    while (!token(peek()))
      next();
    return slice(index2, position3);
  }

  // ../node_modules/@emotion/cache/node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse2("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse2(value, root151, parent, rule, rules2, rulesets, pseudo, points, declarations) {
    var index2 = 0;
    var offset = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous2 = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules2;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous2 = character2, character2 = next()) {
        case 40:
          if (previous2 != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace2(previous2);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root151, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index2++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset:
              if (ampersand == -1)
                characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference = ruleset(characters2, root151, parent, index2, offset, rules2, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset === 0)
                  parse2(characters2, root151, reference, reference, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse2(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules2, points, type, rules2, props = [], length2), children), rules2, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse2(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index2 = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous2;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous2 === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root151, parent, index2, offset, rules2, points, type, props, children, length2) {
    var post = offset - 1;
    var rule = offset === 0 ? rules2 : [""];
    var size = sizeof(rule);
    for (var i2 = 0, j3 = 0, k = 0; i2 < index2; ++i2)
      for (var x = 0, y2 = substr(value, post + 1, post = abs(j3 = points[i2])), z = value; x < size; ++x)
        if (z = trim(j3 > 0 ? rule[x] + " " + y2 : replace(y2, /&\f/g, rule[x])))
          props[k++] = z;
    return node2(value, root151, parent, offset === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root151, parent) {
    return node2(value, root151, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root151, parent, length2) {
    return node2(value, root151, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }

  // ../node_modules/@emotion/cache/node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i2 = 0; i2 < length2; i2++)
      output += callback(children[i2], i2, children, callback) || "";
    return output;
  }
  function stringify3(element2, index2, children, callback) {
    switch (element2.type) {
      case LAYER:
        if (element2.children.length)
          break;
      case IMPORT:
      case DECLARATION:
        return element2.return = element2.return || element2.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element2.return = element2.value + "{" + serialize(element2.children, callback) + "}";
      case RULESET:
        element2.value = element2.props.join(",");
    }
    return strlen(children = serialize(element2.children, callback)) ? element2.return = element2.value + "{" + children + "}" : "";
  }

  // ../node_modules/@emotion/cache/node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element2, index2, children, callback) {
      var output = "";
      for (var i2 = 0; i2 < length2; i2++)
        output += collection[i2](element2, index2, children, callback) || "";
      return output;
    };
  }

  // ../node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
    var previous2 = 0;
    var character2 = 0;
    while (true) {
      previous2 = character2;
      character2 = peek();
      if (previous2 === 38 && character2 === 12) {
        points[index2] = 1;
      }
      if (token(character2)) {
        break;
      }
      next();
    }
    return slice(begin, position3);
  };
  var toRules = function toRules2(parsed, points) {
    var index2 = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index2] = 1;
          }
          parsed[index2] += identifierWithPointTracking(position3 - 1, points, index2);
          break;
        case 2:
          parsed[index2] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index2] = peek() === 58 ? "&\f" : "";
            points[index2] = parsed[index2].length;
            break;
          }
        default:
          parsed[index2] += from(character2);
      }
    } while (character2 = next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element2) {
    if (element2.type !== "rule" || !element2.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element2.length < 1) {
      return;
    }
    var value = element2.value, parent = element2.parent;
    var isImplicitRule = element2.column === parent.column && element2.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent)
        return;
    }
    if (element2.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element2, true);
    var points = [];
    var rules2 = getRules(value, points);
    var parentRules = parent.props;
    for (var i2 = 0, k = 0; i2 < rules2.length; i2++) {
      for (var j3 = 0; j3 < parentRules.length; j3++, k++) {
        element2.props[k] = points[i2] ? rules2[i2].replace(/&\f/g, parentRules[j3]) : parentRules[j3] + " " + rules2[i2];
      }
    }
  };
  var removeLabel = function removeLabel2(element2) {
    if (element2.type === "decl") {
      var value = element2.value;
      if (
        // charcode for l
        value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98
      ) {
        element2["return"] = "";
        element2.value = "";
      }
    }
  };
  var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
  var isIgnoringComment = function isIgnoringComment2(element2) {
    return element2.type === "comm" && element2.children.indexOf(ignoreFlag) > -1;
  };
  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache3) {
    return function(element2, index2, children) {
      if (element2.type !== "rule" || cache3.compat)
        return;
      var unsafePseudoClasses = element2.value.match(/(:first|:nth|:nth-last)-child/g);
      if (unsafePseudoClasses) {
        var isNested = !!element2.parent;
        var commentContainer = isNested ? element2.parent.children : (
          // global rule at the root level
          children
        );
        for (var i2 = commentContainer.length - 1; i2 >= 0; i2--) {
          var node4 = commentContainer[i2];
          if (node4.line < element2.line) {
            break;
          }
          if (node4.column < element2.column) {
            if (isIgnoringComment(node4)) {
              return;
            }
            break;
          }
        }
        unsafePseudoClasses.forEach(function(unsafePseudoClass) {
          console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
        });
      }
    };
  };
  var isImportRule = function isImportRule2(element2) {
    return element2.type.charCodeAt(1) === 105 && element2.type.charCodeAt(0) === 64;
  };
  var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index2, children) {
    for (var i2 = index2 - 1; i2 >= 0; i2--) {
      if (!isImportRule(children[i2])) {
        return true;
      }
    }
    return false;
  };
  var nullifyElement = function nullifyElement2(element2) {
    element2.type = "";
    element2.value = "";
    element2["return"] = "";
    element2.children = "";
    element2.props = "";
  };
  var incorrectImportAlarm = function incorrectImportAlarm2(element2, index2, children) {
    if (!isImportRule(element2)) {
      return;
    }
    if (element2.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element2);
    } else if (isPrependedWithRegularRules(index2, children)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element2);
    }
  };
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length2 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var prefixer = function prefixer2(element2, index2, children, callback) {
    if (element2.length > -1) {
      if (!element2["return"])
        switch (element2.type) {
          case DECLARATION:
            element2["return"] = prefix(element2.value, element2.length);
            break;
          case KEYFRAMES:
            return serialize([copy(element2, {
              value: replace(element2.value, "@", "@" + WEBKIT)
            })], callback);
          case RULESET:
            if (element2.length)
              return combine(element2.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element2, {
                      props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                    })], callback);
                  case "::placeholder":
                    return serialize([copy(element2, {
                      props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                    }), copy(element2, {
                      props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                    }), copy(element2, {
                      props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                    })], callback);
                }
                return "";
              });
        }
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (!key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node4) {
        var dataEmotionAttribute = node4.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node4);
        node4.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    if (true) {
      if (/[^a-z-]/.test(key)) {
        throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
      }
    }
    var inserted = {};
    var container2;
    var nodesToHydrate = [];
    {
      container2 = options.container || document.head;
      Array.prototype.forEach.call(
        // this means we will ignore elements which don't have a space in them which
        // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
        function(node4) {
          var attrib = node4.getAttribute("data-emotion").split(" ");
          for (var i2 = 1; i2 < attrib.length; i2++) {
            inserted[attrib[i2]] = true;
          }
          nodesToHydrate.push(node4);
        }
      );
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (true) {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache3.compat;
        }
      }), incorrectImportAlarm);
    }
    {
      var currentSheet;
      var finalizingPlugins = [stringify3, true ? function(element2) {
        if (!element2.root) {
          if (element2["return"]) {
            currentSheet.insert(element2["return"]);
          } else if (element2.value && element2.type !== COMMENT) {
            currentSheet.insert(element2.value + "{}");
          }
        }
      } : rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis2 = function stylis3(styles2) {
        return serialize(compile(styles2), serializer);
      };
      _insert = function insert(selector, serialized, sheet2, shouldCache) {
        currentSheet = sheet2;
        if (serialized.map !== void 0) {
          currentSheet = {
            insert: function insert2(rule) {
              sheet2.insert(rule + serialized.map);
            }
          };
        }
        stylis2(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache3.inserted[serialized.name] = true;
        }
      };
    }
    var cache3 = {
      key,
      sheet: new StyleSheet({
        key,
        container: container2,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache3.sheet.hydrate(nodesToHydrate);
    return cache3;
  };

  // ../node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };

  // ../node_modules/@emotion/serialize/node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize2(fn) {
    var cache3 = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache3[arg] === void 0)
        cache3[arg] = fn(arg);
      return cache3[arg];
    };
  }

  // ../node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ memoize2(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match2, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  if (true) {
    contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
    contentValues = ["normal", "none", "initial", "inherit", "unset"];
    oldProcessStyleValue = processStyleValue;
    msPattern = /^-ms-/;
    hyphenPattern = /-(.)/g;
    hyphenatedCache = {};
    processStyleValue = function processStyleValue3(key, value) {
      if (key === "content") {
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
          throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
        }
      }
      var processed = oldProcessStyleValue(key, value);
      if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
          return _char.toUpperCase();
        }) + "?");
      }
      return processed;
    };
  }
  var contentValuePattern;
  var contentValues;
  var oldProcessStyleValue;
  var msPattern;
  var hyphenPattern;
  var hyphenatedCache;
  var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error(noComponentSelectorMessage);
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next2 = interpolation.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles2 = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles2 += interpolation.map;
          }
          return styles2;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string4 = "";
    if (Array.isArray(obj)) {
      for (var i2 = 0; i2 < obj.length; i2++) {
        string4 += handleInterpolation(mergedProps, registered, obj[i2]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string4 += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string4 += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string4 += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string4 += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string4 += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string4;
  }
  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  var sourceMapPattern;
  if (true) {
    sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
  }
  var cursor;
  var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles2 = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles2 += handleInterpolation(mergedProps, registered, strings);
    } else {
      if (strings[0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles2 += strings[0];
    }
    for (var i2 = 1; i2 < args.length; i2++) {
      styles2 += handleInterpolation(mergedProps, registered, args[i2]);
      if (stringMode) {
        if (strings[i2] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles2 += strings[i2];
      }
    }
    var sourceMap;
    if (true) {
      styles2 = styles2.replace(sourceMapPattern, function(match3) {
        sourceMap = match3;
        return "";
      });
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match2;
    while ((match2 = labelPattern.exec(styles2)) !== null) {
      identifierName += "-" + // $FlowFixMe we know it's not null
      match2[1];
    }
    var name = murmur2(styles2) + identifierName;
    if (true) {
      return {
        name,
        styles: styles2,
        map: sourceMap,
        next: cursor,
        toString: function toString2() {
          return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
      };
    }
    return {
      name,
      styles: styles2,
      next: cursor
    };
  };

  // ../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  var isBrowser2 = true;
  function getRegisteredStyles(registered, registeredStyles, classNames2) {
    var rawClassName = "";
    classNames2.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles2 = function registerStyles3(cache3, serialized, isStringTag) {
    var className = cache3.key + "-" + serialized.name;
    if (
      // we only need to add the styles to the registered cache if the
      // class name could be used further down
      // the tree but if it's a string tag, we know it won't
      // so we don't have to add it to registered cache.
      // this improves memory usage since we can avoid storing the whole style string
      (isStringTag === false || // we need to always store it if we're in compat mode and
      // in node since emotion-server relies on whether a style is in
      // the registered cache to know whether a style is global or not
      // also, note that this check will be dead code eliminated in the browser
      isBrowser2 === false) && cache3.registered[className] === void 0
    ) {
      cache3.registered[className] = serialized.styles;
    }
  };
  var insertStyles = function insertStyles2(cache3, serialized, isStringTag) {
    registerStyles2(cache3, serialized, isStringTag);
    var className = cache3.key + "-" + serialized.name;
    if (cache3.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        cache3.insert(serialized === current ? "." + className : "", current, cache3.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };

  // ../node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.esm.js
  function insertWithoutScoping(cache3, serialized) {
    if (cache3.inserted[serialized.name] === void 0) {
      return cache3.insert("", serialized, cache3.sheet, true);
    }
  }
  function merge3(registered, css3, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css3(registeredStyles);
  }
  var createEmotion = function createEmotion2(options) {
    var cache3 = createCache(options);
    cache3.sheet.speedy = function(value) {
      if (this.ctr !== 0) {
        throw new Error("speedy must be changed before any rules are inserted");
      }
      this.isSpeedy = value;
    };
    cache3.compat = true;
    var css3 = function css4() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var serialized = serializeStyles(args, cache3.registered, void 0);
      insertStyles(cache3, serialized, false);
      return cache3.key + "-" + serialized.name;
    };
    var keyframes3 = function keyframes4() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var serialized = serializeStyles(args, cache3.registered);
      var animation = "animation-" + serialized.name;
      insertWithoutScoping(cache3, {
        name: serialized.name,
        styles: "@keyframes " + animation + "{" + serialized.styles + "}"
      });
      return animation;
    };
    var injectGlobal2 = function injectGlobal3() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      var serialized = serializeStyles(args, cache3.registered);
      insertWithoutScoping(cache3, serialized);
    };
    var cx8 = function cx9() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return merge3(cache3.registered, css3, classnames(args));
    };
    return {
      css: css3,
      cx: cx8,
      injectGlobal: injectGlobal2,
      keyframes: keyframes3,
      hydrate: function hydrate2(ids) {
        ids.forEach(function(key) {
          cache3.inserted[key] = true;
        });
      },
      flush: function flush2() {
        cache3.registered = {};
        cache3.inserted = {};
        cache3.sheet.flush();
      },
      // $FlowFixMe
      sheet: cache3.sheet,
      cache: cache3,
      getRegisteredStyles: getRegisteredStyles.bind(null, cache3.registered),
      merge: merge3.bind(null, cache3.registered, css3)
    };
  };
  var classnames = function classnames2(args) {
    var cls = "";
    for (var i2 = 0; i2 < args.length; i2++) {
      var arg = args[i2];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            toAdd = "";
            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += " ");
                toAdd += k;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };

  // ../node_modules/@emotion/css/dist/emotion-css.esm.js
  var _createEmotion = createEmotion({
    key: "css"
  });
  var flush = _createEmotion.flush;
  var hydrate = _createEmotion.hydrate;
  var cx = _createEmotion.cx;
  var merge4 = _createEmotion.merge;
  var getRegisteredStyles2 = _createEmotion.getRegisteredStyles;
  var injectGlobal = _createEmotion.injectGlobal;
  var keyframes2 = _createEmotion.keyframes;
  var css2 = _createEmotion.css;
  var sheet = _createEmotion.sheet;
  var cache = _createEmotion.cache;

  // src/components/Editor/Components.tsx
  var import_react56 = __toESM(require_react(), 1);
  var import_react_dom = __toESM(require_react_dom(), 1);
  var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
  var Button4 = import_react56.default.forwardRef(
    ({
      className,
      active,
      reversed,
      ...props
    }, ref) => /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      "span",
      {
        ...props,
        ref,
        className: cx(
          className,
          css2`
          cursor: pointer;
          color: ${reversed ? active ? "white" : "#aaa" : active ? "black" : "#ccc"};
        `
        )
      }
    )
  );
  var EditorValue = import_react56.default.forwardRef(
    ({
      className,
      value,
      ...props
    }, ref) => {
      const textLines = value.document.nodes.map((node4) => node4.text).toArray().join("\n");
      return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(
        "div",
        {
          ref,
          ...props,
          className: cx(
            className,
            css2`
            margin: 30px -20px 0;
          `
          ),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
              "div",
              {
                className: css2`
            font-size: 14px;
            padding: 5px 20px;
            color: #404040;
            border-top: 2px solid #eeeeee;
            background: #f8f8f8;
          `,
                children: "Slate's value as text"
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
              "div",
              {
                className: css2`
            color: #404040;
            font: 12px monospace;
            white-space: pre-wrap;
            padding: 10px 20px;
            div {
              margin: 0 0 0.5em;
            }
          `,
                children: textLines
              }
            )
          ]
        }
      );
    }
  );
  var Icon4 = import_react56.default.forwardRef(
    ({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      "span",
      {
        ...props,
        ref,
        className: cx(
          "material-icons",
          className,
          css2`
          font-size: 18px;
          vertical-align: text-bottom;
        `
        )
      }
    )
  );
  var Instruction = import_react56.default.forwardRef(
    ({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      "div",
      {
        ...props,
        ref,
        className: cx(
          className,
          css2`
          white-space: pre-wrap;
          margin: 0 -20px 10px;
          padding: 10px 20px;
          font-size: 14px;
          background: #f8f8e8;
        `
        )
      }
    )
  );
  var Menu = import_react56.default.forwardRef(
    ({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      "div",
      {
        ...props,
        "data-test-id": "menu",
        ref,
        className: cx(
          className,
          css2`
          & > * {
            display: inline-block;
          }

          & > * + * {
            margin-left: 15px;
          }
        `
        )
      }
    )
  );
  var Toolbar = import_react56.default.forwardRef(
    ({ className, ...props }, ref) => /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
      Menu,
      {
        ...props,
        ref,
        className: cx(
          className,
          css2`
          position: relative;
          padding: 1px 18px 17px;
          margin: 0 -20px;
          border-bottom: 2px solid #eee;
          margin-bottom: 20px;
        `
        )
      }
    )
  );

  // src/components/Editor/HoveringToolbar.tsx
  var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);

  // src/components/Editor/MarkdownEditor.tsx
  var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);

  // src/components/AudioPlayer.tsx
  var import_react59 = __toESM(require_react(), 1);
  var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);

  // src/pages/Chat/Window.tsx
  var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
  var MessageWindow = ({}) => {
    const [inputValue, setInputValue] = (0, import_react60.useState)("");
    const { loading, messages, setMessages, session, inferFromMessages } = useProjectContext();
    const handleSend = () => {
      if (inputValue && inputValue.trim() !== "") {
        setInputValue("");
        inferFromMessages(inputValue);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(Stack, { styles: { root: { height: "100vh" } }, verticalFill: true, children: [
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Stack.Item, { grow: true, styles: { root: { overflowY: "auto" } }, children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(MessageList, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Stack.Item, { grow: true, disableShrink: true, children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)(
        Stack,
        {
          horizontal: true,
          verticalAlign: "end",
          horizontalAlign: "center",
          styles: { root: { width: "100%", gap: 15, marginBottom: 20, relative: true } },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(
              TextField,
              {
                placeholder: "Type a message...",
                value: inputValue,
                onChange: (e2, newValue) => setInputValue(newValue),
                onKeyPress: (e2) => {
                  if (e2.key === "Enter") {
                    handleSend();
                  }
                },
                underlined: true,
                styles: { root: { width: "100%" } }
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(PrimaryButton, { text: "Send", onClick: handleSend })
          ]
        }
      ) })
    ] });
  };

  // src/pages/Chat/Chat.tsx
  var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
  var ChatPage = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(Stack, { horizontal: true, styles: { root: { height: "100%", gap: 15, width: "100%" } }, children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Stack.Item, { styles: { root: { borderRight: "1px solid #e1e1e1", padding: 10, width: "20%" } }, children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Sidebar, {}) }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Stack.Item, { styles: { root: { width: "80%" } }, children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(FileDrop, { children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(MessageWindow, {}) }) })
    ] });
  };

  // src/pages/index.tsx
  var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
  function Home2() {
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("main", { children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(ChatPage, {}) });
  }

  // src/App.tsx
  var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
  initializeIcons20();
  var AppRoutes = () => {
    const commonRoutes = [{
      path: "/studio",
      element: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Home2, {})
    }];
    const element2 = useRoutes([...commonRoutes]);
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(import_jsx_runtime43.Fragment, { children: element2 });
  };
  function App() {
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(FluentProvider, { theme: webDarkTheme, children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
      ErrorBoundary,
      {
        FallbackComponent: FallbackError,
        children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(HotkeysProvider, { initiallyActiveScopes: ["editor"], children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)(ProjectProvider, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(BrowserRouter, { children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(ProjectProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(AppRoutes, {}) }) }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Ie, {})
        ] }) })
      }
    ) });
  }

  // ../node_modules/source-map-support/register.js
  require_source_map_support().install();

  // ../node_modules/@fluentui/styles/dist/es/callable.js
  var callable = function callable2(possibleFunction) {
    return function() {
      return typeof possibleFunction === "function" ? possibleFunction.apply(void 0, arguments) : possibleFunction;
    };
  };

  // ../node_modules/@fluentui/styles/dist/es/debugEnabled.js
  var isDebugEnabled = function isDebugEnabled2() {
    var enabled = false;
    if (true) {
      try {
        var fluentUIDebugEnabled = !!window.localStorage.fluentUIDebug;
        if (true) {
          if (fluentUIDebugEnabled) {
            console.warn(["@fluentui/react-northstar:", "CSSinJS Debug data collection is enabled.", "To remove this override paste `delete window.localStorage.fluentUIDebug` to your browser console and reload the page."].join(" "));
          } else {
            console.warn(["@fluentui/react-northstar:", "CSSinJS Debug data collection is disabled.", "To enable data collection paste `window.localStorage.fluentUIDebug = true` to your browser console and reload the page."].join(" "));
          }
        }
        enabled = fluentUIDebugEnabled;
      } catch (_unused) {
      }
    }
    return enabled;
  };
  var isEnabled = isDebugEnabled();

  // ../node_modules/@fluentui/styles/dist/es/withDebugId.js
  var withDebugId = false ? function(data, debugId) {
    return data;
  } : function(data, debugId) {
    if (!isEnabled || debugId === void 0) {
      return data;
    }
    if (typeof data === "object" && data !== null) {
      if (!Object.prototype.hasOwnProperty.call(data, "_debugId")) {
        var copy2 = Object.assign({}, data);
        Object.defineProperty(copy2, "_debugId", {
          value: debugId,
          writable: false,
          enumerable: false
        });
        return copy2;
      }
    }
    if (typeof data === "function") {
      return function() {
        var result = data.apply(void 0, arguments);
        return withDebugId(result, debugId);
      };
    }
    return data;
  };

  // ../node_modules/@fluentui/styles/dist/es/createTheme.js
  var createTheme2 = function createTheme3(themeInput, debugId) {
    return withDebugId(themeInput, debugId);
  };

  // ../node_modules/@fluentui/styles/dist/es/deepmerge.js
  var isObject2 = function isObject3(o2) {
    return o2 !== null && typeof o2 === "object" && !Array.isArray(o2);
  };
  var isValid = function isValid2(k) {
    return k !== "__proto__" && k !== "prototype" && k !== "constructor";
  };
  var deepmerge = function deepmerge2() {
    var inner = function inner2(target, source) {
      Object.keys(source).forEach(function(k) {
        if (isValid(k)) {
          if (isObject2(source[k])) {
            if (!isObject2(target[k])) {
              target[k] = {};
            }
            inner2(target[k], source[k]);
          } else {
            target[k] = source[k];
          }
        }
      });
      return target;
    };
    for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
      sources[_key] = arguments[_key];
    }
    return sources.filter(Boolean).reduce(function(acc, src) {
      return inner(acc, src);
    }, {});
  };

  // ../node_modules/@fluentui/styles/dist/es/mergeThemes.js
  var import_forEach = __toESM(require_forEach());
  var import_keys2 = __toESM(require_keys());
  var import_map = __toESM(require_map());
  var import_union = __toESM(require_union());
  var import_merge3 = __toESM(require_merge());

  // ../node_modules/@fluentui/styles/dist/es/objectKeysToValues.js
  var isObject4 = function isObject5(o2) {
    return o2 !== null && typeof o2 === "object" && !Array.isArray(o2);
  };
  var objectKeyToValues = function objectKeyToValues2(input4, formatter) {
    if (formatter === void 0) {
      formatter = function formatter2(input5) {
        return input5;
      };
    }
    if (!isObject4(input4)) {
      return input4;
    }
    var inner = function inner2(result, obj, prefix2) {
      Object.keys(obj).forEach(function(k) {
        if (isObject4(obj[k])) {
          result[k] = {};
          inner2(result[k], obj[k], "" + prefix2 + k + ".");
        } else {
          result[k] = formatter("" + prefix2 + k);
        }
      });
      return result;
    };
    return inner({}, input4, "");
  };

  // ../node_modules/@fluentui/styles/dist/es/mergeThemes.js
  var _excluded4 = ["_debug"];
  var _excluded22 = ["_debug"];
  var _excluded32 = ["_debug"];
  var _excluded42 = ["_debug"];
  var _excluded5 = ["_debug"];
  var _excluded6 = ["_debug", "_debugId"];
  var _excluded7 = ["_debug"];
  var _excluded8 = ["_debug", "_invertedKeys", "_debugId"];
  var emptyTheme = {
    siteVariables: {
      fontSizes: {}
    },
    componentVariables: {},
    componentStyles: {},
    fontFaces: [],
    staticStyles: [],
    animations: {}
  };
  var mergeComponentStyles__PROD = function mergeComponentStyles__PROD2(stylesA, stylesB) {
    var result = {};
    if (stylesA) {
      Object.keys(stylesA).forEach(function(partName) {
        var slotA = stylesA[partName];
        var slotB = stylesB == null ? void 0 : stylesB[partName];
        if (typeof slotA === "undefined" || slotA === null) {
          return;
        }
        if (typeof slotB === "undefined" || slotB === null) {
          result[partName] = typeof slotA === "function" ? slotA : function() {
            return slotA;
          };
          return;
        }
        if (slotA === slotB) {
          result[partName] = typeof slotA === "function" ? slotA : function() {
            return slotA;
          };
        }
      });
    }
    if (stylesB) {
      Object.keys(stylesB).forEach(function(partName) {
        var slotA = stylesA == null ? void 0 : stylesA[partName];
        var slotB = stylesB[partName];
        if (typeof slotB === "undefined" || slotB === null) {
          return;
        }
        if (typeof slotA === "undefined" || slotA === null) {
          result[partName] = typeof slotB === "function" ? slotB : function() {
            return slotB;
          };
          return;
        }
        if (slotA === slotB) {
          return;
        }
        result[partName] = function mergedStyleFunction(styleParam) {
          return (0, import_merge3.default)(typeof slotA === "function" ? slotA(styleParam) : slotA, typeof slotB === "function" ? slotB(styleParam) : slotB);
        };
      });
    }
    return result;
  };
  var mergeComponentStyles__DEV = function mergeComponentStyles__DEV2(stylesA, stylesB) {
    if (!isEnabled) {
      return mergeComponentStyles__PROD(stylesA, stylesB);
    }
    var mergedKeys = [].concat(stylesA ? Object.keys(stylesA) : [], stylesB ? Object.keys(stylesB) : []);
    var result = {};
    mergedKeys.forEach(function(slotName) {
      var slotA = function slotA2(styleParam) {
        var _ref = callable(stylesA == null ? void 0 : stylesA[slotName])(styleParam) || {}, _ref$_debug = _ref._debug, _debug = _ref$_debug === void 0 ? void 0 : _ref$_debug, styles2 = _objectWithoutPropertiesLoose(_ref, _excluded4);
        return Object.assign({}, styles2, {
          _debug: _debug || [{
            styles: Object.assign({}, styles2),
            debugId: stylesA == null ? void 0 : stylesA._debugId
          }]
        });
      };
      var slotB = function slotB2(styleParam) {
        var _ref2 = callable(stylesB == null ? void 0 : stylesB[slotName])(styleParam) || {}, _ref2$_debug = _ref2._debug, _debug = _ref2$_debug === void 0 ? void 0 : _ref2$_debug, styles2 = _objectWithoutPropertiesLoose(_ref2, _excluded22);
        return Object.assign({}, styles2, {
          _debug: _debug || [{
            styles: Object.assign({}, styles2),
            debugId: stylesB == null ? void 0 : stylesB._debugId
          }]
        });
      };
      if (stylesA != null && stylesA[slotName] && stylesB != null && stylesB[slotName]) {
        result[slotName] = function(styleParam) {
          var _slotA = slotA(styleParam), debugA = _slotA._debug, resolvedStylesA = _objectWithoutPropertiesLoose(_slotA, _excluded32);
          var _slotB = slotB(styleParam), debugB = _slotB._debug, resolvedStylesB = _objectWithoutPropertiesLoose(_slotB, _excluded42);
          var merged = (0, import_merge3.default)(resolvedStylesA, resolvedStylesB);
          merged._debug = debugA.concat(debugB || {
            styles: resolvedStylesB,
            debugId: resolvedStylesB._debugId
          });
          return merged;
        };
      } else if (stylesA != null && stylesA[slotName]) {
        result[slotName] = slotA;
      } else if (stylesB != null && stylesB[slotName]) {
        result[slotName] = slotB;
      }
    });
    return result;
  };
  var mergeComponentStyles = false ? mergeComponentStyles__PROD : mergeComponentStyles__DEV;
  var mergeComponentVariables__PROD = function mergeComponentVariables__PROD2(variablesA, variablesB) {
    if (variablesA && variablesB) {
      return function mergedComponentVariables(siteVariables) {
        var resolvedVariablesA = typeof variablesA === "function" ? variablesA(siteVariables) : variablesA || {};
        var resolvedVariablesB = typeof variablesB === "function" ? variablesB(siteVariables) : variablesB || {};
        return deepmerge(resolvedVariablesA, resolvedVariablesB);
      };
    }
    if (variablesA) {
      return typeof variablesA === "function" ? variablesA : function() {
        return variablesA || {};
      };
    }
    if (variablesB) {
      return typeof variablesB === "function" ? variablesB : function() {
        return variablesB || {};
      };
    }
    return function() {
      return {};
    };
  };
  var mergeComponentVariables__DEV = function mergeComponentVariables__DEV2(variablesA, variablesB) {
    if (!isEnabled) {
      return mergeComponentVariables__PROD(variablesA, variablesB);
    }
    var initial = function initial2() {
      return {};
    };
    return [variablesA, variablesB].reduce(function(acc, next2) {
      return function(siteVariables) {
        var _acc = acc(siteVariables), _acc$_debug = _acc._debug, _debug = _acc$_debug === void 0 ? [] : _acc$_debug, accumulatedVariables = _objectWithoutPropertiesLoose(_acc, _excluded5);
        var _ref3 = callable(next2)(siteVariables) || {}, _ref3$_debug = _ref3._debug, computedDebug = _ref3$_debug === void 0 ? void 0 : _ref3$_debug, _ref3$_debugId = _ref3._debugId, _debugId = _ref3$_debugId === void 0 ? void 0 : _ref3$_debugId, computedComponentVariables = _objectWithoutPropertiesLoose(_ref3, _excluded6);
        var merged = deepmerge(accumulatedVariables, computedComponentVariables);
        merged._debug = _debug.concat(computedDebug || {
          resolved: computedComponentVariables,
          debugId: _debugId,
          input: siteVariables ? siteVariables._invertedKeys && callable(next2)(siteVariables._invertedKeys) : callable(next2)()
        });
        return merged;
      };
    }, initial);
  };
  var mergeComponentVariables = false ? mergeComponentVariables__PROD : mergeComponentVariables__DEV;
  var mergeSiteVariables__PROD = function mergeSiteVariables__PROD2(siteVariablesA, siteVariablesB) {
    var initial = {
      fontSizes: {}
    };
    if (siteVariablesA && siteVariablesB) {
      return deepmerge(initial, siteVariablesA, siteVariablesB);
    }
    if (siteVariablesA) {
      return Object.assign({}, initial, siteVariablesA);
    }
    return Object.assign({}, initial, siteVariablesB);
  };
  var mergeSiteVariables__DEV = function mergeSiteVariables__DEV2(siteVariablesA, siteVariablesB) {
    if (!isEnabled) {
      return mergeSiteVariables__PROD(siteVariablesA, siteVariablesB);
    }
    var initial = {
      fontSizes: {}
    };
    return [siteVariablesA, siteVariablesB].reduce(function(acc, next2) {
      var _acc$_debug2 = acc._debug, _debug = _acc$_debug2 === void 0 ? [] : _acc$_debug2, accumulatedSiteVariables = _objectWithoutPropertiesLoose(acc, _excluded7);
      var _ref4 = next2 || {}, _ref4$_debug = _ref4._debug, computedDebug = _ref4$_debug === void 0 ? void 0 : _ref4$_debug, _ref4$_invertedKeys = _ref4._invertedKeys, _invertedKeys = _ref4$_invertedKeys === void 0 ? void 0 : _ref4$_invertedKeys, _ref4$_debugId = _ref4._debugId, _debugId = _ref4$_debugId === void 0 ? void 0 : _ref4$_debugId, nextSiteVariables = _objectWithoutPropertiesLoose(_ref4, _excluded8);
      var merged = deepmerge(Object.assign({}, accumulatedSiteVariables, {
        _invertedKeys: void 0
      }), nextSiteVariables);
      merged._debug = _debug.concat(computedDebug || {
        resolved: nextSiteVariables,
        debugId: _debugId
      });
      merged._invertedKeys = _invertedKeys || objectKeyToValues(merged, function(key) {
        return "siteVariables." + key;
      });
      return merged;
    }, initial);
  };
  var mergeSiteVariables = false ? mergeSiteVariables__PROD : mergeSiteVariables__DEV;
  var mergeThemeVariables__PROD = function mergeThemeVariables__PROD2(themeComponentVariablesA, themeComponentVariablesB) {
    if (themeComponentVariablesA && themeComponentVariablesB) {
      var displayNames = import_union.default.apply(void 0, (0, import_map.default)([themeComponentVariablesA, themeComponentVariablesB], import_keys2.default));
      return displayNames.reduce(function(componentVariables, displayName) {
        componentVariables[displayName] = mergeComponentVariables(themeComponentVariablesA[displayName], themeComponentVariablesB[displayName]);
        return componentVariables;
      }, {});
    }
    if (themeComponentVariablesA) {
      return Object.fromEntries(Object.entries(themeComponentVariablesA).map(function(_ref5) {
        var displayName = _ref5[0], variables = _ref5[1];
        return [displayName, mergeComponentVariables(void 0, variables)];
      }));
    }
    if (themeComponentVariablesB) {
      return Object.fromEntries(Object.entries(themeComponentVariablesB).map(function(_ref6) {
        var displayName = _ref6[0], variables = _ref6[1];
        return [displayName, mergeComponentVariables(void 0, variables)];
      }));
    }
    return {};
  };
  var mergeThemeVariables__DEV = function mergeThemeVariables__DEV2(themeComponentVariablesA, themeComponentVariablesB) {
    if (!isEnabled) {
      return mergeThemeVariables__PROD(themeComponentVariablesA, themeComponentVariablesB);
    }
    var displayNames = import_union.default.apply(void 0, (0, import_map.default)([themeComponentVariablesA, themeComponentVariablesB], import_keys2.default));
    return displayNames.reduce(function(componentVariables, displayName) {
      componentVariables[displayName] = mergeComponentVariables(themeComponentVariablesA && withDebugId(themeComponentVariablesA[displayName], themeComponentVariablesA._debugId), themeComponentVariablesB && withDebugId(themeComponentVariablesB[displayName], themeComponentVariablesB._debugId));
      return componentVariables;
    }, {});
  };
  var mergeThemeVariables = false ? mergeThemeVariables__PROD : mergeThemeVariables__DEV;
  var mergeThemeStyles__PROD = function mergeThemeStyles__PROD2(themeComponentStylesA, themeComponentStylesB) {
    if (themeComponentStylesA && themeComponentStylesB) {
      var displayNames = import_union.default.apply(void 0, (0, import_map.default)([themeComponentStylesA, themeComponentStylesB], import_keys2.default));
      return displayNames.reduce(function(themeComponentStyles, displayName) {
        themeComponentStyles[displayName] = mergeComponentStyles(themeComponentStylesA[displayName], themeComponentStylesB[displayName]);
        return themeComponentStyles;
      }, {});
    }
    if (themeComponentStylesA) {
      return Object.fromEntries(Object.entries(themeComponentStylesA).map(function(_ref7) {
        var displayName = _ref7[0], styles2 = _ref7[1];
        return [displayName, mergeComponentStyles(void 0, styles2)];
      }));
    }
    if (themeComponentStylesB) {
      return Object.fromEntries(Object.entries(themeComponentStylesB).map(function(_ref8) {
        var displayName = _ref8[0], styles2 = _ref8[1];
        return [displayName, mergeComponentStyles(void 0, styles2)];
      }));
    }
    return {};
  };
  var mergeThemeStyles__DEV = function mergeThemeStyles__DEV2(componentStylesA, componentStylesB) {
    if (!isEnabled) {
      return mergeThemeStyles__PROD(componentStylesA, componentStylesB);
    }
    var initial = {};
    return [componentStylesA, componentStylesB].reduce(function(themeComponentStyles, next2) {
      (0, import_forEach.default)(next2, function(stylesByPart, displayName) {
        themeComponentStyles[displayName] = mergeComponentStyles(themeComponentStyles[displayName], withDebugId(stylesByPart, next2._debugId));
      });
      return themeComponentStyles;
    }, initial);
  };
  var mergeThemeStyles = false ? mergeThemeStyles__PROD : mergeThemeStyles__DEV;
  var mergeFontFaces = function mergeFontFaces2(fontFacesA, fontFacesB) {
    return [].concat(fontFacesA || [], fontFacesB || []);
  };
  var mergeStaticStyles = function mergeStaticStyles2(staticStylesA, staticStylesB) {
    return [].concat(staticStylesA || [], staticStylesB || []);
  };
  var mergeAnimations = function mergeAnimations2(animationsA, animationsB) {
    return Object.assign({}, animationsA, animationsB);
  };
  var mergeThemes2 = function mergeThemes3(themeA, themeB) {
    var debugIdA = themeA == null ? void 0 : themeA["_debugId"];
    var debugIdB = themeB == null ? void 0 : themeB["_debugId"];
    if (themeA && themeB) {
      return {
        animations: mergeAnimations(themeA.animations, themeB.animations),
        componentVariables: mergeThemeVariables(withDebugId(themeA.componentVariables, debugIdA), withDebugId(themeB.componentVariables, debugIdB)),
        componentStyles: mergeThemeStyles(withDebugId(themeA.componentStyles, debugIdA), withDebugId(themeB.componentStyles, debugIdB)),
        fontFaces: mergeFontFaces(themeA.fontFaces, themeB.fontFaces),
        siteVariables: mergeSiteVariables(withDebugId(themeA.siteVariables, debugIdA), withDebugId(themeB.siteVariables, debugIdB)),
        staticStyles: mergeStaticStyles(themeA.staticStyles, themeB.staticStyles)
      };
    }
    if (themeA) {
      return {
        animations: mergeAnimations(void 0, themeA.animations),
        componentVariables: mergeThemeVariables(void 0, withDebugId(themeA.componentVariables, debugIdA)),
        componentStyles: mergeThemeStyles(void 0, withDebugId(themeA.componentStyles, debugIdA)),
        fontFaces: mergeFontFaces(void 0, themeA.fontFaces),
        siteVariables: mergeSiteVariables(void 0, withDebugId(themeA.siteVariables, debugIdA)),
        staticStyles: mergeStaticStyles(void 0, themeA.staticStyles)
      };
    }
    if (themeB) {
      return {
        animations: mergeAnimations(void 0, themeB.animations),
        componentVariables: mergeThemeVariables(void 0, withDebugId(themeB.componentVariables, debugIdB)),
        componentStyles: mergeThemeStyles(void 0, withDebugId(themeB.componentStyles, debugIdB)),
        fontFaces: mergeFontFaces(void 0, themeB.fontFaces),
        siteVariables: mergeSiteVariables(void 0, withDebugId(themeB.siteVariables, debugIdB)),
        staticStyles: mergeStaticStyles(void 0, themeB.staticStyles)
      };
    }
    return Object.assign({}, emptyTheme);
  };

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/utils/getElementType.js
  function getElementType(props) {
    return props.as || "div";
  }

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/utils/getUnhandledProps.js
  function getUnhandledProps(handledProps, props) {
    return Object.keys(props).reduce(function(acc, prop) {
      if (handledProps.indexOf(prop) === -1)
        acc[prop] = props[prop];
      return acc;
    }, {});
  }

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/hooks/useIsomorphicLayoutEffect.js
  var React180 = __toESM(require_react());
  var useIsomorphicLayoutEffect4 = typeof window !== "undefined" && true ? React180.useLayoutEffect : React180.useEffect;

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-northstar-styles-renderer/dist/es/noopRenderer.js
  var React181 = __toESM(require_react());
  var NoopProvider = function NoopProvider2(props) {
    return /* @__PURE__ */ React181.createElement(React181.Fragment, null, props.children);
  };
  var noopRenderer = {
    registerUsage: function registerUsage() {
    },
    unregisterUsage: function unregisterUsage() {
    },
    renderFont: function renderFont() {
    },
    renderGlobal: function renderGlobal() {
    },
    renderRule: function renderRule() {
      return "";
    },
    Provider: NoopProvider
  };

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/context.js
  var React182 = __toESM(require_react());
  var defaultPerformanceFlags = {
    enableSanitizeCssPlugin: true,
    enableStylesCaching: true,
    enableVariablesCaching: true,
    enableBooleanVariablesCaching: false
  };
  var defaultContextValue3 = {
    // A default value for `rtl` is undefined to let compute `Provider` a proper one
    rtl: void 0,
    disableAnimations: false,
    performance: defaultPerformanceFlags,
    renderer: noopRenderer,
    theme: emptyTheme,
    telemetry: void 0,
    target: void 0
  };
  var FluentContext = /* @__PURE__ */ React182.createContext(defaultContextValue3);
  function useFluentContext() {
    return React182.useContext(FluentContext);
  }
  var Unstable_FluentContextProvider = FluentContext.Provider;

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/styles/getStyles.js
  var import_isEmpty = __toESM(require_isEmpty());
  var import_filter = __toESM(require_filter());

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/styles/resolveVariables.js
  var variablesCache = /* @__PURE__ */ new WeakMap();
  var resolveVariables = function resolveVariables2(displayNames, theme, variables, enabledVariablesCaching) {
    var componentThemeVariables;
    var effectiveDisplayNames = displayNames.filter(function(displayName) {
      return !!theme.componentVariables[displayName];
    });
    if (enabledVariablesCaching) {
      if (!variablesCache.has(theme)) {
        variablesCache.set(theme, {});
      }
      var variablesThemeCache = variablesCache.get(theme) || {};
      var handlingDisplayName = effectiveDisplayNames[effectiveDisplayNames.length - 1];
      if (!variablesThemeCache[handlingDisplayName]) {
        if (effectiveDisplayNames.length === 1) {
          variablesThemeCache[handlingDisplayName] = callable(theme.componentVariables[handlingDisplayName])(theme.siteVariables);
        } else {
          variablesThemeCache[handlingDisplayName] = effectiveDisplayNames.reduce(function(acc, displayName) {
            return mergeComponentVariables(acc, theme.componentVariables[displayName]);
          }, function() {
            return {};
          })(theme.siteVariables);
        }
        variablesCache.set(theme, variablesThemeCache);
      }
      componentThemeVariables = variablesThemeCache[handlingDisplayName];
    } else if (effectiveDisplayNames.length === 1) {
      componentThemeVariables = callable(theme.componentVariables[effectiveDisplayNames[0]])(theme.siteVariables) || {};
    } else {
      componentThemeVariables = effectiveDisplayNames.reduce(function(acc, displayName) {
        return mergeComponentVariables(acc, theme.componentVariables[displayName]);
      }, function() {
        return {};
      })(theme.siteVariables);
    }
    if (variables === void 0) {
      return componentThemeVariables;
    }
    return mergeComponentVariables(componentThemeVariables, withDebugId(variables, "props.variables"))(theme.siteVariables);
  };

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/styles/resolveStyles.js
  var import_isNil = __toESM(require_isNil());
  var import_isPlainObject = __toESM(require_isPlainObject());
  var import_classnames = __toESM(require_classnames());
  var classesCache = /* @__PURE__ */ new WeakMap();
  var stylesCache = /* @__PURE__ */ new WeakMap();
  var resolveStyles = function resolveStyles2(options, resolvedVariables) {
    var allDisplayNames = options.allDisplayNames, componentClassName = options.className, theme = options.theme, primaryDisplayName = options.primaryDisplayName, componentProps = options.componentProps, inlineStylesProps = options.inlineStylesProps, rtl2 = options.rtl, disableAnimations = options.disableAnimations, renderer = options.renderer, performanceFlags = options.performance, telemetry = options.telemetry;
    var className = inlineStylesProps.className, design = inlineStylesProps.design, styles2 = inlineStylesProps.styles, variables = inlineStylesProps.variables;
    var noInlineStylesOverrides = !(design || styles2);
    var noVariableOverrides = performanceFlags.enableBooleanVariablesCaching || !variables;
    if (true) {
      if (!performanceFlags.enableStylesCaching && performanceFlags.enableBooleanVariablesCaching) {
        throw new Error('@fluentui/react-northstar: Please check your "performance" settings on "Provider", to enable "enableBooleanVariablesCaching" you need to enable "enableStylesCaching"');
      }
    }
    if (performanceFlags.enableBooleanVariablesCaching) {
      if ((0, import_isPlainObject.default)(variables)) {
        var hasOnlyBooleanVariables = Object.keys(variables).every(function(variableName) {
          return variables[variableName] === null || typeof variables[variableName] === "undefined" || typeof variables[variableName] === "boolean";
        });
        if (!hasOnlyBooleanVariables) {
          noVariableOverrides = false;
        }
      } else if (!(0, import_isNil.default)(variables)) {
        noVariableOverrides = false;
      }
    }
    var cacheEnabled = performanceFlags.enableStylesCaching && noInlineStylesOverrides && noVariableOverrides;
    var mergedStyles;
    if (allDisplayNames.length === 1) {
      mergedStyles = theme.componentStyles[allDisplayNames[0]] || {
        root: function root151() {
          return {};
        }
      };
    } else {
      var _styles = allDisplayNames.map(function(displayName) {
        return theme.componentStyles[displayName];
      }).filter(Boolean);
      if (_styles.length > 0) {
        mergedStyles = _styles.reduce(function(acc, styles3) {
          return mergeComponentStyles(acc, styles3);
        }, {});
      } else {
        mergedStyles = {
          root: function root151() {
            return {};
          }
        };
      }
    }
    if (!noInlineStylesOverrides) {
      mergedStyles = mergeComponentStyles(mergedStyles, mergeComponentStyles(design && withDebugId({
        root: design
      }, "props.design"), styles2 && withDebugId({
        root: styles2
      }, "props.styles")));
    }
    var styleParam = {
      props: componentProps,
      variables: resolvedVariables,
      theme,
      rtl: rtl2,
      disableAnimations
    };
    var rendererParam = {
      direction: rtl2 ? "rtl" : "ltr",
      disableAnimations,
      displayName: allDisplayNames.join(":"),
      // does not affect styles, only used by useEnhancedRenderer in docs
      sanitizeCss: performanceFlags.enableSanitizeCssPlugin
    };
    var resolvedStylesDebug = {};
    if (cacheEnabled && theme) {
      if (!stylesCache.has(theme)) {
        stylesCache.set(theme, {});
      }
      if (!classesCache.has(theme)) {
        classesCache.set(theme, {});
      }
    }
    var propsCacheKey = cacheEnabled ? JSON.stringify(componentProps) : "";
    var variablesCacheKey = cacheEnabled && performanceFlags.enableBooleanVariablesCaching ? JSON.stringify(variables) : "";
    var componentCacheKey = cacheEnabled ? allDisplayNames.join(":") + ":" + propsCacheKey + ":" + variablesCacheKey + ":" + styleParam.rtl + styleParam.disableAnimations : "";
    if (typeof Proxy === "undefined") {
      var _resolvedStyles = {};
      var _classes = {};
      Object.keys(mergedStyles).forEach(function(slotName) {
        var lazyEvaluationKey = slotName + "__return";
        var slotCacheKey = componentCacheKey + slotName;
        Object.defineProperty(_resolvedStyles, slotName, {
          enumerable: false,
          configurable: false,
          set: function set(val) {
            if (cacheEnabled && theme) {
              var _Object$assign;
              stylesCache.set(theme, Object.assign({}, stylesCache.get(theme), (_Object$assign = {}, _Object$assign[slotCacheKey] = val, _Object$assign)));
            }
            _resolvedStyles[lazyEvaluationKey] = val;
          },
          get: function get() {
            if (cacheEnabled && theme) {
              var stylesThemeCache = stylesCache.get(theme) || {};
              if (stylesThemeCache[slotCacheKey]) {
                return stylesThemeCache[slotCacheKey];
              }
            }
            if (_resolvedStyles[lazyEvaluationKey]) {
              return _resolvedStyles[lazyEvaluationKey];
            }
            var telemetryPartStart = telemetry != null && telemetry.enabled ? performance.now() : 0;
            _resolvedStyles[lazyEvaluationKey] = mergedStyles[slotName](styleParam);
            if (cacheEnabled && theme) {
              var _Object$assign2;
              stylesCache.set(theme, Object.assign({}, stylesCache.get(theme), (_Object$assign2 = {}, _Object$assign2[slotCacheKey] = _resolvedStyles[lazyEvaluationKey], _Object$assign2)));
            }
            if (isEnabled) {
              var _resolvedStyles$slotN, _resolvedStyles$slotN2;
              resolvedStylesDebug[slotName] = (_resolvedStyles$slotN = _resolvedStyles[slotName]) == null ? void 0 : _resolvedStyles$slotN["_debug"];
              (_resolvedStyles$slotN2 = _resolvedStyles[slotName]) == null ? true : delete _resolvedStyles$slotN2["_debug"];
            }
            if (telemetry != null && telemetry.enabled && telemetry.performance[primaryDisplayName]) {
              telemetry.performance[primaryDisplayName].msResolveStylesTotal += performance.now() - telemetryPartStart;
            }
            return _resolvedStyles[lazyEvaluationKey];
          }
        });
        Object.defineProperty(_classes, slotName, {
          enumerable: false,
          configurable: false,
          set: function set(val) {
            if (cacheEnabled && theme) {
              var _Object$assign3;
              classesCache.set(theme, Object.assign({}, classesCache.get(theme), (_Object$assign3 = {}, _Object$assign3[slotCacheKey] = val, _Object$assign3)));
            }
            _classes[lazyEvaluationKey] = val;
          },
          get: function get() {
            if (cacheEnabled && theme) {
              var classesThemeCache = classesCache.get(theme) || {};
              if (classesThemeCache[slotCacheKey] || classesThemeCache[slotCacheKey] === "") {
                if (telemetry != null && telemetry.performance[primaryDisplayName]) {
                  if (slotName === "root") {
                    telemetry.performance[primaryDisplayName].stylesRootCacheHits++;
                  } else {
                    telemetry.performance[primaryDisplayName].stylesSlotsCacheHits++;
                  }
                }
                return slotName === "root" ? (0, import_classnames.default)(componentClassName, classesThemeCache[slotCacheKey], className) : classesThemeCache[slotCacheKey];
              }
            }
            if (_classes[lazyEvaluationKey]) {
              return slotName === "root" ? (0, import_classnames.default)(componentClassName, _classes[lazyEvaluationKey], className) : _classes[lazyEvaluationKey];
            }
            var styleObj = _resolvedStyles[slotName];
            var telemetryPartStart = telemetry != null && telemetry.enabled ? performance.now() : 0;
            if (styleObj) {
              _classes[lazyEvaluationKey] = renderer.renderRule(styleObj, rendererParam);
              if (cacheEnabled && theme) {
                var _Object$assign4;
                classesCache.set(theme, Object.assign({}, classesCache.get(theme), (_Object$assign4 = {}, _Object$assign4[slotCacheKey] = _classes[lazyEvaluationKey], _Object$assign4)));
              }
            }
            var resultClassName = slotName === "root" ? (0, import_classnames.default)(componentClassName, _classes[lazyEvaluationKey], className) : _classes[lazyEvaluationKey];
            if (telemetry != null && telemetry.enabled && telemetry.performance[primaryDisplayName]) {
              telemetry.performance[primaryDisplayName].msRenderStylesTotal += performance.now() - telemetryPartStart;
            }
            return resultClassName;
          }
        });
      });
      return {
        resolvedStyles: _resolvedStyles,
        resolvedStylesDebug,
        classes: _classes
      };
    }
    var resolvedStyles = new Proxy({}, {
      get: function get(target, slotName) {
        var _mergedStyles$slotNam, _mergedStyles;
        var slotCacheKey = componentCacheKey + slotName;
        if (cacheEnabled && theme) {
          var stylesThemeCache = stylesCache.get(theme) || {};
          if (stylesThemeCache[slotCacheKey]) {
            return stylesThemeCache[slotCacheKey];
          }
        }
        if (target[slotName]) {
          return target[slotName];
        }
        var telemetryPartStart = telemetry != null && telemetry.enabled ? performance.now() : 0;
        target[slotName] = (_mergedStyles$slotNam = (_mergedStyles = mergedStyles)[slotName]) == null ? void 0 : _mergedStyles$slotNam.call(_mergedStyles, styleParam);
        if (cacheEnabled && theme) {
          var _Object$assign5;
          stylesCache.set(theme, Object.assign({}, stylesCache.get(theme), (_Object$assign5 = {}, _Object$assign5[slotCacheKey] = target[slotName], _Object$assign5)));
        }
        if (isEnabled) {
          var _target$slotName, _target$slotName2;
          resolvedStylesDebug[slotName] = (_target$slotName = target[slotName]) == null ? void 0 : _target$slotName["_debug"];
          (_target$slotName2 = target[slotName]) == null ? true : delete _target$slotName2["_debug"];
        }
        if (telemetry != null && telemetry.enabled && telemetry.performance[primaryDisplayName]) {
          telemetry.performance[primaryDisplayName].msResolveStylesTotal += performance.now() - telemetryPartStart;
        }
        return target[slotName];
      }
    });
    var classes = new Proxy({}, {
      get: function get(target, slotName) {
        var slotCacheKey = componentCacheKey + slotName;
        if (cacheEnabled && theme) {
          var classesThemeCache = classesCache.get(theme) || {};
          if (classesThemeCache[slotCacheKey] || classesThemeCache[slotCacheKey] === "") {
            if (telemetry != null && telemetry.performance[primaryDisplayName]) {
              if (slotName === "root") {
                telemetry.performance[primaryDisplayName].stylesRootCacheHits++;
              } else {
                telemetry.performance[primaryDisplayName].stylesSlotsCacheHits++;
              }
            }
            return slotName === "root" ? (0, import_classnames.default)(componentClassName, classesThemeCache[slotCacheKey], className) : classesThemeCache[slotCacheKey];
          }
        }
        if (target[slotName]) {
          return slotName === "root" ? (0, import_classnames.default)(componentClassName, target[slotName], className) : target[slotName];
        }
        var styleObj = resolvedStyles[slotName];
        var telemetryPartStart = telemetry != null && telemetry.enabled ? performance.now() : 0;
        if (styleObj) {
          target[slotName] = renderer.renderRule(styleObj, rendererParam);
          if (cacheEnabled && theme) {
            var _Object$assign6;
            classesCache.set(theme, Object.assign({}, classesCache.get(theme), (_Object$assign6 = {}, _Object$assign6[slotCacheKey] = target[slotName], _Object$assign6)));
          }
        }
        var resultClassName = slotName === "root" ? (0, import_classnames.default)(componentClassName, target[slotName], className) : target[slotName];
        if (telemetry != null && telemetry.enabled && telemetry.performance[primaryDisplayName]) {
          telemetry.performance[primaryDisplayName].msRenderStylesTotal += performance.now() - telemetryPartStart;
        }
        return resultClassName;
      }
    });
    return {
      resolvedStyles,
      resolvedStylesDebug,
      classes
    };
  };

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/styles/getStyles.js
  var getStyles13 = function getStyles14(options) {
    var primaryDisplayName = options.primaryDisplayName, telemetry = options.telemetry;
    var telemetryPartStart = telemetry != null && telemetry.enabled ? performance.now() : 0;
    var resolvedVariables = resolveVariables(options.allDisplayNames, options.theme, options.inlineStylesProps.variables, options.performance.enableVariablesCaching);
    if (telemetry != null && telemetry.enabled && telemetry.performance[primaryDisplayName]) {
      telemetry.performance[primaryDisplayName].msResolveVariablesTotal += performance.now() - telemetryPartStart;
    }
    var _resolveStyles2 = resolveStyles(options, resolvedVariables), classes = _resolveStyles2.classes, resolvedStyles = _resolveStyles2.resolvedStyles, resolvedStylesDebug = _resolveStyles2.resolvedStylesDebug;
    if (isEnabled) {
      options.saveDebug({
        componentName: options.allDisplayNames.join(":"),
        componentVariables: (0, import_filter.default)(resolvedVariables._debug, function(variables) {
          return !(0, import_isEmpty.default)(variables.resolved);
        }),
        componentStyles: resolvedStylesDebug,
        siteVariables: (0, import_filter.default)(options.theme.siteVariables._debug, function(siteVars) {
          if ((0, import_isEmpty.default)(siteVars) || (0, import_isEmpty.default)(siteVars.resolved)) {
            return false;
          }
          var keys2 = Object.keys(siteVars.resolved);
          if (keys2.length === 1 && keys2.pop() === "fontSizes" && (0, import_isEmpty.default)(siteVars.resolved["fontSizes"])) {
            return false;
          }
          return true;
        })
      });
    }
    return {
      classes,
      variables: resolvedVariables,
      styles: resolvedStyles,
      theme: options.theme
    };
  };

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/hooks/useUnhandledProps.js
  function useUnhandledProps(handledProps, props) {
    if (false) {
      return getUnhandledProps(handledProps, Object.assign({}, props, {
        "data-uses-unhanded-props": true
      }));
    }
    return getUnhandledProps(handledProps, props);
  }

  // ../node_modules/fela/es/createRenderer.js
  var import_cssifyDeclaration = __toESM(require_cssifyDeclaration());
  var import_arrayEach = __toESM(require_arrayEach2());
  var import_isobject = __toESM(require_isobject());

  // ../node_modules/fela/node_modules/fela-utils/es/styleTypes.js
  var RULE_TYPE = "RULE";
  var KEYFRAME_TYPE = "KEYFRAME";
  var FONT_TYPE = "FONT";
  var STATIC_TYPE = "STATIC";
  var CLEAR_TYPE = "CLEAR";

  // ../node_modules/fela/node_modules/fela-utils/es/generateCombinedMediaQuery.js
  function generateCombinedMediaQuery(currentMediaQuery, nestedMediaQuery) {
    if (currentMediaQuery.length === 0) {
      return nestedMediaQuery;
    }
    return currentMediaQuery + " and " + nestedMediaQuery;
  }

  // ../node_modules/fela/node_modules/fela-utils/es/generateCSSSelector.js
  function generateCSSSelector(className) {
    var pseudo = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    return "." + className + pseudo;
  }

  // ../node_modules/fela/node_modules/fela-utils/es/isMediaQuery.js
  function isMediaQuery(property) {
    return property.substr(0, 6) === "@media";
  }

  // ../node_modules/fela/node_modules/fela-utils/es/isNestedSelector.js
  var regex = /^(:|\[|>|&)/;
  function isNestedSelector(property) {
    return regex.test(property);
  }

  // ../node_modules/fela/node_modules/fela-utils/es/isSupport.js
  function isSupport(property) {
    return property.substr(0, 9) === "@supports";
  }

  // ../node_modules/fela/node_modules/fela-utils/es/isUndefinedValue.js
  function isUndefinedValue(value) {
    return value === void 0 || value === null || typeof value === "string" && value.match(/(undefined|null)/) !== null;
  }

  // ../node_modules/fela/node_modules/fela-utils/es/normalizeNestedProperty.js
  function normalizeNestedProperty(nestedProperty) {
    if (nestedProperty.charAt(0) === "&") {
      return nestedProperty.slice(1);
    }
    return nestedProperty;
  }

  // ../node_modules/fela/node_modules/fela-utils/es/processStyleWithPlugins.js
  var import_arrayReduce = __toESM(require_arrayReduce());
  function processStyleWithPlugins(renderer, style, type) {
    var props = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    if (renderer.plugins.length > 0) {
      return (0, import_arrayReduce.default)(renderer.plugins, function(processedStyle, plugin) {
        return plugin(processedStyle, type, renderer, props);
      }, style);
    }
    return style;
  }

  // ../node_modules/fela/node_modules/fela-utils/es/generateDeclarationReference.js
  var import_camelCaseProperty = __toESM(require_camelCaseProperty());
  function generateDeclarationReference(property, value) {
    var pseudo = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    var media = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
    var support = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "";
    return support + media + pseudo + (0, import_camelCaseProperty.default)(property) + value;
  }

  // ../node_modules/fela/es/cssifyFontFace.js
  var import_cssifyObject = __toESM(require_cssifyObject());
  function cssifyFontFace(fontFace2) {
    return "@font-face{" + (0, import_cssifyObject.default)(fontFace2) + "}";
  }

  // ../node_modules/fela/es/cssifyKeyframe.js
  var import_arrayReduce2 = __toESM(require_arrayReduce());
  var import_objectReduce = __toESM(require_objectReduce());
  var import_cssifyObject2 = __toESM(require_cssifyObject());
  function cssifyKeyframe(frames, animationName) {
    var prefixes = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [""];
    var keyframe86 = (0, import_objectReduce.default)(frames, function(css3, frame, percentage) {
      return "" + css3 + percentage + "{" + (0, import_cssifyObject2.default)(frame) + "}";
    }, "");
    return (0, import_arrayReduce2.default)(prefixes, function(cssKeyframe, prefix2) {
      return cssKeyframe + "@" + prefix2 + "keyframes " + animationName + "{" + keyframe86 + "}";
    }, "");
  }

  // ../node_modules/fela/es/cssifyStaticStyle.js
  var import_cssifyObject3 = __toESM(require_cssifyObject());

  // ../node_modules/fela/es/minifyCSSString.js
  function minifyCSSString(style) {
    return style.replace(/\s{2,}/g, "");
  }

  // ../node_modules/fela/es/cssifyStaticStyle.js
  function cssifyStaticStyle(staticStyle, renderer) {
    if (typeof staticStyle === "string") {
      return minifyCSSString(staticStyle);
    }
    var processedStaticStyle = processStyleWithPlugins(renderer, staticStyle, STATIC_TYPE);
    return (0, import_cssifyObject3.default)(processedStaticStyle);
  }

  // ../node_modules/fela/es/generateAnimationName.js
  function generateAnimationName(id) {
    return "k" + id;
  }

  // ../node_modules/fela/es/generateClassName.js
  var chars = "abcdefghijklmnopqrstuvwxyz";
  var charLength = chars.length;
  function generateUniqueClassName(id) {
    var className = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    if (id <= charLength) {
      return chars[id - 1] + className;
    }
    return generateUniqueClassName(id / charLength | 0, chars[id % charLength] + className);
  }
  function generateClassName(getId2) {
    var filterClassName3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
      return true;
    };
    var startId = getId2();
    var generatedClassName = generateUniqueClassName(startId);
    if (!filterClassName3(generatedClassName)) {
      return generateClassName(getId2, filterClassName3);
    }
    return generatedClassName;
  }

  // ../node_modules/fela/es/generateFontSource.js
  var import_arrayReduce3 = __toESM(require_arrayReduce());

  // ../node_modules/fela/es/isBase64.js
  function isBase64(property) {
    return property.substr(0, 5) === "data:";
  }

  // ../node_modules/fela/es/getFontUrl.js
  function getFontUrl(src) {
    if (isBase64(src)) {
      return src;
    }
    return "'" + src + "'";
  }

  // ../node_modules/fela/es/getFontFormat.js
  var formats = {
    ".woff": "woff",
    ".woff2": "woff2",
    ".eot": "embedded-opentype",
    ".ttf": "truetype",
    ".otf": "opentype",
    ".svg": "svg",
    ".svgz": "svg"
  };
  var base64Formats = {
    "image/svg+xml": "svg",
    "application/x-font-woff": "woff",
    "application/font-woff": "woff",
    "application/x-font-woff2": "woff2",
    "application/font-woff2": "woff2",
    "font/woff2": "woff2",
    "application/octet-stream": "truetype",
    "application/x-font-ttf": "truetype",
    "application/x-font-truetype": "truetype",
    "application/x-font-opentype": "opentype",
    "application/vnd.ms-fontobject": "embedded-opentype",
    "application/font-sfnt": "sfnt"
  };
  function getFontFormat(src) {
    if (isBase64(src)) {
      var mime = "";
      for (var i2 = 5; ; i2++) {
        var c2 = src.charAt(i2);
        if (c2 === ";" || c2 === ",") {
          break;
        }
        mime += c2;
      }
      var fmt = base64Formats[mime];
      if (fmt) {
        return fmt;
      }
      console.warn("A invalid base64 font was used. Please use one of the following mime type: " + Object.keys(base64Formats).join(", ") + ".");
    } else {
      var extension2 = "";
      for (var _i = src.length - 1; ; _i--) {
        var _c = src.charAt(_i);
        if (_c === ".") {
          extension2 = _c + extension2;
          break;
        }
        extension2 = _c + extension2;
      }
      var _fmt = formats[extension2];
      if (_fmt) {
        return _fmt;
      }
      console.warn('A invalid font-format was used in "' + src + '". Use one of these: ' + Object.keys(formats).join(", ") + ".");
    }
    return "";
  }

  // ../node_modules/fela/es/generateFontSource.js
  function generateFontSource() {
    var files = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var fontLocals = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
    var localSource = (0, import_arrayReduce3.default)(fontLocals, function(src, local, index2) {
      var prefix2 = index2 > 0 ? "," : "";
      var localUrl = getFontUrl(local);
      return "" + src + prefix2 + "local(" + localUrl + ")";
    }, "");
    var urlSource = (0, import_arrayReduce3.default)(files, function(src, fileSource, index2) {
      var prefix2 = index2 > 0 ? "," : "";
      var fileFormat = getFontFormat(fileSource);
      var fileUrl = getFontUrl(fileSource);
      return "" + src + prefix2 + "url(" + fileUrl + ") format('" + fileFormat + "')";
    }, "");
    var delimiter3 = localSource.length > 0 && urlSource.length > 0 ? "," : "";
    return "" + localSource + delimiter3 + urlSource;
  }

  // ../node_modules/fela/es/generateStaticReference.js
  function generateStaticReference(style, selector) {
    if (typeof style === "string") {
      return style;
    }
    if (selector) {
      return selector + JSON.stringify(style);
    }
    return "";
  }

  // ../node_modules/fela/es/getFontLocals.js
  function getFontLocals(localAlias) {
    if (typeof localAlias === "string") {
      return [localAlias];
    }
    if (Array.isArray(localAlias)) {
      return localAlias.slice();
    }
    return [];
  }

  // ../node_modules/fela/es/isSafeClassName.js
  function isSafeClassName(className) {
    return className.indexOf("ad") === -1;
  }

  // ../node_modules/fela/es/toCSSString.js
  function toCSSString(value) {
    if (value.charAt(0) === '"') {
      return value;
    }
    return '"' + value + '"';
  }

  // ../node_modules/fela/es/validateSelectorPrefix.js
  var PREFIX_SYNTAX = /^[a-z_][a-z0-9-_]*$/gi;
  function validateSelectorPrefix() {
    var selectorPrefix = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "";
    if (selectorPrefix.length > 0 && selectorPrefix.match(PREFIX_SYNTAX) === null) {
      console.error("An invalid selectorPrefix (" + selectorPrefix + ") has been used to create a new Fela renderer.\nIt must only contain a-Z, 0-9, - and _ while it must start with either _ or a-Z.\nSee http://fela.js.org/docs/advanced/RendererConfiguration.html");
    }
    return selectorPrefix;
  }

  // ../node_modules/fela/es/createRenderer.js
  var _extends5 = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  function _objectWithoutProperties(obj, keys2) {
    var target = {};
    for (var i2 in obj) {
      if (keys2.indexOf(i2) >= 0)
        continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i2))
        continue;
      target[i2] = obj[i2];
    }
    return target;
  }
  function createRenderer() {
    var config = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var renderer = {
      listeners: [],
      keyframePrefixes: config.keyframePrefixes || ["-webkit-", "-moz-"],
      plugins: config.plugins || [],
      mediaQueryOrder: config.mediaQueryOrder || [],
      supportQueryOrder: config.supportQueryOrder || [],
      ruleOrder: [/^:link/, /^:visited/, /^:hover/, /^:focus-within/, /^:focus/, /^:active/],
      selectorPrefix: validateSelectorPrefix(config.selectorPrefix),
      filterClassName: config.filterClassName || isSafeClassName,
      devMode: config.devMode || false,
      uniqueRuleIdentifier: 0,
      uniqueKeyframeIdentifier: 0,
      nodes: {},
      scoreIndex: {},
      // use a flat cache object with pure string references
      // to achieve maximal lookup performance and memoization speed
      cache: {},
      getNextRuleIdentifier: function getNextRuleIdentifier() {
        return ++renderer.uniqueRuleIdentifier;
      },
      renderRule: function renderRule2(rule) {
        var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        return renderer._renderStyle(rule(props, renderer), props);
      },
      renderKeyframe: function renderKeyframe(keyframe86) {
        var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var resolvedKeyframe = keyframe86(props, renderer);
        var processedKeyframe = processStyleWithPlugins(renderer, resolvedKeyframe, KEYFRAME_TYPE, props);
        var keyframeReference = JSON.stringify(processedKeyframe);
        if (!renderer.cache.hasOwnProperty(keyframeReference)) {
          var animationName = renderer.selectorPrefix + generateAnimationName(++renderer.uniqueKeyframeIdentifier);
          var cssKeyframe = cssifyKeyframe(processedKeyframe, animationName, renderer.keyframePrefixes);
          var change = {
            type: KEYFRAME_TYPE,
            keyframe: cssKeyframe,
            name: animationName
          };
          renderer.cache[keyframeReference] = change;
          renderer._emitChange(change);
        }
        return renderer.cache[keyframeReference].name;
      },
      renderFont: function renderFont2(family, files) {
        var properties = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
        var localAlias = properties.localAlias, otherProperties = _objectWithoutProperties(properties, ["localAlias"]);
        var fontReference = family + JSON.stringify(properties);
        var fontLocals = getFontLocals(localAlias);
        if (!renderer.cache.hasOwnProperty(fontReference)) {
          var fontFamily = toCSSString(family);
          var fontFace2 = _extends5({}, otherProperties, {
            src: generateFontSource(files, fontLocals),
            fontFamily
          });
          var cssFontFace = cssifyFontFace(fontFace2);
          var change = {
            type: FONT_TYPE,
            fontFace: cssFontFace,
            fontFamily
          };
          renderer.cache[fontReference] = change;
          renderer._emitChange(change);
        }
        return renderer.cache[fontReference].fontFamily;
      },
      renderStatic: function renderStatic(staticStyle, selector) {
        var staticReference = generateStaticReference(staticStyle, selector);
        if (!renderer.cache.hasOwnProperty(staticReference)) {
          var cssDeclarations = cssifyStaticStyle(staticStyle, renderer);
          var change = {
            type: STATIC_TYPE,
            css: cssDeclarations,
            selector
          };
          renderer.cache[staticReference] = change;
          renderer._emitChange(change);
        }
      },
      subscribe: function subscribe(callback) {
        renderer.listeners.push(callback);
        return {
          unsubscribe: function unsubscribe() {
            return renderer.listeners.splice(renderer.listeners.indexOf(callback), 1);
          }
        };
      },
      clear: function clear() {
        renderer.uniqueRuleIdentifier = 0;
        renderer.uniqueKeyframeIdentifier = 0;
        renderer.cache = {};
        renderer._emitChange({
          type: CLEAR_TYPE
        });
      },
      _renderStyle: function _renderStyle() {
        var style = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var props = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        var processedStyle = processStyleWithPlugins(renderer, style, RULE_TYPE, props);
        return renderer._renderStyleToClassNames(processedStyle).slice(1);
      },
      _renderStyleToClassNames: function _renderStyleToClassNames(_ref) {
        var pseudo = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
        var media = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
        var support = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
        var _className = _ref._className, style = _objectWithoutProperties(_ref, ["_className"]);
        var classNames2 = _className ? " " + _className : "";
        for (var property in style) {
          var value = style[property];
          if ((0, import_isobject.default)(value)) {
            if (isNestedSelector(property)) {
              classNames2 += renderer._renderStyleToClassNames(value, pseudo + normalizeNestedProperty(property), media, support);
            } else if (isMediaQuery(property)) {
              var combinedMediaQuery = generateCombinedMediaQuery(media, property.slice(6).trim());
              classNames2 += renderer._renderStyleToClassNames(value, pseudo, combinedMediaQuery, support);
            } else if (isSupport(property)) {
              var combinedSupport = generateCombinedMediaQuery(support, property.slice(9).trim());
              classNames2 += renderer._renderStyleToClassNames(value, pseudo, media, combinedSupport);
            } else {
              console.warn('The object key "' + property + '" is not a valid nested key in Fela.\nMaybe you forgot to add a plugin to resolve it?\nCheck http://fela.js.org/docs/basics/Rules.html#styleobject for more information.');
            }
          } else {
            var declarationReference = generateDeclarationReference(property, value, pseudo, media, support);
            if (!renderer.cache.hasOwnProperty(declarationReference)) {
              if (isUndefinedValue(value)) {
                renderer.cache[declarationReference] = {
                  className: ""
                  /* eslint-disable no-continue */
                };
                continue;
              }
              var className = renderer.selectorPrefix + generateClassName(renderer.getNextRuleIdentifier, renderer.filterClassName);
              var declaration2 = (0, import_cssifyDeclaration.default)(property, value);
              var selector = generateCSSSelector(className, pseudo);
              var change = {
                type: RULE_TYPE,
                className,
                selector,
                declaration: declaration2,
                pseudo,
                media,
                support
              };
              renderer.cache[declarationReference] = change;
              renderer._emitChange(change);
            }
            var cachedClassName = renderer.cache[declarationReference].className;
            if (cachedClassName) {
              classNames2 += " " + cachedClassName;
            }
          }
        }
        return classNames2;
      },
      _emitChange: function _emitChange(change) {
        (0, import_arrayEach.default)(renderer.listeners, function(listener) {
          return listener(change);
        });
      }
    };
    renderer.keyframePrefixes.push("");
    if (config.enhancers) {
      (0, import_arrayEach.default)(config.enhancers, function(enhancer) {
        renderer = enhancer(renderer);
      });
    }
    return renderer;
  }

  // ../node_modules/fela-plugin-embedded/es/index.js
  var import_arrayReduce4 = __toESM(require_arrayReduce());
  var import_isobject2 = __toESM(require_isobject());
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  function _objectWithoutProperties2(obj, keys2) {
    var target = {};
    for (var i2 in obj) {
      if (keys2.indexOf(i2) >= 0)
        continue;
      if (!Object.prototype.hasOwnProperty.call(obj, i2))
        continue;
      target[i2] = obj[i2];
    }
    return target;
  }
  function renderFontFace(_ref, renderer) {
    var fontFamily = _ref.fontFamily, src = _ref.src, otherProps = _objectWithoutProperties2(_ref, ["fontFamily", "src"]);
    if (typeof fontFamily === "string" && Array.isArray(src)) {
      return renderer.renderFont(fontFamily, src, otherProps);
    }
    return void 0;
  }
  function embedded(style, type, renderer, props) {
    var _loop = function _loop2(property2) {
      var value = style[property2];
      if (property2 === "fontFace" && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") {
        if (Array.isArray(value)) {
          style.fontFamily = (0, import_arrayReduce4.default)(value, function(fontFamilyList, fontFace2) {
            var fontFamily = renderFontFace(fontFace2, renderer);
            if (fontFamily && fontFamilyList.indexOf(fontFamily) === -1) {
              fontFamilyList.push(fontFamily);
            }
            return fontFamilyList;
          }, []).join(",");
        } else {
          style.fontFamily = renderFontFace(value, renderer);
        }
        delete style.fontFace;
      } else if (property2 === "animationName" && (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") {
        if (Array.isArray(value)) {
          style[property2] = value.map(function(frame) {
            return renderer.renderKeyframe(function() {
              return frame;
            });
          }, props).join(",");
        } else {
          style[property2] = renderer.renderKeyframe(function() {
            return value;
          }, props);
        }
      } else if ((0, import_isobject2.default)(value)) {
        embedded(value, type, renderer, props);
      }
    };
    for (var property in style) {
      _loop(property);
    }
    return style;
  }
  var es_default = function() {
    return embedded;
  };

  // ../node_modules/fela-plugin-fallback-value/es/index.js
  var import_resolveArrayValue = __toESM(require_resolveArrayValue());
  var import_isobject3 = __toESM(require_isobject());
  function resolveFallbackValues(style) {
    for (var property in style) {
      var value = style[property];
      if (Array.isArray(value)) {
        style[property] = (0, import_resolveArrayValue.default)(property, value);
      } else if ((0, import_isobject3.default)(value) && property !== "fontFace") {
        style[property] = resolveFallbackValues(value);
      }
    }
    return style;
  }
  var es_default2 = function() {
    return resolveFallbackValues;
  };

  // ../node_modules/fela-plugin-custom-property/es/index.js
  var import_isobject4 = __toESM(require_isobject());
  var import_assignStyle = __toESM(require_assignStyle());
  function resolveCustomProperty(style, properties) {
    for (var property in style) {
      var value = style[property];
      if (properties.hasOwnProperty(property)) {
        var resolved = properties[property](value);
        (0, import_assignStyle.default)(style, resolved);
        if (!resolved.hasOwnProperty(property)) {
          delete style[property];
        }
      }
      if (style.hasOwnProperty(property) && (0, import_isobject4.default)(value)) {
        style[property] = resolveCustomProperty(value, properties);
      }
    }
    return style;
  }
  function customProperty(properties) {
    return function(style) {
      return resolveCustomProperty(style, properties);
    };
  }

  // ../node_modules/fela-plugin-placeholder-prefixer/es/index.js
  var import_arrayReduce5 = __toESM(require_arrayReduce());
  var placeholderPrefixes = ["::-webkit-input-placeholder", "::-moz-placeholder", ":-ms-input-placeholder", ":-moz-placeholder", "::placeholder"];
  function placeholderPrefixer() {
    return customProperty({
      "::placeholder": function placeholder(value) {
        return (0, import_arrayReduce5.default)(placeholderPrefixes, function(style, prefix2) {
          style[prefix2] = value;
          return style;
        }, {});
      }
    });
  }

  // ../node_modules/rtl-css-js/dist/esm/index.js
  var esm_default = convert;

  // ../node_modules/fela-plugin-rtl/es/index.js
  function rtl() {
    var defaultDirection = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "rtl";
    return function(style, type, renderer, props) {
      var direction = props && props.theme && props.theme.direction || defaultDirection;
      if (direction === "rtl") {
        return esm_default(style);
      }
      return style;
    };
  }

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/node_modules/@fluentui/react-northstar-fela-renderer/dist/es/createFelaRenderer.js
  var React184 = __toESM(require_react());

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/node_modules/@fluentui/react-northstar-fela-renderer/dist/es/felaDisableAnimationsPlugin.js
  var animationProps = ["animation", "animationName", "animationDuration", "animationTimingFunction", "animationDelay", "animationIterationCount", "animationDirection", "animationFillMode", "animationPlayState"];
  function isPlainObject6(val) {
    return val != null && typeof val === "object" && Array.isArray(val) === false;
  }
  var felaDisableAnimationsPlugin = function felaDisableAnimationsPlugin2(styles2, type, renderer, props) {
    if (props && props.disableAnimations && type === "RULE") {
      return Object.keys(styles2).reduce(function(acc, cssPropertyName) {
        var _Object$assign2;
        var cssPropertyValue = styles2[cssPropertyName];
        if (animationProps.indexOf(cssPropertyName) !== -1) {
          return acc;
        }
        if (isPlainObject6(cssPropertyValue)) {
          var _Object$assign;
          return Object.assign({}, acc, (_Object$assign = {}, _Object$assign[cssPropertyName] = felaDisableAnimationsPlugin2(cssPropertyValue, type, renderer, props), _Object$assign));
        }
        return Object.assign({}, acc, (_Object$assign2 = {}, _Object$assign2[cssPropertyName] = styles2[cssPropertyName], _Object$assign2));
      }, {});
    }
    return styles2;
  };

  // ../node_modules/inline-style-expand-shorthand/es/expandProperty.js
  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
    } else {
      obj[key] = value;
    }
    return obj;
  }
  function _slicedToArray(arr, i2) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _nonIterableRest();
  }
  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }
  function _iterableToArrayLimit(arr, i2) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = void 0;
    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i2 && _arr.length === i2)
          break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null)
          _i["return"]();
      } finally {
        if (_d)
          throw _e;
      }
    }
    return _arr;
  }
  function _arrayWithHoles(arr) {
    if (Array.isArray(arr))
      return arr;
  }
  var LENGTH_UNIT = /(em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|q|in|pt|pc|px|dpi|dpcm|dppx|%|auto)$/i;
  var CALC = /^(calc\()/i;
  var BORDER_STYLE = /^(dashed|dotted|double|groove|hidden|inset|none|outset|ridge|solid)$/i;
  var BORDER_WIDTH = /^(thick|medium|think)$/i;
  var PURE_NUMBER = /^\d+$/;
  var GLOBAL_VALUES = ["inherit", "initial", "unset", "revert", "revert-layer"];
  function splitShorthand(value) {
    var values2 = [""];
    var openParensCount = 0;
    var trimmedValue = value.trim();
    for (var index2 = 0; index2 < trimmedValue.length; index2 += 1) {
      if (trimmedValue.charAt(index2) === " " && openParensCount === 0) {
        values2.push("");
      } else {
        values2[values2.length - 1] = values2[values2.length - 1] + trimmedValue.charAt(index2);
      }
      if (trimmedValue.charAt(index2) === "(") {
        openParensCount++;
      } else if (trimmedValue.charAt(index2) === ")") {
        openParensCount--;
      }
    }
    return values2;
  }
  function parseBorder(value, resolve2) {
    var values2 = splitShorthand(value);
    var longhands = {};
    values2.forEach(function(val) {
      if (val.match(BORDER_STYLE) !== null) {
        longhands[resolve2("Style")] = val;
      } else if (val.match(BORDER_WIDTH) !== null || val.match(LENGTH_UNIT) !== null || val.match(CALC) !== null || val === "0") {
        longhands[resolve2("Width")] = val;
      } else {
        longhands[resolve2("Color")] = val;
      }
    });
    return longhands;
  }
  function parseCircular(value, resolve2) {
    var _ref;
    var _splitShorthand = splitShorthand(value), _splitShorthand2 = _slicedToArray(_splitShorthand, 4), Top = _splitShorthand2[0], _splitShorthand2$ = _splitShorthand2[1], Right = _splitShorthand2$ === void 0 ? Top : _splitShorthand2$, _splitShorthand2$2 = _splitShorthand2[2], Bottom = _splitShorthand2$2 === void 0 ? Top : _splitShorthand2$2, _splitShorthand2$3 = _splitShorthand2[3], Left = _splitShorthand2$3 === void 0 ? Right : _splitShorthand2$3;
    return _ref = {}, _defineProperty(_ref, resolve2("Top"), Top), _defineProperty(_ref, resolve2("Right"), Right), _defineProperty(_ref, resolve2("Bottom"), Bottom), _defineProperty(_ref, resolve2("Left"), Left), _ref;
  }
  function parseFlowRelativePosition(value, resolve2) {
    var _ref2;
    var _splitShorthand3 = splitShorthand(value), _splitShorthand4 = _slicedToArray(_splitShorthand3, 2), Start = _splitShorthand4[0], _splitShorthand4$ = _splitShorthand4[1], End2 = _splitShorthand4$ === void 0 ? Start : _splitShorthand4$;
    return _ref2 = {}, _defineProperty(_ref2, resolve2("Start"), Start), _defineProperty(_ref2, resolve2("End"), End2), _ref2;
  }
  function groupBy(values2, divider) {
    var groups = [[]];
    values2.forEach(function(val) {
      if (val === divider) {
        groups.push([]);
      } else {
        groups[groups.length - 1].push(val);
      }
    });
    return groups;
  }
  function parseBorderRadius(value) {
    var _groupBy = groupBy(splitShorthand(value), "/"), _groupBy2 = _slicedToArray(_groupBy, 2), _groupBy2$ = _groupBy2[0], first = _groupBy2$ === void 0 ? [] : _groupBy2$, _groupBy2$2 = _groupBy2[1], second = _groupBy2$2 === void 0 ? [] : _groupBy2$2;
    var _first = _slicedToArray(first, 4), Top = _first[0], _first$ = _first[1], Right = _first$ === void 0 ? Top : _first$, _first$2 = _first[2], Bottom = _first$2 === void 0 ? Top : _first$2, _first$3 = _first[3], Left = _first$3 === void 0 ? Right : _first$3;
    var _second = _slicedToArray(second, 4), Top2 = _second[0], _second$ = _second[1], Right2 = _second$ === void 0 ? Top2 : _second$, _second$2 = _second[2], Bottom2 = _second$2 === void 0 ? Top2 : _second$2, _second$3 = _second[3], Left2 = _second$3 === void 0 ? Right2 : _second$3;
    return {
      borderTopLeftRadius: [Top, Top2].filter(Boolean).join(" "),
      borderTopRightRadius: [Right, Right2].filter(Boolean).join(" "),
      borderBottomRightRadius: [Bottom, Bottom2].filter(Boolean).join(" "),
      borderBottomLeftRadius: [Left, Left2].filter(Boolean).join(" ")
    };
  }
  var textDecorationLineValues = new Set(GLOBAL_VALUES.concat(["none", "underline", "overline", "line-through", "blink"]));
  var textDecorationStyleValues = new Set(GLOBAL_VALUES.concat(["solid", "double", "dotted", "dashed", "wavy"]));
  function parseTextDecoration(value) {
    var values2 = splitShorthand(value);
    if (values2.length === 1) {
      if (values2[0] === "initial") {
        return {
          textDecorationLine: "none"
        };
      }
      return {
        textDecorationLine: values2[0]
      };
    }
    var _values = _slicedToArray(values2, 3), left = _values[0], middle = _values[1], right = _values[2];
    var lineValue = [];
    var colorValue = "";
    var styleValue = "";
    var extractValues = function extractValues2(v2) {
      if (v2) {
        if (textDecorationLineValues.has(v2)) {
          if (lineValue.length === 0 || !lineValue.includes(v2)) {
            lineValue.push(v2);
          } else {
            return true;
          }
        } else if (textDecorationStyleValues.has(v2)) {
          styleValue = v2;
        } else {
          colorValue = v2;
        }
      }
      return false;
    };
    if (extractValues(left) || extractValues(middle) || extractValues(right)) {
      return {};
    }
    lineValue.sort();
    var textDecorationLine = lineValue.length ? lineValue.join(" ") : "none";
    return {
      textDecorationLine,
      textDecorationStyle: styleValue || "solid",
      textDecorationColor: colorValue || "currentColor"
    };
  }
  var circularExpand = {
    borderWidth: function borderWidth(key) {
      return "border" + key + "Width";
    },
    borderColor: function borderColor2(key) {
      return "border" + key + "Color";
    },
    borderStyle: function borderStyle(key) {
      return "border" + key + "Style";
    },
    padding: function padding2(key) {
      return "padding" + key;
    },
    margin: function margin(key) {
      return "margin" + key;
    },
    scrollPadding: function scrollPadding(key) {
      return "scrollPadding" + key;
    },
    scrollMargin: function scrollMargin(key) {
      return "scrollMargin" + key;
    }
  };
  var borderExpand = {
    borderLeft: function borderLeft(key) {
      return "borderLeft" + key;
    },
    borderTop: function borderTop(key) {
      return "borderTop" + key;
    },
    borderRight: function borderRight(key) {
      return "borderRight" + key;
    },
    borderBottom: function borderBottom(key) {
      return "borderBottom" + key;
    },
    outline: function outline(key) {
      return "outline" + key;
    }
  };
  var flowRelativePositionExpand = {
    paddingInline: function paddingInline(key) {
      return "paddingInline" + key;
    },
    paddingBlock: function paddingBlock(key) {
      return "paddingBlock" + key;
    },
    marginInline: function marginInline(key) {
      return "marginInline" + key;
    },
    marginBlock: function marginBlock(key) {
      return "marginBlock" + key;
    }
  };
  function parseFlex(value) {
    var values2 = [""];
    switch (value.trim()) {
      case "initial":
        values2 = splitShorthand("0 1 auto");
        break;
      case "auto":
        values2 = splitShorthand("1 1 auto");
        break;
      case "none":
        values2 = splitShorthand("0 0 auto");
        break;
      default:
        values2 = splitShorthand(value);
        break;
    }
    if (values2.length === 1) {
      var val = values2[0];
      if (PURE_NUMBER.test(val)) {
        values2 = splitShorthand(val + " 1 0");
      } else {
        values2 = splitShorthand("1 1 " + val);
      }
    }
    var longhands = {};
    if (values2.length === 2) {
      longhands.flexGrow = values2[0];
      if (values2[1].match(PURE_NUMBER) !== null) {
        longhands.flexShrink = values2[1];
      } else {
        longhands.flexBasis = values2[1];
      }
    } else {
      longhands.flexGrow = values2[0];
      longhands.flexShrink = values2[1];
      longhands.flexBasis = values2[2];
    }
    if (typeof longhands.flexGrow === "undefined") {
      longhands.flexGrow = "0";
    }
    if (typeof longhands.flexShrink === "undefined") {
      longhands.flexShrink = "1";
    }
    if (typeof longhands.flexBasis === "undefined") {
      longhands.flexBasis = "auto";
    }
    return longhands;
  }
  function parseOverflow(value) {
    var _splitShorthand5 = splitShorthand(value), _splitShorthand6 = _slicedToArray(_splitShorthand5, 2), overflowX = _splitShorthand6[0], _splitShorthand6$ = _splitShorthand6[1], overflowY = _splitShorthand6$ === void 0 ? overflowX : _splitShorthand6$;
    return {
      overflowX,
      overflowY
    };
  }
  function parseGap2(value) {
    var _splitShorthand7 = splitShorthand(value), _splitShorthand8 = _slicedToArray(_splitShorthand7, 2), rowGap = _splitShorthand8[0], _splitShorthand8$ = _splitShorthand8[1], columnGap = _splitShorthand8$ === void 0 ? rowGap : _splitShorthand8$;
    return {
      rowGap,
      columnGap
    };
  }
  var flexDirectionValues = new Set(GLOBAL_VALUES.concat(["row", "row-reverse", "column", "column-reverse"]));
  var flexWrapValues = new Set(GLOBAL_VALUES.concat(["nowrap", "wrap", "reverse"]));
  function parseFlexFlow(value) {
    var flexDirection = "";
    var flexWrap = "";
    var _splitShorthand9 = splitShorthand(value), _splitShorthand10 = _slicedToArray(_splitShorthand9, 2), left = _splitShorthand10[0], right = _splitShorthand10[1];
    var extractFlexFlowValue = function extractFlexFlowValue2(value2) {
      if (value2) {
        if (flexDirectionValues.has(value2)) {
          if (flexDirection !== "") {
            return true;
          }
          flexDirection = value2;
        } else if (flexWrapValues.has(value2)) {
          if (flexWrap !== "") {
            return true;
          }
          flexWrap = value2;
        } else {
          return true;
        }
      }
      return false;
    };
    if (extractFlexFlowValue(left) || extractFlexFlowValue(right)) {
      return {};
    }
    return {
      // only fallback to default value when original value is valid
      flexDirection: flexDirection || "row",
      flexWrap: flexWrap || "nowrap"
    };
  }
  function parsePlaceContent(value) {
    var _splitShorthand11 = splitShorthand(value), _splitShorthand12 = _slicedToArray(_splitShorthand11, 2), alignContent = _splitShorthand12[0], justifyContent = _splitShorthand12[1];
    if (!justifyContent && alignContent) {
      if (alignContent === "left" || alignContent === "right" || alignContent === "first" || alignContent === "last") {
        return {};
      }
      if (alignContent === "baseline") {
        justifyContent = "start";
      } else {
        justifyContent = alignContent;
      }
    }
    return {
      alignContent,
      justifyContent
    };
  }
  function parsePlaceItems(value) {
    var _splitShorthand13 = splitShorthand(value), _splitShorthand14 = _slicedToArray(_splitShorthand13, 2), alignItems = _splitShorthand14[0], _splitShorthand14$ = _splitShorthand14[1], justifyItems = _splitShorthand14$ === void 0 ? alignItems : _splitShorthand14$;
    return {
      alignItems,
      justifyItems
    };
  }
  function parsePlaceSelf(value) {
    var _splitShorthand15 = splitShorthand(value), _splitShorthand16 = _slicedToArray(_splitShorthand15, 2), alignSelf = _splitShorthand16[0], _splitShorthand16$ = _splitShorthand16[1], justifySelf = _splitShorthand16$ === void 0 ? alignSelf : _splitShorthand16$;
    return {
      alignSelf,
      justifySelf
    };
  }
  var extractTransition = function extractTransition2(value) {
    var values2 = splitShorthand(value);
    if (values2.length === 1) {
      if (GLOBAL_VALUES.includes(values2[0])) {
        return {
          transitionProperty: values2[0],
          transitionDuration: values2[0],
          transitionDelay: values2[0],
          transitionTimingFunction: values2[0]
        };
      } else if (values2[0] === "all" || values2[0] === "none") {
        return {
          transitionProperty: values2[0],
          transitionDuration: "0s",
          // https://w3c.github.io/csswg-drafts/css-transitions/#transition-duration-property
          transitionDelay: "0s",
          // https://w3c.github.io/csswg-drafts/css-transitions/#transition-delay-property
          transitionTimingFunction: "ease"
          // https://w3c.github.io/csswg-drafts/css-transitions/#transition-timing-function-property
        };
      }
    }
    var _values2 = _slicedToArray(values2, 4), transitionProperty2 = _values2[0], _values2$ = _values2[1], transitionDuration = _values2$ === void 0 ? "0s" : _values2$, _values2$2 = _values2[2], transitionDelay = _values2$2 === void 0 ? "0s" : _values2$2, _values2$3 = _values2[3], transitionTimingFunction = _values2$3 === void 0 ? "ease" : _values2$3;
    return {
      transitionProperty: transitionProperty2,
      transitionDuration,
      transitionDelay,
      transitionTimingFunction
    };
  };
  function parseTransition(value) {
    if (!value.includes(",")) {
      return extractTransition(value);
    }
    var transitions = value.split(",").map(extractTransition);
    return transitions.reduce(function(acc, _ref3, index2) {
      var transitionProperty2 = _ref3.transitionProperty, transitionDuration = _ref3.transitionDuration, transitionDelay = _ref3.transitionDelay, transitionTimingFunction = _ref3.transitionTimingFunction;
      if (index2 === 0) {
        acc.transitionProperty = transitionProperty2;
        acc.transitionDuration = transitionDuration;
        acc.transitionDelay = transitionDelay;
        acc.transitionTimingFunction = transitionTimingFunction;
      } else {
        acc.transitionProperty += ", ".concat(transitionProperty2);
        acc.transitionDuration += ", ".concat(transitionDuration);
        acc.transitionDelay += ", ".concat(transitionDelay);
        acc.transitionTimingFunction += ", ".concat(transitionTimingFunction);
      }
      return acc;
    }, {});
  }
  function parseInset(value) {
    var _splitShorthand17 = splitShorthand(value), _splitShorthand18 = _slicedToArray(_splitShorthand17, 4), top = _splitShorthand18[0], _splitShorthand18$ = _splitShorthand18[1], right = _splitShorthand18$ === void 0 ? top : _splitShorthand18$, _splitShorthand18$2 = _splitShorthand18[2], bottom = _splitShorthand18$2 === void 0 ? top : _splitShorthand18$2, _splitShorthand18$3 = _splitShorthand18[3], left = _splitShorthand18$3 === void 0 ? right : _splitShorthand18$3;
    return {
      top,
      right,
      bottom,
      left
    };
  }
  function expandProperty(property, value) {
    if (property === "border") {
      var longhands = parseBorder(value.toString(), function(key) {
        return "border" + key;
      });
      var result = {};
      for (var _property in longhands) {
        Object.assign(result, expandProperty(_property, longhands[_property]));
      }
      return result;
    }
    if (property === "flex") {
      return parseFlex(value.toString());
    }
    if (property === "borderRadius") {
      return parseBorderRadius(value.toString());
    }
    if (property === "textDecoration") {
      return parseTextDecoration(value.toString());
    }
    if (property === "overflow") {
      return parseOverflow(value.toString());
    }
    if (property === "gap") {
      return parseGap2(value.toString());
    }
    if (property === "flexFlow") {
      return parseFlexFlow(value.toString());
    }
    if (property === "placeContent") {
      return parsePlaceContent(value.toString());
    }
    if (property === "placeItems") {
      return parsePlaceItems(value.toString());
    }
    if (property === "placeSelf") {
      return parsePlaceSelf(value.toString());
    }
    if (property === "transition") {
      return parseTransition(value.toString());
    }
    if (property === "inset") {
      return parseInset(value.toString());
    }
    if (circularExpand[property]) {
      return parseCircular(value.toString(), circularExpand[property]);
    }
    if (borderExpand[property]) {
      return parseBorder(value.toString(), borderExpand[property]);
    }
    if (flowRelativePositionExpand[property]) {
      return parseFlowRelativePosition(value.toString(), flowRelativePositionExpand[property]);
    }
  }
  function preExpand(property, value) {
    if (Array.isArray(value)) {
      var result = {};
      value.forEach(function(item) {
        var itemResult = expandProperty(property, item);
        if (itemResult) {
          Object.keys(itemResult).forEach(function(itemProperty) {
            result[itemProperty] = result[itemProperty] || [];
            result[itemProperty].push(itemResult[itemProperty]);
          });
        }
      });
      if (Object.keys(result).length) {
        return result;
      }
      return null;
    }
    return expandProperty(property, value);
  }

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/node_modules/@fluentui/react-northstar-fela-renderer/dist/es/felaExpandCssShorthandsPlugin.js
  var handledCssProps = {
    // 'font', Oops, is not supported by inline-style-expand-shorthand
    padding: true,
    margin: true,
    border: true,
    borderWidth: true,
    borderStyle: true,
    borderColor: true,
    borderTop: true,
    borderRight: true,
    borderBottom: true,
    borderLeft: true,
    borderRadius: true,
    background: true,
    outline: true
  };
  var felaExpandCssShorthandsPlugin = function felaExpandCssShorthandsPlugin2(styles2) {
    return Object.keys(styles2).reduce(function(acc, cssPropertyName) {
      var cssPropertyValue = styles2[cssPropertyName];
      if (cssPropertyValue === null || typeof cssPropertyValue === "undefined") {
        acc[cssPropertyName] = cssPropertyValue;
      } else if (handledCssProps[cssPropertyName]) {
        var expandedProps = preExpand(cssPropertyName, cssPropertyValue);
        if (expandedProps) {
          Object.assign(acc, expandedProps);
          return acc;
        }
        acc[cssPropertyName] = cssPropertyValue;
      } else if (Array.isArray(cssPropertyValue)) {
        acc[cssPropertyName] = cssPropertyValue;
      } else if (typeof cssPropertyValue === "object") {
        acc[cssPropertyName] = felaExpandCssShorthandsPlugin2(cssPropertyValue);
      } else {
        acc[cssPropertyName] = cssPropertyValue;
      }
      return acc;
    }, {});
  };

  // ../node_modules/fela-utils/es/generateCSSRule.js
  function generateCSSRule(selector, cssDeclaration) {
    return selector + "{" + cssDeclaration + "}";
  }

  // ../node_modules/fela-utils/es/getRuleScore.js
  function getRuleScore() {
    var ruleOrder = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var pseudo = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    if (ruleOrder.length === 0 || pseudo.length === 0) {
      return 0;
    }
    return ruleOrder.indexOf(ruleOrder.find(function(regex3) {
      return pseudo.match(regex3) !== null;
    })) + 1;
  }

  // ../node_modules/fela-utils/es/styleTypes.js
  var RULE_TYPE2 = "RULE";
  var KEYFRAME_TYPE2 = "KEYFRAME";
  var FONT_TYPE2 = "FONT";
  var STATIC_TYPE2 = "STATIC";
  var CLEAR_TYPE2 = "CLEAR";

  // ../node_modules/fela-utils/es/generateCSSSupportRule.js
  function generateCSSSupportRule(support, cssRules2) {
    return "@supports " + support + "{" + cssRules2 + "}";
  }

  // ../node_modules/fela-utils/es/generateCombinedMediaQuery.js
  function generateCombinedMediaQuery2(currentMediaQuery, nestedMediaQuery) {
    if (currentMediaQuery.length === 0) {
      return nestedMediaQuery;
    }
    return currentMediaQuery + " and " + nestedMediaQuery;
  }

  // ../node_modules/fela-utils/es/generateCSSSelector.js
  function generateCSSSelector2(className) {
    var pseudo = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    var specificityPrefix = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    var propertyPriority = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 1;
    var classNameSelector = ("." + className).repeat(propertyPriority);
    return "" + specificityPrefix + classNameSelector + pseudo;
  }

  // ../node_modules/fela-utils/es/isMediaQuery.js
  function isMediaQuery2(property) {
    return property.substr(0, 6) === "@media";
  }

  // ../node_modules/fela-utils/es/isNestedSelector.js
  var regex2 = /^(:|\[|>|&)/;
  function isNestedSelector2(property) {
    return regex2.test(property);
  }

  // ../node_modules/fela-utils/es/isSupport.js
  function isSupport2(property) {
    return property.substr(0, 9) === "@supports";
  }

  // ../node_modules/fela-utils/es/isUndefinedValue.js
  var FALSY_REGEX = /undefined|null/;
  var URL_REGEX = /url/;
  function isUndefinedValue2(value) {
    return value === void 0 || value === null || typeof value === "string" && FALSY_REGEX.test(value) && !URL_REGEX.test(value);
  }

  // ../node_modules/fela-utils/es/normalizeNestedProperty.js
  function normalizeNestedProperty2(nestedProperty) {
    if (nestedProperty.charAt(0) === "&") {
      return nestedProperty.slice(1);
    }
    return nestedProperty;
  }

  // ../node_modules/fela-utils/es/generateDeclarationReference.js
  function generateDeclarationReference2(property, value) {
    var pseudo = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    var media = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
    var support = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "";
    return support + media + pseudo + property + value;
  }

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/node_modules/@fluentui/react-northstar-fela-renderer/dist/es/felaFocusVisibleEnhancer.js
  var felaFocusVisibleEnhancer = function felaFocusVisibleEnhancer2(renderer) {
    var existingEmitChange = renderer._emitChange.bind(renderer);
    renderer._emitChange = function(change) {
      if (change.type === RULE_TYPE2 && change.selector.indexOf(":focus-visible") !== -1) {
        change.pseudo = change.pseudo ? change.pseudo.replace(":focus-visible", ":focus") : "";
        change.selector = 'html[data-whatinput="keyboard"] ' + change.selector.replace(":focus-visible", ":focus");
      }
      existingEmitChange(change);
    };
    return renderer;
  };

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/node_modules/@fluentui/react-northstar-fela-renderer/dist/es/felaInvokeKeyframesPlugin.js
  var import_isPlainObject2 = __toESM(require_isPlainObject());
  var felaInvokeKeyframesPlugin = function felaInvokeKeyframesPlugin2(styles2) {
    return Object.keys(styles2).reduce(function(acc, cssPropertyName) {
      var cssPropertyValue = styles2[cssPropertyName];
      if ((0, import_isPlainObject2.default)(cssPropertyValue)) {
        if (cssPropertyName === "animationName") {
          var animationDefinition = cssPropertyValue;
          if (animationDefinition.keyframe) {
            styles2[cssPropertyName] = callable(animationDefinition.keyframe)(animationDefinition.params || {});
          }
          acc[cssPropertyName] = styles2[cssPropertyName];
          return acc;
        }
        acc[cssPropertyName] = felaInvokeKeyframesPlugin2(cssPropertyValue);
        return acc;
      }
      acc[cssPropertyName] = styles2[cssPropertyName];
      return acc;
    }, {});
  };

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/node_modules/@fluentui/react-northstar-fela-renderer/dist/es/felaPerformanceEnhancer.js
  var import_cssifyDeclaration2 = __toESM(require_cssifyDeclaration());
  var _excluded9 = ["_className"];
  function isPlainObject7(val) {
    return val != null && typeof val === "object" && Array.isArray(val) === false;
  }
  var chars2 = "abcdefghijklmnopqrstuvwxyz";
  var charLength2 = chars2.length;
  function generateUniqueClassName2(id, className) {
    if (className === void 0) {
      className = "";
    }
    if (id <= charLength2) {
      return chars2[id - 1] + className;
    }
    return generateUniqueClassName2(id / charLength2 | 0, chars2[id % charLength2] + className);
  }
  function generateClassName2(getId2, filterClassName3) {
    if (filterClassName3 === void 0) {
      filterClassName3 = function filterClassName4() {
        return true;
      };
    }
    var startId = getId2();
    var generatedClassName = generateUniqueClassName2(startId);
    if (!filterClassName3(generatedClassName)) {
      return generateClassName2(getId2, filterClassName3);
    }
    return generatedClassName;
  }
  function generateDeclarationReference3(property, value, pseudo, media, support) {
    if (pseudo === void 0) {
      pseudo = "";
    }
    if (media === void 0) {
      media = "";
    }
    if (support === void 0) {
      support = "";
    }
    return support + media + pseudo + property + value;
  }
  function felaPerformanceEnhancer(renderer) {
    renderer._renderStyleToClassNames = function _renderStyleToClassNames(_ref, pseudo, media, support) {
      if (pseudo === void 0) {
        pseudo = "";
      }
      if (media === void 0) {
        media = "";
      }
      if (support === void 0) {
        support = "";
      }
      var _className = _ref._className, style = _objectWithoutPropertiesLoose(_ref, _excluded9);
      var classNames2 = _className ? " " + _className : "";
      for (var property in style) {
        var value = style[property];
        if (isPlainObject7(value)) {
          if (isNestedSelector2(property)) {
            classNames2 += renderer._renderStyleToClassNames(value, pseudo + normalizeNestedProperty2(property), media, support);
          } else if (isMediaQuery2(property)) {
            var combinedMediaQuery = generateCombinedMediaQuery2(media, property.slice(6).trim());
            classNames2 += renderer._renderStyleToClassNames(value, pseudo, combinedMediaQuery, support);
          } else if (isSupport2(property)) {
            var combinedSupport = generateCombinedMediaQuery2(support, property.slice(9).trim());
            classNames2 += renderer._renderStyleToClassNames(value, pseudo, media, combinedSupport);
          } else {
            console.warn('The object key "' + property + '" is not a valid nested key in Fela.\nMaybe you forgot to add a plugin to resolve it?\nCheck http://fela.js.org/docs/basics/Rules.html#styleobject for more information.');
          }
        } else {
          var declarationReference = generateDeclarationReference3(property, value, pseudo, media, support);
          if (!renderer.cache.hasOwnProperty(declarationReference)) {
            if (isUndefinedValue2(value)) {
              renderer.cache[declarationReference] = {
                className: ""
              };
              continue;
            }
            var className = renderer.selectorPrefix + generateClassName2(renderer.getNextRuleIdentifier, renderer.filterClassName);
            var declaration2 = (0, import_cssifyDeclaration2.default)(property, value);
            var selector = generateCSSSelector2(className, pseudo);
            var change = {
              type: RULE_TYPE2,
              className,
              selector,
              declaration: declaration2,
              pseudo,
              media,
              support
            };
            renderer.cache[declarationReference] = change;
            renderer._emitChange(change);
          }
          var cachedClassName = renderer.cache[declarationReference].className;
          if (cachedClassName) {
            classNames2 += " " + cachedClassName;
          }
        }
      }
      return classNames2;
    };
    return renderer;
  }

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/node_modules/@fluentui/react-northstar-fela-renderer/dist/es/felaSanitizeCssPlugin.js
  var isValidCssValue = function isValidCssValue2(value) {
    if (typeof value !== "string") {
      return true;
    }
    var openingBrackets = "({[";
    var closingBrackets = ")}]";
    var openingBracketsStack = [];
    for (var i2 = 0; i2 < value.length; ++i2) {
      var currentCharacter = value[i2];
      if (openingBrackets.includes(currentCharacter)) {
        openingBracketsStack.push(currentCharacter);
      } else if (closingBrackets.includes(currentCharacter)) {
        var lastOpeningBracket = openingBracketsStack.pop();
        if (lastOpeningBracket && openingBrackets.indexOf(lastOpeningBracket) !== closingBrackets.indexOf(currentCharacter)) {
          return false;
        }
      }
    }
    return openingBracketsStack.length === 0;
  };
  var cssPropertiesToSkip = ["content", "keyframe"];
  var felaSanitizeCssPlugin = function felaSanitizeCssPlugin2(styles2, type, renderer, props) {
    if (!props.sanitizeCss) {
      return styles2;
    }
    var processedStyles = Array.isArray(styles2) ? [] : {};
    Object.keys(styles2).forEach(function(cssPropertyNameOrIndex) {
      var cssPropertyValue = styles2[cssPropertyNameOrIndex];
      if (typeof cssPropertyValue === "object") {
        processedStyles[cssPropertyNameOrIndex] = felaSanitizeCssPlugin2(cssPropertyValue, type, renderer, props);
        return;
      }
      var isPropertyToSkip = cssPropertiesToSkip.some(function(propToExclude) {
        return propToExclude === cssPropertyNameOrIndex;
      });
      if (isPropertyToSkip) {
        processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;
        return;
      }
      if (isValidCssValue(cssPropertyValue)) {
        processedStyles[cssPropertyNameOrIndex] = cssPropertyValue;
      } else if (true) {
        console.warn('fela-sanitize-css: An invalid value "' + cssPropertyValue + '" was passed to property "' + cssPropertyNameOrIndex + '"');
      }
    });
    return processedStyles;
  };

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/node_modules/@fluentui/react-northstar-fela-renderer/dist/es/felaStylisEnhancer.js
  var import_stylis2 = __toESM(require_stylis());
  var Stylis = import_stylis2.default.default || import_stylis2.default;
  var stylis = new Stylis({
    cascade: false,
    compress: false,
    global: false,
    keyframe: false,
    preserve: false,
    semicolon: false
  });
  var felaStylisEnhancer = function felaStylisEnhancer2(renderer) {
    var existingEmitChange = renderer._emitChange.bind(renderer);
    renderer._emitChange = function(change) {
      if (change.type === RULE_TYPE2) {
        var prefixed = stylis("", change.declaration);
        change.declaration = prefixed.slice(1, -1);
      }
      existingEmitChange(change);
    };
    return renderer;
  };

  // ../node_modules/fela-dom/es/dom/render.js
  var import_objectEach2 = __toESM(require_objectEach());

  // ../node_modules/fela-dom/es/dom/connection/createSubscription.js
  var import_objectEach = __toESM(require_objectEach());

  // ../node_modules/fela-dom/es/dom/connection/queryNode.js
  function queryNode(_ref) {
    var type = _ref.type, media = _ref.media, support = _ref.support;
    var targetDocument = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;
    var mediaQuery = media ? '[media="' + media + '"]' : ":not([media])";
    var supportQuery = support ? '[data-fela-support="true"]' : ':not([data-fela-support="true"])';
    return targetDocument.querySelector('[data-fela-type="' + type + '"]' + supportQuery + mediaQuery);
  }

  // ../node_modules/fela-dom/es/dom/connection/getNodeSibling.js
  function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
      for (var i2 = 0, arr2 = Array(arr.length); i2 < arr.length; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    } else {
      return Array.from(arr);
    }
  }
  function getNodeSibling(nodes, _ref, sortMediaQuery) {
    var type = _ref.type, media = _ref.media, support = _ref.support;
    switch (type) {
      case FONT_TYPE2:
      case STATIC_TYPE2:
      case KEYFRAME_TYPE2:
        return nodes[0];
      case RULE_TYPE2:
        var mediaNodes = nodes.map(function(node4) {
          return node4.media;
        });
        var filteredNodes = mediaNodes.filter(function(m2) {
          return m2.length !== 0;
        });
        if (media) {
          var sorted = [].concat(_toConsumableArray(filteredNodes), [media]).sort(sortMediaQuery);
          var index2 = sorted.indexOf(media) + 1;
          var insertMedia = sorted[index2];
          if (insertMedia) {
            if (insertMedia === media && support) {
              return nodes.find(function(el) {
                return el.media === sorted[sorted.indexOf(media) + 2];
              });
            }
            return nodes.find(function(el) {
              return el.media === insertMedia;
            });
          }
        } else {
          var _sorted = filteredNodes.sort(sortMediaQuery);
          var _insertMedia = _sorted[0];
          if (!support) {
            var supportNode = nodes.find(function(el) {
              return el.getAttribute("data-fela-support") !== void 0 && el.media === "" && el.getAttribute("data-fela-type") === "RULE";
            });
            if (supportNode) {
              return supportNode;
            }
          }
          if (_insertMedia) {
            return nodes.find(function(el) {
              return el.media === _insertMedia;
            });
          }
        }
    }
  }

  // ../node_modules/fela-dom/es/dom/connection/createNode.js
  var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  function _toConsumableArray2(arr) {
    if (Array.isArray(arr)) {
      for (var i2 = 0, arr2 = Array(arr.length); i2 < arr.length; i2++) {
        arr2[i2] = arr[i2];
      }
      return arr2;
    } else {
      return Array.from(arr);
    }
  }
  function createNode(attributes) {
    var targetDocument = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;
    var sortMediaQuery = arguments[2];
    var styleNodeAttributes = arguments[3];
    var head = targetDocument.head || {};
    var type = attributes.type, media = attributes.media, support = attributes.support;
    var node4 = targetDocument.createElement("style");
    node4.setAttribute("data-fela-type", type);
    node4.type = "text/css";
    if (support) {
      node4.setAttribute("data-fela-support", "true");
    }
    if (media) {
      node4.media = media;
    }
    for (var attribute in styleNodeAttributes) {
      node4.setAttribute(attribute, styleNodeAttributes[attribute]);
    }
    if ((typeof window === "undefined" ? "undefined" : _typeof2(window)) !== void 0 && window.FelaConfig) {
      for (var _attribute in window.FelaConfig.styleNodeAttributes) {
        node4.setAttribute(_attribute, window.FelaConfig.styleNodeAttributes[_attribute]);
      }
    }
    var nodes = head.querySelectorAll("[data-fela-type]");
    var sibling = getNodeSibling([].concat(_toConsumableArray2(nodes)), attributes, sortMediaQuery);
    if (sibling) {
      head.insertBefore(node4, sibling);
    } else {
      head.appendChild(node4);
    }
    return node4;
  }

  // ../node_modules/fela-dom/es/dom/connection/getNodeFromCache.js
  function getReference(_ref) {
    var type = _ref.type, _ref$media = _ref.media, media = _ref$media === void 0 ? "" : _ref$media, _ref$support = _ref.support, support = _ref$support === void 0 ? "" : _ref$support;
    return type + media + support;
  }
  function getNodeFromCache(attributes, renderer) {
    var targetDocument = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : document;
    var reference = getReference(attributes);
    if (!renderer.nodes[reference]) {
      var node4 = queryNode(attributes, targetDocument) || createNode(attributes, targetDocument, renderer.sortMediaQuery, renderer.styleNodeAttributes);
      renderer.nodes[reference] = node4;
    }
    return renderer.nodes[reference];
  }

  // ../node_modules/fela-dom/es/dom/connection/insertRule.js
  function insertRule(_ref, renderer, node4) {
    var selector = _ref.selector, declaration2 = _ref.declaration, support = _ref.support, media = _ref.media, pseudo = _ref.pseudo;
    var nodeReference = media + support;
    try {
      var score = getRuleScore(renderer.ruleOrder, pseudo);
      var cssRules2 = node4.sheet.cssRules;
      var index2 = cssRules2.length;
      if (score === 0) {
        if (renderer.scoreIndex[nodeReference] === void 0) {
          index2 = 0;
        } else {
          index2 = renderer.scoreIndex[nodeReference] + 1;
        }
      } else {
        var startIndex = renderer.scoreIndex[nodeReference] || 0;
        for (var i2 = startIndex, len = cssRules2.length; i2 < len; ++i2) {
          if (cssRules2[i2].score > score) {
            index2 = i2;
            break;
          }
        }
      }
      var cssRule = generateCSSRule(selector, declaration2);
      if (support.length > 0) {
        var cssSupportRule = generateCSSSupportRule(support, cssRule);
        node4.sheet.insertRule(cssSupportRule, index2);
      } else {
        node4.sheet.insertRule(cssRule, index2);
      }
      if (score === 0) {
        renderer.scoreIndex[nodeReference] = index2;
      }
      cssRules2[index2].score = score;
    } catch (e2) {
    }
  }

  // ../node_modules/fela-dom/es/dom/connection/createSubscription.js
  function createSubscription(renderer) {
    var targetDocument = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;
    return function(change) {
      if (change.type === CLEAR_TYPE2) {
        (0, import_objectEach.default)(renderer.nodes, function(node5) {
          return node5.parentNode.removeChild(node5);
        });
        renderer.nodes = {};
        renderer.scoreIndex = {};
        return;
      }
      var node4 = getNodeFromCache(change, renderer, targetDocument);
      switch (change.type) {
        case KEYFRAME_TYPE2:
          if (node4.textContent.indexOf(change.keyframe) === -1) {
            node4.textContent += change.keyframe;
          }
          break;
        case FONT_TYPE2:
          if (node4.textContent.indexOf(change.fontFace) === -1) {
            node4.textContent += change.fontFace;
          }
          break;
        case STATIC_TYPE2:
          var css3 = change.selector ? generateCSSRule(change.selector, change.css) : change.css;
          if (node4.textContent.indexOf(css3) === -1) {
            node4.textContent += css3;
          }
          break;
        case RULE_TYPE2:
          insertRule(change, renderer, node4);
          break;
        default:
          break;
      }
    };
  }

  // ../node_modules/fela-dom/es/dom/render.js
  function render(renderer, targetDocument) {
    if (!renderer.updateSubscription) {
      renderer.scoreIndex = {};
      renderer.nodes = {};
      renderer.updateSubscription = createSubscription(renderer, targetDocument);
      renderer.subscribe(renderer.updateSubscription);
      (0, import_objectEach2.default)(renderer.cache, renderer._emitChange);
    }
  }

  // ../node_modules/fela-dom/es/dom/rehydrate.js
  var import_arrayEach2 = __toESM(require_arrayEach2());

  // ../node_modules/fela-dom/es/dom/rehydration/extractSupportQuery.js
  function extractSupportQuery(ruleSet) {
    return ruleSet.split("{")[0].slice(9).trim();
  }

  // ../node_modules/css-in-js-utils/es/camelCaseProperty.js
  var DASH = /-([a-z])/g;
  var MS2 = /^Ms/g;
  var cache2 = {};
  function toUpper(match2) {
    return match2[1].toUpperCase();
  }
  function camelCaseProperty2(property) {
    if (cache2.hasOwnProperty(property)) {
      return cache2[property];
    }
    var camelProp = property.replace(DASH, toUpper).replace(MS2, "ms");
    cache2[property] = camelProp;
    return camelProp;
  }

  // ../node_modules/fela-dom/es/dom/rehydration/generateCacheEntry.js
  function generateCacheEntry(type, className, property, value) {
    var pseudo = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "";
    var media = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : "";
    var support = arguments.length > 6 && arguments[6] !== void 0 ? arguments[6] : "";
    var specificityPrefix = arguments.length > 7 && arguments[7] !== void 0 ? arguments[7] : "";
    return {
      type,
      className,
      selector: generateCSSSelector2(className, pseudo, specificityPrefix),
      declaration: property + ":" + value,
      pseudo,
      media,
      support
    };
  }

  // ../node_modules/fela-dom/es/dom/rehydration/rehydrateRules.js
  var _slicedToArray2 = function() {
    function sliceIterator(arr, i2) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"])
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    return function(arr, i2) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i2);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();
  function escapeRegExp(string4) {
    return string4.replace(/[.*+\-?^${}()|[\]\\]/g, "\\$&");
  }
  var regexMap = {};
  function getRegex(specificityPrefix) {
    if (!regexMap[specificityPrefix]) {
      regexMap[specificityPrefix] = new RegExp(escapeRegExp(specificityPrefix) + "[.]([0-9a-z_-]+)([.][0-9a-z_-]+){0,}([^{]+)?{([^:]+):([^}]+)}", "gi");
    }
    return regexMap[specificityPrefix];
  }
  function rehydrateRules(css3) {
    var media = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    var support = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    var cache3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
    var specificityPrefix = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : "";
    var decl = void 0;
    var DECL_REGEX = getRegex(specificityPrefix);
    while (decl = DECL_REGEX.exec(css3)) {
      var _decl = decl, _decl2 = _slicedToArray2(_decl, 6), ruleSet = _decl2[0], className = _decl2[1], _2 = _decl2[2], pseudo = _decl2[3], property = _decl2[4], value = _decl2[5];
      var declarationReference = generateDeclarationReference2(
        // keep css custom properties as lower-cased props
        property.indexOf("--") === 0 ? property : camelCaseProperty2(property),
        value,
        pseudo,
        media,
        support
      );
      cache3[declarationReference] = generateCacheEntry(RULE_TYPE2, className, property, value, pseudo, media, support, specificityPrefix);
    }
    return cache3;
  }

  // ../node_modules/fela-dom/es/dom/rehydration/rehydrateSupportRules.js
  var _slicedToArray3 = function() {
    function sliceIterator(arr, i2) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"])
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    return function(arr, i2) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i2);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();
  var SUPPORT_REGEX = /@supports[^{]+\{([\s\S]+?})\s*}/gi;
  function rehydrateSupportRules(css3) {
    var media = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    var cache3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var specificityPrefix = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "";
    var decl = void 0;
    while (decl = SUPPORT_REGEX.exec(css3)) {
      var _decl = decl, _decl2 = _slicedToArray3(_decl, 2), ruleSet = _decl2[0], cssRules2 = _decl2[1];
      var supportQuery = extractSupportQuery(ruleSet);
      rehydrateRules(cssRules2, media, supportQuery, cache3, specificityPrefix);
    }
    return cache3;
  }

  // ../node_modules/fela-dom/es/dom/rehydration/rehydrateKeyframes.js
  var _slicedToArray4 = function() {
    function sliceIterator(arr, i2) {
      var _arr = [];
      var _n = true;
      var _d = false;
      var _e = void 0;
      try {
        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
          _arr.push(_s.value);
          if (i2 && _arr.length === i2)
            break;
        }
      } catch (err) {
        _d = true;
        _e = err;
      } finally {
        try {
          if (!_n && _i["return"])
            _i["return"]();
        } finally {
          if (_d)
            throw _e;
        }
      }
      return _arr;
    }
    return function(arr, i2) {
      if (Array.isArray(arr)) {
        return arr;
      } else if (Symbol.iterator in Object(arr)) {
        return sliceIterator(arr, i2);
      } else {
        throw new TypeError("Invalid attempt to destructure non-iterable instance");
      }
    };
  }();
  var RE = /@(-webkit-|-moz-)?keyframes ([a-z_][a-z0-9-_]*)(\{.*?(?=}})}})/gi;
  function rehydrateKeyframes(css3) {
    var cache3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    var decl = void 0;
    while (decl = RE.exec(css3)) {
      var _decl = decl, _decl2 = _slicedToArray4(_decl, 4), keyframe86 = _decl2[0], prefix2 = _decl2[1], animationName = _decl2[2], reference = _decl2[3];
      if (!cache3[reference]) {
        cache3[reference] = {
          type: KEYFRAME_TYPE2,
          keyframe: keyframe86,
          name: animationName
        };
      } else {
        cache3[reference].keyframe += keyframe86;
      }
    }
    return cache3;
  }

  // ../node_modules/fela-dom/es/dom/rehydrate.js
  var CLASSNAME_REGEX = /[.][a-z0-9_-]*/gi;
  function rehydrate(renderer) {
    var targetDocument = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;
    render(renderer, targetDocument);
    (0, import_arrayEach2.default)(targetDocument.querySelectorAll("[data-fela-type]"), function(node4) {
      var rehydrationAttribute = node4.getAttribute("data-fela-rehydration") || -1;
      var rehydrationIndex = renderer.uniqueRuleIdentifier || parseInt(rehydrationAttribute, 10);
      if (rehydrationIndex !== -1) {
        var type = node4.getAttribute("data-fela-type") || "";
        var media = node4.getAttribute("media") || "";
        var support = node4.getAttribute("data-fela-support") || "";
        var css3 = node4.textContent;
        renderer.uniqueRuleIdentifier = rehydrationIndex;
        var reference = type + media + support;
        renderer.nodes[reference] = node4;
        if (type === RULE_TYPE2) {
          if (support) {
            rehydrateSupportRules(css3, media, renderer.cache, renderer.specificityPrefix);
          } else {
            rehydrateRules(css3, media, "", renderer.cache, renderer.specificityPrefix);
          }
          if (node4.sheet && node4.sheet.cssRules) {
            var nodeReference = media + support;
            (0, import_arrayEach2.default)(node4.sheet.cssRules, function(rule, index2) {
              var selectorText = rule.conditionText ? rule.cssRules[0].selectorText : rule.selectorText;
              var score = getRuleScore(renderer.ruleOrder, selectorText.split(CLASSNAME_REGEX)[1]);
              if (score === 0) {
                renderer.scoreIndex[nodeReference] = index2;
              }
              rule.score = score;
            });
          }
        } else if (type === KEYFRAME_TYPE2) {
          rehydrateKeyframes(css3, renderer.cache);
        }
      }
    });
  }

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/node_modules/@fluentui/react-northstar-fela-renderer/dist/es/RendererProvider.js
  var React183 = __toESM(require_react());
  function hasDOM(renderer, targetDocument) {
    if (typeof document === "undefined") {
      return false;
    }
    var doc = targetDocument || document;
    return renderer && doc && doc.createElement;
  }
  function hasServerRenderedStyle(targetDocument) {
    if (targetDocument === void 0) {
      targetDocument = document;
    }
    return targetDocument.querySelectorAll("[data-fela-type]").length > 0;
  }
  var RendererProvider2 = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(RendererProvider3, _React$Component);
    function RendererProvider3(props) {
      var _this;
      _this = _React$Component.call(this, props) || this;
      _this._renderStyle();
      return _this;
    }
    var _proto = RendererProvider3.prototype;
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (prevProps.renderer !== this.props.renderer) {
        this._renderStyle();
      }
    };
    _proto._renderStyle = function _renderStyle() {
      var _this$props = this.props, renderer = _this$props.renderer, shouldRehydrate = _this$props.rehydrate, targetDocument = _this$props.targetDocument;
      if (hasDOM(renderer, targetDocument)) {
        if (shouldRehydrate && hasServerRenderedStyle(targetDocument)) {
          rehydrate(renderer, targetDocument);
        } else {
          render(renderer, targetDocument);
        }
      }
    };
    _proto.render = function render2() {
      return /* @__PURE__ */ React183.createElement(React183.Fragment, null, this.props.children);
    };
    return RendererProvider3;
  }(React183.Component);

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/node_modules/@fluentui/react-northstar-fela-renderer/dist/es/createFelaRenderer.js
  var felaDevMode = false;
  try {
    felaDevMode = !!window.localStorage.felaDevMode;
  } catch (_unused) {
  }
  if (typeof window !== "undefined" && true && true) {
    if (felaDevMode) {
      console.warn(["@fluentui/react-northstar:", "You are running Fela in development mode and this can cause performance degrades.", "To disable it please paste `delete window.localStorage.felaDevMode` to your browsers console and reload current page."].join(" "));
    } else {
      console.warn(["@fluentui/react-northstar:", "You are running Fela in production mode.", "This limits your ability to edit styles in browsers development tools.", "To enable development mode please paste `window.localStorage.felaDevMode = true` to your browsers console and reload the page."].join(" "));
    }
  }
  var blocklistedClassNames = [
    // Blocklist contains a list of classNames that are used by FontAwesome
    // https://fontawesome.com/how-to-use/on-the-web/referencing-icons/basic-use
    "fa",
    "fas",
    "far",
    "fal",
    "fab",
    // Used by https://github.com/fullcalendar/fullcalendar
    "fc",
    // .cke is used by CKEditor
    "ck",
    "cke"
  ];
  var filterClassName = function filterClassName2(className) {
    return className.indexOf("ad") === -1 && blocklistedClassNames.indexOf(className) === -1;
  };
  var rendererConfig = {
    devMode: felaDevMode,
    filterClassName,
    enhancers: [felaPerformanceEnhancer, felaFocusVisibleEnhancer, felaStylisEnhancer],
    plugins: [
      felaDisableAnimationsPlugin,
      // is necessary to prevent accidental style typos
      // from breaking ALL the styles on the page
      felaSanitizeCssPlugin,
      placeholderPrefixer(),
      felaInvokeKeyframesPlugin,
      es_default(),
      felaExpandCssShorthandsPlugin,
      // Heads up!
      // This is required after fela-plugin-prefixer to resolve the array of fallback values prefixer produces.
      es_default2(),
      rtl()
    ]
  };
  function createFelaRenderer(options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, nonce = _options.nonce;
    return function() {
      var felaRenderer = createRenderer(rendererConfig);
      var usedRenderers = 0;
      if (nonce) {
        felaRenderer.styleNodeAttributes = {
          nonce
        };
      }
      var Provider3 = function Provider4(props) {
        return /* @__PURE__ */ React184.createElement(RendererProvider2, {
          renderer: felaRenderer,
          rehydrate: false,
          targetDocument: props.target
        }, props.children);
      };
      return {
        registerUsage: function registerUsage2() {
          usedRenderers += 1;
        },
        unregisterUsage: function unregisterUsage2() {
          usedRenderers -= 1;
          if (usedRenderers === 0) {
            felaRenderer.listeners = [];
            felaRenderer.nodes = {};
            felaRenderer.updateSubscription = void 0;
          }
        },
        renderFont: function renderFont2(font) {
          felaRenderer.renderFont(font.name, font.paths, font.props);
        },
        renderGlobal: felaRenderer.renderStatic,
        renderRule: function renderRule2(styles2, param) {
          var felaParam = Object.assign({}, param, {
            theme: {
              direction: param.direction
            }
          });
          return felaRenderer.renderRule(function() {
            return styles2;
          }, felaParam);
        },
        // getOriginalRenderer() is implemented only for tests to be compatible with jest-react-fela expectations.
        getOriginalRenderer: function getOriginalRenderer() {
          if (true) {
            throw new Error("This method implements private API and can be used only in tests");
          }
          return felaRenderer;
        },
        Provider: Provider3
      };
    };
  }

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/renderer/RendererContext.js
  var React185 = __toESM(require_react());
  var RendererContext2 = /* @__PURE__ */ React185.createContext(createFelaRenderer());

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-bindings/dist/es/telemetry/types.js
  var Telemetry = /* @__PURE__ */ function() {
    function Telemetry2() {
      this.performance = void 0;
      this.enabled = void 0;
      this.performance = {};
      this.enabled = true;
    }
    var _proto = Telemetry2.prototype;
    _proto.reset = function reset() {
      this.performance = {};
    };
    return Telemetry2;
  }();

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-icons-northstar/dist/es/utils/createSvgIcon.js
  var React186 = __toESM(require_react());
  var svgIconClassName = "ui-icon";

  // ../node_modules/@fluentui/react-northstar/node_modules/@fluentui/react-icons-northstar/dist/es/utils/iconClassNames.js
  var iconClassNames = {
    filled: "ui-icon__filled",
    outline: "ui-icon__outline"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/animations/timingFunctions.js
  var accelerateMax = "cubic-bezier(1,0,1,1)";
  var decelerateMax = "cubic-bezier(0,0,0,1)";
  var linear = "cubic-bezier(0,0,1,1)";

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/animations/durations.js
  var ultraFast = "50ms";
  var faster = "100ms";
  var fast = "150ms";
  var normal = "200ms";
  var slow = "300ms";
  var slower = "400ms";
  var ultraSlow = "500ms";

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/animations/scale.js
  var scaleAnimations = {
    // Scale in w/ fade- UltraFast
    scaleEnterUltraFast: {
      keyframe: function keyframe(_ref) {
        var delta = _ref.delta;
        return {
          "0%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "scale(1)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0.88
      },
      duration: ultraFast,
      timingFunction: decelerateMax,
      fillMode: "forwards"
    },
    // Scale in w/ fade- Faster
    scaleEnterFaster: {
      keyframe: function keyframe2(_ref2) {
        var delta = _ref2.delta;
        return {
          "0%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "scale(1)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0.88
      },
      duration: faster,
      timingFunction: decelerateMax,
      fillMode: "forwards"
    },
    // Scale in w/ fade- Fast
    scaleEnterFast: {
      keyframe: function keyframe3(_ref3) {
        var delta = _ref3.delta;
        return {
          "0%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "scale(1)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0.88
      },
      duration: fast,
      timingFunction: decelerateMax,
      fillMode: "forwards"
    },
    // Scale in  w/ fade- Normal
    scaleEnterNormal: {
      keyframe: function keyframe4(_ref4) {
        var delta = _ref4.delta;
        return {
          "0%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "scale(1)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0.88
      },
      duration: normal,
      timingFunction: decelerateMax,
      fillMode: "forwards"
    },
    // Scale in w/ fade - Slow
    scaleEnterSlow: {
      keyframe: function keyframe5(_ref5) {
        var delta = _ref5.delta;
        return {
          "0%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "scale(1)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0.88
      },
      duration: slow,
      timingFunction: decelerateMax,
      fillMode: "forwards"
    },
    // Scale in w/ fade - Slower
    scaleEnterSlower: {
      keyframe: function keyframe6(_ref6) {
        var delta = _ref6.delta;
        return {
          "0%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "scale(1)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0.88
      },
      duration: slower,
      timingFunction: decelerateMax,
      fillMode: "forwards"
    },
    // Scale in w/ fade - UlrtaSlow
    scaleEnterUltraSlow: {
      keyframe: function keyframe7(_ref7) {
        var delta = _ref7.delta;
        return {
          "0%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "scale(1)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0.88
      },
      duration: ultraSlow,
      timingFunction: decelerateMax,
      fillMode: "forwards"
    },
    // Scale Out w/ Fade - UltraFast
    scaleExitUltraFast: {
      keyframe: function keyframe8(_ref8) {
        var delta = _ref8.delta;
        return {
          "0%": {
            transform: "scale(1)",
            opacity: 1
          },
          "100%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: 0.9
      },
      duration: ultraFast,
      timingFunction: accelerateMax,
      fillMode: "forwards"
    },
    // Scale Out w/ Fade - Faster
    scaleExitFaster: {
      keyframe: function keyframe9(_ref9) {
        var delta = _ref9.delta;
        return {
          "0%": {
            transform: "scale(1)",
            opacity: 1
          },
          "100%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: 0.9
      },
      duration: faster,
      timingFunction: accelerateMax,
      fillMode: "forwards"
    },
    // Scale Out w/ Fade - Fast
    scaleExitFast: {
      keyframe: function keyframe10(_ref10) {
        var delta = _ref10.delta;
        return {
          "0%": {
            transform: "scale(1)",
            opacity: 1
          },
          "100%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: 0.9
      },
      duration: fast,
      timingFunction: accelerateMax,
      fillMode: "forwards"
    },
    // Scale Out w/ Fade - Normal
    scaleExitNormal: {
      keyframe: function keyframe11(_ref11) {
        var delta = _ref11.delta;
        return {
          "0%": {
            transform: "scale(1)",
            opacity: 1
          },
          "100%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: 0.9
      },
      duration: normal,
      timingFunction: accelerateMax,
      fillMode: "forwards"
    },
    // Scale Out w/ Fade - Slow
    scaleExitSlow: {
      keyframe: function keyframe12(_ref12) {
        var delta = _ref12.delta;
        return {
          "0%": {
            transform: "scale(1)",
            opacity: 1
          },
          "100%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: 0.9
      },
      duration: slow,
      timingFunction: accelerateMax,
      fillMode: "forwards"
    },
    // Scale Out w/ Fade - Slower
    scaleExitSlower: {
      keyframe: function keyframe13(_ref13) {
        var delta = _ref13.delta;
        return {
          "0%": {
            transform: "scale(1)",
            opacity: 1
          },
          "100%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: 0.9
      },
      duration: slower,
      timingFunction: accelerateMax,
      fillMode: "forwards"
    },
    // Scale Out w/ Fade - UltraSlow
    scaleExitUltraSlow: {
      keyframe: function keyframe14(_ref14) {
        var delta = _ref14.delta;
        return {
          "0%": {
            transform: "scale(1)",
            opacity: 1
          },
          "100%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: 0.9
      },
      duration: ultraSlow,
      timingFunction: accelerateMax,
      fillMode: "forwards"
    },
    scaleDownSoft: {
      keyframe: function keyframe15(_ref15) {
        var delta = _ref15.delta;
        return {
          "0%": {
            transform: "scale(1)",
            opacity: 1
          },
          "100%": {
            transform: "scale(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: 0.9
      },
      duration: "100ms",
      timingFunction: "cubic-bezier(.78, 0, .22, 1)",
      fillMode: "both"
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/animations/fade.js
  var fadeInOutAnimations = {
    // Fade Ins
    // Basic Fade In Animation -- Ultra Fast
    fadeEnterUltraFast: {
      keyframe: function keyframe16(_ref) {
        var delta = _ref.delta;
        return {
          "0%": {
            opacity: delta
          },
          "100%": {
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: ultraFast,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade In Animation -- Faster
    fadeEnterFaster: {
      keyframe: function keyframe17(_ref2) {
        var delta = _ref2.delta;
        return {
          "0%": {
            opacity: delta
          },
          "100%": {
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: faster,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade In Animation -- Fast
    fadeEnterFast: {
      keyframe: function keyframe18(_ref3) {
        var delta = _ref3.delta;
        return {
          "0%": {
            opacity: delta
          },
          "100%": {
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: fast,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade In Animation --Normal
    fadeEnterNormal: {
      keyframe: function keyframe19(_ref4) {
        var delta = _ref4.delta;
        return {
          "0%": {
            opacity: delta
          },
          "100%": {
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: normal,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade In Animation --Slow
    fadeEnterSlow: {
      keyframe: function keyframe20(_ref5) {
        var delta = _ref5.delta;
        return {
          "0%": {
            opacity: delta
          },
          "100%": {
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: slow,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade In Animation --Slow
    fadeEnterSlower: {
      keyframe: function keyframe21(_ref6) {
        var delta = _ref6.delta;
        return {
          "0%": {
            opacity: delta
          },
          "100%": {
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: slower,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade In Animation --UltraSlow
    fadeEnterUltraSlow: {
      keyframe: function keyframe22(_ref7) {
        var delta = _ref7.delta;
        return {
          "0%": {
            opacity: delta
          },
          "100%": {
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: ultraSlow,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Fade Outs
    // Basic Fade Out Animation --UltraFast
    fadeExitUltraFast: {
      keyframe: function keyframe23(_ref8) {
        var delta = _ref8.delta;
        return {
          "0%": {
            opacity: 1
          },
          "100%": {
            opacity: delta
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: ultraFast,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade Out Animation --Faster
    fadeExitFaster: {
      keyframe: function keyframe24(_ref9) {
        var delta = _ref9.delta;
        return {
          "0%": {
            opacity: 1
          },
          "100%": {
            opacity: delta
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: faster,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade Out Animation --Fast
    fadeExitFast: {
      keyframe: function keyframe25(_ref10) {
        var delta = _ref10.delta;
        return {
          "0%": {
            opacity: 1
          },
          "100%": {
            opacity: delta
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: fast,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade Out Animation --Normal
    fadeExitNormal: {
      keyframe: function keyframe26(_ref11) {
        var delta = _ref11.delta;
        return {
          "0%": {
            opacity: 1
          },
          "100%": {
            opacity: delta
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: normal,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade Out Animation --Slow
    fadeExitSlow: {
      keyframe: function keyframe27(_ref12) {
        var delta = _ref12.delta;
        return {
          "0%": {
            opacity: 1
          },
          "100%": {
            opacity: delta
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: slow,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade Out Animation --Slower
    fadeExitSlower: {
      keyframe: function keyframe28(_ref13) {
        var delta = _ref13.delta;
        return {
          "0%": {
            opacity: 1
          },
          "100%": {
            opacity: delta
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: slower,
      timingFunction: linear,
      fillMode: "forwards"
    },
    // Basic Fade Out Animation --UltraSlow
    fadeExitUltraSlow: {
      keyframe: function keyframe29(_ref14) {
        var delta = _ref14.delta;
        return {
          "0%": {
            opacity: 1
          },
          "100%": {
            opacity: delta
          }
        };
      },
      keyframeParams: {
        delta: 0
      },
      duration: ultraSlow,
      timingFunction: linear,
      fillMode: "forwards"
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/animations/slide.js
  var slideAnimations = {
    // Slide Down Animations
    // Slides object down to original position --ultrafast
    slideDownEnterUltraFast: {
      keyframe: function keyframe30(_ref) {
        var delta = _ref.delta;
        return {
          "0%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraFast,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object down to original position -Faster
    slideDownEnterFaster: {
      keyframe: function keyframe31(_ref2) {
        var delta = _ref2.delta;
        return {
          "0%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: faster,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object down to original position -fast
    slideDownEnterFast: {
      keyframe: function keyframe32(_ref3) {
        var delta = _ref3.delta;
        return {
          "0%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: fast,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from top to bottom --normal
    slideDownEnterNormal: {
      keyframe: function keyframe33(_ref4) {
        var delta = _ref4.delta;
        return {
          "0%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: normal,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from top to bottom --slow
    slideDownEnterSlow: {
      keyframe: function keyframe34(_ref5) {
        var delta = _ref5.delta;
        return {
          "0%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slow,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from top to bottom --slower
    slideDownEnterSlower: {
      keyframe: function keyframe35(_ref6) {
        var delta = _ref6.delta;
        return {
          "0%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slower,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from top to bottom - Slow
    slideDownEnterUltraSlow: {
      keyframe: function keyframe36(_ref7) {
        var delta = _ref7.delta;
        return {
          "0%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraSlow,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Up Animations
    // Slides object in from top to bottom --ultrafast
    slideUpEnterUltraFast: {
      keyframe: function keyframe37(_ref8) {
        var delta = _ref8.delta;
        return {
          "0%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraFast,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from top to bottom --faster
    slideUpEnterFaster: {
      keyframe: function keyframe38(_ref9) {
        var delta = _ref9.delta;
        return {
          "0%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: faster,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from top to bottom --fast
    slideUpEnterFast: {
      keyframe: function keyframe39(_ref10) {
        var delta = _ref10.delta;
        return {
          "0%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: fast,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from down to up-normal
    slideUpEnterNormal: {
      keyframe: function keyframe40(_ref11) {
        var delta = _ref11.delta;
        return {
          "0%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: normal,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from top to bottom --slow
    slideUpEnterSlow: {
      keyframe: function keyframe41(_ref12) {
        var delta = _ref12.delta;
        return {
          "0%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slow,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from bottom to top - slower
    slideUpEnterSlower: {
      keyframe: function keyframe42(_ref13) {
        var delta = _ref13.delta;
        return {
          "0%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slower,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from bottom to top - ultraslow
    slideUpEnterUltraSlow: {
      keyframe: function keyframe43(_ref14) {
        var delta = _ref14.delta;
        return {
          "0%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateY(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraSlow,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // ---Horizontal Slide Animations---- //
    // Slide Left Animations
    // Slides object in from right to left --ultrafast
    slideLeftEnterUltraFast: {
      keyframe: function keyframe44(_ref15) {
        var delta = _ref15.delta;
        return {
          "0%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraFast,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from right to left -faster
    slideLeftEnterFaster: {
      keyframe: function keyframe45(_ref16) {
        var delta = _ref16.delta;
        return {
          "0%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: faster,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from right to left -Fast
    slideLeftEnterFast: {
      keyframe: function keyframe46(_ref17) {
        var delta = _ref17.delta;
        return {
          "0%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: fast,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from right to left -Normal
    slideLeftEnterNormal: {
      keyframe: function keyframe47(_ref18) {
        var delta = _ref18.delta;
        return {
          "0%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "200px"
      },
      duration: normal,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from right to left -Slow
    slideLeftEnterSlow: {
      keyframe: function keyframe48(_ref19) {
        var delta = _ref19.delta;
        return {
          "0%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slow,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from right to left - slower
    slideLeftEnterSlower: {
      keyframe: function keyframe49(_ref20) {
        var delta = _ref20.delta;
        return {
          "0%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slower,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from right to left - ultraslow
    slideLeftEnterUltraSlow: {
      keyframe: function keyframe50(_ref21) {
        var delta = _ref21.delta;
        return {
          "0%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraSlow,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Right Animations
    // Slides object in from left to right -ultrafast
    slideRightEnterUltraFast: {
      keyframe: function keyframe51(_ref22) {
        var delta = _ref22.delta;
        return {
          "0%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraFast,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from left to right - Faster
    slideRightEnterFaster: {
      keyframe: function keyframe52(_ref23) {
        var delta = _ref23.delta;
        return {
          "0%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: faster,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from left to right -fast
    slideRightEnterFast: {
      keyframe: function keyframe53(_ref24) {
        var delta = _ref24.delta;
        return {
          "0%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: fast,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from left to right -normal
    slideRightEnterNormal: {
      keyframe: function keyframe54(_ref25) {
        var delta = _ref25.delta;
        return {
          "0%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "200px"
      },
      duration: normal,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from left to right -slow
    slideRightEnterSlow: {
      keyframe: function keyframe55(_ref26) {
        var delta = _ref26.delta;
        return {
          "0%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slow,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from left to right- slower
    slideRightEnterSlower: {
      keyframe: function keyframe56(_ref27) {
        var delta = _ref27.delta;
        return {
          "0%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slower,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slides object in from left to right- ultraslow
    slideRightEnterUltraSlow: {
      keyframe: function keyframe57(_ref28) {
        var delta = _ref28.delta;
        return {
          "0%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          },
          "100%": {
            transform: "translateX(0px)",
            opacity: 1
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraSlow,
      timingFunction: decelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Exit Animation///
    // Slide Down - Exit - UltraFast
    slideDownExitUltraFast: {
      keyframe: function keyframe58(_ref29) {
        var delta = _ref29.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraFast,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Down - Exit - Faster
    slideDownExitFaster: {
      keyframe: function keyframe59(_ref30) {
        var delta = _ref30.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: faster,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Down - Exit - Fast
    slideDownExitFast: {
      keyframe: function keyframe60(_ref31) {
        var delta = _ref31.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: fast,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Down - Exit - Normal
    slideDownExitNormal: {
      keyframe: function keyframe61(_ref32) {
        var delta = _ref32.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: normal,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Down - Exit - Slow
    slideDownExitSlow: {
      keyframe: function keyframe62(_ref33) {
        var delta = _ref33.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slow,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Down - Exit - Slower
    slideDownExitSlower: {
      keyframe: function keyframe63(_ref34) {
        var delta = _ref34.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slower,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Down - Exit - Ultraslow
    slideDownExitUltraSlow: {
      keyframe: function keyframe64(_ref35) {
        var delta = _ref35.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraSlow,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Up - Exit- Animations
    // Slide Up - Exit - UltraFast
    slideUpExitUltraFast: {
      keyframe: function keyframe65(_ref36) {
        var delta = _ref36.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraFast,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Up - Exit - Faster
    slideUpExitFaster: {
      keyframe: function keyframe66(_ref37) {
        var delta = _ref37.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: faster,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Up - Exit - Fast
    slideUpExitFast: {
      keyframe: function keyframe67(_ref38) {
        var delta = _ref38.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: fast,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Up - Exit - Normal
    slideUpExitNormal: {
      keyframe: function keyframe68(_ref39) {
        var delta = _ref39.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: normal,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Up - Exit - Slow
    slideUpExitSlow: {
      keyframe: function keyframe69(_ref40) {
        var delta = _ref40.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slow,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Up - Exit - Slower
    slideUpExitSlower: {
      keyframe: function keyframe70(_ref41) {
        var delta = _ref41.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slower,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Up - Exit - Ultra Slow
    slideUpExitUltraSlow: {
      keyframe: function keyframe71(_ref42) {
        var delta = _ref42.delta;
        return {
          "0%": {
            transform: "translateY(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateY(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraSlow,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Right Exit Animations
    // Slide Right Exit - Ultrafast
    slideRightExitUltraFast: {
      keyframe: function keyframe72(_ref43) {
        var delta = _ref43.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraFast,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Right Exit - Faster
    slideRightExitFaster: {
      keyframe: function keyframe73(_ref44) {
        var delta = _ref44.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: faster,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Right Exit - Fast
    slideRightExitFast: {
      keyframe: function keyframe74(_ref45) {
        var delta = _ref45.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: fast,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Right Exit - Normal
    slideRightExitNormal: {
      keyframe: function keyframe75(_ref46) {
        var delta = _ref46.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: normal,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Right Exit - Slow
    slideRightExitSlow: {
      keyframe: function keyframe76(_ref47) {
        var delta = _ref47.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slow,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Right Exit - Ultrafast
    slideRightExitSlower: {
      keyframe: function keyframe77(_ref48) {
        var delta = _ref48.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slower,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Right Exit - Ultraslow
    slideRightExitUltraSlow: {
      keyframe: function keyframe78(_ref49) {
        var delta = _ref49.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraSlow,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Left Exit Aniamtions
    // Slide Left Exit -ultrafast
    slideLeftExitUltraFast: {
      keyframe: function keyframe79(_ref50) {
        var delta = _ref50.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraFast,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Left Exit -Faster
    slideLeftExitFaster: {
      keyframe: function keyframe80(_ref51) {
        var delta = _ref51.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: faster,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Left Exit -Fast
    slideLeftExitFast: {
      keyframe: function keyframe81(_ref52) {
        var delta = _ref52.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: fast,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Left Exit -Normal
    slideLeftExitNormal: {
      keyframe: function keyframe82(_ref53) {
        var delta = _ref53.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: normal,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Left Exit -Slow
    slideLeftExitSlow: {
      keyframe: function keyframe83(_ref54) {
        var delta = _ref54.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slow,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Left Exit -Slower
    slideLeftExitSlower: {
      keyframe: function keyframe84(_ref55) {
        var delta = _ref55.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: slower,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    },
    // Slide Left Exit -Ultraslow
    slideLeftExitUltraSlow: {
      keyframe: function keyframe85(_ref56) {
        var delta = _ref56.delta;
        return {
          "0%": {
            transform: "translateX(0px)",
            opacity: 1
          },
          "100%": {
            transform: "translateX(-" + delta + ")",
            opacity: 0
          }
        };
      },
      keyframeParams: {
        delta: "20px"
      },
      duration: ultraSlow,
      timingFunction: accelerateMax,
      direction: "forward",
      fillMode: "forwards"
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/animations/index.js
  var animations = Object.assign({}, fadeInOutAnimations, scaleAnimations, slideAnimations, {
    "carousel-slide-to-next-enter": slideAnimations.slideLeftEnterNormal,
    "carousel-slide-to-previous-enter": slideAnimations.slideRightEnterNormal,
    "popup-show": fadeInOutAnimations.fadeEnterUltraFast,
    "popup-hide": fadeInOutAnimations.fadeExitUltraFast
  });

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/siteVariables.js
  var siteVariables_exports = {};
  __export(siteVariables_exports, {
    bodyBackground: () => bodyBackground,
    bodyColor: () => bodyColor,
    bodyFontFamily: () => bodyFontFamily,
    bodyFontSize: () => bodyFontSize,
    bodyLineHeight: () => bodyLineHeight,
    bodyMargin: () => bodyMargin,
    bodyPadding: () => bodyPadding,
    borderRadiusMedium: () => borderRadiusMedium,
    borderRadiusSmall: () => borderRadiusSmall,
    borderRadiusXLarge: () => borderRadiusXLarge,
    borderWidth: () => borderWidth2,
    categoryColorScheme: () => categoryColorScheme,
    categoryColors: () => categoryColors,
    colorScheme: () => colorScheme,
    colors: () => colors,
    contextualColors: () => contextualColors,
    focusInnerBorderColor: () => focusInnerBorderColor,
    focusOuterBorderColor: () => focusOuterBorderColor,
    fontSizes: () => fontSizes2,
    fontWeightBold: () => fontWeightBold,
    fontWeightLight: () => fontWeightLight,
    fontWeightRegular: () => fontWeightRegular,
    fontWeightSemibold: () => fontWeightSemibold,
    fontWeightSemilight: () => fontWeightSemilight,
    lineHeightDefault: () => lineHeightDefault,
    lineHeightLarge: () => lineHeightLarge,
    lineHeightLarger: () => lineHeightLarger,
    lineHeightLargest: () => lineHeightLargest,
    lineHeightMedium: () => lineHeightMedium,
    lineHeightSmall: () => lineHeightSmall,
    lineHeightSmaller: () => lineHeightSmaller,
    naturalColors: () => naturalColors,
    primitiveColors: () => primitiveColors,
    shadow16: () => shadow16,
    shadow2: () => shadow2,
    shadow28: () => shadow28,
    shadow4: () => shadow4,
    shadow64: () => shadow64,
    shadow8: () => shadow8,
    shadowLevel1: () => shadowLevel1,
    shadowLevel1Dark: () => shadowLevel1Dark,
    shadowLevel2: () => shadowLevel2,
    shadowLevel3: () => shadowLevel3,
    shadowLevel4: () => shadowLevel4,
    transparentColors: () => transparentColors,
    zIndexes: () => zIndexes
  });

  // ../node_modules/@fluentui/react-northstar/dist/es/utils/stringLiteralsArray.js
  var stringLiteralsArray = function stringLiteralsArray2() {
    var tuple = function tuple2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return args;
    };
    return tuple.apply(void 0, arguments);
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/utils/isBrowser.js
  var hasDocument = typeof document === "object" && document !== null;
  var hasWindow = typeof window === "object" && window !== null && window.self === window;
  var isBrowser3 = function isBrowser4() {
    return hasDocument && hasWindow;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/utils/mergeProviderContexts.js
  var defaultDocument = {
    document: "document"
  };
  var registeredRenderers = /* @__PURE__ */ new WeakMap();
  var getRenderer = function getRenderer2(createRenderer2, target) {
    var actualTarget = target || defaultDocument;
    if (!isBrowser3() || typeof target === "undefined") {
      actualTarget = defaultDocument;
    }
    if (isBrowser3() && target === document) {
      actualTarget = defaultDocument;
    }
    if (registeredRenderers.has(actualTarget)) {
      return registeredRenderers.get(actualTarget);
    }
    var createdRenderer = createRenderer2(actualTarget === defaultDocument ? void 0 : actualTarget);
    registeredRenderers.set(actualTarget, createdRenderer);
    return createdRenderer;
  };
  var mergePerformanceOptions = function mergePerformanceOptions2(target) {
    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      sources[_key - 1] = arguments[_key];
    }
    return Object.assign.apply(Object, [target].concat(sources));
  };
  var mergeBooleanValues = function mergeBooleanValues2(target) {
    for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      sources[_key2 - 1] = arguments[_key2];
    }
    return sources.reduce(function(acc, next2) {
      return typeof next2 === "boolean" ? next2 : acc;
    }, target);
  };
  var mergeProviderContexts = function mergeProviderContexts2(createRenderer2) {
    var emptyContext = {
      theme: {
        siteVariables: {
          fontSizes: {}
        },
        componentVariables: {},
        componentStyles: {},
        fontFaces: [],
        staticStyles: [],
        animations: {}
      },
      rtl: false,
      disableAnimations: false,
      target: isBrowser3() ? document : void 0,
      // eslint-disable-line no-undef
      performance: {
        enableSanitizeCssPlugin: true,
        enableStylesCaching: true,
        enableVariablesCaching: true,
        enableBooleanVariablesCaching: false
      },
      telemetry: void 0,
      renderer: void 0
    };
    for (var _len3 = arguments.length, contexts = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      contexts[_key3 - 1] = arguments[_key3];
    }
    return contexts.reduce(function(acc, next2) {
      if (!next2)
        return acc;
      acc.theme = mergeThemes2(acc.theme, next2.theme);
      var mergedRTL = mergeBooleanValues(acc.rtl, next2.rtl);
      if (typeof mergedRTL === "boolean") {
        acc.rtl = mergedRTL;
      }
      acc.target = next2.target || acc.target;
      acc.renderer = getRenderer(createRenderer2, acc.target);
      var mergedDisableAnimations = mergeBooleanValues(acc.disableAnimations, next2.disableAnimations);
      if (typeof mergedDisableAnimations === "boolean") {
        acc.disableAnimations = mergedDisableAnimations;
      }
      acc.performance = mergePerformanceOptions(acc.performance, next2.performance || {});
      acc.telemetry = next2.telemetry || acc.telemetry;
      return acc;
    }, emptyContext);
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/utils/fontSizeUtility.js
  var DEFAULT_REM_SIZE_IN_PX = 16;
  var _documentRemSize = null;
  var getDocumentRemSize = function getDocumentRemSize2() {
    if (isBrowser3()) {
      try {
        return getFontSizeValue(getComputedStyle(document.documentElement).fontSize) || DEFAULT_REM_SIZE_IN_PX;
      } catch (e2) {
        return DEFAULT_REM_SIZE_IN_PX;
      }
    }
    return DEFAULT_REM_SIZE_IN_PX;
  };
  var getFontSizeValue = function getFontSizeValue2(size) {
    return size && parseFloat(size) || null;
  };
  var round = function round2(n3) {
    return (n3 * 1e4 + (n3 > 0 ? 0.5 : -0.5) << 0) / 1e4;
  };
  var pxToRem = function pxToRem2(valueInPx, baseRemSize) {
    if (!baseRemSize && !_documentRemSize) {
      _documentRemSize = getDocumentRemSize();
    }
    var remSize = baseRemSize || _documentRemSize || DEFAULT_REM_SIZE_IN_PX;
    var convertedValueInRems = valueInPx / remSize;
    return round(convertedValueInRems) + "rem";
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/utils/whatInput.js
  var currentInput = "mouse";
  var eventTimer = null;
  var ignoreMap = [
    16,
    // shift
    17,
    // control
    18,
    // alt
    91,
    // Windows key / left Apple cmd
    93
    // Windows menu / right Apple cmd
  ];
  var whatInputInitialized = "whatInputInitialized";
  var inputMap = {
    keydown: "keyboard",
    keyup: "keyboard",
    mousedown: "mouse",
    mousemove: "mouse",
    MSPointerDown: "pointer",
    MSPointerMove: "pointer",
    pointerdown: "pointer",
    pointermove: "pointer",
    touchstart: "touch"
  };
  var isBuffering = false;
  var pointerMap = {
    2: "touch",
    3: "touch",
    // treat pen like touch
    4: "mouse"
  };
  var supportsPassive = false;
  try {
    opts = Object.defineProperty({}, "passive", {
      get: function get() {
        supportsPassive = true;
      }
    });
    window.addEventListener("test", null, opts);
  } catch (e2) {
  }
  var opts;
  var setUp = function setUp2() {
    inputMap[detectWheel()] = "mouse";
    addListeners(window);
    doUpdate(window.document);
  };
  var addListeners = function addListeners2(eventTarget) {
    var options = supportsPassive ? {
      passive: true,
      capture: true
    } : true;
    if (eventTarget.PointerEvent) {
      eventTarget.addEventListener("pointerdown", setInput);
    } else if (window.MSPointerEvent) {
      eventTarget.addEventListener("MSPointerDown", setInput);
    } else {
      eventTarget.addEventListener("mousedown", setInput, true);
      if ("ontouchstart" in eventTarget) {
        eventTarget.addEventListener("touchstart", eventBuffer, options);
        eventTarget.addEventListener("touchend", setInput, true);
      }
    }
    eventTarget.addEventListener("keydown", eventBuffer, true);
    eventTarget.addEventListener("keyup", eventBuffer, true);
  };
  var keyboardInputFocused = function keyboardInputFocused2(document4, eventKey) {
    if (document4.activeElement.tagName === "INPUT" || document4.activeElement.tagName === "TEXTAREA" || document4.activeElement.getAttribute("contenteditable")) {
      return eventKey === 9 || // tab
      eventKey === 117;
    }
    return true;
  };
  var setInput = function setInput2(event) {
    if (!isBuffering) {
      var eventKey = event.which;
      var value = inputMap[event.type];
      if (value === "pointer") {
        value = pointerType(event);
      }
      var ignoreMatch = ignoreMap.indexOf(eventKey) === -1;
      var shouldUpdate = value === "keyboard" && eventKey && ignoreMatch && keyboardInputFocused(event.view.document, eventKey) || value === "mouse" || value === "touch";
      if (currentInput !== value && shouldUpdate) {
        currentInput = value;
        if (true) {
          doUpdate(event.view.document);
        }
      }
    }
  };
  var doUpdate = function doUpdate2(target) {
    target.documentElement.setAttribute("data-whatinput", currentInput);
  };
  var eventBuffer = function eventBuffer2(event) {
    setInput(event);
    window.clearTimeout(eventTimer);
    isBuffering = true;
    eventTimer = window.setTimeout(function() {
      isBuffering = false;
    }, 100);
  };
  var pointerType = function pointerType2(event) {
    if (typeof event.pointerType === "number") {
      return pointerMap[event.pointerType];
    }
    return event.pointerType === "pen" ? "touch" : event.pointerType;
  };
  var detectWheel = function detectWheel2() {
    var wheelType;
    if ("onwheel" in document.createElement("div")) {
      wheelType = "wheel";
    } else {
      wheelType = // @ts-ignore
      document.onmousewheel !== void 0 ? "mousewheel" : "DOMMouseScroll";
    }
    return wheelType;
  };
  if (isBrowser3() && "addEventListener" in window && Array.prototype.indexOf) {
    setUp();
  }
  var setUpWhatInput = function setUpWhatInput2(target) {
    var targetWindow = target.defaultView;
    if (isBrowser3() && targetWindow && "addEventListener" in targetWindow && Array.prototype.indexOf) {
      var initializedTimes = target[whatInputInitialized];
      if (typeof initializedTimes === "number" && initializedTimes > 0) {
        target[whatInputInitialized] = initializedTimes + 1;
        return;
      }
      target[whatInputInitialized] = 1;
      addListeners(targetWindow);
      doUpdate(target);
    }
  };
  function cleanupWhatInput(eventTarget) {
    var options = supportsPassive ? {
      capture: true
    } : true;
    if (eventTarget.PointerEvent) {
      eventTarget.removeEventListener("pointerdown", setInput);
    } else if (window.MSPointerEvent) {
      eventTarget.removeEventListener("MSPointerDown", setInput);
    } else {
      eventTarget.removeEventListener("mousedown", setInput, true);
      if ("ontouchstart" in eventTarget) {
        eventTarget.removeEventListener("touchstart", eventBuffer, options);
        eventTarget.removeEventListener("touchend", setInput, true);
      }
    }
    eventTarget.removeEventListener("keydown", eventBuffer, true);
    eventTarget.removeEventListener("keyup", eventBuffer, true);
  }
  var tryCleanupWhatInput = function tryCleanupWhatInput2(target) {
    var targetWindow = target.defaultView;
    if (isBrowser3() && targetWindow && "removeEventListener" in targetWindow) {
      if (target[whatInputInitialized] === 1) {
        delete target[whatInputInitialized];
        cleanupWhatInput(targetWindow);
      } else {
        target[whatInputInitialized] = target[whatInputInitialized] - 1;
      }
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/utils/accessibility/Styles/accessibilityStyles.js
  var screenReaderContainerStyles = {
    border: "0",
    clip: "rect(0 0 0 0)",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: "0",
    position: "absolute",
    width: "1px"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/colors.js
  var contextualColors = {
    brand: {
      50: "#e8ebfa",
      100: "#dcdffa",
      200: "#c5cbfa",
      300: "#acb3fa",
      400: "#9399f5",
      450: "#9499f5",
      500: "#7a80eb",
      600: "#5b5fc7",
      700: "#444691",
      800: "#3d3e78",
      900: "#383966",
      1e3: "#2f2f4a"
    }
  };
  var naturalColors = {
    grey: {
      0: "#FFFFFF",
      25: "#FCFCFB",
      50: "#FAF9F8",
      100: "#F3F2F1",
      150: "#EDEBE9",
      200: "#E1DFDD",
      250: "#C8C6C4",
      300: "#B3B0AD",
      340: "#999",
      350: "#979593",
      400: "#8A8886",
      430: "#707070",
      440: "#666666",
      450: "#605E5C",
      500: "#484644",
      550: "#3B3A39",
      600: "#323131",
      650: "#2D2C2C",
      700: "#292828",
      750: "#252423",
      800: "#201F1F",
      850: "#1B1A1A",
      900: "#11100F",
      1e3: "#000000"
    },
    orange: {
      50: "#F9ECEA",
      100: "#EFDBD3",
      200: "#EDC2A7",
      300: "#E97548",
      400: "#CC4A31",
      500: "#BD432C",
      600: "#A33D2A",
      700: "#833122",
      800: "#664134",
      900: "#51332C"
    },
    pink: {
      50: "#FDF5FC",
      100: "#F5D9F2",
      150: "#EDBAE7",
      200: "#DA7DCF",
      300: "#D060C3",
      400: "#C94BBA",
      500: "#C239B3",
      600: "#AE33A0",
      650: "#932B87",
      700: "#6D1F64",
      800: "#3A1135",
      900: "#1F091C"
    },
    red: {
      50: "#FCF4F6",
      100: "#F3D6D8",
      200: "#F75E75",
      300: "#E73550",
      400: "#C4314B",
      500: "#A72037",
      600: "#8E192E",
      700: "#4F222B",
      800: "#3E1F25",
      900: "#1E040A"
    },
    green: {
      50: "#E7F2DA",
      100: "#BDDA9B",
      200: "#92C353",
      300: "#6BB700",
      400: "#13A40E",
      500: void 0,
      600: "#237B4B",
      700: void 0,
      800: "#0D2E0D",
      900: "#032003"
    },
    yellow: {
      50: void 0,
      100: "#FBF6D9",
      200: "#F2E384",
      300: "#F9EC02",
      400: "#F8D22A",
      500: "#FFB900",
      600: "#FFAA44",
      700: "#835C00",
      800: "#463100",
      900: "#261A00"
    }
  };
  var contextualAndNaturalColors = Object.assign({}, contextualColors, naturalColors);
  var primitiveColors = {
    black: "#000",
    white: "#fff"
  };
  var transparentColors = {
    silver: {
      100: "rgba(255,255,255,0.85)",
      200: "rgba(255,255,255,0.75)",
      300: "rgba(255,255,255,0.65)",
      400: "rgba(255,255,255,0.5)",
      500: "rgba(255,255,255,0.4)",
      600: "rgba(255,255,255,0.3)",
      700: "rgba(255,255,255,0.2)",
      800: "rgba(255,255,255,0.1)",
      900: "rgba(255,255,255,0.05)"
    },
    ruby: {
      100: void 0,
      200: void 0,
      300: void 0,
      400: void 0,
      500: "rgba(196,49,75,0.9)",
      600: "rgba(167,32,55,0.9)",
      700: "rgba(142,25,46,0.9)",
      800: void 0,
      900: void 0
    },
    onyx: {
      100: "rgba(59,58,57,0.9)",
      200: "rgba(45,44,44,0.4)",
      300: "rgba(37,36,35,0.2)",
      400: "rgba(37,36,35,0.65)",
      500: "rgba(41,40,40,0.9)",
      600: "rgba(0,0,0,0.05)",
      700: "rgba(0,0,0,0.5)",
      800: "rgba(27,26,26,0.9)",
      900: "rgba(0,0,0,0.8)"
    },
    amethyst: {
      100: void 0,
      200: void 0,
      300: void 0,
      400: "rgba(98,100,167,0.75)",
      500: "rgba(51,52,74,0.5)",
      600: "rgba(70,71,117,0.4)",
      700: "rgba(98,100,167,0.15)",
      800: void 0,
      900: void 0
    }
  };
  var colors = Object.assign({}, contextualAndNaturalColors, primitiveColors, transparentColors);
  var createColorScheme = function createColorScheme2(customValues) {
    if (customValues === void 0) {
      customValues = {};
    }
    return Object.assign({
      foreground: void 0,
      background: void 0,
      border: void 0,
      shadow: void 0,
      foregroundHover: void 0,
      backgroundHover: void 0,
      borderHover: void 0,
      shadowHover: void 0,
      foregroundActive: void 0,
      backgroundActive: void 0,
      borderActive: void 0,
      shadowActive: void 0,
      foregroundFocus: void 0,
      backgroundFocus: void 0,
      borderFocus: void 0,
      shadowFocus: void 0,
      foregroundPressed: void 0,
      backgroundPressed: void 0,
      borderPressed: void 0,
      shadowPressed: void 0,
      foregroundDisabled: void 0,
      backgroundDisabled: void 0,
      borderDisabled: void 0,
      shadowDisabled: void 0
    }, customValues);
  };
  var colorScheme = /* @__PURE__ */ function() {
    var colorScheme2 = {
      default: createColorScheme({
        foreground: colors.grey[750],
        foreground1: colors.grey[500],
        foreground2: colors.grey[450],
        foreground3: colors.white,
        foreground4: colors.white,
        foreground5: colors.grey[100],
        foreground6: colors.grey[200],
        foreground7: colors.grey[750],
        foreground8: colors.grey[750],
        foreground9: colors.grey[430],
        background: colors.white,
        background1: colors.grey[50],
        background2: colors.grey[100],
        background3: colors.grey[150],
        background4: colors.grey[100],
        background5: colors.grey[350],
        background6: colors.grey[550],
        border: colors.grey[200],
        border1: colors.grey[150],
        border2: colors.grey[200],
        border3: colors.grey[150],
        borderTransparent: "transparent",
        borderTransparentActive: "transparent",
        shadow: colors.black,
        shadowHover: colors.black,
        foregroundHover: colors.grey[750],
        foregroundHover1: colors.white,
        foregroundHover2: colors.white,
        backgroundHover: colors.grey[100],
        backgroundHover1: colors.grey[150],
        backgroundHover2: "transparent",
        backgroundHover3: colors.grey[150],
        backgroundHover4: colors.grey[50],
        borderHover: colors.grey[250],
        foregroundPressed: colors.grey[750],
        backgroundPressed: colors.grey[200],
        backgroundPressed3: colors.grey[150],
        borderPressed: colors.grey[250],
        foregroundActive: colors.grey[750],
        foregroundActive1: colors.white,
        backgroundActive: colors.grey[100],
        backgroundActive1: colors.grey[150],
        backgroundActive2: colors.grey[150],
        borderActive: colors.grey[200],
        borderActive1: colors.grey[150],
        borderActive2: colors.grey[200],
        borderActive3: colors.grey[150],
        borderActive4: colors.grey[400],
        foregroundFocus: colors.grey[750],
        foregroundFocus1: colors.grey[500],
        foregroundFocus2: colors.grey[450],
        foregroundFocus3: colors.white,
        backgroundFocus: colors.white,
        backgroundFocus1: colors.grey[50],
        backgroundFocus2: colors.grey[100],
        backgroundFocus3: colors.grey[150],
        borderFocusWithin: colors.white,
        borderFocus: colors.black,
        foregroundDisabled1: colors.grey[250],
        foregroundDisabled: colors.grey[250],
        backgroundDisabled: colors.grey[150],
        backgroundDisabled1: colors.grey[150],
        backgroundDisabled2: colors.grey[50],
        backgroundDisabled3: colors.grey[50],
        borderDisabled: colors.grey[150]
      }),
      brand: createColorScheme({
        foreground: colors.brand[600],
        foreground1: colors.brand[600],
        foreground2: colors.brand[700],
        foreground3: colors.brand[200],
        foreground4: colors.white,
        foreground5: colors.white,
        background: colors.brand[600],
        background1: colors.brand[100],
        background2: colors.brand[900],
        background3: colors.brand[1e3],
        background4: colors.brand[800],
        background5: colors.brand[100],
        background6: colors.brand[600],
        border: colors.grey[200],
        border1: colors.brand[200],
        border2: colors.brand[300],
        shadow: colors.black,
        shadowHover: colors.black,
        foregroundHover: colors.brand[600],
        foregroundHover1: colors.white,
        foregroundHover2: colors.brand[200],
        borderHover: colors.brand[300],
        backgroundHover: colors.brand[700],
        backgroundHover1: colors.brand[50],
        backgroundHover2: colors.brand[100],
        backgroundHover3: colors.brand[100],
        foregroundPressed: colors.brand[800],
        foregroundPressed1: colors.white,
        backgroundPressed: colors.brand[800],
        backgroundPressed1: colors.brand[100],
        backgroundPressed2: colors.brand[100],
        borderPressed: colors.brand[300],
        foregroundActive: colors.brand[600],
        foregroundActive1: colors.brand[600],
        foregroundActive2: colors.brand[200],
        backgroundActive: colors.brand[600],
        backgroundActive1: colors.brand[600],
        borderActive: colors.grey[200],
        borderActive1: colors.brand[200],
        borderActive2: colors.brand[300],
        foregroundFocus: colors.brand[600],
        foregroundFocus1: colors.brand[600],
        foregroundFocus2: colors.brand[700],
        foregroundFocus3: colors.brand[200],
        foregroundFocus4: colors.white,
        backgroundFocus: colors.brand[600],
        backgroundFocus1: colors.brand[100],
        backgroundFocus2: colors.brand[900],
        backgroundFocus3: colors.brand[1e3],
        borderFocus: colors.black,
        borderFocusWithin: colors.white,
        borderFocus1: colors.brand[600],
        foregroundDisabled: colors.grey[250],
        foregroundDisabled1: colors.grey[250],
        backgroundDisabled: colors.grey[150],
        backgroundDisabled1: colors.grey[150],
        borderDisabled: colors.grey[150]
      }),
      black: {
        foreground: colors.black,
        foreground1: colors.white,
        background: colors.white,
        background1: colors.grey[750],
        border: colors.black,
        shadow: colors.black,
        foregroundHover: colors.white,
        backgroundHover: colors.black,
        borderHover: colors.black,
        shadowHover: colors.black,
        foregroundActive: colors.white,
        backgroundActive: colors.black,
        borderActive: colors.black,
        shadowActive: colors.black,
        foregroundFocus: colors.white,
        backgroundFocus: colors.black,
        borderFocus: colors.black,
        shadowFocus: colors.black,
        foregroundPressed: colors.white,
        backgroundPressed: colors.black,
        borderPressed: colors.black,
        shadowPressed: colors.black,
        foregroundDisabled: colors.white,
        backgroundDisabled: colors.black,
        borderDisabled: colors.black,
        shadowDisabled: colors.black
      },
      white: {
        foreground: colors.white,
        foreground1: colors.grey[750],
        background: colors.black,
        background1: colors.white,
        border: colors.white,
        shadow: colors.white,
        foregroundHover: colors.black,
        backgroundHover: colors.white,
        borderHover: colors.white,
        shadowHover: colors.white,
        foregroundActive: colors.black,
        backgroundActive: colors.white,
        borderActive: colors.white,
        shadowActive: colors.white,
        foregroundFocus: colors.black,
        backgroundFocus: colors.white,
        borderFocus: colors.white,
        shadowFocus: colors.white,
        foregroundPressed: colors.black,
        backgroundPressed: colors.white,
        borderPressed: colors.white,
        shadowPressed: colors.white,
        foregroundDisabled: colors.black,
        backgroundDisabled: colors.white,
        borderDisabled: colors.white,
        shadowDisabled: colors.white
      },
      green: createColorScheme({
        foreground: colors.green[600],
        foreground1: colors.white,
        foreground2: colors.green[400],
        foreground3: colors.white,
        background: colors.green[300],
        background1: colors.green[600],
        background2: colors.green[50],
        border: colors.green[100],
        border1: colors.green[600]
      }),
      orange: createColorScheme({
        foreground: colors.orange[400],
        foreground1: colors.orange[300],
        foreground2: colors.white,
        background: colors.orange[400],
        background1: colors.orange[400],
        border: colors.orange[200]
      }),
      pink: createColorScheme({
        foreground: colors.pink[600],
        foreground1: colors.pink[500],
        background: colors.pink[50],
        border: colors.pink[100]
      }),
      red: createColorScheme({
        foreground: colors.red[400],
        foreground1: colors.white,
        foreground2: colors.white,
        background: colors.red[400],
        background1: colors.red[50],
        background2: colors.ruby[500],
        background3: colors.red[400],
        border: colors.red[100],
        border1: colors.red[300],
        foregroundHover: colors.white,
        backgroundHover: colors.ruby[600],
        backgroundHover1: colors.red[400],
        foregroundPressed: colors.white,
        backgroundPressed: colors.ruby[700]
      }),
      yellow: createColorScheme({
        foreground: colors.yellow[300],
        foreground1: colors.grey[800],
        foreground2: colors.white,
        foreground3: colors.grey[750],
        foreground4: colors.yellow[700],
        background: colors.yellow[600],
        background1: colors.yellow[100],
        background2: colors.yellow[500],
        background3: colors.yellow[100],
        border: colors.yellow[200],
        border1: colors.yellow[700]
      }),
      silver: createColorScheme({
        foreground: colors.white,
        foreground1: colors.silver[200],
        foregroundHover: colors.white,
        foregroundPressed: colors.white,
        border: colors.silver[600],
        background: "transparent",
        backgroundHover: colors.silver[800],
        borderHover: colors.silver[600],
        backgroundPressed: colors.silver[700],
        borderPressed: colors.silver[600],
        foregroundDisabled: colors.silver[600],
        backgroundDisabled: colors.silver[900]
      }),
      onyx: createColorScheme({
        background: colors.onyx[500],
        background1: colors.onyx[100],
        background2: colors.onyx[500],
        background3: colors.onyx[400],
        backgroundHover: colors.onyx[500],
        backgroundPressed: colors.onyx[800],
        border: colors.onyx[800],
        border1: "transparent",
        border2: colors.onyx[300]
      }),
      amethyst: createColorScheme({
        background: colors.amethyst[600],
        backgroundHover: colors.amethyst[700],
        backgroundHover1: colors.amethyst[500],
        backgroundActive: colors.amethyst[700]
      })
    };
    colorScheme2.grey = colorScheme2.default;
    return colorScheme2;
  }();
  var availableColors = ["default", "black", "white", "brand", "grey", "red", "yellow", "green", "pink", "orange"];
  var isValidColor = function isValidColor2(color2) {
    return color2 && availableColors.indexOf(color2) >= 0;
  };
  var getColorSchemeKey = function getColorSchemeKey2(color2, primary) {
    return color2 && isValidColor(color2) ? color2 : primary ? "brand" : "default";
  };
  var getColorScheme = function getColorScheme2(colorScheme2, color2, primary) {
    return colorScheme2[getColorSchemeKey(color2, primary)];
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/categoryColors.js
  var categoryColors = {
    redDark: {
      100: "#FAF6F6",
      150: "#F2E4E5",
      200: "#E7CED1",
      250: "#CF9BA1",
      300: "#C07B82",
      350: "#C98289",
      400: "#A23D48",
      450: "#A03843",
      500: "#96232F",
      550: "#88232E",
      600: "#861F2A",
      650: "#721A23",
      700: "#69232A",
      750: "#521319",
      800: "#4D2327",
      850: "#3D2326",
      900: "#292424"
    },
    red: {
      100: "#FCF7F8",
      150: "#F8E8EA",
      200: "#F3D7D9",
      250: "#E7ADB2",
      300: "#DF9299",
      350: "#DC8990",
      400: "#D06069",
      450: "#CF5B65",
      500: "#CA4A55",
      550: "#B6454F",
      600: "#B6424C",
      650: "#993840",
      700: "#883B42",
      750: "#6E282E",
      800: "#603135",
      850: "#492C2E",
      900: "#2A2425"
    },
    orangeDark: {
      100: "#FCF7F6",
      150: "#F8E8E4",
      200: "#F2D5CD",
      250: "#E5AA99",
      300: "#DD8E77",
      350: "#DA846B",
      400: "#CD5937",
      450: "#CC5634",
      500: "#C7431D",
      550: "#B33F1E",
      600: "#B23C1A",
      650: "#973216",
      700: "#85361F",
      750: "#6D240F",
      800: "#5E2F21",
      850: "#482A22",
      900: "#2B2423"
    },
    orange: {
      100: "#FEF9F7",
      150: "#FCECE9",
      200: "#FBDED7",
      250: "#F7BBAD",
      300: "#F4A593",
      350: "#F39D89",
      400: "#F07A60",
      450: "#EF785D",
      500: "#EE694B",
      550: "#D66046",
      600: "#D65E43",
      650: "#B24932",
      700: "#9C4D3B",
      750: "#823929",
      800: "#6D3C32",
      850: "#51332C",
      900: "#2D2725"
    },
    orangeLight: {
      100: "#FEFBF7",
      150: "#FEF3E8",
      200: "#FDEAD4",
      250: "#FCD4A8",
      300: "#FCC68B",
      350: "#FBC181",
      400: "#FAAB54",
      450: "#FAA950",
      500: "#FAA03E",
      550: "#E0903A",
      600: "#E08F37",
      650: "#A45D11",
      700: "#A56F34",
      750: "#895722",
      800: "#72502D",
      850: "#533F29",
      900: "#2D2925"
    },
    yellowDark: {
      100: "#FDFBF6",
      150: "#FBF3E4",
      200: "#F8EACD",
      250: "#F1D499",
      300: "#EDC678",
      350: "#ECC26E",
      400: "#E5AC39",
      450: "#E4AA35",
      500: "#E2A11F",
      550: "#CA911F",
      600: "#CA901B",
      650: "#92660D",
      700: "#966E20",
      750: "#7C5811",
      800: "#685022",
      850: "#4E3F22",
      900: "#2C2924"
    },
    yellow: {
      100: "#FEFCF5",
      150: "#FEF6E2",
      200: "#FEEFCB",
      250: "#FEDF95",
      300: "#FDD472",
      350: "#FDD066",
      400: "#FDC030",
      450: "#FDBF2B",
      500: "#FDB814",
      550: "#E3A615",
      600: "#E4A512",
      650: "#8F680D",
      700: "#A67D1B",
      750: "#805E0B",
      800: "#72581E",
      850: "#544420",
      900: "#2D2922"
    },
    brown: {
      100: "#FBF9F8",
      150: "#F3EDEA",
      200: "#E9DDD8",
      250: "#D3BBAF",
      300: "#C4A494",
      350: "#BF9D8C",
      400: "#A87A63",
      450: "#A67760",
      500: "#9D684E",
      550: "#8E6049",
      600: "#8C5D46",
      650: "#764E3B",
      700: "#6D4C3C",
      750: "#56392B",
      800: "#503C33",
      850: "#3F322D",
      900: "#292625"
    },
    oliveDark: {
      100: "#F8F9F7",
      150: "#EBEEE7",
      200: "#DBE1D5",
      250: "#B7C2AA",
      300: "#9EAD8D",
      350: "#96A683",
      400: "#708757",
      450: "#6D8453",
      500: "#5E7741",
      550: "#566C3D",
      600: "#546B3A",
      650: "#475A31",
      700: "#465535",
      750: "#334123",
      800: "#38412E",
      850: "#31362A",
      900: "#272724"
    },
    olive: {
      100: "#FAFBF8",
      150: "#F1F5EC",
      200: "#E6EDDC",
      250: "#CCDBB8",
      300: "#BBD0A1",
      350: "#B5CC99",
      400: "#9BBA75",
      450: "#99B872",
      500: "#8EB163",
      550: "#809F5A",
      600: "#7F9E58",
      650: "#56742F",
      700: "#637849",
      750: "#4E6136",
      800: "#4B563A",
      850: "#3C4231",
      900: "#292926"
    },
    greenDark: {
      100: "#F5F9F7",
      150: "#E5EFE9",
      200: "#CFE1D7",
      250: "#9EC3AE",
      300: "#7DAE93",
      350: "#72A78A",
      400: "#408861",
      450: "#3C865D",
      500: "#27794C",
      550: "#266E46",
      600: "#236D44",
      650: "#1D5C39",
      700: "#26563B",
      750: "#154229",
      800: "#254232",
      850: "#25362C",
      900: "#252725"
    },
    green: {
      100: "#F6FBF9",
      150: "#E5F5ED",
      200: "#D1ECDF",
      250: "#A1DABD",
      300: "#82CDA8",
      350: "#78C9A0",
      400: "#48B67F",
      450: "#45B57C",
      500: "#30AD6E",
      550: "#2F9B64",
      600: "#2B9B62",
      650: "#248353",
      700: "#2B7550",
      750: "#1A5E3C",
      800: "#29553E",
      850: "#274134",
      900: "#242826"
    },
    tealDark: {
      100: "#F6F8F9",
      150: "#E5EBED",
      200: "#CEDADD",
      250: "#9BB4BA",
      300: "#7B9CA3",
      350: "#7FA3AB",
      400: "#3D6E79",
      450: "#386A75",
      500: "#235A67",
      550: "#23535E",
      600: "#1F515C",
      650: "#1A444E",
      700: "#24454C",
      750: "#133138",
      800: "#23373C",
      850: "#243033",
      900: "#252627"
    },
    teal: {
      100: "#F6F9FA",
      150: "#E9F0F2",
      200: "#D6E3E7",
      250: "#ABC6CE",
      300: "#8FB3BE",
      350: "#85ACB8",
      400: "#5A8F9F",
      450: "#578D9E",
      500: "#458193",
      550: "#417686",
      600: "#3E7484",
      650: "#34626F",
      700: "#375B66",
      750: "#254650",
      800: "#2F454C",
      850: "#2C383C",
      900: "#262828"
    },
    tealLight: {
      100: "#F8FCFC",
      150: "#EBF7F7",
      200: "#DBF1F1",
      250: "#B5E3E3",
      300: "#9DD9DB",
      350: "#96D6D8",
      400: "#70C8CA",
      450: "#6DC7C9",
      500: "#5DC1C3",
      550: "#55ADAF",
      600: "#53AEAF",
      650: "#37797B",
      700: "#468183",
      750: "#33696B",
      800: "#395B5C",
      850: "#314646",
      900: "#272A2A"
    },
    blueDark: {
      100: "#F5F7FA",
      150: "#E0E7F2",
      200: "#C7D4E8",
      250: "#8CA7D0",
      300: "#668AC0",
      350: "#6991CC",
      400: "#1E53A3",
      450: "#1A50A1",
      500: "#003D97",
      550: "#053988",
      600: "#003788",
      650: "#002E72",
      700: "#0F3268",
      750: "#002152",
      800: "#182D4D",
      850: "#1D293D",
      900: "#242528"
    },
    blue: {
      100: "#F6F8FB",
      150: "#E3EAF3",
      200: "#CDDAEA",
      250: "#99B3D4",
      300: "#779AC6",
      350: "#7FA3D0",
      400: "#376BAB",
      450: "#3469A9",
      500: "#1D58A0",
      550: "#1D5190",
      600: "#1A4F90",
      650: "#164279",
      700: "#20426E",
      750: "#0F3057",
      800: "#213650",
      850: "#232F3F",
      900: "#252629"
    },
    purpleDark: {
      100: "#F7F6FA",
      150: "#E8E7F2",
      200: "#D6D4E8",
      250: "#ADA8D1",
      300: "#918AC2",
      350: "#928BC5",
      400: "#5D53A5",
      450: "#5A50A4",
      500: "#483D9A",
      550: "#443A8C",
      600: "#40368A",
      650: "#362E75",
      700: "#3A336B",
      750: "#272154",
      800: "#312D4E",
      850: "#2C293D",
      900: "#262529"
    },
    purple: {
      100: "#F9F9FB",
      150: "#EFEDF5",
      200: "#E2DEED",
      250: "#C3BDDC",
      300: "#AFA6D0",
      350: "#A99FCC",
      400: "#8B7DBA",
      450: "#877AB8",
      500: "#7B6CB1",
      550: "#70629F",
      600: "#6E609E",
      650: "#5D5286",
      700: "#584E78",
      750: "#443B61",
      800: "#443D56",
      850: "#383342",
      900: "#282729"
    },
    maroon: {
      100: "#FBF7F9",
      150: "#F4E6EE",
      200: "#EBD3E1",
      250: "#D6A5C3",
      300: "#C988AF",
      350: "#CC87B1",
      400: "#AF5089",
      450: "#AD4C87",
      500: "#A5397A",
      550: "#953770",
      600: "#94336D",
      650: "#7D2B5C",
      700: "#723057",
      750: "#5A1F42",
      800: "#522B42",
      850: "#412836",
      900: "#2A2527"
    },
    pink: {
      100: "#FDF7F9",
      150: "#FAE7EE",
      200: "#F5D3DF",
      250: "#ECA4BE",
      300: "#E687A8",
      350: "#E47CA1",
      400: "#DA4E7F",
      450: "#DA4A7D",
      500: "#D6376F",
      550: "#C03465",
      600: "#C13164",
      650: "#A22954",
      700: "#8F2F50",
      750: "#751E3C",
      800: "#642A3E",
      850: "#4B2834",
      900: "#2B2426"
    },
    smokeDark: {
      100: "#F6F6F6",
      150: "#E8E8E8",
      200: "#D5D5D5",
      250: "#AAAAAA",
      300: "#8E8E8E",
      350: "#939393",
      400: "#5A5A5A",
      450: "#565656",
      500: "#444444",
      550: "#404040",
      600: "#3D3D3D",
      650: "#333333",
      700: "#373737",
      750: "#252525",
      800: "#2B2A2A",
      850: "#282828",
      900: "#262525"
    },
    smokeLight: {
      100: "#F9F9F9",
      150: "#EDEDED",
      200: "#DFDFDF",
      250: "#BEBEBE",
      300: "#A9A9A9",
      350: "#A1A1A1",
      400: "#818181",
      450: "#7E7E7E",
      500: "#707070",
      550: "#676767",
      600: "#646464",
      650: "#555555",
      700: "#525151",
      750: "#3D3D3D",
      800: "#353434",
      850: "#2E2D2D",
      900: "#272626"
    },
    steelDark: {
      100: "#F8F9F9",
      150: "#ECEEEF",
      200: "#DDE1E2",
      250: "#BBC2C4",
      300: "#A5AEB1",
      350: "#9DA7AB",
      400: "#7B898D",
      450: "#78868B",
      500: "#69797E",
      550: "#606E73",
      600: "#5E6D71",
      650: "#4F5B5F",
      700: "#4E5659",
      750: "#394245",
      800: "#3D4244",
      850: "#343637",
      900: "#272727"
    },
    steelLight: {
      100: "#FBFBFB",
      150: "#F3F3F5",
      200: "#EAEDEE",
      250: "#D4DADC",
      300: "#C7C6D0",
      350: "#C1CACC",
      400: "#ACABBB",
      450: "#A9B5B9",
      500: "#A0AEB2",
      550: "#919DA1",
      600: "#8F9C9F",
      650: "#637074",
      700: "#6F7678",
      750: "#585761",
      800: "#515556",
      850: "#404243",
      900: "#292828"
    },
    neon: {
      100: "#FAFEDF",
      150: "#F4FBC4",
      200: "#E9F1AC",
      250: "#E5F18F",
      300: "#D9E388",
      350: "#C8D464",
      400: "#BDCB4C",
      450: "#B7C640",
      500: "#A8B63A",
      550: "#99A43B",
      600: "#909A45",
      650: "#899338",
      700: "#7A8337",
      750: "#656C2B",
      800: "#50571E",
      850: "#3C4212",
      900: "#272B0E"
    }
  };
  var createCategoryColorScheme = function createCategoryColorScheme2(color2, customValues) {
    if (customValues === void 0) {
      customValues = {};
    }
    return Object.assign({
      foreground: categoryColors[color2][750],
      foreground1: categoryColors[color2][400],
      background: categoryColors[color2][200],
      borderActive: categoryColors[color2][650]
    }, customValues);
  };
  var categoryColorScheme = {
    redDark: createCategoryColorScheme("redDark"),
    red: createCategoryColorScheme("red"),
    orangeDark: createCategoryColorScheme("orangeDark"),
    orange: createCategoryColorScheme("orange"),
    orangeLight: createCategoryColorScheme("orangeLight"),
    yellowDark: createCategoryColorScheme("yellowDark"),
    yellow: createCategoryColorScheme("yellow"),
    brown: createCategoryColorScheme("brown"),
    oliveDark: createCategoryColorScheme("oliveDark"),
    olive: createCategoryColorScheme("olive"),
    greenDark: createCategoryColorScheme("greenDark"),
    green: createCategoryColorScheme("green"),
    tealDark: createCategoryColorScheme("tealDark"),
    teal: createCategoryColorScheme("teal"),
    tealLight: createCategoryColorScheme("tealLight"),
    blueDark: createCategoryColorScheme("blueDark"),
    blue: createCategoryColorScheme("blue"),
    purpleDark: createCategoryColorScheme("purpleDark"),
    purple: createCategoryColorScheme("purple"),
    maroon: createCategoryColorScheme("maroon"),
    pink: createCategoryColorScheme("pink"),
    smokeDark: createCategoryColorScheme("smokeDark"),
    smokeLight: createCategoryColorScheme("smokeLight"),
    steelDark: createCategoryColorScheme("steelDark"),
    steelLight: createCategoryColorScheme("steelLight"),
    neon: createCategoryColorScheme("neon"),
    formatting: {
      foreground1: categoryColors.red[600],
      background1: categoryColors.red[300],
      foreground2: categoryColors.orangeDark[400],
      background2: categoryColors.orange[300],
      foreground3: categoryColors.yellow[400],
      background3: categoryColors.yellow[300],
      foreground4: categoryColors.neon[450],
      background4: categoryColors.neon[200],
      foreground5: categoryColors.green[600],
      background5: categoryColors.green[300],
      foreground6: categoryColors.tealLight[650],
      background6: categoryColors.tealLight[300],
      foreground7: categoryColors.blueDark[400],
      background7: categoryColors.blueDark[200],
      foreground8: categoryColors.maroon[500],
      background8: categoryColors.maroon[200]
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/siteVariables.js
  var borderWidth2 = "1px";
  var borderRadiusSmall = "2px";
  var borderRadiusMedium = "4px";
  var borderRadiusXLarge = "8px";
  var focusInnerBorderColor = colors.white;
  var focusOuterBorderColor = colors.black;
  var shadowLevel1 = "0 .2rem .4rem -.075rem rgba(0, 0, 0, .1)";
  var shadowLevel2 = "0 .4rem .7rem -.1rem rgba(0, 0, 0, .1)";
  var shadowLevel3 = "0 .8rem 1rem -.2rem rgba(0, 0, 0, .1)";
  var shadowLevel4 = "0 1.6rem 1.8rem -.4rem rgba(0, 0, 0, .1)";
  var shadowLevel1Dark = "0 .2rem .4rem -.075rem rgba(0, 0, 0, .25)";
  var shadow2 = "0 0 2px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .14)";
  var shadow4 = "0 0 2px rgba(0, 0, 0, .12), 0 2px 4px rgba(0, 0, 0, .14)";
  var shadow8 = "0 0 2px rgba(0, 0, 0, .12), 0 4px 8px rgba(0, 0, 0, .14)";
  var shadow16 = "0 0 2px rgba(0, 0, 0, .12), 0 8px 16px rgba(0, 0, 0, .14)";
  var shadow28 = "0 0 8px rgba(0, 0, 0, .20), 0 14px 28px rgba(0, 0, 0, .24)";
  var shadow64 = "0 0 8px rgba(0, 0, 0, .20), 0 32px 64px rgba(0, 0, 0, .24)";
  var fontSizes2 = {
    smaller: pxToRem(10),
    small: pxToRem(12),
    medium: pxToRem(14),
    large: pxToRem(18),
    larger: pxToRem(24),
    largest: pxToRem(28)
  };
  var fontWeightLight = 200;
  var fontWeightSemilight = 300;
  var fontWeightRegular = 400;
  var fontWeightSemibold = 600;
  var fontWeightBold = 700;
  var lineHeightDefault = 1;
  var lineHeightSmaller = 1.2;
  var lineHeightSmall = 1.3333;
  var lineHeightMedium = 1.4286;
  var lineHeightLarge = 1.3333;
  var lineHeightLarger = 1.3333;
  var lineHeightLargest = 1.3333;
  var zIndexes = {
    background: 0,
    // Default value
    foreground: 1,
    // Put a component in front
    menuItem: 2,
    // Currently used only for menu item beak element
    overlay: 1e3,
    // Dialog/popup/menu overlays
    overlayPriority: 1001,
    // for nested overlays, like tooltip in dialog.
    debug: 999999999
    // for debug purposes
  };
  var bodyPadding = 0;
  var bodyMargin = 0;
  var bodyFontFamily = '"Segoe UI", system-ui, "Apple Color Emoji", "Segoe UI Emoji", sans-serif';
  var bodyFontSize = fontSizes2.medium;
  var bodyBackground = colors.white;
  var bodyColor = colors.grey[750];
  var bodyLineHeight = lineHeightMedium;

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/componentVariables.js
  var componentVariables_exports = {};
  __export(componentVariables_exports, {
    Accordion: () => accordionVariables,
    AccordionTitle: () => accordionVariables,
    Alert: () => alertVariables,
    AlertDismissAction: () => alertVariables,
    Attachment: () => attachmentVariables,
    AttachmentAction: () => attachmentVariables,
    AttachmentBody: () => attachmentVariables,
    AttachmentDescription: () => attachmentVariables,
    AttachmentHeader: () => attachmentVariables,
    AttachmentIcon: () => attachmentVariables,
    Avatar: () => avatarVariables,
    AvatarIcon: () => avatarVariables,
    AvatarImage: () => avatarVariables,
    AvatarLabel: () => avatarVariables,
    AvatarStatus: () => avatarVariables,
    AvatarStatusIcon: () => avatarVariables,
    AvatarStatusImage: () => avatarVariables,
    Breadcrumb: () => breadcrumbVariables,
    BreadcrumbDivider: () => breadcrumbVariables,
    BreadcrumbItem: () => breadcrumbVariables,
    BreadcrumbLink: () => breadcrumbVariables,
    Button: () => buttonVariables,
    ButtonContent: () => buttonVariables,
    ButtonGroup: () => buttonVariables,
    Card: () => cardVariables,
    CardBody: () => cardVariables,
    CardExpandableBox: () => cardVariables,
    CardFooter: () => cardVariables,
    CardHeader: () => cardVariables,
    CardPreview: () => cardVariables,
    CardTopControls: () => cardVariables,
    Carousel: () => carouselVariables,
    CarouselItem: () => carouselVariables,
    CarouselNavigation: () => carouselNavigationVariables,
    CarouselNavigationItem: () => carouselNavigationVariables,
    CarouselPaddle: () => carouselVariables,
    CarouselPaddlesContainer: () => carouselVariables,
    Chat: () => chatVariables,
    ChatItem: () => chatItemVariables,
    ChatMessage: () => chatMessageVariables,
    ChatMessageContent: () => chatMessageVariables,
    ChatMessageDetails: () => chatMessageDetailsVariables,
    ChatMessageReadStatus: () => chatMessageReadStatusVariables,
    Checkbox: () => checkboxVariables,
    Datepicker: () => datepickerVariables,
    DatepickerCalendar: () => datepickerVariables,
    DatepickerCalendarCell: () => datepickerVariables,
    DatepickerCalendarCellButton: () => datepickerVariables,
    DatepickerCalendarGrid: () => datepickerVariables,
    DatepickerCalendarGridRow: () => datepickerVariables,
    DatepickerCalendarHeader: () => datepickerVariables,
    DatepickerCalendarHeaderCell: () => datepickerVariables,
    Dialog: () => dialogVariables,
    Divider: () => dividerVariables,
    Dropdown: () => dropdownVariables,
    DropdownItem: () => dropdownVariables,
    DropdownSearchInput: () => dropdownVariables,
    DropdownSelectedItem: () => dropdownVariables,
    Embed: () => embedVariables,
    Flex: () => flexVariables,
    FlexItem: () => flexItemVariables,
    Form: () => formVariables,
    FormField: () => formFieldVariables,
    FormFieldCustom: () => formFieldVariables,
    FormLabel: () => formLabelVariables,
    FormMessage: () => formMessageVariables,
    Grid: () => gridVariables,
    Header: () => headerVariables,
    HeaderDescription: () => headerDescriptionVariables,
    Image: () => imageVariables,
    Input: () => inputVariables,
    InputLabel: () => inputLabelVariables,
    ItemLayout: () => itemLayoutVariables,
    Label: () => labelVariables,
    Layout: () => layoutVariables,
    ListItem: () => listItemVariables,
    ListItemContent: () => listItemVariables,
    ListItemContentMedia: () => listItemVariables,
    ListItemHeader: () => listItemVariables,
    ListItemHeaderMedia: () => listItemVariables,
    ListItemMedia: () => listItemVariables,
    Loader: () => loaderVariables,
    Menu: () => menuVariables,
    MenuDivider: () => menuVariables,
    MenuItem: () => menuVariables,
    MenuItemContent: () => menuVariables,
    MenuItemIcon: () => menuVariables,
    MenuItemIndicator: () => menuVariables,
    MenuItemWrapper: () => menuVariables,
    Pill: () => pillVariables,
    PillAction: () => pillVariables,
    PillContent: () => pillVariables,
    PillIcon: () => pillVariables,
    PillImage: () => pillVariables,
    PopupContent: () => popupContentVariables,
    Provider: () => providerVariables,
    RadioGroupItem: () => radioGroupItemVariables,
    Reaction: () => reactionVariables,
    ReactionGroup: () => reactionGroupVariables,
    Segment: () => segmentVariables,
    Skeleton: () => skeletonVariables,
    SkeletonAvatar: () => skeletonVariables,
    SkeletonButton: () => skeletonVariables,
    SkeletonInput: () => skeletonVariables,
    SkeletonLine: () => skeletonVariables,
    SkeletonShape: () => skeletonVariables,
    SkeletonText: () => skeletonVariables,
    Slider: () => sliderVariables,
    SplitButton: () => splitButtonVariables,
    SplitButtonDivider: () => splitButtonVariables,
    SplitButtonToggle: () => splitButtonVariables,
    Status: () => statusVariables,
    SvgIcon: () => svgIconVariables,
    Table: () => tableVariables,
    TableCell: () => tableVariables,
    TableRow: () => tableVariables,
    Text: () => textVariables,
    TextArea: () => textAreaVariables,
    Toolbar: () => toolbarVariables,
    ToolbarCustomItem: () => toolbarVariables,
    ToolbarDivider: () => toolbarVariables,
    ToolbarItem: () => toolbarVariables,
    ToolbarMenu: () => toolbarVariables,
    ToolbarMenuDivider: () => toolbarVariables,
    ToolbarMenuItem: () => toolbarVariables,
    ToolbarMenuItemActiveIndicator: () => toolbarVariables,
    ToolbarMenuItemIcon: () => toolbarVariables,
    ToolbarMenuItemSubmenuIndicator: () => toolbarVariables,
    ToolbarMenuRadioGroup: () => toolbarVariables,
    ToolbarMenuRadioGroupWrapper: () => toolbarVariables,
    TooltipContent: () => tooltipContentVariables,
    TreeTitle: () => treeTitleVariables,
    Video: () => videoVariables
  });

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Accordion/accordionVariables.js
  var accordionVariables = function accordionVariables2(siteVars) {
    return {
      color: siteVars.bodyColor,
      focusBorderColor: siteVars.focusOuterBorderColor,
      focusBorderRadius: siteVars.borderRadiusMedium,
      focusBorderWidth: siteVars.borderWidth
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Attachment/attachmentVariables.js
  var attachmentVariables = function attachmentVariables2(siteVariables) {
    return {
      padding: pxToRem(7) + " " + pxToRem(3) + " " + pxToRem(7) + " " + pxToRem(11),
      // padding set to 1px less to account for 1px border
      iconSpace: pxToRem(12),
      iconSize: pxToRem(32),
      borderColor: siteVariables.colorScheme.default.border3,
      borderRadius: siteVariables.borderRadiusMedium,
      backgroundColor: siteVariables.colorScheme.default.background4,
      backgroundColorHover: siteVariables.colorScheme.default.backgroundHover1,
      textColor: siteVariables.colorScheme.default.foreground,
      textColorHover: siteVariables.colorScheme.default.foregroundHover,
      boxShadow: siteVariables.shadowLevel1,
      focusBackgroundColor: void 0,
      focusColor: void 0,
      progressColor: siteVariables.colorScheme.green.background,
      progressHeight: pxToRem(4),
      headerFontSize: siteVariables.fontSizes.medium,
      headerFontWeight: siteVariables.fontWeightSemibold,
      headerLineHeight: siteVariables.lineHeightMedium,
      descriptionFontSize: siteVariables.fontSizes.small,
      descriptionFontWeight: siteVariables.fontWeightRegular,
      descriptionLineHeight: siteVariables.lineHeightDefault,
      // action variables
      actionHeight: pxToRem(32),
      actionMaxWidth: pxToRem(280),
      actionColor: siteVariables.colorScheme.default.foreground,
      actionPrimaryColor: siteVariables.colorScheme.brand.foreground,
      actionColorDisabled: siteVariables.colorScheme.brand.foregroundDisabled1,
      actionIconSize: pxToRem(16),
      actionLoaderBorderSize: pxToRem(2),
      actionLoaderSize: pxToRem(20),
      actionLoaderSvgHeight: pxToRem(20),
      actionLoaderSvgAnimationHeight: pxToRem(-1200),
      actionFocusBorderRadius: siteVariables.borderRadiusMedium
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Alert/alertVariables.js
  var alertVariables = function alertVariables2(siteVars) {
    var minHeight = pxToRem(28);
    return {
      borderStyle: "solid",
      borderWidth: "1px",
      borderRadius: siteVars.borderRadiusMedium,
      backgroundColor: siteVars.colorScheme.default.background4,
      borderColor: siteVars.colorScheme.default.border2,
      color: siteVars.colorScheme.default.foreground1,
      fontWeight: siteVars.fontWeightRegular,
      minHeight,
      padding: "0 " + pxToRem(16),
      actionsMargin: pxToRem(5),
      hoverBorderColor: void 0,
      hoverBackgroundColor: void 0,
      focusBackgroundColor: void 0,
      dismissActionHoverBorderRadius: void 0,
      dismissActionHoverBorderWidth: void 0,
      dismissActionHoverInnerBorderColor: void 0,
      dismissActionHoverOuterBorderColor: void 0,
      dismissActionHoverZIndex: void 0,
      dismissActionSize: minHeight,
      dismissActionColor: void 0,
      dismissiblePadding: "0 0 0 " + pxToRem(16),
      dangerColor: siteVars.colorScheme.red.foreground,
      dangerBackgroundColor: siteVars.colorScheme.red.background1,
      dangerBorderColor: siteVars.colorScheme.red.border,
      oof: false,
      oofColor: siteVars.colorScheme.pink.foreground,
      oofBackgroundColor: siteVars.colorScheme.pink.background,
      oofBorderColor: siteVars.colorScheme.pink.border,
      successColor: siteVars.colorScheme.green.foreground,
      successBackgroundColor: siteVars.colorScheme.green.background2,
      successBorderColor: siteVars.colorScheme.green.border,
      urgent: false,
      urgentColor: siteVars.colorScheme.red.foreground1,
      urgentBackgroundColor: siteVars.colorScheme.red.background3,
      urgentBorderColor: siteVars.colorScheme.red.background3,
      warningColor: siteVars.colorScheme.yellow.foreground4,
      warningBackgroundColor: siteVars.colorScheme.yellow.background3,
      warningBorderColor: siteVars.colorScheme.yellow.border,
      headerFontWeight: siteVars.fontWeightSemibold,
      headerMargin: "0 " + pxToRem(10) + " 0 0",
      iconMargin: "0 " + pxToRem(10) + " 0 0",
      iconSize: pxToRem(16),
      dismissActionBackgroundColor: "transparent",
      dismissActionBorderRadius: siteVars.borderRadiusMedium,
      dismissActionBorderColor: "transparent",
      dismissActionColorHover: siteVars.colorScheme.brand.foregroundHover,
      dismissActionBackgroundColorHover: siteVars.colorScheme.default.backgroundHover2,
      dismissActionBorderColorHover: siteVars.colorScheme.default.borderHover,
      dismissActionContentFontWeight: siteVars.fontWeightSemibold,
      dismissActionBackgroundColorFocus: void 0,
      dismissActionBorderColorFocus: void 0,
      dismissActionColorFocus: void 0,
      dismissActionColorDisabled: siteVars.colorScheme.brand.foregroundDisabled,
      dismissActionBackgroundColorDisabled: siteVars.colorScheme.default.backgroundDisabled,
      dismissActionBorderColorDisabled: "transparent",
      dismissActionIndicatorSize: pxToRem(16),
      focusBorderRadius: siteVars.borderRadiusMedium,
      focusBorderWidth: siteVars.borderWidth,
      focusInnerBorderColor: siteVars.focusInnerBorderColor,
      focusOuterBorderColor: siteVars.focusOuterBorderColor,
      focusBorderZIndex: siteVars.zIndexes.foreground
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Avatar/avatarVariables.js
  var labelColorAreas = stringLiteralsArray("foreground", "background");
  var avatarVariables = function avatarVariables2(siteVariables) {
    return {
      avatarBorderColor: "",
      avatarBorderWidth: "0",
      initialsFontWeight: siteVariables.fontWeightSemibold,
      squareAvatarBorderRadius: siteVariables.borderRadiusMedium,
      iconColor: siteVariables.colors.white,
      iconBackgroundColor: siteVariables.colors.brand[600],
      statusBorderWidth: "2px",
      statusBorderColor: siteVariables.bodyBackground,
      statusSuccessBackgroundColor: siteVariables.colorScheme.green.background,
      statusSuccessColor: siteVariables.colorScheme.green.foreground1,
      statusInfoBackgroundColor: siteVariables.colorScheme.brand.background,
      statusInfoColor: siteVariables.colorScheme.default.foreground2,
      statusWarningBackgroundColor: siteVariables.colorScheme.yellow.background,
      statusWarningColor: siteVariables.colorScheme.yellow.foreground2,
      statusErrorBackgroundColor: siteVariables.colorScheme.red.background,
      statusErrorColor: siteVariables.colorScheme.red.foreground2,
      statusBackgroundColor: siteVariables.colorScheme.default.background5,
      statusColor: siteVariables.colorScheme.default.foreground4,
      imageWidth: void 0,
      imageHeight: void 0,
      imageAvatarRadius: pxToRem(9999),
      imageAvatarSize: pxToRem(32),
      imageCircularRadius: pxToRem(9999),
      labelCircularRadius: pxToRem(9999),
      labelColor: "rgba(0, 0, 0, 0.6)",
      labelBackground: "rgb(232, 232, 232)"
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Button/buttonVariables.js
  var buttonVariables = function buttonVariables2(siteVars) {
    return {
      padding: "0 " + pxToRem(20),
      height: pxToRem(32),
      minWidth: pxToRem(96),
      loadingMinWidth: pxToRem(118),
      maxWidth: pxToRem(280),
      borderRadius: siteVars.borderRadiusMedium,
      contentFontSize: siteVars.fontSizes.medium,
      contentFontWeight: siteVars.fontWeightSemibold,
      contentLineHeight: siteVars.lineHeightMedium,
      color: siteVars.colorScheme.default.foreground,
      colorHover: siteVars.colorScheme.default.foregroundHover,
      colorActive: siteVars.colorScheme.default.foregroundPressed,
      colorDisabled: siteVars.colorScheme.brand.foregroundDisabled,
      colorFocus: void 0,
      iconSize: pxToRem(16),
      backgroundColor: siteVars.colorScheme.default.background,
      backgroundColorActive: siteVars.colorScheme.default.backgroundPressed,
      backgroundColorHover: siteVars.colorScheme.default.backgroundHover1,
      backgroundColorFocus: void 0,
      backgroundColorDisabled: siteVars.colorScheme.default.backgroundDisabled,
      borderColor: siteVars.colorScheme.default.border,
      borderColorHover: siteVars.colorScheme.default.borderHover,
      borderColorFocus: void 0,
      borderColorActive: siteVars.colorScheme.default.borderPressed,
      borderColorDisabled: "transparent",
      backgroundColorIconOnlyHover: siteVars.colorScheme.default.backgroundHover2,
      primaryColor: siteVars.colorScheme.brand.foreground4,
      primaryColorHover: siteVars.colorScheme.brand.foreground4,
      primaryBackgroundColor: siteVars.colorScheme.brand.background,
      primaryBackgroundColorActive: siteVars.colorScheme.brand.backgroundPressed,
      primaryBackgroundColorHover: siteVars.colorScheme.brand.backgroundHover,
      primaryBackgroundColorDisabled: siteVars.colorScheme.default.backgroundDisabled,
      primaryBackgroundColorFocus: void 0,
      primaryBorderColor: "transparent",
      tintedColor: siteVars.colorScheme.brand.foreground,
      tintedColorHover: siteVars.colorScheme.brand.foregroundHover,
      tintedBackgroundColor: siteVars.colorScheme.default.background,
      tintedBackgroundColorActive: siteVars.colorScheme.brand.backgroundHover1,
      tintedBackgroundColorHover: siteVars.colorScheme.brand.backgroundHover1,
      tintedBorderColor: siteVars.colorScheme.brand.border1,
      tintedBorderColorHover: siteVars.colorScheme.brand.borderHover,
      circularBorderRadius: pxToRem(999),
      textColor: siteVars.colorScheme.default.foreground1,
      textColorHover: siteVars.colorScheme.brand.foreground1,
      textPrimaryColor: siteVars.colorScheme.brand.foreground,
      textPrimaryColorHover: siteVars.colorScheme.brand.foreground1,
      textColorDisabled: siteVars.colorScheme.brand.foregroundDisabled1,
      textColorIconOnlyHover: siteVars.colorScheme.brand.foregroundHover,
      primaryBoxShadow: siteVars.shadowLevel1Dark,
      boxShadow: siteVars.shadowLevel1,
      loaderBorderSize: pxToRem(2),
      loaderSize: pxToRem(20),
      loaderSvgHeight: pxToRem(20),
      loaderSvgAnimationHeight: pxToRem(-1200),
      sizeSmallContentFontSize: siteVars.fontSizes.small,
      sizeSmallContentLineHeight: siteVars.lineHeightSmall,
      sizeSmallHeight: pxToRem(24),
      sizeSmallMinWidth: pxToRem(72),
      sizeSmallPadding: "0 " + pxToRem(8),
      sizeSmallLoaderBorderSize: pxToRem(2),
      sizeSmallLoaderSize: pxToRem(15),
      sizeSmallLoaderSvgHeight: pxToRem(15),
      sizeSmallLoaderSvgAnimationHeight: pxToRem(-880)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Breadcrumb/breadcrumbVariables.js
  var breadcrumbVariables = function breadcrumbVariables2(siteVars) {
    return {
      dividerMargin: "0 " + pxToRem(8),
      fontSizeSmaller: pxToRem(12),
      fontSizeSmall: pxToRem(12),
      fontSizeMedium: pxToRem(14),
      fontSizeLarge: pxToRem(18),
      // Breadcrumb Item
      itemCurrentFontWeight: siteVars.fontWeightBold,
      // Breadcrumb Link
      linkPaddingTop: pxToRem(6),
      linkPaddingBottom: pxToRem(6),
      linkPaddingLeftSmaller: pxToRem(4),
      linkPaddingRightSmaller: pxToRem(4),
      linkPaddingLeftSmall: pxToRem(8),
      linkPaddingRightSmall: pxToRem(8),
      linkPaddingLeftMedium: pxToRem(12),
      linkPaddingRightMedium: pxToRem(12),
      linkPaddingLeftLarge: pxToRem(12),
      linkPaddingRightLarge: pxToRem(12),
      linkSmallerGap: pxToRem(2),
      linkSmallGap: pxToRem(8),
      linkMediumGap: pxToRem(8),
      linkLargeGap: pxToRem(8),
      disabledColor: siteVars.colorScheme.default.foregroundDisabled
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatVariables.js
  var chatVariables = function chatVariables2(siteVars) {
    return {
      backgroundColor: siteVars.colorScheme.default.background2
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatItemVariables.js
  var chatItemVariables = function chatItemVariables2() {
    return {
      gutterMargin: pxToRem(10),
      gutterMarginCompact: pxToRem(2),
      gutterMarginComfyRefresh: pxToRem(22),
      margin: pxToRem(8),
      messageMargin: pxToRem(40),
      messageMarginCompact: pxToRem(56),
      messageMarginEndCompact: pxToRem(16)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageVariables.js
  var chatMessageVariables = function chatMessageVariables2(siteVars) {
    return {
      actionMenuBoxShadow: siteVars.shadow8,
      actionMenuPositionRight: pxToRem(5),
      actionMenuPositionTop: pxToRem(-30),
      authorColor: siteVars.colorScheme.default.foreground,
      authorColorMineCompact: siteVars.colorScheme.brand.foreground,
      authorFontWeight: siteVars.fontWeightSemibold,
      authorFontWeightCompact: siteVars.fontWeightSemibold,
      authorMarginRight: pxToRem(12),
      authorMarginRightCompact: pxToRem(8),
      backgroundColor: siteVars.colorScheme.default.background,
      backgroundColorMine: siteVars.colorScheme.brand.background1,
      badgeShadow: siteVars.shadowLevel1Dark,
      badgeTextColor: siteVars.colorScheme.brand.foreground4,
      border: "none",
      borderRadius: siteVars.borderRadiusMedium,
      compactBorder: "solid " + siteVars.borderWidth + " transparent",
      compactHoverBackground: siteVars.colorScheme.default.backgroundHover3,
      compactHoverBorder: "solid " + siteVars.borderWidth + " " + siteVars.colorScheme.default.backgroundHover3,
      compactSpacing: pxToRem(12),
      contentColor: siteVars.colorScheme.default.foreground,
      hasMention: false,
      hasMentionColor: siteVars.colors.orange[300],
      hasMentionNubbinColor: siteVars.colorScheme.orange.background,
      headerMarginBottom: pxToRem(2),
      isImportant: false,
      isImportantColor: siteVars.colorScheme.red.background,
      linkColor: siteVars.colorScheme.brand.foreground1,
      linkColorMine: siteVars.colorScheme.brand.foreground2,
      offset: pxToRem(100),
      overlayZIndex: siteVars.zIndexes.overlay,
      padding: pxToRem(16),
      paddingCompact: pxToRem(3),
      reactionGroupBorderColor: "transparent",
      reactionGroupMarginLeft: pxToRem(12),
      showActionMenu: void 0,
      zIndex: siteVars.zIndexes.foreground,
      hasReducedHorizontalSpace: false
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageDetailsVariables.js
  var chatMessageDetailsVariables = function chatMessageDetailsVariables2(siteVars) {
    return {
      detailsColor: siteVars.colorScheme.default.foreground1,
      detailsFontSize: siteVars.fontSizes.small,
      detailsMargin: pxToRem(12)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageReadStatusVariables.js
  var chatMessageReadStatusVariables = function chatMessageReadStatusVariables2(siteVars) {
    return {
      bottomPosition: "0",
      bottomPositionCompact: pxToRem(-1),
      // Offset border around compact message
      color: siteVars.colorScheme.brand.foreground1,
      rightPosition: pxToRem(-17)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Checkbox/checkboxVariables.js
  var import_get = __toESM(require_get());
  var toggleMovementDistance = pxToRem(20);
  var padding3 = pxToRem(2);
  var defaultValue = "red";
  var checkboxVariables = function checkboxVariables2(siteVars) {
    return {
      checkboxColor: "transparent",
      toggleBackground: "transparent",
      toggleBorderColor: siteVars.colors.grey[300],
      toggleBorderStyle: "solid",
      toggleBorderWidth: pxToRem(1),
      toggleIndicatorColor: "inherit",
      checkboxCheckedColor: siteVars.colors.grey[500],
      checkboxToggleCheckedBackground: "transparent",
      checkboxToggleCheckedBorderColor: siteVars.colors.grey[500],
      checkboxToggleCheckedColor: "inherit",
      disabledColor: siteVars.colors.grey[300],
      disabledCheckboxColor: siteVars.colors.grey[300],
      disabledToggleBackground: "transparent",
      disabledToggleBorderColor: siteVars.colors.grey[200],
      textColor: (0, import_get.default)(siteVars, "colorScheme.default.foreground1", defaultValue),
      background: "transparent",
      borderColor: (0, import_get.default)(siteVars, "colorScheme.default.foreground1", defaultValue),
      borderStyle: "solid",
      borderRadius: siteVars.borderRadiusSmall,
      borderWidth: pxToRem(1),
      indicatorColor: "transparent",
      gap: pxToRem(12),
      margin: pxToRem(2.8) + " 0 0 0",
      padding: padding3,
      rootPadding: "3px 5px",
      textColorHover: (0, import_get.default)(siteVars, "colorScheme.default.foreground", defaultValue),
      borderColorHover: (0, import_get.default)(siteVars, "colorScheme.default.foreground", defaultValue),
      checkedBackgroundHover: (0, import_get.default)(siteVars, "colorScheme.brand.backgroundHover", defaultValue),
      toggleBorderRadius: pxToRem(999),
      toggleIndicatorSize: pxToRem(14),
      toggleMargin: "0",
      togglePadding: padding3 + " " + toggleMovementDistance + " " + padding3 + " " + padding3,
      toggleWidth: pxToRem(38),
      toggleHeight: pxToRem(20),
      checkedTextColor: (0, import_get.default)(siteVars, "colorScheme.default.foreground", defaultValue),
      checkedBackground: (0, import_get.default)(siteVars, "colorScheme.brand.backgroundActive1", defaultValue),
      checkedBorderColor: (0, import_get.default)(siteVars, "colorScheme.brand.backgroundActive1", defaultValue),
      checkedIndicatorColor: (0, import_get.default)(siteVars, "colorScheme.default.background", defaultValue),
      toggleCheckedPadding: padding3 + " " + padding3 + " " + padding3 + " " + toggleMovementDistance,
      disabledBackground: (0, import_get.default)(siteVars, "colorScheme.default.background", defaultValue),
      disabledBackgroundChecked: (0, import_get.default)(siteVars, "colorScheme.default.backgroundDisabled", defaultValue),
      disabledBorderColor: (0, import_get.default)(siteVars, "colorScheme.default.foregroundDisabled1", defaultValue),
      disabledCheckedIndicatorColor: (0, import_get.default)(siteVars, "colorScheme.default.foregroundDisabled", defaultValue),
      disabledToggleIndicatorColor: (0, import_get.default)(siteVars, "colorScheme.default.foregroundDisabled", defaultValue)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Dialog/dialogVariables.js
  var dialogVariables = function dialogVariables2(siteVariables) {
    return {
      border: "none",
      rootBackground: siteVariables.colors.white,
      rootBorderRadius: siteVariables.borderRadiusXLarge,
      rootWidth: "600px",
      rootPadding: pxToRem(27) + " " + pxToRem(32) + " " + pxToRem(32) + " " + pxToRem(32),
      rootPaddingZoom: "" + pxToRem(12),
      contentMargin: "0 0 " + pxToRem(20) + " 0",
      boxShadow: siteVariables.shadowLevel4,
      foregroundColor: siteVariables.colors.grey[900],
      headerFontSize: siteVariables.fontSizes.large,
      headerFontWeight: siteVariables.fontWeightBold,
      headerMargin: "0 0 " + pxToRem(8) + " 0",
      overlayBackground: "rgba(37, 36, 36, .75)",
      // todo: update to a palette value when daisy has mapped one
      overlayZIndex: siteVariables.zIndexes.overlay,
      headerActionMargin: pxToRem(-3) + " " + pxToRem(-8) + " 0 0",
      // in case of customized footer this var allows to align styles
      footerActionsBreakpoint: "400px"
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/colorUtils.js
  var extendColorScheme = function extendColorScheme2(colorScheme2, overrides) {
    var result = colorScheme2;
    Object.keys(overrides).forEach(function(color2) {
      var _Object$assign;
      result = Object.assign({}, result, (_Object$assign = {}, _Object$assign[color2] = Object.assign({}, colorScheme2[color2], overrides[color2]), _Object$assign));
    });
    return result;
  };
  function pickValuesFromColorScheme(colorScheme2, componentAreas) {
    var result = {};
    Object.keys(colorScheme2).forEach(function(color2) {
      var _Object$assign3;
      var colorValues = componentAreas.reduce(function(accumulator, area) {
        var _Object$assign2;
        return Object.assign({}, accumulator, (_Object$assign2 = {}, _Object$assign2[area] = colorScheme2[color2][area], _Object$assign2));
      }, {});
      result = Object.assign({}, result, (_Object$assign3 = {}, _Object$assign3[color2] = colorValues, _Object$assign3));
    });
    return result;
  }

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Divider/dividerVariables.js
  var dividerColorAreas = stringLiteralsArray("foreground");
  var dividerVariables = function dividerVariables2(siteVars) {
    return {
      colorScheme: pickValuesFromColorScheme(siteVars.colorScheme, dividerColorAreas),
      dividerColor: siteVars.colorScheme.brand.border,
      textColor: siteVars.colors.grey[450],
      textFontSize: siteVars.fontSizeSmall,
      textLineHeight: siteVars.lineHeightSmall,
      importantFontWeight: siteVars.fontWeightBold,
      dividerPadding: pxToRem(4)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Dropdown/dropdownVariables.js
  var dropdownVariables = function dropdownVariables2(siteVars) {
    return {
      backgroundColor: siteVars.colorScheme.default.background2,
      backgroundColorHover: siteVars.colorScheme.default.backgroundHover3,
      invertedBackgroundColor: siteVars.colorScheme.default.background,
      invertedBackgroundColorHover: siteVars.colorScheme.default.backgroundHover4,
      borderColor: "transparent",
      borderColorHover: "transparent",
      borderColorFocus: siteVars.colorScheme.brand.borderFocus1,
      borderError: siteVars.colorScheme.red.background,
      borderWidth: "0px",
      openBorderColorHover: void 0,
      containerBorderRadius: siteVars.borderRadiusMedium,
      disabledColor: siteVars.colorScheme.default.foregroundDisabled,
      openAboveContainerBorderRadius: "0 0 " + siteVars.borderRadiusMedium + " " + siteVars.borderRadiusMedium,
      openBelowContainerBorderRadius: siteVars.borderRadiusMedium + " " + siteVars.borderRadiusMedium + " 0 0",
      searchBorderBottomWidth: pxToRem(2),
      color: siteVars.colorScheme.default.foreground1,
      comboboxPaddingButton: "0 " + pxToRem(12),
      comboboxFlexBasis: pxToRem(50),
      aboveListBorderRadius: siteVars.borderRadiusMedium + " " + siteVars.borderRadiusMedium + " 0 0",
      belowListBorderRadius: "0 0 " + siteVars.borderRadiusMedium + " " + siteVars.borderRadiusMedium,
      listBackgroundColor: siteVars.colorScheme.default.background,
      listBorderColor: "transparent",
      listBorderWidth: pxToRem(1),
      listPadding: pxToRem(8) + " 0 " + pxToRem(6),
      listBoxShadow: siteVars.shadow16,
      listMaxHeight: pxToRem(296),
      listItemFocusBorderWidth: pxToRem(1),
      listItemBackgroundColor: "transparent",
      listItemBackgroundColorActive: siteVars.colorScheme.default.backgroundActive,
      listItemBackgroundColorHover: siteVars.colorScheme.default.backgroundHover,
      listItemColorActive: siteVars.colorScheme.default.backgroundFocus3,
      listItemColorHover: siteVars.colorScheme.default.foregroundHover,
      listItemSelectedColor: siteVars.colorScheme.default.foreground,
      listItemSelectedFontWeight: siteVars.fontWeightSemibold,
      // TODO: prod app uses 17.5px here, it should be 16px per the design guide!
      listItemHeaderLineHeight: siteVars.lineHeightSmall,
      listItemContentLineHeight: siteVars.lineHeightSmall,
      selectedItemBackgroundColor: siteVars.colorScheme.default.background,
      selectedItemBackgroundColorHover: siteVars.colorScheme.brand.backgroundHover2,
      selectedItemBorder: "none",
      selectedItemColor: siteVars.colorScheme.default.foreground,
      selectedItemColorHover: siteVars.colorScheme.default.foregroundHover,
      selectedItemIconColor: siteVars.colorScheme.default.foreground1,
      selectedItemIconColorHover: siteVars.colorScheme.brand.foregroundHover,
      selectedItemsMaxWidth: pxToRem(140),
      selectedItemColorFocus: siteVars.bodyColor,
      selectedItemsMaxHeight: pxToRem(82),
      toggleIndicatorSize: pxToRem(32),
      triggerButtonColorFocusActive: void 0,
      triggerButtonColorHover: siteVars.bodyColor,
      width: pxToRem(356),
      overlayZIndex: siteVars.zIndexes.overlay,
      // disabled state
      disabledBorderColorHover: "transparent",
      disabledTriggerColorHover: siteVars.colorScheme.brand.foregroundDisabled,
      disabledBackgroundColorHover: siteVars.colorScheme.brand.backgroundDisabled,
      // these should only apply when there is content in the image/media slot:
      listItemHeaderFontSize: siteVars.fontSizes.medium,
      listItemHeaderColor: siteVars.colorScheme.default.foreground1,
      listItemContentFontSize: siteVars.fontSizes.small,
      listItemContentColor: siteVars.colorScheme.default.foreground2
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Embed/embedVariables.js
  var embedVariables = function embedVariables2(siteVariables) {
    return {
      controlColor: siteVariables.colors.white,
      controlBackgroundColor: siteVariables.colors.onyx[900],
      controlBackgroundSize: pxToRem(24) + " " + pxToRem(24),
      width: void 0,
      height: void 0,
      focusBorderColor: siteVariables.colors.brand[500],
      zIndex: siteVariables.zIndexes.foreground
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Flex/flexVariables.js
  var flexVariables = function flexVariables2() {
    return {
      // GAP VALUES
      "gap.smaller": pxToRem(8),
      "gap.small": pxToRem(10),
      "gap.medium": pxToRem(15),
      "gap.large": pxToRem(30),
      // PADDING VALUES
      "padding.medium": pxToRem(10)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Flex/flexItemVariables.js
  var flexItemVariables = function flexItemVariables2() {
    return {
      "size.half": "50%",
      "size.quarter": "25%",
      "size.small": pxToRem(150),
      "size.medium": pxToRem(200),
      "size.large": pxToRem(300)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Form/formVariables.js
  var formVariables = function formVariables2(siteVariables) {
    return {
      lastChildMarginTop: pxToRem(12),
      fieldsMarginBottom: pxToRem(20)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Form/formFieldVariables.js
  var formFieldColorAreas = stringLiteralsArray("foreground", "background");
  var formFieldVariables = function formFieldVariables2(siteVariables) {
    return {
      colorScheme: pickValuesFromColorScheme(siteVariables.colorScheme, formFieldColorAreas),
      messagePaddingLeft: pxToRem(12)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Form/formMessageVariables.js
  var formMessageColorAreas = stringLiteralsArray("foreground");
  var formMessageVariables = function formMessageVariables2(siteVariables) {
    return {
      colorScheme: pickValuesFromColorScheme(siteVariables.colorScheme, formMessageColorAreas),
      paddingLeft: pxToRem(12)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Form/formLabelVariables.js
  var formLabelVariables = function formLabelVariables2(siteVariables) {
    return {
      lineHeight: pxToRem(16),
      marginBottom: pxToRem(4)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Grid/gridVariables.js
  var gridVariables = function gridVariables2() {
    return {
      defaultColumnCount: 5,
      gridGap: void 0,
      padding: void 0
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Header/headerVariables.js
  var headerColorAreas = stringLiteralsArray("foreground");
  var headerVariables = function headerVariables2(siteVars) {
    return {
      colorScheme: pickValuesFromColorScheme(siteVars.colorScheme, headerColorAreas),
      color: siteVars.colors.grey[750],
      descriptionColor: void 0
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Header/headerDescriptionVariables.js
  var headerDescriptionColorAreas = stringLiteralsArray("foreground");
  var headerDescriptionVariables = function headerDescriptionVariables2(siteVariables) {
    return {
      colorScheme: pickValuesFromColorScheme(siteVariables.colorScheme, headerDescriptionColorAreas),
      color: siteVariables.colors.grey[350]
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/SvgIcon/svgIconVariables.js
  var iconColorAreas = stringLiteralsArray("foreground");
  var svgIconVariables = function svgIconVariables2(siteVars) {
    return {
      colorScheme: pickValuesFromColorScheme(siteVars.colorScheme, iconColorAreas),
      color: void 0,
      borderColor: void 0,
      backgroundColor: void 0,
      brandColor: siteVars.brandColor,
      secondaryColor: siteVars.colors.white,
      redColor: siteVars.colors.red[400],
      disabledColor: siteVars.colors.grey[250],
      smallestSize: pxToRem(7),
      smallerSize: pxToRem(10),
      smallSize: pxToRem(12),
      mediumSize: pxToRem(16),
      largeSize: pxToRem(20),
      largerSize: pxToRem(32),
      largestSize: pxToRem(40),
      horizontalSpace: pxToRem(10)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Image/imageVariables.js
  var imageVariables = function imageVariables2() {
    return {
      width: void 0,
      height: void 0,
      avatarRadius: pxToRem(9999),
      avatarSize: pxToRem(32),
      circularRadius: pxToRem(9999)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Input/inputVariables.js
  var inputVariables = function inputVariables2(siteVars) {
    return {
      colorDisabled: siteVars.colorScheme.brand.foregroundDisabled,
      colorError: siteVars.colorScheme.red.foreground,
      borderColorError: siteVars.colorScheme.red.background,
      iconPosition: "absolute",
      iconRight: pxToRem(10),
      iconLeft: pxToRem(9),
      inputPaddingWithIconAtStart: pxToRem(5) + " " + pxToRem(12) + " " + pxToRem(5) + " " + pxToRem(34),
      inputPaddingWithIconAtEnd: pxToRem(5) + " " + pxToRem(35) + " " + pxToRem(5) + " " + pxToRem(12),
      inputPadding: pxToRem(5) + " " + pxToRem(12),
      inputInsideLabelPaddingTop: pxToRem(14),
      borderColor: "transparent",
      borderRadius: siteVars.borderRadiusMedium,
      borderWidth: "0 0 " + pxToRem(2) + " 0",
      backgroundColor: siteVars.colorScheme.default.background2,
      backgroundColorInverted: siteVars.colorScheme.default.background,
      fontColor: siteVars.colorScheme.default.foreground,
      fontSize: siteVars.fontSizes.medium,
      iconColor: siteVars.colorScheme.default.foreground,
      successfulColor: siteVars.colorScheme.green.foreground,
      inputFocusBorderColor: "transparent transparent " + siteVars.colorScheme.brand.borderFocus1 + " transparent",
      inputFocusBorderRadius: siteVars.borderRadiusMedium + " " + siteVars.borderRadiusMedium + " " + siteVars.borderRadiusSmall + " " + siteVars.borderRadiusSmall,
      placeholderColor: siteVars.colorScheme.default.foreground1
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Input/inputLabelVariables.js
  var inputLabelVariables = function inputLabelVariables2(siteVars) {
    return {
      insideLabelBottom: pxToRem(-8),
      insideLabelPaddingLeft: pxToRem(12),
      insideLabelActiveFontSize: pxToRem(12),
      inlineLabelPaddingRight: pxToRem(10),
      lineHeight: pxToRem(16),
      marginBottom: pxToRem(4)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Label/labelVariables.js
  var labelVariables = function labelVariables2(siteVars) {
    return {
      circularRadius: pxToRem(9999),
      iconSize: pxToRem(16),
      padding: "0 " + pxToRem(4) + " 0 " + pxToRem(4),
      startPaddingLeft: "0px",
      endPaddingRight: "0px",
      height: pxToRem(20),
      foreground: "rgba(0, 0, 0, 0.6)",
      background: "rgb(232, 232, 232)",
      blackForeground: siteVars.colorScheme.black.foreground1,
      blackBackground: siteVars.colorScheme.black.background1,
      whiteForeground: siteVars.colorScheme.white.foreground1,
      whiteBackground: siteVars.colorScheme.white.background1,
      brandForeground: siteVars.colorScheme.brand.foreground5,
      brandBackground: siteVars.colorScheme.brand.background6,
      greyForeground: siteVars.colorScheme.grey.foreground2,
      greyBackground: siteVars.colorScheme.grey.background3,
      orangeForeground: siteVars.colorScheme.orange.foreground2,
      orangeBackground: siteVars.colorScheme.orange.background1,
      redForeground: siteVars.colorScheme.red.foreground1,
      redBackground: siteVars.colorScheme.red.background,
      greenForeground: siteVars.colorScheme.green.foreground3,
      greenBackground: siteVars.colorScheme.green.background1,
      yellowForeground: siteVars.colorScheme.yellow.foreground3,
      yellowBackground: siteVars.colorScheme.yellow.background
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Layout/layoutVariables.js
  var layoutVariables = function layoutVariables2() {
    return {};
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Loader/loaderVariables.js
  var loaderVariables = function loaderVariables2(siteVariables) {
    return {
      containerHeights: {
        smallest: pxToRem(24),
        smaller: pxToRem(24),
        small: pxToRem(24),
        medium: pxToRem(36),
        large: pxToRem(72),
        larger: pxToRem(72),
        largest: pxToRem(72)
      },
      containerWidths: {
        smallest: pxToRem(24),
        smaller: pxToRem(24),
        small: pxToRem(24),
        medium: pxToRem(36),
        large: pxToRem(72),
        larger: pxToRem(72),
        largest: pxToRem(72)
      },
      svgHeights: {
        smallest: pxToRem(24),
        smaller: pxToRem(24),
        small: pxToRem(24),
        medium: pxToRem(36),
        large: pxToRem(72),
        larger: pxToRem(72),
        largest: pxToRem(72)
      },
      svgTranslatePosition: {
        smallest: pxToRem(-1440),
        smaller: pxToRem(-1440),
        small: pxToRem(-1440),
        medium: pxToRem(-2160),
        large: pxToRem(-4320),
        larger: pxToRem(-4320),
        largest: pxToRem(-4320)
      },
      svgWidths: {
        smallest: pxToRem(24),
        smaller: pxToRem(24),
        small: pxToRem(24),
        medium: pxToRem(36),
        large: pxToRem(72),
        larger: pxToRem(72),
        largest: pxToRem(72)
      },
      svgTrackColor: siteVariables.colorScheme.brand.border2,
      svgTailColor: siteVariables.colorScheme.brand.foreground,
      svgSecondaryColor: siteVariables.colorScheme.default.foreground3
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/ItemLayout/itemLayoutVariables.js
  var itemLayoutVariables = function itemLayoutVariables2() {
    return {
      paddingLeft: pxToRem(20),
      paddingRight: pxToRem(18),
      columnGap: pxToRem(8),
      height: pxToRem(48)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/List/listItemVariables.js
  var listItemVariables = function listItemVariables2(siteVariables) {
    return {
      minHeight: pxToRem(48),
      rootPadding: "0 " + pxToRem(18) + " 0 " + pxToRem(20),
      gap: pxToRem(8),
      zIndex: siteVariables.zIndexes.foreground,
      // Header
      // TODO: prod app uses 17.5px here, it should be 16px per the design guide!
      headerLineHeight: siteVariables.lineHeightSmall,
      headerFontSize: siteVariables.fontSizes.medium,
      // Header Media
      headerMediaFontSize: siteVariables.fontSizes.small,
      // TODO: prod app uses 17.5px here, it should be 16px per the design guide!
      headerMediaLineHeight: siteVariables.lineHeightSmall,
      importantFontWeight: siteVariables.fontWeightBold,
      // Content
      contentFontSize: siteVariables.fontSizes.small,
      contentLineHeight: siteVariables.lineHeightSmall,
      // Content Media
      contentMediaFontSize: siteVariables.fontSizes.small,
      contentMediaLineHeight: siteVariables.lineHeightSmall,
      // Selectable
      selectableFocusHoverColor: siteVariables.colorScheme.default.foregroundHover,
      selectableFocusHoverBackgroundColor: siteVariables.colorScheme.default.backgroundHover,
      // Selected
      selectedColor: siteVariables.colorScheme.default.foregroundPressed,
      selectedBackgroundColor: siteVariables.colorScheme.default.backgroundActive1
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Menu/menuVariables.js
  var menuColorAreas = stringLiteralsArray("border", "borderActive", "foregroundActive", "foregroundFocus", "foregroundHover", "backgroundHover", "backgroundActive", "backgroundFocus", "foregroundDisabled");
  var menuVariables = function menuVariables2(siteVars) {
    return {
      colorScheme: pickValuesFromColorScheme(extendColorScheme(siteVars.colorScheme, {
        default: {
          borderActive: siteVars.colorScheme.default.border2,
          backgroundActive: siteVars.colorScheme.default.backgroundActive2,
          backgroundFocus: siteVars.colorScheme.default.backgroundFocus1,
          foregroundDisabled: siteVars.colorScheme.default.foregroundDisabled1
        },
        brand: {
          foregroundHover: siteVars.colors.white,
          backgroundHover: siteVars.colors.brand[300],
          foregroundActive: siteVars.colors.white,
          borderActive: siteVars.colors.brand[600],
          backgroundActive: siteVars.colors.brand[500],
          // it's 600 in the color scheme
          foregroundFocus: siteVars.colors.white,
          backgroundFocus: siteVars.colors.brand[300],
          foregroundDisabled: siteVars.colorScheme.brand.foregroundDisabled1
        }
      }), menuColorAreas),
      color: siteVars.colors.grey[500],
      colorActive: siteVars.colors.black,
      colorFocus: void 0,
      colorHover: "inherit",
      colorDisabled: void 0,
      borderColor: void 0,
      borderColorHover: void 0,
      borderColorActive: void 0,
      borderColorFocus: siteVars.colors.white,
      outlineColorFocus: siteVars.colors.black,
      backgroundColor: void 0,
      backgroundColorFocus: void 0,
      backgroundColorHover: void 0,
      backgroundColorActive: void 0,
      iconSize: pxToRem(16),
      iconOnlyBorderRadius: siteVars.borderRadiusMedium,
      iconOnlyColorActive: siteVars.colors.brand[600],
      iconOnlyColorFocus: siteVars.colors.brand[600],
      iconOnlyWrapperBackgroundColorFocus: void 0,
      activeIconOnlyWrapperBackgroundColor: void 0,
      iconOnlyBackgroundColorHover: void 0,
      iconOnlyColorHover: siteVars.colors.brand[600],
      underlinedBorderColor: siteVars.colors.grey[200],
      lineHeightBase: siteVars.lineHeightMedium,
      horizontalPadding: pxToRem(14) + " " + pxToRem(18),
      verticalBackgroundColor: siteVars.colorScheme.default.background,
      verticalItemPadding: pxToRem(7) + " " + pxToRem(12),
      verticalBoxShadow: siteVars.shadow16,
      verticalDividerMargin: pxToRem(8) + " 0",
      verticalItemBorderWidth: pxToRem(2),
      verticalItemBorderColor: "transparent",
      verticalPointingBorderColor: siteVars.colorScheme.brand.borderActive,
      verticalBorderColor: siteVars.colorScheme.default.borderTransparent,
      activeUnderlinedColor: void 0,
      activeUnderlinedPrimaryColor: siteVars.colors.brand[600],
      activeUnderlinedBorderBottomColor: siteVars.colors.black,
      activeUnderlinedWrapperColor: void 0,
      pointingIndicatorBackgroundColor: siteVars.colors.brand[600],
      underlinedBottomBorderWidth: pxToRem(2),
      underlinedColorHover: "inherit",
      primaryBorderColor: siteVars.colorScheme.default.border2,
      primaryWrapperColorFocus: siteVars.colors.black,
      primaryWrapperColor: siteVars.colors.black,
      primaryWrapperBackgroundColorFocus: siteVars.colors.brand[500],
      underlinedWrapperColorHover: siteVars.colors.black,
      underlinedWrapperBackgroundHover: "transparent",
      dividerHeight: pxToRem(1),
      borderWidth: pxToRem(1),
      menuZIndex: siteVars.zIndexes.overlay,
      beakZIndex: siteVars.zIndexes.menuItem,
      wrapperColorActive: siteVars.colors.grey[500],
      wrapperColorFocus: siteVars.colors.grey[500],
      wrapperColorHover: void 0,
      primaryWrapperColorHover: siteVars.colors.black,
      wrapperBackgroundColorFocus: siteVars.colors.grey[150],
      activeWrapperBackgroundColorHover: void 0,
      indicatorColor: siteVars.colors.grey[500],
      activeIndicatorColor: siteVars.colors.grey[750],
      activePrimaryIndicatorColor: siteVars.colors.grey[750],
      activePrimaryVerticalIndicatorColor: siteVars.colors.black,
      primaryIndicatorColorHover: siteVars.colors.black,
      indicatorColorHover: siteVars.colors.grey[500],
      subMenuBorderColor: siteVars.colorScheme.default.borderTransparent,
      subMenuIconColor: siteVars.colorScheme.brand.foregroundHover
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Pill/pillVariables.js
  var pillVariables = function pillVariables2(siteVars) {
    return {
      background: siteVars.colorScheme.default.background3,
      backgroundHover: siteVars.colorScheme.default.background1,
      borderRadius: "9999px",
      smallerRoundedBorderRadius: pxToRem(2),
      // Disabled
      disabledBackground: siteVars.colorScheme.default.backgroundDisabled,
      disabledColor: siteVars.colorScheme.default.foregroundDisabled,
      // Inverted
      invertedBackground: siteVars.colorScheme.default.background,
      // Outline
      outlineBackground: "transparent",
      // TODO: The design spec maps to Neutral Stroke 1 that is equivalent to gre[440]
      // but we don't have this token
      outlineBorderColor: siteVars.colorScheme.default.borderActive4,
      outlineDisabledborder: siteVars.colorScheme.default.borderDisabled,
      // Smaller
      smallerHeight: pxToRem(20),
      smallerMinWidth: pxToRem(80),
      smallerMargin: pxToRem(6) + " " + pxToRem(2),
      // Small
      smallHeight: pxToRem(24),
      smallMinWidth: pxToRem(80),
      smallMargin: pxToRem(4),
      // Medium (default)
      height: pxToRem(32),
      minWidth: pxToRem(90),
      margin: pxToRem(6) + " " + pxToRem(4),
      roundedBorderRadius: siteVars.borderRadiusMedium,
      // Content Smaller
      contentPaddingSmaller: pxToRem(2) + " " + pxToRem(8),
      contentFontSizeSmaller: pxToRem(12),
      // Content Small
      contentFontSizeSmall: pxToRem(12),
      contentPaddingSmall: pxToRem(4) + " " + pxToRem(8),
      // Content Medium
      contentFontSize: pxToRem(14),
      contentPadding: pxToRem(6) + " " + pxToRem(8),
      // Action Pill
      actionMargin: "0 " + pxToRem(8),
      actionWidth: pxToRem(16),
      smallOrSmallerActionWidth: pxToRem(12),
      // Icon Pill
      iconMargin: "0 0 0 " + pxToRem(8),
      iconWidth: pxToRem(20),
      smallOrSmallerIconWidth: pxToRem(16),
      selectedIconColor: siteVars.colorScheme.default.border,
      selectedIconCheckColor: siteVars.colorScheme.brand.background2,
      selectedImageIconWidth: pxToRem(32),
      smallSelectedImageIconWidth: pxToRem(24),
      smallerSelectedImageIconWidth: pxToRem(20),
      // Image Pill
      imageWidth: pxToRem(32),
      imageHeight: pxToRem(32),
      smallImageWidth: pxToRem(24),
      smallImageHeight: pxToRem(24),
      smallerImageWidth: pxToRem(20),
      smallerImageHeight: pxToRem(20)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Popup/popupContentVariables.js
  var popupContentVariables = function popupContentVariables2(siteVars) {
    return {
      borderColor: siteVars.colorScheme.default.borderTransparent,
      borderRadius: siteVars.borderRadiusMedium,
      borderSize: "1px",
      backgroundColor: siteVars.colorScheme.default.background,
      color: siteVars.colorScheme.default.foreground,
      boxShadow: siteVars.shadow16,
      padding: "" + pxToRem(16),
      pointerGap: pxToRem(5),
      pointerMargin: pxToRem(10),
      pointerHeight: pxToRem(7),
      pointerWidth: pxToRem(14),
      zIndex: siteVars.zIndexes.overlay
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Provider/providerVariables.js
  var providerVariables = function providerVariables2(siteVariables) {
    return {
      background: siteVariables.bodyBackground,
      color: siteVariables.bodyColor,
      scrollbarHeight: pxToRem(16),
      scrollbarWidth: pxToRem(16),
      scrollbarThumbBackgroundColor: siteVariables.colors.onyx[700],
      scrollbarThumbBorderRadius: pxToRem(9),
      scrollbarThumbBorderSize: pxToRem(4),
      scrollbarThumbHoverBackgroundColor: siteVariables.colors.onyx[700],
      scrollbarThumbHoverBorderSize: pxToRem(2)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/RadioGroup/radioGroupItemVariables.js
  var radioGroupItemVariables = function radioGroupItemVariables2(siteVars) {
    return {
      colorDisabled: siteVars.colors.grey[250],
      textFontSize: siteVars.fontSizes.medium,
      textColorDefault: siteVars.colors.grey[500],
      textColorDefaultHoverFocus: siteVars.colors.grey[750],
      textColorChecked: siteVars.colors.grey[750],
      indicatorColorDefault: siteVars.colors.grey[500],
      indicatorBorderColorDefaultHover: siteVars.colors.grey[750],
      indicatorBorderColorChecked: siteVars.colors.brand[600],
      indicatorBackgroundColorChecked: siteVars.colors.brand[600],
      padding: "0 " + pxToRem(2),
      margin: pxToRem(5) + " " + pxToRem(8) + " " + pxToRem(5) + " " + pxToRem(2)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Reaction/reactionVariables.js
  var reactionVariables = function reactionVariables2(siteVars) {
    return {
      meReactingColor: siteVars.colors.brand[600],
      meReactingColorHover: siteVars.colors.brand[800],
      otherReactingColor: siteVars.colors.grey[450],
      otherReactingColorHover: siteVars.colors.grey[750],
      contentFontSize: siteVars.fontSizes.small,
      fontWeightHover: siteVars.fontWeightBold,
      outlineColorFocus: siteVars.colors.brand[600],
      outlineWidthFocus: pxToRem(2),
      outlineOffsetFocus: pxToRem(-2),
      meReacting: false,
      boxShadowColor: siteVars.colors.white,
      borderColorFocus: siteVars.colors.grey[750]
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Reaction/reactionGroupVariables.js
  var reactionGroupVariables = function reactionGroupVariables2() {
    return {
      reactionSpacing: pxToRem(8)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Segment/segmentVariables.js
  var segmentColorAreas = stringLiteralsArray("foreground");
  var segmentVariables = function segmentVariables2(siteVariables) {
    return {
      colorScheme: pickValuesFromColorScheme(siteVariables.colorScheme, segmentColorAreas),
      color: siteVariables.bodyColor,
      disabledColor: siteVariables.colors.grey[250],
      backgroundColor: siteVariables.bodyBackground,
      disabledBackgroundColor: siteVariables.colors.grey[150],
      disabledBorderColor: "transparent",
      borderRadius: 0,
      borderStyle: "solid",
      borderWidth: "2px 0 0 0",
      boxShadow: "0 1px 1px 1px rgba(34,36,38,.15)",
      padding: "1em"
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Skeleton/skeletonVariables.js
  var skeletonVariables = function skeletonVariables2(siteVariables) {
    return {
      lineBackground: siteVariables.colorScheme.default.foreground6,
      shapeBackground: siteVariables.colorScheme.default.foreground6,
      animationBackground: siteVariables.colorScheme.default.foreground6,
      animationBackgroundSecondary: siteVariables.colorScheme.default.foreground6,
      lineMargin: "0 0 " + pxToRem(2) + " 0",
      shapeMargin: "0 0 " + pxToRem(2) + " 0",
      // Skeleton Button
      buttonHeight: pxToRem(32),
      buttonWidth: pxToRem(96),
      buttonSmallHeight: pxToRem(24),
      buttonSmallWidth: pxToRem(72),
      buttonBackground: siteVariables.colorScheme.default.foreground6,
      buttonCircularBorderRadius: pxToRem(999),
      // Skeleton Text
      textBackground: siteVariables.colorScheme.default.foreground6,
      textWidth: "100%",
      textSmallerHeight: pxToRem(14),
      textSmallHeight: pxToRem(16),
      textMediumHeight: pxToRem(19),
      textLargeHeight: pxToRem(24),
      textLargerHeight: pxToRem(32),
      // Skeleton Input
      inputHeight: pxToRem(32),
      inputWidth: pxToRem(154),
      inputBackground: siteVariables.colorScheme.default.foreground6,
      // Skeleton Avatar
      avatarBackground: siteVariables.colorScheme.default.foreground6,
      avatarSmallest: pxToRem(20),
      avatarSmaller: pxToRem(24),
      avatarSmall: pxToRem(28),
      avatarMedium: pxToRem(32),
      avatarLarge: pxToRem(44),
      avatarLarger: pxToRem(64),
      avatarLargest: pxToRem(96)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Slider/sliderVariables.js
  var sliderVariables = function sliderVariables2(siteVars) {
    var colorScheme2 = siteVars.colorScheme;
    return {
      height: pxToRem(16),
      length: pxToRem(320),
      railColor: colorScheme2.default.border,
      disabledRailColor: colorScheme2.default.backgroundDisabled1,
      railHeight: pxToRem(2),
      thumbColor: colorScheme2.default.foreground2,
      activeThumbColor: colorScheme2.default.foreground1,
      disabledThumbColor: colorScheme2.default.foregroundDisabled1,
      thumbHeight: pxToRem(10),
      activeThumbHeight: pxToRem(14),
      thumbBorderPadding: pxToRem(4),
      thumbWidth: pxToRem(10),
      activeThumbWidth: pxToRem(14),
      trackColor: colorScheme2.brand.foregroundActive,
      disabledTrackColor: colorScheme2.default.foregroundDisabled1
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Status/statusVariables.js
  var statusVariables = function statusVariables2(siteVariables) {
    return {
      borderColor: void 0,
      borderWidth: 2,
      successBackgroundColor: siteVariables.colorScheme.green.background,
      successTextColor: siteVariables.colorScheme.green.foreground1,
      infoBackgroundColor: siteVariables.colorScheme.brand.background,
      infoTextColor: siteVariables.colorScheme.default.foreground2,
      warningBackgroundColor: siteVariables.colorScheme.yellow.background,
      warningTextColor: siteVariables.colorScheme.yellow.foreground2,
      errorBackgroundColor: siteVariables.colorScheme.red.background,
      errorTextColor: siteVariables.colorScheme.red.foreground2,
      defaultBackgroundColor: siteVariables.colorScheme.default.background5,
      defaultTextColor: siteVariables.colorScheme.default.foreground4
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Text/textVariables.js
  var textColorAreas = stringLiteralsArray("foreground");
  var textVariables = function textVariables2(siteVariables) {
    return {
      colorScheme: pickValuesFromColorScheme(siteVariables.colorScheme, textColorAreas),
      fontSizeSmallest: siteVariables.fontSizes.smallest,
      fontLineHeightSmallest: siteVariables.lineHeightSmallest,
      fontSizeSmaller: siteVariables.fontSizes.smaller,
      fontLineHeightSmaller: siteVariables.lineHeightSmaller,
      fontSizeSmall: siteVariables.fontSizes.small,
      fontLineHeightSmall: siteVariables.lineHeightSmall,
      fontSizeMedium: siteVariables.fontSizes.medium,
      fontLineHeightMedium: siteVariables.lineHeightMedium,
      fontSizeLarge: siteVariables.fontSizes.large,
      fontLineHeightLarge: siteVariables.lineHeightLarge,
      fontSizeLarger: siteVariables.fontSizes.larger,
      fontLineHeightLarger: siteVariables.lineHeightLarger,
      fontSizeLargest: siteVariables.fontSizes.largest,
      fontLineHeightLargest: siteVariables.lineHeightLargest,
      fontWeightLight: siteVariables.fontWeightLight,
      fontWeightSemilight: siteVariables.fontWeightSemilight,
      fontWeightRegular: siteVariables.fontWeightRegular,
      fontWeightSemibold: siteVariables.fontWeightSemibold,
      fontWeightBold: siteVariables.fontWeightBold,
      atMentionOtherColor: siteVariables.colors.brand[600],
      atMentionMeColor: siteVariables.colors.orange[400],
      atMentionMeFontWeight: siteVariables.fontWeightBold,
      disabledColor: siteVariables.colors.grey[250],
      errorColor: siteVariables.colorScheme.red.foreground,
      importantWeight: siteVariables.fontWeightBold,
      importantColor: siteVariables.colors.red[400],
      successColor: siteVariables.colors.green[600],
      timestampColor: siteVariables.colorScheme.default.foreground1
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/TextArea/textAreaVariables.js
  var textAreaVariables = function textAreaVariables2(siteVars) {
    return {
      margin: "0",
      padding: pxToRem(7) + " " + pxToRem(12),
      borderColor: "transparent",
      borderRadius: siteVars.borderRadiusMedium + " " + siteVars.borderRadiusMedium + " " + siteVars.borderRadiusSmall + " " + siteVars.borderRadiusSmall,
      borderWidth: "0 0 " + pxToRem(2) + " 0",
      backgroundColor: siteVars.colorScheme.default.background2,
      invertedBackgroundColor: siteVars.colorScheme.default.background,
      placeholderColor: siteVars.colorScheme.default.foreground1,
      disabledColor: siteVars.colorScheme.brand.foregroundDisabled,
      fontColor: siteVars.colorScheme.default.foreground,
      fontSize: siteVars.fontSizes.medium,
      borderColorFocus: "transparent transparent " + siteVars.colorScheme.brand.borderFocus1 + " transparent",
      height: "auto",
      borderColorError: siteVars.colorScheme.red.background
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarVariables.js
  var toolbarColorAreas = stringLiteralsArray(
    "foreground1",
    "background",
    "border",
    "foregroundActive",
    "foregroundHover",
    "backgroundHover",
    "foregroundDisabled1",
    // custom
    "menuItemForegroundHover",
    "menuItemBackgroundHover"
  );
  var toolbarVariables = function toolbarVariables2(siteVars) {
    return {
      colorScheme: pickValuesFromColorScheme(extendColorScheme(siteVars.colorScheme, {
        default: {
          foregroundHover: siteVars.colorScheme.brand.foregroundHover,
          backgroundHover: "transparent",
          foregroundActive: siteVars.colorScheme.brand.foregroundActive,
          menuItemForegroundHover: siteVars.colorScheme.default.foregroundHover,
          menuItemBackgroundHover: siteVars.colorScheme.default.backgroundHover
        }
      }), toolbarColorAreas),
      foreground: void 0,
      background: "transparent",
      dividerBorder: void 0,
      foregroundHover: void 0,
      backgroundHover: void 0,
      foregroundActive: void 0,
      backgroundActive: "transparent",
      foregroundDisabled: void 0,
      backgroundDisabled: "transparent",
      itemHeight: pxToRem(32),
      itemPadding: "0",
      borderWidth: "2px",
      borderRadius: siteVars.borderRadiusMedium,
      dividerMargin: pxToRem(10) + " " + pxToRem(4),
      menuMaxWidth: pxToRem(312),
      menuPadding: pxToRem(8) + " 0",
      menuBackground: void 0,
      menuBorder: void 0,
      menuBorderWidth: "1px",
      menuBorderRadius: siteVars.borderRadiusMedium,
      menuBoxShadow: siteVars.shadowLevel3,
      menuItemForeground: void 0,
      menuItemForegroundHover: void 0,
      menuItemBackgroundHover: void 0,
      menuItemForegroundDisabled: void 0,
      menuItemBackgroundDisabled: "transparent",
      menuItemPadding: pxToRem(5) + " " + pxToRem(15),
      menuDividerBorder: void 0,
      menuDividerMargin: pxToRem(8) + " 0",
      customItemHorizontalPadding: pxToRem(16),
      customItemVerticalPadding: pxToRem(4),
      overlayZIndex: siteVars.zIndexes.overlay,
      lineHeightBase: siteVars.lineHeightMedium
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Tree/treeTitleVariables.js
  var treeTitleVariables = function treeTitleVariables2(siteVars) {
    return {
      color: siteVars.colorScheme.default.foreground,
      padding: pxToRem(1) + " 0",
      paddingRight: pxToRem(20),
      paddingLeft: pxToRem(20),
      borderColor: siteVars.colorScheme.default.foreground1,
      borderStyle: "solid",
      borderRadius: siteVars.borderRadiusMedium,
      borderWidth: pxToRem(1),
      indicatorColor: "transparent",
      selectionIndicatorMargin: "0 0 0 0",
      background: "transparent",
      hoverBackground: siteVars.colorScheme.default.background1,
      checkedBackground: siteVars.colorScheme.brand.backgroundActive1,
      checkedBorderColor: siteVars.colorScheme.brand.backgroundActive1,
      checkedIndicatorColor: siteVars.colorScheme.default.background,
      disabledBackground: siteVars.colorScheme.default.background,
      disabledBackgroundChecked: siteVars.colorScheme.default.backgroundDisabled,
      disabledBorderColor: siteVars.colorScheme.default.foregroundDisabled1,
      disabledCheckedIndicatorColor: siteVars.colorScheme.default.foregroundDisabled
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Video/videoVariables.js
  var videoVariables = function videoVariables2() {
    return {
      width: void 0,
      height: void 0
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Tooltip/tooltipContentVariables.js
  var tooltipContentVariables = function tooltipContentVariables2(siteVars) {
    return {
      boxShadow: siteVars.shadow8,
      borderRadius: siteVars.borderRadiusMedium,
      borderColor: "transparent",
      borderSize: "0px",
      borderStyle: "none",
      padding: pxToRem(5) + " " + pxToRem(12) + " " + pxToRem(7) + " " + pxToRem(12),
      maxWidth: pxToRem(240),
      svgPointer: true,
      pointerMargin: pxToRem(6),
      pointerGap: pxToRem(5),
      pointerWidth: pxToRem(16),
      pointerHeight: pxToRem(6),
      color: siteVars.colorScheme.default.foreground3,
      backgroundColor: siteVars.colors.grey[500],
      subtleBackgroundColor: siteVars.colorScheme.default.background,
      subtleForegroundColor: siteVars.colorScheme.default.foreground,
      subtleBorderColor: siteVars.colorScheme.onyx.border1,
      zIndex: siteVars.zIndexes.overlayPriority
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/SplitButton/splitButtonVariables.js
  var splitButtonVariables = function splitButtonVariables2(siteVars) {
    return {
      borderRadius: siteVars.borderRadiusMedium,
      borderColor: siteVars.colorScheme.default.border,
      borderColorPrimary: siteVars.colors.brand[500],
      borderColorDisabled: siteVars.colorScheme.brand.foregroundDisabled,
      smallDimension: pxToRem(24),
      smallPadding: "0 " + pxToRem(8),
      smallMinWidth: "0",
      smallBoxShadow: "none",
      padding: "0 " + pxToRem(12),
      minWidth: "0",
      boxShadow: siteVars.shadowLevel1,
      toggleButtonHeight: pxToRem(32),
      dividerColor: siteVars.colorScheme.default.border,
      dividerPrimaryColor: siteVars.colors.white,
      toggleButtonColor: siteVars.colorScheme.default.foreground,
      toggleButtonBackgroundColor: siteVars.colorScheme.default.background,
      toggleButtonBorderRadius: siteVars.borderRadiusMedium,
      toggleButtonBorderColor: siteVars.colorScheme.default.border,
      toggleButtonBoxShadow: siteVars.shadowLevel1,
      toggleButtonColorHover: siteVars.colorScheme.default.foregroundHover,
      toggleButtonBackgroundColorHover: siteVars.colorScheme.default.backgroundHover1,
      toggleButtonBorderColorHover: siteVars.colorScheme.default.borderHover,
      toggleButtonColorActive: siteVars.colorScheme.default.foregroundPressed,
      toggleButtonBackgroundColorActive: siteVars.colorScheme.default.backgroundPressed,
      toggleButtonBorderColorActive: siteVars.colorScheme.default.borderPressed,
      toggleButtonBackgroundColorFocus: void 0,
      toggleButtonBorderColorFocus: void 0,
      toggleButtonColorFocus: void 0,
      toggleButtonPrimaryHoverBackgroundColor: siteVars.colorScheme.brand.backgroundHover,
      toggleButtonPrimaryHoverColor: siteVars.colorScheme.brand.foregroundHover1,
      toggleButtonPrimaryColor: siteVars.colorScheme.brand.foreground4,
      toggleButtonPrimaryBackgroundColor: siteVars.colorScheme.brand.background,
      toggleButtonPrimaryBorderColor: "transparent",
      toggleButtonPrimaryBoxShadow: siteVars.shadowLevel1Dark,
      toggleButtonPrimaryBackgroundColorActive: siteVars.colorScheme.brand.backgroundPressed,
      toggleButtonPrimaryBackgroundColorFocus: void 0,
      toggleButtonColorDisabled: siteVars.colorScheme.brand.foregroundDisabled,
      toggleButtonBackgroundColorDisabled: siteVars.colorScheme.default.backgroundDisabled,
      toggleButtonIndicatorSize: pxToRem(16),
      focusBorderRadius: siteVars.borderRadiusMedium,
      focusBorderWidth: siteVars.borderWidth,
      focusInnerBorderColor: siteVars.focusInnerBorderColor,
      focusOuterBorderColor: siteVars.focusOuterBorderColor,
      focusBorderZIndex: siteVars.zIndexes.foreground
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Carousel/carouselVariables.js
  var carouselVariables = function carouselVariables2(siteVars) {
    return {
      width: 300,
      height: 300,
      focusOuterBorderColor: siteVars.focusOuterBorderColor,
      focusOuterBorderRadius: siteVars.borderRadiusMedium,
      paddleColor: siteVars.colorScheme.default.foreground4,
      paddleColorDisabled: siteVars.colorScheme.brand.foregroundDisabled,
      paddleBackgroundColor: siteVars.colorScheme.onyx.background3,
      paddleBackgroundColorActive: siteVars.colorScheme.onyx.backgroundPressed,
      paddleBackgroundColorHover: siteVars.colorScheme.onyx.backgroundHover,
      paddleBackgroundColorDisabled: siteVars.colorScheme.default.backgroundDisabled,
      paddleBorderColor: "transparent",
      paddleBorderRadius: siteVars.borderRadiusMedium,
      paddleHeight: pxToRem(32),
      paddleIndicatorSize: pxToRem(16),
      focusBorderRadius: siteVars.borderRadiusMedium,
      focusBorderWidth: siteVars.borderWidth,
      focusInnerBorderColor: siteVars.focusInnerBorderColor,
      focusBorderZIndex: siteVars.zIndexes.foreground
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Carousel/carouselNavigationVariables.js
  var menuColorAreas2 = stringLiteralsArray("border", "borderActive", "foregroundActive", "foregroundFocus", "foregroundHover", "backgroundHover", "backgroundActive", "backgroundFocus", "foregroundDisabled");
  var carouselNavigationVariables = function carouselNavigationVariables2(siteVars) {
    return {
      width: 300,
      colorScheme: pickValuesFromColorScheme(extendColorScheme(siteVars.colorScheme, {
        default: {
          borderActive: siteVars.colorScheme.default.border2,
          backgroundActive: siteVars.colorScheme.default.backgroundActive1,
          backgroundFocus: siteVars.colorScheme.default.backgroundFocus1,
          foregroundDisabled: siteVars.colorScheme.default.foregroundDisabled1
        },
        brand: {
          foregroundHover: siteVars.colors.white,
          backgroundHover: siteVars.colors.brand[300],
          foregroundActive: siteVars.colors.white,
          borderActive: siteVars.colors.brand[600],
          backgroundActive: siteVars.colors.brand[500],
          // it's 600 in the color scheme
          foregroundFocus: siteVars.colors.white,
          backgroundFocus: siteVars.colors.brand[300],
          foregroundDisabled: siteVars.colorScheme.brand.foregroundDisabled1
        }
      }), menuColorAreas2),
      color: siteVars.colors.grey[500],
      colorActive: siteVars.colors.black,
      borderColor: void 0,
      borderColorActive: void 0,
      borderColorFocus: siteVars.colors.white,
      outlineColorFocus: siteVars.colors.black,
      backgroundColor: void 0,
      backgroundColorFocus: void 0,
      backgroundColorHover: void 0,
      backgroundColorActive: void 0,
      iconOnlyColorActive: siteVars.colors.brand[600],
      lineHeightBase: siteVars.lineHeightMedium,
      horizontalPadding: pxToRem(14) + " " + pxToRem(18),
      verticalBackgroundColor: siteVars.colors.white,
      verticalItemPadding: pxToRem(7) + " " + pxToRem(14),
      verticalItemBorderWidth: pxToRem(2),
      verticalItemBorderColor: "transparent",
      verticalBackgroundColorFocus: siteVars.colors.grey[150],
      primaryBorderColor: siteVars.colorScheme.default.border2,
      indicatorBackgroundColor: siteVars.colors.grey[500],
      indicatorActiveBackgroundColor: siteVars.colors.brand[600],
      borderWidth: pxToRem(1),
      thumbnailWidth: 75
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Table/tableVariables.js
  var tableVariables = function tableVariables2(siteVariables) {
    return {
      color: siteVariables.colorScheme.default.foreground,
      hoverColor: siteVariables.colorScheme.default.foregroundHover,
      backgroundColor: siteVariables.colorScheme.default.background,
      backgroundHoverColor: siteVariables.colorScheme.default.backgroundHover1,
      defaultRowHeight: pxToRem(48),
      compactRowHeight: pxToRem(36),
      minCellWidth: "0",
      cellPadding: "0 " + pxToRem(8),
      rowPadding: "0",
      headerFontSize: pxToRem(12),
      bodyFontSize: pxToRem(13),
      borderWidth: pxToRem(1),
      headerBorderColor: siteVariables.colorScheme.default.backgroundHover1,
      headerBorderHoverColor: "transparent",
      headerBorderFocusColor: "transparent",
      rowBorderColor: siteVariables.colorScheme.default.backgroundHover1,
      rowBorderHoverColor: siteVariables.colorScheme.default.backgroundHover1,
      rowBorderFocusColor: siteVariables.colorScheme.default.borderFocus,
      cellBorderColor: "transparent",
      cellBorderHoverColor: "transparent",
      cellBorderFocusColor: siteVariables.colorScheme.default.borderFocus
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Card/cardVariables.js
  var cardVariables = function cardVariables2(siteVars) {
    return {
      backgroundColor: siteVars.colorScheme.default.background1,
      backgroundColorDisabled: siteVars.colorScheme.default.backgroundDisabled1,
      backgroundColorFocus: siteVars.colorScheme.default.backgroundFocus1,
      backgroundColorHover: siteVars.colorScheme.default.backgroundHover1,
      backgroundColorPressed: siteVars.colorScheme.default.backgroundPressed,
      ghostBackgroundColor: "none",
      ghostBackgroundColorDisabled: siteVars.colorScheme.default.backgroundDisabled,
      ghostBackgroundColorFocus: "none",
      ghostBackgroundColorHover: siteVars.colorScheme.default.backgroundHover,
      ghostBackgroundColorPressed: siteVars.colorScheme.default.backgroundPressed,
      invertedBackgroundColor: siteVars.colorScheme.default.background2,
      invertedBackgroundColorDisabled: siteVars.colorScheme.default.backgroundDisabled2,
      invertedBackgroundColorFocus: siteVars.colorScheme.default.background2,
      invertedBackgroundColorHover: siteVars.colorScheme.default.backgroundHover2,
      invertedBackgroundColorPressed: siteVars.colorScheme.default.backgroundPressed,
      borderStyle: "solid",
      borderColor: "transparent",
      borderColorDisabled: "transparent",
      borderColorHover: "transparent",
      borderColorPressed: "transparent",
      borderWidth: siteVars.borderWidth,
      borderRadius: siteVars.borderRadiusMedium,
      boxShadow: "none",
      boxShadowDisabled: "none",
      boxShadowHover: "none",
      boxShadowFocus: "none",
      boxShadowPressed: "none",
      elevatedBoxShadow: siteVars.shadowLevel1,
      elevatedBoxShadowDisabled: siteVars.shadowLevel1,
      elevatedBoxShadowHover: siteVars.shadowLevel3,
      elevatedBoxShadowFocus: siteVars.shadowLevel1,
      elevatedBoxShadowPressed: siteVars.shadowLevel1,
      padding: pxToRem(16),
      margin: pxToRem(0),
      colorDisabled: siteVars.colorScheme.default.foregroundDisabled,
      compactPadding: pxToRem(0),
      previewMargin: "0 0 " + pxToRem(10) + " 0",
      headerMargin: "0 0 " + pxToRem(10) + " 0",
      bodyMargin: "0 0 " + pxToRem(10) + " 0",
      footerMargin: "0 0 " + pxToRem(10) + " 0",
      fittedPreviewMargin: pxToRem(0),
      fittedHeaderMargin: pxToRem(0),
      fittedBodyMargin: pxToRem(0),
      fittedFooterMargin: pxToRem(0),
      previewMarginHorizontal: "0 " + pxToRem(10) + " 0 0",
      topControlsTop: pxToRem(10),
      topControlsRight: pxToRem(0),
      // TODO: update with latest values from design
      width: pxToRem(300),
      height: "100%",
      sizeSmallWidth: pxToRem(200),
      sizeSmallHeight: "100%",
      sizeSmallPadding: pxToRem(0),
      sizeLargeWidth: pxToRem(500),
      sizeLargeHeight: "100%",
      sizeLargePadding: pxToRem(16),
      fluidWidth: "100%",
      fluidHeight: "100%",
      expandableBoxStartMaxHeight: pxToRem(20),
      expandableBoxEndMaxHeight: pxToRem(500),
      expandableBoxShrinkTransition: "max-height 0.5s ease-in",
      expandableBoxExpandTransition: "max-height 1s ease-in",
      selectedBackgroundColor: siteVars.colorScheme.default.backgroundFocus3,
      selectedBorderColor: siteVars.colorScheme.default.borderActive,
      selectedBoxShadow: siteVars.shadowLevel4,
      selectedBackgroundColorDisabled: siteVars.colorScheme.default.backgroundDisabled3,
      selectedBackgroundColorFocus: siteVars.colorScheme.default.backgroundFocus3,
      selectedBackgroundColorHover: siteVars.colorScheme.default.backgroundHover3,
      selectedBackgroundColorPressed: siteVars.colorScheme.default.backgroundPressed3
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/utils/date-time-utilities/dateValues/dateValues.js
  var DAYS_IN_WEEK = 7;

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Datepicker/datepickerVariables.js
  var datepickerVariables = function datepickerVariables2(siteVars) {
    return {
      calendarCellBorder: "none",
      calendarCellHeight: pxToRem(34),
      calendarCellWidth: pxToRem(34),
      calendarCellPadding: pxToRem(0),
      calendarCellMargin: pxToRem(0),
      calendarCellBackgroundColor: siteVars.colorScheme.default.background,
      calendarCellColor: "inherit",
      calendarCellQuietColor: siteVars.colorScheme.default.foreground2,
      calendarCellSelectedColor: siteVars.colorScheme.brand.background4,
      calendarCellSelectedBackgroundColor: siteVars.colorScheme.brand.borderActive1,
      calendarCellTodayBackgroundColor: siteVars.colorScheme.brand.backgroundFocus,
      calendarCellTodayColor: siteVars.colorScheme.white.foreground,
      calendarCellTodayBorderRadius: "50%",
      calendarCellHoverBackgroundColor: siteVars.colorScheme.brand.backgroundHover2,
      calendarCellHoverColor: "inherit",
      calendarCellDisabledColor: siteVars.colorScheme.brand.foregroundDisabled,
      calendarCellDisabledBackgroundColor: siteVars.colorScheme.default.background,
      calendarHeaderCellFontWeight: siteVars.fontWeightRegular,
      calendarHeaderCellHeight: pxToRem(32),
      calendarHeaderCellPadding: pxToRem(2) + " " + pxToRem(0) + " " + pxToRem(2) + " " + pxToRem(0),
      calendarHeaderCellWidth: "calc(100%/" + DAYS_IN_WEEK + ")",
      calendarHeaderPaddingTop: pxToRem(5),
      calendarHeaderPaddingBottom: pxToRem(5),
      calendarHeaderLabelPaddingLeft: pxToRem(10),
      calendarHeaderLabelFontWeight: siteVars.fontWeightBold,
      calendarMinHeight: pxToRem(282)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/componentStyles.js
  var componentStyles_exports = {};
  __export(componentStyles_exports, {
    Accordion: () => accordionStyles,
    AccordionContent: () => accordionContentStyles,
    AccordionTitle: () => accordionTitleStyles,
    Alert: () => alertStyles,
    AlertDismissAction: () => alertDismissActionStyles,
    Attachment: () => attachmentStyles,
    AttachmentAction: () => attachmentActionStyles,
    AttachmentBody: () => attachmentBodyStyles,
    AttachmentDescription: () => attachmentDescriptionStyles,
    AttachmentHeader: () => attachmentHeaderStyles,
    AttachmentIcon: () => attachmentIconStyles,
    Avatar: () => avatarStyles,
    AvatarIcon: () => avatarIconStyles,
    AvatarImage: () => avatarImageStyles,
    AvatarLabel: () => avatarLabelStyles,
    AvatarStatus: () => avatarStatusStyles,
    AvatarStatusIcon: () => avatarStatusIconStyles,
    AvatarStatusImage: () => avatarStatusImageStyles,
    Breadcrumb: () => breadcrumbStyles,
    BreadcrumbDivider: () => breadcrumbDividerStyles,
    BreadcrumbItem: () => breadcrumbItemStyles,
    BreadcrumbLink: () => breadcrumbLinkStyles,
    Button: () => buttonStyles,
    ButtonContent: () => buttonContentStyles,
    ButtonGroup: () => buttonGroupStyles,
    Card: () => cardStyles,
    CardBody: () => cardBodyStyles,
    CardExpandableBox: () => cardExpandableBoxStyles,
    CardFooter: () => cardFooterStyles,
    CardHeader: () => cardHeaderStyles,
    CardPreview: () => cardPreviewStyles,
    CardTopControls: () => cardTopControlsStyles,
    Carousel: () => carouselStyles,
    CarouselItem: () => carouselItemStyles,
    CarouselNavigation: () => carouselNavigationStyles,
    CarouselNavigationItem: () => carouselNavigationItemStyles,
    CarouselPaddle: () => carouselPaddleStyles,
    CarouselPaddlesContainer: () => carouselPaddlesContainerStyles,
    Chat: () => chatStyles,
    ChatItem: () => chatItemStyles,
    ChatMessage: () => chatMessageStyles,
    ChatMessageContent: () => chatMessageContentStyles,
    ChatMessageDetails: () => chatMessageDetailsStyles,
    ChatMessageReadStatus: () => chatMessageReadStatusStyles,
    Checkbox: () => checkboxStyles,
    Datepicker: () => datepickerStyles,
    DatepickerCalendar: () => datepickerCalendarStyles,
    DatepickerCalendarCell: () => datepickerCalendarCellStyles,
    DatepickerCalendarCellButton: () => datepickerCalendarCellButtonStyles,
    DatepickerCalendarGrid: () => datepickerCalendarGridStyles,
    DatepickerCalendarGridRow: () => datepickerCalendarGridRowStyles,
    DatepickerCalendarHeader: () => datepickerCalendarHeaderStyles,
    DatepickerCalendarHeaderCell: () => datepickerCalendarHeaderCellStyles,
    Dialog: () => dialogStyles,
    DialogFooter: () => dialogFooterStyles,
    Divider: () => dividerStyles,
    DividerContent: () => dividerContentStyles,
    Dropdown: () => dropdownStyles,
    DropdownItem: () => dropdownItemStyles,
    DropdownSearchInput: () => dropdownSearchInputStyles,
    DropdownSelectedItem: () => dropdownSelectedItemStyles,
    Embed: () => embedStyles,
    Flex: () => flexStyles,
    FlexItem: () => flexItemStyles,
    Form: () => formStyles,
    FormField: () => formFieldStyles,
    FormFieldCustom: () => formFieldStyles,
    FormLabel: () => formLabelStyles,
    FormMessage: () => formMessageStyles,
    Grid: () => gridStyles,
    Header: () => headerStyles,
    HeaderDescription: () => headerDescriptionStyles,
    Image: () => imageStyles,
    Input: () => inputStyles,
    InputLabel: () => inputLabelStyles,
    ItemLayout: () => itemLayoutStyles,
    Label: () => labelStyles,
    Layout: () => layoutStyles,
    List: () => listStyles,
    ListItem: () => listItemStyles,
    ListItemContent: () => listItemContentStyles,
    ListItemContentMedia: () => listItemContentMediaStyles,
    ListItemEndMedia: () => listItemEndMediaStyles,
    ListItemHeader: () => listItemHeaderStyles,
    ListItemHeaderMedia: () => listItemHeaderMediaStyles,
    ListItemMedia: () => listItemMediaStyles,
    Loader: () => loaderStyles,
    Menu: () => menuStyles,
    MenuButton: () => menuButtonStyles,
    MenuDivider: () => menuDividerStyles,
    MenuItem: () => menuItemStyles,
    MenuItemContent: () => menuItemContentStyles,
    MenuItemIcon: () => menuItemIconStyles,
    MenuItemIndicator: () => menuItemIndicatorStyles,
    MenuItemWrapper: () => menuItemWrapperStyles,
    Pill: () => pillStyles,
    PillAction: () => pillActionStyles,
    PillContent: () => pillContentStyles,
    PillGroup: () => pillGroupStyles,
    PillIcon: () => pillIconStyles,
    PillImage: () => pillImageStyles,
    PopupContent: () => popupContentStyles,
    Provider: () => providerStyles,
    RadioGroup: () => radioGroupStyles,
    RadioGroupItem: () => radioGroupItemStyles,
    Reaction: () => reactionStyles,
    ReactionGroup: () => reactionGroupStyles,
    Segment: () => segmentStyles,
    Skeleton: () => skeletonStyles,
    SkeletonAvatar: () => skeletonAvatarStyles,
    SkeletonButton: () => skeletonButtonStyles,
    SkeletonInput: () => skeletonInputStyles,
    SkeletonLine: () => skeletonLineStyles,
    SkeletonShape: () => skeletonShapeStyles,
    SkeletonText: () => skeletonTextStyles,
    Slider: () => sliderStyles,
    SplitButton: () => splitButtonStyles,
    SplitButtonDivider: () => splitButtonDividerStyles,
    SplitButtonToggle: () => splitButtonToggleStyles,
    Status: () => statusStyles,
    SvgIcon: () => svgIconStyles,
    Table: () => tableStyles,
    TableCell: () => tableCellStyles,
    TableRow: () => tableRowStyles,
    Text: () => textStyles,
    TextArea: () => textAreaStyles,
    Toolbar: () => toolbarStyles,
    ToolbarCustomItem: () => toolbarCustomItemStyles,
    ToolbarDivider: () => toolbarDividerStyles,
    ToolbarItem: () => toolbarItemStyles,
    ToolbarMenu: () => toolbarMenuStyles,
    ToolbarMenuDivider: () => toolbarMenuDividerStyles,
    ToolbarMenuItem: () => toolbarMenuItemStyles,
    ToolbarMenuItemActiveIndicator: () => toolbarMenuItemActiveIndicatorStyles,
    ToolbarMenuItemIcon: () => toolbarMenuItemIconStyles,
    ToolbarMenuItemSubmenuIndicator: () => toolbarMenuItemSubmenuIndicatorStyles,
    ToolbarMenuRadioGroup: () => toolbarMenuRadioGroupStyles,
    ToolbarMenuRadioGroupWrapper: () => toolbarMenuRadioGroupWrapperStyles,
    ToolbarRadioGroup: () => toolbarRadioGroupStyles,
    TooltipContent: () => tooltipContentStyles,
    Tree: () => treeStyles,
    TreeItem: () => treeItemStyles,
    TreeTitle: () => treeTitleStyles,
    Video: () => videoStyles
  });

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Accordion/accordionStyles.js
  var accordionStyles = {
    root: function root2() {
      return {
        verticalAlign: "middle",
        display: "flex",
        flexDirection: "column",
        marginBlockEnd: 0,
        marginBlockStart: 0
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Accordion/accordionContentStyles.js
  var accordionContentStyles = {
    root: function root3(_ref) {
      var props = _ref.props;
      return Object.assign({
        display: "none",
        verticalAlign: "middle"
      }, props.active && {
        display: "block"
      }, {
        marginInlineStart: "" + pxToRem(20)
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Accordion/activeIndicatorUrl.js
  var activeIndicatorUrl = function activeIndicatorUrl2(color2, active) {
    return active ? `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' focusable='false' fill='` + encodeURIComponent(color2) + `' viewBox='8 8 16 16'%3E%3Cpath d='M16 19l3.5-4h-7z' /%3E%3C/svg%3E")` : `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' focusable='false' fill='` + encodeURIComponent(color2) + `' viewBox='8 8 16 16'%3E%3Cpath d='M19 16l-4-3.5v7z' /%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Accordion/accordionTitleStyles.js
  var accordionTitleStyles = {
    root: function root4(_ref) {
      var p2 = _ref.props;
      return {
        display: "inline-block",
        verticalAlign: "middle",
        padding: ".5rem 0",
        cursor: p2.disabled ? "default" : "pointer"
      };
    },
    contentWrapper: function contentWrapper(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      return Object.assign({
        display: "grid",
        gridTemplateColumns: "auto",
        msGridColumns: "auto",
        userSelect: "none"
      }, p2.content && {
        gridTemplateColumns: "auto 1fr",
        msGridColumns: "auto 1fr"
      }, {
        ":focus-visible": {
          borderRadius: v2.focusBorderRadius,
          outline: v2.focusBorderWidth + " solid " + v2.focusBorderColor
        }
      });
    },
    indicator: function indicator(_ref3) {
      var p2 = _ref3.props, v2 = _ref3.variables, rtl2 = _ref3.rtl;
      return Object.assign({
        alignItems: "center",
        display: "inline-flex",
        backgroundImage: activeIndicatorUrl(v2.color, p2.active),
        backgroundPosition: "center"
      }, rtl2 && {
        transform: "scaleX(-1)"
      }, {
        content: '" "',
        overflow: "hidden",
        height: "100%",
        width: pxToRem(16),
        msGridColumn: "1",
        marginRight: "" + pxToRem(4)
      });
    },
    content: function content3() {
      return {
        alignItems: "center",
        display: "grid",
        msGridColumn: "2"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Alert/alertStyles.js
  var getIntentColorsFromProps = function getIntentColorsFromProps2(p2, v2) {
    if (p2.danger) {
      return {
        color: v2.dangerColor,
        backgroundColor: v2.dangerBackgroundColor,
        borderColor: v2.dangerBorderColor
      };
    }
    if (p2.info) {
      return {
        color: v2.color,
        backgroundColor: v2.backgroundColor,
        borderColor: v2.borderColor
      };
    }
    if (v2.oof) {
      return {
        color: v2.oofColor,
        backgroundColor: v2.oofBackgroundColor,
        borderColor: v2.oofBorderColor
      };
    }
    if (v2.urgent) {
      return {
        color: v2.urgentColor,
        backgroundColor: v2.urgentBackgroundColor,
        borderColor: v2.urgentBorderColor
      };
    }
    if (p2.success) {
      return {
        color: v2.successColor,
        backgroundColor: v2.successBackgroundColor,
        borderColor: v2.successBorderColor
      };
    }
    if (p2.warning) {
      return {
        color: v2.warningColor,
        backgroundColor: v2.warningBackgroundColor,
        borderColor: v2.warningBorderColor
      };
    }
    return {
      color: v2.color,
      backgroundColor: v2.backgroundColor,
      borderColor: v2.borderColor
    };
  };
  var alertStyles = {
    root: function root5(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      return Object.assign({
        display: "flex",
        alignItems: "center",
        position: "relative",
        borderStyle: v2.borderStyle,
        borderWidth: v2.borderWidth,
        borderRadius: v2.borderRadius,
        minHeight: v2.minHeight,
        padding: v2.padding,
        fontWeight: v2.fontWeight,
        visibility: "visible",
        boxSizing: "border-box"
      }, getIntentColorsFromProps(p2, v2), (p2.attached === "top" || p2.attached === true) && {
        borderRadius: v2.borderRadius + " " + v2.borderRadius + " 0 0"
      }, p2.attached === "bottom" && {
        borderRadius: "0 0 " + v2.borderRadius + " " + v2.borderRadius
      }, p2.fitted && {
        display: "inline-flex"
      }, p2.dismissible && {
        padding: v2.dismissiblePadding
      }, !p2.visible && {
        visibility: "hidden"
      });
    },
    actions: function actions(_ref2) {
      var v2 = _ref2.variables;
      return {
        margin: v2.actionsMargin
      };
    },
    header: function header(_ref3) {
      var v2 = _ref3.variables;
      return {
        fontWeight: v2.headerFontWeight,
        margin: v2.headerMargin
      };
    },
    body: function body() {
      return {
        display: "flex",
        flexGrow: 1
      };
    },
    content: function content4() {
      return {
        flexGrow: 1
      };
    },
    icon: function icon(_ref4) {
      var v2 = _ref4.variables;
      return {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: v2.iconSize,
        height: v2.iconSize,
        "& > :first-child": {
          height: "100%",
          width: "100%",
          "& svg": {
            height: "100%",
            width: "100%"
          }
        },
        margin: v2.iconMargin
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Alert/AlertDismissAction.js
  var import_invoke = __toESM(require_invoke());
  var import_isEmpty2 = __toESM(require_isEmpty());
  var React187 = __toESM(require_react());
  var alertDismissActionClassName = "ui-alert__dismissaction";
  var alertDismissActionSlotClassNames = {
    content: alertDismissActionClassName + "__content"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/getBorderFocusStyles.js
  var defaultColor = "transparent";
  var getBorderFocusStyles = function getBorderFocusStyles2(args) {
    var sv = args.variables;
    var _args$borderRadius = args.borderRadius, borderRadius3 = _args$borderRadius === void 0 ? sv.focusBorderRadius || sv.borderRadius : _args$borderRadius, _args$focusInnerBorde = args.focusInnerBorderColor, focusInnerBorderColor2 = _args$focusInnerBorde === void 0 ? sv.focusInnerBorderColor || defaultColor : _args$focusInnerBorde, _args$focusOuterBorde = args.focusOuterBorderColor, focusOuterBorderColor2 = _args$focusOuterBorde === void 0 ? sv.focusOuterBorderColor || defaultColor : _args$focusOuterBorde, borderPadding = args.borderPadding, _args$focusInnerBorde2 = args.focusInnerBorderWidth, focusInnerBorderWidth = _args$focusInnerBorde2 === void 0 ? sv.focusInnerBorderWidth || sv.borderWidth : _args$focusInnerBorde2, _args$focusOuterBorde2 = args.focusOuterBorderWidth, focusOuterBorderWidth = _args$focusOuterBorde2 === void 0 ? sv.focusOuterBorderWidth || sv.borderWidth : _args$focusOuterBorde2, _args$zIndex = args.zIndex, zIndex = _args$zIndex === void 0 ? sv.zIndexes.foreground : _args$zIndex;
    var defaultPreudoStyles = {
      content: '""',
      position: "absolute",
      borderStyle: "solid",
      pointerEvents: "none",
      borderRadius: borderRadius3
    };
    var borderPaddingTop = (borderPadding == null ? void 0 : borderPadding.top) || borderPadding;
    var borderPaddingBottom = (borderPadding == null ? void 0 : borderPadding.bottom) || borderPadding;
    var borderPaddingLeft = (borderPadding == null ? void 0 : borderPadding.left) || borderPadding;
    var borderPaddingRight = (borderPadding == null ? void 0 : borderPadding.right) || borderPadding;
    return {
      ":focus": {
        outline: "none"
      },
      ":focus-visible": {
        borderColor: "transparent",
        ":before": Object.assign({}, defaultPreudoStyles, {
          borderWidth: focusInnerBorderWidth,
          zIndex,
          borderColor: focusInnerBorderColor2,
          top: borderPadding == null ? "0" : "-" + borderPaddingTop,
          bottom: borderPadding == null ? "0" : "-" + borderPaddingBottom,
          left: borderPadding == null ? "0" : "-" + borderPaddingLeft,
          right: borderPadding == null ? "0" : "-" + borderPaddingRight
        }),
        ":after": Object.assign({}, defaultPreudoStyles, {
          borderWidth: focusOuterBorderWidth,
          zIndex,
          borderColor: focusOuterBorderColor2,
          top: borderPadding == null ? "-" + focusInnerBorderWidth : "calc(0px - " + borderPaddingTop + " - " + focusInnerBorderWidth + ")",
          bottom: borderPadding == null ? "-" + focusInnerBorderWidth : "calc(0px - " + borderPaddingBottom + " - " + focusInnerBorderWidth + ")",
          left: borderPadding == null ? "-" + focusInnerBorderWidth : "calc(0px - " + borderPaddingLeft + " - " + focusInnerBorderWidth + ")",
          right: borderPadding == null ? "-" + focusInnerBorderWidth : "calc(0px - " + borderPaddingRight + " - " + focusInnerBorderWidth + ")"
        }),
        "@media(forced-colors: active)": {
          ":before": {
            borderColor: "Highlight"
          },
          ":after": {
            borderColor: "Highlight"
          }
        }
      }
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/getIconFillOrOutlineStyles.js
  var getIconFillOrOutlineStyles = function getIconFillOrOutlineStyles2(_ref) {
    var _ref2;
    var outline2 = _ref.outline;
    return _ref2 = {}, _ref2["& ." + iconClassNames.filled] = {
      display: outline2 ? "none" : "block"
    }, _ref2["& ." + iconClassNames.outline] = {
      display: outline2 ? "block" : "none"
    }, _ref2;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Alert/dismissIndicatorUrl.js
  var dismissIndicatorUrl = function dismissIndicatorUrl2(color2, outline2) {
    if (outline2) {
      return `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' focusable='false' viewBox='8 8 16 16'%3E%3Cg%3E%3Cpath fill='` + encodeURIComponent(color2) + `' d='M16.707 16l4.243-4.243a.5.5 0 1 0-.707-.707L16 15.293l-4.243-4.243a.5.5 0 1 0-.707.707L15.293 16l-4.243 4.243a.5.5 0 1 0 .707.707L16 16.707l4.243 4.243a.498.498 0 0 0 .707 0 .5.5 0 0 0 0-.707L16.707 16z' /%3E%3C/g%3E%3C/svg%3E")`;
    }
    return `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' focusable='false' viewBox='8 8 16 16'%3E%3Cg%3E%3Cpath fill='` + encodeURIComponent(color2) + `' d='M17.414 16l3.89-3.89a1 1 0 1 0-1.415-1.413L16 14.586l-3.89-3.89a1 1 0 1 0-1.413 1.415L14.586 16l-3.89 3.89a1 1 0 1 0 1.415 1.413L16 17.414l3.89 3.89a.997.997 0 0 0 1.413 0 1 1 0 0 0 0-1.415L17.414 16z' /%3E%3C/g%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Alert/alertDismissActionStyles.js
  var getIndicatorStyles = function getIndicatorStyles2(color2, outline2, size) {
    return {
      width: size,
      height: size,
      backgroundImage: dismissIndicatorUrl(color2, outline2),
      backgroundRepeat: "no-repeat"
    };
  };
  var alertDismissActionStyles = {
    root: function root6(_ref) {
      var _ref2, _ref3, _ref4;
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var siteVariables = theme.siteVariables;
      var borderWidth3 = siteVariables.borderWidth;
      var _getIntentColorsFromP = getIntentColorsFromProps(p2, v2), dismissActionIndicatorColor = _getIntentColorsFromP.color;
      var borderFocusStyles = getBorderFocusStyles({
        variables: {
          borderRadius: v2.focusBorderRadius,
          borderWidth: v2.focusBorderWidth,
          focusInnerBorderColor: v2.focusInnerBorderColor,
          focusOuterBorderColor: v2.focusOuterBorderColor,
          zIndexes: {
            foreground: v2.focusBorderZIndex
          }
        },
        borderPadding: borderWidth3
      });
      return Object.assign({
        height: v2.dismissActionSize,
        minWidth: v2.dismissActionSize,
        color: v2.dismissActionColor || "currentColor",
        outline: 0,
        padding: 0,
        borderWidth: 0,
        backgroundColor: v2.dismissActionBackgroundColor,
        borderRadius: v2.borderRadius,
        display: "inline-flex",
        justifyContent: "center",
        alignItems: "center",
        position: "relative",
        verticalAlign: "middle",
        cursor: "pointer",
        transition: faster
      }, getIconFillOrOutlineStyles({
        outline: true
      }), !p2.hasContent && (_ref2 = {}, _ref2["& ." + alertDismissActionSlotClassNames.content] = Object.assign({}, getIndicatorStyles(dismissActionIndicatorColor, true, v2.dismissActionIndicatorSize)), _ref2), {
        ":hover": Object.assign({
          backgroundColor: v2.hoverBackgroundColor,
          color: "currentColor"
        }, getIconFillOrOutlineStyles({
          outline: false
        }), !p2.hasContent && (_ref3 = {}, _ref3["& ." + alertDismissActionSlotClassNames.content] = Object.assign({}, getIndicatorStyles(dismissActionIndicatorColor, false, v2.dismissActionIndicatorSize)), _ref3), getBorderFocusStyles({
          variables: {
            borderRadius: v2.dismissActionHoverBorderRadius,
            borderWidth: v2.dismissActionHoverBorderWidth,
            focusInnerBorderColor: v2.dismissActionHoverInnerBorderColor,
            focusOuterBorderColor: v2.dismissActionHoverOuterBorderColor,
            zIndexes: {
              foreground: v2.dismissActionHoverZIndex
            }
          }
        })[":focus-visible"]),
        ":focus": borderFocusStyles[":focus"],
        ":focus-visible": Object.assign({
          backgroundColor: v2.focusBackgroundColor,
          borderColor: v2.dismissActionBorderColorFocus,
          color: v2.dismissActionColorFocus,
          borderWidth: borderWidth3
        }, borderFocusStyles[":focus-visible"], getIconFillOrOutlineStyles({
          outline: false
        }), !p2.hasContent && (_ref4 = {}, _ref4["& ." + alertDismissActionSlotClassNames.content] = Object.assign({}, getIndicatorStyles(dismissActionIndicatorColor, false, v2.dismissActionIndicatorSize)), _ref4), {
          ":hover": {
            borderColor: v2.dismissActionBorderColorHover
          }
        })
      }, p2.disabled && {
        cursor: "default",
        color: v2.dismissActionColorDisabled,
        boxShadow: "none",
        pointerEvents: "none",
        ":hover": {
          color: v2.dismissActionColorDisabled
        },
        backgroundColor: v2.dismissActionBackgroundColorDisabled,
        borderColor: v2.dismissActionBorderColorDisabled
      });
    },
    content: function content5(_ref5) {
      var p2 = _ref5.props, v2 = _ref5.variables;
      var _getIntentColorsFromP2 = getIntentColorsFromProps(p2, v2), dismissActionIndicatorColor = _getIntentColorsFromP2.color;
      return Object.assign({
        fontWeight: v2.dismissActionContentFontWeight
      }, !p2.hasContent && Object.assign({}, getIndicatorStyles(dismissActionIndicatorColor, false, v2.dismissActionIndicatorSize)));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Attachment/Attachment.js
  var import_isNil2 = __toESM(require_isNil());
  var import_invoke3 = __toESM(require_invoke());
  var React190 = __toESM(require_react());

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Button/Button.js
  var import_invoke2 = __toESM(require_invoke());
  var React189 = __toESM(require_react());

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Loader/Loader.js
  var React188 = __toESM(require_react());
  var loaderClassName = "ui-loader";
  var loaderSlotClassNames = {
    indicator: loaderClassName + "__indicator",
    label: loaderClassName + "__label"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Button/Button.js
  var buttonClassName = "ui-button";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Attachment/AttachmentAction.js
  var attachmentActionClassName = "ui-attachment__action";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Attachment/Attachment.js
  var attachmentClassName = "ui-attachment";
  var attachmentProgressContainerClassName = attachmentClassName + "__progress-container";
  var attachmentProgressBarClassName = attachmentClassName + "__progress";

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Attachment/attachmentStyles.js
  var attachmentStyles = {
    root: function root7(_ref) {
      var _ref2, _Object$assign, _Object$assign2, _hover;
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables,
        borderRadius: v2.borderRadius
      });
      return Object.assign({
        position: "relative",
        display: "inline-flex",
        alignItems: "center",
        width: "100%",
        maxWidth: pxToRem(440),
        minHeight: pxToRem(48),
        padding: v2.padding,
        marginBottom: pxToRem(2),
        marginRight: pxToRem(2),
        background: v2.backgroundColor,
        color: v2.textColor,
        boxShadow: v2.boxShadow,
        border: siteVariables.borderWidth + " solid " + v2.borderColor,
        borderRadius: v2.borderRadius
      }, borderFocusStyles, (_Object$assign = {}, _Object$assign["& ." + attachmentProgressContainerClassName] = (_ref2 = {
        borderBottomLeftRadius: v2.borderRadius,
        borderBottomRightRadius: v2.borderRadius,
        bottom: 0,
        height: v2.progressHeight,
        left: 0,
        overflow: "hidden",
        position: "absolute",
        right: 0
      }, _ref2["& ." + attachmentProgressBarClassName] = {
        background: v2.progressColor,
        height: "100%",
        maxWidth: "100%",
        transition: "width 0.2s"
      }, _ref2), _Object$assign), p2.actionable && {
        cursor: "pointer",
        ":focus-visible": Object.assign({}, borderFocusStyles[":focus-visible"], (_Object$assign2 = {
          backgroundColor: v2.focusBackgroundColor,
          color: v2.focusColor
        }, _Object$assign2["& ." + attachmentActionClassName] = {
          color: v2.focusColor
        }, _Object$assign2["& ." + svgIconClassName] = {
          color: v2.focusColor
        }, _Object$assign2)),
        ":hover": (_hover = {
          backgroundColor: v2.backgroundColorHover,
          color: v2.textColorHover
        }, _hover["& ." + attachmentActionClassName] = {
          color: v2.textColorHover
        }, _hover["& ." + svgIconClassName] = {
          color: v2.textColorHover
        }, _hover)
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Attachment/attachmentActionStyles.js
  var attachmentActionStyles = {
    root: function root8(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var siteVariables = theme.siteVariables;
      var iconFilledStyles = getIconFillOrOutlineStyles({
        outline: false
      });
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables,
        borderRadius: v2.actionFocusBorderRadius
      });
      return Object.assign({
        height: v2.actionHeight,
        maxWidth: v2.actionMaxWidth,
        display: "inline-flex",
        justifyContent: "center",
        alignItems: "center",
        position: "relative",
        verticalAlign: "middle",
        cursor: "pointer",
        // text button defaults
        color: v2.actionColor,
        // textColor
        backgroundColor: "transparent",
        borderColor: "transparent",
        padding: 0
      }, getIconFillOrOutlineStyles({
        outline: true
      }), {
        ":focus": Object.assign({
          boxShadow: "none"
        }, borderFocusStyles[":focus"]),
        ":focus-visible": Object.assign({}, iconFilledStyles, borderFocusStyles[":focus-visible"])
      }, p2.primary && {
        color: v2.actionPrimaryColor
      }, p2.disabled && {
        cursor: "default",
        boxShadow: "none",
        pointerEvents: "none",
        color: v2.actionColorDisabled,
        backgroundColor: "transparent",
        ":hover": {
          color: v2.actionColorDisabled
        }
      }, {
        minWidth: v2.actionHeight,
        ":hover": Object.assign({}, getIconFillOrOutlineStyles({
          outline: false
        }))
      });
    },
    icon: function icon2(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: v2.actionIconSize,
        height: v2.actionIconSize
      }, p2.loading && {
        margin: 0,
        opacity: 0,
        width: 0
      }, p2.hasContent && Object.assign({
        margin: "0 " + pxToRem(10) + " 0 0"
      }, p2.iconPosition === "after" && {
        margin: "0 0 0 " + pxToRem(10)
      }));
    },
    loader: function loader(_ref3) {
      var _Object$assign;
      var p2 = _ref3.props, v2 = _ref3.variables;
      return Object.assign((_Object$assign = {}, _Object$assign["& ." + loaderSlotClassNames.indicator] = {
        width: v2.actionLoaderSize,
        height: v2.actionLoaderSize
      }, _Object$assign["& ." + loaderSlotClassNames.indicator + " > svg"] = {
        width: v2.actionLoaderSize,
        height: v2.actionLoaderSvgHeight
      }, _Object$assign), p2.hasContent && {
        marginRight: pxToRem(4)
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Attachment/attachmentBodyStyles.js
  var attachmentBodyStyles = {
    root: function root9() {
      return {
        flex: 1
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Attachment/attachmentDescriptionStyles.js
  var attachmentDescriptionStyles = {
    root: function root10(_ref) {
      var v2 = _ref.variables;
      return {
        display: "block",
        fontSize: v2.descriptionFontSize,
        fontWeight: v2.descriptionFontWeight,
        lineHeight: v2.descriptionLineHeight
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Attachment/attachmentHeaderStyles.js
  var attachmentHeaderStyles = {
    root: function root11(_ref) {
      var v2 = _ref.variables;
      return {
        display: "block",
        fontSize: v2.headerFontSize,
        fontWeight: v2.headerFontWeight,
        lineHeight: v2.headerLineHeight
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Attachment/attachmentIconStyles.js
  var attachmentIconStyles = {
    root: function root12(_ref) {
      var _ref2;
      var v2 = _ref.variables;
      return _ref2 = {
        height: v2.iconSize,
        width: v2.iconSize,
        marginRight: v2.iconSpace
      }, _ref2["& ." + svgIconClassName] = {
        height: "100%",
        width: "100%",
        "& svg": {
          height: "100%",
          width: "100%"
        }
      }, _ref2;
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Avatar/avatarSizes.js
  var sizeToPxValue = {
    smallest: 20,
    smaller: 24,
    small: 28,
    medium: 32,
    "medium-large": 36,
    large: 44,
    larger: 64,
    largest: 96
  };
  var iconSizeToPxValue = {
    smallest: 10,
    smaller: 12,
    small: 16,
    medium: 16,
    "medium-large": 20,
    large: 20,
    larger: 32,
    largest: 40
  };
  var statusSizeToPxValue = {
    smallest: 6,
    smaller: 10,
    small: 10,
    medium: 10,
    "medium-large": 10,
    large: 10,
    larger: 16,
    largest: 0
  };
  var statusIconSizeToPxValue = {
    smallest: 4,
    smaller: 6,
    small: 6,
    medium: 6,
    "medium-large": 6,
    large: 6,
    larger: 10,
    largest: 0
  };
  var getSizeStyles = function getSizeStyles2(sizeInPx) {
    var sizeInRem = pxToRem(sizeInPx);
    return {
      height: sizeInRem,
      width: sizeInRem
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Avatar/avatarStyles.js
  var avatarStyles = {
    root: function root13(_ref) {
      var size = _ref.props.size, initialsFontWeight = _ref.variables.initialsFontWeight;
      return Object.assign({
        position: "relative",
        backgroundColor: "inherit",
        display: "inline-block",
        verticalAlign: "middle",
        fontWeight: initialsFontWeight
      }, getSizeStyles(sizeToPxValue[size]));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Avatar/avatarStatusStyles.js
  var avatarStatusStyles = {
    root: function root14(_ref) {
      var _ref$props = _ref.props, color2 = _ref$props.color, size = _ref$props.size, state = _ref$props.state, v2 = _ref.variables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center"
      }, getSizeStyles(statusSizeToPxValue[size]), {
        verticalAlign: "middle",
        borderRadius: "9999px",
        position: "absolute",
        bottom: 0,
        right: 0,
        boxShadow: "0 0 0 " + v2.statusBorderWidth + " " + v2.statusBorderColor
      }, state === "success" && {
        backgroundColor: v2.statusSuccessBackgroundColor
      }, state === "info" && {
        backgroundColor: v2.statusInfoBackgroundColor
      }, state === "warning" && {
        backgroundColor: v2.statusWarningBackgroundColor
      }, state === "error" && {
        backgroundColor: v2.statusErrorBackgroundColor
      }, state === "unknown" && {
        backgroundColor: v2.statusBackgroundColor
      }, !!color2 && {
        backgroundColor: color2
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Avatar/avatarStatusIconStyles.js
  var avatarStatusIconStyles = {
    root: function root15(_ref) {
      var _ref$props = _ref.props, size = _ref$props.size, state = _ref$props.state, v2 = _ref.variables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center"
      }, getSizeStyles(statusIconSizeToPxValue[size]), {
        color: v2.statusColor
      }, state === "success" && {
        color: v2.statusSuccessColor
      }, state === "info" && {
        color: v2.statusInfoColor
      }, state === "error" && {
        color: v2.statusErrorColor
      }, state === "warning" && {
        color: v2.statusWarningColor
      }, {
        "& > :first-child": {
          height: "100%",
          width: "100%",
          "& svg": {
            height: "100%",
            width: "100%"
          }
        }
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Avatar/avatarStatusImageStyles.js
  var avatarStatusImageStyles = {
    root: function root16(_ref) {
      var size = _ref.props.size, v2 = _ref.variables;
      return Object.assign({
        borderRadius: v2.imageCircularRadius,
        objectFit: "cover"
      }, getSizeStyles(statusSizeToPxValue[size]));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Avatar/avatarImageStyles.js
  var avatarImageStyles = {
    root: function root17(_ref) {
      var v2 = _ref.variables, p2 = _ref.props;
      return Object.assign({
        boxSizing: "border-box",
        display: "inline-block"
      }, p2.circular && {
        borderRadius: v2.imageCircularRadius
      }, p2.avatar && {
        width: p2.fluid && "100%" || v2.imageAvatarSize,
        borderRadius: v2.imageAvatarRadius
      }, {
        borderColor: v2.avatarBorderColor,
        borderStyle: "solid",
        borderWidth: v2.avatarBorderWidth,
        height: "100%",
        objectFit: "cover",
        verticalAlign: "top",
        width: "100%"
      }, !p2.avatar && {
        borderRadius: v2.squareAvatarBorderRadius
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Avatar/avatarIconStyles.js
  var avatarIconStyles = {
    root: function root18(_ref) {
      var _ref$props = _ref.props, size = _ref$props.size, square = _ref$props.square, v2 = _ref.variables;
      return Object.assign({
        color: v2.iconColor,
        background: v2.iconBackgroundColor
      }, getSizeStyles(sizeToPxValue[size]), {
        borderRadius: "50%",
        display: "inline-flex",
        alignItems: "center"
      }, square && {
        borderRadius: v2.squareAvatarBorderRadius
      }, {
        "& > :first-child": Object.assign({
          margin: "0 auto"
        }, getSizeStyles(iconSizeToPxValue[size]), {
          "& svg": {
            width: "100%",
            height: "100%"
          }
        })
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Avatar/avatarLabelStyles.js
  var avatarLabelStyles = {
    root: function root19(_ref) {
      var _ref$props = _ref.props, circular = _ref$props.circular, size = _ref$props.size, square = _ref$props.square, v2 = _ref.variables;
      var sizeInRem = pxToRem(sizeToPxValue[size]);
      return Object.assign({
        alignItems: "center",
        overflow: "hidden",
        color: v2.labelColor,
        backgroundColor: v2.labelBackground,
        borderRadius: "50%",
        display: "inline-block",
        width: sizeInRem,
        height: sizeInRem,
        lineHeight: sizeInRem,
        fontSize: pxToRem(sizeToPxValue[size] / 2.333),
        verticalAlign: "top",
        textAlign: "center",
        padding: "0"
      }, square && {
        borderRadius: v2.squareAvatarBorderRadius
      }, circular && {
        borderRadius: v2.labelCircularRadius
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Button/buttonStyles.js
  var import_isNil3 = __toESM(require_isNil());
  var buttonStyles = {
    root: function root20(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var siteVariables = theme.siteVariables;
      var borderWidth3 = siteVariables.borderWidth;
      var borderFocusStyles = getBorderFocusStyles(Object.assign({
        variables: siteVariables,
        borderRadius: siteVariables.borderRadiusMedium,
        borderPadding: borderWidth3
      }, p2.circular && {
        borderPadding: pxToRem(4)
      }));
      return Object.assign({
        height: v2.height,
        minWidth: (0, import_isNil3.default)(p2.loading) ? v2.minWidth : v2.loadingMinWidth,
        maxWidth: v2.maxWidth,
        color: v2.color,
        backgroundColor: v2.backgroundColor,
        borderRadius: v2.borderRadius,
        display: "inline-flex",
        justifyContent: "center",
        alignItems: "center",
        position: "relative",
        padding: v2.padding,
        verticalAlign: "middle",
        cursor: "pointer",
        transition: faster,
        userSelect: "none"
      }, !(p2.text || p2.flat || p2.size === "small") && Object.assign({}, p2.primary && {
        boxShadow: v2.primaryBoxShadow
      }, !p2.primary && {
        boxShadow: v2.boxShadow
      }), p2.size === "small" && {
        padding: v2.sizeSmallPadding,
        height: v2.sizeSmallHeight,
        minWidth: v2.sizeSmallMinWidth
      }, !p2.text && Object.assign({
        outline: 0,
        borderWidth: borderWidth3,
        borderStyle: "solid",
        borderColor: v2.borderColor,
        ":hover": {
          color: v2.colorHover,
          backgroundColor: v2.backgroundColorHover,
          borderColor: v2.borderColorHover
        }
      }, !p2.disabledFocusable && {
        ":active": {
          transition: ultraFast,
          color: v2.colorActive,
          backgroundColor: v2.backgroundColorActive,
          borderColor: v2.borderColorActive,
          boxShadow: "none"
        }
      }, {
        ":focus": borderFocusStyles[":focus"],
        ":focus-visible": Object.assign({}, borderFocusStyles[":focus-visible"], {
          backgroundColor: v2.backgroundColorFocus,
          borderColor: v2.borderColorFocus,
          color: v2.colorFocus,
          borderWidth: borderWidth3,
          ":hover": {
            borderColor: v2.borderColorHover
          }
        })
      }), p2.circular && !p2.text && Object.assign({
        minWidth: v2.height,
        padding: 0,
        borderRadius: v2.circularBorderRadius
      }, p2.size === "small" && {
        minWidth: v2.sizeSmallHeight
      }), p2.text && Object.assign({
        color: v2.textColor,
        backgroundColor: "transparent",
        borderColor: "transparent",
        padding: "0 " + pxToRem(8)
      }, getIconFillOrOutlineStyles({
        outline: true
      }), {
        ":hover": Object.assign({
          color: v2.textColorHover
        }, getIconFillOrOutlineStyles({
          outline: false
        })),
        ":active": {
          color: siteVariables.colorScheme.brand.backgroundPressed
        },
        ":focus": Object.assign({
          boxShadow: "none"
        }, borderFocusStyles[":focus"]),
        ":focus-visible": borderFocusStyles[":focus-visible"]
      }, p2.primary && {
        color: v2.textPrimaryColor
      }), p2.primary && !p2.text && Object.assign({
        color: v2.primaryColor,
        backgroundColor: v2.primaryBackgroundColor,
        borderColor: v2.primaryBorderColor
      }, !p2.disabledFocusable && {
        ":active": {
          transition: ultraFast,
          backgroundColor: v2.primaryBackgroundColorActive,
          boxShadow: "none"
        }
      }, {
        ":focus": borderFocusStyles[":focus"],
        ":focus-visible": Object.assign({}, borderFocusStyles[":focus-visible"], {
          backgroundColor: v2.primaryBackgroundColorFocus
        }),
        ":hover": {
          color: v2.primaryColorHover,
          backgroundColor: v2.primaryBackgroundColorHover
        }
      }), p2.inverted && Object.assign({
        backgroundColor: siteVariables.colorScheme.silver.background,
        borderColor: siteVariables.colorScheme.silver.border,
        color: siteVariables.colorScheme.silver.foreground
      }, !p2.disabledFocusable && {
        ":active": {
          transition: ultraFast,
          backgroundColor: siteVariables.colorScheme.silver.backgroundPressed,
          color: siteVariables.colorScheme.silver.foregroundHover
        }
      }, {
        ":hover": {
          backgroundColor: siteVariables.colorScheme.silver.backgroundHover,
          color: siteVariables.colorScheme.silver.foregroundHover
        },
        ":focus": Object.assign({}, borderFocusStyles[":focus"], {
          boxShadow: "none"
        }),
        ":focus-visible": Object.assign({}, borderFocusStyles[":focus-visible"], !p2.disabledFocusable && {
          backgroundColor: siteVariables.colorScheme.silver.backgroundPressed,
          color: siteVariables.colorScheme.silver.foregroundHover
        })
      }), p2.tinted && Object.assign({
        backgroundColor: v2.tintedBackgroundColor,
        borderColor: v2.tintedBorderColor,
        color: v2.tintedColor
      }, !p2.disabledFocusable && {
        ":active": {
          transition: ultraFast,
          backgroundColor: v2.tintedBackgroundColorActive
        }
      }, {
        ":hover": {
          color: v2.tintedColorHover,
          backgroundColor: v2.tintedBackgroundColorHover,
          borderColor: v2.tintedBorderColorHover
        },
        ":focus": {
          boxShadow: "none"
        }
      }), p2.disabled && {
        // pointer events intentionally not disabled for focusable disabled buttons
        // so that hover events work
        pointerEvents: "none"
      }, (p2.disabled || p2.disabledFocusable) && Object.assign({
        cursor: "default",
        color: v2.colorDisabled,
        boxShadow: "none",
        ":hover": {
          color: v2.colorDisabled
        }
      }, p2.text && {
        color: v2.textColorDisabled,
        backgroundColor: "transparent",
        ":hover": {
          color: v2.textColorDisabled
        },
        ":active": {
          color: v2.textColorDisabled
        }
      }, !p2.text && {
        backgroundColor: v2.backgroundColorDisabled,
        borderColor: v2.borderColorDisabled
      }), p2.fluid && {
        width: "100%",
        maxWidth: "100%"
      }, p2.iconOnly && Object.assign({
        minWidth: v2.height,
        padding: 0
      }, !p2.inverted && !p2.disabledFocusable && {
        ":hover": Object.assign({}, getIconFillOrOutlineStyles({
          outline: false
        }), {
          color: v2.textColorIconOnlyHover,
          background: v2.backgroundColorIconOnlyHover
        })
      }, p2.size === "small" && {
        minWidth: v2.sizeSmallHeight
      }));
    },
    icon: function icon3(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: v2.iconSize,
        height: v2.iconSize
      }, p2.loading && {
        margin: 0,
        opacity: 0,
        width: 0
      }, p2.hasContent && Object.assign({
        margin: "0 " + pxToRem(10) + " 0 0"
      }, p2.iconPosition === "after" && {
        margin: "0 0 0 " + pxToRem(10)
      }));
    },
    loader: function loader2(_ref3) {
      var _Object$assign;
      var p2 = _ref3.props, v2 = _ref3.variables;
      return Object.assign((_Object$assign = {}, _Object$assign["& ." + loaderSlotClassNames.indicator] = {
        width: p2.size === "small" ? v2.sizeSmallLoaderSize : v2.loaderSize,
        height: p2.size === "small" ? v2.sizeSmallLoaderSize : v2.loaderSize
      }, _Object$assign["& ." + loaderSlotClassNames.indicator + " > svg"] = {
        width: p2.size === "small" ? v2.sizeSmallLoaderSize : v2.loaderSize,
        height: p2.size === "small" ? v2.sizeSmallLoaderSvgHeight : v2.loaderSvgHeight
      }, _Object$assign), p2.hasContent && {
        marginRight: pxToRem(4)
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Button/buttonGroupStyles.js
  var commonButtonsStyles = function commonButtonsStyles2(circular) {
    return circular ? {
      marginRight: pxToRem(8)
    } : {
      borderRadius: 0
    };
  };
  var buttonGroupStyles = {
    root: function root21() {
      return {};
    },
    middleButton: function middleButton(_ref) {
      var p2 = _ref.props;
      return Object.assign({}, commonButtonsStyles(p2.circular));
    },
    firstButton: function firstButton(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      return Object.assign({}, commonButtonsStyles(p2.circular), !p2.circular && {
        borderTopLeftRadius: v2.borderRadius,
        borderBottomLeftRadius: v2.borderRadius
      });
    },
    lastButton: function lastButton(_ref3) {
      var p2 = _ref3.props, v2 = _ref3.variables;
      return Object.assign({}, commonButtonsStyles(p2.circular), !p2.circular && {
        borderTopRightRadius: v2.borderRadius,
        borderBottomRightRadius: v2.borderRadius
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Button/buttonContentStyles.js
  var buttonContentStyles = {
    root: function root22(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap",
        fontSize: v2.contentFontSize,
        fontWeight: v2.contentFontWeight,
        lineHeight: v2.contentLineHeight
      }, p2.size === "small" && {
        fontSize: v2.sizeSmallContentFontSize,
        lineHeight: v2.sizeSmallContentLineHeight
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Breadcrumb/breadcrumbItemStyles.js
  var breadcrumbItemStyles = {
    root: function root23(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center",
        verticalAlign: "middle"
      }, p2.active && {
        fontWeight: v2.itemCurrentFontWeight
      }, p2.disabled && {
        color: v2.disabledColor
      }, p2.size === "smaller" && {
        paddingLeft: v2.linkPaddingLeftSmaller,
        paddingRight: v2.linkPaddingRightSmaller,
        gap: v2.linkSmallerGap
      }, p2.size === "small" && {
        paddingLeft: v2.linkPaddingLeftSmall,
        paddingRight: v2.linkPaddingRightSmall,
        gap: v2.linkSmallGap
      }, p2.size === "medium" && {
        paddingLeft: v2.linkPaddingLeftMedium,
        paddingRight: v2.linkPaddingRightMedium,
        gap: v2.linkMediumGap
      }, p2.size === "large" && {
        paddingLeft: v2.linkPaddingLeftLarge,
        paddingRight: v2.linkPaddingRightLarge,
        gap: v2.linkLargeGap
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Breadcrumb/breadcrumbDividerStyles.js
  var breadcrumbDividerStyles = {
    root: function root24(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return {
        verticalAlign: "middle"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Breadcrumb/breadcrumbLinkStyles.js
  var breadcrumbLinkStyles = {
    root: function root25(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      var borderFocusStyles = getBorderFocusStyles(Object.assign({
        variables: siteVariables
      }, p2.size === "smaller" && {
        borderPadding: {
          top: v2.linkPaddingTop,
          right: v2.linkPaddingRightSmaller,
          bottom: v2.linkPaddingBottom,
          left: v2.linkPaddingLeftSmaller
        }
      }, p2.size === "small" && {
        borderPadding: {
          top: v2.linkPaddingTop,
          right: v2.linkPaddingRightSmall,
          bottom: v2.linkPaddingBottom,
          left: v2.linkPaddingLeftSmall
        }
      }, p2.size === "medium" && {
        borderPadding: {
          top: v2.linkPaddingTop,
          right: v2.linkPaddingRightMedium,
          bottom: v2.linkPaddingBottom,
          left: v2.linkPaddingLeftMedium
        }
      }, p2.size === "large" && {
        borderPadding: {
          top: v2.linkPaddingTop,
          right: v2.linkPaddingRightLarge,
          bottom: v2.linkPaddingBottom,
          left: v2.linkPaddingLeftLarge
        }
      }));
      return Object.assign({
        userSelect: "none",
        display: "flex",
        alignItems: "center",
        position: "relative",
        ":visited": {
          color: "inherit"
        }
      }, borderFocusStyles);
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Breadcrumb/breadcrumbStyles.js
  var breadcrumbStyles = {
    root: function root26(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center"
      }, p2.size === "smaller" && {
        fontSize: v2.fontSizeSmaller
      }, p2.size === "small" && {
        fontSize: v2.fontSizeSmall
      }, p2.size === "medium" && {
        fontSize: v2.fontSizeMedium
      }, p2.size === "large" && {
        fontSize: v2.fontSizeLarge
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatStyles.js
  var chatStyles = {
    root: function root27(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      return {
        backgroundColor: v2.backgroundColor,
        border: siteVariables.borderWidth + " solid " + v2.backgroundColor,
        display: "flex",
        flexDirection: "column",
        listStyle: "none",
        margin: 0,
        padding: p2.density === "compact" ? "0 " + pxToRem(4) + " " + pxToRem(2) : "0 " + pxToRem(10) + " 0 " + pxToRem(10)
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Chat/chatDensity.js
  var defaultChatDensity = "comfy";

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatItemStylesComfy.js
  var chatItemStylesComfy = {
    root: function root28(_ref) {
      var p2 = _ref.props;
      return Object.assign({}, (!p2.attached || p2.attached === "top") && {
        paddingTop: pxToRem(16)
      }, (p2.attached === "bottom" || p2.attached === true) && {
        paddingTop: pxToRem(2)
      });
    },
    gutter: function gutter(_ref2) {
      var _ref3;
      var p2 = _ref2.props, v2 = _ref2.variables;
      return _ref3 = {
        marginTop: p2.layout === "refresh" ? v2.gutterMarginComfyRefresh : v2.gutterMargin
      }, _ref3[p2.contentPosition === "end" ? "right" : "left"] = 0, _ref3;
    },
    message: function message(_ref4) {
      var v2 = _ref4.variables;
      return {
        marginLeft: v2.messageMargin,
        marginRight: v2.messageMargin
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatItemStylesCompact.js
  var chatItemStylesCompact = {
    root: function root29(_ref) {
      var p2 = _ref.props;
      return Object.assign({}, (!p2.attached || p2.attached === "top") && {
        paddingTop: pxToRem(8)
      }, {
        marginTop: pxToRem(-2),
        marginBottom: pxToRem(-2)
      });
    },
    gutter: function gutter2(_ref2) {
      var v2 = _ref2.variables;
      return {
        marginTop: v2.gutterMarginCompact,
        left: pxToRem(28)
      };
    },
    message: function message2(_ref3) {
      var v2 = _ref3.variables;
      return {
        marginLeft: v2.messageMarginCompact,
        marginRight: v2.messageMarginEndCompact,
        width: "calc(100% - " + v2.messageMarginCompact + " - " + v2.messageMarginEndCompact + ")"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatItemStyles.js
  var chatItemDensityStyles = {
    comfy: chatItemStylesComfy,
    compact: chatItemStylesCompact
  };
  var getChatItemDensityStyles = function getChatItemDensityStyles2(density) {
    if (density === void 0) {
      density = defaultChatDensity;
    }
    return chatItemDensityStyles[density];
  };
  var chatItemStyles = {
    root: function root30(componentStyleFunctionParam) {
      var p2 = componentStyleFunctionParam.props;
      return Object.assign({
        paddingBottom: 0,
        position: "relative"
      }, getChatItemDensityStyles(p2.density).root(componentStyleFunctionParam));
    },
    gutter: function gutter3(componentStyleFunctionParam) {
      var p2 = componentStyleFunctionParam.props;
      return Object.assign({
        position: "absolute"
      }, (p2.attached === "bottom" || p2.attached === true) && {
        display: "none"
      }, getChatItemDensityStyles(p2.density).gutter(componentStyleFunctionParam));
    },
    message: function message3(componentStyleFunctionParam) {
      var p2 = componentStyleFunctionParam.props;
      return Object.assign({
        float: p2.contentPosition === "end" ? "right" : "left",
        position: "relative"
      }, getChatItemDensityStyles(p2.density).message(componentStyleFunctionParam));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageStyles.js
  var import_isNil6 = __toESM(require_isNil());

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Chat/ChatMessage.js
  var import_invoke5 = __toESM(require_invoke());
  var import_isNil4 = __toESM(require_isNil());
  var import_classnames2 = __toESM(require_classnames());
  var React197 = __toESM(require_react());

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Flex/Flex.js
  var import_get2 = __toESM(require_get());
  var React191 = __toESM(require_react());
  var flexClassName = "ui-flex";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Menu/MenuItem.js
  var import_invoke4 = __toESM(require_invoke());
  var React194 = __toESM(require_react());

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Menu/MenuItemIcon.js
  var React192 = __toESM(require_react());
  var menuItemIconClassName = "ui-menu__itemicon";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Menu/MenuItemIndicator.js
  var React193 = __toESM(require_react());
  var menuItemIndicatorClassName = "ui-menu__itemindicator";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Menu/MenuItem.js
  var menuItemClassName = "ui-menu__item";
  var menuItemSlotClassNames = {
    submenu: menuItemClassName + "__submenu"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Provider/portalContext.js
  var React195 = __toESM(require_react());
  var PortalContext = /* @__PURE__ */ React195.createContext({
    className: ""
  });

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Reaction/Reaction.js
  var React196 = __toESM(require_react());
  var reactionClassName = "ui-reaction";
  var reactionSlotClassNames = {
    icon: reactionClassName + "__icon",
    content: reactionClassName + "__content"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Chat/ChatMessage.js
  var chatMessageClassName = "ui-chat__message";
  var chatMessageSlotClassNames = {
    actionMenu: chatMessageClassName + "__actions",
    author: chatMessageClassName + "__author",
    badge: chatMessageClassName + "__badge",
    bar: chatMessageClassName + "__bar",
    body: chatMessageClassName + "__body",
    bubble: chatMessageClassName + "__bubble",
    bubbleInset: chatMessageClassName + "__bubble-inset",
    compactBody: chatMessageClassName + "__compact-body",
    reactionGroup: chatMessageClassName + "__reactions",
    timestamp: chatMessageClassName + "__timestamp"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageStylesComfy.js
  var chatMessageStylesComfy = {
    root: function root31(_ref) {
      var _ref2, _ref3, _ref4, _ref5;
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        marginLeft: p2.mine ? v2.offset : 0,
        marginRight: !p2.mine ? v2.offset : 0,
        maxWidth: "calc(100% - " + v2.offset + ")",
        minWidth: v2.offset,
        paddingLeft: v2.padding,
        paddingRight: v2.padding,
        paddingTop: pxToRem(8),
        paddingBottom: pxToRem(10),
        backgroundColor: p2.mine ? v2.backgroundColorMine : v2.backgroundColor,
        border: v2.border
      }, (v2.hasMention || v2.isImportant) && (_ref2 = {}, _ref2["& ." + chatMessageSlotClassNames.bar] = {
        backgroundColor: v2.hasMention ? v2.hasMentionColor : v2.isImportantColor,
        position: "absolute",
        borderBottomLeftRadius: "inherit",
        borderTopLeftRadius: "inherit",
        height: "100%",
        left: "0",
        top: "0",
        width: pxToRem(3)
      }, _ref2), p2.attached === true && (_ref3 = {}, _ref3[p2.mine ? "borderTopRightRadius" : "borderTopLeftRadius"] = 0, _ref3[p2.mine ? "borderBottomRightRadius" : "borderBottomLeftRadius"] = 0, _ref3.paddingTop = pxToRem(5), _ref3.paddingBottom = pxToRem(7), _ref3), p2.attached === "top" && (_ref4 = {}, _ref4[p2.mine ? "borderBottomRightRadius" : "borderBottomLeftRadius"] = 0, _ref4), p2.attached === "bottom" && (_ref5 = {}, _ref5[p2.mine ? "borderTopRightRadius" : "borderTopLeftRadius"] = 0, _ref5.paddingTop = pxToRem(5), _ref5.paddingBottom = pxToRem(7), _ref5));
    },
    author: function author(_ref6) {
      var p2 = _ref6.props, v2 = _ref6.variables;
      return Object.assign({}, (p2.mine || p2.attached === "bottom" || p2.attached === true) && screenReaderContainerStyles, {
        color: v2.authorColor,
        fontWeight: v2.authorFontWeight,
        marginRight: v2.authorMarginRight,
        marginBottom: v2.headerMarginBottom
      });
    },
    badge: function badge(_ref7) {
      var _ref8;
      var p2 = _ref7.props;
      return _ref8 = {}, _ref8[p2.badgePosition === "start" ? "left" : "right"] = 0, _ref8.transform = p2.badgePosition === "start" ? "translateX(-50%)" : "translateX(50%)", _ref8.top = pxToRem(4), _ref8.position = "absolute", _ref8;
    },
    reactionGroup: function reactionGroup(_ref9) {
      var p2 = _ref9.props, v2 = _ref9.variables;
      return Object.assign({
        marginLeft: v2.reactionGroupMarginLeft
      }, p2.hasBadge && p2.badgePosition === "end" && {
        marginRight: pxToRem(2)
      }, {
        float: "right"
      });
    },
    timestamp: function timestamp(_ref10) {
      var p2 = _ref10.props, v2 = _ref10.variables;
      return Object.assign({
        marginBottom: v2.headerMarginBottom
      }, (p2.attached === "bottom" || p2.attached === true) && !p2.hasHeaderReactionGroup && screenReaderContainerStyles);
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageStylesCompact.js
  var chatMessageStylesCompact = {
    root: function root32(_ref) {
      var _highlight, _ref2;
      var siteVariables = _ref.theme.siteVariables, v2 = _ref.variables;
      var borderFocusStyles = getBorderFocusStyles({
        borderRadius: "inherit",
        variables: siteVariables
      });
      var highlight = (_highlight = {
        backgroundColor: v2.compactHoverBackground,
        border: v2.compactHoverBorder
      }, _highlight["& ." + chatMessageSlotClassNames.timestamp] = {
        opacity: 1
      }, _highlight);
      return Object.assign({
        border: v2.compactBorder,
        padding: v2.paddingCompact,
        width: "100%"
      }, (v2.hasMention || v2.isImportant) && (_ref2 = {}, _ref2["& ." + chatMessageSlotClassNames.bar] = {
        backgroundColor: v2.hasMention ? v2.hasMentionColor : v2.isImportantColor,
        position: "absolute",
        borderRadius: pxToRem(2),
        height: pxToRem(20),
        left: pxToRem(-56),
        top: v2.paddingCompact,
        width: pxToRem(2)
      }, _ref2), {
        ":focus-visible": Object.assign({}, borderFocusStyles[":focus-visible"], highlight),
        "&:hover": highlight
      });
    },
    author: function author2(_ref3) {
      var p2 = _ref3.props, v2 = _ref3.variables;
      return Object.assign({}, (p2.attached === "bottom" || p2.attached === true) && screenReaderContainerStyles, {
        color: p2.mine ? v2.authorColorMineCompact : v2.contentColor,
        float: "left",
        fontWeight: v2.authorFontWeightCompact,
        marginRight: v2.authorMarginRightCompact
      });
    },
    badge: function badge2(_ref4) {
      var v2 = _ref4.variables;
      return {
        alignSelf: "flex-start",
        flexShrink: 0,
        margin: pxToRem(-2) + " " + pxToRem(-2) + " " + pxToRem(-2) + " " + v2.compactSpacing
      };
    },
    compactBody: function compactBody() {
      return {
        display: "flex",
        justifyContent: "space-between",
        "& > div": {
          minWidth: 0
        }
      };
    },
    reactionGroup: function reactionGroup2() {
      return {
        display: "flex",
        marginTop: pxToRem(4)
      };
    },
    timestamp: function timestamp2(_ref5) {
      var v2 = _ref5.variables;
      return {
        alignSelf: "flex-start",
        flexShrink: 0,
        marginLeft: v2.compactSpacing,
        marginTop: pxToRem(2),
        opacity: 0
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageStylesComfyRefresh.js
  var import_isNil5 = __toESM(require_isNil());
  var displayActionMenu = function displayActionMenu2(overlayZIndex) {
    return {
      zIndex: overlayZIndex,
      overflow: "visible",
      opacity: 1,
      width: "auto"
    };
  };
  var chatMessageStylesComfyRefresh = {
    root: function root33(_ref) {
      var _ref2;
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var borderFocusStyles = getBorderFocusStyles({
        borderRadius: "inherit",
        variables: theme.siteVariables,
        // Fixes the bubble focus border rendering on top of the user avatar
        zIndex: "initial"
      });
      return _ref2 = {
        display: "flex",
        flexDirection: "column",
        alignItems: p2.mine ? "flex-end" : "flex-start",
        outline: "none"
      }, _ref2["&:focus-visible ." + chatMessageSlotClassNames.timestamp] = {
        opacity: 1
      }, _ref2["&:focus-visible ." + chatMessageSlotClassNames.bubble] = borderFocusStyles[":focus-visible"], _ref2;
    },
    header: function header2(_ref3) {
      var p2 = _ref3.props, theme = _ref3.theme;
      return {
        display: "flex",
        width: "100%",
        justifyContent: p2.mine ? "flex-end" : "start",
        gap: pxToRem(8),
        "& > div": {
          paddingTop: pxToRem(8)
        },
        color: theme.siteVariables.colorScheme.default.foreground2
      };
    },
    author: function author3(_ref4) {
      var p2 = _ref4.props;
      return Object.assign({}, (p2.mine || p2.attached === "bottom" || p2.attached === true) && screenReaderContainerStyles, {
        fontWeight: 400,
        marginBottom: pxToRem(2),
        overflow: "hidden",
        whiteSpace: "nowrap",
        textOverflow: "ellipsis"
      });
    },
    timestamp: function timestamp3(_ref5) {
      var v2 = _ref5.variables;
      return Object.assign({
        display: "inline-block",
        alignSelf: "self-start",
        whiteSpace: "nowrap",
        opacity: 0
      }, v2.hasReducedHorizontalSpace && {
        fontSize: "1rem",
        margin: pxToRem(3) + " " + pxToRem(2.5) + " 0"
      });
    },
    body: function body2(_ref6) {
      var p2 = _ref6.props, v2 = _ref6.variables;
      return Object.assign({
        display: "flex",
        flexDirection: p2.mine ? "row-reverse" : "row",
        position: "relative",
        maxWidth: "100%"
      }, !p2.mine && v2.hasReducedHorizontalSpace && {
        marginRight: pxToRem(16)
      });
    },
    bubble: function bubble(_ref7) {
      var _ref8, _hover, _ref9, _Object$assign, _ref10, _ref11, _ref12;
      var p2 = _ref7.props, v2 = _ref7.variables, theme = _ref7.theme;
      return Object.assign({
        position: "relative",
        border: v2.border,
        borderRadius: pxToRem(6),
        paddingLeft: pxToRem(16),
        paddingRight: pxToRem(16),
        paddingTop: pxToRem(8),
        paddingBottom: p2.hasReactions ? pxToRem(10) : pxToRem(8),
        backgroundColor: p2.mine ? v2.backgroundColorMine : v2.backgroundColor,
        backgroundAttachment: "fixed"
      }, p2.failed && {
        backgroundImage: "none",
        backgroundColor: theme.siteVariables.colorScheme.red.background1,
        border: "1px solid " + theme.siteVariables.colorScheme.red.border
      }, (v2.hasMention || v2.isImportant) && (_ref8 = {}, _ref8["& ." + chatMessageSlotClassNames.bar] = {
        backgroundColor: v2.hasMention ? v2.hasMentionColor : v2.isImportantColor,
        position: "absolute",
        borderBottomLeftRadius: "inherit",
        borderTopLeftRadius: "inherit",
        height: "100%",
        left: "0",
        top: "0",
        width: pxToRem(3)
      }, _ref8), (0, import_isNil5.default)(v2.showActionMenu) && p2.hasActionMenu && Object.assign({
        ":hover": (_hover = {}, _hover["& > ." + chatMessageSlotClassNames.actionMenu] = displayActionMenu(v2.overlayZIndex), _hover)
      }, p2.showActionMenu && (_ref9 = {}, _ref9["& ." + chatMessageSlotClassNames.actionMenu] = displayActionMenu(v2.overlayZIndex), _ref9)), (_Object$assign = {}, _Object$assign["&:hover + ." + chatMessageSlotClassNames.bubbleInset + " ." + chatMessageSlotClassNames.timestamp] = {
        opacity: 1
      }, _Object$assign), p2.attached === true && !v2.isImportant && (_ref10 = {}, _ref10[p2.mine ? "borderTopRightRadius" : "borderTopLeftRadius"] = 0, _ref10[p2.mine ? "borderBottomRightRadius" : "borderBottomLeftRadius"] = 0, _ref10), p2.attached === "top" && !v2.isImportant && (_ref11 = {}, _ref11[p2.mine ? "borderBottomRightRadius" : "borderBottomLeftRadius"] = 0, _ref11), p2.attached === "bottom" && !v2.isImportant && (_ref12 = {}, _ref12[p2.mine ? "borderTopRightRadius" : "borderTopLeftRadius"] = 0, _ref12));
    },
    bubbleInset: function bubbleInset(_ref13) {
      var _Object$assign2;
      var p2 = _ref13.props, v2 = _ref13.variables;
      return Object.assign({
        display: "flex",
        paddingTop: pxToRem(10),
        paddingBottom: 0,
        // use padding instead of margin so that the bubble container's :hover
        // styles still apply when mousing over the gap between the container
        // and bubble-inset.
        paddingLeft: v2.hasReducedHorizontalSpace ? pxToRem(2.5) : pxToRem(5),
        paddingRight: v2.hasReducedHorizontalSpace ? pxToRem(2.5) : pxToRem(5)
      }, p2.mine ? {
        right: "100%",
        flexDirection: "row-reverse"
      } : {
        left: "100%"
      }, (_Object$assign2 = {}, _Object$assign2["&:hover ." + chatMessageSlotClassNames.timestamp] = {
        opacity: 1
      }, _Object$assign2));
    },
    badge: function badge3(_ref14) {
      var p2 = _ref14.props, v2 = _ref14.variables;
      return Object.assign({
        position: "relative",
        top: pxToRem(-5),
        width: pxToRem(25),
        height: pxToRem(25),
        backgroundColor: "none",
        color: v2.isImportantColor,
        zIndex: v2.zIndex,
        "& > :first-child": {
          display: "inline-flex",
          margin: "0 auto"
        }
      }, p2.mine ? {
        marginRight: pxToRem(-5)
      } : {
        marginLeft: pxToRem(-5)
      });
    },
    reactionGroup: function reactionGroup3(_ref15) {
      var p2 = _ref15.props;
      return Object.assign({
        position: "relative",
        display: "flex",
        float: "left",
        zIndex: 1
      }, p2.mine && {
        float: "right",
        marginRight: pxToRem(-4)
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageStyles.js
  var displayActionMenu3 = function displayActionMenu4(overlayZIndex) {
    return {
      // we need higher zIndex for the action menu in order to be displayed above the focus border of the chat message
      zIndex: overlayZIndex,
      overflow: "visible",
      // opacity should always be preferred over visibility in order to avoid accessibility bugs in
      // JAWS behavior on Windows
      opacity: 1,
      width: "auto"
    };
  };
  var chatMessageDensityStyles = {
    comfy: chatMessageStylesComfy,
    compact: chatMessageStylesCompact
  };
  var getChatMessageVariantStyles = function getChatMessageVariantStyles2(props) {
    var density = props.density || defaultChatDensity;
    if (props.layout === "refresh" && density === "comfy") {
      return chatMessageStylesComfyRefresh;
    }
    return chatMessageDensityStyles[density];
  };
  var chatMessageStyles = {
    root: function root34(componentStyleFunctionParam) {
      var _hover, _ref, _getChatMessageVarian, _getChatMessageVarian2;
      var p2 = componentStyleFunctionParam.props, v2 = componentStyleFunctionParam.variables, siteVariables = componentStyleFunctionParam.theme.siteVariables;
      if (p2.layout === "refresh" && p2.density === "comfy") {
        return chatMessageStylesComfyRefresh.root(componentStyleFunctionParam);
      }
      return Object.assign({
        borderRadius: v2.borderRadius,
        display: "inline-block",
        outline: 0,
        position: "relative",
        wordBreak: "break-word",
        wordWrap: "break-word"
      }, getBorderFocusStyles({
        borderRadius: "inherit",
        variables: siteVariables
      }), (0, import_isNil6.default)(v2.showActionMenu) && p2.hasActionMenu && Object.assign({
        ":hover": (_hover = {}, _hover["> ." + chatMessageSlotClassNames.actionMenu] = displayActionMenu3(v2.overlayZIndex), _hover)
      }, p2.showActionMenu && (_ref = {}, _ref["> ." + chatMessageSlotClassNames.actionMenu] = displayActionMenu3(v2.overlayZIndex), _ref)), (_getChatMessageVarian = (_getChatMessageVarian2 = getChatMessageVariantStyles(p2)).root) == null ? void 0 : _getChatMessageVarian.call(_getChatMessageVarian2, componentStyleFunctionParam));
    },
    actionMenu: function actionMenu(componentStyleFunctionParam) {
      var _getChatMessageVarian3, _getChatMessageVarian4;
      var p2 = componentStyleFunctionParam.props, v2 = componentStyleFunctionParam.variables;
      var defaultShowActionMenu = p2.hasActionMenu && (p2.focused || p2.showActionMenu);
      var showActionMenu = (0, import_isNil6.default)(v2.showActionMenu) ? defaultShowActionMenu : v2.showActionMenu;
      return Object.assign({
        backgroundColor: v2.backgroundColor,
        border: "1px solid",
        borderColor: v2.reactionGroupBorderColor,
        borderRadius: v2.borderRadius,
        boxShadow: v2.actionMenuBoxShadow,
        "[data-popper-escaped]": {
          opacity: 0
        },
        zIndex: -1,
        overflow: "hidden",
        opacity: 0,
        width: 0
      }, showActionMenu && displayActionMenu3(v2.overlayZIndex), (_getChatMessageVarian3 = (_getChatMessageVarian4 = getChatMessageVariantStyles(p2)).actionMenu) == null ? void 0 : _getChatMessageVarian3.call(_getChatMessageVarian4, componentStyleFunctionParam));
    },
    author: function author4(componentStyleFunctionParam) {
      var _getChatMessageVarian5, _getChatMessageVarian6;
      var p2 = componentStyleFunctionParam.props;
      return (_getChatMessageVarian5 = (_getChatMessageVarian6 = getChatMessageVariantStyles(p2)).author) == null ? void 0 : _getChatMessageVarian5.call(_getChatMessageVarian6, componentStyleFunctionParam);
    },
    compactBody: function compactBody2(componentStyleFunctionParam) {
      var _getChatMessageVarian7, _getChatMessageVarian8;
      var p2 = componentStyleFunctionParam.props;
      return (_getChatMessageVarian7 = (_getChatMessageVarian8 = getChatMessageVariantStyles(p2)).compactBody) == null ? void 0 : _getChatMessageVarian7.call(_getChatMessageVarian8, componentStyleFunctionParam);
    },
    timestamp: function timestamp4(componentStyleFunctionParam) {
      var _getChatMessageVarian9, _getChatMessageVarian10;
      var p2 = componentStyleFunctionParam.props;
      return Object.assign({
        display: "inline-block"
      }, (_getChatMessageVarian9 = (_getChatMessageVarian10 = getChatMessageVariantStyles(p2)).timestamp) == null ? void 0 : _getChatMessageVarian9.call(_getChatMessageVarian10, componentStyleFunctionParam));
    },
    badge: function badge4(componentStyleFunctionParam) {
      var _getChatMessageVarian11, _getChatMessageVarian12;
      var p2 = componentStyleFunctionParam.props, v2 = componentStyleFunctionParam.variables;
      return Object.assign({
        backgroundColor: v2.hasMention ? v2.hasMentionNubbinColor : v2.isImportantColor,
        borderRadius: "50%",
        boxShadow: v2.badgeShadow,
        color: v2.badgeTextColor,
        height: "auto",
        padding: pxToRem(4),
        width: "auto",
        zIndex: v2.zIndex,
        "& > :first-child": {
          display: "inline-flex"
        }
      }, (_getChatMessageVarian11 = (_getChatMessageVarian12 = getChatMessageVariantStyles(p2)).badge) == null ? void 0 : _getChatMessageVarian11.call(_getChatMessageVarian12, componentStyleFunctionParam));
    },
    body: function body3(componentStyleFunctionParam) {
      var _getChatMessageVarian13, _getChatMessageVarian14;
      var p2 = componentStyleFunctionParam.props;
      return Object.assign({}, (_getChatMessageVarian13 = (_getChatMessageVarian14 = getChatMessageVariantStyles(p2)).body) == null ? void 0 : _getChatMessageVarian13.call(_getChatMessageVarian14, componentStyleFunctionParam));
    },
    bubble: function bubble2(componentStyleFunctionParam) {
      var _getChatMessageVarian15, _getChatMessageVarian16;
      var p2 = componentStyleFunctionParam.props;
      return Object.assign({}, (_getChatMessageVarian15 = (_getChatMessageVarian16 = getChatMessageVariantStyles(p2)).bubble) == null ? void 0 : _getChatMessageVarian15.call(_getChatMessageVarian16, componentStyleFunctionParam));
    },
    bubbleInset: function bubbleInset2(componentStyleFunctionParam) {
      var _getChatMessageVarian17, _getChatMessageVarian18;
      var p2 = componentStyleFunctionParam.props;
      return Object.assign({}, (_getChatMessageVarian17 = (_getChatMessageVarian18 = getChatMessageVariantStyles(p2)).bubbleInset) == null ? void 0 : _getChatMessageVarian17.call(_getChatMessageVarian18, componentStyleFunctionParam));
    },
    reactionGroup: function reactionGroup4(componentStyleFunctionParam) {
      var _getChatMessageVarian19, _getChatMessageVarian20;
      var p2 = componentStyleFunctionParam.props;
      return (_getChatMessageVarian19 = (_getChatMessageVarian20 = getChatMessageVariantStyles(p2)).reactionGroup) == null ? void 0 : _getChatMessageVarian19.call(_getChatMessageVarian20, componentStyleFunctionParam);
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageContentStyles.js
  var chatMessageContentStyles = {
    root: function root35(componentStyleFunctionParam) {
      var p2 = componentStyleFunctionParam.props, v2 = componentStyleFunctionParam.variables, theme = componentStyleFunctionParam.theme;
      return Object.assign({
        color: v2.contentColor,
        display: "block",
        "& a": {
          outline: "none",
          color: p2.mine ? v2.linkColorMine : v2.linkColor,
          ":focus": {
            textDecoration: "underline"
          }
        }
      }, p2.layout === "refresh" && p2.density === "comfy" && Object.assign({
        wordBreak: "break-word",
        wordWrap: "break-word",
        "& a": {
          color: "inherit",
          textDecoration: "underline",
          wordBreak: "break-all",
          "&:hover": {
            textDecorationStyle: "double"
          },
          "&:focus": {
            textDecorationStyle: "double"
          }
        }
      }, p2.failed && {
        color: theme.siteVariables.colorScheme.default.foreground
      }), p2.density === "comfy" && Object.assign({}, p2.hasBadge && p2.badgePosition === "end" && {
        marginRight: pxToRem(4)
      }));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageDetailsStyles.js
  var chatMessageDetailsStyles = {
    root: function root36(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        color: v2.detailsColor,
        display: "inline-block",
        fontSize: v2.detailsFontSize
      }, p2.density === "comfy" && Object.assign({}, (p2.attached === "top" || !p2.attached || p2.hasHeaderReactionGroup) && {
        marginLeft: v2.detailsMargin
      }), p2.density === "compact" && {
        alignSelf: "flex-start",
        flexShrink: 0,
        marginLeft: v2.detailsMargin
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Chat/chatMessageReadStatusStyles.js
  var chatMessageReadStatusStyles = {
    root: function root37(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return {
        color: v2.color,
        display: "flex",
        position: "absolute",
        right: v2.rightPosition,
        bottom: p2.density === "compact" ? v2.bottomPositionCompact : v2.bottomPosition,
        ":after": Object.assign({
          content: '"' + p2.title + '"'
        }, screenReaderContainerStyles)
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Checkbox/Checkbox.js
  var import_invoke6 = __toESM(require_invoke());
  var React198 = __toESM(require_react());
  var checkboxClassName = "ui-checkbox";
  var checkboxSlotClassNames = {
    label: checkboxClassName + "__label",
    indicator: checkboxClassName + "__indicator"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Checkbox/checkboxIndicatorUrl.js
  var checkboxIndicatorUrl = function checkboxIndicatorUrl2(color2, backgroundColor) {
    return `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' style='background-color: ` + encodeURIComponent(backgroundColor) + "; padding: 2px;' focusable='false' viewBox='8 8 22.5 22.5'%3E%3Cg%3E%3Cpath fill='" + encodeURIComponent(color2) + `' d='M23.5 11.875a.968.968 0 0 1-.289.711l-8.25 8.25c-.192.193-.43.289-.711.289s-.519-.096-.711-.289l-4.75-4.75a.965.965 0 0 1-.289-.711c0-.125.027-.25.082-.375s.129-.234.223-.328a.953.953 0 0 1 .695-.297c.135 0 .266.025.391.074.125.05.231.121.32.215l4.039 4.047 7.539-7.547a.886.886 0 0 1 .32-.215c.125-.049.255-.074.391-.074a1.004 1.004 0 0 1 .922.625.97.97 0 0 1 .078.375z' /%3E%3C/g%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Checkbox/checkboxIndeterminateIndicatorUrl.js
  var checkboxIndicatorIndeterminateUrl = function checkboxIndicatorIndeterminateUrl2(color2, backgroundColor) {
    return `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' style='background-color: ` + escape(backgroundColor) + "; padding: 2px;' focusable='false' viewBox='8 8 22.5 22.5'%3E%3Cg%3E%3Cpath fill='" + escape(color2) + `' d='M10 16v-1h12v1H10z 11.875a.968.968 0 0 1-.289.711l-8.25 8.25c-.192.193-.43.289-.711.289s-.519-.096-.711-.289l-4.75-4.75a.965.965 0 0 1-.289-.711c0-.125.027-.25.082-.375s.129-.234.223-.328a.953.953 0 0 1 .695-.297c.135 0 .266.025.391.074.125.05.231.121.32.215l4.039 4.047 7.539-7.547a.886.886 0 0 1 .32-.215c.125-.049.255-.074.391-.074a1.004 1.004 0 0 1 .922.625.97.97 0 0 1 .078.375z' /%3E%3C/g%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Checkbox/checkboxStyles.js
  var commonToggleBeforeStyles = function commonToggleBeforeStyles2(v2) {
    return {
      content: "' '",
      display: "block",
      borderRadius: "50%",
      width: v2.toggleIndicatorSize,
      height: v2.toggleIndicatorSize,
      transition: "margin .3s ease"
    };
  };
  var checkboxStyles = {
    root: function root38(_ref) {
      var _hover;
      var p2 = _ref.props, v2 = _ref.variables, t2 = _ref.theme;
      return Object.assign({
        position: "relative",
        display: "inline-grid",
        gridTemplateColumns: "auto " + v2.gap + " 1fr",
        // IE11: Gap is done via virtual column as in autoprefixer
        msGridColumns: "auto " + v2.gap + " 1fr"
      }, p2.labelPosition === "start" && {
        gridTemplateColumns: "1fr " + v2.gap + " auto",
        msGridColumns: "1fr " + v2.gap + " auto"
      }, {
        cursor: "pointer",
        outline: 0,
        color: v2.textColor,
        padding: v2.rootPadding,
        verticalAlign: "middle",
        alignItems: "start"
      }, getBorderFocusStyles({
        variables: t2.siteVariables,
        borderRadius: "3px"
      }), {
        ":hover": (_hover = {
          color: v2.textColorHover
        }, _hover["& ." + checkboxSlotClassNames.indicator] = Object.assign({}, !p2.toggle && Object.assign({}, p2.checked && p2.checked !== "mixed" && {
          borderColor: v2.checkedBackgroundHover,
          backgroundImage: checkboxIndicatorUrl(v2.checkedIndicatorColor, v2.checkedBackgroundHover)
        }, !p2.checked && {
          borderColor: v2.borderColorHover
        }), p2.toggle && !p2.disabled && Object.assign({
          borderColor: v2.borderColorHover,
          ":before": Object.assign({}, commonToggleBeforeStyles(v2), {
            borderColor: v2.borderColorHover,
            borderStyle: v2.borderStyle,
            borderWidth: v2.borderWidth,
            margin: v2.togglePadding,
            background: "transparent"
          })
        }, p2.checked && {
          borderColor: v2.checkedBorderColor,
          background: v2.checkedBackgroundHover,
          ":before": Object.assign({}, commonToggleBeforeStyles(v2), {
            margin: v2.toggleCheckedPadding,
            background: v2.checkedIndicatorColor
          })
        })), _hover)
      }, p2.checked && {
        color: v2.checkedTextColor
      }, p2.disabled && {
        cursor: "default",
        pointerEvents: "none",
        color: v2.disabledColor
      });
    },
    checkbox: function checkbox(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      return Object.assign({
        msGridRowAlign: "center",
        gridColumn: 1,
        msGridColumn: 1
      }, p2.labelPosition === "start" && {
        gridColumn: 3,
        msGridColumn: 3
      }, {
        boxShadow: "unset",
        width: pxToRem(16),
        height: pxToRem(16),
        borderColor: v2.borderColor,
        borderStyle: v2.borderStyle,
        borderRadius: v2.borderRadius,
        borderWidth: v2.borderWidth,
        color: v2.indicatorColor,
        margin: v2.margin,
        padding: v2.padding,
        userSelect: "none",
        backgroundImage: checkboxIndicatorUrl(v2.indicatorColor, v2.background),
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat"
      }, p2.checked && {
        borderColor: v2.checkedBorderColor,
        backgroundColor: v2.checkedBackground,
        backgroundImage: checkboxIndicatorUrl(v2.checkedIndicatorColor, v2.checkedBackground)
      }, p2.checked === "mixed" && {
        backgroundImage: checkboxIndicatorIndeterminateUrl(v2.checkedIndicatorColor, v2.checkedBackground)
      }, p2.disabled && {
        backgroundColor: v2.disabledBackground,
        borderColor: v2.disabledBorderColor
      }, p2.disabled && p2.checked && {
        color: v2.disabledCheckedIndicatorColor,
        borderColor: v2.disabledBackgroundChecked,
        backgroundColor: v2.disabledBackgroundChecked,
        backgroundImage: checkboxIndicatorUrl(v2.disabledCheckedIndicatorColor, v2.disabledBackgroundChecked)
      }, p2.disabled && p2.checked === "mixed" && {
        color: v2.disabledCheckedIndicatorColor,
        borderColor: v2.disabledBackgroundChecked,
        backgroundColor: v2.disabledBackgroundChecked,
        backgroundImage: checkboxIndicatorIndeterminateUrl(v2.disabledCheckedIndicatorColor, v2.disabledBackgroundChecked)
      });
    },
    toggle: function toggle(_ref3) {
      var p2 = _ref3.props, v2 = _ref3.variables;
      return Object.assign({
        msGridRowAlign: "center",
        gridColumn: 1,
        msGridColumn: 1
      }, p2.labelPosition === "start" && {
        gridColumn: 3,
        msGridColumn: 3
      }, {
        boxShadow: "unset",
        boxSizing: "border-box",
        background: v2.background,
        borderColor: v2.borderColor,
        borderStyle: v2.borderStyle,
        borderRadius: v2.toggleBorderRadius,
        borderWidth: v2.borderWidth,
        margin: v2.toggleMargin,
        userSelect: "none",
        width: v2.toggleWidth,
        height: v2.toggleHeight,
        ":before": Object.assign({}, commonToggleBeforeStyles(v2), {
          borderColor: p2.disabled ? v2.disabledToggleIndicatorColor : v2.borderColor,
          borderStyle: v2.borderStyle,
          borderWidth: v2.borderWidth,
          margin: v2.togglePadding
        })
      }, p2.checked && {
        borderColor: v2.checkedBorderColor,
        background: v2.checkedBackground,
        ":before": Object.assign({}, commonToggleBeforeStyles(v2), {
          margin: v2.toggleCheckedPadding,
          background: v2.checkedIndicatorColor
        })
      }, p2.disabled && Object.assign({
        background: v2.disabledBackground,
        borderColor: v2.disabledBorderColor
      }, p2.checked && {
        background: v2.disabledBackgroundChecked,
        borderColor: "transparent",
        ":before": Object.assign({}, commonToggleBeforeStyles(v2), {
          margin: v2.toggleCheckedPadding,
          background: v2.disabledCheckedIndicatorColor
        })
      }));
    },
    label: function label(_ref4) {
      var p2 = _ref4.props;
      return Object.assign({
        display: "block",
        // IE11: should be forced to be block, as inline-block is not supported
        userSelect: "none",
        gridColumn: 3,
        msGridColumn: 3
      }, p2.labelPosition === "start" && {
        gridColumn: 1,
        msGridColumn: 1
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Dialog/dialogStyles.js
  var dialogStyles = {
    root: function root39(_ref) {
      var _ref2;
      var v2 = _ref.variables;
      return _ref2 = {
        background: v2.rootBackground,
        border: v2.border,
        borderRadius: v2.rootBorderRadius,
        outline: "none",
        padding: v2.rootPadding,
        position: "relative",
        width: v2.rootWidth,
        maxWidth: "100vw",
        maxHeight: "100vh",
        overflowX: "hidden",
        overflowY: "auto",
        display: "grid",
        gridTemplateColumns: "1fr auto",
        msGridColumns: "1fr auto",
        boxShadow: v2.boxShadow,
        color: v2.foregroundColor
      }, _ref2["@media screen and (max-width: " + v2.rootWidth + ")"] = {
        padding: v2.rootPaddingZoom
      }, _ref2;
    },
    footer: function footer2() {
      return {
        gridColumn: "1 / -1",
        gridRow: 3,
        msGridRow: 3
      };
    },
    actions: function actions2(_ref3) {
      var _ref4, _ref5;
      var v2 = _ref3.variables;
      return _ref5 = {
        display: "flex",
        width: "100%"
      }, _ref5["& ." + flexClassName] = {
        flexWrap: "wrap",
        width: "100%"
      }, _ref5["@media screen and (max-width: " + v2.footerActionsBreakpoint + ")"] = (_ref4 = {}, _ref4["& ." + buttonClassName] = {
        width: "100%",
        maxWidth: "100%",
        margin: 0
      }, _ref4["& ." + flexClassName + " > :not(:last-child)"] = {
        marginBottom: "0.5rem"
      }, _ref4), _ref5;
    },
    content: function content6(_ref6) {
      var _ref7;
      var v2 = _ref6.variables;
      return _ref7 = {
        margin: v2.contentMargin,
        gridColumn: "1 / span 2",
        gridRow: 2,
        msGridColumn: 1,
        msGridColumnSpan: 2,
        msGridRow: 2,
        justifySelf: "left",
        width: "100%"
      }, _ref7["@media screen and (max-width: " + v2.rootWidth + "), screen and (max-height: 400px)"] = {
        maxHeight: "100%",
        overflow: "unset"
      }, _ref7;
    },
    header: function header3(_ref8) {
      var v2 = _ref8.variables;
      return {
        margin: v2.headerMargin,
        gridRow: 1,
        msGridRow: 1,
        gridColumn: 1,
        msGridColumn: 1,
        justifySelf: "left",
        fontSize: v2.headerFontSize,
        fontWeight: v2.headerFontWeight
      };
    },
    headerAction: function headerAction(_ref9) {
      var v2 = _ref9.variables;
      return {
        gridRow: 1,
        msGridRow: 1,
        gridColumn: 2,
        msGridColumn: 2,
        color: v2.foregroundColor,
        margin: v2.headerActionMargin
      };
    },
    overlay: function overlay(_ref10) {
      var p2 = _ref10.props, v2 = _ref10.variables;
      return Object.assign({
        alignItems: "center",
        background: "transparent",
        bottom: 0,
        display: "flex",
        flexDirection: "column",
        justifyContent: "center",
        left: 0,
        overflow: "auto",
        position: "fixed",
        right: 0,
        top: 0,
        zIndex: v2.overlayZIndex
      }, p2.backdrop && {
        background: v2.overlayBackground
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Dialog/dialogFooterStyles.js
  var dialogFooterStyles = {
    root: function root40() {
      return {
        textAlign: "right"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Divider/dividerStyles.js
  var import_get3 = __toESM(require_get());
  var beforeAndAfter = function beforeAndAfter2(size, variables, colors2, props) {
    return Object.assign({
      content: '""',
      flex: 1
    }, props.vertical ? {
      width: size + 1 + "px",
      height: "100%"
    } : {
      height: size + 1 + "px"
    }, {
      background: (0, import_get3.default)(colors2, "foreground", variables.dividerColor)
    });
  };
  var dividerStyles = {
    root: function root41(_ref) {
      var props = _ref.props, variables = _ref.variables;
      var color2 = props.color, fitted = props.fitted, size = props.size, important = props.important, hasContent = props.hasContent, vertical = props.vertical;
      var colors2 = variables.colorScheme[color2];
      return Object.assign({
        color: (0, import_get3.default)(colors2, "foreground", variables.textColor),
        display: "flex",
        alignItems: "center"
      }, !fitted && {
        padding: vertical ? "0 " + variables.dividerPadding : variables.dividerPadding + " 0"
      }, important && {
        fontWeight: variables.importantFontWeight
      }, vertical && {
        height: "100%"
      }, hasContent ? {
        textAlign: "center",
        fontSize: pxToRem(12 + size),
        lineHeight: variables.textLineHeight,
        "::before": Object.assign({}, beforeAndAfter(size, variables, colors2, props)),
        "::after": Object.assign({}, beforeAndAfter(size, variables, colors2, props))
      } : {
        "::before": Object.assign({}, beforeAndAfter(size, variables, colors2, props))
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Divider/dividerContentStyles.js
  var dividerContentStyles = {
    root: function root42() {
      return {
        marginLeft: pxToRem(20),
        marginRight: pxToRem(20)
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Dropdown/Dropdown.js
  var import_findIndex = __toESM(require_findIndex());
  var import_isNil8 = __toESM(require_isNil());
  var import_isEmpty3 = __toESM(require_isEmpty());
  var import_isNumber = __toESM(require_isNumber());
  var import_isPlainObject3 = __toESM(require_isPlainObject());
  var import_invoke10 = __toESM(require_invoke());
  var import_debounce = __toESM(require_debounce());
  var import_uniqueId = __toESM(require_uniqueId());
  var import_get5 = __toESM(require_get());
  var import_isFunction = __toESM(require_isFunction());
  var import_map2 = __toESM(require_map());
  var import_differenceBy = __toESM(require_differenceBy());
  var React202 = __toESM(require_react());
  var import_classnames4 = __toESM(require_classnames());

  // ../node_modules/@fluentui/react-northstar/dist/es/components/List/ListItemContent.js
  var listItemContentClassName = "ui-list__itemcontent";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/List/ListItemContentMedia.js
  var listItemContentMediaClassName = "ui-list__itemcontentmedia";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/List/ListItemEndMedia.js
  var listItemEndMediaClassName = "ui-list__itemendmedia";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/List/ListItemHeader.js
  var listItemHeaderClassName = "ui-list__itemheader";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/List/ListItemHeaderMedia.js
  var listItemHeaderMediaClassName = "ui-list__itemheadermedia";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Dropdown/DropdownItem.js
  var import_invoke7 = __toESM(require_invoke());
  var React199 = __toESM(require_react());
  var import_classnames3 = __toESM(require_classnames());
  var dropdownItemClassName = "ui-dropdown__item";
  var dropdownItemSlotClassNames = {
    main: dropdownItemClassName + "__main",
    content: dropdownItemClassName + "__content",
    header: dropdownItemClassName + "__header",
    image: dropdownItemClassName + "__image",
    checkableIndicator: dropdownItemClassName + "__checkable-indicator"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Dropdown/DropdownSelectedItem.js
  var import_invoke8 = __toESM(require_invoke());
  var React200 = __toESM(require_react());
  var dropdownSelectedItemClassName = "ui-dropdown__selecteditem";
  var dropdownSelectedItemSlotClassNames = {
    header: dropdownSelectedItemClassName + "__header",
    icon: dropdownSelectedItemClassName + "__icon",
    image: dropdownSelectedItemClassName + "__image"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Input/Input.js
  var import_get4 = __toESM(require_get());
  var import_invoke9 = __toESM(require_invoke());
  var import_isNil7 = __toESM(require_isNil());
  var React201 = __toESM(require_react());
  var inputClassName = "ui-input";
  var inputSlotClassNames = {
    input: inputClassName + "__input",
    icon: inputClassName + "__icon"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Dropdown/Dropdown.js
  var dropdownClassName = "ui-dropdown";
  var dropdownSlotClassNames = {
    clearIndicator: dropdownClassName + "__clear-indicator",
    container: dropdownClassName + "__container",
    toggleIndicator: dropdownClassName + "__toggle-indicator",
    item: dropdownClassName + "__item",
    itemsCount: dropdownClassName + "__items-count",
    itemsList: dropdownClassName + "__items-list",
    searchInput: dropdownClassName + "__searchinput",
    selectedItem: dropdownClassName + "__selecteditem",
    selectedItems: dropdownClassName + "__selected-items",
    triggerButton: dropdownClassName + "__trigger-button"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Dropdown/dropdownStyles.js
  var transparentColorStyle = {
    backgroundColor: "transparent",
    borderColor: "transparent",
    borderBottomColor: "transparent"
  };
  var createTransparentColorStyleObj = function createTransparentColorStyleObj2() {
    return Object.assign({}, transparentColorStyle, {
      ":hover": Object.assign({}, transparentColorStyle),
      ":active": Object.assign({}, transparentColorStyle),
      ":focus": Object.assign({}, transparentColorStyle, {
        ":active": Object.assign({}, transparentColorStyle)
      })
    });
  };
  var getWidth = function getWidth2(p2, v2) {
    if (p2.fluid) {
      return "100%";
    }
    if (p2.inline) {
      return "initial";
    }
    return v2.width;
  };
  var dropdownStyles = {
    root: function root43(_ref) {
      var p2 = _ref.props;
      return Object.assign({}, p2.inline && {
        display: "inline-flex"
      });
    },
    clearIndicator: function clearIndicator(_ref2) {
      var v2 = _ref2.variables, siteVariables = _ref2.theme.siteVariables;
      return Object.assign({
        alignItems: "center",
        alignSelf: "center",
        display: "flex",
        justifyContent: "center",
        cursor: "pointer",
        userSelect: "none",
        margin: 0,
        position: "absolute",
        right: pxToRem(6),
        padding: pxToRem(2),
        color: v2.color
      }, getBorderFocusStyles({
        variables: siteVariables
      }));
    },
    container: function container(_ref3) {
      var _Object$assign;
      var p2 = _ref3.props, v2 = _ref3.variables, siteVariables = _ref3.theme.siteVariables;
      return Object.assign({
        display: "flex",
        flexWrap: "wrap",
        position: "relative",
        borderStyle: "solid",
        borderColor: v2.borderColor,
        outline: 0,
        width: getWidth(p2, v2),
        borderWidth: p2.search ? "0 0 " + v2.searchBorderBottomWidth + " 0" : v2.borderWidth,
        color: v2.color,
        backgroundColor: v2.backgroundColor,
        borderRadius: v2.containerBorderRadius
      }, p2.open && p2.position === "above" && {
        borderRadius: v2.openAboveContainerBorderRadius
      }, p2.open && p2.position === "below" && {
        borderRadius: v2.openBelowContainerBorderRadius
      }, {
        ":hover": Object.assign({
          backgroundColor: v2.backgroundColorHover,
          borderColor: v2.borderColorHover
        }, p2.open && {
          borderColor: v2.openBorderColorHover
        })
      }, p2.error && {
        border: pxToRem(1) + " solid " + v2.borderError,
        ":hover": {
          border: pxToRem(1) + " solid " + v2.borderError
        }
      }, {
        ":active": {
          backgroundColor: v2.backgroundColor
        },
        ":focus-within": {
          // when dropdown's selected items are focused
          // keep the focus border style
          borderBottomColor: v2.borderColorFocus
        }
      }, p2.focused && Object.assign({
        backgroundColor: v2.backgroundColor
      }, p2.search && {
        borderBottomColor: v2.borderColorFocus
      }, !p2.search && !p2.open && p2.isFromKeyboard && getBorderFocusStyles({
        variables: siteVariables
      })[":focus-visible"]), p2.inline && Object.assign({}, createTransparentColorStyleObj(), {
        alignItems: "center"
      }), p2.inverted && {
        backgroundColor: v2.invertedBackgroundColor,
        ":hover": {
          backgroundColor: v2.invertedBackgroundColorHover
        },
        ":active": {
          backgroundColor: v2.invertedBackgroundColorHover
        },
        ":focus": {
          backgroundColor: v2.invertedBackgroundColorHover
        }
      }, p2.disabled && {
        backgroundColor: siteVariables.colorScheme.default.backgroundDisabled,
        borderColor: siteVariables.colorScheme.default.borderDisabled,
        userSelect: "none",
        ":hover": {
          backgroundColor: siteVariables.colorScheme.default.backgroundDisabled
        },
        ":active": {
          backgroundColor: siteVariables.colorScheme.default.backgroundDisabled
        }
      }, (_Object$assign = {}, _Object$assign["& ." + dropdownSlotClassNames.triggerButton] = Object.assign({}, p2.disabled && {
        color: siteVariables.colorScheme.default.foregroundDisabled
      }), _Object$assign));
    },
    selectedItems: function selectedItems(_ref4) {
      var p2 = _ref4.props, v2 = _ref4.variables;
      return Object.assign({
        display: "flex",
        flexWrap: "wrap",
        overflowY: "auto",
        overflowX: "hidden",
        maxHeight: v2.selectedItemsMaxHeight,
        width: "100%"
      }, p2.hasToggleIndicator && {
        paddingRight: v2.toggleIndicatorSize
      }, p2.multiple && p2.hasItemsSelected && {
        paddingTop: pxToRem(1),
        paddingBottom: pxToRem(4)
      });
    },
    triggerButton: function triggerButton(_ref5) {
      var p2 = _ref5.props, v2 = _ref5.variables;
      return Object.assign({
        overflow: "hidden",
        boxShadow: "none",
        minHeight: pxToRem(32)
      }, createTransparentColorStyleObj(), {
        margin: "0",
        justifyContent: "left",
        padding: v2.comboboxPaddingButton
      }, p2.multiple && Object.assign({
        minWidth: 0,
        flex: 1
      }, p2.hasItemsSelected && {
        position: "absolute",
        top: 0,
        right: 0,
        left: 0,
        bottom: 0,
        height: "100%"
      }), createTransparentColorStyleObj(), {
        ":focus": Object.assign({
          color: v2.color
        }, createTransparentColorStyleObj()),
        ":focus-visible": Object.assign({
          color: v2.color
        }, transparentColorStyle, {
          ":after": {
            borderColor: "transparent",
            borderRightWidth: 0
          },
          ":before": {
            borderColor: "transparent",
            borderRightWidth: 0
          }
        }),
        ":active": Object.assign({
          color: v2.color
        }, transparentColorStyle, {
          animationName: "unset",
          animationDuration: "unset"
        }),
        ":hover": Object.assign({}, transparentColorStyle, {
          color: v2.color
          // required for HC theme
        })
      }, p2.inline && {
        paddingLeft: 0,
        paddingRight: 0,
        width: "initial"
      });
    },
    list: function list3(_ref6) {
      var p2 = _ref6.props, v2 = _ref6.variables;
      return Object.assign({
        outline: 0,
        borderStyle: "solid",
        borderWidth: p2.open ? v2.listBorderWidth : "0px",
        borderColor: v2.listBorderColor,
        zIndex: v2.overlayZIndex,
        maxHeight: v2.listMaxHeight,
        overflowY: "auto",
        width: getWidth(p2, v2),
        background: v2.listBackgroundColor
      }, p2.position === "above" && {
        borderRadius: v2.aboveListBorderRadius
      }, p2.position === "below" && {
        borderRadius: v2.belowListBorderRadius
      }, p2.open && {
        boxShadow: v2.listBoxShadow,
        padding: v2.listPadding
      });
    },
    toggleIndicator: function toggleIndicator(_ref7) {
      var p2 = _ref7.props, v2 = _ref7.variables;
      return Object.assign({
        alignItems: "center",
        display: "flex",
        justifyContent: "center",
        alignSelf: "center",
        cursor: "pointer"
      }, p2.disabled && {
        cursor: "default"
      }, {
        userSelect: "none",
        margin: 0,
        position: "absolute",
        right: pxToRem(8)
      }, p2.multiple && p2.hasItemsSelected && {
        top: pxToRem(8)
      }, {
        color: v2.color
      }, p2.disabled && {
        color: v2.disabledColor
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Dropdown/dropdownSearchInputStyles.js
  var dropdownSearchInputStyles = {
    root: function root44(_ref) {
      var v2 = _ref.variables;
      return {
        flexBasis: v2.comboboxFlexBasis,
        flexGrow: 1
      };
    },
    input: function input(_ref2) {
      var p2 = _ref2.props;
      return Object.assign({
        width: "100%",
        backgroundColor: "transparent",
        borderWidth: 0
      }, p2.inline && {
        padding: 0,
        lineHeight: "initial"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Dropdown/dropdownSelectedItemStyles.js
  var dropdownSelectedItemStyles = {
    root: function root45(_ref) {
      var _hover;
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables
      });
      return Object.assign({
        maxWidth: v2.selectedItemsMaxWidth,
        display: "inline-flex",
        alignItems: "center",
        padding: "0 " + pxToRem(8),
        startPaddingLeft: "0px",
        lineHeight: pxToRem(20),
        borderRadius: pxToRem(9999),
        fontSize: pxToRem(14)
      }, p2.hasImage && {
        paddingLeft: "0px"
      }, {
        cursor: "pointer",
        margin: ".25rem 0 0 .4rem",
        color: v2.selectedItemColor,
        position: "relative",
        border: v2.selectedItemBorder,
        height: pxToRem(24),
        overflow: "visible",
        outline: 0,
        fontWeight: siteVariables.fontWeightSemibold
      }, v2.selectedItemBackgroundColor && {
        backgroundColor: v2.selectedItemBackgroundColor
      }, {
        ":focus": {
          color: v2.selectedItemColorFocus
        },
        ":hover": (_hover = {
          color: v2.selectedItemColorHover,
          backgroundColor: v2.selectedItemBackgroundColorHover
        }, _hover["& ." + dropdownSelectedItemSlotClassNames.icon] = {
          color: v2.selectedItemIconColorHover
        }, _hover),
        ":focus-visible": {
          ":after": borderFocusStyles[":focus-visible"][":after"]
        }
      });
    },
    image: function image2() {
      return {
        height: pxToRem(20),
        width: pxToRem(20)
      };
    },
    header: function header4(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      return Object.assign({}, p2.hasImage && {
        marginLeft: pxToRem(3)
      }, {
        marginRight: pxToRem(3),
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      });
    },
    icon: function icon4(_ref3) {
      var v2 = _ref3.variables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: pxToRem(16),
        minWidth: pxToRem(16),
        height: pxToRem(16),
        "& > :first-child": {
          width: pxToRem(16),
          height: pxToRem(16),
          "& svg": {
            width: pxToRem(16),
            height: pxToRem(16)
          }
        },
        cursor: "pointer",
        color: v2.selectedItemIconColor
      }, getIconFillOrOutlineStyles({
        outline: true
      }), {
        ":hover": Object.assign({
          color: v2.selectedItemIconColorHover
        }, getIconFillOrOutlineStyles({
          outline: false
        }))
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Dropdown/checkableIndicatorUrl.js
  var checkableIndicatorUrl = function checkableIndicatorUrl2(color2) {
    return `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' fill='` + encodeURIComponent(color2) + `' focusable='false' view-box='8 8 16 16'%3E%3Cg%3E%3Cpath d='M23.5 11.875a.968.968 0 0 1-.289.711l-8.25 8.25c-.192.193-.43.289-.711.289s-.519-.096-.711-.289l-4.75-4.75a.965.965 0 0 1-.289-.711c0-.125.027-.25.082-.375s.129-.234.223-.328a.953.953 0 0 1 .695-.297c.135 0 .266.025.391.074.125.05.231.121.32.215l4.039 4.047 7.539-7.547a.886.886 0 0 1 .32-.215c.125-.049.255-.074.391-.074a1.004 1.004 0 0 1 .922.625.97.97 0 0 1 .078.375z' /%3E%3C/g%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Dropdown/dropdownItemStyles.js
  var dropdownItemStyles = {
    root: function root46(_ref) {
      var _ref2, _ref3;
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      return Object.assign({
        display: "flex",
        alignItems: "center",
        minHeight: 0,
        padding: pxToRem(4) + " " + pxToRem(11),
        whiteSpace: "nowrap",
        border: v2.listItemFocusBorderWidth + " solid transparent",
        backgroundColor: v2.listItemBackgroundColor
      }, p2.selected && {
        fontWeight: v2.listItemSelectedFontWeight,
        color: v2.listItemSelectedColor
      }, {
        position: "relative"
      }, p2.active && Object.assign({}, p2.isFromKeyboard && getBorderFocusStyles({
        variables: siteVariables,
        borderRadius: 0
      })[":focus-visible"], !p2.isFromKeyboard && Object.assign({
        color: v2.listItemColorHover,
        backgroundColor: v2.listItemBackgroundColorHover
      }, p2.hasHeader && (_ref2 = {}, _ref2["& ." + dropdownItemSlotClassNames.header] = {
        color: v2.listItemColorHover
      }, _ref2), p2.hasContent && (_ref3 = {}, _ref3["& ." + dropdownItemSlotClassNames.content] = {
        color: v2.listItemColorHover
      }, _ref3))));
    },
    image: function image3() {
      return {
        margin: pxToRem(3) + " " + pxToRem(12) + " " + pxToRem(3) + " " + pxToRem(4)
      };
    },
    header: function header5(_ref4) {
      var p2 = _ref4.props, v2 = _ref4.variables;
      return Object.assign({
        flexGrow: 1,
        lineHeight: v2.listItemHeaderLineHeight,
        fontSize: v2.listItemHeaderFontSize,
        // if the item doesn't have content - i.e. it is header only - then it should use the content color
        color: v2.listItemContentColor
      }, p2.hasContent && {
        // if there is content it needs to be "tightened up" to the header
        marginBottom: pxToRem(-1),
        color: v2.listItemHeaderColor
      }, p2.selected && {
        fontWeight: v2.listItemSelectedFontWeight,
        color: v2.listItemSelectedColor
      }, {
        whiteSpace: "normal"
      });
    },
    content: function content7(_ref5) {
      var v2 = _ref5.variables;
      return {
        flexGrow: 1,
        lineHeight: v2.listItemContentLineHeight,
        fontSize: v2.listItemContentFontSize,
        color: v2.listItemContentColor
      };
    },
    checkableIndicator: function checkableIndicator(_ref6) {
      var p2 = _ref6.props, v2 = _ref6.variables;
      return Object.assign({
        backgroundImage: checkableIndicatorUrl(v2.listItemSelectedColor)
      }, p2.active && !p2.isFromKeyboard && {
        backgroundImage: checkableIndicatorUrl(v2.listItemColorHover)
      }, {
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
        position: "absolute",
        width: pxToRem(24),
        height: pxToRem(24),
        right: pxToRem(7),
        top: pxToRem(-3)
      });
    },
    endMedia: function endMedia() {
      return {
        flexShrink: 0,
        lineHeight: pxToRem(16)
      };
    },
    main: function main() {
      return {
        display: "flex",
        flexDirection: "column",
        flexGrow: 1,
        minWidth: 0
        // needed for the truncate styles to work
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Embed/Embed.js
  var import_invoke11 = __toESM(require_invoke());
  var import_isNil9 = __toESM(require_isNil());
  var React203 = __toESM(require_react());
  var embedClassName = "ui-embed";
  var embedSlotClassNames = {
    control: embedClassName + "__control"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Embed/playIndicatorUrl.js
  var playIndicatorUrl = function playIndicatorUrl2(color2) {
    return `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' focusable='false' viewBox='0 0 24 24'%3E%3Cg%3E%3Cpath fill='` + encodeURIComponent(color2) + `' d='M5 5.27368C5 3.56682 6.82609 2.48151 8.32538 3.2973L20.687 10.0235C22.2531 10.8756 22.2531 13.124 20.687 13.9762L8.32538 20.7024C6.82609 21.5181 5 20.4328 5 18.726V5.27368Z' /%3E%3C/g%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Embed/pauseIndicatorUrl.js
  var pauseIndicatorUrl = function pauseIndicatorUrl2(color2) {
    return `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' focusable='false' viewBox='0 0 24 24'%3E%3Cg%3E%3Cpath fill='` + encodeURIComponent(color2) + "' d='M5.74609 3C4.7796 3 3.99609 3.7835 3.99609 4.75V19.25C3.99609 20.2165 4.7796 21 5.74609 21H9.24609C10.2126 21 10.9961 20.2165 10.9961 19.25V4.75C10.9961 3.7835 10.2126 3 9.24609 3H5.74609Z' /%3E%3Cpath fill='" + encodeURIComponent(color2) + `' d='M14.7461 3C13.7796 3 12.9961 3.7835 12.9961 4.75V19.25C12.9961 20.2165 13.7796 21 14.7461 21H18.2461C19.2126 21 19.9961 20.2165 19.9961 19.25V4.75C19.9961 3.7835 19.2126 3 18.2461 3H14.7461Z' /%3E%3C/g%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Embed/embedStyles.js
  var embedStyles = {
    root: function root47(_ref) {
      var _focusVisible, _hover;
      var v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables
      });
      return Object.assign({
        display: "inline-block",
        verticalAlign: "middle",
        position: "relative",
        cursor: "pointer",
        width: v2.width,
        height: v2.height || "auto",
        outline: 0
      }, borderFocusStyles[":focus"], {
        ":focus-visible": (_focusVisible = {}, _focusVisible["& ." + embedSlotClassNames.control] = Object.assign({
          borderColor: v2.focusBorderColor,
          opacity: 1
        }, borderFocusStyles[":focus-visible"]), _focusVisible),
        ":hover": (_hover = {}, _hover["& ." + embedSlotClassNames.control] = {
          opacity: 1,
          zIndex: v2.zIndex
        }, _hover)
      });
    },
    control: function control(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      return Object.assign({
        width: pxToRem(48),
        height: pxToRem(48),
        color: v2.controlColor,
        padding: pxToRem(4),
        borderRadius: "50%",
        backgroundColor: v2.controlBackgroundColor,
        backgroundImage: playIndicatorUrl(v2.controlColor),
        backgroundRepeat: "no-repeat",
        backgroundPosition: "center",
        backgroundSize: v2.controlBackgroundSize,
        backgroundPositionX: pxToRem(12)
      }, p2.active && {
        backgroundImage: pauseIndicatorUrl(v2.controlColor)
      }, {
        opacity: p2.active ? 0 : 1,
        pointerEvents: "none",
        transition: "opacity .22s ease-in-out",
        left: "50%",
        position: "absolute",
        top: "50%",
        transform: "translate(-50%, -50%)"
      });
    },
    iframe: function iframe(_ref3) {
      var p2 = _ref3.props;
      return Object.assign({
        display: "block"
      }, !p2.iframeLoaded && {
        display: "none"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Form/formStyles.js
  var formStyles = {
    root: function root48(_ref) {
      var props = _ref.props, v2 = _ref.variables;
      return {
        height: "100%",
        width: "100%",
        display: "flex",
        flexDirection: "column",
        justifyContent: "space-evenly",
        justifyItems: "start",
        "> *:not(:last-child)": {
          marginBottom: v2.fieldsMarginBottom
        },
        "> :last-child": {
          marginTop: v2.lastChildMarginTop
        }
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Form/formFieldStyles.js
  var formFieldStyles = {
    root: function root49(_ref) {
      var props = _ref.props, variables = _ref.variables;
      return {};
    },
    label: function label2(_ref2) {
      var props = _ref2.props;
      var type = props.type, inline = props.inline, required = props.required;
      return Object.assign({}, (!type || type !== "radio" && type !== "checkbox") && {
        display: "block",
        marginBottom: pxToRem(4)
      }, inline && {
        marginRight: pxToRem(10),
        display: "inline"
      }, required && {
        "::after": {
          content: '"*"'
        }
      });
    },
    control: function control2(_ref3) {
      var props = _ref3.props, v2 = _ref3.variables;
      var type = props.type;
      return Object.assign({}, type && (type === "radio" || type === "checkbox") && {
        marginRight: pxToRem(10)
      });
    },
    message: function message4(_ref4) {
      var p2 = _ref4.props, v2 = _ref4.variables;
      return Object.assign({}, p2.hasErrorMessage && {
        color: v2.colorScheme.red.foreground
      }, {
        display: "block",
        paddingLeft: v2.messagePaddingLeft
      });
    },
    icon: function icon5(_ref5) {
      var p2 = _ref5.props, v2 = _ref5.variables;
      return Object.assign({}, p2.hasErrorMessage && {
        color: v2.colorScheme.red.foreground
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Form/formLabelStyles.js
  var formLabelStyles = {
    root: function root50(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "block",
        lineHeight: v2.lineHeight,
        marginBottom: v2.marginBottom
      }, p2.inline && {
        marginRight: pxToRem(10),
        display: "inline"
      }, p2.required && {
        "::after": {
          content: '"*"'
        }
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Form/formMessageStyles.js
  var formMessageStyles = {
    root: function root51(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "block",
        paddingLeft: v2.paddingLeft
      }, p2.error && {
        color: v2.colorScheme.red.foreground
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Flex/utils.js
  var toFlexAlignment = function toFlexAlignment2(propValue) {
    var trimmedValue = propValue.trim();
    if (trimmedValue === "start" || trimmedValue === "end") {
      return "flex-" + trimmedValue;
    }
    return trimmedValue;
  };
  var toFlexItemSizeValues = function toFlexItemSizeValues2(sizeValue) {
    return {
      flexBasis: sizeValue
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Flex/flexStyles.js
  var flexStyles = {
    root: function root52(_ref) {
      var _notLastChild;
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "flex"
      }, p2.debug && {
        border: "1px dotted grey",
        background: "lightgrey"
      }, p2.inline && {
        display: "inline-flex"
      }, p2.column && {
        flexDirection: "column"
      }, p2.hAlign && (p2.column ? {
        alignItems: toFlexAlignment(p2.hAlign)
      } : {
        justifyContent: toFlexAlignment(p2.hAlign)
      }), p2.vAlign && (p2.column ? {
        justifyContent: toFlexAlignment(p2.vAlign)
      } : {
        alignItems: toFlexAlignment(p2.vAlign)
      }), p2.space && {
        justifyContent: "space-" + p2.space
      }, p2.wrap && {
        flexWrap: "wrap"
      }, p2.fill && {
        width: "100%",
        height: "100%"
      }, p2.padding && {
        padding: v2[p2.padding]
      }, p2.gap && {
        "> *:not(:last-child)": (_notLastChild = {}, _notLastChild[p2.column ? "marginBottom" : "marginRight"] = v2[p2.gap], _notLastChild)
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Flex/flexItemStyles.js
  var flexItemStyles = {
    root: function root53(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({}, p2.align && {
        alignSelf: toFlexAlignment(p2.align)
      }, p2.size && toFlexItemSizeValues(v2.hasOwnProperty(p2.size) ? v2[p2.size] : p2.size), typeof p2.shrink === "number" && {
        flexShrink: p2.shrink
      }, p2.shrink === false && {
        flexShrink: 0
      }, p2.grow && {
        flexGrow: p2.grow
      }, p2.grow === true && {
        flexGrow: 1
      }, p2.push && (p2.flexDirection === "column" ? {
        marginTop: "auto"
      } : {
        marginLeft: "auto"
      }));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Grid/gridStyles.js
  var getCSSTemplateValue = function getCSSTemplateValue2(template) {
    var templateAsNumber = Number(template);
    return !isNaN(templateAsNumber) && templateAsNumber > 0 ? "repeat(" + template + ", 1fr)" : String(template);
  };
  var gridStyles = {
    root: function root54(_ref) {
      var props = _ref.props, _ref$variables = _ref.variables, height = _ref$variables.height, width = _ref$variables.width, defaultColumnCount = _ref$variables.defaultColumnCount, gridGap = _ref$variables.gridGap, padding4 = _ref$variables.padding;
      var rows = props.rows, _props$columns = props.columns, columns = _props$columns === void 0 ? !props.rows && defaultColumnCount : _props$columns;
      return Object.assign({
        height,
        width,
        padding: padding4,
        gridGap,
        display: "grid",
        justifyContent: "space-evenly"
      }, rows && !columns && {
        gridAutoFlow: "column"
      }, rows && {
        gridTemplateRows: getCSSTemplateValue(rows),
        msGridRows: getCSSTemplateValue(rows)
      }, columns && {
        gridTemplateColumns: getCSSTemplateValue(columns),
        msGridColumns: getCSSTemplateValue(columns)
      }, {
        "& > *": {
          outlineOffset: "-3px"
        }
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Header/headerStyles.js
  var import_get6 = __toESM(require_get());

  // ../node_modules/@fluentui/react-northstar/dist/es/styles/translateAlignProp.js
  var translateAlignProp = function translateAlignProp2(alignProp) {
    switch (alignProp) {
      case "start":
        return "left";
      case "end":
        return "right";
      default:
        return alignProp;
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Header/headerStyles.js
  var headerStyles = {
    root: function root55(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      var colors2 = v2.colorScheme[p2.color];
      return Object.assign({
        display: "block",
        color: (0, import_get6.default)(colors2, "foreground", v2.color),
        textAlign: translateAlignProp(p2.align)
      }, p2.hasDescription && {
        marginBottom: 0
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Header/headerDescriptionStyles.js
  var import_get7 = __toESM(require_get());
  var headerDescriptionStyles = {
    root: function root56(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      var colors2 = v2.colorScheme[p2.color];
      return {
        display: "block",
        color: (0, import_get7.default)(colors2, "foreground", v2.color),
        fontSize: pxToRem(22),
        fontWeight: 400
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/SvgIcon/svgIconStyles.js
  var getPaddedStyle = function getPaddedStyle2() {
    return {
      padding: pxToRem(4)
    };
  };
  var getBorderedStyles = function getBorderedStyles2(boxShadowColor) {
    return Object.assign({}, getPaddedStyle(), {
      boxShadow: "0 0 0 .05rem " + boxShadowColor + " inset"
    });
  };
  var getIconSize = function getIconSize2(size, v2) {
    var modifiedSizes = {
      large: {
        x: 24,
        xx: 28
      }
    };
    return v2.sizeModifier && modifiedSizes[size] && modifiedSizes[size][v2.sizeModifier] ? pxToRem(modifiedSizes[size][v2.sizeModifier]) : v2[size + "Size"];
  };
  var getXSpacingStyles = function getXSpacingStyles2(xSpacing, horizontalSpace) {
    switch (xSpacing) {
      case "none":
        return {
          marginLeft: 0,
          marginRight: 0
        };
      case "before":
        return {
          marginLeft: horizontalSpace,
          marginRight: 0
        };
      case "after":
        return {
          marginLeft: 0,
          marginRight: horizontalSpace
        };
      case "both":
        return {
          marginLeft: horizontalSpace,
          marginRight: horizontalSpace
        };
    }
  };
  var svgIconStyles = {
    root: function root57(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        speak: "none",
        verticalAlign: "middle"
      }, getXSpacingStyles(p2.xSpacing, v2.horizontalSpace), p2.circular && Object.assign({}, getPaddedStyle(), {
        borderRadius: "50%"
      }), p2.disabled && {
        color: v2.disabledColor
      }, {
        display: "inline-block"
      }, (p2.bordered || v2.borderColor) && getBorderedStyles(v2.borderColor || v2.color || "currentColor"), {
        backgroundColor: v2.backgroundColor
      });
    },
    outlinePart: function outlinePart(_ref2) {
      var p2 = _ref2.props;
      return Object.assign({
        display: "none"
      }, p2.outline && {
        display: "block"
      });
    },
    filledPart: function filledPart(_ref3) {
      var p2 = _ref3.props;
      return Object.assign({}, p2.outline && {
        display: "none"
      });
    },
    svg: function svg3(_ref4) {
      var _ref4$props = _ref4.props, size = _ref4$props.size, disabled = _ref4$props.disabled, rotate = _ref4$props.rotate, v2 = _ref4.variables, rtl2 = _ref4.rtl;
      var iconSizeInRems = getIconSize(size, v2);
      return Object.assign({
        display: "block",
        width: iconSizeInRems,
        height: iconSizeInRems,
        fill: v2.color || "currentColor"
      }, disabled && {
        fill: v2.disabledColor
      }, {
        // Manual flipping to make it compatible with Emotion and Fela in the same time
        transform: "rotate(" + rotate + "deg) /* @noflip */"
      }, rtl2 && {
        transform: "rotate(" + -1 * rotate + "deg) /* @noflip */"
      });
    },
    svgFlippingInRtl: function svgFlippingInRtl(config) {
      var props = config.props, rtl2 = config.rtl;
      return Object.assign({}, callable(svgIconStyles.svg)(config), rtl2 && {
        transform: "scaleX(-1) rotate(" + props.rotate + "deg) /* @noflip */"
      });
    },
    redPath: function redPath(_ref5) {
      var v2 = _ref5.variables;
      return {
        fill: v2.redColor
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Image/imageStyles.js
  var imageStyles = {
    root: function root58(_ref) {
      var props = _ref.props, variables = _ref.variables;
      return Object.assign({
        boxSizing: "border-box",
        display: "inline-block",
        verticalAlign: "middle",
        width: props.fluid && "100%" || variables.width,
        height: variables.height || "auto"
      }, props.circular && {
        borderRadius: variables.circularRadius
      }, props.avatar && {
        width: props.fluid && "100%" || variables.avatarSize,
        borderRadius: variables.avatarRadius
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Input/inputStyles.js
  var inputStyles = {
    root: function root59(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        flexDirection: "column",
        justifyContent: "center",
        display: "inline-flex",
        position: "relative",
        outline: 0,
        verticalAlign: "middle"
      }, p2.fluid && {
        width: "100%"
      }, p2.labelPosition === "inline" && {
        flexDirection: "row",
        alignItems: "center"
      });
    },
    input: function input2(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      return Object.assign({
        backgroundColor: v2.backgroundColor
      }, p2.inverted && {
        backgroundColor: v2.backgroundColorInverted
      }, {
        lineHeight: "unset",
        color: v2.fontColor,
        borderColor: v2.borderColor,
        borderRadius: v2.borderRadius,
        borderStyle: "solid",
        borderWidth: v2.borderWidth,
        outline: "none",
        padding: v2.inputPadding,
        position: "relative"
      }, p2.fluid && {
        width: "100%"
      }, p2.inline && {
        float: "left"
      }, p2.disabled && {
        color: v2.colorDisabled,
        boxShadow: "none"
      }, {
        "::placeholder": Object.assign({
          color: v2.placeholderColor,
          opacity: 1
        }, p2.disabled && {
          color: v2.colorDisabled
        }),
        ":focus": Object.assign({}, !p2.error && {
          borderColor: v2.inputFocusBorderColor,
          borderRadius: v2.inputFocusBorderRadius
        })
      }, !p2.hasValue && {
        ":-webkit-autofill:focus": {
          "-webkit-text-fill-color": "transparent"
        }
      }, p2.clearable && {
        padding: v2.inputPaddingWithIconAtEnd
      }, p2.hasIcon && {
        padding: p2.iconPosition === "start" ? v2.inputPaddingWithIconAtStart : v2.inputPaddingWithIconAtEnd
      }, p2.labelPosition === "inside" && {
        paddingTop: v2.inputInsideLabelPaddingTop
      }, p2.error && {
        border: pxToRem(1) + " solid " + v2.borderColorError
      }, {
        "::-ms-clear": {
          display: "none"
        }
      });
    },
    icon: function icon6(_ref3) {
      var p2 = _ref3.props, v2 = _ref3.variables;
      return Object.assign({
        color: v2.iconColor,
        outline: 0,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        position: v2.iconPosition,
        top: 0,
        bottom: 0
      }, p2.error && {
        color: v2.colorError
      }, p2.requiredAndSuccessful && {
        color: v2.successfulColor
      }, p2.disabled && {
        color: v2.colorDisabled
      }, p2.iconPosition === "start" && {
        left: v2.iconLeft
      }, p2.iconPosition === "end" && {
        right: v2.iconRight
      }, p2.clearable && p2.hasValue && Object.assign({
        height: "100%",
        width: pxToRem(16),
        color: v2.iconColor
      }, p2.disabled && {
        color: v2.colorDisabled
      }));
    },
    inputContainer: function inputContainer() {
      return {
        position: "relative"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Input/inputLabelStyles.js
  var inputLabelStyles = {
    root: function root60(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "block",
        transition: "all .2s",
        lineHeight: v2.lineHeight,
        marginBottom: v2.marginBottom
      }, p2.labelPosition === "inside" && Object.assign({
        bottom: v2.insideLabelBottom,
        top: 0,
        left: 0,
        margin: 0,
        position: "absolute",
        display: "flex",
        alignItems: "center",
        zIndex: 100,
        paddingLeft: v2.insideLabelPaddingLeft
      }, p2.hasValue && {
        transform: "translateY(-16px)",
        fontSize: v2.insideLabelActiveFontSize
      }), p2.labelPosition === "inline" && {
        paddingRight: v2.inlineLabelPaddingRight
      }, p2.required && {
        "::after": {
          content: '"*"'
        }
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Label/labelStyles.js
  var labelStyles = {
    root: function root61(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var siteVariables = theme.siteVariables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center",
        overflow: "hidden",
        height: v2.height,
        lineHeight: v2.height,
        color: v2.foreground,
        backgroundColor: v2.background,
        fontSize: pxToRem(14),
        borderRadius: siteVariables.borderRadiusMedium,
        padding: v2.padding
      }, p2.hasImage && (p2.imagePosition === "start" ? {
        paddingLeft: v2.startPaddingLeft
      } : {
        paddingRight: v2.endPaddingRight
      }), p2.circular && {
        borderRadius: v2.circularRadius
      }, p2.color === "black" && {
        color: v2.blackForeground,
        backgroundColor: v2.blackBackground
      }, p2.color === "white" && {
        color: v2.whiteForeground,
        backgroundColor: v2.whiteBackground
      }, p2.color === "brand" && {
        color: v2.brandForeground,
        backgroundColor: v2.brandBackground
      }, p2.color === "grey" && {
        color: v2.greyForeground,
        backgroundColor: v2.greyBackground
      }, p2.color === "orange" && {
        color: v2.orangeForeground,
        backgroundColor: v2.orangeBackground
      }, p2.color === "red" && {
        color: v2.redForeground,
        backgroundColor: v2.redBackground
      }, p2.color === "green" && {
        color: v2.greenForeground,
        backgroundColor: v2.greenBackground
      }, p2.color === "yellow" && {
        color: v2.yellowForeground,
        backgroundColor: v2.yellowBackground
      });
    },
    content: function content8(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      var hasStartElement = p2.hasImage && p2.imagePosition === "start" || p2.hasIcon && p2.iconPosition === "start";
      var hasEndElement = p2.hasImage && p2.imagePosition === "end" || p2.hasIcon && p2.iconPosition === "end";
      return Object.assign({}, hasStartElement && {
        marginLeft: pxToRem(3)
      }, !hasStartElement && p2.circular && {
        marginLeft: pxToRem(4)
      }, hasEndElement && {
        marginRight: pxToRem(3)
      }, !hasEndElement && p2.circular && {
        marginRight: pxToRem(4)
      });
    },
    image: function image4(_ref3) {
      var v2 = _ref3.variables;
      return {
        height: v2.height,
        width: v2.height
      };
    },
    icon: function icon7(_ref4) {
      var p2 = _ref4.props, v2 = _ref4.variables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: v2.iconSize,
        height: v2.iconSize,
        "& > :first-child": {
          height: "100%",
          width: "100%",
          "& svg": {
            height: "100%",
            width: "100%"
          }
        }
      }, p2.hasActionableIcon && {
        cursor: "pointer"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/styles/debugStyles.js
  var debugStyle = function debugStyle2(_ref) {
    var name = _ref.name, color2 = _ref.color, style = _ref.style;
    return {
      position: "relative",
      border: "2px " + style + " " + color2,
      "::before": {
        content: "'" + name + "'",
        position: "absolute",
        padding: "1px 4px 1px",
        top: "-2px",
        left: "-2px",
        fontSize: "8px",
        fontWeight: 900,
        lineHeight: 1,
        letterSpacing: "1px",
        color: "#fff",
        background: color2
      }
    };
  };
  var debugRoot = function debugRoot2() {
    return Object.assign({}, debugStyle({
      name: "LAYOUT",
      color: "cornflowerblue",
      style: "solid"
    }), {
      padding: "8px",
      margin: "2px"
    });
  };
  var debugArea = function debugArea2() {
    return Object.assign({}, debugStyle({
      name: "AREA",
      color: "lightsalmon",
      style: "dashed"
    }), {
      padding: "8px",
      margin: "2px"
    });
  };
  var debugGap = function debugGap2(_ref2) {
    var vertical = _ref2.vertical;
    return {
      display: "grid",
      background: "#ccc",
      "::before": Object.assign({
        content: '"GAP"'
      }, vertical ? {
        letterSpacing: "1px"
      } : {
        textOrientation: "upright",
        writingMode: "vertical-rl"
      }, {
        alignSelf: "center",
        justifySelf: "center",
        fontSize: "8px",
        fontWeight: 900,
        lineHeight: 0,
        color: "#fff"
      })
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Layout/layoutStyles.js
  var countTrue = function countTrue2(items) {
    return items.filter(Boolean).length;
  };
  var layoutStyles = {
    root: function root62(_ref) {
      var _Object$assign;
      var props = _ref.props;
      var alignItems = props.alignItems, debug = props.debug, gap2 = props.gap, justifyItems = props.justifyItems, hasMain = props.hasMain, mainSize = props.mainSize, hasEnd = props.hasEnd, endSize = props.endSize, hasStart = props.hasStart, startSize = props.startSize, vertical = props.vertical;
      return Object.assign({}, debug && debugRoot(), (_Object$assign = {
        justifyItems,
        alignItems,
        display: "grid"
      }, _Object$assign[vertical ? "gridTemplateRows" : "gridTemplateColumns"] = [
        // Heads up!
        // IE11 Doesn't support grid-gap, insert virtual columns instead
        hasStart && startSize,
        gap2 && hasStart && hasMain && gap2,
        hasMain && mainSize,
        gap2 && (hasStart || hasMain) && hasEnd && gap2,
        hasEnd && endSize
      ].filter(Boolean).join(" "), _Object$assign), vertical && {
        gridAutoFlow: "row",
        msGridColumns: "1fr"
      });
    },
    gap: function gap(_ref2) {
      var props = _ref2.props;
      return Object.assign({}, props.debug && debugGap({
        vertical: props.vertical
      }));
    },
    start: function start(_ref3) {
      var _Object$assign2;
      var p2 = _ref3.props;
      return Object.assign({}, p2.debug && debugArea(), (_Object$assign2 = {
        alignItems: "center",
        display: "inline-flex"
      }, _Object$assign2[p2.vertical ? "msGridRow" : "msGridColumn"] = "1", _Object$assign2));
    },
    main: function main2(_ref4) {
      var _Object$assign3;
      var p2 = _ref4.props;
      return Object.assign({}, p2.debug && debugArea(), (_Object$assign3 = {
        alignItems: "center",
        display: "grid"
      }, _Object$assign3[p2.vertical ? "msGridRow" : "msGridColumn"] = countTrue([p2.hasStart, p2.hasStart && p2.gap, p2.hasMain]), _Object$assign3));
    },
    end: function end(_ref5) {
      var _Object$assign4;
      var p2 = _ref5.props;
      return Object.assign({}, p2.debug && debugArea(), (_Object$assign4 = {
        alignItems: "center",
        display: "inline-flex"
      }, _Object$assign4[p2.vertical ? "msGridRow" : "msGridColumn"] = countTrue([p2.hasStart, p2.hasStart && p2.gap, p2.hasMain && p2.gap]), _Object$assign4));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Loader/loaderStyles.js
  var rootFlexDirections = {
    above: "column-reverse",
    below: "column",
    start: "row-reverse",
    end: "row"
  };
  var getCircleStyles = function getCircleStyles2() {
    return {
      cx: "50%",
      cy: "50%",
      r: "45%",
      fill: "none",
      strokeWidth: "8px"
    };
  };
  var loaderStyles = {
    root: function root63(_ref) {
      var p2 = _ref.props;
      return {
        alignItems: "center",
        display: p2.inline ? "inline-flex" : "flex",
        justifyContent: "center",
        flexDirection: rootFlexDirections[p2.labelPosition]
      };
    },
    indicator: function indicator2(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      return {
        height: v2.containerHeights[p2.size],
        width: v2.containerWidths[p2.size]
      };
    },
    svg: function svg4(_ref3) {
      var p2 = _ref3.props, v2 = _ref3.variables;
      return {
        animation: "3s linear infinite",
        animationName: {
          "0%": {
            transform: "rotate(0deg) /* @noflip */"
          },
          "100%": {
            transform: "rotate(360deg) /* @noflip */"
          }
        },
        width: v2.svgWidths[p2.size],
        height: v2.svgHeights[p2.size]
      };
    },
    svgTrack: function svgTrack(_ref4) {
      var p2 = _ref4.props, v2 = _ref4.variables;
      return Object.assign({
        stroke: !p2.secondary && v2.svgTrackColor
      }, getCircleStyles());
    },
    svgTail: function svgTail(_ref5) {
      var p2 = _ref5.props, v2 = _ref5.variables;
      return Object.assign({}, getCircleStyles(), {
        animation: "1.5s cubic-bezier(0.33,0,0.67,1) infinite",
        strokeLinecap: "round",
        strokeDasharray: "283",
        strokeDashoffset: "280",
        transformOrigin: "50% 50%",
        stroke: p2.secondary ? v2.svgSecondaryColor : v2.svgTailColor,
        animationName: {
          "0%": {
            strokeDashoffset: "283",
            transform: "rotate(0) /* @noflip */"
          },
          "25%": {
            strokeDashoffset: "283",
            transform: "rotate(0) /* @noflip */"
          },
          "50%": {
            strokeDashoffset: "75",
            transform: "rotate(45deg) /* @noflip */"
          },
          "75%": {
            strokeDashoffset: "75",
            transform: "rotate(45deg) /* @noflip */"
          },
          "100%": {
            strokeDashoffset: "283",
            transform: "rotate(360deg) /* @noflip */"
          }
        }
      });
    },
    label: function label3() {
      return {
        margin: pxToRem(10)
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/ItemLayout/itemLayoutStyles.js
  var itemLayoutStyles = {
    root: function root64(_ref) {
      var variables = _ref.variables;
      return {
        gridTemplateRows: "minmax(" + variables.height + ", max-content)",
        paddingLeft: variables.paddingLeft,
        paddingRight: variables.paddingRight
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/List/listStyles.js
  var listStyles = {
    root: function root65(_ref) {
      var p2 = _ref.props;
      return Object.assign({}, p2.debug && debugRoot(), {
        display: p2.horizontal ? "inline-flex" : "block"
      }, p2.isListTag && {
        listStyle: "none",
        padding: 0,
        margin: 0
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/List/listItemStyles.js
  var selectableHoverStyle = function selectableHoverStyle2(p2, v2) {
    var _ref;
    return _ref = {
      background: v2.selectableFocusHoverBackgroundColor,
      color: v2.selectableFocusHoverColor,
      cursor: "pointer"
    }, _ref["& ." + listItemHeaderClassName] = {
      color: "inherit"
    }, _ref["& ." + listItemContentClassName] = {
      color: "inherit"
    }, _ref["& ." + listItemHeaderMediaClassName] = Object.assign({}, screenReaderContainerStyles, {
      color: "inherit"
    }), _ref["& ." + listItemContentMediaClassName] = {
      display: "none",
      color: "inherit"
    }, _ref["& ." + listItemEndMediaClassName] = {
      display: "block",
      color: "inherit"
    }, _ref;
  };
  var selectedStyle = function selectedStyle2(variables) {
    return {
      background: variables.selectedBackgroundColor,
      color: variables.selectedColor
    };
  };
  var listItemStyles = {
    root: function root66(_ref2) {
      var _Object$assign;
      var p2 = _ref2.props, v2 = _ref2.variables, siteVariables = _ref2.theme.siteVariables;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables
      });
      return Object.assign({
        display: "flex",
        alignItems: "center",
        minHeight: v2.minHeight,
        padding: v2.rootPadding
      }, (p2.selectable || p2.navigable) && Object.assign((_Object$assign = {
        position: "relative",
        userSelect: "none"
      }, _Object$assign["& ." + listItemEndMediaClassName] = {
        display: "none"
      }, _Object$assign["&:hover"] = selectableHoverStyle(p2, v2), _Object$assign[":focus"] = borderFocusStyles[":focus"], _Object$assign[":focus-visible"] = Object.assign({}, borderFocusStyles[":focus-visible"], {
        zIndex: v2.zIndex
      }), _Object$assign), p2.selected && selectedStyle(v2)), p2.important && {
        fontWeight: v2.importantFontWeight
      });
    },
    headerWrapper: function headerWrapper() {
      return {
        display: "flex"
      };
    },
    contentWrapper: function contentWrapper2() {
      return {
        display: "flex"
      };
    },
    main: function main3() {
      return {
        display: "flex",
        flexDirection: "column",
        flexGrow: 1,
        minWidth: 0
        // needed for the truncate styles to work
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/List/listItemContentStyles.js
  var listItemContentStyles = {
    root: function root67(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        flexGrow: 1,
        fontSize: v2.contentFontSize,
        lineHeight: v2.contentLineHeight
      }, p2.truncate && {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      }, (!p2.hasHeader || p2.hasContentMedia) && {
        marginRight: v2.gap
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/List/listItemContentMediaStyles.js
  var listItemContentMediaStyles = {
    root: function root68(_ref) {
      var v2 = _ref.variables;
      return {
        fontSize: v2.contentMediaFontSize,
        lineHeight: v2.contentMediaLineHeight
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/List/listItemEndMediaStyles.js
  var listItemEndMediaStyles = {
    root: function root69(_ref) {
      var p2 = _ref.props;
      return Object.assign({
        flexShrink: 0
      }, (p2.selectable || p2.navigable) && {
        display: "none"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/List/listItemHeaderStyles.js
  var listItemHeaderStyles = {
    root: function root70(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        flexGrow: 1,
        fontSize: v2.headerFontSize,
        lineHeight: v2.headerLineHeight
      }, p2.truncate && {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      }, (!p2.hasContent || p2.hasHeaderMedia) && {
        marginRight: v2.gap
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/List/listItemHeaderMediaStyles.js
  var listItemHeaderMediaStyles = {
    root: function root71(_ref) {
      var v2 = _ref.variables;
      return {
        alignSelf: "flex-end",
        flexShrink: 0,
        fontSize: v2.headerMediaFontSize,
        lineHeight: v2.headerMediaLineHeight
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/List/listItemMediaStyles.js
  var listItemMediaStyles = {
    root: function root72(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({}, p2.important && {
        "::before": {
          content: '""',
          position: "absolute",
          left: pxToRem(8),
          width: pxToRem(2),
          height: pxToRem(2),
          background: "#000"
        }
      }, (p2.hasHeader || p2.hasContent) && {
        marginRight: v2.gap
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Menu/menuStyles.js
  var menuStyles = {
    root: function root73(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var iconOnly = p2.iconOnly, fluid = p2.fluid, pointing = p2.pointing, pills = p2.pills, primary = p2.primary, underlined = p2.underlined, vertical = p2.vertical, submenu = p2.submenu;
      var colors2 = getColorScheme(v2.colorScheme, null, primary);
      var siteVariables = theme.siteVariables;
      return Object.assign({
        display: "flex",
        minHeight: pxToRem(24),
        margin: 0,
        padding: 0,
        color: v2.color,
        backgroundColor: v2.backgroundColor || "inherit",
        listStyleType: "none"
      }, iconOnly && {
        alignItems: "center"
      }, vertical && Object.assign({
        flexDirection: "column",
        backgroundColor: v2.verticalBackgroundColor,
        padding: pxToRem(8) + " " + pxToRem(4)
      }, submenu && {
        boxShadow: v2.verticalBoxShadow
      }, !fluid && !submenu && {
        width: "fit-content"
      }, iconOnly && {
        display: "inline-block",
        width: "auto"
      }), !pills && !iconOnly && !(pointing && vertical) && !underlined && Object.assign({
        // primary has hardcoded grey border color
        border: v2.borderWidth + " solid " + (primary ? v2.primaryBorderColor : v2.borderColor || colors2.border),
        borderRadius: siteVariables.borderRadiusMedium
      }, submenu && {
        borderColor: v2.subMenuBorderColor
      }), underlined && {
        borderBottom: v2.underlinedBottomBorderWidth + " solid " + v2.underlinedBorderColor
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Menu/menuItemStyles.js
  var verticalPillsBottomMargin = pxToRem(5);
  var horizontalPillsRightMargin = pxToRem(8);
  var verticalPointingBottomMargin = pxToRem(12);
  var underlinedItem = function underlinedItem2(color2) {
    return {
      paddingBottom: 0,
      borderBottom: "solid " + pxToRem(4) + " " + color2,
      transition: "color .1s ease"
    };
  };
  var getFocusedStyles = function getFocusedStyles2(_ref) {
    var props = _ref.props, v2 = _ref.variables, colors2 = _ref.colors;
    var primary = props.primary, underlined = props.underlined, active = props.active, vertical = props.vertical;
    if (active && !underlined && !vertical)
      return {};
    return Object.assign({
      color: v2.colorActive || colors2.foregroundActive,
      background: v2.backgroundColorFocus || colors2.backgroundFocus
    }, primary && {
      color: colors2.foregroundFocus,
      background: colors2.backgroundFocus
    }, primary && !vertical && !underlined && {
      color: v2.primaryWrapperColorFocus
    }, vertical && Object.assign({
      background: "inherit",
      color: v2.colorFocus || colors2.foregroundFocus,
      border: pxToRem(1) + " solid transparent",
      padding: pxToRem(1)
    }, primary && {
      color: v2.color
    }));
  };
  var pointingBeak = function pointingBeak2(_ref2) {
    var props = _ref2.props, v2 = _ref2.variables, colors2 = _ref2.colors;
    var pointing = props.pointing, primary = props.primary;
    var top;
    var borders;
    var backgroundColor = v2.backgroundColorActive || colors2.backgroundActive;
    var borderColor3 = v2.borderColor || primary ? v2.primaryBorderColor : colors2.border;
    if (pointing === "start") {
      borders = {
        borderTop: "1px solid " + borderColor3,
        borderLeft: "1px solid " + borderColor3
      };
      top = "-1px";
    } else {
      borders = {
        borderBottom: "1px solid " + borderColor3,
        borderRight: "1px solid " + borderColor3
      };
      top = "100%";
    }
    return {
      "::after": Object.assign({
        visibility: "visible",
        background: backgroundColor,
        position: "absolute",
        content: '""',
        top,
        left: "50%",
        transform: "translateX(-50%) translateY(-50%) rotate(45deg)",
        margin: ".5px 0 0",
        width: pxToRem(10),
        height: pxToRem(10),
        border: "none"
      }, borders, {
        zIndex: v2.beakZIndex,
        transition: "background .1s ease"
      })
    };
  };
  var menuItemStyles = {
    root: function root74(_ref3) {
      var _ref4;
      var p2 = _ref3.props, v2 = _ref3.variables, siteVariables = _ref3.theme.siteVariables;
      var active = p2.active, iconOnly = p2.iconOnly, isFromKeyboard = p2.isFromKeyboard, pointing = p2.pointing, primary = p2.primary, underlined = p2.underlined, vertical = p2.vertical, disabled = p2.disabled;
      var colors2 = getColorScheme(v2.colorScheme, null, primary);
      return Object.assign({
        color: "inherit",
        display: "block",
        cursor: "pointer",
        whiteSpace: "nowrap",
        overflow: "hidden"
      }, pointing && vertical && {
        border: "1px solid transparent"
      }, iconOnly && {
        border: pxToRem(2) + " solid transparent"
      }, {
        padding: v2.horizontalPadding
      }, vertical && {
        padding: v2.verticalItemPadding
      }, pointing && vertical && {
        padding: pxToRem(8) + " " + pxToRem(18)
      }, underlined && {
        padding: pxToRem(4) + " 0"
      }, iconOnly && {
        margin: pxToRem(1),
        padding: pxToRem(5),
        // padding works this way to get the border to only be 30x30px on focus which is the current design
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        overflow: "visible"
      }, active && Object.assign({}, iconOnly && Object.assign({
        color: v2.iconOnlyColorActive
      }, getIconFillOrOutlineStyles({
        outline: false
      })), underlined && Object.assign({
        color: v2.activeUnderlinedColor
      }, underlinedItem(v2.activeUnderlinedBorderBottomColor), primary && Object.assign({
        color: v2.activeUnderlinedPrimaryColor
      }, underlinedItem(v2.borderColorActive || colors2.borderActive)), !primary && {
        fontWeight: 700
      })), isFromKeyboard && Object.assign({
        color: "inherit"
      }, iconOnly && Object.assign({}, getBorderFocusStyles({
        variables: siteVariables
      }), getIconFillOrOutlineStyles({
        outline: false
      })), primary ? Object.assign({}, iconOnly && {
        borderColor: v2.borderColorActive || colors2.borderActive
      }) : Object.assign({}, underlined && {
        fontWeight: 700
      }, underlined && active && underlinedItem(v2.colorActive)), (underlined || vertical) && Object.assign({}, getBorderFocusStyles({
        variables: siteVariables
      }), {
        ":focus-visible": Object.assign({}, getBorderFocusStyles({
          variables: siteVariables
        })[":focus-visible"], {
          borderColor: v2.borderColorActive
        })
      })), {
        ":focus": {
          outline: 0
        },
        // hover styles
        ":hover": Object.assign({
          color: v2.colorHover
        }, underlined && {
          color: v2.underlinedColorHover
        }, !disabled && !primary && vertical && (_ref4 = {}, _ref4["&>." + menuItemIconClassName] = Object.assign({
          color: v2.subMenuIconColor
        }, getIconFillOrOutlineStyles({
          outline: false
        })), _ref4), !disabled && Object.assign({}, iconOnly && getIconFillOrOutlineStyles({
          outline: false
        }), primary ? Object.assign({}, iconOnly && {
          color: "inherit"
        }, !active && underlined && underlinedItem(v2.underlinedBorderColor || colors2.backgroundActive)) : !active && underlined && underlinedItem(v2.backgroundColorActive || colors2.backgroundActive)))
      }, disabled && {
        cursor: "default"
      });
    },
    menu: function menu(_ref5) {
      var v2 = _ref5.variables;
      return {
        zIndex: v2.menuZIndex
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Menu/menuItemIconStyles.js
  var menuItemIconStyles = {
    root: function root75(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: v2.iconSize,
        height: v2.iconSize,
        "& > :first-child": {
          height: "100%",
          width: "100%"
        }
      }, p2.hasContent && {
        marginRight: pxToRem(10)
      }, !p2.iconOnly && {
        // reduce margins so text has the dominant influence on the vertical height
        marginTop: 0,
        marginBottom: pxToRem(-8),
        verticalAlign: "top"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Menu/menuItemContentStyles.js
  var menuItemContentStyles = {
    root: function root76(_ref) {
      var p2 = _ref.props;
      var widthAdjust = (p2.hasIcon ? 26 : 0) + (p2.hasMenu ? 16 : 0);
      return Object.assign({
        whiteSpace: "normal",
        lineHeight: 1.5,
        marginTop: pxToRem(-4),
        marginBottom: pxToRem(-4),
        display: "inline-block",
        userSelect: "none"
      }, (p2.inSubmenu || p2.vertical) && {
        width: "max-content",
        minWidth: pxToRem(46 - widthAdjust),
        maxWidth: pxToRem(262 - widthAdjust),
        marginRight: pxToRem(16)
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Menu/submenuIndicatorDirection.js
  var submenuIndicatorDirection = function submenuIndicatorDirection2(vertical) {
    return vertical ? {} : {
      transform: "rotate(90deg)"
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Menu/menuItemIndicatorStyles.js
  var menuItemIndicatorStyles = {
    root: function root77(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        position: "relative",
        float: "right",
        left: pxToRem(12),
        userSelect: "none",
        marginRight: pxToRem(4)
      }, p2.inSubmenu && {
        position: "absolute",
        top: pxToRem(6),
        right: pxToRem(2),
        left: "unset"
      }, {
        content: '" "',
        display: "block",
        overflow: "hidden",
        height: pxToRem(16),
        width: pxToRem(16),
        backgroundSize: pxToRem(16),
        color: v2.indicatorColor
      }, p2.active && Object.assign({
        color: v2.activeIndicatorColor
      }, p2.primary && Object.assign({
        color: v2.activePrimaryIndicatorColor
      }, p2.vertical && {
        color: v2.activePrimaryVerticalIndicatorColor
      })), p2.underlined && {
        color: v2.indicatorColor
      }, p2.iconOnly && {
        color: v2.indicatorColor
      }, submenuIndicatorDirection(p2.vertical));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Menu/menuItemWrapperStyles.js
  var menuItemWrapperStyles = {
    root: function root78(_ref) {
      var _Object$assign;
      var props = _ref.props, v2 = _ref.variables;
      var active = props.active, disabled = props.disabled, iconOnly = props.iconOnly, isFromKeyboard = props.isFromKeyboard, pills = props.pills, pointing = props.pointing, secondary = props.secondary, underlined = props.underlined, vertical = props.vertical, primary = props.primary, on2 = props.on;
      var colors2 = getColorScheme(v2.colorScheme, null, primary);
      return Object.assign({
        color: "inherit",
        lineHeight: 1,
        position: "relative",
        verticalAlign: "middle",
        display: "block"
      }, secondary && {
        background: "salmon"
      }, vertical && {
        border: "solid " + v2.verticalItemBorderWidth + " " + v2.verticalItemBorderColor
      }, pills && Object.assign({}, vertical ? {
        margin: "0 0 " + verticalPillsBottomMargin + " 0"
      } : {
        margin: "0 " + horizontalPillsRightMargin + " 0 0"
      }, {
        borderRadius: pxToRem(5)
      }), underlined && {
        display: "flex",
        alignItems: "center",
        height: pxToRem(29),
        lineHeight: v2.lineHeightBase,
        padding: "0 " + pxToRem(4),
        margin: "0 " + pxToRem(4) + " 0 0",
        ":nth-child(n+2)": {
          marginLeft: "" + pxToRem(4)
        },
        boxShadow: "none"
      }, !vertical && !pills && !underlined && !iconOnly && {
        boxShadow: "-1px 0 0 0 " + (primary ? v2.primaryBorderColor : v2.borderColor || colors2.border) + " inset"
      }, primary && !vertical && !underlined && {
        color: v2.primaryWrapperColor
      }, active && !vertical && Object.assign({
        color: v2.wrapperColorActive
      }, !underlined && {
        background: v2.backgroundColorActive
      }, primary && !vertical && !underlined && {
        color: v2.primaryWrapperColor
      }, !underlined && on2 !== "hover" && Object.assign({
        background: v2.backgroundColorActive || colors2.backgroundActive
      }, iconOnly && {
        background: v2.activeIconOnlyWrapperBackgroundColor
      }, !iconOnly && primary && {
        color: colors2.foregroundActive
      }), underlined && {
        color: v2.activeUnderlinedWrapperColor
      }, pointing && !vertical && Object.assign({}, pointingBeak({
        props,
        variables: v2,
        colors: colors2
      }))), isFromKeyboard && Object.assign({
        color: v2.wrapperColorFocus
      }, !underlined && Object.assign({
        background: v2.wrapperBackgroundColorFocus
      }, primary && {
        background: v2.primaryWrapperBackgroundColorFocus,
        color: v2.primaryWrapperColorFocus
      }), !iconOnly && !underlined && getFocusedStyles({
        props,
        variables: v2,
        colors: colors2
      }), iconOnly && {
        background: v2.iconOnlyWrapperBackgroundColorFocus,
        color: v2.iconOnlyColorActive
      }), active && {
        '[data-tabs="true"]': Object.assign({}, !underlined && Object.assign({
          background: v2.backgroundColorActive || colors2.backgroundActive
        }, iconOnly && {
          background: v2.activeIconOnlyWrapperBackgroundColor
        }, !iconOnly && primary && {
          color: colors2.foregroundActive
        }), pointing && vertical && {
          "::before": Object.assign({
            content: "''",
            position: "absolute",
            width: pxToRem(3),
            height: "calc(100% + " + pxToRem(4) + ")",
            top: pxToRem(-2),
            backgroundColor: v2.pointingIndicatorBackgroundColor
          }, isFromKeyboard && {
            display: "none"
          }, pointing === "end" ? {
            right: pxToRem(-2)
          } : {
            left: pxToRem(-2)
          })
        })
      }, {
        // hover styles
        ":hover": Object.assign({
          color: v2.wrapperColorHover,
          background: v2.backgroundColorHover || colors2.backgroundHover
        }, active && {
          background: v2.activeWrapperBackgroundColorHover
        }, vertical && {
          color: v2.wrapperColorHover,
          background: v2.backgroundColorHover || colors2.backgroundHover,
          borderRadius: pxToRem(4)
        }, primary && {
          color: v2.primaryWrapperColorHover
        }, underlined && {
          color: v2.underlinedWrapperColorHover,
          background: v2.underlinedWrapperBackgroundHover
        }, iconOnly && {
          background: v2.iconOnlyBackgroundColorHover,
          color: v2.iconOnlyColorHover
        }, (_Object$assign = {}, _Object$assign["&>." + menuItemClassName + ">." + menuItemIndicatorClassName] = Object.assign({
          color: v2.indicatorColorHover
        }, primary && {
          color: v2.primaryIndicatorColorHover
        }, submenuIndicatorDirection(vertical)), _Object$assign))
      }, iconOnly && {
        borderRadius: v2.iconOnlyBorderRadius,
        display: "flex"
      }, {
        ":first-child": Object.assign({}, !pills && !iconOnly && !(pointing && vertical) && !underlined && Object.assign({}, vertical && {
          "::before": {
            display: "none"
          }
        }, !vertical && {
          borderBottomLeftRadius: pxToRem(3),
          borderTopLeftRadius: pxToRem(3)
        }))
      }, disabled && {
        color: v2.colorDisabled || colors2.foregroundDisabled,
        cursor: "default",
        ":hover": {
          // empty - overwrite all existing hover styles
        }
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Menu/menuDividerStyles.js
  var menuDividerStyles = {
    root: function root79(_ref) {
      var _Object$assign;
      var p2 = _ref.props, v2 = _ref.variables;
      var colors2 = getColorScheme(v2.colorScheme, null, p2.primary);
      var borderColor3 = p2.primary ? v2.primaryBorderColor : v2.borderColor || colors2.border;
      var borderType = p2.vertical ? "borderTop" : "borderLeft";
      return Object.assign({}, p2.pointing && p2.vertical && {
        marginBottom: verticalPointingBottomMargin
      }, p2.pills && Object.assign({}, p2.vertical ? {
        margin: "0 0 " + verticalPillsBottomMargin + " 0"
      } : {
        margin: "0 " + horizontalPillsRightMargin + " 0 0"
      }), p2.hasContent ? {
        display: "flex",
        justifyContent: "center",
        flexDirection: "column",
        textAlign: "center"
      } : Object.assign((_Object$assign = {}, _Object$assign[borderType] = "1px solid " + borderColor3, _Object$assign), !p2.vertical && {
        alignSelf: "stretch"
      }, p2.vertical && p2.inSubmenu && {
        margin: "8px 0"
      }));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Popup/PopupContent.js
  var import_keys3 = __toESM(require_keys());
  var import_invoke12 = __toESM(require_invoke());
  var import_classnames5 = __toESM(require_classnames());
  var React204 = __toESM(require_react());
  var popupContentClassName = "ui-popup__content";
  var popupContentSlotClassNames = {
    content: popupContentClassName + "__content"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/MenuButton/menuButtonStyles.js
  var menuButtonStyles = {
    root: function root80() {
      return {
        boxSizing: "border-box",
        display: "inline-block"
      };
    },
    popupContent: function popupContent() {
      var _ref;
      return _ref = {}, _ref["& ." + popupContentSlotClassNames.content] = {
        borderWidth: "0px",
        padding: "0px"
      }, _ref;
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Pill/pillStyles.js
  var pillStyles = {
    root: function root81(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      return Object.assign({
        display: "inline-flex",
        width: "fit-content",
        position: "relative",
        height: v2.height,
        maxHeight: v2.height,
        borderRadius: v2.borderRadius,
        background: v2.background,
        margin: v2.margin,
        minWidth: v2.minWidth,
        ":hover": {
          background: v2.backgroundHover
        }
      }, p2.rectangular && Object.assign({
        borderRadius: v2.roundedBorderRadius
      }, (p2.size === "small" || p2.size === "smaller") && {
        borderRadius: v2.smallerRoundedBorderRadius
      }), p2.size === "smaller" && {
        minWidth: v2.smallerMinWidth,
        margin: v2.smallerMargin,
        height: v2.smallerHeight,
        maxHeight: v2.smallerHeight
      }, p2.size === "small" && {
        minWidth: v2.smallMinWidth,
        margin: v2.smallMargin,
        height: v2.smallHeight,
        maxHeight: v2.smallHeight
      }, p2.disabled && {
        pointerEvents: "none",
        cursor: "not-allowed",
        background: v2.disabledBackground,
        color: v2.disabledColor,
        ":hover": {
          background: v2.disabledBackground
        }
      }, p2.appearance === "outline" && Object.assign({
        borderWidth: "1px",
        borderStyle: "solid",
        background: v2.outlineBackground,
        borderColor: v2.outlineBorderColor,
        ":hover": {
          background: v2.outlineBackground
        }
      }, p2.disabled && {
        borderColor: v2.outlineDisabledborder
      }), p2.appearance === "inverted" && Object.assign({
        background: v2.invertedBackground,
        ":hover": {
          background: v2.invertedBackground
        }
      }, p2.disabled && {
        background: v2.disabledBackground
      }), p2.selectable && Object.assign({
        cursor: "pointer"
      }, p2.selected && {
        background: "transparent",
        boxShadow: "inset " + v2.selectedIconColor + " 0px 0px 0px 1px"
      }), p2.actionable && {
        cursor: "pointer"
      }, getBorderFocusStyles({
        variables: siteVariables
      }));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Pill/pillContentStyles.js
  var pillContentStyles = {
    root: function root82(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        fontSize: v2.contentFontSize,
        padding: v2.contentPadding,
        alignSelf: "center"
      }, p2.size === "small" && {
        fontSize: v2.contentFontSizeSmall,
        padding: v2.contentPaddingSmall
      }, p2.size === "smaller" && {
        fontSize: v2.contentFontSizeSmaller,
        padding: v2.contentPaddingSmaller
      }, p2.actionable && {
        paddingRight: 0
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Pill/pillActionStyles.js
  var pillActionStyles = {
    root: function root83(_ref) {
      var _Object$assign;
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        border: "none",
        background: "transparent",
        margin: v2.actionMargin,
        width: v2.actionWidth,
        cursor: "pointer",
        outline: "none"
      }, (p2.size === "small" || p2.size === "smaller") && {
        width: v2.smallOrSmallerActionWidth
      }, (_Object$assign = {}, _Object$assign["& ." + svgIconClassName] = {
        height: "100%",
        width: "100%",
        "& svg": {
          height: "100%",
          width: "100%"
        }
      }, _Object$assign));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Pill/pillImageStyles.js
  var pillImageStyles = {
    root: function root84(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        width: v2.imageWidth,
        height: v2.imageHeight,
        borderRadius: "50%"
      }, p2.size === "small" && {
        width: v2.smallImageWidth,
        height: v2.smallImageHeight
      }, p2.size === "smaller" && {
        width: v2.smallerImageWidth,
        height: v2.smallerImageHeight
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Pill/pillIconStyles.js
  var pillIconStyles = {
    root: function root85(_ref) {
      var _Object$assign;
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        border: "none",
        background: "transparent",
        margin: v2.iconMargin,
        width: v2.iconWidth,
        cursor: "pointer",
        outline: "none"
      }, (p2.size === "small" || p2.size === "smaller") && {
        width: v2.smallOrSmallerIconWidth
      }, p2.selectable && p2.hasImage && Object.assign({
        width: v2.selectedImageIconWidth,
        height: v2.selectedImageIconWidth,
        marginLeft: 0,
        color: v2.selectedIconColor
      }, p2.size === "small" && {
        width: v2.smallSelectedImageIconWidth,
        height: v2.smallSelectedImageIconWidth
      }, p2.size === "smaller" && {
        width: v2.smallerSelectedImageIconWidth,
        height: v2.smallerSelectedImageIconWidth
      }), (_Object$assign = {}, _Object$assign["& ." + svgIconClassName] = Object.assign({
        height: "100%",
        width: "100%"
      }, p2.selectable && p2.hasImage && {
        position: "relative",
        // TODO: Remove this workaround once we have proper icon from designer
        "::after": {
          content: '""',
          position: "absolute",
          background: v2.selectedIconCheckColor,
          left: "10%",
          top: "10%",
          borderRadius: "50%",
          width: "80%",
          height: "80%"
        }
      }, {
        "& svg": Object.assign({}, p2.selectable && p2.hasImage && {
          position: "absolute"
        }, {
          zIndex: 100,
          height: "100%",
          width: "100%"
        })
      }), _Object$assign));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Pill/pillGroupStyles.js
  var pillGroupStyles = {
    root: function root86() {
      return {
        display: "flex"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/getPointerStyles.js
  var getContainerStyles = function getContainerStyles2(options) {
    var padding4 = options.padding, placement = options.placement;
    return Object.assign({}, placement === "bottom" && {
      paddingTop: padding4
    }, placement === "top" && {
      paddingBottom: padding4
    }, placement === "left" && {
      paddingRight: padding4
    }, placement === "right" && {
      paddingLeft: padding4
    });
  };
  var getPointerStyles = function getPointerStyles2(options) {
    var backgroundColor = options.backgroundColor, borderColor3 = options.borderColor, rtl2 = options.rtl, borderSize = options.borderSize, gap2 = options.gap, height = options.height, padding4 = options.padding, placement = options.placement, svg5 = options.svg, width = options.width;
    return Object.assign({
      display: "block",
      position: "absolute",
      zIndex: 1
    }, (placement === "bottom" || placement === "top") && {
      paddingLeft: gap2,
      paddingRight: gap2,
      height,
      width: "calc(" + width + " + (" + gap2 + " * 2))"
    }, (placement === "left" || placement === "right") && {
      paddingBottom: gap2,
      paddingTop: gap2,
      height: "calc(" + width + " + (" + gap2 + " * 2))",
      width: height
    }, placement === "bottom" && {
      top: "calc(" + padding4 + " - " + height + " + (" + borderSize + " * 2))"
    }, placement === "top" && {
      bottom: "calc(" + padding4 + " - " + height + " + " + borderSize + ")"
    }, placement === "left" && {
      right: "calc(" + padding4 + " - " + height + " + " + borderSize + ")"
    }, placement === "right" && {
      left: "calc(" + padding4 + " - " + height + " + " + borderSize + ")"
    }, {
      "::before": Object.assign({
        content: '" "',
        display: "block",
        height,
        position: "relative",
        transformOrigin: "center top",
        borderBottomColor: "transparent",
        borderLeftColor: "transparent",
        borderRightColor: "transparent",
        borderTopColor: "transparent",
        borderStyle: "solid",
        left: 0,
        top: 0
      }, placement === "bottom" && {
        borderBottomColor: backgroundColor,
        borderWidth: "0 " + height + " " + height
      }, placement === "top" && {
        borderTopColor: backgroundColor,
        borderWidth: height + " " + height + " 0",
        top: "calc(" + borderSize + " * -1)"
      }, placement === "left" && {
        borderLeftColor: backgroundColor,
        borderWidth: height + " 0 " + height + " " + height
      }, placement === "right" && {
        borderRightColor: backgroundColor,
        borderWidth: height + " " + height + " " + height + " 0"
      }),
      "::after": Object.assign({
        content: '" "',
        display: "block",
        height,
        position: "relative",
        transformOrigin: "center top",
        zIndex: -1,
        borderBottomColor: "transparent",
        borderLeftColor: "transparent",
        borderRightColor: "transparent",
        borderTopColor: "transparent",
        borderStyle: "solid"
      }, placement === "bottom" && {
        borderBottomColor: borderColor3,
        borderWidth: "0 " + height + " " + height,
        left: 0,
        bottom: "calc(" + height + " + 1px)"
      }, placement === "top" && {
        borderTopColor: borderColor3,
        borderWidth: height + " " + height + " 0",
        left: 0,
        bottom: height
      }, placement === "left" && {
        borderLeftColor: borderColor3,
        borderWidth: height + " 0 " + height + " " + height,
        left: borderSize,
        bottom: width
      }, placement === "right" && {
        borderRightColor: borderColor3,
        borderWidth: height + " " + height + " " + height + " 0",
        right: borderSize,
        bottom: width
      })
    }, svg5 && {
      // :before & :after are used to draw CSS triangles, not valid for SVG
      "::before": Object.assign({
        content: '" "',
        backgroundImage: svg5,
        backgroundRepeat: "no-repeat",
        backgroundPosition: "center",
        display: "block",
        position: "relative"
      }, placement === "bottom" && {
        height: "calc(" + width + " + (" + gap2 + " * 2))",
        width: height,
        left: gap2,
        bottom: "calc(" + width + " - " + height + " + " + borderSize + ")",
        transform: "rotate(90deg) /* @noflip */"
      }, placement === "top" && {
        height: "calc(" + width + " + (" + gap2 + " * 2))",
        width: height,
        left: gap2,
        bottom: "calc(" + gap2 + " + " + height + " - " + borderSize + ")",
        transform: "rotate(-90deg) /* @noflip */"
      }, placement === "left" && {
        height: width,
        width: height,
        left: 0,
        transform: rtl2 ? "rotate(0) /* @noflip */" : "rotate(180deg) /* @noflip */"
      }, placement === "right" && {
        height: width,
        width: height,
        right: 0,
        transform: rtl2 ? "rotate(180deg) /* @noflip */" : "rotate(0) /* @noflip */"
      }),
      "::after": void 0
    });
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Popup/popupContentStyles.js
  var popupContentStyles = {
    root: function root87(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "block",
        zIndex: v2.zIndex
      }, p2.pointing && Object.assign({
        pointerEvents: "none"
      }, getContainerStyles({
        placement: p2.basePlacement,
        padding: v2.pointerMargin
      })), p2.autoSize && {
        // when autoSize is true, root will have inline style maxWidth and maxHeight set by popper
        display: "flex"
      });
    },
    pointer: function pointer(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables, rtl2 = _ref2.rtl;
      return getPointerStyles({
        backgroundColor: v2.backgroundColor,
        borderColor: v2.borderColor,
        borderSize: v2.borderSize,
        gap: v2.pointerGap,
        padding: v2.pointerMargin,
        height: v2.pointerHeight,
        width: v2.pointerWidth,
        placement: p2.basePlacement,
        rtl: rtl2
      });
    },
    content: function content9(_ref3) {
      var p2 = _ref3.props, v2 = _ref3.variables;
      return Object.assign({
        display: "block",
        background: v2.backgroundColor,
        color: v2.color,
        boxShadow: v2.boxShadow,
        border: v2.borderSize + " solid " + v2.borderColor,
        borderRadius: v2.borderRadius,
        padding: v2.padding
      }, p2.pointing && {
        pointerEvents: "all"
      }, p2.autoSize && {
        overflow: "auto"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Provider/providerStyles.js
  var providerStyles = {
    root: function root88(_ref) {
      var v2 = _ref.variables;
      return {
        background: v2.background,
        color: v2.color,
        textAlign: "left",
        "& ::-webkit-scrollbar": {
          height: v2.scrollbarHeight,
          width: v2.scrollbarWidth,
          ":disabled": {
            display: "none"
          }
        },
        "& ::-webkit-scrollbar-thumb": {
          borderRadius: v2.scrollbarThumbBorderRadius,
          border: "solid " + v2.scrollbarThumbBorderSize + " transparent",
          backgroundClip: "content-box",
          backgroundColor: v2.scrollbarThumbBackgroundColor,
          ":hover": {
            backgroundColor: v2.scrollbarThumbHoverBackgroundColor,
            border: "solid " + v2.scrollbarThumbHoverBorderSize + " transparent"
          }
        },
        "& ::-webkit-scrollbar-track": {
          background: "transparent"
        }
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/RadioGroup/radioGroupStyles.js
  var radioGroupStyles = {
    root: function root89(_ref) {
      var p2 = _ref.props;
      return {
        display: "flex",
        flexDirection: p2.vertical ? "column" : "row"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/RadioGroup/RadioGroupItem.js
  var import_invoke13 = __toESM(require_invoke());
  var React205 = __toESM(require_react());
  var radioGroupItemClassName = "ui-radiogroup__item";
  var radioGroupItemSlotClassNames = {
    indicator: radioGroupItemClassName + "__indicator",
    label: radioGroupItemClassName + "__label"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/RadioGroup/radioGroupItemStyles.js
  var restHoverFocusTextColor = function restHoverFocusTextColor2(textColor) {
    return {
      color: textColor,
      ":hover": {
        color: textColor
      },
      ":focus": {
        color: textColor
      }
    };
  };
  var radioGroupItemStyles = {
    root: function root90(_ref) {
      var _hover;
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      return Object.assign({
        position: "relative",
        alignItems: "center",
        borderStyle: "solid",
        borderWidth: "" + pxToRem(1),
        borderColor: "transparent",
        borderRadius: siteVariables.borderRadiusMedium,
        color: v2.textColorDefault,
        cursor: "pointer",
        display: p2.vertical ? "flex" : "inline-flex",
        fontSize: v2.textFontSize,
        padding: v2.padding,
        margin: v2.margin,
        ":hover": (_hover = {
          color: v2.textColorDefaultHoverFocus
        }, _hover["& ." + radioGroupItemSlotClassNames.indicator] = Object.assign({
          borderColor: v2.textColorDefaultHoverFocus
        }, !p2.disabled && !p2.checked && {
          borderColor: v2.indicatorBorderColorDefaultHover
        }), _hover),
        ":focus": {
          color: v2.textColorDefaultHoverFocus
        }
      }, p2.checked && Object.assign({}, restHoverFocusTextColor(v2.textColorChecked)), p2.disabled && Object.assign({}, restHoverFocusTextColor(v2.colorDisabled)), getBorderFocusStyles({
        variables: siteVariables
      }));
    },
    indicator: function indicator3(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables;
      return Object.assign({
        margin: pxToRem(2) + " 0",
        outline: 0,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        width: pxToRem(16),
        height: pxToRem(16),
        verticalAlign: "midddle",
        color: v2.indicatorColorDefault
      }, p2.checked && {
        color: v2.indicatorBackgroundColorChecked
      }, p2.disabled && {
        color: v2.colorDisabled
      });
    },
    label: function label4() {
      return {
        margin: "0 0 0 " + pxToRem(12),
        userSelect: "none"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Segment/segmentStyles.js
  var segmentStyles = {
    root: function root91(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      var colors2 = getColorScheme(v2.colorScheme, p2.color);
      return Object.assign({
        borderColor: "transparent",
        borderRadius: v2.borderRadius,
        borderStyle: v2.borderStyle,
        borderWidth: v2.borderWidth,
        boxShadow: v2.boxShadow,
        padding: v2.padding,
        color: v2.color,
        backgroundColor: v2.backgroundColor
      }, p2.color && {
        borderColor: colors2.foreground
      }, p2.inverted && {
        color: v2.backgroundColor,
        backgroundColor: p2.color ? colors2.foreground : v2.color
      }, p2.disabled && Object.assign({
        boxShadow: "none",
        borderColor: v2.disabledBorderColor,
        color: v2.disabledColor,
        backgroundColor: v2.disabledBackgroundColor
      }, p2.inverted && {
        color: v2.disabledBackgroundColor,
        backgroundColor: v2.disabledColor
      }));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Skeleton/utils/keyframes.js
  var pulse = {
    from: {
      opacity: 1
    },
    "50%": {
      opacity: 0.5
    },
    to: {
      opacity: 1
    }
  };
  var wave = {
    "0%": {
      backgroundPosition: "-1200px 0"
    },
    "100%": {
      backgroundPosition: "1200px 0"
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Skeleton/SkeletonLine.js
  var skeletonLineClassName = "ui-skeleton__line";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Skeleton/SkeletonShape.js
  var skeletonShapeClassName = "ui-skeleton__shape";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Skeleton/SkeletonButton.js
  var skeletonButtonClassName = "ui-skeleton__button";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Skeleton/SkeletonInput.js
  var skeletonInputClassName = "ui-skeleton__input";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Skeleton/SkeletonAvatar.js
  var skeletonAvatarClassName = "ui-skeleton__avatar";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Skeleton/SkeletonText.js
  var skeletonTextClassName = "ui-skeleton__text";

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Skeleton/utils/animations.js
  var waveStyles = function waveStyles2(primaryColor, secondoryColor) {
    return {
      position: "static",
      overflow: "hidden",
      animationDuration: "4.5s",
      animationName: wave,
      animationIterationCount: "infinite",
      backgroundColor: "#FFFFFF",
      animationTimingFunction: "linear",
      backgroundImage: "linear-gradient(to right, " + secondoryColor + " 0%, " + primaryColor + " 20%, " + secondoryColor + " 40%)",
      backgroundSize: "1200px 100%"
    };
  };
  var pulseStyles = {
    animationName: pulse,
    animationDuration: "1.5s",
    animationIterationCount: "infinite"
  };
  var getAnimations = function getAnimations2(primaryColor, secondoryColor) {
    var _pulse, _wave;
    return {
      pulse: (_pulse = {}, _pulse["& ." + skeletonLineClassName] = pulseStyles, _pulse["& ." + skeletonShapeClassName] = pulseStyles, _pulse["& ." + skeletonButtonClassName] = pulseStyles, _pulse["& ." + skeletonAvatarClassName] = pulseStyles, _pulse["& ." + skeletonInputClassName] = pulseStyles, _pulse["& ." + skeletonTextClassName] = pulseStyles, _pulse),
      wave: (_wave = {}, _wave["& ." + skeletonLineClassName] = waveStyles(primaryColor, secondoryColor), _wave["& ." + skeletonShapeClassName] = waveStyles(primaryColor, secondoryColor), _wave["& ." + skeletonButtonClassName] = waveStyles(primaryColor, secondoryColor), _wave["& ." + skeletonAvatarClassName] = waveStyles(primaryColor, secondoryColor), _wave["& ." + skeletonInputClassName] = waveStyles(primaryColor, secondoryColor), _wave["& ." + skeletonTextClassName] = waveStyles(primaryColor, secondoryColor), _wave)
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Skeleton/skeletonStyles.js
  var skeletonStyles = {
    root: function root92(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      var animations2 = getAnimations(v2.animationBackground, v2.animationBackgroundSecondary);
      return Object.assign({
        width: "100%"
      }, p2.animation && animations2[p2.animation]);
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Skeleton/skeletonLineStyles.js
  var skeletonLineStyles = {
    root: function root93(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return {
        display: "block",
        width: p2.width,
        height: p2.height,
        backgroundColor: v2.lineBackground,
        margin: v2.lineMargin
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Skeleton/skeletonShapeStyles.js
  var skeletonShapeStyles = {
    root: function root94(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "block",
        width: p2.width,
        height: p2.height,
        backgroundColor: v2.shapeBackground,
        margin: v2.shapeMargin
      }, p2.round && {
        borderRadius: "50%"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Skeleton/skeletonButtonStyles.js
  var skeletonButtonStyles = {
    root: function root95(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "inline-block",
        background: v2.buttonBackground,
        height: v2.buttonHeight,
        width: v2.buttonWidth
      }, p2.size === "small" && {
        height: v2.buttonSmallHeight,
        width: v2.buttonSmallWidth
      }, p2.circular && Object.assign({
        width: v2.buttonHeight,
        borderRadius: v2.buttonCircularBorderRadius
      }, p2.size === "small" && {
        width: v2.buttonSmallHeight
      }), p2.iconOnly && Object.assign({
        width: v2.buttonHeight
      }, p2.size === "small" && {
        width: v2.buttonSmallHeight
      }), p2.fluid && {
        width: "100%",
        maxWidth: "100%"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Skeleton/skeletonTextStyles.js
  var skeletonTextStyles = {
    root: function root96(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "block",
        background: v2.textBackground,
        height: v2.textMediumHeight,
        width: v2.textWidth
      }, p2.size === "smaller" && {
        height: v2.textSmallerHeight
      }, p2.size === "small" && {
        height: v2.textSmallHeight
      }, p2.size === "large" && {
        height: v2.textLargeHeight
      }, p2.size === "larger" && {
        height: v2.textLargerHeight
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Skeleton/skeletonInputStyles.js
  var skeletonInputStyles = {
    root: function root97(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        flexDirection: "column",
        justifyContent: "center",
        display: "inline-flex",
        position: "relative",
        height: v2.inputHeight,
        width: v2.inputWidth,
        background: v2.inputBackground
      }, p2.fluid && {
        width: "100%"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Skeleton/skeletonAvatarStyles.js
  var skeletonAvatarStyles = {
    root: function root98(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "inline-block",
        verticalAlign: "middle",
        borderRadius: "50%",
        background: v2.buttonBackground,
        height: v2.avatarMedium,
        width: v2.avatarMedium
      }, p2.size === "smallest" && {
        height: v2.avatarSmallest,
        width: v2.avatarSmallest
      }, p2.size === "smaller" && {
        height: v2.avatarSmaller,
        width: v2.avatarSmaller
      }, p2.size === "small" && {
        height: v2.avatarSmall,
        width: v2.avatarSmall
      }, p2.size === "large" && {
        height: v2.avatarLarge,
        width: v2.avatarLarge
      }, p2.size === "larger" && {
        height: v2.avatarLarger,
        width: v2.avatarLarger
      }, p2.size === "largest" && {
        height: v2.avatarLargest,
        width: v2.avatarLargest
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Slider/Slider.js
  var import_invoke14 = __toESM(require_invoke());
  var import_get8 = __toESM(require_get());
  var import_toNumber = __toESM(require_toNumber());
  var import_classnames6 = __toESM(require_classnames());
  var React206 = __toESM(require_react());
  var sliderClassName = "ui-slider";
  var sliderSlotClassNames = {
    input: sliderClassName + "__input",
    inputWrapper: sliderClassName + "__input-wrapper",
    rail: sliderClassName + "__rail",
    thumb: sliderClassName + "__thumb",
    track: sliderClassName + "__track"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Slider/sliderStyles.js
  var selectors = {
    WEBKIT_THUMB: "::-webkit-slider-thumb",
    MOZ_THUMB: "::-moz-range-thumb",
    MS_FILL_LOWER: "::-ms-fill-lower",
    MS_FILL_UPPER: "::-ms-fill-upper",
    MS_THUMB: "::-ms-thumb"
  };
  var getCommonSlotStyles = function getCommonSlotStyles2(p2, v2) {
    return {
      cursor: "pointer",
      pointerEvents: "none",
      position: "absolute",
      border: 0,
      height: v2.railHeight,
      marginTop: "calc(" + v2.height + " / 2 - " + v2.railHeight + " / 2)"
    };
  };
  var thumbFromPreviousSiblingSelector = "&+ ." + sliderSlotClassNames.thumb;
  var getFluidStyles = function getFluidStyles2(p2) {
    return p2.fluid && !p2.vertical && {
      width: "100%"
    };
  };
  var sliderStyles = {
    root: function root99(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        height: v2.height
      }, p2.disabled && {
        pointerEvents: "none"
      }, p2.vertical && {
        height: v2.length,
        width: v2.height
      }, getFluidStyles(p2));
    },
    input: function input3(_ref2) {
      var _Object$assign, _active, _focus, _focusVisible;
      var p2 = _ref2.props, v2 = _ref2.variables, siteVariables = _ref2.theme.siteVariables;
      var activeThumbStyles = {
        height: v2.activeThumbHeight,
        width: v2.activeThumbWidth,
        background: v2.activeThumbColor,
        marginTop: "calc(" + v2.height + " / 2  - " + v2.activeThumbHeight + " / 2)",
        marginLeft: "calc(-" + v2.activeThumbWidth + " / 2)"
      };
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables,
        borderPadding: v2.thumbBorderPadding
      });
      var thumbStyles = {
        border: 0,
        width: "1px"
      };
      return Object.assign((_Object$assign = {
        WebkitAppearance: "none",
        cursor: "pointer",
        height: "100%",
        width: "100%",
        margin: 0,
        padding: 0,
        opacity: 0
      }, _Object$assign[selectors.WEBKIT_THUMB] = Object.assign({}, thumbStyles, {
        "-webkit-appearance": "none"
      }), _Object$assign[selectors.MOZ_THUMB] = thumbStyles, _Object$assign[selectors.MS_THUMB] = Object.assign({}, thumbStyles, {
        marginTop: "calc(-" + v2.thumbHeight + " / 2)"
      }), _Object$assign[selectors.MS_FILL_LOWER] = {
        display: "none"
      }, _Object$assign[selectors.MS_FILL_UPPER] = {
        display: "none"
      }, _Object$assign), getFluidStyles(p2), {
        ":active": (_active = {}, _active[thumbFromPreviousSiblingSelector] = activeThumbStyles, _active),
        ":focus": (_focus = {
          outline: 0
        }, _focus[thumbFromPreviousSiblingSelector] = borderFocusStyles[":focus"], _focus),
        ":focus-visible": (_focusVisible = {}, _focusVisible[thumbFromPreviousSiblingSelector] = Object.assign({}, borderFocusStyles[":focus-visible"], activeThumbStyles), _focusVisible)
      });
    },
    inputWrapper: function inputWrapper(_ref3) {
      var p2 = _ref3.props, v2 = _ref3.variables;
      var transformOriginValue = "calc(" + v2.length + " / 2)";
      return Object.assign({
        position: "relative",
        display: "inline-block",
        height: v2.height,
        width: v2.length
      }, p2.vertical && {
        transform: "rotate(-90deg)",
        transformOrigin: transformOriginValue + " " + transformOriginValue
      }, getFluidStyles(p2));
    },
    rail: function rail(_ref4) {
      var p2 = _ref4.props, v2 = _ref4.variables;
      return Object.assign({
        width: "100%",
        background: v2.railColor
      }, getCommonSlotStyles(p2, v2), p2.disabled && {
        background: v2.disabledRailColor
      });
    },
    track: function track(_ref5) {
      var p2 = _ref5.props, v2 = _ref5.variables;
      return Object.assign({
        background: v2.trackColor
      }, getCommonSlotStyles(p2, v2), p2.disabled && {
        background: v2.disabledTrackColor
      });
    },
    thumb: function thumb(_ref6) {
      var p2 = _ref6.props, v2 = _ref6.variables;
      return Object.assign({
        border: 0,
        borderRadius: "100%",
        cursor: "pointer",
        pointerEvents: "none",
        position: "absolute",
        background: v2.thumbColor,
        height: v2.thumbHeight,
        width: v2.thumbWidth,
        marginTop: "calc(" + v2.height + " / 2  - " + v2.thumbHeight + " / 2)",
        marginLeft: "calc(-" + v2.thumbWidth + " / 2)"
      }, p2.disabled && {
        background: v2.disabledThumbColor
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Reaction/reactionStyles.js
  var contentClassNameSelector = "& ." + reactionSlotClassNames.content;
  var reactionStyles = {
    root: function root100(_ref) {
      var _hover;
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      return {
        cursor: "pointer",
        background: "transparent",
        border: pxToRem(0),
        padding: pxToRem(0),
        display: "inline-flex",
        justifyContent: "center",
        alignItems: "center",
        color: v2.meReacting ? v2.meReactingColor : v2.otherReactingColor,
        ":hover": (_hover = {
          color: v2.meReacting ? v2.meReactingColorHover : v2.otherReactingColorHover
        }, _hover[contentClassNameSelector] = {
          fontWeight: v2.fontWeightHover
        }, _hover),
        position: "relative",
        ":focus": {
          outline: "none"
        },
        ":focus-visible": {
          ":after": {
            content: '""',
            position: "absolute",
            top: "-" + pxToRem(2),
            right: "-" + pxToRem(2),
            bottom: "-" + pxToRem(2),
            left: "-" + pxToRem(2),
            borderWidth: "1px",
            borderStyle: "solid",
            borderColor: v2.borderColorFocus,
            borderRadius: siteVariables.borderRadiusMedium,
            boxShadow: "0px 0px 0px 1px " + v2.boxShadowColor + " inset"
          }
        }
      };
    },
    icon: function icon8(_ref2) {
      var p2 = _ref2.props;
      return {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        marginRight: p2.hasContent ? pxToRem(4) : pxToRem(0)
      };
    },
    content: function content10(_ref3) {
      var v2 = _ref3.variables;
      return {
        fontSize: v2.contentFontSize
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Reaction/reactionGroupStyles.js
  var reactionGroupStyles = {
    root: function root101() {
      return {};
    },
    reaction: function reaction(_ref) {
      var v2 = _ref.variables;
      return {
        ":not(:last-child)": {
          marginRight: v2.reactionSpacing
        }
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Status/statusStyles.js
  var getBackgroundColor = function getBackgroundColor2(state, variables) {
    switch (state) {
      case "success":
        return variables.successBackgroundColor;
      case "info":
        return variables.infoBackgroundColor;
      case "warning":
        return variables.warningBackgroundColor;
      case "error":
        return variables.errorBackgroundColor;
      case "unknown":
      default:
        return variables.defaultBackgroundColor;
    }
  };
  var getTextColor = function getTextColor2(state, variables) {
    switch (state) {
      case "success":
        return variables.successTextColor;
      case "info":
        return variables.infoTextColor;
      case "warning":
        return variables.warningTextColor;
      case "error":
        return variables.errorTextColor;
      case "unknown":
      default:
        return variables.defaultTextColor;
    }
  };
  var sizeToPxValue2 = {
    smallest: 6,
    smaller: 10,
    small: 10,
    medium: 10,
    large: 10,
    larger: 16,
    largest: 0
  };
  var iconSizeToPxValue2 = {
    smallest: 4,
    smaller: 6,
    small: 6,
    medium: 6,
    large: 6,
    larger: 10,
    largest: 0
  };
  var getSizeStyles3 = function getSizeStyles4(sizeInPx, variables) {
    var borderWidth3 = variables.borderColor && variables.borderWidth || 0;
    var sizeInRem = pxToRem(sizeInPx + 2 * borderWidth3);
    return {
      height: sizeInRem,
      width: sizeInRem
    };
  };
  var statusStyles = {
    root: function root102(_ref) {
      var _ref$props = _ref.props, color2 = _ref$props.color, size = _ref$props.size, state = _ref$props.state, variables = _ref.variables;
      return Object.assign({
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center"
      }, getSizeStyles3(sizeToPxValue2[size], variables), {
        verticalAlign: "middle",
        borderRadius: "9999px"
      }, variables.borderColor && {
        borderColor: variables.borderColor,
        borderWidth: pxToRem(variables.borderWidth),
        borderStyle: "solid"
      }, {
        backgroundColor: color2 || getBackgroundColor(state, variables)
      });
    },
    icon: function icon9(_ref2) {
      var _ref2$props = _ref2.props, size = _ref2$props.size, state = _ref2$props.state, v2 = _ref2.variables;
      return {
        display: "inline-flex",
        alignItems: "center",
        justifyContent: "center",
        width: pxToRem(iconSizeToPxValue2[size]),
        height: pxToRem(iconSizeToPxValue2[size]),
        color: getTextColor(state, v2),
        "& > :first-child": {
          height: "100%",
          width: "100%",
          "& svg": {
            height: "100%",
            width: "100%"
          }
        }
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/SplitButton/splitButtonStyles.js
  var splitButtonStyles = {
    menuButton: function menuButton(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0,
        borderRightWidth: 0,
        padding: v2.padding,
        minWidth: v2.minWidth
      }, p2.size === "small" && {
        height: v2.smallDimension,
        padding: v2.smallPadding,
        minWidth: v2.smallMinWidth
      }, (p2.flat || p2.size === "small") && {
        boxShadow: "none"
      }, {
        ":focus-visible": {
          borderRightWidth: 0,
          ":before": {
            borderRightWidth: 0
          },
          ":after": {
            borderRightWidth: 0
          }
        },
        ":active": {
          animationName: "unset",
          animationDuration: "unset"
        }
      });
    },
    root: function root103(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables, siteVariables = _ref2.theme.siteVariables;
      var borderFocusStyles = getBorderFocusStyles({
        variables: {
          borderRadius: v2.focusBorderRadius,
          borderWidth: v2.focusBorderWidth,
          focusInnerBorderColor: v2.focusInnerBorderColor,
          focusOuterBorderColor: v2.focusOuterBorderColor,
          zIndexes: {
            foreground: v2.focusBorderZIndex
          }
        }
      });
      return {
        borderRadius: v2.borderRadius,
        position: "relative",
        whiteSpace: "nowrap",
        display: "inline-block",
        width: "fit-content",
        ":focus-within": Object.assign({
          boxShadow: "none"
        }, p2.isFromKeyboard && Object.assign({}, borderFocusStyles[":focus-visible"]))
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/SplitButton/toggleIndicatorUrl.js
  var toggleIndicatorUrl = function toggleIndicatorUrl2(color2, outline2) {
    if (outline2) {
      return `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' focusable='false' viewBox='8 8 16 16'%3E%3Cpath fill='` + encodeURIComponent(color2) + `' d='M21.5,13.5c0,0.1,0,0.3-0.1,0.4l-5,5C16.3,19,16.1,19,16,19c-0.1,0-0.3-0.1-0.4-0.1l-5-5c-0.1-0.1-0.2-0.2-0.1-0.4 c0-0.3,0.2-0.5,0.5-0.5c0.1,0,0.3,0.1,0.4,0.1l4.6,4.6l4.7-4.6c0.1-0.1,0.2-0.1,0.4-0.1C21.3,13,21.5,13.2,21.5,13.5z' /%3E%3C/svg%3E")`;
    }
    return `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' focusable='false' viewBox='8 8 16 16'%3E%3Cpath fill='` + encodeURIComponent(color2) + `' d='M16,19.5c-0.3,0-0.5-0.1-0.7-0.3l-5-5C10.1,14,10,13.8,10,13.5c0-0.6,0.4-1,1-1c0.3,0,0.5,0.1,0.7,0.3l4.3,4.3l4.3-4.3 c0.2-0.2,0.4-0.3,0.7-0.3c0.6,0,1,0.4,1,1c0,0.3-0.1,0.5-0.3,0.7l-5,5C16.5,19.4,16.3,19.5,16,19.5z' /%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/SplitButton/splitButtonToggleStyles.js
  var getIndicatorStyles3 = function getIndicatorStyles4(color2, outline2, size) {
    return {
      content: '""',
      width: size,
      height: size,
      backgroundImage: toggleIndicatorUrl(color2, outline2),
      backgroundRepeat: "no-repeat"
    };
  };
  var splitButtonToggleStyles = {
    root: function root104(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var siteVariables = theme.siteVariables;
      var borderWidth3 = siteVariables.borderWidth;
      var borderFocusStyles = getBorderFocusStyles({
        variables: {
          borderRadius: v2.focusBorderRadius,
          borderWidth: v2.focusBorderWidth,
          focusInnerBorderColor: v2.focusInnerBorderColor,
          focusOuterBorderColor: v2.focusOuterBorderColor,
          zIndexes: {
            foreground: v2.focusBorderZIndex
          }
        },
        borderPadding: borderWidth3
      });
      var toggleButtonColorHover = function toggleButtonColorHover2() {
        return p2.primary ? v2.toggleButtonPrimaryHoverColor : v2.toggleButtonColorHover;
      };
      return Object.assign({
        height: v2.toggleButtonHeight,
        minWidth: v2.toggleButtonHeight,
        color: v2.toggleButtonColor,
        backgroundColor: v2.toggleButtonBackgroundColor,
        borderRadius: v2.toggleButtonBorderRadius,
        display: "inline-flex",
        justifyContent: "center",
        alignItems: "center",
        position: "relative",
        verticalAlign: "middle",
        cursor: "pointer",
        outline: 0,
        padding: 0,
        borderWidth: borderWidth3,
        borderStyle: "solid",
        borderColor: v2.toggleButtonBorderColor,
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0,
        borderLeftColor: "transparent",
        boxShadow: p2.primary ? v2.toggleButtonPrimaryBoxShadow : v2.toggleButtonBoxShadow
      }, (p2.flat || p2.size === "small" || p2.disabled) && {
        boxShadow: "none"
      }, getIconFillOrOutlineStyles({
        outline: true
      }), {
        ":before": Object.assign({}, getIndicatorStyles3(p2.disabled ? v2.toggleButtonColorDisabled : p2.primary ? v2.toggleButtonPrimaryColor : v2.toggleButtonColor, true, v2.toggleButtonIndicatorSize)),
        ":hover": Object.assign({}, getIconFillOrOutlineStyles({
          outline: true
        }), {
          color: toggleButtonColorHover(),
          backgroundColor: v2.toggleButtonBackgroundColorHover,
          borderTopColor: v2.toggleButtonBorderColorHover,
          borderRightColor: v2.toggleButtonBorderColorHover,
          borderBottomColor: v2.toggleButtonBorderColorHover,
          // ':before' styles apply to the content (chevron) part of Toggle button
          ":before": Object.assign({}, getIndicatorStyles3(toggleButtonColorHover(), true, v2.toggleButtonIndicatorSize))
        }),
        ":active": {
          color: v2.toggleButtonColorActive,
          backgroundColor: v2.toggleButtonBackgroundColorActive,
          borderColor: v2.toggleButtonBorderColorActive,
          boxShadow: "none"
        },
        ":focus": borderFocusStyles[":focus"],
        ":focus-visible": {
          backgroundColor: v2.toggleButtonBackgroundColorFocus,
          borderColor: v2.toggleButtonBorderColorFocus,
          color: v2.toggleButtonColorFocus,
          borderWidth: borderWidth3,
          ":hover": {
            borderColor: v2.toggleButtonBorderColorHover
          }
        }
      }, p2.primary && {
        color: v2.toggleButtonPrimaryColor,
        backgroundColor: v2.toggleButtonPrimaryBackgroundColor,
        borderWidth: "0 0 0 " + siteVariables.borderWidth,
        borderColor: v2.toggleButtonPrimaryBorderColor,
        ":active": {
          backgroundColor: v2.toggleButtonPrimaryBackgroundColorActive,
          boxShadow: "none"
        },
        ":focus": borderFocusStyles[":focus"],
        ":focus-visible": {
          backgroundColor: v2.toggleButtonPrimaryBackgroundColorFocus
        },
        ":hover": {
          color: v2.toggleButtonPrimaryHoverColor,
          backgroundColor: v2.toggleButtonPrimaryHoverBackgroundColor
        }
      }, p2.disabled && {
        cursor: "default",
        color: v2.toggleButtonColorDisabled,
        boxShadow: "none",
        pointerEvents: "none",
        ":hover": {
          color: v2.toggleButtonColorDisabled
        },
        backgroundColor: v2.toggleButtonBackgroundColorDisabled,
        borderWidth: "0 0 0 " + siteVariables.borderWidth,
        borderColor: v2.borderColorDisabled
      }, p2.size === "small" && {
        height: v2.smallDimension,
        width: v2.smallDimension,
        minWidth: v2.smallMinWidth
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/SplitButton/splitButtonDividerStyles.js
  var splitButtonDividerStyles = {
    root: function root105(_ref) {
      var props = _ref.props, variables = _ref.variables;
      return {
        height: "auto",
        alignItems: "center",
        display: "inline-block",
        "::before": Object.assign({
          content: '""',
          position: "absolute",
          top: 0,
          bottom: 0,
          width: "1px",
          height: "100%",
          zIndex: 1,
          background: variables.dividerColor
        }, props.primary && {
          background: variables.dividerPrimaryColor
        })
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Text/textStyles.js
  var textStyles = {
    root: function root106(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      var colors2 = v2.colorScheme[getColorSchemeKey(p2.color)];
      return Object.assign({}, p2.color && {
        color: colors2.foreground
      }, p2.atMention === true && {
        color: v2.atMentionOtherColor
      }, p2.truncated && {
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      }, p2.disabled && {
        color: v2.disabledColor
      }, p2.error && {
        color: v2.errorColor
      }, p2.success && {
        color: v2.successColor
      }, p2.temporary && {
        fontStyle: "italic"
      }, p2.align && {
        display: "block",
        textAlign: translateAlignProp(p2.align)
      }, p2.weight === "light" && {
        fontWeight: v2.fontWeightLight
      }, p2.weight === "semilight" && {
        fontWeight: v2.fontWeightSemilight
      }, p2.weight === "regular" && {
        fontWeight: v2.fontWeightRegular
      }, p2.weight === "semibold" && {
        fontWeight: v2.fontWeightSemibold
      }, p2.weight === "bold" && {
        fontWeight: v2.fontWeightBold
      }, p2.size === "smallest" && {
        fontSize: v2.fontSizeSmallest,
        lineHeight: v2.fontLineHeightSmallest
      }, p2.size === "smaller" && {
        fontSize: v2.fontSizeSmaller,
        lineHeight: v2.fontLineHeightSmaller
      }, p2.size === "small" && {
        fontSize: v2.fontSizeSmall,
        lineHeight: v2.fontLineHeightSmall
      }, p2.size === "medium" && {
        fontSize: v2.fontSizeMedium,
        lineHeight: v2.fontLineHeightMedium
      }, p2.size === "large" && {
        fontSize: v2.fontSizeLarge,
        lineHeight: v2.fontLineHeightLarge
      }, p2.size === "larger" && {
        fontSize: v2.fontSizeLarger,
        lineHeight: v2.fontLineHeightLarger
      }, p2.size === "largest" && {
        fontSize: v2.fontSizeLargest,
        lineHeight: v2.fontLineHeightLargest
      }, p2.atMention === "me" && {
        color: v2.atMentionMeColor,
        fontWeight: v2.atMentionMeFontWeight
      }, p2.timestamp && {
        color: v2.timestampColor
      }, p2.important && {
        color: v2.importantColor,
        fontWeight: v2.importantWeight
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/TextArea/textAreaStyles.js
  var textAreaStyles = {
    root: function root107(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        margin: v2.margin,
        height: v2.height,
        backgroundColor: v2.backgroundColor
      }, p2.inverted && {
        backgroundColor: v2.invertedBackgroundColor
      }, {
        color: v2.fontColor,
        borderColor: v2.borderColor,
        borderRadius: v2.borderRadius,
        borderStyle: "solid",
        borderWidth: v2.borderWidth,
        outline: 0,
        padding: v2.padding,
        resize: p2.resize || "none"
      }, p2.fluid && {
        width: "100%"
      }, p2.disabled && {
        pointerEvents: "none",
        color: v2.disabledColor,
        boxShadow: "none"
      }, p2.error && {
        border: pxToRem(1) + " solid " + v2.borderColorError
      }, {
        "::placeholder": Object.assign({
          color: v2.placeholderColor,
          opacity: 1
        }, p2.disabled && {
          color: v2.disabledColor
        }),
        ":focus": {
          borderColor: v2.borderColorFocus
        }
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarStyles.js
  var toolbarStyles = {
    root: function root108() {
      return {
        display: "flex",
        alignItems: "center",
        position: "relative"
      };
    },
    offsetMeasure: function offsetMeasure() {
      return {
        position: "absolute",
        visibility: "hidden",
        left: 0,
        top: 0
      };
    },
    overflowContainer: function overflowContainer() {
      return {
        display: "flex",
        overflow: "hidden",
        flexGrow: 1
      };
    },
    overflowSentinel: function overflowSentinel(_ref) {
      var props = _ref.props;
      return {
        width: pxToRem(100),
        display: props.overflowOpen ? "block" : "none",
        visibility: "hidden"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarRadioGroupStyles.js
  var toolbarRadioGroupStyles = {
    root: function root109() {
      return {
        display: "flex",
        whiteSpace: "nowrap"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarCustomItemStyles.js
  var toolbarCustomItemStyles = {
    root: function root110(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      var colors2 = getColorScheme(v2.colorScheme);
      var borderWidth3 = siteVariables.borderWidth;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables
      });
      return Object.assign({
        position: "relative",
        backgroundColor: v2.background,
        borderColor: "transparent",
        borderWidth: borderWidth3,
        borderStyle: "solid",
        height: v2.itemHeight,
        color: v2.foreground || colors2.foreground1,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        userSelect: "none"
      }, p2.fitted !== true && p2.fitted !== "horizontally" && {
        paddingLeft: v2.customItemHorizontalPadding,
        paddingRight: v2.customItemHorizontalPadding
      }, p2.fitted !== true && p2.fitted !== "vertically" && {
        paddingTop: v2.customItemVerticalPadding,
        paddingBottom: v2.customItemVerticalPadding
      }, {
        ":focus": borderFocusStyles[":focus"],
        ":focus-visible": borderFocusStyles[":focus-visible"]
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarDividerStyles.js
  var toolbarDividerStyles = {
    root: function root111(_ref) {
      var v2 = _ref.variables;
      var colors2 = getColorScheme(v2.colorScheme);
      return {
        borderLeft: "1px solid " + (v2.dividerBorder || colors2.border),
        margin: v2.dividerMargin,
        alignSelf: "stretch"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarItemStyles.js
  var toolbarItemStyles = {
    root: function root112(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      var colors2 = getColorScheme(v2.colorScheme);
      var borderWidth3 = siteVariables.borderWidth;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables
      });
      return Object.assign({
        position: "relative",
        backgroundColor: v2.background,
        borderWidth: borderWidth3,
        borderStyle: "solid",
        borderColor: "transparent",
        borderRadius: v2.borderRadius,
        height: v2.itemHeight,
        minWidth: v2.itemHeight,
        padding: v2.itemPadding,
        color: v2.foreground || colors2.foreground1,
        cursor: "pointer",
        userSelect: "none",
        ":focus": borderFocusStyles[":focus"]
      }, p2.active && Object.assign({
        color: v2.foregroundActive || colors2.foregroundActive,
        backgroundColor: v2.backgroundActive
      }, getIconFillOrOutlineStyles({
        outline: false
      })), {
        ":hover": Object.assign({
          color: v2.foregroundHover || colors2.foregroundHover,
          backgroundColor: v2.backgroundHover || colors2.backgroundHover
        }, getIconFillOrOutlineStyles({
          outline: false
        })),
        ":focus-visible": borderFocusStyles[":focus-visible"]
      }, (p2.disabled || p2.disabledFocusable) && {
        color: v2.foregroundDisabled || colors2.foregroundDisabled1,
        backgroundColor: v2.backgroundDisabled,
        cursor: "default",
        ":hover": {
          // empty to overwrite all existing hover styles
        }
      }, p2.disabled && {
        // pointer events intentionally not disabled for focusable disabled toolbar items
        // so that hover events work
        pointerEvents: "none"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarMenuStyles.js
  var toolbarMenuStyles = {
    root: function root113(_ref) {
      var v2 = _ref.variables;
      var colors2 = getColorScheme(v2.colorScheme);
      return {
        display: "flex",
        flexDirection: "column",
        listStyleType: "none",
        margin: 0,
        padding: v2.menuPadding,
        backgroundColor: v2.menuBackground || colors2.background,
        boxShadow: v2.menuBoxShadow,
        borderStyle: "solid",
        borderColor: v2.menuBorder || colors2.border,
        borderWidth: v2.menuBorderWidth,
        borderRadius: v2.menuBorderRadius,
        maxWidth: v2.menuMaxWidth,
        zIndex: v2.overlayZIndex
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarMenuDividerStyles.js
  var toolbarMenuDividerStyles = {
    root: function root114(_ref) {
      var v2 = _ref.variables;
      var colors2 = getColorScheme(v2.colorScheme);
      return {
        borderTop: "1px solid " + (v2.menuDividerBorder || colors2.border),
        margin: v2.menuDividerMargin,
        alignSelf: "stretch"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/activeIndicatorUrl.js
  var activeIndicatorUrl3 = function activeIndicatorUrl4(color2) {
    return `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' fill='` + encodeURIComponent(color2) + `' focusable='false' view-box='8 8 16 16'%3E%3Cg%3E%3Cpath d='M23.5 11.875a.968.968 0 0 1-.289.711l-8.25 8.25c-.192.193-.43.289-.711.289s-.519-.096-.711-.289l-4.75-4.75a.965.965 0 0 1-.289-.711c0-.125.027-.25.082-.375s.129-.234.223-.328a.953.953 0 0 1 .695-.297c.135 0 .266.025.391.074.125.05.231.121.32.215l4.039 4.047 7.539-7.547a.886.886 0 0 1 .32-.215c.125-.049.255-.074.391-.074a1.004 1.004 0 0 1 .922.625.97.97 0 0 1 .078.375z' /%3E%3C/g%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Toolbar/ToolbarMenuItemSubmenuIndicator.js
  var toolbarMenuItemSubmenuIndicatorClassName = "ui-toolbar__menuitemsubmenuindicator";

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Toolbar/ToolbarMenuItemActiveIndicator.js
  var toolbarMenuItemActiveIndicatorClassName = "ui-toolbar__menuitemactiveindicator";

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarMenuItemStyles.js
  var toolbarMenuItemStyles = {
    root: function root115(_ref) {
      var _hover, _ref2;
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      var colors2 = getColorScheme(v2.colorScheme);
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables,
        borderRadius: 0
      });
      return Object.assign({
        position: "relative",
        color: v2.menuItemForeground || colors2.foreground1,
        borderWidth: v2.menuBorderWidth,
        backgroundColor: "transparent",
        borderColor: "transparent",
        display: "flex",
        alignItems: "center",
        textAlign: "left",
        width: "100%",
        maxWidth: "100%",
        padding: v2.menuItemPadding,
        cursor: "pointer",
        minHeight: v2.itemHeight,
        lineHeight: v2.lineHeightBase,
        userSelect: "none",
        ":focus": {
          outline: 0
        },
        ":hover": (_hover = {
          color: v2.menuItemForegroundHover || colors2.menuItemForegroundHover,
          backgroundColor: v2.menuItemBackgroundHover || colors2.menuItemBackgroundHover
        }, _hover["& ." + toolbarMenuItemSubmenuIndicatorClassName] = {
          color: v2.menuItemForegroundHover || colors2.menuItemForegroundHover
        }, _hover["& ." + toolbarMenuItemActiveIndicatorClassName] = {
          backgroundImage: activeIndicatorUrl3(v2.menuItemForegroundHover || colors2.menuItemForegroundHover)
        }, _hover),
        ":focus-visible": borderFocusStyles[":focus-visible"]
      }, (p2.disabled || p2.disabledFocusable) && (_ref2 = {
        cursor: "default",
        color: v2.menuItemForegroundDisabled || colors2.foregroundDisabled1,
        backgroundColor: v2.menuItemBackgroundDisabled
      }, _ref2["& ." + toolbarMenuItemSubmenuIndicatorClassName] = {
        color: v2.menuItemForegroundDisabled || colors2.foregroundDisabled1
      }, _ref2["& ." + toolbarMenuItemActiveIndicatorClassName] = {
        backgroundImage: activeIndicatorUrl3(v2.menuItemForegroundDisabled || colors2.foregroundDisabled1)
      }, _ref2[":hover"] = {
        // empty to overwrite all existing hover styles
      }, _ref2), p2.disabled && {
        // pointer events intentionally not disabled for focusable disabled toolbar items
        // so that hover events work
        pointerEvents: "none"
      });
    },
    wrapper: function wrapper() {
      return {
        display: "block"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarMenuItemIconStyles.js
  var toolbarMenuItemIconStyles = {
    root: function root116(_ref) {
      var p2 = _ref.props;
      return Object.assign({}, p2.hasContent && {
        marginRight: pxToRem(10),
        marginTop: pxToRem(3),
        display: "flex",
        alignSelf: "start"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarMenuItemSubmenuIndicatorStyles.js
  var toolbarMenuItemSubmenuIndicatorStyles = {
    root: function root117(_ref) {
      var v2 = _ref.variables;
      var colors2 = getColorScheme(v2.colorScheme);
      return {
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        color: v2.menuItemForeground || colors2.foreground1,
        width: pxToRem(16),
        height: "100%",
        position: "absolute",
        right: pxToRem(7),
        top: 0
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarMenuItemActiveIndicatorStyles.js
  var toolbarMenuItemActiveIndicatorStyles = {
    root: function root118(_ref) {
      var v2 = _ref.variables;
      var colors2 = getColorScheme(v2.colorScheme);
      return {
        backgroundImage: activeIndicatorUrl3(v2.menuItemForeground || colors2.foreground1),
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat",
        width: pxToRem(24),
        height: "100%",
        position: "absolute",
        right: pxToRem(7)
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarMenuRadioGroupStyles.js
  var toolbarMenuRadioGroupStyles = {
    root: function root119() {
      return {
        padding: 0
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Toolbar/toolbarMenuRadioGroupWrapperStyles.js
  var toolbarMenuRadioGroupWrapperStyles = {
    root: function root120() {
      return {};
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Tree/treeStyles.js
  var treeStyles = {
    root: function root121() {
      return {
        display: "block",
        paddingLeft: "" + pxToRem(10)
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Tree/TreeTitle.js
  var import_invoke15 = __toESM(require_invoke());
  var React207 = __toESM(require_react());
  var treeTitleClassName = "ui-tree__title";
  var treeTitleSlotClassNames = {
    indicator: treeTitleClassName + "__selection-indicator"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Tree/treeItemStyles.js
  var treeItemStyles = {
    root: function root122(_ref) {
      var _ref2, _ref3, _Object$assign;
      var siteVariables = _ref.theme.siteVariables, p2 = _ref.props;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables
      });
      return {
        listStyleType: "none",
        ":focus": Object.assign({}, p2.selectable && (_ref2 = {}, _ref2["& ." + treeTitleSlotClassNames.indicator] = {
          display: "inline-block"
        }, _ref2), borderFocusStyles[":focus"]),
        ":focus-visible": Object.assign({
          outline: 0
        }, p2.selectable && (_ref3 = {}, _ref3["& ." + treeTitleSlotClassNames.indicator] = {
          display: "inline-block"
        }, _ref3), (_Object$assign = {}, _Object$assign["> ." + treeTitleClassName] = Object.assign({
          position: "relative"
        }, borderFocusStyles[":focus-visible"]), _Object$assign))
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Tree/checkboxIndicatorIndeterminatedUrl.js
  var checkboxIndicatorIndeterminatedUrl = function checkboxIndicatorIndeterminatedUrl2(color2, backgroundColor) {
    return `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' style='background-color: ` + escape(backgroundColor) + "; padding: 2px;' focusable='false' viewBox='8 8 22.5 22.5'%3E%3Cg%3E%3Cpath fill='" + escape(color2) + `' d='M10 16v-1h12v1H10z 11.875a.968.968 0 0 1-.289.711l-8.25 8.25c-.192.193-.43.289-.711.289s-.519-.096-.711-.289l-4.75-4.75a.965.965 0 0 1-.289-.711c0-.125.027-.25.082-.375s.129-.234.223-.328a.953.953 0 0 1 .695-.297c.135 0 .266.025.391.074.125.05.231.121.32.215l4.039 4.047 7.539-7.547a.886.886 0 0 1 .32-.215c.125-.049.255-.074.391-.074a1.004 1.004 0 0 1 .922.625.97.97 0 0 1 .078.375z' /%3E%3C/g%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Tree/treeTitleStyles.js
  var treeTitleStyles = {
    root: function root123(_ref) {
      var _ref2, _ref3, _ref4;
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables
      });
      return Object.assign({
        padding: v2.padding,
        cursor: "pointer",
        color: v2.color,
        position: "relative",
        marginLeft: pxToRem(1 + (p2.level - 1) * 10),
        paddingRight: v2.paddingRight,
        paddingLeft: v2.paddingLeft,
        userSelect: "none"
      }, p2.selectable && {
        display: "flex",
        justifyContent: "space-between",
        alignItems: "center"
      }, {
        ":focus": Object.assign({}, p2.selectable && (_ref2 = {}, _ref2["> ." + treeTitleSlotClassNames.indicator] = {
          display: "inline-block"
        }, _ref2), borderFocusStyles[":focus"]),
        ":focus-visible": borderFocusStyles[":focus-visible"],
        ":hover": Object.assign({}, p2.selectable && (_ref3 = {
          background: v2.hoverBackground
        }, _ref3["> ." + treeTitleSlotClassNames.indicator] = {
          display: "inline-block"
        }, _ref3))
      }, p2.showIndicator && (_ref4 = {}, _ref4["> ." + treeTitleSlotClassNames.indicator] = {
        display: "inline-block"
      }, _ref4));
    },
    selectionIndicator: function selectionIndicator(_ref5) {
      var p2 = _ref5.props, v2 = _ref5.variables;
      return Object.assign({
        display: "none",
        float: "right",
        verticalAlign: "middle",
        boxShadow: "unset",
        width: pxToRem(16),
        height: pxToRem(16),
        borderColor: v2.borderColor,
        borderStyle: v2.borderStyle,
        borderRadius: v2.borderRadius,
        borderWidth: v2.borderWidth,
        color: v2.indicatorColor,
        margin: v2.selectionIndicatorMargin,
        padding: v2.padding,
        userSelect: "none",
        backgroundImage: checkboxIndicatorUrl(v2.indicatorColor, v2.background),
        backgroundPosition: "center",
        backgroundRepeat: "no-repeat"
      }, p2.selected && {
        borderColor: v2.checkedBorderColor,
        backgroundImage: checkboxIndicatorUrl(v2.checkedIndicatorColor, v2.checkedBackground)
      }, p2.indeterminate && {
        borderColor: v2.checkedBorderColor,
        backgroundImage: checkboxIndicatorIndeterminatedUrl(v2.checkedIndicatorColor, v2.checkedBackground)
      }, p2.disabled && {
        background: v2.disabledBackground,
        borderColor: v2.disabledBorderColor
      }, p2.disabled && p2.selected && {
        color: v2.disabledCheckedIndicatorColor,
        borderColor: v2.disabledBackgroundChecked,
        backgroundImage: checkboxIndicatorUrl(v2.disabledCheckedIndicatorColor, v2.disabledBackgroundChecked)
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Video/videoStyles.js
  var videoStyles = {
    root: function root124(_ref) {
      var v2 = _ref.variables;
      return {
        display: "inline-block",
        verticalAlign: "middle",
        width: v2.width,
        height: v2.height || "auto"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/pointerSvgUrl.js
  var pointerSvgUrl = function pointerSvgUrl2(backgroundColor) {
    return `url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='` + encodeURIComponent(backgroundColor) + `' viewBox='0 0 6 16'%3E%3Cpath d='M.708 9.527a2.002 2.002 0 0 1 0-3.055l3.284-2.78C5.324 2.562 5.991 1.332 5.991 0c0 1.002.02 15.013 0 16 0-1.333-.665-2.562-1.995-3.689L.708 9.527z' fill-rule='evenodd' clip-rule='evenodd'/%3E%3C/svg%3E%0A");`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Tooltip/tooltipContentStyles.js
  var tooltipContentStyles = {
    root: function root125(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        display: "none",
        position: "absolute",
        maxWidth: v2.maxWidth,
        zIndex: v2.zIndex
      }, p2.pointing && Object.assign({
        pointerEvents: "all"
      }, getContainerStyles({
        placement: p2.basePlacement,
        padding: v2.pointerMargin
      })), p2.open && {
        display: "block"
      });
    },
    pointer: function pointer2(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables, rtl2 = _ref2.rtl;
      return Object.assign({
        display: "block",
        position: "absolute",
        width: v2.pointerWidth,
        height: v2.pointerHeight
      }, getPointerStyles({
        backgroundColor: p2.subtle ? v2.subtleBackgroundColor : v2.backgroundColor,
        borderSize: v2.borderSize,
        borderColor: p2.subtle ? v2.subtleBorderColor : v2.borderColor,
        gap: v2.pointerGap,
        padding: v2.pointerMargin,
        height: v2.pointerHeight,
        width: v2.pointerWidth,
        placement: p2.basePlacement,
        rtl: rtl2,
        svg: v2.svgPointer ? pointerSvgUrl(p2.subtle ? v2.subtleBackgroundColor : v2.backgroundColor) : void 0
      }));
    },
    content: function content11(_ref3) {
      var p2 = _ref3.props, v2 = _ref3.variables;
      return Object.assign({
        display: "block",
        fontSize: pxToRem(12),
        padding: v2.padding,
        textAlign: "left",
        lineHeight: pxToRem(16),
        color: v2.color,
        background: v2.backgroundColor,
        borderRadius: v2.borderRadius,
        borderStyle: v2.borderStyle,
        borderColor: v2.borderColor,
        boxShadow: v2.boxShadow
      }, p2.subtle && {
        background: v2.subtleBackgroundColor,
        color: v2.subtleForegroundColor,
        borderStyle: "solid",
        borderWidth: v2.borderSize,
        borderColor: v2.subtleBorderColor
      }, p2.pointing && {
        pointerEvents: "all"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Carousel/carouselStyles.js
  var carouselStyles = {
    root: function root126() {
      return {
        display: "inline-block",
        position: "relative"
      };
    },
    itemsContainerWrapper: function itemsContainerWrapper(_ref) {
      var v2 = _ref.variables, p2 = _ref.props;
      return Object.assign({
        display: "flex",
        width: pxToRem(v2.width),
        overflowX: "hidden"
      }, p2.shouldFocusContainer && p2.isFromKeyboard && {
        border: "1px solid " + v2.focusOuterBorderColor,
        borderRadius: v2.focusOuterBorderRadius
      });
    },
    itemsContainer: function itemsContainer() {
      return {
        padding: 0,
        margin: 0,
        display: "flex",
        listStyle: "none",
        willChange: "transform"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Carousel/carouselItemStyles.js
  var carouselItemStyles = {
    root: function root127(_ref) {
      var v2 = _ref.variables;
      return {
        width: pxToRem(v2.width),
        marginBottom: pxToRem(16),
        ":focus": {
          outline: "none"
        }
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Carousel/carouselNavigationStyles.js
  var carouselNavigationStyles = {
    root: function root128(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var iconOnly = p2.iconOnly, primary = p2.primary, vertical = p2.vertical, thumbnails = p2.thumbnails;
      var colors2 = getColorScheme(v2.colorScheme, null, primary);
      var siteVariables = theme.siteVariables;
      return Object.assign({
        display: "flex",
        minHeight: pxToRem(24),
        margin: 0,
        padding: 0,
        color: v2.color,
        backgroundColor: v2.backgroundColor || "inherit",
        listStyleType: "none",
        justifyContent: "center",
        position: "relative",
        zIndex: 2
      }, !vertical && thumbnails && {
        justifyContent: "start",
        transform: "translateX(" + pxToRem(v2.width / 2 - v2.thumbnailWidth / 2 - +p2.activeIndex * v2.thumbnailWidth) + ")",
        transition: "transform .5s ease"
      }, iconOnly && {
        alignItems: "center"
      }, vertical && Object.assign({
        flexDirection: "column",
        backgroundColor: v2.verticalBackgroundColor,
        width: "fit-content",
        padding: pxToRem(8) + " 0"
      }, iconOnly && {
        display: "inline-block",
        width: "auto"
      }), !iconOnly && !vertical && {
        // primary has hardcoded grey border color
        border: v2.borderWidth + " solid " + (primary ? v2.primaryBorderColor : v2.borderColor || colors2.border),
        borderRadius: siteVariables.borderRadiusMedium
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Carousel/CarouselNavigationItem.js
  var import_invoke16 = __toESM(require_invoke());
  var React208 = __toESM(require_react());
  var carouselNavigationItemClassName = "ui-carousel__navigationitem";
  var carouselNavigationItemSlotClassNames = {
    indicator: carouselNavigationItemClassName + "__indicator",
    content: carouselNavigationItemClassName + "__content"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Carousel/carouselNavigationItemStyles.js
  var carouselNavigationItemStyles = {
    root: function root129(_ref) {
      var _Object$assign;
      var p2 = _ref.props, v2 = _ref.variables;
      var active = p2.active, iconOnly = p2.iconOnly, primary = p2.primary, vertical = p2.vertical, thumbnails = p2.thumbnails, disableClickableNav = p2.disableClickableNav;
      var colors2 = getColorScheme(v2.colorScheme, null, primary);
      return Object.assign({
        color: "inherit",
        display: "block",
        cursor: "pointer",
        whiteSpace: "nowrap"
      }, iconOnly && {
        border: pxToRem(2) + " solid transparent"
      }, vertical ? {
        padding: v2.verticalItemPadding
      } : {
        padding: v2.horizontalPadding
      }, iconOnly && {
        margin: pxToRem(1),
        padding: pxToRem(5),
        // padding works this way to get the border to only be 30x30px on focus which is the current design
        display: "flex",
        alignItems: "center",
        justifyContent: "center"
      }, active && iconOnly && Object.assign({
        color: v2.iconOnlyColorActive
      }, getIconFillOrOutlineStyles({
        outline: false
      })), {
        // focus styles
        ":focus-visible": Object.assign({}, iconOnly && Object.assign({
          borderRadius: "50%"
        }, thumbnails && {
          borderRadius: "0"
        }, {
          borderColor: v2.iconOnlyColorActive
        }, getIconFillOrOutlineStyles({
          outline: false
        })))
      }, iconOnly && primary && {
        color: "inherit",
        borderColor: v2.borderColorActive || colors2.borderActive
      }, disableClickableNav && {
        cursor: "default"
      }, {
        ":focus": {
          outline: 0
        },
        // hover styles
        ":hover": Object.assign((_Object$assign = {
          color: "inherit"
        }, _Object$assign["& ." + carouselNavigationItemSlotClassNames.indicator] = {
          background: v2.indicatorBackgroundColor
        }, _Object$assign), iconOnly && getIconFillOrOutlineStyles({
          outline: false
        }), primary && iconOnly && {
          color: "inherit"
        })
      });
    },
    content: function content12(_ref2) {
      var p2 = _ref2.props;
      var widthAdjust = p2.hasIndicator ? 26 : 0;
      return Object.assign({
        whiteSpace: "normal",
        lineHeight: 1.5,
        marginTop: pxToRem(-4),
        marginBottom: pxToRem(-4),
        display: "inline-block"
      }, p2.thumbnails && Object.assign({
        width: pxToRem(60)
      }, !p2.active && {
        opacity: 0.4
      }), p2.vertical && {
        width: "max-content",
        minWidth: pxToRem(46 - widthAdjust),
        maxWidth: pxToRem(262 - widthAdjust),
        marginRight: pxToRem(16)
      });
    },
    indicator: function indicator4(_ref3) {
      var p2 = _ref3.props, v2 = _ref3.variables;
      return Object.assign({
        borderRadius: "50%",
        width: pxToRem(7),
        height: pxToRem(7),
        background: v2.indicatorBackgroundColor
      }, p2.active && {
        background: v2.indicatorActiveBackgroundColor
      }, p2.hasContent && {
        marginRight: pxToRem(10)
      }, !p2.iconOnly && {
        // reduce margins so text has the dominant influence on the vertical height
        marginTop: 0,
        marginBottom: pxToRem(-8),
        verticalAlign: "top"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Carousel/CarouselPaddle.js
  var import_invoke17 = __toESM(require_invoke());
  var React209 = __toESM(require_react());
  var carouselPaddleClassName = "ui-carousel__paddle";
  var carouselPaddleSlotClassNames = {
    content: carouselPaddleClassName + "__content"
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Carousel/paddleIndicatorUrl.js
  var paddleIndicatorUrl = function paddleIndicatorUrl2(color2, next2) {
    return next2 ? `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' focusable='false' viewBox='8 8 16 16'%3E%3Cg%3E%3Cpath fill='` + encodeURIComponent(color2) + `' d='M21.5 15.97c0 .28-.1.52-.29.71l-7 7c-.19.19-.43.29-.71.29-.14 0-.26-.03-.38-.08s-.23-.13-.32-.22-.16-.2-.22-.32a1.036 1.036 0 0 1-.01-.77c.05-.12.12-.23.21-.32l6.3-6.29-6.3-6.29a.85.85 0 0 1-.21-.32c-.05-.13-.07-.26-.07-.39a.995.995 0 0 1 .3-.7c.09-.09.2-.16.32-.22.12-.05.24-.08.38-.08.28 0 .52.1.71.29l7 7c.19.19.29.43.29.71z' /%3E%3C/g%3E%3C/svg%3E")` : `url("data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' role='presentation' focusable='false' viewBox='8 8 16 16'%3E%3Cg%3E%3Cpath fill='` + encodeURIComponent(color2) + `' d='M19.5 8.97c0 .14-.03.27-.07.39-.05.12-.12.23-.21.32l-6.3 6.29 6.3 6.29c.09.09.17.2.21.32a1.036 1.036 0 0 1-.01.77c-.05.12-.13.23-.22.32s-.2.16-.32.22a.995.995 0 0 1-1.09-.21l-7-7c-.19-.19-.29-.43-.29-.71s.1-.52.29-.71l7-7a.995.995 0 0 1 1.09-.21c.12.06.23.13.32.22s.16.2.22.32c.05.12.08.25.08.38z' /%3E%3C/g%3E%3C/svg%3E")`;
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Carousel/carouselPaddleStyles.js
  var getIndicatorStyles5 = function getIndicatorStyles6(color2, next2, size) {
    return {
      width: size,
      height: size,
      backgroundImage: paddleIndicatorUrl(color2, next2),
      backgroundRepeat: "no-repeat"
    };
  };
  var carouselPaddleStyles = {
    root: function root130(_ref) {
      var _Object$assign;
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var siteVariables = theme.siteVariables;
      var borderWidth3 = siteVariables.borderWidth;
      var borderFocusStyles = getBorderFocusStyles({
        variables: {
          borderRadius: v2.focusBorderRadius,
          borderWidth: v2.focusBorderWidth,
          focusInnerBorderColor: v2.focusInnerBorderColor,
          focusOuterBorderColor: v2.focusOuterBorderColor,
          zIndexes: {
            foreground: v2.focusBorderZIndex
          }
        },
        borderPadding: borderWidth3
      });
      return Object.assign({
        height: v2.paddleHeight,
        minWidth: v2.paddleHeight,
        color: v2.paddleColor,
        backgroundColor: v2.paddleBackgroundColor,
        borderRadius: v2.paddleBorderRadius,
        border: 0,
        display: "inline-flex",
        justifyContent: "center",
        alignItems: "center",
        position: "relative",
        verticalAlign: "middle",
        cursor: "pointer",
        marginBottom: pxToRem(40),
        outline: 0,
        padding: 0,
        transition: faster,
        zIndex: 1
      }, p2.hidden && {
        visibility: "hidden"
      }, p2.disableClickableNav && {
        cursor: "default"
      }, {
        ":hover": Object.assign({}, getIconFillOrOutlineStyles({
          outline: false
        }), (_Object$assign = {}, _Object$assign["& ." + carouselPaddleSlotClassNames.content] = Object.assign({}, getIndicatorStyles5(v2.paddleColor, p2.next, v2.paddleIndicatorSize)), _Object$assign.background = v2.paddleBackgroundColorHover, _Object$assign)),
        ":active": {
          transition: ultraFast,
          backgroundColor: v2.paddleBackgroundColorActive
        },
        ":focus": borderFocusStyles[":focus"],
        ":focus-visible": Object.assign({}, borderFocusStyles[":focus-visible"])
      }, p2.disabled && {
        cursor: "default",
        color: v2.paddleColorDisabled,
        pointerEvents: "none",
        ":hover": {
          color: v2.paddleColorDisabled
        },
        backgroundColor: v2.paddleBackgroundColorDisabled
      });
    },
    content: function content13(_ref2) {
      var p2 = _ref2.props, v2 = _ref2.variables, rtl2 = _ref2.rtl;
      return Object.assign({}, getIndicatorStyles5(p2.disabled ? v2.paddleColorDisabled : v2.paddleColor, p2.next, v2.paddleIndicatorSize), rtl2 && {
        transform: "scaleX(-1)"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Carousel/carouselPaddlesContainerStyles.js
  var carouselPaddlesContainerStyles = {
    root: function root131(_ref) {
      var v2 = _ref.variables;
      return {
        display: "flex",
        width: pxToRem(v2.width),
        justifyContent: "space-between",
        alignItems: "center",
        position: "absolute",
        top: 0,
        right: 0,
        left: 0,
        bottom: 0
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Table/tableStyles.js
  var tableStyles = {
    root: function root132(_ref) {
      var v2 = _ref.variables;
      return {
        display: "flex",
        flexDirection: "column",
        background: v2.backgroundColor
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Table/tableRowStyles.js
  var tableRowStyles = {
    root: function root133(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables
      });
      return Object.assign({
        display: "flex",
        flexDirection: "row",
        alignItems: "center",
        fontSize: v2.bodyFontSize,
        height: v2.defaultRowHeight,
        color: v2.color,
        backgroundColor: v2.backgroundColor,
        borderWidth: v2.borderWidth,
        borderStyle: "solid",
        borderColor: "transparent",
        borderBottomColor: v2.rowBorderColor,
        padding: v2.rowPadding,
        position: "relative",
        width: "100%",
        ":hover": {
          color: v2.hoverColor,
          backgroundColor: v2.backgroundHoverColor,
          borderColor: v2.rowBorderHoverColor
        }
      }, borderFocusStyles, p2.header && {
        fontSize: v2.headerFontSize,
        ":hover": {
          color: v2.color,
          backgroundColor: v2.backgroundColor
        }
      }, p2.compact && {
        height: v2.compactRowHeight
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Table/tableCellStyles.js
  var tableCellStyles = {
    root: function root134(_ref) {
      var v2 = _ref.variables, siteVariables = _ref.theme.siteVariables;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables
      });
      return Object.assign({
        display: "flex",
        flexFlow: "row nowrap",
        flexGrow: 1,
        flexBasis: 0,
        minWidth: v2.minCellWidth,
        outline: 0,
        borderWidth: v2.borderWidth,
        borderStyle: "solid",
        borderColor: "transparent"
      }, borderFocusStyles, {
        padding: v2.cellPadding,
        position: "relative",
        height: "100%"
      });
    },
    content: function content14(_ref2) {
      var p2 = _ref2.props;
      return Object.assign({
        alignSelf: "center"
      }, p2.truncateContent && {
        display: "block",
        overflow: "hidden",
        textOverflow: "ellipsis",
        whiteSpace: "nowrap"
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Card/CardExpandableBox.js
  var cardExpandableBoxClassName = "ui-card__expandablebox";

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Card/cardStyles.js
  var cardStyles = {
    root: function root135(_ref) {
      var _ref2;
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var siteVariables = theme.siteVariables;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables,
        borderRadius: v2.borderRadius
      });
      return Object.assign({
        display: "flex",
        flexDirection: "column",
        position: "relative",
        padding: v2.padding,
        margin: v2.margin,
        width: v2.width,
        height: v2.height,
        borderWidth: v2.borderWidth,
        borderStyle: v2.borderStyle,
        borderColor: v2.borderColor,
        borderRadius: v2.borderRadius,
        backgroundColor: v2.backgroundColor
      }, p2.ghost && {
        backgroundColor: v2.ghostBackgroundColor
      }, p2.inverted && {
        backgroundColor: v2.invertedBackgroundColor
      }, p2.selected && {
        backgroundColor: v2.selectedBackgroundColor
      }, {
        boxShadow: v2.boxShadow
      }, p2.elevated && {
        boxShadow: v2.elevatedBoxShadow
      }, {
        ":hover": Object.assign({
          backgroundColor: v2.backgroundColorHover
        }, p2.ghost && {
          backgroundColor: v2.ghostBackgroundColorHover
        }, p2.inverted && {
          backgroundColor: v2.invertedBackgroundColorHover
        }, p2.selected && {
          backgroundColor: v2.selectedBackgroundColorHover
        }, {
          borderColor: v2.borderColorHover,
          boxShadow: v2.boxShadowHover
        }, p2.elevated && {
          boxShadow: v2.elevatedBoxShadowHover
        })
      }, borderFocusStyles, p2.actionable && {
        cursor: "pointer",
        ":focus-visible": Object.assign({
          backgroundColor: v2.backgroundColorFocus
        }, p2.ghost && {
          backgroundColor: v2.ghostBackgroundColorFocus
        }, p2.inverted && {
          backgroundColor: v2.invertedBackgroundColorFocus
        }, p2.selected && {
          backgroundColor: v2.selectedBackgroundColorFocus
        }, {
          boxShadow: v2.boxShadowFocus
        }, p2.elevated && {
          boxShadow: v2.elevatedBoxShadowFocus
        }, borderFocusStyles[":focus-visible"]),
        ":active": Object.assign({
          backgroundColor: v2.backgroundColorPressed
        }, p2.ghost && {
          backgroundColor: v2.ghostBackgroundColorPressed
        }, p2.inverted && {
          backgroundColor: v2.invertedBackgroundColorPressed
        }, p2.selected && {
          backgroundColor: v2.selectedBackgroundColorPressed
        }, {
          borderColor: v2.borderColorPressed,
          boxShadow: v2.boxShadowPressed
        }, p2.elevated && {
          boxShadow: v2.elevatedBoxShadowPressed
        })
      }, p2.size === "small" && {
        width: v2.sizeSmallWidth,
        height: v2.sizeSmallHeight,
        padding: v2.sizeSmallPadding
      }, p2.size === "large" && {
        width: v2.sizeLargeWidth,
        height: v2.sizeLargeHeight,
        padding: v2.sizeLargePadding
      }, p2.fluid && {
        width: v2.fluidWidth,
        height: v2.fluidHeight
      }, p2.horizontal && {
        flexDirection: "row"
      }, p2.compact && {
        padding: v2.compactPadding
      }, p2.centered && {
        alignItems: "center"
      }, p2.disabled && Object.assign({
        cursor: "not-allowed",
        color: v2.colorDisabled,
        backgroundColor: v2.backgroundColorDisabled,
        borderColor: v2.borderColorDisabled,
        boxShadow: v2.boxShadowDisabled
      }, p2.inverted && {
        backgroundColor: v2.invertedBackgroundColorDisabled
      }, p2.ghost && {
        backgroundColor: v2.ghostBackgroundColorDisabled
      }, p2.selected && {
        backgroundColor: v2.selectedBackgroundColorDisabled
      }, {
        ":hover": {
          boxShadow: v2.boxShadowDisabled
        },
        ":focus-visible": Object.assign({
          boxShadow: v2.boxShadowDisabled
        }, borderFocusStyles[":focus-visible"]),
        ":active": {
          boxShadow: v2.boxShadowDisabled
        }
      }), p2.expandable && (_ref2 = {}, _ref2["& ." + cardExpandableBoxClassName] = {
        maxHeight: v2.expandableBoxStartMaxHeight,
        transition: v2.expandableBoxExpandTransition,
        overflow: "hidden"
      }, _ref2["&:hover ." + cardExpandableBoxClassName] = {
        maxHeight: v2.expandableBoxEndMaxHeight,
        transition: v2.expandableBoxExpandTransition
      }, _ref2["&:focus ." + cardExpandableBoxClassName] = {
        maxHeight: v2.expandableBoxEndMaxHeight,
        transition: v2.expandableBoxExpandTransition
      }, _ref2));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Card/cardHeaderStyles.js
  var cardHeaderStyles = {
    root: function root136(_ref) {
      var v2 = _ref.variables, p2 = _ref.props;
      return Object.assign({
        display: "flex",
        flexDirection: "column",
        margin: v2.headerMargin
      }, p2.fitted && {
        margin: v2.fittedHeaderMargin
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Card/cardBodyStyles.js
  var cardBodyStyles = {
    root: function root137(_ref) {
      var v2 = _ref.variables, p2 = _ref.props;
      return Object.assign({
        display: "flex",
        flexDirection: "column",
        margin: v2.bodyMargin
      }, p2.fitted && {
        margin: v2.fittedBodyMargin
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Card/cardFooterStyles.js
  var cardFooterStyles = {
    root: function root138(_ref) {
      var v2 = _ref.variables, p2 = _ref.props;
      return Object.assign({
        display: "flex",
        flexDirection: "column",
        margin: v2.footerMargin
      }, p2.fitted && {
        margin: v2.fittedFooterMargin
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Card/cardPreviewStyles.js
  var cardPreviewStyles = {
    root: function root139(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        margin: v2.previewMargin
      }, p2.horizontal && {
        margin: v2.previewMarginHorizontal
      }, p2.fitted && {
        margin: v2.fittedPreviewMargin
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Card/cardTopControlsStyles.js
  var cardTopControlsStyles = {
    root: function root140(_ref) {
      var v2 = _ref.variables;
      return {
        position: "absolute",
        top: v2.topControlsTop,
        right: v2.topControlsRight
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Card/cardExpandableBoxStyles.js
  var cardExpandableBoxStyles = {
    root: function root141() {
      return {
        display: "flex"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Datepicker/datepickerStyles.js
  var datepickerStyles = {
    root: function root142(_ref) {
      var _ref2;
      var p2 = _ref.props;
      return Object.assign({}, !p2.allowManualInput && (_ref2 = {}, _ref2["& ." + inputSlotClassNames.input] = {
        cursor: "pointer"
      }, _ref2));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Datepicker/datepickerCalendarStyles.js
  var datepickerCalendarStyles = {
    root: function root143(_ref) {
      var v2 = _ref.variables;
      return {
        minHeight: v2.calendarMinHeight
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Datepicker/datepickerCalendarHeaderStyles.js
  var datepickerCalendarHeaderStyles = {
    root: function root144(_ref) {
      var v2 = _ref.variables;
      return {
        display: "flex",
        alignItems: "center",
        paddingTop: v2.calendarHeaderPaddingTop,
        paddingBottom: v2.calendarHeaderPaddingBottom
      };
    },
    label: function label5(_ref2) {
      var v2 = _ref2.variables;
      return {
        fontWeight: v2.calendarHeaderLabelFontWeight,
        flexGrow: 1,
        paddingLeft: v2.calendarHeaderLabelPaddingLeft
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Datepicker/datepickerCalendarHeaderCellStyles.js
  var datepickerCalendarHeaderCellStyles = {
    root: function root145(_ref) {
      var v2 = _ref.variables;
      return {
        textAlign: "center",
        verticalAlign: "middle",
        fontWeight: v2.calendarHeaderCellFontWeight,
        height: v2.calendarHeaderCellHeight,
        width: v2.calendarHeaderCellWidth,
        padding: v2.calendarHeaderCellPadding,
        display: "table-cell"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Datepicker/datepickerCalendarCellStyles.js
  var datepickerCalendarCellStyles = {
    root: function root146(_ref) {
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({
        height: v2.calendarCellHeight,
        width: v2.calendarCellWidth,
        padding: v2.calendarCellPadding,
        ":hover": {
          backgroundColor: v2.calendarCellHoverBackgroundColor,
          color: v2.calendarCellHoverColor
        }
      }, p2.quiet && {
        color: v2.calendarCellQuietColor
      }, p2.selected && {
        color: v2.calendarCellSelectedColor,
        backgroundColor: v2.calendarCellSelectedBackgroundColor
      }, p2.disabled && {
        color: v2.calendarCellDisabledColor,
        cursor: "default",
        backgroundColor: v2.calendarCellDisabledBackgroundColor,
        ":hover": {}
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Datepicker/datepickerCalendarCellButtonStyles.js
  var datepickerCalendarCellButtonStyles = {
    root: function root147(_ref) {
      var p2 = _ref.props, v2 = _ref.variables, theme = _ref.theme;
      var siteVariables = theme.siteVariables;
      var borderWidth3 = siteVariables.borderWidth;
      var borderFocusStyles = getBorderFocusStyles({
        variables: siteVariables,
        borderPadding: borderWidth3
      });
      return Object.assign({
        textAlign: "center",
        height: "100%",
        width: "100%",
        cursor: "pointer",
        border: v2.calendarCellBorder,
        padding: v2.calendarCellPadding,
        margin: v2.calendarCellMargin,
        display: "table-cell",
        position: "relative"
      }, borderFocusStyles, {
        backgroundColor: v2.calendarCellBackgroundColor,
        color: v2.calendarCellColor,
        ":hover": {
          backgroundColor: v2.calendarCellHoverBackgroundColor,
          color: v2.calendarCellHoverColor
        }
      }, p2.quiet && {
        color: v2.calendarCellQuietColor
      }, p2.selected && {
        color: v2.calendarCellSelectedColor,
        backgroundColor: v2.calendarCellSelectedBackgroundColor
      }, p2.disabled && {
        color: v2.calendarCellDisabledColor,
        cursor: "default",
        backgroundColor: v2.calendarCellDisabledBackgroundColor,
        ":hover": {}
      }, p2.today && {
        backgroundColor: v2.calendarCellTodayBackgroundColor,
        color: v2.calendarCellTodayColor,
        borderRadius: v2.calendarCellTodayBorderRadius
      });
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Datepicker/datepickerCalendarGridStyles.js
  var datepickerCalendarGridStyles = {
    root: function root148() {
      return {
        "border-spacing": "0rem",
        tableLayout: "fixed"
      };
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Datepicker/DatepickerCalendarCellButton.js
  var import_invoke18 = __toESM(require_invoke());
  var React211 = __toESM(require_react());
  var datepickerCalendarCellButtonClassName = "ui-datepicker__calendarcellbutton";

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/components/Datepicker/datepickerCalendarGridRowStyles.js
  var datepickerCalendarGridRowStyles = {
    root: function root149(_ref) {
      var _ref2;
      var p2 = _ref.props, v2 = _ref.variables;
      return Object.assign({}, p2.isRowSelectionActive && (_ref2 = {}, _ref2[":hover ." + datepickerCalendarCellButtonClassName] = {
        backgroundColor: v2.calendarCellHoverBackgroundColor,
        color: v2.calendarCellHoverColor
      }, _ref2));
    }
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/fontFaces.js
  var fontFaces = [{
    name: "Segoe UI",
    paths: ["https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets/fonts/segoeui-westeuropean/segoeui-regular.woff2"],
    props: {
      fontWeight: 400
    }
  }, {
    name: "Segoe UI",
    paths: ["https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets/fonts/segoeui-westeuropean/segoeui-semibold.woff2"],
    props: {
      fontWeight: 600
    }
  }, {
    name: "Segoe UI",
    paths: ["https://res-1.cdn.office.net/files/fabric-cdn-prod_20221209.001/assets/fonts/segoeui-westeuropean/segoeui-bold.woff2"],
    props: {
      fontWeight: 700
    }
  }];

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/staticStyles/globalStyles.js
  var globalStyles = function globalStyles2(siteVars) {
    return {
      body: {
        padding: siteVars.bodyPadding,
        margin: siteVars.bodyMargin,
        fontFamily: siteVars.bodyFontFamily,
        fontSize: siteVars.bodyFontSize,
        lineHeight: siteVars.bodyLineHeight
      },
      "*": {
        boxSizing: "border-box"
      },
      "*:before": {
        boxSizing: "border-box"
      },
      "*:after": {
        boxSizing: "border-box"
      },
      /* Adding priority for HTML `hidden` attribute to be applied correctly */
      "[hidden]": {
        display: "none!important"
      }
    };
  };

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/staticStyles/normalizeCSS.js
  var normalizeCSS = "/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}";

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/staticStyles/index.js
  var staticStyles = [normalizeCSS, globalStyles];

  // ../node_modules/@fluentui/react-northstar/dist/es/themes/teams/index.js
  var teamsTheme = createTheme2({
    siteVariables: siteVariables_exports,
    componentVariables: componentVariables_exports,
    componentStyles: componentStyles_exports,
    fontFaces,
    staticStyles,
    animations
  }, "teams");

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Provider/Provider.js
  var import_noop = __toESM(require_noop());
  var import_isBoolean = __toESM(require_isBoolean());
  var import_isFunction2 = __toESM(require_isFunction());
  var import_forEach2 = __toESM(require_forEach());
  var import_isPlainObject4 = __toESM(require_isPlainObject());
  var PropTypes3 = __toESM(require_prop_types());
  var React213 = __toESM(require_react());

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Provider/ProviderConsumer.js
  var PropTypes2 = __toESM(require_prop_types());
  var React212 = __toESM(require_react());
  var ProviderConsumer = /* @__PURE__ */ function() {
    var ProviderConsumer2 = function ProviderConsumer3(props) {
      var render2 = props.render;
      var context = useFluentContext();
      return /* @__PURE__ */ React212.createElement(React212.Fragment, null, render2(context.theme));
    };
    ProviderConsumer2.displayName = "ProviderConsumer";
    ProviderConsumer2.propTypes = {
      render: PropTypes2.func.isRequired
    };
    return ProviderConsumer2;
  }();

  // ../node_modules/@fluentui/react-northstar/dist/es/components/Provider/Provider.js
  var renderFontFaces = function renderFontFaces2(renderer, theme) {
    if (!theme.fontFaces) {
      return;
    }
    var renderFontObject = function renderFontObject2(font) {
      if (!(0, import_isPlainObject4.default)(font)) {
        throw new Error("fontFaces must be objects, got: " + typeof font);
      }
      renderer.renderFont(font);
    };
    theme.fontFaces.forEach(function(font) {
      renderFontObject(font);
    });
  };
  var renderStaticStyles = function renderStaticStyles2(renderer, theme, siteVariables) {
    if (!theme.staticStyles) {
      return;
    }
    var renderObject = function renderObject2(object2) {
      (0, import_forEach2.default)(object2, function(style, selector) {
        renderer.renderGlobal(style, selector);
      });
    };
    theme.staticStyles.forEach(function(staticStyle) {
      if (typeof staticStyle === "string") {
        renderer.renderGlobal(staticStyle);
      } else if ((0, import_isPlainObject4.default)(staticStyle)) {
        renderObject(staticStyle);
      } else if ((0, import_isFunction2.default)(staticStyle)) {
        var preparedSiteVariables = mergeSiteVariables(void 0, siteVariables);
        renderObject(staticStyle(preparedSiteVariables));
      } else {
        throw new Error("staticStyles array must contain CSS strings, style objects, or style functions, got: " + typeof staticStyle);
      }
    });
  };
  var providerClassName = "ui-provider";
  var Provider2 = /* @__PURE__ */ function() {
    var Provider3 = function Provider4(props) {
      var children = props.children, className = props.className, design = props.design, overwrite = props.overwrite, styles2 = props.styles, variables = props.variables, telemetryRef = props.telemetryRef;
      var ElementType2 = getElementType(props);
      var unhandledProps = useUnhandledProps(Provider4.handledProps, props);
      var rendersReactFragment = ElementType2 === React213.Fragment;
      var telemetry = React213.useMemo(function() {
        if (!telemetryRef) {
          return void 0;
        }
        if (!telemetryRef.current) {
          telemetryRef.current = new Telemetry();
        }
        return telemetryRef.current;
      }, [telemetryRef]);
      var consumedContext = useFluentContext();
      var incomingContext = overwrite ? defaultContextValue3 : consumedContext;
      var createRenderer2 = React213.useContext(RendererContext2);
      var inputContext = React213.useMemo(function() {
        return {
          disableAnimations: props.disableAnimations,
          performance: props.performance,
          rtl: props.rtl,
          target: props.target,
          telemetry,
          theme: props.theme
        };
      }, [props.disableAnimations, props.performance, props.rtl, props.target, telemetry, props.theme]);
      var outgoingContext = React213.useMemo(function() {
        return mergeProviderContexts(createRenderer2, incomingContext, inputContext);
      }, [createRenderer2, incomingContext, inputContext]);
      var rtlProps = {};
      if (consumedContext.rtl !== outgoingContext.rtl && (0, import_isBoolean.default)(outgoingContext.rtl)) {
        rtlProps.dir = outgoingContext.rtl ? "rtl" : "ltr";
      }
      var _ref = rendersReactFragment ? {
        classes: {
          root: ""
        }
      } : getStyles13({
        allDisplayNames: [Provider4.displayName],
        className: providerClassName,
        primaryDisplayName: Provider4.displayName,
        componentProps: {},
        inlineStylesProps: {
          className,
          design,
          styles: styles2,
          variables
        },
        disableAnimations: outgoingContext.disableAnimations,
        performance: outgoingContext.performance,
        renderer: outgoingContext.renderer,
        rtl: outgoingContext.rtl,
        theme: outgoingContext.theme,
        saveDebug: import_noop.default,
        telemetry: void 0
      }), classes = _ref.classes;
      var portalContextValue = React213.useMemo(function() {
        return {
          className: classes.root
        };
      }, [classes.root]);
      var RenderProvider = outgoingContext.renderer.Provider;
      useIsomorphicLayoutEffect4(function() {
        renderFontFaces(outgoingContext.renderer, props.theme);
        renderStaticStyles(outgoingContext.renderer, props.theme, outgoingContext.theme.siteVariables);
        if (props.target) {
          setUpWhatInput(props.target);
        }
        outgoingContext.renderer.registerUsage();
        return function() {
          if (props.target) {
            tryCleanupWhatInput(props.target);
          }
          outgoingContext.renderer.unregisterUsage();
        };
      }, []);
      if (rendersReactFragment) {
        return /* @__PURE__ */ React213.createElement(RenderProvider, {
          target: outgoingContext.target
        }, /* @__PURE__ */ React213.createElement(Unstable_FluentContextProvider, {
          value: outgoingContext
        }, /* @__PURE__ */ React213.createElement(React213.Fragment, null, children)));
      }
      return /* @__PURE__ */ React213.createElement(RenderProvider, {
        target: outgoingContext.target
      }, /* @__PURE__ */ React213.createElement(Unstable_FluentContextProvider, {
        value: outgoingContext
      }, /* @__PURE__ */ React213.createElement(PortalContext.Provider, {
        value: portalContextValue
      }, /* @__PURE__ */ React213.createElement(ElementType2, _extends({
        className: classes.root
      }, rtlProps, unhandledProps), children))));
    };
    Provider3.displayName = "Provider";
    Provider3.defaultProps = {
      theme: {}
    };
    Provider3.propTypes = {
      as: PropTypes3.elementType,
      design: PropTypes3.object,
      variables: PropTypes3.oneOfType([PropTypes3.object, PropTypes3.func]),
      styles: PropTypes3.oneOfType([PropTypes3.object, PropTypes3.func]),
      theme: PropTypes3.shape({
        siteVariables: PropTypes3.object,
        componentVariables: PropTypes3.object,
        componentStyles: PropTypes3.objectOf(PropTypes3.any),
        fontFaces: PropTypes3.arrayOf(PropTypes3.exact({
          name: PropTypes3.string.isRequired,
          paths: PropTypes3.arrayOf(PropTypes3.string),
          props: PropTypes3.shape({
            fontStretch: PropTypes3.string,
            fontStyle: PropTypes3.string,
            fontVariant: PropTypes3.string,
            fontWeight: PropTypes3.number,
            localAlias: PropTypes3.oneOfType([PropTypes3.string, PropTypes3.arrayOf(PropTypes3.string)]),
            unicodeRange: PropTypes3.string
          })
        })),
        staticStyles: PropTypes3.array,
        animations: PropTypes3.objectOf(PropTypes3.any)
      }),
      rtl: PropTypes3.bool,
      disableAnimations: PropTypes3.bool,
      // Heads Up!
      // Keep in sync with packages/react-bindings/src/styles/types.ts
      performance: PropTypes3.shape({
        enableSanitizeCssPlugin: PropTypes3.bool,
        enableStylesCaching: PropTypes3.bool,
        enableVariablesCaching: PropTypes3.bool
      }),
      children: PropTypes3.node.isRequired,
      overwrite: PropTypes3.bool,
      target: PropTypes3.object,
      telemetryRef: PropTypes3.object
    };
    Provider3.handledProps = Object.keys(Provider3.propTypes);
    Provider3.Consumer = ProviderConsumer;
    return Provider3;
  }();

  // src/index.tsx
  var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
  window.React = import_react63.default;
  new EventSource("/esbuild").addEventListener("change", () => location.reload());
  var root150 = import_client.default.createRoot(document.getElementById("root"));
  root150.render(
    /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(import_react63.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Provider2, { theme: teamsTheme, children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(App, {}) }) })
  );
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (** @license React v0.20.0
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

is-buffer/index.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

classnames/index.js:
  (*!
  	Copyright (c) 2018 Jed Watson.
  	Licensed under the MIT License (MIT), see
  	http://jedwatson.github.io/classnames
  *)

isobject/index.js:
  (*!
   * isobject <https://github.com/jonschlinkert/isobject>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

keyborg/dist/keyborg.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

keyborg/dist/keyborg.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

tabster/dist/tabster.esm.js:
  (*!
   * Copyright (c) Microsoft Corporation. All rights reserved.
   * Licensed under the MIT License.
   *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.8.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.15.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.15.0
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)
*/
//# sourceMappingURL=index.js.map

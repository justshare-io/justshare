// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file api.proto (package lunabrain, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum lunabrain.ContentType
 */
export enum ContentType {
  /**
   * @generated from enum value: TEXT = 0;
   */
  TEXT = 0,

  /**
   * @generated from enum value: AUDIO = 1;
   */
  AUDIO = 1,

  /**
   * @generated from enum value: URL = 2;
   */
  URL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ContentType)
proto3.util.setEnumType(ContentType, "lunabrain.ContentType", [
  { no: 0, name: "TEXT" },
  { no: 1, name: "AUDIO" },
  { no: 2, name: "URL" },
]);

/**
 * Should be in its own file
 *
 * @generated from enum lunabrain.NormalizerID
 */
export enum NormalizerID {
  /**
   * @generated from enum value: URL_YOUTUBE_TRANSCRIPT = 0;
   */
  URL_YOUTUBE_TRANSCRIPT = 0,

  /**
   * @generated from enum value: URL_ARTICLE = 1;
   */
  URL_ARTICLE = 1,

  /**
   * @generated from enum value: URL_HTML = 2;
   */
  URL_HTML = 2,

  /**
   * @generated from enum value: URL_CLEAN = 3;
   */
  URL_CLEAN = 3,

  /**
   * @generated from enum value: TEXT_CLEAN = 4;
   */
  TEXT_CLEAN = 4,

  /**
   * @generated from enum value: AUDIO_TRANSCRIPT = 5;
   */
  AUDIO_TRANSCRIPT = 5,

  /**
   * @generated from enum value: GITHUB_README = 7;
   */
  GITHUB_README = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(NormalizerID)
proto3.util.setEnumType(NormalizerID, "lunabrain.NormalizerID", [
  { no: 0, name: "URL_YOUTUBE_TRANSCRIPT" },
  { no: 1, name: "URL_ARTICLE" },
  { no: 2, name: "URL_HTML" },
  { no: 3, name: "URL_CLEAN" },
  { no: 4, name: "TEXT_CLEAN" },
  { no: 5, name: "AUDIO_TRANSCRIPT" },
  { no: 7, name: "GITHUB_README" },
]);

/**
 * Should be in its own file
 *
 * @generated from enum lunabrain.TransformerID
 */
export enum TransformerID {
  /**
   * @generated from enum value: SUMMARY = 0;
   */
  SUMMARY = 0,

  /**
   * @generated from enum value: CATEGORIES = 1;
   */
  CATEGORIES = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(TransformerID)
proto3.util.setEnumType(TransformerID, "lunabrain.TransformerID", [
  { no: 0, name: "SUMMARY" },
  { no: 1, name: "CATEGORIES" },
]);

/**
 * Should be in its own file
 *
 * @generated from enum lunabrain.EntityType
 */
export enum EntityType {
  /**
   * @generated from enum value: URL_ENTITY = 0;
   */
  URL_ENTITY = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(EntityType)
proto3.util.setEnumType(EntityType, "lunabrain.EntityType", [
  { no: 0, name: "URL_ENTITY" },
]);

/**
 * @generated from message lunabrain.ReadMessagesRequest
 */
export class ReadMessagesRequest extends Message<ReadMessagesRequest> {
  /**
   * @generated from field: string channelID = 1;
   */
  channelID = "";

  /**
   * @generated from field: string lastMessageID = 2;
   */
  lastMessageID = "";

  constructor(data?: PartialMessage<ReadMessagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.ReadMessagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channelID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lastMessageID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadMessagesRequest {
    return new ReadMessagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadMessagesRequest {
    return new ReadMessagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadMessagesRequest {
    return new ReadMessagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadMessagesRequest | PlainMessage<ReadMessagesRequest> | undefined, b: ReadMessagesRequest | PlainMessage<ReadMessagesRequest> | undefined): boolean {
    return proto3.util.equals(ReadMessagesRequest, a, b);
  }
}

/**
 * @generated from message lunabrain.ReadMessagesResponse
 */
export class ReadMessagesResponse extends Message<ReadMessagesResponse> {
  /**
   * @generated from field: string messageID = 1;
   */
  messageID = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: string authorID = 3;
   */
  authorID = "";

  /**
   * @generated from field: string authorUsername = 4;
   */
  authorUsername = "";

  /**
   * @generated from field: string authorAvatar = 5;
   */
  authorAvatar = "";

  /**
   * @generated from field: string createdAt = 6;
   */
  createdAt = "";

  /**
   * @generated from field: string channelID = 7;
   */
  channelID = "";

  constructor(data?: PartialMessage<ReadMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.ReadMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messageID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "authorID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "authorUsername", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "authorAvatar", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "channelID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadMessagesResponse {
    return new ReadMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadMessagesResponse {
    return new ReadMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadMessagesResponse {
    return new ReadMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadMessagesResponse | PlainMessage<ReadMessagesResponse> | undefined, b: ReadMessagesResponse | PlainMessage<ReadMessagesResponse> | undefined): boolean {
    return proto3.util.equals(ReadMessagesResponse, a, b);
  }
}

/**
 * @generated from message lunabrain.WriteMessageRequest
 */
export class WriteMessageRequest extends Message<WriteMessageRequest> {
  /**
   * @generated from field: string channelID = 1;
   */
  channelID = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<WriteMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.WriteMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channelID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteMessageRequest {
    return new WriteMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteMessageRequest {
    return new WriteMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteMessageRequest {
    return new WriteMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WriteMessageRequest | PlainMessage<WriteMessageRequest> | undefined, b: WriteMessageRequest | PlainMessage<WriteMessageRequest> | undefined): boolean {
    return proto3.util.equals(WriteMessageRequest, a, b);
  }
}

/**
 * @generated from message lunabrain.WriteMessageResponse
 */
export class WriteMessageResponse extends Message<WriteMessageResponse> {
  /**
   * @generated from field: string messageID = 1;
   */
  messageID = "";

  constructor(data?: PartialMessage<WriteMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.WriteMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messageID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteMessageResponse {
    return new WriteMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteMessageResponse {
    return new WriteMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteMessageResponse {
    return new WriteMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WriteMessageResponse | PlainMessage<WriteMessageResponse> | undefined, b: WriteMessageResponse | PlainMessage<WriteMessageResponse> | undefined): boolean {
    return proto3.util.equals(WriteMessageResponse, a, b);
  }
}

/**
 * @generated from message lunabrain.Contents
 */
export class Contents extends Message<Contents> {
  /**
   * @generated from field: repeated lunabrain.Content contents = 1;
   */
  contents: Content[] = [];

  constructor(data?: PartialMessage<Contents>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.Contents";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contents", kind: "message", T: Content, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Contents {
    return new Contents().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Contents {
    return new Contents().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Contents {
    return new Contents().fromJsonString(jsonString, options);
  }

  static equals(a: Contents | PlainMessage<Contents> | undefined, b: Contents | PlainMessage<Contents> | undefined): boolean {
    return proto3.util.equals(Contents, a, b);
  }
}

/**
 * @generated from message lunabrain.Query
 */
export class Query extends Message<Query> {
  /**
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * @generated from field: uint32 page = 2;
   */
  page = 0;

  /**
   * @generated from field: string contentID = 3;
   */
  contentID = "";

  constructor(data?: PartialMessage<Query>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.Query";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "contentID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Query {
    return new Query().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Query {
    return new Query().fromJsonString(jsonString, options);
  }

  static equals(a: Query | PlainMessage<Query> | undefined, b: Query | PlainMessage<Query> | undefined): boolean {
    return proto3.util.equals(Query, a, b);
  }
}

/**
 * @generated from message lunabrain.Results
 */
export class Results extends Message<Results> {
  /**
   * @generated from field: repeated lunabrain.StoredContent storedContent = 1;
   */
  storedContent: StoredContent[] = [];

  constructor(data?: PartialMessage<Results>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.Results";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "storedContent", kind: "message", T: StoredContent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Results {
    return new Results().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Results {
    return new Results().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Results {
    return new Results().fromJsonString(jsonString, options);
  }

  static equals(a: Results | PlainMessage<Results> | undefined, b: Results | PlainMessage<Results> | undefined): boolean {
    return proto3.util.equals(Results, a, b);
  }
}

/**
 * @generated from message lunabrain.StoredContent
 */
export class StoredContent extends Message<StoredContent> {
  /**
   * @generated from field: lunabrain.Content content = 1;
   */
  content?: Content;

  /**
   * @generated from field: repeated lunabrain.NormalizedContent normalized = 2;
   */
  normalized: NormalizedContent[] = [];

  constructor(data?: PartialMessage<StoredContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.StoredContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "message", T: Content },
    { no: 2, name: "normalized", kind: "message", T: NormalizedContent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StoredContent {
    return new StoredContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StoredContent {
    return new StoredContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StoredContent {
    return new StoredContent().fromJsonString(jsonString, options);
  }

  static equals(a: StoredContent | PlainMessage<StoredContent> | undefined, b: StoredContent | PlainMessage<StoredContent> | undefined): boolean {
    return proto3.util.equals(StoredContent, a, b);
  }
}

/**
 * Content has data and metadata
 *
 * @generated from message lunabrain.Content
 */
export class Content extends Message<Content> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * @generated from field: lunabrain.ContentType type = 2;
   */
  type = ContentType.TEXT;

  /**
   * @generated from oneof lunabrain.Content.options
   */
  options: {
    /**
     * @generated from field: lunabrain.TextOptions textOptions = 3;
     */
    value: TextOptions;
    case: "textOptions";
  } | {
    /**
     * @generated from field: lunabrain.FileOptions fileOptions = 4;
     */
    value: FileOptions;
    case: "fileOptions";
  } | {
    /**
     * @generated from field: lunabrain.URLOptions urlOptions = 5;
     */
    value: URLOptions;
    case: "urlOptions";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: map<string, string> metadata = 6;
   */
  metadata: { [key: string]: string } = {};

  /**
   * @generated from field: string createdAt = 7;
   */
  createdAt = "";

  /**
   * @generated from field: string id = 8;
   */
  id = "";

  constructor(data?: PartialMessage<Content>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.Content";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ContentType) },
    { no: 3, name: "textOptions", kind: "message", T: TextOptions, oneof: "options" },
    { no: 4, name: "fileOptions", kind: "message", T: FileOptions, oneof: "options" },
    { no: 5, name: "urlOptions", kind: "message", T: URLOptions, oneof: "options" },
    { no: 6, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Content {
    return new Content().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Content {
    return new Content().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Content {
    return new Content().fromJsonString(jsonString, options);
  }

  static equals(a: Content | PlainMessage<Content> | undefined, b: Content | PlainMessage<Content> | undefined): boolean {
    return proto3.util.equals(Content, a, b);
  }
}

/**
 * @generated from message lunabrain.NormalizedContent
 */
export class NormalizedContent extends Message<NormalizedContent> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  /**
   * @generated from field: lunabrain.NormalizerID normalizerID = 2;
   */
  normalizerID = NormalizerID.URL_YOUTUBE_TRANSCRIPT;

  /**
   * @generated from field: string contentID = 3;
   */
  contentID = "";

  /**
   * @generated from field: repeated lunabrain.TransformedContent transformed = 4;
   */
  transformed: TransformedContent[] = [];

  constructor(data?: PartialMessage<NormalizedContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.NormalizedContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "normalizerID", kind: "enum", T: proto3.getEnumType(NormalizerID) },
    { no: 3, name: "contentID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "transformed", kind: "message", T: TransformedContent, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NormalizedContent {
    return new NormalizedContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NormalizedContent {
    return new NormalizedContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NormalizedContent {
    return new NormalizedContent().fromJsonString(jsonString, options);
  }

  static equals(a: NormalizedContent | PlainMessage<NormalizedContent> | undefined, b: NormalizedContent | PlainMessage<NormalizedContent> | undefined): boolean {
    return proto3.util.equals(NormalizedContent, a, b);
  }
}

/**
 * @generated from message lunabrain.TransformedContent
 */
export class TransformedContent extends Message<TransformedContent> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  /**
   * @generated from field: lunabrain.TransformerID transformerID = 2;
   */
  transformerID = TransformerID.SUMMARY;

  /**
   * @generated from field: string normalizedContentID = 3;
   */
  normalizedContentID = "";

  constructor(data?: PartialMessage<TransformedContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.TransformedContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transformerID", kind: "enum", T: proto3.getEnumType(TransformerID) },
    { no: 3, name: "normalizedContentID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TransformedContent {
    return new TransformedContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TransformedContent {
    return new TransformedContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TransformedContent {
    return new TransformedContent().fromJsonString(jsonString, options);
  }

  static equals(a: TransformedContent | PlainMessage<TransformedContent> | undefined, b: TransformedContent | PlainMessage<TransformedContent> | undefined): boolean {
    return proto3.util.equals(TransformedContent, a, b);
  }
}

/**
 * @generated from message lunabrain.File
 */
export class File extends Message<File> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

/**
 * @generated from message lunabrain.ContentIDs
 */
export class ContentIDs extends Message<ContentIDs> {
  /**
   * @generated from field: repeated lunabrain.ContentID contentIDs = 1;
   */
  contentIDs: ContentID[] = [];

  constructor(data?: PartialMessage<ContentIDs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.ContentIDs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contentIDs", kind: "message", T: ContentID, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContentIDs {
    return new ContentIDs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContentIDs {
    return new ContentIDs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContentIDs {
    return new ContentIDs().fromJsonString(jsonString, options);
  }

  static equals(a: ContentIDs | PlainMessage<ContentIDs> | undefined, b: ContentIDs | PlainMessage<ContentIDs> | undefined): boolean {
    return proto3.util.equals(ContentIDs, a, b);
  }
}

/**
 * @generated from message lunabrain.ContentID
 */
export class ContentID extends Message<ContentID> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ContentID>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.ContentID";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContentID {
    return new ContentID().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContentID {
    return new ContentID().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContentID {
    return new ContentID().fromJsonString(jsonString, options);
  }

  static equals(a: ContentID | PlainMessage<ContentID> | undefined, b: ContentID | PlainMessage<ContentID> | undefined): boolean {
    return proto3.util.equals(ContentID, a, b);
  }
}

/**
 * @generated from message lunabrain.TextOptions
 */
export class TextOptions extends Message<TextOptions> {
  /**
   * @generated from field: string data = 1;
   */
  data = "";

  constructor(data?: PartialMessage<TextOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.TextOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TextOptions {
    return new TextOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TextOptions {
    return new TextOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TextOptions {
    return new TextOptions().fromJsonString(jsonString, options);
  }

  static equals(a: TextOptions | PlainMessage<TextOptions> | undefined, b: TextOptions | PlainMessage<TextOptions> | undefined): boolean {
    return proto3.util.equals(TextOptions, a, b);
  }
}

/**
 * @generated from message lunabrain.FileOptions
 */
export class FileOptions extends Message<FileOptions> {
  /**
   * @generated from field: string file = 1;
   */
  file = "";

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<FileOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.FileOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileOptions {
    return new FileOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileOptions {
    return new FileOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileOptions {
    return new FileOptions().fromJsonString(jsonString, options);
  }

  static equals(a: FileOptions | PlainMessage<FileOptions> | undefined, b: FileOptions | PlainMessage<FileOptions> | undefined): boolean {
    return proto3.util.equals(FileOptions, a, b);
  }
}

/**
 * @generated from message lunabrain.URLOptions
 */
export class URLOptions extends Message<URLOptions> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: bool crawl = 2;
   */
  crawl = false;

  constructor(data?: PartialMessage<URLOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "lunabrain.URLOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "crawl", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): URLOptions {
    return new URLOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): URLOptions {
    return new URLOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): URLOptions {
    return new URLOptions().fromJsonString(jsonString, options);
  }

  static equals(a: URLOptions | PlainMessage<URLOptions> | undefined, b: URLOptions | PlainMessage<URLOptions> | undefined): boolean {
    return proto3.util.equals(URLOptions, a, b);
  }
}


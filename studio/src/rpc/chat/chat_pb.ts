// @generated by protoc-gen-es v1.3.1 with parameter "target=ts"
// @generated from file chat/chat.proto (package chat, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message chat.ReadMessagesRequest
 */
export class ReadMessagesRequest extends Message<ReadMessagesRequest> {
  /**
   * @generated from field: string channelID = 1;
   */
  channelID = "";

  /**
   * @generated from field: string lastMessageID = 2;
   */
  lastMessageID = "";

  constructor(data?: PartialMessage<ReadMessagesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.ReadMessagesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channelID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "lastMessageID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadMessagesRequest {
    return new ReadMessagesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadMessagesRequest {
    return new ReadMessagesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadMessagesRequest {
    return new ReadMessagesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadMessagesRequest | PlainMessage<ReadMessagesRequest> | undefined, b: ReadMessagesRequest | PlainMessage<ReadMessagesRequest> | undefined): boolean {
    return proto3.util.equals(ReadMessagesRequest, a, b);
  }
}

/**
 * @generated from message chat.ReadMessagesResponse
 */
export class ReadMessagesResponse extends Message<ReadMessagesResponse> {
  /**
   * @generated from field: string messageID = 1;
   */
  messageID = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  /**
   * @generated from field: string authorID = 3;
   */
  authorID = "";

  /**
   * @generated from field: string authorUsername = 4;
   */
  authorUsername = "";

  /**
   * @generated from field: string authorAvatar = 5;
   */
  authorAvatar = "";

  /**
   * @generated from field: string createdAt = 6;
   */
  createdAt = "";

  /**
   * @generated from field: string channelID = 7;
   */
  channelID = "";

  constructor(data?: PartialMessage<ReadMessagesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.ReadMessagesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messageID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "authorID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "authorUsername", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "authorAvatar", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "createdAt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "channelID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadMessagesResponse {
    return new ReadMessagesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadMessagesResponse {
    return new ReadMessagesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadMessagesResponse {
    return new ReadMessagesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadMessagesResponse | PlainMessage<ReadMessagesResponse> | undefined, b: ReadMessagesResponse | PlainMessage<ReadMessagesResponse> | undefined): boolean {
    return proto3.util.equals(ReadMessagesResponse, a, b);
  }
}

/**
 * @generated from message chat.WriteMessageRequest
 */
export class WriteMessageRequest extends Message<WriteMessageRequest> {
  /**
   * @generated from field: string channelID = 1;
   */
  channelID = "";

  /**
   * @generated from field: string content = 2;
   */
  content = "";

  constructor(data?: PartialMessage<WriteMessageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.WriteMessageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "channelID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteMessageRequest {
    return new WriteMessageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteMessageRequest {
    return new WriteMessageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteMessageRequest {
    return new WriteMessageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WriteMessageRequest | PlainMessage<WriteMessageRequest> | undefined, b: WriteMessageRequest | PlainMessage<WriteMessageRequest> | undefined): boolean {
    return proto3.util.equals(WriteMessageRequest, a, b);
  }
}

/**
 * @generated from message chat.WriteMessageResponse
 */
export class WriteMessageResponse extends Message<WriteMessageResponse> {
  /**
   * @generated from field: string messageID = 1;
   */
  messageID = "";

  constructor(data?: PartialMessage<WriteMessageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "chat.WriteMessageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "messageID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteMessageResponse {
    return new WriteMessageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteMessageResponse {
    return new WriteMessageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteMessageResponse {
    return new WriteMessageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WriteMessageResponse | PlainMessage<WriteMessageResponse> | undefined, b: WriteMessageResponse | PlainMessage<WriteMessageResponse> | undefined): boolean {
    return proto3.util.equals(WriteMessageResponse, a, b);
  }
}


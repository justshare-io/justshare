// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
//
// Source: content/content.proto
//

import Connect
import Foundation
import SwiftProtobuf

public protocol Content_ContentServiceClientInterface: Sendable {

    @discardableResult
    func `save`(request: Content_Contents, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Content_ContentIDs>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `save`(request: Content_Contents, headers: Connect.Headers) async -> ResponseMessage<Content_ContentIDs>

    @discardableResult
    func `search`(request: Content_Query, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Content_Results>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `search`(request: Content_Query, headers: Connect.Headers) async -> ResponseMessage<Content_Results>

    @discardableResult
    func `analyze`(request: Content_Content, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Content_Contents>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `analyze`(request: Content_Content, headers: Connect.Headers) async -> ResponseMessage<Content_Contents>

    @discardableResult
    func `delete`(request: Content_ContentIDs, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Content_ContentIDs>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `delete`(request: Content_ContentIDs, headers: Connect.Headers) async -> ResponseMessage<Content_ContentIDs>

    @discardableResult
    func `getTags`(request: SwiftProtobuf.Google_Protobuf_Empty, headers: Connect.Headers, completion: @escaping @Sendable (ResponseMessage<Content_Tags>) -> Void) -> Connect.Cancelable

    @available(iOS 13, *)
    func `getTags`(request: SwiftProtobuf.Google_Protobuf_Empty, headers: Connect.Headers) async -> ResponseMessage<Content_Tags>
}

/// Concrete implementation of `Content_ContentServiceClientInterface`.
public final class Content_ContentServiceClient: Content_ContentServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @discardableResult
    public func `save`(request: Content_Contents, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Content_ContentIDs>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/content.ContentService/Save", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `save`(request: Content_Contents, headers: Connect.Headers = [:]) async -> ResponseMessage<Content_ContentIDs> {
        return await self.client.unary(path: "/content.ContentService/Save", request: request, headers: headers)
    }

    @discardableResult
    public func `search`(request: Content_Query, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Content_Results>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/content.ContentService/Search", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `search`(request: Content_Query, headers: Connect.Headers = [:]) async -> ResponseMessage<Content_Results> {
        return await self.client.unary(path: "/content.ContentService/Search", request: request, headers: headers)
    }

    @discardableResult
    public func `analyze`(request: Content_Content, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Content_Contents>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/content.ContentService/Analyze", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `analyze`(request: Content_Content, headers: Connect.Headers = [:]) async -> ResponseMessage<Content_Contents> {
        return await self.client.unary(path: "/content.ContentService/Analyze", request: request, headers: headers)
    }

    @discardableResult
    public func `delete`(request: Content_ContentIDs, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Content_ContentIDs>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/content.ContentService/Delete", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `delete`(request: Content_ContentIDs, headers: Connect.Headers = [:]) async -> ResponseMessage<Content_ContentIDs> {
        return await self.client.unary(path: "/content.ContentService/Delete", request: request, headers: headers)
    }

    @discardableResult
    public func `getTags`(request: SwiftProtobuf.Google_Protobuf_Empty, headers: Connect.Headers = [:], completion: @escaping @Sendable (ResponseMessage<Content_Tags>) -> Void) -> Connect.Cancelable {
        return self.client.unary(path: "/content.ContentService/GetTags", request: request, headers: headers, completion: completion)
    }

    @available(iOS 13, *)
    public func `getTags`(request: SwiftProtobuf.Google_Protobuf_Empty, headers: Connect.Headers = [:]) async -> ResponseMessage<Content_Tags> {
        return await self.client.unary(path: "/content.ContentService/GetTags", request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let save = Connect.MethodSpec(name: "Save", service: "content.ContentService", type: .unary)
            public static let search = Connect.MethodSpec(name: "Search", service: "content.ContentService", type: .unary)
            public static let analyze = Connect.MethodSpec(name: "Analyze", service: "content.ContentService", type: .unary)
            public static let delete = Connect.MethodSpec(name: "Delete", service: "content.ContentService", type: .unary)
            public static let getTags = Connect.MethodSpec(name: "GetTags", service: "content.ContentService", type: .unary)
        }
    }
}

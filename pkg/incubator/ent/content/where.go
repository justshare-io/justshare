// Code generated by ent, DO NOT EDIT.

package content

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/lunabrain-ai/lunabrain/pkg/incubator/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldID, id))
}

// Root applies equality check predicate on the "root" field. It's identical to RootEQ.
func Root(v bool) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldRoot, v))
}

// VisitCount applies equality check predicate on the "visit_count" field. It's identical to VisitCountEQ.
func VisitCount(v int64) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldVisitCount, v))
}

// RootEQ applies the EQ predicate on the "root" field.
func RootEQ(v bool) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldRoot, v))
}

// RootNEQ applies the NEQ predicate on the "root" field.
func RootNEQ(v bool) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldRoot, v))
}

// VisitCountEQ applies the EQ predicate on the "visit_count" field.
func VisitCountEQ(v int64) predicate.Content {
	return predicate.Content(sql.FieldEQ(FieldVisitCount, v))
}

// VisitCountNEQ applies the NEQ predicate on the "visit_count" field.
func VisitCountNEQ(v int64) predicate.Content {
	return predicate.Content(sql.FieldNEQ(FieldVisitCount, v))
}

// VisitCountIn applies the In predicate on the "visit_count" field.
func VisitCountIn(vs ...int64) predicate.Content {
	return predicate.Content(sql.FieldIn(FieldVisitCount, vs...))
}

// VisitCountNotIn applies the NotIn predicate on the "visit_count" field.
func VisitCountNotIn(vs ...int64) predicate.Content {
	return predicate.Content(sql.FieldNotIn(FieldVisitCount, vs...))
}

// VisitCountGT applies the GT predicate on the "visit_count" field.
func VisitCountGT(v int64) predicate.Content {
	return predicate.Content(sql.FieldGT(FieldVisitCount, v))
}

// VisitCountGTE applies the GTE predicate on the "visit_count" field.
func VisitCountGTE(v int64) predicate.Content {
	return predicate.Content(sql.FieldGTE(FieldVisitCount, v))
}

// VisitCountLT applies the LT predicate on the "visit_count" field.
func VisitCountLT(v int64) predicate.Content {
	return predicate.Content(sql.FieldLT(FieldVisitCount, v))
}

// VisitCountLTE applies the LTE predicate on the "visit_count" field.
func VisitCountLTE(v int64) predicate.Content {
	return predicate.Content(sql.FieldLTE(FieldVisitCount, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, ChildrenTable, ChildrenPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Content) predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParents applies the HasEdge predicate on the "parents" edge.
func HasParents() predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, ParentsTable, ParentsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentsWith applies the HasEdge predicate on the "parents" edge with a given conditions (other predicates).
func HasParentsWith(preds ...predicate.Content) predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := newParentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVotes applies the HasEdge predicate on the "votes" edge.
func HasVotes() predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, VotesTable, VotesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVotesWith applies the HasEdge predicate on the "votes" edge with a given conditions (other predicates).
func HasVotesWith(preds ...predicate.Vote) predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := newVotesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGroups applies the HasEdge predicate on the "groups" edge.
func HasGroups() predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, GroupsTable, GroupsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupsWith applies the HasEdge predicate on the "groups" edge with a given conditions (other predicates).
func HasGroupsWith(preds ...predicate.Group) predicate.Content {
	return predicate.Content(func(s *sql.Selector) {
		step := newGroupsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Content) predicate.Content {
	return predicate.Content(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Content) predicate.Content {
	return predicate.Content(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Content) predicate.Content {
	return predicate.Content(sql.NotPredicates(p))
}

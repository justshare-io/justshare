// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cli

import (
	"github.com/justshare-io/justshare/pkg/bucket"
	"github.com/justshare-io/justshare/pkg/chat"
	"github.com/justshare-io/justshare/pkg/config"
	"github.com/justshare-io/justshare/pkg/content"
	"github.com/justshare-io/justshare/pkg/content/normalize"
	"github.com/justshare-io/justshare/pkg/content/store"
	"github.com/justshare-io/justshare/pkg/db"
	"github.com/justshare-io/justshare/pkg/event"
	"github.com/justshare-io/justshare/pkg/group"
	"github.com/justshare-io/justshare/pkg/http"
	"github.com/justshare-io/justshare/pkg/kubes"
	"github.com/justshare-io/justshare/pkg/log"
	"github.com/justshare-io/justshare/pkg/providers/openai"
	"github.com/justshare-io/justshare/pkg/providers/whisper"
	"github.com/justshare-io/justshare/pkg/server"
	"github.com/justshare-io/justshare/pkg/user"
	"github.com/urfave/cli/v2"
)

// Injectors from wire.go:

func Wire() (*cli.App, error) {
	provider, err := config.NewConfigProvider()
	if err != nil {
		return nil, err
	}
	logConfig, err := log.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	logLog := log.NewLog(logConfig)
	contentConfig, err := content.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	dbConfig, err := db.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	client, err := db.NewEnt(dbConfig)
	if err != nil {
		return nil, err
	}
	entStore := store.NewEntStore(client)
	sessionManager, err := http.NewSession(client)
	if err != nil {
		return nil, err
	}
	openaiConfig, err := openai.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	agent, err := openai.NewAgent(openaiConfig)
	if err != nil {
		return nil, err
	}
	bucketConfig, err := bucket.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	builder, err := bucket.NewBuilder(bucketConfig)
	if err != nil {
		return nil, err
	}
	bucketBucket, err := bucket.New(bucketConfig)
	if err != nil {
		return nil, err
	}
	whisperConfig, err := whisper.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	whisperClient := whisper.NewClient(whisperConfig, openaiConfig, builder)
	normalizeNormalize := normalize.New(builder, bucketBucket, whisperClient, entStore)
	service := content.NewService(entStore, sessionManager, agent, normalizeNormalize, bucketBucket, builder, whisperClient)
	groupEntStore := group.NewEntStore(client)
	userEntStore := user.NewEntStore(client)
	userConfig, err := user.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	userService := user.NewService(groupEntStore, sessionManager, userEntStore, userConfig)
	chatService := chat.New(sessionManager, userEntStore)
	eventEntStore := event.NewEntStore(client)
	eventConfig, err := event.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	eventService := event.NewService(sessionManager, eventEntStore, eventConfig)
	kubesConfig, err := kubes.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	kubesService, err := kubes.New(kubesConfig, openaiConfig, contentConfig)
	if err != nil {
		return nil, err
	}
	apihttpServer := server.New(contentConfig, service, builder, sessionManager, userService, chatService, eventService, kubesService)
	app := NewApp(logLog, apihttpServer)
	return app, nil
}

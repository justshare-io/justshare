// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cli

import (
	"github.com/breadchris/scs/v2"
	"github.com/lunabrain-ai/lunabrain/pkg/api"
	"github.com/lunabrain-ai/lunabrain/pkg/chat/discord"
	"github.com/lunabrain-ai/lunabrain/pkg/config"
	"github.com/lunabrain-ai/lunabrain/pkg/pipeline"
	"github.com/lunabrain-ai/lunabrain/pkg/pipeline/collect"
	"github.com/lunabrain-ai/lunabrain/pkg/pipeline/normalize"
	"github.com/lunabrain-ai/lunabrain/pkg/pipeline/transform"
	"github.com/lunabrain-ai/lunabrain/pkg/protoflow"
	"github.com/lunabrain-ai/lunabrain/pkg/publish"
	"github.com/lunabrain-ai/lunabrain/pkg/python"
	"github.com/lunabrain-ai/lunabrain/pkg/scrape"
	"github.com/lunabrain-ai/lunabrain/pkg/server"
	"github.com/lunabrain-ai/lunabrain/pkg/store/bucket"
	"github.com/lunabrain-ai/lunabrain/pkg/store/db"
	"github.com/protoflow-labs/protoflow/pkg/log"
	"github.com/protoflow-labs/protoflow/pkg/openai"
	"github.com/urfave/cli/v2"
)

// Injectors from wire.go:

func Wire() (*cli.App, error) {
	provider, err := config.NewConfigProvider()
	if err != nil {
		return nil, err
	}
	logConfig, err := log.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	logLog := log.NewLog(logConfig)
	apiConfig, err := api.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	dbConfig, err := db.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	bucketConfig, err := bucket.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	bucketBucket, err := bucket.New(bucketConfig)
	if err != nil {
		return nil, err
	}
	gormDB, err := db.NewGormDB(dbConfig, bucketBucket)
	if err != nil {
		return nil, err
	}
	dbStore, err := db.New(gormDB)
	if err != nil {
		return nil, err
	}
	pythonConfig, err := python.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	pythonClient, err := python.NewPythonClient(pythonConfig)
	if err != nil {
		return nil, err
	}
	audioNormalizer, err := normalize.NewAudioNormalizer(pythonClient)
	if err != nil {
		return nil, err
	}
	normalizeConfig, err := normalize.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	scrapeConfig, err := scrape.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	scraper := scrape.NewScraper(scrapeConfig, dbStore)
	crawler := scrape.NewCrawler(bucketBucket)
	urlNormalizer, err := normalize.NewURLNormalizer(normalizeConfig, pythonClient, scraper, crawler)
	if err != nil {
		return nil, err
	}
	normalizer, err := normalize.NewNormalizer(audioNormalizer, urlNormalizer, dbStore, pythonClient, bucketBucket)
	if err != nil {
		return nil, err
	}
	summarize, err := transform.NewSummarize(pythonClient)
	if err != nil {
		return nil, err
	}
	categorize, err := transform.NewCategorize(pythonClient)
	if err != nil {
		return nil, err
	}
	discordConfig, err := discord.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	session, err := discord.NewDiscordSession(discordConfig)
	if err != nil {
		return nil, err
	}
	discordSession, err := discord.NewSession(discordConfig, session)
	if err != nil {
		return nil, err
	}
	publishConfig, err := publish.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	publishDiscord := publish.NewDiscord(discordSession, publishConfig, dbStore)
	publishPublish := publish.NewPublisher(publishDiscord)
	contentWorkflow := pipeline.NewContentWorkflow(dbStore, normalizer, summarize, categorize, bucketBucket, publishPublish)
	apiServer := api.NewAPIServer(dbStore, contentWorkflow)
	discordService := discord.New(discordSession)
	openaiConfig, err := openai.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	openAIQAClient, err := openai.NewOpenAIQAClient(openaiConfig)
	if err != nil {
		return nil, err
	}
	dbSession, err := db.NewSession(gormDB)
	if err != nil {
		return nil, err
	}
	sessionManager := scs.New()
	protoflowProtoflow := protoflow.New(openAIQAClient, dbSession, bucketBucket, sessionManager)
	protoflow2, err := protoflow.NewProtoflow()
	if err != nil {
		return nil, err
	}
	apihttpServer := server.NewAPIHTTPServer(apiConfig, apiServer, dbStore, bucketBucket, discordService, protoflowProtoflow, protoflow2, sessionManager)
	discordCollector := collect.NewDiscordCollector(session, dbStore, contentWorkflow)
	hnCollect := collect.NewHNCollector(dbStore, contentWorkflow)
	app := NewApp(logLog, apihttpServer, normalizer, summarize, discordCollector, hnCollect)
	return app, nil
}

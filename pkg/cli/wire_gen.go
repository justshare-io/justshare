// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cli

import (
	"github.com/lunabrain-ai/lunabrain/pkg/chat/discord"
	"github.com/lunabrain-ai/lunabrain/pkg/config"
	"github.com/lunabrain-ai/lunabrain/pkg/content"
	"github.com/lunabrain-ai/lunabrain/pkg/db"
	"github.com/lunabrain-ai/lunabrain/pkg/http"
	"github.com/lunabrain-ai/lunabrain/pkg/openai"
	"github.com/lunabrain-ai/lunabrain/pkg/pipeline/collect"
	"github.com/lunabrain-ai/lunabrain/pkg/protoflow"
	"github.com/lunabrain-ai/lunabrain/pkg/server"
	"github.com/lunabrain-ai/lunabrain/pkg/store/bucket"
	"github.com/lunabrain-ai/lunabrain/pkg/whisper"
	"github.com/protoflow-labs/protoflow/pkg/log"
	"github.com/urfave/cli/v2"
)

// Injectors from wire.go:

func Wire() (*cli.App, error) {
	provider, err := config.NewConfigProvider()
	if err != nil {
		return nil, err
	}
	logConfig, err := log.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	logLog := log.NewLog(logConfig)
	contentConfig, err := content.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	dbConfig, err := db.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	bucketConfig, err := bucket.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	bucketBucket, err := bucket.New(bucketConfig)
	if err != nil {
		return nil, err
	}
	gormDB, err := db.NewGormDB(dbConfig, bucketBucket)
	if err != nil {
		return nil, err
	}
	store, err := db.New(gormDB)
	if err != nil {
		return nil, err
	}
	service := content.NewAPIServer(store)
	discordConfig, err := discord.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	session, err := discord.NewDiscordSession(discordConfig)
	if err != nil {
		return nil, err
	}
	discordSession, err := discord.NewSession(discordConfig, session)
	if err != nil {
		return nil, err
	}
	discordService := discord.New(discordSession)
	openaiConfig, err := openai.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	agent, err := openai.NewAgent(openaiConfig)
	if err != nil {
		return nil, err
	}
	dbSession, err := db.NewSession(gormDB)
	if err != nil {
		return nil, err
	}
	sessionManager, err := http.NewSession(gormDB)
	if err != nil {
		return nil, err
	}
	protoflowConfig, err := protoflow.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	whisperConfig, err := whisper.NewConfig(provider)
	if err != nil {
		return nil, err
	}
	client := whisper.NewClient(whisperConfig, openaiConfig, bucketBucket)
	protoflowProtoflow := protoflow.New(agent, dbSession, bucketBucket, sessionManager, protoflowConfig, client)
	apihttpServer := server.NewAPIHTTPServer(contentConfig, service, store, bucketBucket, discordService, protoflowProtoflow, sessionManager)
	discordCollector := collect.NewDiscordCollector(session, store)
	hnCollect := collect.NewHNCollector(store)
	app := NewApp(logLog, apihttpServer, discordCollector, hnCollect)
	return app, nil
}

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bucket/bucket.proto

package bucketconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	bucket "github.com/justshare-io/justshare/pkg/gen/bucket"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BucketServiceName is the fully-qualified name of the BucketService service.
	BucketServiceName = "bucket.BucketService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BucketServiceSignedURLProcedure is the fully-qualified name of the BucketService's SignedURL RPC.
	BucketServiceSignedURLProcedure = "/bucket.BucketService/SignedURL"
	// BucketServiceReaddirProcedure is the fully-qualified name of the BucketService's Readdir RPC.
	BucketServiceReaddirProcedure = "/bucket.BucketService/Readdir"
	// BucketServiceRemoveProcedure is the fully-qualified name of the BucketService's Remove RPC.
	BucketServiceRemoveProcedure = "/bucket.BucketService/Remove"
)

// BucketServiceClient is a client for the bucket.BucketService service.
type BucketServiceClient interface {
	SignedURL(context.Context, *connect_go.Request[bucket.SignedURLRequest]) (*connect_go.Response[bucket.SignedURLResponse], error)
	Readdir(context.Context, *connect_go.Request[bucket.ReaddirRequest]) (*connect_go.Response[bucket.ReaddirResponse], error)
	Remove(context.Context, *connect_go.Request[bucket.RemoveRequest]) (*connect_go.Response[bucket.RemoveResponse], error)
}

// NewBucketServiceClient constructs a client for the bucket.BucketService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBucketServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BucketServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bucketServiceClient{
		signedURL: connect_go.NewClient[bucket.SignedURLRequest, bucket.SignedURLResponse](
			httpClient,
			baseURL+BucketServiceSignedURLProcedure,
			opts...,
		),
		readdir: connect_go.NewClient[bucket.ReaddirRequest, bucket.ReaddirResponse](
			httpClient,
			baseURL+BucketServiceReaddirProcedure,
			opts...,
		),
		remove: connect_go.NewClient[bucket.RemoveRequest, bucket.RemoveResponse](
			httpClient,
			baseURL+BucketServiceRemoveProcedure,
			opts...,
		),
	}
}

// bucketServiceClient implements BucketServiceClient.
type bucketServiceClient struct {
	signedURL *connect_go.Client[bucket.SignedURLRequest, bucket.SignedURLResponse]
	readdir   *connect_go.Client[bucket.ReaddirRequest, bucket.ReaddirResponse]
	remove    *connect_go.Client[bucket.RemoveRequest, bucket.RemoveResponse]
}

// SignedURL calls bucket.BucketService.SignedURL.
func (c *bucketServiceClient) SignedURL(ctx context.Context, req *connect_go.Request[bucket.SignedURLRequest]) (*connect_go.Response[bucket.SignedURLResponse], error) {
	return c.signedURL.CallUnary(ctx, req)
}

// Readdir calls bucket.BucketService.Readdir.
func (c *bucketServiceClient) Readdir(ctx context.Context, req *connect_go.Request[bucket.ReaddirRequest]) (*connect_go.Response[bucket.ReaddirResponse], error) {
	return c.readdir.CallUnary(ctx, req)
}

// Remove calls bucket.BucketService.Remove.
func (c *bucketServiceClient) Remove(ctx context.Context, req *connect_go.Request[bucket.RemoveRequest]) (*connect_go.Response[bucket.RemoveResponse], error) {
	return c.remove.CallUnary(ctx, req)
}

// BucketServiceHandler is an implementation of the bucket.BucketService service.
type BucketServiceHandler interface {
	SignedURL(context.Context, *connect_go.Request[bucket.SignedURLRequest]) (*connect_go.Response[bucket.SignedURLResponse], error)
	Readdir(context.Context, *connect_go.Request[bucket.ReaddirRequest]) (*connect_go.Response[bucket.ReaddirResponse], error)
	Remove(context.Context, *connect_go.Request[bucket.RemoveRequest]) (*connect_go.Response[bucket.RemoveResponse], error)
}

// NewBucketServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBucketServiceHandler(svc BucketServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	bucketServiceSignedURLHandler := connect_go.NewUnaryHandler(
		BucketServiceSignedURLProcedure,
		svc.SignedURL,
		opts...,
	)
	bucketServiceReaddirHandler := connect_go.NewUnaryHandler(
		BucketServiceReaddirProcedure,
		svc.Readdir,
		opts...,
	)
	bucketServiceRemoveHandler := connect_go.NewUnaryHandler(
		BucketServiceRemoveProcedure,
		svc.Remove,
		opts...,
	)
	return "/bucket.BucketService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BucketServiceSignedURLProcedure:
			bucketServiceSignedURLHandler.ServeHTTP(w, r)
		case BucketServiceReaddirProcedure:
			bucketServiceReaddirHandler.ServeHTTP(w, r)
		case BucketServiceRemoveProcedure:
			bucketServiceRemoveHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBucketServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBucketServiceHandler struct{}

func (UnimplementedBucketServiceHandler) SignedURL(context.Context, *connect_go.Request[bucket.SignedURLRequest]) (*connect_go.Response[bucket.SignedURLResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bucket.BucketService.SignedURL is not implemented"))
}

func (UnimplementedBucketServiceHandler) Readdir(context.Context, *connect_go.Request[bucket.ReaddirRequest]) (*connect_go.Response[bucket.ReaddirResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bucket.BucketService.Readdir is not implemented"))
}

func (UnimplementedBucketServiceHandler) Remove(context.Context, *connect_go.Request[bucket.RemoveRequest]) (*connect_go.Response[bucket.RemoveResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bucket.BucketService.Remove is not implemented"))
}
